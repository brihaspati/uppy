(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){

/**
 * Expose `Emitter`.
 */

exports.Emitter = Emitter;

/**
 * Initialize a new `Emitter`.
 *
 * @api public
 */

function Emitter(obj) {
  if (obj) return mixin(obj);
}

/**
 * Mixin the emitter properties.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */

function mixin(obj) {
  for (var key in Emitter.prototype) {
    obj[key] = Emitter.prototype[key];
  }
  return obj;
}

/**
 * Listen on the given `event` with `fn`.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.on =
Emitter.prototype.addEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};
  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])
    .push(fn);
  return this;
};

/**
 * Adds an `event` listener that will be invoked a single
 * time then automatically removed.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.once = function(event, fn){
  function on() {
    this.off(event, on);
    fn.apply(this, arguments);
  }

  on.fn = fn;
  this.on(event, on);
  return this;
};

/**
 * Remove the given callback for `event` or all
 * registered callbacks.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.off =
Emitter.prototype.removeListener =
Emitter.prototype.removeAllListeners =
Emitter.prototype.removeEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};

  // all
  if (0 == arguments.length) {
    this._callbacks = {};
    return this;
  }

  // specific event
  var callbacks = this._callbacks['$' + event];
  if (!callbacks) return this;

  // remove all handlers
  if (1 == arguments.length) {
    delete this._callbacks['$' + event];
    return this;
  }

  // remove specific handler
  var cb;
  for (var i = 0; i < callbacks.length; i++) {
    cb = callbacks[i];
    if (cb === fn || cb.fn === fn) {
      callbacks.splice(i, 1);
      break;
    }
  }

  // Remove event specific arrays for event types that no
  // one is subscribed for to avoid memory leak.
  if (callbacks.length === 0) {
    delete this._callbacks['$' + event];
  }

  return this;
};

/**
 * Emit `event` with the given args.
 *
 * @param {String} event
 * @param {Mixed} ...
 * @return {Emitter}
 */

Emitter.prototype.emit = function(event){
  this._callbacks = this._callbacks || {};

  var args = new Array(arguments.length - 1)
    , callbacks = this._callbacks['$' + event];

  for (var i = 1; i < arguments.length; i++) {
    args[i - 1] = arguments[i];
  }

  if (callbacks) {
    callbacks = callbacks.slice(0);
    for (var i = 0, len = callbacks.length; i < len; ++i) {
      callbacks[i].apply(this, args);
    }
  }

  return this;
};

// alias used for reserved events (protected method)
Emitter.prototype.emitReserved = Emitter.prototype.emit;

/**
 * Return array of callbacks for `event`.
 *
 * @param {String} event
 * @return {Array}
 * @api public
 */

Emitter.prototype.listeners = function(event){
  this._callbacks = this._callbacks || {};
  return this._callbacks['$' + event] || [];
};

/**
 * Check if this emitter has `event` handlers.
 *
 * @param {String} event
 * @return {Boolean}
 * @api public
 */

Emitter.prototype.hasListeners = function(event){
  return !! this.listeners(event).length;
};

},{}],2:[function(require,module,exports){
// Adapted from https://github.com/Flet/prettier-bytes/
// Changing 1000 bytes to 1024, so we can keep uppercase KB vs kB
// ISC License (c) Dan Flettre https://github.com/Flet/prettier-bytes/blob/master/LICENSE
module.exports = function prettierBytes (num) {
  if (typeof num !== 'number' || isNaN(num)) {
    throw new TypeError('Expected a number, got ' + typeof num)
  }

  var neg = num < 0
  var units = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']

  if (neg) {
    num = -num
  }

  if (num < 1) {
    return (neg ? '-' : '') + num + ' B'
  }

  var exponent = Math.min(Math.floor(Math.log(num) / Math.log(1024)), units.length - 1)
  num = Number(num / Math.pow(1024, exponent))
  var unit = units[exponent]

  if (num >= 10 || num % 1 === 0) {
    // Do not show decimals when the number is two-digit, or if the number has no
    // decimal component.
    return (neg ? '-' : '') + num.toFixed(0) + ' ' + unit
  } else {
    return (neg ? '-' : '') + num.toFixed(1) + ' ' + unit
  }
}

},{}],3:[function(require,module,exports){

/**
 * Expose `Backoff`.
 */

module.exports = Backoff;

/**
 * Initialize backoff timer with `opts`.
 *
 * - `min` initial timeout in milliseconds [100]
 * - `max` max timeout [10000]
 * - `jitter` [0]
 * - `factor` [2]
 *
 * @param {Object} opts
 * @api public
 */

function Backoff(opts) {
  opts = opts || {};
  this.ms = opts.min || 100;
  this.max = opts.max || 10000;
  this.factor = opts.factor || 2;
  this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;
  this.attempts = 0;
}

/**
 * Return the backoff duration.
 *
 * @return {Number}
 * @api public
 */

Backoff.prototype.duration = function(){
  var ms = this.ms * Math.pow(this.factor, this.attempts++);
  if (this.jitter) {
    var rand =  Math.random();
    var deviation = Math.floor(rand * this.jitter * ms);
    ms = (Math.floor(rand * 10) & 1) == 0  ? ms - deviation : ms + deviation;
  }
  return Math.min(ms, this.max) | 0;
};

/**
 * Reset the number of attempts.
 *
 * @api public
 */

Backoff.prototype.reset = function(){
  this.attempts = 0;
};

/**
 * Set the minimum duration
 *
 * @api public
 */

Backoff.prototype.setMin = function(min){
  this.ms = min;
};

/**
 * Set the maximum duration
 *
 * @api public
 */

Backoff.prototype.setMax = function(max){
  this.max = max;
};

/**
 * Set the jitter
 *
 * @api public
 */

Backoff.prototype.setJitter = function(jitter){
  this.jitter = jitter;
};


},{}],4:[function(require,module,exports){
/*
 * base64-arraybuffer 1.0.1 <https://github.com/niklasvh/base64-arraybuffer>
 * Copyright (c) 2021 Niklas von Hertzen <https://hertzen.com>
 * Released under MIT License
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define(['exports'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global['base64-arraybuffer'] = {}));
}(this, (function (exports) { 'use strict';

    var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
    // Use a lookup table to find the index.
    var lookup = typeof Uint8Array === 'undefined' ? [] : new Uint8Array(256);
    for (var i = 0; i < chars.length; i++) {
        lookup[chars.charCodeAt(i)] = i;
    }
    var encode = function (arraybuffer) {
        var bytes = new Uint8Array(arraybuffer), i, len = bytes.length, base64 = '';
        for (i = 0; i < len; i += 3) {
            base64 += chars[bytes[i] >> 2];
            base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];
            base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];
            base64 += chars[bytes[i + 2] & 63];
        }
        if (len % 3 === 2) {
            base64 = base64.substring(0, base64.length - 1) + '=';
        }
        else if (len % 3 === 1) {
            base64 = base64.substring(0, base64.length - 2) + '==';
        }
        return base64;
    };
    var decode = function (base64) {
        var bufferLength = base64.length * 0.75, len = base64.length, i, p = 0, encoded1, encoded2, encoded3, encoded4;
        if (base64[base64.length - 1] === '=') {
            bufferLength--;
            if (base64[base64.length - 2] === '=') {
                bufferLength--;
            }
        }
        var arraybuffer = new ArrayBuffer(bufferLength), bytes = new Uint8Array(arraybuffer);
        for (i = 0; i < len; i += 4) {
            encoded1 = lookup[base64.charCodeAt(i)];
            encoded2 = lookup[base64.charCodeAt(i + 1)];
            encoded3 = lookup[base64.charCodeAt(i + 2)];
            encoded4 = lookup[base64.charCodeAt(i + 3)];
            bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);
            bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);
            bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);
        }
        return arraybuffer;
    };

    exports.decode = decode;
    exports.encode = encode;

    Object.defineProperty(exports, '__esModule', { value: true });

})));


},{}],5:[function(require,module,exports){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}

},{}],6:[function(require,module,exports){
(function (Buffer){(function (){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

var K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function () { return 42 } }
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

Object.defineProperty(Buffer.prototype, 'parent', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.buffer
  }
})

Object.defineProperty(Buffer.prototype, 'offset', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.byteOffset
  }
})

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('The value "' + length + '" is invalid for option "size"')
  }
  // Return an augmented `Uint8Array` instance
  var buf = new Uint8Array(length)
  buf.__proto__ = Buffer.prototype
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new TypeError(
        'The "string" argument must be of type string. Received type number'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
if (typeof Symbol !== 'undefined' && Symbol.species != null &&
    Buffer[Symbol.species] === Buffer) {
  Object.defineProperty(Buffer, Symbol.species, {
    value: null,
    configurable: true,
    enumerable: false,
    writable: false
  })
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  if (ArrayBuffer.isView(value)) {
    return fromArrayLike(value)
  }

  if (value == null) {
    throw TypeError(
      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
      'or Array-like Object. Received type ' + (typeof value)
    )
  }

  if (isInstance(value, ArrayBuffer) ||
      (value && isInstance(value.buffer, ArrayBuffer))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'number') {
    throw new TypeError(
      'The "value" argument must not be of type number. Received type number'
    )
  }

  var valueOf = value.valueOf && value.valueOf()
  if (valueOf != null && valueOf !== value) {
    return Buffer.from(valueOf, encodingOrOffset, length)
  }

  var b = fromObject(value)
  if (b) return b

  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
      typeof value[Symbol.toPrimitive] === 'function') {
    return Buffer.from(
      value[Symbol.toPrimitive]('string'), encodingOrOffset, length
    )
  }

  throw new TypeError(
    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
    'or Array-like Object. Received type ' + (typeof value)
  )
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Buffer.prototype.__proto__ = Uint8Array.prototype
Buffer.__proto__ = Uint8Array

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be of type number')
  } else if (size < 0) {
    throw new RangeError('The value "' + size + '" is invalid for option "size"')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('Unknown encoding: ' + encoding)
  }

  var length = byteLength(string, encoding) | 0
  var buf = createBuffer(length)

  var actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  var buf = createBuffer(length)
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('"offset" is outside of buffer bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('"length" is outside of buffer bounds')
  }

  var buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  buf.__proto__ = Buffer.prototype
  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    var buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj.length !== undefined) {
    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
      return createBuffer(0)
    }
    return fromArrayLike(obj)
  }

  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
    return fromArrayLike(obj.data)
  }
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true &&
    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
}

Buffer.compare = function compare (a, b) {
  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)
  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError(
      'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
    )
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (isInstance(buf, Uint8Array)) {
      buf = Buffer.from(buf)
    }
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    throw new TypeError(
      'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
      'Received type ' + typeof string
    )
  }

  var len = string.length
  var mustMatch = (arguments.length > 2 && arguments[2] === true)
  if (!mustMatch && len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) {
          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
        }
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.toLocaleString = Buffer.prototype.toString

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()
  if (this.length > max) str += ' ... '
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (isInstance(target, Uint8Array)) {
    target = Buffer.from(target, target.offset, target.byteLength)
  }
  if (!Buffer.isBuffer(target)) {
    throw new TypeError(
      'The "target" argument must be one of type Buffer or Uint8Array. ' +
      'Received type ' + (typeof target)
    )
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  var strLen = string.length

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
        : (firstByte > 0xBF) ? 2
          : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  newBuf.__proto__ = Buffer.prototype
  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start

  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
    // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end)
  } else if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (var i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, end),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if ((encoding === 'utf8' && code < 128) ||
          encoding === 'latin1') {
        // Fast path: If `val` fits into a single byte, use that numeric value.
        val = code
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : Buffer.from(val, encoding)
    var len = bytes.length
    if (len === 0) {
      throw new TypeError('The value "' + val +
        '" is invalid for argument "value"')
    }
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node takes equal signs as end of the Base64 encoding
  str = str.split('=')[0]
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance (obj, type) {
  return obj instanceof type ||
    (obj != null && obj.constructor != null && obj.constructor.name != null &&
      obj.constructor.name === type.name)
}
function numberIsNaN (obj) {
  // For IE11 support
  return obj !== obj // eslint-disable-line no-self-compare
}

}).call(this)}).call(this,require("buffer").Buffer)

},{"base64-js":5,"buffer":6,"ieee754":20}],7:[function(require,module,exports){
/*!
  Copyright (c) 2018 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
/* global define */

(function () {
	'use strict';

	var hasOwn = {}.hasOwnProperty;

	function classNames() {
		var classes = [];

		for (var i = 0; i < arguments.length; i++) {
			var arg = arguments[i];
			if (!arg) continue;

			var argType = typeof arg;

			if (argType === 'string' || argType === 'number') {
				classes.push(arg);
			} else if (Array.isArray(arg)) {
				if (arg.length) {
					var inner = classNames.apply(null, arg);
					if (inner) {
						classes.push(inner);
					}
				}
			} else if (argType === 'object') {
				if (arg.toString === Object.prototype.toString) {
					for (var key in arg) {
						if (hasOwn.call(arg, key) && arg[key]) {
							classes.push(key);
						}
					}
				} else {
					classes.push(arg.toString());
				}
			}
		}

		return classes.join(' ');
	}

	if (typeof module !== 'undefined' && module.exports) {
		classNames.default = classNames;
		module.exports = classNames;
	} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {
		// register as 'classnames', consistent with npm package name
		define('classnames', [], function () {
			return classNames;
		});
	} else {
		window.classNames = classNames;
	}
}());

},{}],8:[function(require,module,exports){

/**
 * Expose `Emitter`.
 */

if (typeof module !== 'undefined') {
  module.exports = Emitter;
}

/**
 * Initialize a new `Emitter`.
 *
 * @api public
 */

function Emitter(obj) {
  if (obj) return mixin(obj);
};

/**
 * Mixin the emitter properties.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */

function mixin(obj) {
  for (var key in Emitter.prototype) {
    obj[key] = Emitter.prototype[key];
  }
  return obj;
}

/**
 * Listen on the given `event` with `fn`.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.on =
Emitter.prototype.addEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};
  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])
    .push(fn);
  return this;
};

/**
 * Adds an `event` listener that will be invoked a single
 * time then automatically removed.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.once = function(event, fn){
  function on() {
    this.off(event, on);
    fn.apply(this, arguments);
  }

  on.fn = fn;
  this.on(event, on);
  return this;
};

/**
 * Remove the given callback for `event` or all
 * registered callbacks.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.off =
Emitter.prototype.removeListener =
Emitter.prototype.removeAllListeners =
Emitter.prototype.removeEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};

  // all
  if (0 == arguments.length) {
    this._callbacks = {};
    return this;
  }

  // specific event
  var callbacks = this._callbacks['$' + event];
  if (!callbacks) return this;

  // remove all handlers
  if (1 == arguments.length) {
    delete this._callbacks['$' + event];
    return this;
  }

  // remove specific handler
  var cb;
  for (var i = 0; i < callbacks.length; i++) {
    cb = callbacks[i];
    if (cb === fn || cb.fn === fn) {
      callbacks.splice(i, 1);
      break;
    }
  }

  // Remove event specific arrays for event types that no
  // one is subscribed for to avoid memory leak.
  if (callbacks.length === 0) {
    delete this._callbacks['$' + event];
  }

  return this;
};

/**
 * Emit `event` with the given args.
 *
 * @param {String} event
 * @param {Mixed} ...
 * @return {Emitter}
 */

Emitter.prototype.emit = function(event){
  this._callbacks = this._callbacks || {};

  var args = new Array(arguments.length - 1)
    , callbacks = this._callbacks['$' + event];

  for (var i = 1; i < arguments.length; i++) {
    args[i - 1] = arguments[i];
  }

  if (callbacks) {
    callbacks = callbacks.slice(0);
    for (var i = 0, len = callbacks.length; i < len; ++i) {
      callbacks[i].apply(this, args);
    }
  }

  return this;
};

/**
 * Return array of callbacks for `event`.
 *
 * @param {String} event
 * @return {Array}
 * @api public
 */

Emitter.prototype.listeners = function(event){
  this._callbacks = this._callbacks || {};
  return this._callbacks['$' + event] || [];
};

/**
 * Check if this emitter has `event` handlers.
 *
 * @param {String} event
 * @return {Boolean}
 * @api public
 */

Emitter.prototype.hasListeners = function(event){
  return !! this.listeners(event).length;
};

},{}],9:[function(require,module,exports){
(function (process){(function (){
/* eslint-env browser */

/**
 * This is the web browser implementation of `debug()`.
 */

exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = localstorage();
exports.destroy = (() => {
	let warned = false;

	return () => {
		if (!warned) {
			warned = true;
			console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
		}
	};
})();

/**
 * Colors.
 */

exports.colors = [
	'#0000CC',
	'#0000FF',
	'#0033CC',
	'#0033FF',
	'#0066CC',
	'#0066FF',
	'#0099CC',
	'#0099FF',
	'#00CC00',
	'#00CC33',
	'#00CC66',
	'#00CC99',
	'#00CCCC',
	'#00CCFF',
	'#3300CC',
	'#3300FF',
	'#3333CC',
	'#3333FF',
	'#3366CC',
	'#3366FF',
	'#3399CC',
	'#3399FF',
	'#33CC00',
	'#33CC33',
	'#33CC66',
	'#33CC99',
	'#33CCCC',
	'#33CCFF',
	'#6600CC',
	'#6600FF',
	'#6633CC',
	'#6633FF',
	'#66CC00',
	'#66CC33',
	'#9900CC',
	'#9900FF',
	'#9933CC',
	'#9933FF',
	'#99CC00',
	'#99CC33',
	'#CC0000',
	'#CC0033',
	'#CC0066',
	'#CC0099',
	'#CC00CC',
	'#CC00FF',
	'#CC3300',
	'#CC3333',
	'#CC3366',
	'#CC3399',
	'#CC33CC',
	'#CC33FF',
	'#CC6600',
	'#CC6633',
	'#CC9900',
	'#CC9933',
	'#CCCC00',
	'#CCCC33',
	'#FF0000',
	'#FF0033',
	'#FF0066',
	'#FF0099',
	'#FF00CC',
	'#FF00FF',
	'#FF3300',
	'#FF3333',
	'#FF3366',
	'#FF3399',
	'#FF33CC',
	'#FF33FF',
	'#FF6600',
	'#FF6633',
	'#FF9900',
	'#FF9933',
	'#FFCC00',
	'#FFCC33'
];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

// eslint-disable-next-line complexity
function useColors() {
	// NB: In an Electron preload script, document will be defined but not fully
	// initialized. Since we know we're in Chrome, we'll just detect this case
	// explicitly
	if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {
		return true;
	}

	// Internet Explorer and Edge do not support colors.
	if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
		return false;
	}

	// Is webkit? http://stackoverflow.com/a/16459606/376773
	// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
	return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
		// Is firebug? http://stackoverflow.com/a/398120/376773
		(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
		// Is firefox >= v31?
		// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
		(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
		// Double check webkit in userAgent just in case we are in a worker
		(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
}

/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs(args) {
	args[0] = (this.useColors ? '%c' : '') +
		this.namespace +
		(this.useColors ? ' %c' : ' ') +
		args[0] +
		(this.useColors ? '%c ' : ' ') +
		'+' + module.exports.humanize(this.diff);

	if (!this.useColors) {
		return;
	}

	const c = 'color: ' + this.color;
	args.splice(1, 0, c, 'color: inherit');

	// The final "%c" is somewhat tricky, because there could be other
	// arguments passed either before or after the %c, so we need to
	// figure out the correct index to insert the CSS into
	let index = 0;
	let lastC = 0;
	args[0].replace(/%[a-zA-Z%]/g, match => {
		if (match === '%%') {
			return;
		}
		index++;
		if (match === '%c') {
			// We only are interested in the *last* %c
			// (the user may have provided their own)
			lastC = index;
		}
	});

	args.splice(lastC, 0, c);
}

/**
 * Invokes `console.debug()` when available.
 * No-op when `console.debug` is not a "function".
 * If `console.debug` is not available, falls back
 * to `console.log`.
 *
 * @api public
 */
exports.log = console.debug || console.log || (() => {});

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */
function save(namespaces) {
	try {
		if (namespaces) {
			exports.storage.setItem('debug', namespaces);
		} else {
			exports.storage.removeItem('debug');
		}
	} catch (error) {
		// Swallow
		// XXX (@Qix-) should we be logging these?
	}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */
function load() {
	let r;
	try {
		r = exports.storage.getItem('debug');
	} catch (error) {
		// Swallow
		// XXX (@Qix-) should we be logging these?
	}

	// If debug isn't set in LS, and we're in Electron, try to load $DEBUG
	if (!r && typeof process !== 'undefined' && 'env' in process) {
		r = process.env.DEBUG;
	}

	return r;
}

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage() {
	try {
		// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
		// The Browser also has localStorage in the global context.
		return localStorage;
	} catch (error) {
		// Swallow
		// XXX (@Qix-) should we be logging these?
	}
}

module.exports = require('./common')(exports);

const {formatters} = module.exports;

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

formatters.j = function (v) {
	try {
		return JSON.stringify(v);
	} catch (error) {
		return '[UnexpectedJSONParseError]: ' + error.message;
	}
};

}).call(this)}).call(this,require('_process'))

},{"./common":10,"_process":36}],10:[function(require,module,exports){

/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 */

function setup(env) {
	createDebug.debug = createDebug;
	createDebug.default = createDebug;
	createDebug.coerce = coerce;
	createDebug.disable = disable;
	createDebug.enable = enable;
	createDebug.enabled = enabled;
	createDebug.humanize = require('ms');
	createDebug.destroy = destroy;

	Object.keys(env).forEach(key => {
		createDebug[key] = env[key];
	});

	/**
	* The currently active debug mode names, and names to skip.
	*/

	createDebug.names = [];
	createDebug.skips = [];

	/**
	* Map of special "%n" handling functions, for the debug "format" argument.
	*
	* Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
	*/
	createDebug.formatters = {};

	/**
	* Selects a color for a debug namespace
	* @param {String} namespace The namespace string for the for the debug instance to be colored
	* @return {Number|String} An ANSI color code for the given namespace
	* @api private
	*/
	function selectColor(namespace) {
		let hash = 0;

		for (let i = 0; i < namespace.length; i++) {
			hash = ((hash << 5) - hash) + namespace.charCodeAt(i);
			hash |= 0; // Convert to 32bit integer
		}

		return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
	}
	createDebug.selectColor = selectColor;

	/**
	* Create a debugger with the given `namespace`.
	*
	* @param {String} namespace
	* @return {Function}
	* @api public
	*/
	function createDebug(namespace) {
		let prevTime;
		let enableOverride = null;
		let namespacesCache;
		let enabledCache;

		function debug(...args) {
			// Disabled?
			if (!debug.enabled) {
				return;
			}

			const self = debug;

			// Set `diff` timestamp
			const curr = Number(new Date());
			const ms = curr - (prevTime || curr);
			self.diff = ms;
			self.prev = prevTime;
			self.curr = curr;
			prevTime = curr;

			args[0] = createDebug.coerce(args[0]);

			if (typeof args[0] !== 'string') {
				// Anything else let's inspect with %O
				args.unshift('%O');
			}

			// Apply any `formatters` transformations
			let index = 0;
			args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
				// If we encounter an escaped % then don't increase the array index
				if (match === '%%') {
					return '%';
				}
				index++;
				const formatter = createDebug.formatters[format];
				if (typeof formatter === 'function') {
					const val = args[index];
					match = formatter.call(self, val);

					// Now we need to remove `args[index]` since it's inlined in the `format`
					args.splice(index, 1);
					index--;
				}
				return match;
			});

			// Apply env-specific formatting (colors, etc.)
			createDebug.formatArgs.call(self, args);

			const logFn = self.log || createDebug.log;
			logFn.apply(self, args);
		}

		debug.namespace = namespace;
		debug.useColors = createDebug.useColors();
		debug.color = createDebug.selectColor(namespace);
		debug.extend = extend;
		debug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.

		Object.defineProperty(debug, 'enabled', {
			enumerable: true,
			configurable: false,
			get: () => {
				if (enableOverride !== null) {
					return enableOverride;
				}
				if (namespacesCache !== createDebug.namespaces) {
					namespacesCache = createDebug.namespaces;
					enabledCache = createDebug.enabled(namespace);
				}

				return enabledCache;
			},
			set: v => {
				enableOverride = v;
			}
		});

		// Env-specific initialization logic for debug instances
		if (typeof createDebug.init === 'function') {
			createDebug.init(debug);
		}

		return debug;
	}

	function extend(namespace, delimiter) {
		const newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);
		newDebug.log = this.log;
		return newDebug;
	}

	/**
	* Enables a debug mode by namespaces. This can include modes
	* separated by a colon and wildcards.
	*
	* @param {String} namespaces
	* @api public
	*/
	function enable(namespaces) {
		createDebug.save(namespaces);
		createDebug.namespaces = namespaces;

		createDebug.names = [];
		createDebug.skips = [];

		let i;
		const split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
		const len = split.length;

		for (i = 0; i < len; i++) {
			if (!split[i]) {
				// ignore empty strings
				continue;
			}

			namespaces = split[i].replace(/\*/g, '.*?');

			if (namespaces[0] === '-') {
				createDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
			} else {
				createDebug.names.push(new RegExp('^' + namespaces + '$'));
			}
		}
	}

	/**
	* Disable debug output.
	*
	* @return {String} namespaces
	* @api public
	*/
	function disable() {
		const namespaces = [
			...createDebug.names.map(toNamespace),
			...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)
		].join(',');
		createDebug.enable('');
		return namespaces;
	}

	/**
	* Returns true if the given mode name is enabled, false otherwise.
	*
	* @param {String} name
	* @return {Boolean}
	* @api public
	*/
	function enabled(name) {
		if (name[name.length - 1] === '*') {
			return true;
		}

		let i;
		let len;

		for (i = 0, len = createDebug.skips.length; i < len; i++) {
			if (createDebug.skips[i].test(name)) {
				return false;
			}
		}

		for (i = 0, len = createDebug.names.length; i < len; i++) {
			if (createDebug.names[i].test(name)) {
				return true;
			}
		}

		return false;
	}

	/**
	* Convert regexp to namespace
	*
	* @param {RegExp} regxep
	* @return {String} namespace
	* @api private
	*/
	function toNamespace(regexp) {
		return regexp.toString()
			.substring(2, regexp.toString().length - 2)
			.replace(/\.\*\?$/, '*');
	}

	/**
	* Coerce `val`.
	*
	* @param {Mixed} val
	* @return {Mixed}
	* @api private
	*/
	function coerce(val) {
		if (val instanceof Error) {
			return val.stack || val.message;
		}
		return val;
	}

	/**
	* XXX DO NOT USE. This is a temporary stub function.
	* XXX It WILL be removed in the next major release.
	*/
	function destroy() {
		console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
	}

	createDebug.enable(createDebug.load());

	return createDebug;
}

module.exports = setup;

},{"ms":29}],11:[function(require,module,exports){
module.exports = dragDrop

var flatten = require('flatten')
var parallel = require('run-parallel')

function dragDrop (elem, listeners) {
  if (typeof elem === 'string') {
    var selector = elem
    elem = window.document.querySelector(elem)
    if (!elem) {
      throw new Error('"' + selector + '" does not match any HTML elements')
    }
  }

  if (!elem) {
    throw new Error('"' + elem + '" is not a valid HTML element')
  }

  if (typeof listeners === 'function') {
    listeners = { onDrop: listeners }
  }

  var timeout

  elem.addEventListener('dragenter', onDragEnter, false)
  elem.addEventListener('dragover', onDragOver, false)
  elem.addEventListener('dragleave', onDragLeave, false)
  elem.addEventListener('drop', onDrop, false)

  // Function to remove drag-drop listeners
  return function remove () {
    removeDragClass()
    elem.removeEventListener('dragenter', onDragEnter, false)
    elem.removeEventListener('dragover', onDragOver, false)
    elem.removeEventListener('dragleave', onDragLeave, false)
    elem.removeEventListener('drop', onDrop, false)
  }

  function onDragEnter (e) {
    if (listeners.onDragEnter) {
      listeners.onDragEnter(e)
    }

    // Prevent event
    e.stopPropagation()
    e.preventDefault()
    return false
  }

  function onDragOver (e) {
    e.stopPropagation()
    e.preventDefault()

    if (listeners.onDragOver) {
      listeners.onDragOver(e)
    }

    if (e.dataTransfer.items) {
      // Only add "drag" class when `items` contains items that are able to be
      // handled by the registered listeners (files vs. text)
      var items = Array.from(e.dataTransfer.items)
      var fileItems = items.filter(function (item) { return item.kind === 'file' })
      var textItems = items.filter(function (item) { return item.kind === 'string' })

      if (fileItems.length === 0 && !listeners.onDropText) return
      if (textItems.length === 0 && !listeners.onDrop) return
      if (fileItems.length === 0 && textItems.length === 0) return
    }

    elem.classList.add('drag')
    clearTimeout(timeout)

    e.dataTransfer.dropEffect = 'copy'

    return false
  }

  function onDragLeave (e) {
    e.stopPropagation()
    e.preventDefault()

    if (listeners.onDragLeave) {
      listeners.onDragLeave(e)
    }

    clearTimeout(timeout)
    timeout = setTimeout(removeDragClass, 50)

    return false
  }

  function onDrop (e) {
    e.stopPropagation()
    e.preventDefault()

    if (listeners.onDragLeave) {
      listeners.onDragLeave(e)
    }

    clearTimeout(timeout)
    removeDragClass()

    var pos = {
      x: e.clientX,
      y: e.clientY
    }

    // text drop support
    var text = e.dataTransfer.getData('text')
    if (text && listeners.onDropText) {
      listeners.onDropText(text, pos)
    }

    // File drop support. The `dataTransfer.items` API supports directories, so we
    // use it instead of `dataTransfer.files`, even though it's much more
    // complicated to use.
    // See: https://github.com/feross/drag-drop/issues/39
    if (listeners.onDrop && e.dataTransfer.items) {
      var fileList = e.dataTransfer.files

      // Handle directories in Chrome using the proprietary FileSystem API
      var items = Array.from(e.dataTransfer.items).filter(function (item) {
        return item.kind === 'file'
      })

      if (items.length === 0) return

      parallel(items.map(function (item) {
        return function (cb) {
          processEntry(item.webkitGetAsEntry(), cb)
        }
      }), function (err, results) {
        // This catches permission errors with file:// in Chrome. This should never
        // throw in production code, so the user does not need to use try-catch.
        if (err) throw err

        var entries = flatten(results)

        var files = entries.filter(function (item) {
          return item.isFile
        })

        var directories = entries.filter(function (item) {
          return item.isDirectory
        })

        listeners.onDrop(files, pos, fileList, directories)
      })
    }

    return false
  }

  function removeDragClass () {
    elem.classList.remove('drag')
  }
}

function processEntry (entry, cb) {
  var entries = []

  if (entry.isFile) {
    entry.file(function (file) {
      file.fullPath = entry.fullPath // preserve pathing for consumer
      file.isFile = true
      file.isDirectory = false
      cb(null, file)
    }, function (err) {
      cb(err)
    })
  } else if (entry.isDirectory) {
    var reader = entry.createReader()
    readEntries()
  }

  function readEntries () {
    reader.readEntries(function (entries_) {
      if (entries_.length > 0) {
        entries = entries.concat(Array.from(entries_))
        readEntries() // continue reading entries until `readEntries` returns no more
      } else {
        doneEntries()
      }
    })
  }

  function doneEntries () {
    parallel(entries.map(function (entry) {
      return function (cb) {
        processEntry(entry, cb)
      }
    }), function (err, results) {
      if (err) {
        cb(err)
      } else {
        results.push({
          fullPath: entry.fullPath,
          name: entry.name,
          isFile: false,
          isDirectory: true
        })
        cb(null, results)
      }
    })
  }
}

},{"flatten":17,"run-parallel":40}],12:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ERROR_PACKET = exports.PACKET_TYPES_REVERSE = exports.PACKET_TYPES = void 0;
const PACKET_TYPES = Object.create(null); // no Map = no polyfill
exports.PACKET_TYPES = PACKET_TYPES;
PACKET_TYPES["open"] = "0";
PACKET_TYPES["close"] = "1";
PACKET_TYPES["ping"] = "2";
PACKET_TYPES["pong"] = "3";
PACKET_TYPES["message"] = "4";
PACKET_TYPES["upgrade"] = "5";
PACKET_TYPES["noop"] = "6";
const PACKET_TYPES_REVERSE = Object.create(null);
exports.PACKET_TYPES_REVERSE = PACKET_TYPES_REVERSE;
Object.keys(PACKET_TYPES).forEach(key => {
    PACKET_TYPES_REVERSE[PACKET_TYPES[key]] = key;
});
const ERROR_PACKET = { type: "error", data: "parser error" };
exports.ERROR_PACKET = ERROR_PACKET;

},{}],13:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commons_js_1 = require("./commons.js");
const base64_arraybuffer_1 = require("base64-arraybuffer");
const withNativeArrayBuffer = typeof ArrayBuffer === "function";
const decodePacket = (encodedPacket, binaryType) => {
    if (typeof encodedPacket !== "string") {
        return {
            type: "message",
            data: mapBinary(encodedPacket, binaryType)
        };
    }
    const type = encodedPacket.charAt(0);
    if (type === "b") {
        return {
            type: "message",
            data: decodeBase64Packet(encodedPacket.substring(1), binaryType)
        };
    }
    const packetType = commons_js_1.PACKET_TYPES_REVERSE[type];
    if (!packetType) {
        return commons_js_1.ERROR_PACKET;
    }
    return encodedPacket.length > 1
        ? {
            type: commons_js_1.PACKET_TYPES_REVERSE[type],
            data: encodedPacket.substring(1)
        }
        : {
            type: commons_js_1.PACKET_TYPES_REVERSE[type]
        };
};
const decodeBase64Packet = (data, binaryType) => {
    if (withNativeArrayBuffer) {
        const decoded = (0, base64_arraybuffer_1.decode)(data);
        return mapBinary(decoded, binaryType);
    }
    else {
        return { base64: true, data }; // fallback for old browsers
    }
};
const mapBinary = (data, binaryType) => {
    switch (binaryType) {
        case "blob":
            return data instanceof ArrayBuffer ? new Blob([data]) : data;
        case "arraybuffer":
        default:
            return data; // assuming the data is already an ArrayBuffer
    }
};
exports.default = decodePacket;

},{"./commons.js":12,"base64-arraybuffer":4}],14:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commons_js_1 = require("./commons.js");
const withNativeBlob = typeof Blob === "function" ||
    (typeof Blob !== "undefined" &&
        Object.prototype.toString.call(Blob) === "[object BlobConstructor]");
const withNativeArrayBuffer = typeof ArrayBuffer === "function";
// ArrayBuffer.isView method is not defined in IE10
const isView = obj => {
    return typeof ArrayBuffer.isView === "function"
        ? ArrayBuffer.isView(obj)
        : obj && obj.buffer instanceof ArrayBuffer;
};
const encodePacket = ({ type, data }, supportsBinary, callback) => {
    if (withNativeBlob && data instanceof Blob) {
        if (supportsBinary) {
            return callback(data);
        }
        else {
            return encodeBlobAsBase64(data, callback);
        }
    }
    else if (withNativeArrayBuffer &&
        (data instanceof ArrayBuffer || isView(data))) {
        if (supportsBinary) {
            return callback(data);
        }
        else {
            return encodeBlobAsBase64(new Blob([data]), callback);
        }
    }
    // plain string
    return callback(commons_js_1.PACKET_TYPES[type] + (data || ""));
};
const encodeBlobAsBase64 = (data, callback) => {
    const fileReader = new FileReader();
    fileReader.onload = function () {
        const content = fileReader.result.split(",")[1];
        callback("b" + content);
    };
    return fileReader.readAsDataURL(data);
};
exports.default = encodePacket;

},{"./commons.js":12}],15:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.decodePayload = exports.decodePacket = exports.encodePayload = exports.encodePacket = exports.protocol = void 0;
const encodePacket_js_1 = require("./encodePacket.js");
exports.encodePacket = encodePacket_js_1.default;
const decodePacket_js_1 = require("./decodePacket.js");
exports.decodePacket = decodePacket_js_1.default;
const SEPARATOR = String.fromCharCode(30); // see https://en.wikipedia.org/wiki/Delimiter#ASCII_delimited_text
const encodePayload = (packets, callback) => {
    // some packets may be added to the array while encoding, so the initial length must be saved
    const length = packets.length;
    const encodedPackets = new Array(length);
    let count = 0;
    packets.forEach((packet, i) => {
        // force base64 encoding for binary packets
        (0, encodePacket_js_1.default)(packet, false, encodedPacket => {
            encodedPackets[i] = encodedPacket;
            if (++count === length) {
                callback(encodedPackets.join(SEPARATOR));
            }
        });
    });
};
exports.encodePayload = encodePayload;
const decodePayload = (encodedPayload, binaryType) => {
    const encodedPackets = encodedPayload.split(SEPARATOR);
    const packets = [];
    for (let i = 0; i < encodedPackets.length; i++) {
        const decodedPacket = (0, decodePacket_js_1.default)(encodedPackets[i], binaryType);
        packets.push(decodedPacket);
        if (decodedPacket.type === "error") {
            break;
        }
    }
    return packets;
};
exports.decodePayload = decodePayload;
exports.protocol = 4;

},{"./decodePacket.js":13,"./encodePacket.js":14}],16:[function(require,module,exports){
(function (process,global,Buffer){(function (){
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define("exifr",["exports"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).exifr={})}(this,(function(e){"use strict";function t(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function n(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function r(e,t,r){return t&&n(e.prototype,t),r&&n(e,r),e}function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}});var n=["prototype","__proto__","caller","arguments","length","name"];Object.getOwnPropertyNames(t).forEach((function(r){-1===n.indexOf(r)&&e[r]!==t[r]&&(e[r]=t[r])})),t&&u(e,t)}function s(e){return(s=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function u(e,t){return(u=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function o(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}function f(e,t,n){return(f=o()?Reflect.construct:function(e,t,n){var r=[null];r.push.apply(r,t);var i=new(Function.bind.apply(e,r));return n&&u(i,n.prototype),i}).apply(null,arguments)}function c(e){var t="function"==typeof Map?new Map:void 0;return(c=function(e){if(null===e||(n=e,-1===Function.toString.call(n).indexOf("[native code]")))return e;var n;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,r)}function r(){return f(e,arguments,s(this).constructor)}return r.prototype=Object.create(e.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),u(r,e)})(e)}function h(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function l(e,t){return!t||"object"!=typeof t&&"function"!=typeof t?h(e):t}function d(e){var t=o();return function(){var n,r=s(e);if(t){var i=s(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return l(this,n)}}function v(e,t,n){return(v="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=s(e)););return e}(e,t);if(r){var i=Object.getOwnPropertyDescriptor(r,t);return i.get?i.get.call(n):i.value}})(e,t,n||e)}var p=Object.values||function(e){var t=[];for(var n in e)t.push(e[n]);return t},y=Object.entries||function(e){var t=[];for(var n in e)t.push([n,e[n]]);return t},g=Object.assign||function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return n.forEach((function(t){for(var n in t)e[n]=t[n]})),e},k=Object.fromEntries||function(e){var t={};return m(e).forEach((function(e){var n=e[0],r=e[1];t[n]=r})),t},m=Array.from||function(e){if(e instanceof P){var t=[];return e.forEach((function(e,n){return t.push([n,e])})),t}return Array.prototype.slice.call(e)};function b(e){return-1!==this.indexOf(e)}Array.prototype.includes||(Array.prototype.includes=b),String.prototype.includes||(String.prototype.includes=b),String.prototype.startsWith||(String.prototype.startsWith=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return this.substring(t,t+e.length)===e}),String.prototype.endsWith||(String.prototype.endsWith=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.length;return this.substring(t-e.length,t)===e});var A="undefined"!=typeof self?self:global,w=A.fetch||function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return new Promise((function(n,r){var i=new XMLHttpRequest;if(i.open("get",e,!0),i.responseType="arraybuffer",i.onerror=r,t.headers)for(var a in t.headers)i.setRequestHeader(a,t.headers[a]);i.onload=function(){n({ok:i.status>=200&&i.status<300,status:i.status,arrayBuffer:function(){return Promise.resolve(i.response)}})},i.send(null)}))},O=function(e){var t=[];if(Object.defineProperties(t,{size:{get:function(){return this.length}},has:{value:function(e){return-1!==this.indexOf(e)}},add:{value:function(e){this.has(e)||this.push(e)}},delete:{value:function(e){if(this.has(e)){var t=this.indexOf(e);this.splice(t,1)}}}}),Array.isArray(e))for(var n=0;n<e.length;n++)t.add(e[n]);return t},S=function(e){return new P(e)},P=void 0!==A.Map&&void 0!==A.Map.prototype.keys?A.Map:function(){function e(n){if(t(this,e),this.clear(),n)for(var r=0;r<n.length;r++)this.set(n[r][0],n[r][1])}return r(e,[{key:"clear",value:function(){this._map={},this._keys=[]}},{key:"size",get:function(){return this._keys.length}},{key:"get",value:function(e){return this._map["map_"+e]}},{key:"set",value:function(e,t){return this._map["map_"+e]=t,this._keys.indexOf(e)<0&&this._keys.push(e),this}},{key:"has",value:function(e){return this._keys.indexOf(e)>=0}},{key:"delete",value:function(e){var t=this._keys.indexOf(e);return!(t<0)&&(delete this._map["map_"+e],this._keys.splice(t,1),!0)}},{key:"keys",value:function(){return this._keys.slice(0)}},{key:"values",value:function(){var e=this;return this._keys.map((function(t){return e.get(t)}))}},{key:"entries",value:function(){var e=this;return this._keys.map((function(t){return[t,e.get(t)]}))}},{key:"forEach",value:function(e,t){for(var n=0;n<this._keys.length;n++)e.call(t,this._map["map_"+this._keys[n]],this._keys[n],this)}}]),e}(),U="undefined"!=typeof self?self:global,x="undefined"!=typeof navigator,C=x&&"undefined"==typeof HTMLImageElement,B=!("undefined"==typeof global||"undefined"==typeof process||!process.versions||!process.versions.node),j=U.Buffer,_=!!j;var V=function(e){return void 0!==e};function I(e){return void 0===e||(e instanceof P?0===e.size:0===p(e).filter(V).length)}function L(e){var t=new Error(e);throw delete t.stack,t}function T(e){var t=function(e){var t=0;return e.ifd0.enabled&&(t+=1024),e.exif.enabled&&(t+=2048),e.makerNote&&(t+=2048),e.userComment&&(t+=1024),e.gps.enabled&&(t+=512),e.interop.enabled&&(t+=100),e.ifd1.enabled&&(t+=1024),t+2048}(e);return e.jfif.enabled&&(t+=50),e.xmp.enabled&&(t+=2e4),e.iptc.enabled&&(t+=14e3),e.icc.enabled&&(t+=6e3),t}var z=function(e){return String.fromCharCode.apply(null,e)},F="undefined"!=typeof TextDecoder?new TextDecoder("utf-8"):void 0;function E(e){return F?F.decode(e):_?Buffer.from(e).toString("utf8"):decodeURIComponent(escape(z(e)))}var D=function(){function e(n){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,i=arguments.length>2?arguments[2]:void 0,a=arguments.length>3?arguments[3]:void 0;if(t(this,e),"boolean"==typeof a&&(this.le=a),Array.isArray(n)&&(n=new Uint8Array(n)),0===n)this.byteOffset=0,this.byteLength=0;else if(n instanceof ArrayBuffer){void 0===i&&(i=n.byteLength-r);var s=new DataView(n,r,i);this._swapDataView(s)}else if(n instanceof Uint8Array||n instanceof DataView||n instanceof e){void 0===i&&(i=n.byteLength-r),(r+=n.byteOffset)+i>n.byteOffset+n.byteLength&&L("Creating view outside of available memory in ArrayBuffer");var u=new DataView(n.buffer,r,i);this._swapDataView(u)}else if("number"==typeof n){var o=new DataView(new ArrayBuffer(n));this._swapDataView(o)}else L("Invalid input argument for BufferView: "+n)}return r(e,[{key:"_swapArrayBuffer",value:function(e){this._swapDataView(new DataView(e))}},{key:"_swapBuffer",value:function(e){this._swapDataView(new DataView(e.buffer,e.byteOffset,e.byteLength))}},{key:"_swapDataView",value:function(e){this.dataView=e,this.buffer=e.buffer,this.byteOffset=e.byteOffset,this.byteLength=e.byteLength}},{key:"_lengthToEnd",value:function(e){return this.byteLength-e}},{key:"set",value:function(t,n){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:e;t instanceof DataView||t instanceof e?t=new Uint8Array(t.buffer,t.byteOffset,t.byteLength):t instanceof ArrayBuffer&&(t=new Uint8Array(t)),t instanceof Uint8Array||L("BufferView.set(): Invalid data argument.");var i=this.toUint8();return i.set(t,n),new r(this,n,t.byteLength)}},{key:"subarray",value:function(t,n){return new e(this,t,n=n||this._lengthToEnd(t))}},{key:"toUint8",value:function(){return new Uint8Array(this.buffer,this.byteOffset,this.byteLength)}},{key:"getUint8Array",value:function(e,t){return new Uint8Array(this.buffer,this.byteOffset+e,t)}},{key:"getString",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.byteLength,n=this.getUint8Array(e,t);return E(n)}},{key:"getLatin1String",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.byteLength,n=this.getUint8Array(e,t);return z(n)}},{key:"getUnicodeString",value:function(){for(var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.byteLength,n=[],r=0;r<t&&e+r<this.byteLength;r+=2)n.push(this.getUint16(e+r));return z(n)}},{key:"getInt8",value:function(e){return this.dataView.getInt8(e)}},{key:"getUint8",value:function(e){return this.dataView.getUint8(e)}},{key:"getInt16",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.le;return this.dataView.getInt16(e,t)}},{key:"getInt32",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.le;return this.dataView.getInt32(e,t)}},{key:"getUint16",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.le;return this.dataView.getUint16(e,t)}},{key:"getUint32",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.le;return this.dataView.getUint32(e,t)}},{key:"getFloat32",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.le;return this.dataView.getFloat32(e,t)}},{key:"getFloat64",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.le;return this.dataView.getFloat64(e,t)}},{key:"getFloat",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.le;return this.dataView.getFloat32(e,t)}},{key:"getDouble",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.le;return this.dataView.getFloat64(e,t)}},{key:"getUintBytes",value:function(e,t,n){switch(t){case 1:return this.getUint8(e,n);case 2:return this.getUint16(e,n);case 4:return this.getUint32(e,n);case 8:return this.getUint64&&this.getUint64(e,n)}}},{key:"getUint",value:function(e,t,n){switch(t){case 8:return this.getUint8(e,n);case 16:return this.getUint16(e,n);case 32:return this.getUint32(e,n);case 64:return this.getUint64&&this.getUint64(e,n)}}},{key:"toString",value:function(e){return this.dataView.toString(e,this.constructor.name)}},{key:"ensureChunk",value:function(){}}],[{key:"from",value:function(t,n){return t instanceof this&&t.le===n?t:new e(t,void 0,void 0,n)}}]),e}();function R(e,t){L("".concat(e," '").concat(t,"' was not loaded, try using full build of exifr."))}var N=function(e){a(i,e);var n=d(i);function i(e){var r;return t(this,i),(r=n.call(this)).kind=e,r}return r(i,[{key:"get",value:function(e,t){return this.has(e)||R(this.kind,e),t&&(e in t||function(e,t){L("Unknown ".concat(e," '").concat(t,"'."))}(this.kind,e),t[e].enabled||R(this.kind,e)),v(s(i.prototype),"get",this).call(this,e)}},{key:"keyList",value:function(){return m(this.keys())}}]),i}(c(P)),M=new N("file parser"),W=new N("segment parser"),K=new N("file reader");function H(e){return function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];try{return Promise.resolve(e.apply(this,t))}catch(e){return Promise.reject(e)}}}function X(e,t,n){return n?t?t(e):e:(e&&e.then||(e=Promise.resolve(e)),t?e.then(t):e)}var Y=H((function(e){return new Promise((function(t,n){var r=new FileReader;r.onloadend=function(){return t(r.result||new ArrayBuffer)},r.onerror=n,r.readAsArrayBuffer(e)}))})),G=H((function(e){return w(e).then((function(e){return e.arrayBuffer()}))})),J=H((function(e,t){return X(t(e),(function(e){return new D(e)}))})),q=H((function(e,t,n){var r=new(K.get(n))(e,t);return X(r.read(),(function(){return r}))})),Q=H((function(e,t,n,r){return K.has(n)?q(e,t,n):r?J(e,r):(L("Parser ".concat(n," is not loaded")),X())})),Z="Invalid input argument";function $(e,t){return(n=e).startsWith("data:")||n.length>1e4?q(e,t,"base64"):x?Q(e,t,"url",G):B?q(e,t,"fs"):void L(Z);var n}var ee=function(e){a(i,e);var n=d(i);function i(){return t(this,i),n.apply(this,arguments)}return r(i,[{key:"tagKeys",get:function(){return this.allKeys||(this.allKeys=m(this.keys())),this.allKeys}},{key:"tagValues",get:function(){return this.allValues||(this.allValues=m(this.values())),this.allValues}}]),i}(c(P));function te(e,t,n){var r=new ee,i=n;Array.isArray(i)||("function"==typeof i.entries&&(i=i.entries()),i=m(i));for(var a=0;a<i.length;a++){var s=i[a],u=s[0],o=s[1];r.set(u,o)}if(Array.isArray(t)){var f=t;Array.isArray(f)||("function"==typeof f.entries&&(f=f.entries()),f=m(f));for(var c=0;c<f.length;c++){var h=f[c];e.set(h,r)}}else e.set(t,r);return r}function ne(e,t,n){var r,i=e.get(t),a=n;Array.isArray(a)||("function"==typeof a.entries&&(a=a.entries()),a=m(a));for(var s=0;s<a.length;s++)r=a[s],i.set(r[0],r[1])}var re=S(),ie=S(),ae=S(),se=37500,ue=37510,oe=33723,fe=34675,ce=34665,he=34853,le=40965,de=["chunked","firstChunkSize","firstChunkSizeNode","firstChunkSizeBrowser","chunkSize","chunkLimit"],ve=["jfif","xmp","icc","iptc","ihdr"],pe=["tiff"].concat(ve),ye=["ifd0","ifd1","exif","gps","interop"],ge=[].concat(pe,ye),ke=["makerNote","userComment"],me=["translateKeys","translateValues","reviveValues","multiSegment"],be=[].concat(me,["sanitize","mergeOutput","silentErrors"]),Ae=function(){function e(){t(this,e)}return r(e,[{key:"translate",get:function(){return this.translateKeys||this.translateValues||this.reviveValues}}]),e}(),we=function(e){a(s,e);var n=d(s);function s(e,r,a,u){var o;if(t(this,s),i(h(o=n.call(this)),"enabled",!1),i(h(o),"skip",O()),i(h(o),"pick",O()),i(h(o),"deps",O()),i(h(o),"translateKeys",!1),i(h(o),"translateValues",!1),i(h(o),"reviveValues",!1),o.key=e,o.enabled=r,o.parse=o.enabled,o.applyInheritables(u),o.canBeFiltered=ye.includes(e),o.canBeFiltered&&(o.dict=re.get(e)),void 0!==a)if(Array.isArray(a))o.parse=o.enabled=!0,o.canBeFiltered&&a.length>0&&o.translateTagSet(a,o.pick);else if("object"==typeof a){if(o.enabled=!0,o.parse=!1!==a.parse,o.canBeFiltered){var f=a.pick,c=a.skip;f&&f.length>0&&o.translateTagSet(f,o.pick),c&&c.length>0&&o.translateTagSet(c,o.skip)}o.applyInheritables(a)}else!0===a||!1===a?o.parse=o.enabled=a:L("Invalid options argument: ".concat(a));return o}return r(s,[{key:"needed",get:function(){return this.enabled||this.deps.size>0}},{key:"applyInheritables",value:function(e){var t,n,r=me;Array.isArray(r)||("function"==typeof r.entries&&(r=r.entries()),r=m(r));for(var i=0;i<r.length;i++)void 0!==(n=e[t=r[i]])&&(this[t]=n)}},{key:"translateTagSet",value:function(e,t){if(this.dict){var n,r,i=this.dict,a=i.tagKeys,s=i.tagValues,u=e;Array.isArray(u)||("function"==typeof u.entries&&(u=u.entries()),u=m(u));for(var o=0;o<u.length;o++)"string"==typeof(n=u[o])?(-1===(r=s.indexOf(n))&&(r=a.indexOf(Number(n))),-1!==r&&t.add(Number(a[r]))):t.add(n)}else{var f=e;Array.isArray(f)||("function"==typeof f.entries&&(f=f.entries()),f=m(f));for(var c=0;c<f.length;c++){var h=f[c];t.add(h)}}}},{key:"finalizeFilters",value:function(){!this.enabled&&this.deps.size>0?(this.enabled=!0,Ce(this.pick,this.deps)):this.enabled&&this.pick.size>0&&Ce(this.pick,this.deps)}}]),s}(Ae),Oe={jfif:!1,tiff:!0,xmp:!1,icc:!1,iptc:!1,ifd0:!0,ifd1:!1,exif:!0,gps:!0,interop:!1,ihdr:void 0,makerNote:!1,userComment:!1,multiSegment:!1,skip:[],pick:[],translateKeys:!0,translateValues:!0,reviveValues:!0,sanitize:!0,mergeOutput:!0,silentErrors:!0,chunked:!0,firstChunkSize:void 0,firstChunkSizeNode:512,firstChunkSizeBrowser:65536,chunkSize:65536,chunkLimit:5},Se=S(),Pe=function(e){a(i,e);var n=d(i);function i(e){var r;return t(this,i),r=n.call(this),!0===e?r.setupFromTrue():void 0===e?r.setupFromUndefined():Array.isArray(e)?r.setupFromArray(e):"object"==typeof e?r.setupFromObject(e):L("Invalid options argument ".concat(e)),void 0===r.firstChunkSize&&(r.firstChunkSize=x?r.firstChunkSizeBrowser:r.firstChunkSizeNode),r.mergeOutput&&(r.ifd1.enabled=!1),r.filterNestedSegmentTags(),r.traverseTiffDependencyTree(),r.checkLoadedPlugins(),r}return r(i,[{key:"setupFromUndefined",value:function(){var e,t=de;Array.isArray(t)||("function"==typeof t.entries&&(t=t.entries()),t=m(t));for(var n=0;n<t.length;n++)this[e=t[n]]=Oe[e];var r=be;Array.isArray(r)||("function"==typeof r.entries&&(r=r.entries()),r=m(r));for(var i=0;i<r.length;i++)this[e=r[i]]=Oe[e];var a=ke;Array.isArray(a)||("function"==typeof a.entries&&(a=a.entries()),a=m(a));for(var s=0;s<a.length;s++)this[e=a[s]]=Oe[e];var u=ge;Array.isArray(u)||("function"==typeof u.entries&&(u=u.entries()),u=m(u));for(var o=0;o<u.length;o++)this[e=u[o]]=new we(e,Oe[e],void 0,this)}},{key:"setupFromTrue",value:function(){var e,t=de;Array.isArray(t)||("function"==typeof t.entries&&(t=t.entries()),t=m(t));for(var n=0;n<t.length;n++)this[e=t[n]]=Oe[e];var r=be;Array.isArray(r)||("function"==typeof r.entries&&(r=r.entries()),r=m(r));for(var i=0;i<r.length;i++)this[e=r[i]]=Oe[e];var a=ke;Array.isArray(a)||("function"==typeof a.entries&&(a=a.entries()),a=m(a));for(var s=0;s<a.length;s++)this[e=a[s]]=!0;var u=ge;Array.isArray(u)||("function"==typeof u.entries&&(u=u.entries()),u=m(u));for(var o=0;o<u.length;o++)this[e=u[o]]=new we(e,!0,void 0,this)}},{key:"setupFromArray",value:function(e){var t,n=de;Array.isArray(n)||("function"==typeof n.entries&&(n=n.entries()),n=m(n));for(var r=0;r<n.length;r++)this[t=n[r]]=Oe[t];var i=be;Array.isArray(i)||("function"==typeof i.entries&&(i=i.entries()),i=m(i));for(var a=0;a<i.length;a++)this[t=i[a]]=Oe[t];var s=ke;Array.isArray(s)||("function"==typeof s.entries&&(s=s.entries()),s=m(s));for(var u=0;u<s.length;u++)this[t=s[u]]=Oe[t];var o=ge;Array.isArray(o)||("function"==typeof o.entries&&(o=o.entries()),o=m(o));for(var f=0;f<o.length;f++)this[t=o[f]]=new we(t,!1,void 0,this);this.setupGlobalFilters(e,void 0,ye)}},{key:"setupFromObject",value:function(e){var t;ye.ifd0=ye.ifd0||ye.image,ye.ifd1=ye.ifd1||ye.thumbnail,g(this,e);var n=de;Array.isArray(n)||("function"==typeof n.entries&&(n=n.entries()),n=m(n));for(var r=0;r<n.length;r++)this[t=n[r]]=xe(e[t],Oe[t]);var i=be;Array.isArray(i)||("function"==typeof i.entries&&(i=i.entries()),i=m(i));for(var a=0;a<i.length;a++)this[t=i[a]]=xe(e[t],Oe[t]);var s=ke;Array.isArray(s)||("function"==typeof s.entries&&(s=s.entries()),s=m(s));for(var u=0;u<s.length;u++)this[t=s[u]]=xe(e[t],Oe[t]);var o=pe;Array.isArray(o)||("function"==typeof o.entries&&(o=o.entries()),o=m(o));for(var f=0;f<o.length;f++)this[t=o[f]]=new we(t,Oe[t],e[t],this);var c=ye;Array.isArray(c)||("function"==typeof c.entries&&(c=c.entries()),c=m(c));for(var h=0;h<c.length;h++)this[t=c[h]]=new we(t,Oe[t],e[t],this.tiff);this.setupGlobalFilters(e.pick,e.skip,ye,ge),!0===e.tiff?this.batchEnableWithBool(ye,!0):!1===e.tiff?this.batchEnableWithUserValue(ye,e):Array.isArray(e.tiff)?this.setupGlobalFilters(e.tiff,void 0,ye):"object"==typeof e.tiff&&this.setupGlobalFilters(e.tiff.pick,e.tiff.skip,ye)}},{key:"batchEnableWithBool",value:function(e,t){var n=e;Array.isArray(n)||("function"==typeof n.entries&&(n=n.entries()),n=m(n));for(var r=0;r<n.length;r++){this[n[r]].enabled=t}}},{key:"batchEnableWithUserValue",value:function(e,t){var n=e;Array.isArray(n)||("function"==typeof n.entries&&(n=n.entries()),n=m(n));for(var r=0;r<n.length;r++){var i=n[r],a=t[i];this[i].enabled=!1!==a&&void 0!==a}}},{key:"setupGlobalFilters",value:function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:n;if(e&&e.length){var i=r;Array.isArray(i)||("function"==typeof i.entries&&(i=i.entries()),i=m(i));for(var a=0;a<i.length;a++){var s=i[a];this[s].enabled=!1}var u=Ue(e,n),o=u;Array.isArray(o)||("function"==typeof o.entries&&(o=o.entries()),o=m(o));for(var f=0;f<o.length;f++){var c=o[f],h=c[0],l=c[1];Ce(this[h].pick,l),this[h].enabled=!0}}else if(t&&t.length){var d=Ue(t,n),v=d;Array.isArray(v)||("function"==typeof v.entries&&(v=v.entries()),v=m(v));for(var p=0;p<v.length;p++){var y=v[p],g=y[0],k=y[1];Ce(this[g].skip,k)}}}},{key:"filterNestedSegmentTags",value:function(){var e=this.ifd0,t=this.exif,n=this.xmp,r=this.iptc,i=this.icc;this.makerNote?t.deps.add(se):t.skip.add(se),this.userComment?t.deps.add(ue):t.skip.add(ue),n.enabled||e.skip.add(700),r.enabled||e.skip.add(oe),i.enabled||e.skip.add(fe)}},{key:"traverseTiffDependencyTree",value:function(){var e=this,t=this.ifd0,n=this.exif,r=this.gps;this.interop.needed&&(n.deps.add(le),t.deps.add(le)),n.needed&&t.deps.add(ce),r.needed&&t.deps.add(he),this.tiff.enabled=ye.some((function(t){return!0===e[t].enabled}))||this.makerNote||this.userComment;var i=ye;Array.isArray(i)||("function"==typeof i.entries&&(i=i.entries()),i=m(i));for(var a=0;a<i.length;a++){this[i[a]].finalizeFilters()}}},{key:"onlyTiff",get:function(){var e=this;return!ve.map((function(t){return e[t].enabled})).some((function(e){return!0===e}))&&this.tiff.enabled}},{key:"checkLoadedPlugins",value:function(){var e=pe;Array.isArray(e)||("function"==typeof e.entries&&(e=e.entries()),e=m(e));for(var t=0;t<e.length;t++){var n=e[t];this[n].enabled&&!W.has(n)&&R("segment parser",n)}}}],[{key:"useCached",value:function(e){var t=Se.get(e);return void 0!==t||(t=new this(e),Se.set(e,t)),t}}]),i}(Ae);function Ue(e,t){var n,r,i,a=[],s=t;Array.isArray(s)||("function"==typeof s.entries&&(s=s.entries()),s=m(s));for(var u=0;u<s.length;u++){r=s[u],n=[];var o=re.get(r);Array.isArray(o)||("function"==typeof o.entries&&(o=o.entries()),o=m(o));for(var f=0;f<o.length;f++)i=o[f],(e.includes(i[0])||e.includes(i[1]))&&n.push(i[0]);n.length&&a.push([r,n])}return a}function xe(e,t){return void 0!==e?e:void 0!==t?t:void 0}function Ce(e,t){var n=t;Array.isArray(n)||("function"==typeof n.entries&&(n=n.entries()),n=m(n));for(var r=0;r<n.length;r++){var i=n[r];e.add(i)}}function Be(e,t,n){return n?t?t(e):e:(e&&e.then||(e=Promise.resolve(e)),t?e.then(t):e)}function je(){}function _e(e,t){if(!t)return e&&e.then?e.then(je):Promise.resolve()}function Ve(e,t){var n=e();return n&&n.then?n.then(t):t(n)}i(Pe,"default",Oe);var Ie=function(){function e(n){t(this,e),i(this,"parsers",{}),this.options=Pe.useCached(n)}return r(e,[{key:"setup",value:function(){if(!this.fileParser){var e=this.file,t=e.getUint16(0),n=M;Array.isArray(n)||("function"==typeof n.entries&&(n=n.entries()),n=m(n));for(var r=0;r<n.length;r++){var i=n[r],a=i[0],s=i[1];if(s.canHandle(e,t))return this.fileParser=new s(this.options,this.file,this.parsers),e[a]=!0}L("Unknown file format")}}},{key:"read",value:function(e){try{var t=this;return Be(function(e,t){return"string"==typeof e?$(e,t):x&&!C&&e instanceof HTMLImageElement?$(e.src,t):e instanceof Uint8Array||e instanceof ArrayBuffer||e instanceof DataView?new D(e):x&&e instanceof Blob?Q(e,t,"blob",Y):void L(Z)}(e,t.options),(function(e){t.file=e}))}catch(e){return Promise.reject(e)}}},{key:"parse",value:function(){try{var e=this;e.setup();var t={},n=[];return Ve((function(){return e.options.silentErrors?Be(e.doParse(t,n).catch((function(e){return n.push(e)})),(function(){n.push.apply(n,e.fileParser.errors)})):_e(e.doParse(t,n))}),(function(){return e.file.close&&e.file.close(),e.options.silentErrors&&n.length>0&&(t.errors=n),I(r=t)?void 0:r;var r}))}catch(e){return Promise.reject(e)}}},{key:"doParse",value:function(e,t){try{var n=this;return Be(n.fileParser.parse(),(function(){var r,i=p(n.parsers).map((r=function(t){return Be(t.parse(),(function(n){t.assignToOutput(e,n)}))},function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];try{return Promise.resolve(r.apply(this,e))}catch(e){return Promise.reject(e)}}));if(n.options.silentErrors){var a=function(e){return t.push(e)};i=i.map((function(e){return e.catch(a)}))}return _e(Promise.all(i))}))}catch(e){return Promise.reject(e)}}},{key:"extractThumbnail",value:function(){try{var e=this;e.setup();var t,n=e.options,r=e.file,i=W.get("tiff",n);return Ve((function(){if(!r.tiff)return function(e){var t=e();if(t&&t.then)return t.then(je)}((function(){if(r.jpeg)return Be(e.fileParser.getOrFindSegment("tiff"),(function(e){t=e}))}));t={start:0,type:"tiff"}}),(function(){if(void 0!==t)return Be(e.fileParser.ensureSegmentChunk(t),(function(t){return Be((e.parsers.tiff=new i(t,n,r)).extractThumbnail(),(function(e){return r.close&&r.close(),e}))}))}))}catch(e){return Promise.reject(e)}}}]),e}();var Le,Te=(Le=function(e,t){var n,r,i,a=new Ie(t);return n=a.read(e),r=function(){return a.parse()},i?r?r(n):n:(n&&n.then||(n=Promise.resolve(n)),r?n.then(r):n)},function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];try{return Promise.resolve(Le.apply(this,e))}catch(e){return Promise.reject(e)}}),ze=Object.freeze({__proto__:null,parse:Te,Exifr:Ie,fileParsers:M,segmentParsers:W,fileReaders:K,tagKeys:re,tagValues:ie,tagRevivers:ae,createDictionary:te,extendDictionary:ne,fetchUrlAsArrayBuffer:G,readBlobAsArrayBuffer:Y,chunkedProps:de,otherSegments:ve,segments:pe,tiffBlocks:ye,segmentsAndBlocks:ge,tiffExtractables:ke,inheritables:me,allFormatters:be,Options:Pe});function Fe(){}var Ee=function(){function e(n,r,a){var s=this;t(this,e),i(this,"errors",[]),i(this,"ensureSegmentChunk",function(e){return function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];try{return Promise.resolve(e.apply(this,t))}catch(e){return Promise.reject(e)}}}((function(e){var t,n,r,i=e.start,a=e.size||65536;return t=function(){if(s.file.chunked)return function(e){var t=e();if(t&&t.then)return t.then(Fe)}((function(){if(!s.file.available(i,a))return function(e){if(e&&e.then)return e.then(Fe)}(function(e,t){try{var n=e()}catch(e){return t(e)}return n&&n.then?n.then(void 0,t):n}((function(){return t=s.file.readChunk(i,a),n=function(t){e.chunk=t},r?n?n(t):t:(t&&t.then||(t=Promise.resolve(t)),n?t.then(n):t);var t,n,r}),(function(t){L("Couldn't read segment: ".concat(JSON.stringify(e),". ").concat(t.message))})));e.chunk=s.file.subarray(i,a)}));s.file.byteLength>i+a?e.chunk=s.file.subarray(i,a):void 0===e.size?e.chunk=s.file.subarray(i):L("Segment unreachable: "+JSON.stringify(e))},n=function(){return e.chunk},(r=t())&&r.then?r.then(n):n(r)}))),this.extendOptions&&this.extendOptions(n),this.options=n,this.file=r,this.parsers=a}return r(e,[{key:"injectSegment",value:function(e,t){this.options[e].enabled&&this.createParser(e,t)}},{key:"createParser",value:function(e,t){var n=new(W.get(e))(t,this.options,this.file);return this.parsers[e]=n}},{key:"createParsers",value:function(e){var t=e;Array.isArray(t)||("function"==typeof t.entries&&(t=t.entries()),t=m(t));for(var n=0;n<t.length;n++){var r=t[n],i=r.type,a=r.chunk,s=this.options[i];if(s&&s.enabled){var u=this.parsers[i];u&&u.append||u||this.createParser(i,a)}}}},{key:"readSegments",value:function(e){try{var t=e.map(this.ensureSegmentChunk);return function(e,t){if(!t)return e&&e.then?e.then(Fe):Promise.resolve()}(Promise.all(t))}catch(e){return Promise.reject(e)}}}]),e}(),De=function(){function e(n){var r=this,a=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},s=arguments.length>2?arguments[2]:void 0;t(this,e),i(this,"errors",[]),i(this,"raw",S()),i(this,"handleError",(function(e){if(!r.options.silentErrors)throw e;r.errors.push(e.message)})),this.chunk=this.normalizeInput(n),this.file=s,this.type=this.constructor.type,this.globalOptions=this.options=a,this.localOptions=a[this.type],this.canTranslate=this.localOptions&&this.localOptions.translate}return r(e,[{key:"normalizeInput",value:function(e){return e instanceof D?e:new D(e)}},{key:"translate",value:function(){this.canTranslate&&(this.translated=this.translateBlock(this.raw,this.type))}},{key:"output",get:function(){return this.translated?this.translated:this.raw?k(this.raw):void 0}},{key:"translateBlock",value:function(e,t){var n=ae.get(t),r=ie.get(t),i=re.get(t),a=this.options[t],s=a.reviveValues&&!!n,u=a.translateValues&&!!r,o=a.translateKeys&&!!i,f={},c=e;Array.isArray(c)||("function"==typeof c.entries&&(c=c.entries()),c=m(c));for(var h=0;h<c.length;h++){var l=c[h],d=l[0],v=l[1];s&&n.has(d)?v=n.get(d)(v):u&&r.has(d)&&(v=this.translateValue(v,r.get(d))),o&&i.has(d)&&(d=i.get(d)||d),f[d]=v}return f}},{key:"translateValue",value:function(e,t){return t[e]||t.DEFAULT||e}},{key:"assignToOutput",value:function(e,t){this.assignObjectToOutput(e,this.constructor.type,t)}},{key:"assignObjectToOutput",value:function(e,t,n){if(this.globalOptions.mergeOutput)return g(e,n);e[t]?g(e[t],n):e[t]=n}}],[{key:"findPosition",value:function(e,t){var n=e.getUint16(t+2)+2,r="function"==typeof this.headerLength?this.headerLength(e,t,n):this.headerLength,i=t+r,a=n-r;return{offset:t,length:n,headerLength:r,start:i,size:a,end:i+a}}},{key:"parse",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=new Pe(i({},this.type,t)),r=new this(e,n);return r.parse()}}]),e}();function Re(e,t,n){return n?t?t(e):e:(e&&e.then||(e=Promise.resolve(e)),t?e.then(t):e)}i(De,"headerLength",4),i(De,"type",void 0),i(De,"multiSegment",!1),i(De,"canHandle",(function(){return!1}));function Ne(){}function Me(e,t){if(!t)return e&&e.then?e.then(Ne):Promise.resolve()}function We(e){var t=e();if(t&&t.then)return t.then(Ne)}function Ke(e,t){var n=e();return n&&n.then?n.then(t):t(n)}function He(e,t,n){if(!e.s){if(n instanceof Xe){if(!n.s)return void(n.o=He.bind(null,e,t));1&t&&(t=n.s),n=n.v}if(n&&n.then)return void n.then(He.bind(null,e,t),He.bind(null,e,2));e.s=t,e.v=n;var r=e.o;r&&r(e)}}var Xe=function(){function e(){}return e.prototype.then=function(t,n){var r=new e,i=this.s;if(i){var a=1&i?t:n;if(a){try{He(r,1,a(this.v))}catch(e){He(r,2,e)}return r}return this}return this.o=function(e){try{var i=e.v;1&e.s?He(r,1,t?t(i):i):n?He(r,1,n(i)):He(r,2,i)}catch(e){He(r,2,e)}},r},e}();function Ye(e){return e instanceof Xe&&1&e.s}function Ge(e,t,n){for(var r;;){var i=e();if(Ye(i)&&(i=i.v),!i)return a;if(i.then){r=0;break}var a=n();if(a&&a.then){if(!Ye(a)){r=1;break}a=a.s}if(t){var s=t();if(s&&s.then&&!Ye(s)){r=2;break}}}var u=new Xe,o=He.bind(null,u,2);return(0===r?i.then(c):1===r?a.then(f):s.then(h)).then(void 0,o),u;function f(r){a=r;do{if(t&&(s=t())&&s.then&&!Ye(s))return void s.then(h).then(void 0,o);if(!(i=e())||Ye(i)&&!i.v)return void He(u,1,a);if(i.then)return void i.then(c).then(void 0,o);Ye(a=n())&&(a=a.v)}while(!a||!a.then);a.then(f).then(void 0,o)}function c(e){e?(a=n())&&a.then?a.then(f).then(void 0,o):f(a):He(u,1,a)}function h(){(i=e())?i.then?i.then(c).then(void 0,o):c(i):He(u,1,a)}}function Je(e){return 192===e||194===e||196===e||219===e||221===e||218===e||254===e}function qe(e){return e>=224&&e<=239}function Qe(e,t,n){var r=W;Array.isArray(r)||("function"==typeof r.entries&&(r=r.entries()),r=m(r));for(var i=0;i<r.length;i++){var a=r[i],s=a[0];if(a[1].canHandle(e,t,n))return s}}var Ze=function(e){a(s,e);var n=d(s);function s(){var e;t(this,s);for(var r=arguments.length,a=new Array(r),u=0;u<r;u++)a[u]=arguments[u];return i(h(e=n.call.apply(n,[this].concat(a))),"appSegments",[]),i(h(e),"jpegSegments",[]),i(h(e),"unknownSegments",[]),e}return r(s,[{key:"parse",value:function(){try{var e=this;return Re(e.findAppSegments(),(function(){return Re(e.readSegments(e.appSegments),(function(){e.mergeMultiSegments(),e.createParsers(e.mergedAppSegments||e.appSegments)}))}))}catch(e){return Promise.reject(e)}}},{key:"setupSegmentFinderArgs",value:function(e){var t=this;!0===e?(this.findAll=!0,this.wanted=O(W.keyList())):(e=void 0===e?W.keyList().filter((function(e){return t.options[e].enabled})):e.filter((function(e){return t.options[e].enabled&&W.has(e)})),this.findAll=!1,this.remaining=O(e),this.wanted=O(e)),this.unfinishedMultiSegment=!1}},{key:"findAppSegments",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=arguments.length>1?arguments[1]:void 0;try{var n=this;n.setupSegmentFinderArgs(t);var r=n.file,i=n.findAll,a=n.wanted,s=n.remaining;return Ke((function(){if(!i&&n.file.chunked)return i=m(a).some((function(e){var t=W.get(e),r=n.options[e];return t.multiSegment&&r.multiSegment})),We((function(){if(i)return Me(n.file.readWhole())}))}),(function(){var t=!1;if(e=n.findAppSegmentsInRange(e,r.byteLength),!n.options.onlyTiff)return function(){if(r.chunked){var i=!1;return Ge((function(){return!t&&s.size>0&&!i&&(!!r.canReadNextChunk||!!n.unfinishedMultiSegment)}),void 0,(function(){var a=r.nextChunkOffset,s=n.appSegments.some((function(e){return!n.file.available(e.offset||e.start,e.length||e.size)}));return Ke((function(){return e>a&&!s?Re(r.readNextChunk(e),(function(e){i=!e})):Re(r.readNextChunk(a),(function(e){i=!e}))}),(function(){void 0===(e=n.findAppSegmentsInRange(e,r.byteLength))&&(t=!0)}))}))}}()}))}catch(e){return Promise.reject(e)}}},{key:"findAppSegmentsInRange",value:function(e,t){t-=2;for(var n,r,i,a,s,u,o=this.file,f=this.findAll,c=this.wanted,h=this.remaining,l=this.options;e<t;e++)if(255===o.getUint8(e))if(qe(n=o.getUint8(e+1))){if(r=o.getUint16(e+2),(i=Qe(o,e,r))&&c.has(i)&&(s=(a=W.get(i)).findPosition(o,e),u=l[i],s.type=i,this.appSegments.push(s),!f&&(a.multiSegment&&u.multiSegment?(this.unfinishedMultiSegment=s.chunkNumber<s.chunkCount,this.unfinishedMultiSegment||h.delete(i)):h.delete(i),0===h.size)))break;l.recordUnknownSegments&&((s=De.findPosition(o,e)).marker=n,this.unknownSegments.push(s)),e+=r+1}else if(Je(n)){if(r=o.getUint16(e+2),218===n&&!1!==l.stopAfterSos)return;l.recordJpegSegments&&this.jpegSegments.push({offset:e,length:r,marker:n}),e+=r+1}return e}},{key:"mergeMultiSegments",value:function(){var e=this;if(this.appSegments.some((function(e){return e.multiSegment}))){var t=function(e,t){for(var n,r,i,a=S(),s=0;s<e.length;s++)r=(n=e[s])[t],a.has(r)?i=a.get(r):a.set(r,i=[]),i.push(n);return m(a)}(this.appSegments,"type");this.mergedAppSegments=t.map((function(t){var n=t[0],r=t[1],i=W.get(n,e.options);return i.handleMultiSegments?{type:n,chunk:i.handleMultiSegments(r)}:r[0]}))}}},{key:"getSegment",value:function(e){return this.appSegments.find((function(t){return t.type===e}))}},{key:"getOrFindSegment",value:function(e){try{var t=this,n=t.getSegment(e);return Ke((function(){if(void 0===n)return Re(t.findAppSegments(0,[e]),(function(){n=t.getSegment(e)}))}),(function(){return n}))}catch(e){return Promise.reject(e)}}}],[{key:"canHandle",value:function(e,t){return 65496===t}}]),s}(Ee);function $e(){}i(Ze,"type","jpeg"),M.set("jpeg",Ze);function et(e,t){if(!t)return e&&e.then?e.then($e):Promise.resolve()}function tt(e,t){var n=e();return n&&n.then?n.then(t):t(n)}var nt=[void 0,1,1,2,4,8,1,1,2,4,8,4,8,4];var rt=function(e){a(i,e);var n=d(i);function i(){return t(this,i),n.apply(this,arguments)}return r(i,[{key:"parse",value:function(){try{var e=this;e.parseHeader();var t=e.options;return tt((function(){if(t.ifd0.enabled)return et(e.parseIfd0Block())}),(function(){return tt((function(){if(t.exif.enabled)return et(e.safeParse("parseExifBlock"))}),(function(){return tt((function(){if(t.gps.enabled)return et(e.safeParse("parseGpsBlock"))}),(function(){return tt((function(){if(t.interop.enabled)return et(e.safeParse("parseInteropBlock"))}),(function(){return tt((function(){if(t.ifd1.enabled)return et(e.safeParse("parseThumbnailBlock"))}),(function(){return e.createOutput()}))}))}))}))}))}catch(e){return Promise.reject(e)}}},{key:"safeParse",value:function(e){var t=this[e]();return void 0!==t.catch&&(t=t.catch(this.handleError)),t}},{key:"findIfd0Offset",value:function(){void 0===this.ifd0Offset&&(this.ifd0Offset=this.chunk.getUint32(4))}},{key:"findIfd1Offset",value:function(){if(void 0===this.ifd1Offset){this.findIfd0Offset();var e=this.chunk.getUint16(this.ifd0Offset),t=this.ifd0Offset+2+12*e;this.ifd1Offset=this.chunk.getUint32(t)}}},{key:"parseBlock",value:function(e,t){var n=S();return this[t]=n,this.parseTags(e,t,n),n}},{key:"parseIfd0Block",value:function(){try{var e=this;if(e.ifd0)return;var t=e.file;return e.findIfd0Offset(),e.ifd0Offset<8&&L("Malformed EXIF data"),!t.chunked&&e.ifd0Offset>t.byteLength&&L("IFD0 offset points to outside of file.\nthis.ifd0Offset: ".concat(e.ifd0Offset,", file.byteLength: ").concat(t.byteLength)),tt((function(){if(t.tiff)return et(t.ensureChunk(e.ifd0Offset,T(e.options)))}),(function(){var t=e.parseBlock(e.ifd0Offset,"ifd0");if(0!==t.size)return e.exifOffset=t.get(ce),e.interopOffset=t.get(le),e.gpsOffset=t.get(he),e.xmp=t.get(700),e.iptc=t.get(oe),e.icc=t.get(fe),e.options.sanitize&&(t.delete(ce),t.delete(le),t.delete(he),t.delete(700),t.delete(oe),t.delete(fe)),t}))}catch(e){return Promise.reject(e)}}},{key:"parseExifBlock",value:function(){try{var e=this;if(e.exif)return;return tt((function(){if(!e.ifd0)return et(e.parseIfd0Block())}),(function(){if(void 0!==e.exifOffset)return tt((function(){if(e.file.tiff)return et(e.file.ensureChunk(e.exifOffset,T(e.options)))}),(function(){var t=e.parseBlock(e.exifOffset,"exif");return e.interopOffset||(e.interopOffset=t.get(le)),e.makerNote=t.get(se),e.userComment=t.get(ue),e.options.sanitize&&(t.delete(le),t.delete(se),t.delete(ue)),e.unpack(t,41728),e.unpack(t,41729),t}))}))}catch(e){return Promise.reject(e)}}},{key:"unpack",value:function(e,t){var n=e.get(t);n&&1===n.length&&e.set(t,n[0])}},{key:"parseGpsBlock",value:function(){try{var e=this;if(e.gps)return;return tt((function(){if(!e.ifd0)return et(e.parseIfd0Block())}),(function(){if(void 0!==e.gpsOffset){var t=e.parseBlock(e.gpsOffset,"gps");return t&&t.has(2)&&t.has(4)&&(t.set("latitude",it.apply(void 0,t.get(2).concat([t.get(1)]))),t.set("longitude",it.apply(void 0,t.get(4).concat([t.get(3)])))),t}}))}catch(e){return Promise.reject(e)}}},{key:"parseInteropBlock",value:function(){try{var e=this;if(e.interop)return;return tt((function(){if(!e.ifd0)return et(e.parseIfd0Block())}),(function(){return tt((function(){if(void 0===e.interopOffset&&!e.exif)return et(e.parseExifBlock())}),(function(){if(void 0!==e.interopOffset)return e.parseBlock(e.interopOffset,"interop")}))}))}catch(e){return Promise.reject(e)}}},{key:"parseThumbnailBlock",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];try{var t=this;if(t.ifd1||t.ifd1Parsed)return;if(t.options.mergeOutput&&!e)return;return t.findIfd1Offset(),t.ifd1Offset>0&&(t.parseBlock(t.ifd1Offset,"ifd1"),t.ifd1Parsed=!0),t.ifd1}catch(e){return Promise.reject(e)}}},{key:"extractThumbnail",value:function(){try{var e=this;return e.headerParsed||e.parseHeader(),tt((function(){if(!e.ifd1Parsed)return et(e.parseThumbnailBlock(!0))}),(function(){if(void 0!==e.ifd1){var t=e.ifd1.get(513),n=e.ifd1.get(514);return e.chunk.getUint8Array(t,n)}}))}catch(e){return Promise.reject(e)}}},{key:"image",get:function(){return this.ifd0}},{key:"thumbnail",get:function(){return this.ifd1}},{key:"createOutput",value:function(){var e,t,n,r={},i=ye;Array.isArray(i)||("function"==typeof i.entries&&(i=i.entries()),i=m(i));for(var a=0;a<i.length;a++)if(!I(e=this[t=i[a]]))if(n=this.canTranslate?this.translateBlock(e,t):k(e),this.options.mergeOutput){if("ifd1"===t)continue;g(r,n)}else r[t]=n;return this.makerNote&&(r.makerNote=this.makerNote),this.userComment&&(r.userComment=this.userComment),r}},{key:"assignToOutput",value:function(e,t){if(this.globalOptions.mergeOutput)g(e,t);else{var n=y(t);Array.isArray(n)||("function"==typeof n.entries&&(n=n.entries()),n=m(n));for(var r=0;r<n.length;r++){var i=n[r],a=i[0],s=i[1];this.assignObjectToOutput(e,a,s)}}}}],[{key:"canHandle",value:function(e,t){return 225===e.getUint8(t+1)&&1165519206===e.getUint32(t+4)&&0===e.getUint16(t+8)}}]),i}(function(e){a(i,e);var n=d(i);function i(){return t(this,i),n.apply(this,arguments)}return r(i,[{key:"parseHeader",value:function(){var e=this.chunk.getUint16();18761===e?this.le=!0:19789===e&&(this.le=!1),this.chunk.le=this.le,this.headerParsed=!0}},{key:"parseTags",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:S(),r=this.options[t],i=r.pick,a=r.skip,s=(i=O(i)).size>0,u=0===a.size,o=this.chunk.getUint16(e);e+=2;for(var f=0;f<o;f++){var c=this.chunk.getUint16(e);if(s){if(i.has(c)&&(n.set(c,this.parseTag(e,c,t)),i.delete(c),0===i.size))break}else!u&&a.has(c)||n.set(c,this.parseTag(e,c,t));e+=12}return n}},{key:"parseTag",value:function(e,t,n){var r,i=this.chunk,a=i.getUint16(e+2),s=i.getUint32(e+4),u=nt[a];if(u*s<=4?e+=8:e=i.getUint32(e+8),(a<1||a>13)&&L("Invalid TIFF value type. block: ".concat(n.toUpperCase(),", tag: ").concat(t.toString(16),", type: ").concat(a,", offset ").concat(e)),e>i.byteLength&&L("Invalid TIFF value offset. block: ".concat(n.toUpperCase(),", tag: ").concat(t.toString(16),", type: ").concat(a,", offset ").concat(e," is outside of chunk size ").concat(i.byteLength)),1===a)return i.getUint8Array(e,s);if(2===a)return""===(r=function(e){for(;e.endsWith("\0");)e=e.slice(0,-1);return e}(r=i.getString(e,s)).trim())?void 0:r;if(7===a)return i.getUint8Array(e,s);if(1===s)return this.parseTagValue(a,e);for(var o=new(function(e){switch(e){case 1:return Uint8Array;case 3:return Uint16Array;case 4:return Uint32Array;case 5:return Array;case 6:return Int8Array;case 8:return Int16Array;case 9:return Int32Array;case 10:return Array;case 11:return Float32Array;case 12:return Float64Array;default:return Array}}(a))(s),f=u,c=0;c<s;c++)o[c]=this.parseTagValue(a,e),e+=f;return o}},{key:"parseTagValue",value:function(e,t){var n=this.chunk;switch(e){case 1:return n.getUint8(t);case 3:return n.getUint16(t);case 4:return n.getUint32(t);case 5:return n.getUint32(t)/n.getUint32(t+4);case 6:return n.getInt8(t);case 8:return n.getInt16(t);case 9:return n.getInt32(t);case 10:return n.getInt32(t)/n.getInt32(t+4);case 11:return n.getFloat(t);case 12:return n.getDouble(t);case 13:return n.getUint32(t);default:L("Invalid tiff type ".concat(e))}}}]),i}(De));function it(e,t,n,r){var i=e+t/60+n/3600;return"S"!==r&&"W"!==r||(i*=-1),i}i(rt,"type","tiff"),i(rt,"headerLength",10),W.set("tiff",rt);var at=Object.freeze({__proto__:null,default:ze,Exifr:Ie,fileParsers:M,segmentParsers:W,fileReaders:K,tagKeys:re,tagValues:ie,tagRevivers:ae,createDictionary:te,extendDictionary:ne,fetchUrlAsArrayBuffer:G,readBlobAsArrayBuffer:Y,chunkedProps:de,otherSegments:ve,segments:pe,tiffBlocks:ye,segmentsAndBlocks:ge,tiffExtractables:ke,inheritables:me,allFormatters:be,Options:Pe,parse:Te});function st(e,t,n){return n?t?t(e):e:(e&&e.then||(e=Promise.resolve(e)),t?e.then(t):e)}function ut(e){return function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];try{return Promise.resolve(e.apply(this,t))}catch(e){return Promise.reject(e)}}}var ot=ut((function(e){var t=new Ie(vt);return st(t.read(e),(function(){return st(t.parse(),(function(e){if(e&&e.ifd0)return e.ifd0[274]}))}))})),ft=ut((function(e){var t=new Ie(dt);return st(t.read(e),(function(){return st(t.parse(),(function(e){if(e&&e.gps){var t=e.gps;return{latitude:t.latitude,longitude:t.longitude}}}))}))})),ct=ut((function(e){return st(this.thumbnail(e),(function(e){if(void 0!==e){var t=new Blob([e]);return URL.createObjectURL(t)}}))})),ht=ut((function(e){var t=new Ie(pt);return st(t.read(e),(function(){return st(t.extractThumbnail(),(function(e){return e&&_?j.from(e):e}))}))})),lt={ifd0:!1,ifd1:!1,exif:!1,gps:!1,interop:!1,sanitize:!1,reviveValues:!0,translateKeys:!1,translateValues:!1,mergeOutput:!1},dt=g({},lt,{firstChunkSize:4e4,gps:[1,2,3,4]}),vt=g({},lt,{firstChunkSize:4e4,ifd0:[274]}),pt=g({},lt,{tiff:!1,ifd1:!0,mergeOutput:!1}),yt=Object.freeze({1:{dimensionSwapped:!1,scaleX:1,scaleY:1,deg:0,rad:0},2:{dimensionSwapped:!1,scaleX:-1,scaleY:1,deg:0,rad:0},3:{dimensionSwapped:!1,scaleX:1,scaleY:1,deg:180,rad:180*Math.PI/180},4:{dimensionSwapped:!1,scaleX:-1,scaleY:1,deg:180,rad:180*Math.PI/180},5:{dimensionSwapped:!0,scaleX:1,scaleY:-1,deg:90,rad:90*Math.PI/180},6:{dimensionSwapped:!0,scaleX:1,scaleY:1,deg:90,rad:90*Math.PI/180},7:{dimensionSwapped:!0,scaleX:1,scaleY:-1,deg:270,rad:270*Math.PI/180},8:{dimensionSwapped:!0,scaleX:1,scaleY:1,deg:270,rad:270*Math.PI/180}});if(e.rotateCanvas=!0,e.rotateCss=!0,"object"==typeof navigator){var gt=navigator.userAgent;if(gt.includes("iPad")||gt.includes("iPhone")){var kt=gt.match(/OS (\d+)_(\d+)/);if(kt){var mt=kt[1],bt=kt[2],At=Number(mt)+.1*Number(bt);e.rotateCanvas=At<13.4,e.rotateCss=!1}}else if(gt.includes("OS X 10")){var wt=gt.match(/OS X 10[_.](\d+)/)[1];e.rotateCanvas=e.rotateCss=Number(wt)<15}if(gt.includes("Chrome/")){var Ot=gt.match(/Chrome\/(\d+)/)[1];e.rotateCanvas=e.rotateCss=Number(Ot)<81}else if(gt.includes("Firefox/")){var St=gt.match(/Firefox\/(\d+)/)[1];e.rotateCanvas=e.rotateCss=Number(St)<77}}function Pt(){}var Ut=function(e){a(u,e);var n=d(u);function u(){var e;t(this,u);for(var r=arguments.length,a=new Array(r),s=0;s<r;s++)a[s]=arguments[s];return i(h(e=n.call.apply(n,[this].concat(a))),"ranges",new xt),0!==e.byteLength&&e.ranges.add(0,e.byteLength),e}return r(u,[{key:"_tryExtend",value:function(e,t,n){if(0===e&&0===this.byteLength&&n){var r=new DataView(n.buffer||n,n.byteOffset,n.byteLength);this._swapDataView(r)}else{var i=e+t;if(i>this.byteLength){var a=this._extend(i).dataView;this._swapDataView(a)}}}},{key:"_extend",value:function(e){var t;t=_?j.allocUnsafe(e):new Uint8Array(e);var n=new DataView(t.buffer,t.byteOffset,t.byteLength);return t.set(new Uint8Array(this.buffer,this.byteOffset,this.byteLength),0),{uintView:t,dataView:n}}},{key:"subarray",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];return t=t||this._lengthToEnd(e),n&&this._tryExtend(e,t),this.ranges.add(e,t),v(s(u.prototype),"subarray",this).call(this,e,t)}},{key:"set",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];n&&this._tryExtend(t,e.byteLength,e);var r=v(s(u.prototype),"set",this).call(this,e,t);return this.ranges.add(t,r.byteLength),r}},{key:"ensureChunk",value:function(e,t){try{var n=this;if(!n.chunked)return;if(n.ranges.available(e,t))return;return function(e,t){if(!t)return e&&e.then?e.then(Pt):Promise.resolve()}(n.readChunk(e,t))}catch(e){return Promise.reject(e)}}},{key:"available",value:function(e,t){return this.ranges.available(e,t)}}]),u}(D),xt=function(){function e(){t(this,e),i(this,"list",[])}return r(e,[{key:"length",get:function(){return this.list.length}},{key:"add",value:function(e,t){var n=e+t,r=this.list.filter((function(t){return Ct(e,t.offset,n)||Ct(e,t.end,n)}));if(r.length>0){e=Math.min.apply(Math,[e].concat(r.map((function(e){return e.offset})))),t=(n=Math.max.apply(Math,[n].concat(r.map((function(e){return e.end})))))-e;var i=r.shift();i.offset=e,i.length=t,i.end=n,this.list=this.list.filter((function(e){return!r.includes(e)}))}else this.list.push({offset:e,length:t,end:n})}},{key:"available",value:function(e,t){var n=e+t;return this.list.some((function(t){return t.offset<=e&&n<=t.end}))}}]),e}();function Ct(e,t,n){return e<=t&&t<=n}function Bt(){}function jt(e,t){if(!t)return e&&e.then?e.then(Bt):Promise.resolve()}function _t(e,t,n){return n?t?t(e):e:(e&&e.then||(e=Promise.resolve(e)),t?e.then(t):e)}var Vt=function(e){a(i,e);var n=d(i);function i(){return t(this,i),n.apply(this,arguments)}return r(i,[{key:"readWhole",value:function(){try{var e=this;return e.chunked=!1,_t(Y(e.input),(function(t){e._swapArrayBuffer(t)}))}catch(e){return Promise.reject(e)}}},{key:"readChunked",value:function(){return this.chunked=!0,this.size=this.input.size,v(s(i.prototype),"readChunked",this).call(this)}},{key:"_readChunk",value:function(e,t){try{var n=this,r=t?e+t:void 0,i=n.input.slice(e,r);return _t(Y(i),(function(t){return n.set(t,e,!0)}))}catch(e){return Promise.reject(e)}}}]),i}(function(e){a(s,e);var n=d(s);function s(e,r){var a;return t(this,s),i(h(a=n.call(this,0)),"chunksRead",0),a.input=e,a.options=r,a}return r(s,[{key:"readWhole",value:function(){try{var e=this;return e.chunked=!1,jt(e.readChunk(e.nextChunkOffset))}catch(e){return Promise.reject(e)}}},{key:"readChunked",value:function(){try{var e=this;return e.chunked=!0,jt(e.readChunk(0,e.options.firstChunkSize))}catch(e){return Promise.reject(e)}}},{key:"readNextChunk",value:function(e){try{var t=this;if(void 0===e&&(e=t.nextChunkOffset),t.fullyRead)return t.chunksRead++,!1;var n=t.options.chunkSize;return r=t.readChunk(e,n),i=function(e){return!!e&&e.byteLength===n},a?i?i(r):r:(r&&r.then||(r=Promise.resolve(r)),i?r.then(i):r)}catch(e){return Promise.reject(e)}var r,i,a}},{key:"readChunk",value:function(e,t){try{var n=this;if(n.chunksRead++,0===(t=n.safeWrapAddress(e,t)))return;return n._readChunk(e,t)}catch(e){return Promise.reject(e)}}},{key:"safeWrapAddress",value:function(e,t){return void 0!==this.size&&e+t>this.size?Math.max(0,this.size-e):t}},{key:"nextChunkOffset",get:function(){if(0!==this.ranges.list.length)return this.ranges.list[0].length}},{key:"canReadNextChunk",get:function(){return this.chunksRead<this.options.chunkLimit}},{key:"fullyRead",get:function(){return void 0!==this.size&&this.nextChunkOffset===this.size}},{key:"read",value:function(){return this.options.chunked?this.readChunked():this.readWhole()}},{key:"close",value:function(){}}]),s}(Ut));K.set("blob",Vt),e.Exifr=Ie,e.Options=Pe,e.allFormatters=be,e.chunkedProps=de,e.createDictionary=te,e.default=at,e.disableAllOptions=lt,e.extendDictionary=ne,e.fetchUrlAsArrayBuffer=G,e.fileParsers=M,e.fileReaders=K,e.gps=ft,e.gpsOnlyOptions=dt,e.inheritables=me,e.orientation=ot,e.orientationOnlyOptions=vt,e.otherSegments=ve,e.parse=Te,e.readBlobAsArrayBuffer=Y,e.rotation=function(t){return st(ot(t),(function(t){return g({canvas:e.rotateCanvas,css:e.rotateCss},yt[t])}))},e.rotations=yt,e.segmentParsers=W,e.segments=pe,e.segmentsAndBlocks=ge,e.tagKeys=re,e.tagRevivers=ae,e.tagValues=ie,e.thumbnail=ht,e.thumbnailOnlyOptions=pt,e.thumbnailUrl=ct,e.tiffBlocks=ye,e.tiffExtractables=ke,Object.defineProperty(e,"__esModule",{value:!0})}));

}).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer)

},{"_process":36,"buffer":6}],17:[function(require,module,exports){
module.exports = function flatten(list, depth) {
  depth = (typeof depth == 'number') ? depth : Infinity;

  if (!depth) {
    if (Array.isArray(list)) {
      return list.map(function(i) { return i; });
    }
    return list;
  }

  return _flatten(list, 1);

  function _flatten(list, d) {
    return list.reduce(function (acc, item) {
      if (Array.isArray(item) && d < depth) {
        return acc.concat(_flatten(item, d + 1));
      }
      else {
        return acc.concat(item);
      }
    }, []);
  }
};

},{}],18:[function(require,module,exports){
'use strict';

exports.__esModule = true;
exports.default = getFormData;
exports.getFieldData = getFieldData;
var NODE_LIST_CLASSES = {
  '[object HTMLCollection]': true,
  '[object NodeList]': true,
  '[object RadioNodeList]': true

  // .type values for elements which can appear in .elements and should be ignored
};var IGNORED_ELEMENT_TYPES = {
  'button': true,
  'fieldset': true,
  'reset': true,
  'submit': true
};

var CHECKED_INPUT_TYPES = {
  'checkbox': true,
  'radio': true
};

var TRIM_RE = /^\s+|\s+$/g;

var slice = Array.prototype.slice;
var toString = Object.prototype.toString;

/**
 * @param {HTMLFormElement} form
 * @param {Object} options
 * @return {Object.<string,(string|Array.<string>)>} an object containing
 *   submittable value(s) held in the form's .elements collection, with
 *   properties named as per element names or ids.
 */

function getFormData(form) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { trim: false };

  if (!form) {
    throw new Error('A form is required by getFormData, was given form=' + form);
  }

  var data = {};
  var elementName = void 0;
  var elementNames = [];
  var elementNameLookup = {};

  // Get unique submittable element names for the form
  for (var i = 0, l = form.elements.length; i < l; i++) {
    var element = form.elements[i];
    if (IGNORED_ELEMENT_TYPES[element.type] || element.disabled) {
      continue;
    }
    elementName = element.name || element.id;
    if (elementName && !elementNameLookup[elementName]) {
      elementNames.push(elementName);
      elementNameLookup[elementName] = true;
    }
  }

  // Extract element data name-by-name for consistent handling of special cases
  // around elements which contain multiple inputs.
  for (var _i = 0, _l = elementNames.length; _i < _l; _i++) {
    elementName = elementNames[_i];
    var value = getFieldData(form, elementName, options);
    if (value != null) {
      data[elementName] = value;
    }
  }

  return data;
}

/**
 * @param {HTMLFormElement} form
 * @param {string} fieldName
 * @param {Object} options
 * @return {(string|Array.<string>)} submittable value(s) in the form for a
 *   named element from its .elements collection, or null if there was no
 *   element with that name or the element had no submittable value(s).
 */
function getFieldData(form, fieldName) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : { trim: false };

  if (!form) {
    throw new Error('A form is required by getFieldData, was given form=' + form);
  }
  if (!fieldName && toString.call(fieldName) !== '[object String]') {
    throw new Error('A field name is required by getFieldData, was given fieldName=' + fieldName);
  }

  var element = form.elements[fieldName];
  if (!element || element.disabled) {
    return null;
  }

  if (!NODE_LIST_CLASSES[toString.call(element)]) {
    return getFormElementValue(element, options.trim);
  }

  // Deal with multiple form controls which have the same name
  var data = [];
  var allRadios = true;
  for (var i = 0, l = element.length; i < l; i++) {
    if (element[i].disabled) {
      continue;
    }
    if (allRadios && element[i].type !== 'radio') {
      allRadios = false;
    }
    var value = getFormElementValue(element[i], options.trim);
    if (value != null) {
      data = data.concat(value);
    }
  }

  // Special case for an element with multiple same-named inputs which were all
  // radio buttons: if there was a selected value, only return the value.
  if (allRadios && data.length === 1) {
    return data[0];
  }

  return data.length > 0 ? data : null;
}

/**
 * @param {HTMLElement} element a form element.
 * @param {booleam} trim should values for text entry inputs be trimmed?
 * @return {(string|Array.<string>|File|Array.<File>)} the element's submittable
 *   value(s), or null if it had none.
 */
function getFormElementValue(element, trim) {
  var value = null;
  var type = element.type;


  if (type === 'select-one') {
    if (element.options.length) {
      value = element.options[element.selectedIndex].value;
    }
    return value;
  }

  if (type === 'select-multiple') {
    value = [];
    for (var i = 0, l = element.options.length; i < l; i++) {
      if (element.options[i].selected) {
        value.push(element.options[i].value);
      }
    }
    if (value.length === 0) {
      value = null;
    }
    return value;
  }

  // If a file input doesn't have a files attribute, fall through to using its
  // value attribute.
  if (type === 'file' && 'files' in element) {
    if (element.multiple) {
      value = slice.call(element.files);
      if (value.length === 0) {
        value = null;
      }
    } else {
      // Should be null if not present, according to the spec
      value = element.files[0];
    }
    return value;
  }

  if (!CHECKED_INPUT_TYPES[type]) {
    value = trim ? element.value.replace(TRIM_RE, '') : element.value;
  } else if (element.checked) {
    value = element.value;
  }

  return value;
}

// For UMD build access to getFieldData
getFormData.getFieldData = getFieldData;
},{}],19:[function(require,module,exports){

/**
 * Module exports.
 *
 * Logic borrowed from Modernizr:
 *
 *   - https://github.com/Modernizr/Modernizr/blob/master/feature-detects/cors.js
 */

try {
  module.exports = typeof XMLHttpRequest !== 'undefined' &&
    'withCredentials' in new XMLHttpRequest();
} catch (err) {
  // if XMLHttp support is disabled in IE then it will throw
  // when trying to create
  module.exports = false;
}

},{}],20:[function(require,module,exports){
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],21:[function(require,module,exports){
module.exports = function isShallowEqual (a, b) {
  if (a === b) return true
  for (var i in a) if (!(i in b)) return false
  for (var i in b) if (a[i] !== b[i]) return false
  return true
}

},{}],22:[function(require,module,exports){
(function (global){(function (){
/*
 *  base64.js
 *
 *  Licensed under the BSD 3-Clause License.
 *    http://opensource.org/licenses/BSD-3-Clause
 *
 *  References:
 *    http://en.wikipedia.org/wiki/Base64
 */
;(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined'
        ? module.exports = factory(global)
        : typeof define === 'function' && define.amd
        ? define(factory) : factory(global)
}((
    typeof self !== 'undefined' ? self
        : typeof window !== 'undefined' ? window
        : typeof global !== 'undefined' ? global
: this
), function(global) {
    'use strict';
    // existing version for noConflict()
    global = global || {};
    var _Base64 = global.Base64;
    var version = "2.6.4";
    // constants
    var b64chars
        = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
    var b64tab = function(bin) {
        var t = {};
        for (var i = 0, l = bin.length; i < l; i++) t[bin.charAt(i)] = i;
        return t;
    }(b64chars);
    var fromCharCode = String.fromCharCode;
    // encoder stuff
    var cb_utob = function(c) {
        if (c.length < 2) {
            var cc = c.charCodeAt(0);
            return cc < 0x80 ? c
                : cc < 0x800 ? (fromCharCode(0xc0 | (cc >>> 6))
                                + fromCharCode(0x80 | (cc & 0x3f)))
                : (fromCharCode(0xe0 | ((cc >>> 12) & 0x0f))
                    + fromCharCode(0x80 | ((cc >>>  6) & 0x3f))
                    + fromCharCode(0x80 | ( cc         & 0x3f)));
        } else {
            var cc = 0x10000
                + (c.charCodeAt(0) - 0xD800) * 0x400
                + (c.charCodeAt(1) - 0xDC00);
            return (fromCharCode(0xf0 | ((cc >>> 18) & 0x07))
                    + fromCharCode(0x80 | ((cc >>> 12) & 0x3f))
                    + fromCharCode(0x80 | ((cc >>>  6) & 0x3f))
                    + fromCharCode(0x80 | ( cc         & 0x3f)));
        }
    };
    var re_utob = /[\uD800-\uDBFF][\uDC00-\uDFFFF]|[^\x00-\x7F]/g;
    var utob = function(u) {
        return u.replace(re_utob, cb_utob);
    };
    var cb_encode = function(ccc) {
        var padlen = [0, 2, 1][ccc.length % 3],
        ord = ccc.charCodeAt(0) << 16
            | ((ccc.length > 1 ? ccc.charCodeAt(1) : 0) << 8)
            | ((ccc.length > 2 ? ccc.charCodeAt(2) : 0)),
        chars = [
            b64chars.charAt( ord >>> 18),
            b64chars.charAt((ord >>> 12) & 63),
            padlen >= 2 ? '=' : b64chars.charAt((ord >>> 6) & 63),
            padlen >= 1 ? '=' : b64chars.charAt(ord & 63)
        ];
        return chars.join('');
    };
    var btoa = global.btoa && typeof global.btoa == 'function'
        ? function(b){ return global.btoa(b) } : function(b) {
        if (b.match(/[^\x00-\xFF]/)) throw new RangeError(
            'The string contains invalid characters.'
        );
        return b.replace(/[\s\S]{1,3}/g, cb_encode);
    };
    var _encode = function(u) {
        return btoa(utob(String(u)));
    };
    var mkUriSafe = function (b64) {
        return b64.replace(/[+\/]/g, function(m0) {
            return m0 == '+' ? '-' : '_';
        }).replace(/=/g, '');
    };
    var encode = function(u, urisafe) {
        return urisafe ? mkUriSafe(_encode(u)) : _encode(u);
    };
    var encodeURI = function(u) { return encode(u, true) };
    var fromUint8Array;
    if (global.Uint8Array) fromUint8Array = function(a, urisafe) {
        // return btoa(fromCharCode.apply(null, a));
        var b64 = '';
        for (var i = 0, l = a.length; i < l; i += 3) {
            var a0 = a[i], a1 = a[i+1], a2 = a[i+2];
            var ord = a0 << 16 | a1 << 8 | a2;
            b64 +=    b64chars.charAt( ord >>> 18)
                +     b64chars.charAt((ord >>> 12) & 63)
                + ( typeof a1 != 'undefined'
                    ? b64chars.charAt((ord >>>  6) & 63) : '=')
                + ( typeof a2 != 'undefined'
                    ? b64chars.charAt( ord         & 63) : '=');
        }
        return urisafe ? mkUriSafe(b64) : b64;
    };
    // decoder stuff
    var re_btou = /[\xC0-\xDF][\x80-\xBF]|[\xE0-\xEF][\x80-\xBF]{2}|[\xF0-\xF7][\x80-\xBF]{3}/g;
    var cb_btou = function(cccc) {
        switch(cccc.length) {
        case 4:
            var cp = ((0x07 & cccc.charCodeAt(0)) << 18)
                |    ((0x3f & cccc.charCodeAt(1)) << 12)
                |    ((0x3f & cccc.charCodeAt(2)) <<  6)
                |     (0x3f & cccc.charCodeAt(3)),
            offset = cp - 0x10000;
            return (fromCharCode((offset  >>> 10) + 0xD800)
                    + fromCharCode((offset & 0x3FF) + 0xDC00));
        case 3:
            return fromCharCode(
                ((0x0f & cccc.charCodeAt(0)) << 12)
                    | ((0x3f & cccc.charCodeAt(1)) << 6)
                    |  (0x3f & cccc.charCodeAt(2))
            );
        default:
            return  fromCharCode(
                ((0x1f & cccc.charCodeAt(0)) << 6)
                    |  (0x3f & cccc.charCodeAt(1))
            );
        }
    };
    var btou = function(b) {
        return b.replace(re_btou, cb_btou);
    };
    var cb_decode = function(cccc) {
        var len = cccc.length,
        padlen = len % 4,
        n = (len > 0 ? b64tab[cccc.charAt(0)] << 18 : 0)
            | (len > 1 ? b64tab[cccc.charAt(1)] << 12 : 0)
            | (len > 2 ? b64tab[cccc.charAt(2)] <<  6 : 0)
            | (len > 3 ? b64tab[cccc.charAt(3)]       : 0),
        chars = [
            fromCharCode( n >>> 16),
            fromCharCode((n >>>  8) & 0xff),
            fromCharCode( n         & 0xff)
        ];
        chars.length -= [0, 0, 2, 1][padlen];
        return chars.join('');
    };
    var _atob = global.atob && typeof global.atob == 'function'
        ? function(a){ return global.atob(a) } : function(a){
        return a.replace(/\S{1,4}/g, cb_decode);
    };
    var atob = function(a) {
        return _atob(String(a).replace(/[^A-Za-z0-9\+\/]/g, ''));
    };
    var _decode = function(a) { return btou(_atob(a)) };
    var _fromURI = function(a) {
        return String(a).replace(/[-_]/g, function(m0) {
            return m0 == '-' ? '+' : '/'
        }).replace(/[^A-Za-z0-9\+\/]/g, '');
    };
    var decode = function(a){
        return _decode(_fromURI(a));
    };
    var toUint8Array;
    if (global.Uint8Array) toUint8Array = function(a) {
        return Uint8Array.from(atob(_fromURI(a)), function(c) {
            return c.charCodeAt(0);
        });
    };
    var noConflict = function() {
        var Base64 = global.Base64;
        global.Base64 = _Base64;
        return Base64;
    };
    // export Base64
    global.Base64 = {
        VERSION: version,
        atob: atob,
        btoa: btoa,
        fromBase64: decode,
        toBase64: encode,
        utob: utob,
        encode: encode,
        encodeURI: encodeURI,
        btou: btou,
        decode: decode,
        noConflict: noConflict,
        fromUint8Array: fromUint8Array,
        toUint8Array: toUint8Array
    };
    // if ES5 is available, make Base64.extendString() available
    if (typeof Object.defineProperty === 'function') {
        var noEnum = function(v){
            return {value:v,enumerable:false,writable:true,configurable:true};
        };
        global.Base64.extendString = function () {
            Object.defineProperty(
                String.prototype, 'fromBase64', noEnum(function () {
                    return decode(this)
                }));
            Object.defineProperty(
                String.prototype, 'toBase64', noEnum(function (urisafe) {
                    return encode(this, urisafe)
                }));
            Object.defineProperty(
                String.prototype, 'toBase64URI', noEnum(function () {
                    return encode(this, true)
                }));
        };
    }
    //
    // export Base64 to the namespace
    //
    if (global['Meteor']) { // Meteor.js
        Base64 = global.Base64;
    }
    // module.exports and AMD are mutually exclusive.
    // module.exports has precedence.
    if (typeof module !== 'undefined' && module.exports) {
        module.exports.Base64 = global.Base64;
    }
    else if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define([], function(){ return global.Base64 });
    }
    // that's it!
    return {Base64: global.Base64}
}));

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],23:[function(require,module,exports){
(function (global){(function (){
/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as the `TypeError` message for "Functions" methods. */
var FUNC_ERROR_TEXT = 'Expected a function';

/** Used as references for various `Number` constants. */
var NAN = 0 / 0;

/** `Object#toString` result references. */
var symbolTag = '[object Symbol]';

/** Used to match leading and trailing whitespace. */
var reTrim = /^\s+|\s+$/g;

/** Used to detect bad signed hexadecimal string values. */
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

/** Used to detect binary string values. */
var reIsBinary = /^0b[01]+$/i;

/** Used to detect octal string values. */
var reIsOctal = /^0o[0-7]+$/i;

/** Built-in method references without a dependency on `root`. */
var freeParseInt = parseInt;

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max,
    nativeMin = Math.min;

/**
 * Gets the timestamp of the number of milliseconds that have elapsed since
 * the Unix epoch (1 January 1970 00:00:00 UTC).
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Date
 * @returns {number} Returns the timestamp.
 * @example
 *
 * _.defer(function(stamp) {
 *   console.log(_.now() - stamp);
 * }, _.now());
 * // => Logs the number of milliseconds it took for the deferred invocation.
 */
var now = function() {
  return root.Date.now();
};

/**
 * Creates a debounced function that delays invoking `func` until after `wait`
 * milliseconds have elapsed since the last time the debounced function was
 * invoked. The debounced function comes with a `cancel` method to cancel
 * delayed `func` invocations and a `flush` method to immediately invoke them.
 * Provide `options` to indicate whether `func` should be invoked on the
 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
 * with the last arguments provided to the debounced function. Subsequent
 * calls to the debounced function return the result of the last `func`
 * invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the debounced function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.debounce` and `_.throttle`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to debounce.
 * @param {number} [wait=0] The number of milliseconds to delay.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=false]
 *  Specify invoking on the leading edge of the timeout.
 * @param {number} [options.maxWait]
 *  The maximum time `func` is allowed to be delayed before it's invoked.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new debounced function.
 * @example
 *
 * // Avoid costly calculations while the window size is in flux.
 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
 *
 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
 * jQuery(element).on('click', _.debounce(sendMail, 300, {
 *   'leading': true,
 *   'trailing': false
 * }));
 *
 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
 * var source = new EventSource('/stream');
 * jQuery(source).on('message', debounced);
 *
 * // Cancel the trailing debounced invocation.
 * jQuery(window).on('popstate', debounced.cancel);
 */
function debounce(func, wait, options) {
  var lastArgs,
      lastThis,
      maxWait,
      result,
      timerId,
      lastCallTime,
      lastInvokeTime = 0,
      leading = false,
      maxing = false,
      trailing = true;

  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  wait = toNumber(wait) || 0;
  if (isObject(options)) {
    leading = !!options.leading;
    maxing = 'maxWait' in options;
    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
    trailing = 'trailing' in options ? !!options.trailing : trailing;
  }

  function invokeFunc(time) {
    var args = lastArgs,
        thisArg = lastThis;

    lastArgs = lastThis = undefined;
    lastInvokeTime = time;
    result = func.apply(thisArg, args);
    return result;
  }

  function leadingEdge(time) {
    // Reset any `maxWait` timer.
    lastInvokeTime = time;
    // Start the timer for the trailing edge.
    timerId = setTimeout(timerExpired, wait);
    // Invoke the leading edge.
    return leading ? invokeFunc(time) : result;
  }

  function remainingWait(time) {
    var timeSinceLastCall = time - lastCallTime,
        timeSinceLastInvoke = time - lastInvokeTime,
        result = wait - timeSinceLastCall;

    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
  }

  function shouldInvoke(time) {
    var timeSinceLastCall = time - lastCallTime,
        timeSinceLastInvoke = time - lastInvokeTime;

    // Either this is the first call, activity has stopped and we're at the
    // trailing edge, the system time has gone backwards and we're treating
    // it as the trailing edge, or we've hit the `maxWait` limit.
    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
  }

  function timerExpired() {
    var time = now();
    if (shouldInvoke(time)) {
      return trailingEdge(time);
    }
    // Restart the timer.
    timerId = setTimeout(timerExpired, remainingWait(time));
  }

  function trailingEdge(time) {
    timerId = undefined;

    // Only invoke if we have `lastArgs` which means `func` has been
    // debounced at least once.
    if (trailing && lastArgs) {
      return invokeFunc(time);
    }
    lastArgs = lastThis = undefined;
    return result;
  }

  function cancel() {
    if (timerId !== undefined) {
      clearTimeout(timerId);
    }
    lastInvokeTime = 0;
    lastArgs = lastCallTime = lastThis = timerId = undefined;
  }

  function flush() {
    return timerId === undefined ? result : trailingEdge(now());
  }

  function debounced() {
    var time = now(),
        isInvoking = shouldInvoke(time);

    lastArgs = arguments;
    lastThis = this;
    lastCallTime = time;

    if (isInvoking) {
      if (timerId === undefined) {
        return leadingEdge(lastCallTime);
      }
      if (maxing) {
        // Handle invocations in a tight loop.
        timerId = setTimeout(timerExpired, wait);
        return invokeFunc(lastCallTime);
      }
    }
    if (timerId === undefined) {
      timerId = setTimeout(timerExpired, wait);
    }
    return result;
  }
  debounced.cancel = cancel;
  debounced.flush = flush;
  return debounced;
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return !!value && typeof value == 'object';
}

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && objectToString.call(value) == symbolTag);
}

/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */
function toNumber(value) {
  if (typeof value == 'number') {
    return value;
  }
  if (isSymbol(value)) {
    return NAN;
  }
  if (isObject(value)) {
    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
    value = isObject(other) ? (other + '') : other;
  }
  if (typeof value != 'string') {
    return value === 0 ? value : +value;
  }
  value = value.replace(reTrim, '');
  var isBinary = reIsBinary.test(value);
  return (isBinary || reIsOctal.test(value))
    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
    : (reIsBadHex.test(value) ? NAN : +value);
}

module.exports = debounce;

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],24:[function(require,module,exports){
(function (global){(function (){
/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as the `TypeError` message for "Functions" methods. */
var FUNC_ERROR_TEXT = 'Expected a function';

/** Used as references for various `Number` constants. */
var NAN = 0 / 0;

/** `Object#toString` result references. */
var symbolTag = '[object Symbol]';

/** Used to match leading and trailing whitespace. */
var reTrim = /^\s+|\s+$/g;

/** Used to detect bad signed hexadecimal string values. */
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

/** Used to detect binary string values. */
var reIsBinary = /^0b[01]+$/i;

/** Used to detect octal string values. */
var reIsOctal = /^0o[0-7]+$/i;

/** Built-in method references without a dependency on `root`. */
var freeParseInt = parseInt;

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max,
    nativeMin = Math.min;

/**
 * Gets the timestamp of the number of milliseconds that have elapsed since
 * the Unix epoch (1 January 1970 00:00:00 UTC).
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Date
 * @returns {number} Returns the timestamp.
 * @example
 *
 * _.defer(function(stamp) {
 *   console.log(_.now() - stamp);
 * }, _.now());
 * // => Logs the number of milliseconds it took for the deferred invocation.
 */
var now = function() {
  return root.Date.now();
};

/**
 * Creates a debounced function that delays invoking `func` until after `wait`
 * milliseconds have elapsed since the last time the debounced function was
 * invoked. The debounced function comes with a `cancel` method to cancel
 * delayed `func` invocations and a `flush` method to immediately invoke them.
 * Provide `options` to indicate whether `func` should be invoked on the
 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
 * with the last arguments provided to the debounced function. Subsequent
 * calls to the debounced function return the result of the last `func`
 * invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the debounced function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.debounce` and `_.throttle`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to debounce.
 * @param {number} [wait=0] The number of milliseconds to delay.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=false]
 *  Specify invoking on the leading edge of the timeout.
 * @param {number} [options.maxWait]
 *  The maximum time `func` is allowed to be delayed before it's invoked.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new debounced function.
 * @example
 *
 * // Avoid costly calculations while the window size is in flux.
 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
 *
 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
 * jQuery(element).on('click', _.debounce(sendMail, 300, {
 *   'leading': true,
 *   'trailing': false
 * }));
 *
 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
 * var source = new EventSource('/stream');
 * jQuery(source).on('message', debounced);
 *
 * // Cancel the trailing debounced invocation.
 * jQuery(window).on('popstate', debounced.cancel);
 */
function debounce(func, wait, options) {
  var lastArgs,
      lastThis,
      maxWait,
      result,
      timerId,
      lastCallTime,
      lastInvokeTime = 0,
      leading = false,
      maxing = false,
      trailing = true;

  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  wait = toNumber(wait) || 0;
  if (isObject(options)) {
    leading = !!options.leading;
    maxing = 'maxWait' in options;
    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
    trailing = 'trailing' in options ? !!options.trailing : trailing;
  }

  function invokeFunc(time) {
    var args = lastArgs,
        thisArg = lastThis;

    lastArgs = lastThis = undefined;
    lastInvokeTime = time;
    result = func.apply(thisArg, args);
    return result;
  }

  function leadingEdge(time) {
    // Reset any `maxWait` timer.
    lastInvokeTime = time;
    // Start the timer for the trailing edge.
    timerId = setTimeout(timerExpired, wait);
    // Invoke the leading edge.
    return leading ? invokeFunc(time) : result;
  }

  function remainingWait(time) {
    var timeSinceLastCall = time - lastCallTime,
        timeSinceLastInvoke = time - lastInvokeTime,
        result = wait - timeSinceLastCall;

    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
  }

  function shouldInvoke(time) {
    var timeSinceLastCall = time - lastCallTime,
        timeSinceLastInvoke = time - lastInvokeTime;

    // Either this is the first call, activity has stopped and we're at the
    // trailing edge, the system time has gone backwards and we're treating
    // it as the trailing edge, or we've hit the `maxWait` limit.
    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
  }

  function timerExpired() {
    var time = now();
    if (shouldInvoke(time)) {
      return trailingEdge(time);
    }
    // Restart the timer.
    timerId = setTimeout(timerExpired, remainingWait(time));
  }

  function trailingEdge(time) {
    timerId = undefined;

    // Only invoke if we have `lastArgs` which means `func` has been
    // debounced at least once.
    if (trailing && lastArgs) {
      return invokeFunc(time);
    }
    lastArgs = lastThis = undefined;
    return result;
  }

  function cancel() {
    if (timerId !== undefined) {
      clearTimeout(timerId);
    }
    lastInvokeTime = 0;
    lastArgs = lastCallTime = lastThis = timerId = undefined;
  }

  function flush() {
    return timerId === undefined ? result : trailingEdge(now());
  }

  function debounced() {
    var time = now(),
        isInvoking = shouldInvoke(time);

    lastArgs = arguments;
    lastThis = this;
    lastCallTime = time;

    if (isInvoking) {
      if (timerId === undefined) {
        return leadingEdge(lastCallTime);
      }
      if (maxing) {
        // Handle invocations in a tight loop.
        timerId = setTimeout(timerExpired, wait);
        return invokeFunc(lastCallTime);
      }
    }
    if (timerId === undefined) {
      timerId = setTimeout(timerExpired, wait);
    }
    return result;
  }
  debounced.cancel = cancel;
  debounced.flush = flush;
  return debounced;
}

/**
 * Creates a throttled function that only invokes `func` at most once per
 * every `wait` milliseconds. The throttled function comes with a `cancel`
 * method to cancel delayed `func` invocations and a `flush` method to
 * immediately invoke them. Provide `options` to indicate whether `func`
 * should be invoked on the leading and/or trailing edge of the `wait`
 * timeout. The `func` is invoked with the last arguments provided to the
 * throttled function. Subsequent calls to the throttled function return the
 * result of the last `func` invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the throttled function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.throttle` and `_.debounce`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to throttle.
 * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=true]
 *  Specify invoking on the leading edge of the timeout.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new throttled function.
 * @example
 *
 * // Avoid excessively updating the position while scrolling.
 * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
 *
 * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
 * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
 * jQuery(element).on('click', throttled);
 *
 * // Cancel the trailing throttled invocation.
 * jQuery(window).on('popstate', throttled.cancel);
 */
function throttle(func, wait, options) {
  var leading = true,
      trailing = true;

  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  if (isObject(options)) {
    leading = 'leading' in options ? !!options.leading : leading;
    trailing = 'trailing' in options ? !!options.trailing : trailing;
  }
  return debounce(func, wait, {
    'leading': leading,
    'maxWait': wait,
    'trailing': trailing
  });
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return !!value && typeof value == 'object';
}

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && objectToString.call(value) == symbolTag);
}

/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */
function toNumber(value) {
  if (typeof value == 'number') {
    return value;
  }
  if (isSymbol(value)) {
    return NAN;
  }
  if (isObject(value)) {
    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
    value = isObject(other) ? (other + '') : other;
  }
  if (typeof value != 'string') {
    return value === 0 ? value : +value;
  }
  value = value.replace(reTrim, '');
  var isBinary = reIsBinary.test(value);
  return (isBinary || reIsOctal.test(value))
    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
    : (reIsBadHex.test(value) ? NAN : +value);
}

module.exports = throttle;

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],25:[function(require,module,exports){
(function (global){(function (){
/**
 * marked - a markdown parser
 * Copyright (c) 2011-2018, Christopher Jeffrey. (MIT Licensed)
 * https://github.com/markedjs/marked
 */

;(function(root) {
'use strict';

/**
 * Block-Level Grammar
 */

var block = {
  newline: /^\n+/,
  code: /^( {4}[^\n]+\n*)+/,
  fences: /^ {0,3}(`{3,}|~{3,})([^`~\n]*)\n(?:|([\s\S]*?)\n)(?: {0,3}\1[~`]* *(?:\n+|$)|$)/,
  hr: /^ {0,3}((?:- *){3,}|(?:_ *){3,}|(?:\* *){3,})(?:\n+|$)/,
  heading: /^ {0,3}(#{1,6}) +([^\n]*?)(?: +#+)? *(?:\n+|$)/,
  blockquote: /^( {0,3}> ?(paragraph|[^\n]*)(?:\n|$))+/,
  list: /^( {0,3})(bull) [\s\S]+?(?:hr|def|\n{2,}(?! )(?!\1bull )\n*|\s*$)/,
  html: '^ {0,3}(?:' // optional indentation
    + '<(script|pre|style)[\\s>][\\s\\S]*?(?:</\\1>[^\\n]*\\n+|$)' // (1)
    + '|comment[^\\n]*(\\n+|$)' // (2)
    + '|<\\?[\\s\\S]*?\\?>\\n*' // (3)
    + '|<![A-Z][\\s\\S]*?>\\n*' // (4)
    + '|<!\\[CDATA\\[[\\s\\S]*?\\]\\]>\\n*' // (5)
    + '|</?(tag)(?: +|\\n|/?>)[\\s\\S]*?(?:\\n{2,}|$)' // (6)
    + '|<(?!script|pre|style)([a-z][\\w-]*)(?:attribute)*? */?>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:\\n{2,}|$)' // (7) open tag
    + '|</(?!script|pre|style)[a-z][\\w-]*\\s*>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:\\n{2,}|$)' // (7) closing tag
    + ')',
  def: /^ {0,3}\[(label)\]: *\n? *<?([^\s>]+)>?(?:(?: +\n? *| *\n *)(title))? *(?:\n+|$)/,
  nptable: noop,
  table: noop,
  lheading: /^([^\n]+)\n {0,3}(=+|-+) *(?:\n+|$)/,
  // regex template, placeholders will be replaced according to different paragraph
  // interruption rules of commonmark and the original markdown spec:
  _paragraph: /^([^\n]+(?:\n(?!hr|heading|lheading|blockquote|fences|list|html)[^\n]+)*)/,
  text: /^[^\n]+/
};

block._label = /(?!\s*\])(?:\\[\[\]]|[^\[\]])+/;
block._title = /(?:"(?:\\"?|[^"\\])*"|'[^'\n]*(?:\n[^'\n]+)*\n?'|\([^()]*\))/;
block.def = edit(block.def)
  .replace('label', block._label)
  .replace('title', block._title)
  .getRegex();

block.bullet = /(?:[*+-]|\d{1,9}\.)/;
block.item = /^( *)(bull) ?[^\n]*(?:\n(?!\1bull ?)[^\n]*)*/;
block.item = edit(block.item, 'gm')
  .replace(/bull/g, block.bullet)
  .getRegex();

block.list = edit(block.list)
  .replace(/bull/g, block.bullet)
  .replace('hr', '\\n+(?=\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$))')
  .replace('def', '\\n+(?=' + block.def.source + ')')
  .getRegex();

block._tag = 'address|article|aside|base|basefont|blockquote|body|caption'
  + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'
  + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'
  + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'
  + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr'
  + '|track|ul';
block._comment = /<!--(?!-?>)[\s\S]*?-->/;
block.html = edit(block.html, 'i')
  .replace('comment', block._comment)
  .replace('tag', block._tag)
  .replace('attribute', / +[a-zA-Z:_][\w.:-]*(?: *= *"[^"\n]*"| *= *'[^'\n]*'| *= *[^\s"'=<>`]+)?/)
  .getRegex();

block.paragraph = edit(block._paragraph)
  .replace('hr', block.hr)
  .replace('heading', ' {0,3}#{1,6} +')
  .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs
  .replace('blockquote', ' {0,3}>')
  .replace('fences', ' {0,3}(?:`{3,}|~{3,})[^`\\n]*\\n')
  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt
  .replace('html', '</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|!--)')
  .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks
  .getRegex();

block.blockquote = edit(block.blockquote)
  .replace('paragraph', block.paragraph)
  .getRegex();

/**
 * Normal Block Grammar
 */

block.normal = merge({}, block);

/**
 * GFM Block Grammar
 */

block.gfm = merge({}, block.normal, {
  nptable: /^ *([^|\n ].*\|.*)\n *([-:]+ *\|[-| :]*)(?:\n((?:.*[^>\n ].*(?:\n|$))*)\n*|$)/,
  table: /^ *\|(.+)\n *\|?( *[-:]+[-| :]*)(?:\n((?: *[^>\n ].*(?:\n|$))*)\n*|$)/
});

/**
 * Pedantic grammar (original John Gruber's loose markdown specification)
 */

block.pedantic = merge({}, block.normal, {
  html: edit(
    '^ *(?:comment *(?:\\n|\\s*$)'
    + '|<(tag)[\\s\\S]+?</\\1> *(?:\\n{2,}|\\s*$)' // closed tag
    + '|<tag(?:"[^"]*"|\'[^\']*\'|\\s[^\'"/>\\s]*)*?/?> *(?:\\n{2,}|\\s*$))')
    .replace('comment', block._comment)
    .replace(/tag/g, '(?!(?:'
      + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'
      + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'
      + '\\b)\\w+(?!:|[^\\w\\s@]*@)\\b')
    .getRegex(),
  def: /^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +(["(][^\n]+[")]))? *(?:\n+|$)/,
  heading: /^ *(#{1,6}) *([^\n]+?) *(?:#+ *)?(?:\n+|$)/,
  fences: noop, // fences not supported
  paragraph: edit(block.normal._paragraph)
    .replace('hr', block.hr)
    .replace('heading', ' *#{1,6} *[^\n]')
    .replace('lheading', block.lheading)
    .replace('blockquote', ' {0,3}>')
    .replace('|fences', '')
    .replace('|list', '')
    .replace('|html', '')
    .getRegex()
});

/**
 * Block Lexer
 */

function Lexer(options) {
  this.tokens = [];
  this.tokens.links = Object.create(null);
  this.options = options || marked.defaults;
  this.rules = block.normal;

  if (this.options.pedantic) {
    this.rules = block.pedantic;
  } else if (this.options.gfm) {
    this.rules = block.gfm;
  }
}

/**
 * Expose Block Rules
 */

Lexer.rules = block;

/**
 * Static Lex Method
 */

Lexer.lex = function(src, options) {
  var lexer = new Lexer(options);
  return lexer.lex(src);
};

/**
 * Preprocessing
 */

Lexer.prototype.lex = function(src) {
  src = src
    .replace(/\r\n|\r/g, '\n')
    .replace(/\t/g, '    ')
    .replace(/\u00a0/g, ' ')
    .replace(/\u2424/g, '\n');

  return this.token(src, true);
};

/**
 * Lexing
 */

Lexer.prototype.token = function(src, top) {
  src = src.replace(/^ +$/gm, '');
  var next,
      loose,
      cap,
      bull,
      b,
      item,
      listStart,
      listItems,
      t,
      space,
      i,
      tag,
      l,
      isordered,
      istask,
      ischecked;

  while (src) {
    // newline
    if (cap = this.rules.newline.exec(src)) {
      src = src.substring(cap[0].length);
      if (cap[0].length > 1) {
        this.tokens.push({
          type: 'space'
        });
      }
    }

    // code
    if (cap = this.rules.code.exec(src)) {
      var lastToken = this.tokens[this.tokens.length - 1];
      src = src.substring(cap[0].length);
      // An indented code block cannot interrupt a paragraph.
      if (lastToken && lastToken.type === 'paragraph') {
        lastToken.text += '\n' + cap[0].trimRight();
      } else {
        cap = cap[0].replace(/^ {4}/gm, '');
        this.tokens.push({
          type: 'code',
          codeBlockStyle: 'indented',
          text: !this.options.pedantic
            ? rtrim(cap, '\n')
            : cap
        });
      }
      continue;
    }

    // fences
    if (cap = this.rules.fences.exec(src)) {
      src = src.substring(cap[0].length);
      this.tokens.push({
        type: 'code',
        lang: cap[2] ? cap[2].trim() : cap[2],
        text: cap[3] || ''
      });
      continue;
    }

    // heading
    if (cap = this.rules.heading.exec(src)) {
      src = src.substring(cap[0].length);
      this.tokens.push({
        type: 'heading',
        depth: cap[1].length,
        text: cap[2]
      });
      continue;
    }

    // table no leading pipe (gfm)
    if (cap = this.rules.nptable.exec(src)) {
      item = {
        type: 'table',
        header: splitCells(cap[1].replace(/^ *| *\| *$/g, '')),
        align: cap[2].replace(/^ *|\| *$/g, '').split(/ *\| */),
        cells: cap[3] ? cap[3].replace(/\n$/, '').split('\n') : []
      };

      if (item.header.length === item.align.length) {
        src = src.substring(cap[0].length);

        for (i = 0; i < item.align.length; i++) {
          if (/^ *-+: *$/.test(item.align[i])) {
            item.align[i] = 'right';
          } else if (/^ *:-+: *$/.test(item.align[i])) {
            item.align[i] = 'center';
          } else if (/^ *:-+ *$/.test(item.align[i])) {
            item.align[i] = 'left';
          } else {
            item.align[i] = null;
          }
        }

        for (i = 0; i < item.cells.length; i++) {
          item.cells[i] = splitCells(item.cells[i], item.header.length);
        }

        this.tokens.push(item);

        continue;
      }
    }

    // hr
    if (cap = this.rules.hr.exec(src)) {
      src = src.substring(cap[0].length);
      this.tokens.push({
        type: 'hr'
      });
      continue;
    }

    // blockquote
    if (cap = this.rules.blockquote.exec(src)) {
      src = src.substring(cap[0].length);

      this.tokens.push({
        type: 'blockquote_start'
      });

      cap = cap[0].replace(/^ *> ?/gm, '');

      // Pass `top` to keep the current
      // "toplevel" state. This is exactly
      // how markdown.pl works.
      this.token(cap, top);

      this.tokens.push({
        type: 'blockquote_end'
      });

      continue;
    }

    // list
    if (cap = this.rules.list.exec(src)) {
      src = src.substring(cap[0].length);
      bull = cap[2];
      isordered = bull.length > 1;

      listStart = {
        type: 'list_start',
        ordered: isordered,
        start: isordered ? +bull : '',
        loose: false
      };

      this.tokens.push(listStart);

      // Get each top-level item.
      cap = cap[0].match(this.rules.item);

      listItems = [];
      next = false;
      l = cap.length;
      i = 0;

      for (; i < l; i++) {
        item = cap[i];

        // Remove the list item's bullet
        // so it is seen as the next token.
        space = item.length;
        item = item.replace(/^ *([*+-]|\d+\.) */, '');

        // Outdent whatever the
        // list item contains. Hacky.
        if (~item.indexOf('\n ')) {
          space -= item.length;
          item = !this.options.pedantic
            ? item.replace(new RegExp('^ {1,' + space + '}', 'gm'), '')
            : item.replace(/^ {1,4}/gm, '');
        }

        // Determine whether the next list item belongs here.
        // Backpedal if it does not belong in this list.
        if (i !== l - 1) {
          b = block.bullet.exec(cap[i + 1])[0];
          if (bull.length > 1 ? b.length === 1
            : (b.length > 1 || (this.options.smartLists && b !== bull))) {
            src = cap.slice(i + 1).join('\n') + src;
            i = l - 1;
          }
        }

        // Determine whether item is loose or not.
        // Use: /(^|\n)(?! )[^\n]+\n\n(?!\s*$)/
        // for discount behavior.
        loose = next || /\n\n(?!\s*$)/.test(item);
        if (i !== l - 1) {
          next = item.charAt(item.length - 1) === '\n';
          if (!loose) loose = next;
        }

        if (loose) {
          listStart.loose = true;
        }

        // Check for task list items
        istask = /^\[[ xX]\] /.test(item);
        ischecked = undefined;
        if (istask) {
          ischecked = item[1] !== ' ';
          item = item.replace(/^\[[ xX]\] +/, '');
        }

        t = {
          type: 'list_item_start',
          task: istask,
          checked: ischecked,
          loose: loose
        };

        listItems.push(t);
        this.tokens.push(t);

        // Recurse.
        this.token(item, false);

        this.tokens.push({
          type: 'list_item_end'
        });
      }

      if (listStart.loose) {
        l = listItems.length;
        i = 0;
        for (; i < l; i++) {
          listItems[i].loose = true;
        }
      }

      this.tokens.push({
        type: 'list_end'
      });

      continue;
    }

    // html
    if (cap = this.rules.html.exec(src)) {
      src = src.substring(cap[0].length);
      this.tokens.push({
        type: this.options.sanitize
          ? 'paragraph'
          : 'html',
        pre: !this.options.sanitizer
          && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),
        text: this.options.sanitize ? (this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0])) : cap[0]
      });
      continue;
    }

    // def
    if (top && (cap = this.rules.def.exec(src))) {
      src = src.substring(cap[0].length);
      if (cap[3]) cap[3] = cap[3].substring(1, cap[3].length - 1);
      tag = cap[1].toLowerCase().replace(/\s+/g, ' ');
      if (!this.tokens.links[tag]) {
        this.tokens.links[tag] = {
          href: cap[2],
          title: cap[3]
        };
      }
      continue;
    }

    // table (gfm)
    if (cap = this.rules.table.exec(src)) {
      item = {
        type: 'table',
        header: splitCells(cap[1].replace(/^ *| *\| *$/g, '')),
        align: cap[2].replace(/^ *|\| *$/g, '').split(/ *\| */),
        cells: cap[3] ? cap[3].replace(/\n$/, '').split('\n') : []
      };

      if (item.header.length === item.align.length) {
        src = src.substring(cap[0].length);

        for (i = 0; i < item.align.length; i++) {
          if (/^ *-+: *$/.test(item.align[i])) {
            item.align[i] = 'right';
          } else if (/^ *:-+: *$/.test(item.align[i])) {
            item.align[i] = 'center';
          } else if (/^ *:-+ *$/.test(item.align[i])) {
            item.align[i] = 'left';
          } else {
            item.align[i] = null;
          }
        }

        for (i = 0; i < item.cells.length; i++) {
          item.cells[i] = splitCells(
            item.cells[i].replace(/^ *\| *| *\| *$/g, ''),
            item.header.length);
        }

        this.tokens.push(item);

        continue;
      }
    }

    // lheading
    if (cap = this.rules.lheading.exec(src)) {
      src = src.substring(cap[0].length);
      this.tokens.push({
        type: 'heading',
        depth: cap[2].charAt(0) === '=' ? 1 : 2,
        text: cap[1]
      });
      continue;
    }

    // top-level paragraph
    if (top && (cap = this.rules.paragraph.exec(src))) {
      src = src.substring(cap[0].length);
      this.tokens.push({
        type: 'paragraph',
        text: cap[1].charAt(cap[1].length - 1) === '\n'
          ? cap[1].slice(0, -1)
          : cap[1]
      });
      continue;
    }

    // text
    if (cap = this.rules.text.exec(src)) {
      // Top-level should never reach here.
      src = src.substring(cap[0].length);
      this.tokens.push({
        type: 'text',
        text: cap[0]
      });
      continue;
    }

    if (src) {
      throw new Error('Infinite loop on byte: ' + src.charCodeAt(0));
    }
  }

  return this.tokens;
};

/**
 * Inline-Level Grammar
 */

var inline = {
  escape: /^\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/,
  autolink: /^<(scheme:[^\s\x00-\x1f<>]*|email)>/,
  url: noop,
  tag: '^comment'
    + '|^</[a-zA-Z][\\w:-]*\\s*>' // self-closing tag
    + '|^<[a-zA-Z][\\w-]*(?:attribute)*?\\s*/?>' // open tag
    + '|^<\\?[\\s\\S]*?\\?>' // processing instruction, e.g. <?php ?>
    + '|^<![a-zA-Z]+\\s[\\s\\S]*?>' // declaration, e.g. <!DOCTYPE html>
    + '|^<!\\[CDATA\\[[\\s\\S]*?\\]\\]>', // CDATA section
  link: /^!?\[(label)\]\(\s*(href)(?:\s+(title))?\s*\)/,
  reflink: /^!?\[(label)\]\[(?!\s*\])((?:\\[\[\]]?|[^\[\]\\])+)\]/,
  nolink: /^!?\[(?!\s*\])((?:\[[^\[\]]*\]|\\[\[\]]|[^\[\]])*)\](?:\[\])?/,
  strong: /^__([^\s_])__(?!_)|^\*\*([^\s*])\*\*(?!\*)|^__([^\s][\s\S]*?[^\s])__(?!_)|^\*\*([^\s][\s\S]*?[^\s])\*\*(?!\*)/,
  em: /^_([^\s_])_(?!_)|^\*([^\s*<\[])\*(?!\*)|^_([^\s<][\s\S]*?[^\s_])_(?!_|[^\spunctuation])|^_([^\s_<][\s\S]*?[^\s])_(?!_|[^\spunctuation])|^\*([^\s<"][\s\S]*?[^\s\*])\*(?!\*|[^\spunctuation])|^\*([^\s*"<\[][\s\S]*?[^\s])\*(?!\*)/,
  code: /^(`+)([^`]|[^`][\s\S]*?[^`])\1(?!`)/,
  br: /^( {2,}|\\)\n(?!\s*$)/,
  del: noop,
  text: /^(`+|[^`])(?:[\s\S]*?(?:(?=[\\<!\[`*]|\b_|$)|[^ ](?= {2,}\n))|(?= {2,}\n))/
};

// list of punctuation marks from common mark spec
// without ` and ] to workaround Rule 17 (inline code blocks/links)
inline._punctuation = '!"#$%&\'()*+,\\-./:;<=>?@\\[^_{|}~';
inline.em = edit(inline.em).replace(/punctuation/g, inline._punctuation).getRegex();

inline._escapes = /\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/g;

inline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;
inline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;
inline.autolink = edit(inline.autolink)
  .replace('scheme', inline._scheme)
  .replace('email', inline._email)
  .getRegex();

inline._attribute = /\s+[a-zA-Z:_][\w.:-]*(?:\s*=\s*"[^"]*"|\s*=\s*'[^']*'|\s*=\s*[^\s"'=<>`]+)?/;

inline.tag = edit(inline.tag)
  .replace('comment', block._comment)
  .replace('attribute', inline._attribute)
  .getRegex();

inline._label = /(?:\[[^\[\]]*\]|\\.|`[^`]*`|[^\[\]\\`])*?/;
inline._href = /<(?:\\[<>]?|[^\s<>\\])*>|[^\s\x00-\x1f]*/;
inline._title = /"(?:\\"?|[^"\\])*"|'(?:\\'?|[^'\\])*'|\((?:\\\)?|[^)\\])*\)/;

inline.link = edit(inline.link)
  .replace('label', inline._label)
  .replace('href', inline._href)
  .replace('title', inline._title)
  .getRegex();

inline.reflink = edit(inline.reflink)
  .replace('label', inline._label)
  .getRegex();

/**
 * Normal Inline Grammar
 */

inline.normal = merge({}, inline);

/**
 * Pedantic Inline Grammar
 */

inline.pedantic = merge({}, inline.normal, {
  strong: /^__(?=\S)([\s\S]*?\S)__(?!_)|^\*\*(?=\S)([\s\S]*?\S)\*\*(?!\*)/,
  em: /^_(?=\S)([\s\S]*?\S)_(?!_)|^\*(?=\S)([\s\S]*?\S)\*(?!\*)/,
  link: edit(/^!?\[(label)\]\((.*?)\)/)
    .replace('label', inline._label)
    .getRegex(),
  reflink: edit(/^!?\[(label)\]\s*\[([^\]]*)\]/)
    .replace('label', inline._label)
    .getRegex()
});

/**
 * GFM Inline Grammar
 */

inline.gfm = merge({}, inline.normal, {
  escape: edit(inline.escape).replace('])', '~|])').getRegex(),
  _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,
  url: /^((?:ftp|https?):\/\/|www\.)(?:[a-zA-Z0-9\-]+\.?)+[^\s<]*|^email/,
  _backpedal: /(?:[^?!.,:;*_~()&]+|\([^)]*\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/,
  del: /^~+(?=\S)([\s\S]*?\S)~+/,
  text: /^(`+|[^`])(?:[\s\S]*?(?:(?=[\\<!\[`*~]|\b_|https?:\/\/|ftp:\/\/|www\.|$)|[^ ](?= {2,}\n)|[^a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-](?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@))|(?= {2,}\n|[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@))/
});

inline.gfm.url = edit(inline.gfm.url, 'i')
  .replace('email', inline.gfm._extended_email)
  .getRegex();
/**
 * GFM + Line Breaks Inline Grammar
 */

inline.breaks = merge({}, inline.gfm, {
  br: edit(inline.br).replace('{2,}', '*').getRegex(),
  text: edit(inline.gfm.text)
    .replace('\\b_', '\\b_| {2,}\\n')
    .replace(/\{2,\}/g, '*')
    .getRegex()
});

/**
 * Inline Lexer & Compiler
 */

function InlineLexer(links, options) {
  this.options = options || marked.defaults;
  this.links = links;
  this.rules = inline.normal;
  this.renderer = this.options.renderer || new Renderer();
  this.renderer.options = this.options;

  if (!this.links) {
    throw new Error('Tokens array requires a `links` property.');
  }

  if (this.options.pedantic) {
    this.rules = inline.pedantic;
  } else if (this.options.gfm) {
    if (this.options.breaks) {
      this.rules = inline.breaks;
    } else {
      this.rules = inline.gfm;
    }
  }
}

/**
 * Expose Inline Rules
 */

InlineLexer.rules = inline;

/**
 * Static Lexing/Compiling Method
 */

InlineLexer.output = function(src, links, options) {
  var inline = new InlineLexer(links, options);
  return inline.output(src);
};

/**
 * Lexing/Compiling
 */

InlineLexer.prototype.output = function(src) {
  var out = '',
      link,
      text,
      href,
      title,
      cap,
      prevCapZero;

  while (src) {
    // escape
    if (cap = this.rules.escape.exec(src)) {
      src = src.substring(cap[0].length);
      out += escape(cap[1]);
      continue;
    }

    // tag
    if (cap = this.rules.tag.exec(src)) {
      if (!this.inLink && /^<a /i.test(cap[0])) {
        this.inLink = true;
      } else if (this.inLink && /^<\/a>/i.test(cap[0])) {
        this.inLink = false;
      }
      if (!this.inRawBlock && /^<(pre|code|kbd|script)(\s|>)/i.test(cap[0])) {
        this.inRawBlock = true;
      } else if (this.inRawBlock && /^<\/(pre|code|kbd|script)(\s|>)/i.test(cap[0])) {
        this.inRawBlock = false;
      }

      src = src.substring(cap[0].length);
      out += this.options.sanitize
        ? this.options.sanitizer
          ? this.options.sanitizer(cap[0])
          : escape(cap[0])
        : cap[0];
      continue;
    }

    // link
    if (cap = this.rules.link.exec(src)) {
      var lastParenIndex = findClosingBracket(cap[2], '()');
      if (lastParenIndex > -1) {
        var linkLen = 4 + cap[1].length + lastParenIndex;
        cap[2] = cap[2].substring(0, lastParenIndex);
        cap[0] = cap[0].substring(0, linkLen).trim();
        cap[3] = '';
      }
      src = src.substring(cap[0].length);
      this.inLink = true;
      href = cap[2];
      if (this.options.pedantic) {
        link = /^([^'"]*[^\s])\s+(['"])(.*)\2/.exec(href);

        if (link) {
          href = link[1];
          title = link[3];
        } else {
          title = '';
        }
      } else {
        title = cap[3] ? cap[3].slice(1, -1) : '';
      }
      href = href.trim().replace(/^<([\s\S]*)>$/, '$1');
      out += this.outputLink(cap, {
        href: InlineLexer.escapes(href),
        title: InlineLexer.escapes(title)
      });
      this.inLink = false;
      continue;
    }

    // reflink, nolink
    if ((cap = this.rules.reflink.exec(src))
        || (cap = this.rules.nolink.exec(src))) {
      src = src.substring(cap[0].length);
      link = (cap[2] || cap[1]).replace(/\s+/g, ' ');
      link = this.links[link.toLowerCase()];
      if (!link || !link.href) {
        out += cap[0].charAt(0);
        src = cap[0].substring(1) + src;
        continue;
      }
      this.inLink = true;
      out += this.outputLink(cap, link);
      this.inLink = false;
      continue;
    }

    // strong
    if (cap = this.rules.strong.exec(src)) {
      src = src.substring(cap[0].length);
      out += this.renderer.strong(this.output(cap[4] || cap[3] || cap[2] || cap[1]));
      continue;
    }

    // em
    if (cap = this.rules.em.exec(src)) {
      src = src.substring(cap[0].length);
      out += this.renderer.em(this.output(cap[6] || cap[5] || cap[4] || cap[3] || cap[2] || cap[1]));
      continue;
    }

    // code
    if (cap = this.rules.code.exec(src)) {
      src = src.substring(cap[0].length);
      out += this.renderer.codespan(escape(cap[2].trim(), true));
      continue;
    }

    // br
    if (cap = this.rules.br.exec(src)) {
      src = src.substring(cap[0].length);
      out += this.renderer.br();
      continue;
    }

    // del (gfm)
    if (cap = this.rules.del.exec(src)) {
      src = src.substring(cap[0].length);
      out += this.renderer.del(this.output(cap[1]));
      continue;
    }

    // autolink
    if (cap = this.rules.autolink.exec(src)) {
      src = src.substring(cap[0].length);
      if (cap[2] === '@') {
        text = escape(this.mangle(cap[1]));
        href = 'mailto:' + text;
      } else {
        text = escape(cap[1]);
        href = text;
      }
      out += this.renderer.link(href, null, text);
      continue;
    }

    // url (gfm)
    if (!this.inLink && (cap = this.rules.url.exec(src))) {
      if (cap[2] === '@') {
        text = escape(cap[0]);
        href = 'mailto:' + text;
      } else {
        // do extended autolink path validation
        do {
          prevCapZero = cap[0];
          cap[0] = this.rules._backpedal.exec(cap[0])[0];
        } while (prevCapZero !== cap[0]);
        text = escape(cap[0]);
        if (cap[1] === 'www.') {
          href = 'http://' + text;
        } else {
          href = text;
        }
      }
      src = src.substring(cap[0].length);
      out += this.renderer.link(href, null, text);
      continue;
    }

    // text
    if (cap = this.rules.text.exec(src)) {
      src = src.substring(cap[0].length);
      if (this.inRawBlock) {
        out += this.renderer.text(this.options.sanitize ? (this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0])) : cap[0]);
      } else {
        out += this.renderer.text(escape(this.smartypants(cap[0])));
      }
      continue;
    }

    if (src) {
      throw new Error('Infinite loop on byte: ' + src.charCodeAt(0));
    }
  }

  return out;
};

InlineLexer.escapes = function(text) {
  return text ? text.replace(InlineLexer.rules._escapes, '$1') : text;
};

/**
 * Compile Link
 */

InlineLexer.prototype.outputLink = function(cap, link) {
  var href = link.href,
      title = link.title ? escape(link.title) : null;

  return cap[0].charAt(0) !== '!'
    ? this.renderer.link(href, title, this.output(cap[1]))
    : this.renderer.image(href, title, escape(cap[1]));
};

/**
 * Smartypants Transformations
 */

InlineLexer.prototype.smartypants = function(text) {
  if (!this.options.smartypants) return text;
  return text
    // em-dashes
    .replace(/---/g, '\u2014')
    // en-dashes
    .replace(/--/g, '\u2013')
    // opening singles
    .replace(/(^|[-\u2014/(\[{"\s])'/g, '$1\u2018')
    // closing singles & apostrophes
    .replace(/'/g, '\u2019')
    // opening doubles
    .replace(/(^|[-\u2014/(\[{\u2018\s])"/g, '$1\u201c')
    // closing doubles
    .replace(/"/g, '\u201d')
    // ellipses
    .replace(/\.{3}/g, '\u2026');
};

/**
 * Mangle Links
 */

InlineLexer.prototype.mangle = function(text) {
  if (!this.options.mangle) return text;
  var out = '',
      l = text.length,
      i = 0,
      ch;

  for (; i < l; i++) {
    ch = text.charCodeAt(i);
    if (Math.random() > 0.5) {
      ch = 'x' + ch.toString(16);
    }
    out += '&#' + ch + ';';
  }

  return out;
};

/**
 * Renderer
 */

function Renderer(options) {
  this.options = options || marked.defaults;
}

Renderer.prototype.code = function(code, infostring, escaped) {
  var lang = (infostring || '').match(/\S*/)[0];
  if (this.options.highlight) {
    var out = this.options.highlight(code, lang);
    if (out != null && out !== code) {
      escaped = true;
      code = out;
    }
  }

  if (!lang) {
    return '<pre><code>'
      + (escaped ? code : escape(code, true))
      + '</code></pre>';
  }

  return '<pre><code class="'
    + this.options.langPrefix
    + escape(lang, true)
    + '">'
    + (escaped ? code : escape(code, true))
    + '</code></pre>\n';
};

Renderer.prototype.blockquote = function(quote) {
  return '<blockquote>\n' + quote + '</blockquote>\n';
};

Renderer.prototype.html = function(html) {
  return html;
};

Renderer.prototype.heading = function(text, level, raw, slugger) {
  if (this.options.headerIds) {
    return '<h'
      + level
      + ' id="'
      + this.options.headerPrefix
      + slugger.slug(raw)
      + '">'
      + text
      + '</h'
      + level
      + '>\n';
  }
  // ignore IDs
  return '<h' + level + '>' + text + '</h' + level + '>\n';
};

Renderer.prototype.hr = function() {
  return this.options.xhtml ? '<hr/>\n' : '<hr>\n';
};

Renderer.prototype.list = function(body, ordered, start) {
  var type = ordered ? 'ol' : 'ul',
      startatt = (ordered && start !== 1) ? (' start="' + start + '"') : '';
  return '<' + type + startatt + '>\n' + body + '</' + type + '>\n';
};

Renderer.prototype.listitem = function(text) {
  return '<li>' + text + '</li>\n';
};

Renderer.prototype.checkbox = function(checked) {
  return '<input '
    + (checked ? 'checked="" ' : '')
    + 'disabled="" type="checkbox"'
    + (this.options.xhtml ? ' /' : '')
    + '> ';
};

Renderer.prototype.paragraph = function(text) {
  return '<p>' + text + '</p>\n';
};

Renderer.prototype.table = function(header, body) {
  if (body) body = '<tbody>' + body + '</tbody>';

  return '<table>\n'
    + '<thead>\n'
    + header
    + '</thead>\n'
    + body
    + '</table>\n';
};

Renderer.prototype.tablerow = function(content) {
  return '<tr>\n' + content + '</tr>\n';
};

Renderer.prototype.tablecell = function(content, flags) {
  var type = flags.header ? 'th' : 'td';
  var tag = flags.align
    ? '<' + type + ' align="' + flags.align + '">'
    : '<' + type + '>';
  return tag + content + '</' + type + '>\n';
};

// span level renderer
Renderer.prototype.strong = function(text) {
  return '<strong>' + text + '</strong>';
};

Renderer.prototype.em = function(text) {
  return '<em>' + text + '</em>';
};

Renderer.prototype.codespan = function(text) {
  return '<code>' + text + '</code>';
};

Renderer.prototype.br = function() {
  return this.options.xhtml ? '<br/>' : '<br>';
};

Renderer.prototype.del = function(text) {
  return '<del>' + text + '</del>';
};

Renderer.prototype.link = function(href, title, text) {
  href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);
  if (href === null) {
    return text;
  }
  var out = '<a href="' + escape(href) + '"';
  if (title) {
    out += ' title="' + title + '"';
  }
  out += '>' + text + '</a>';
  return out;
};

Renderer.prototype.image = function(href, title, text) {
  href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);
  if (href === null) {
    return text;
  }

  var out = '<img src="' + href + '" alt="' + text + '"';
  if (title) {
    out += ' title="' + title + '"';
  }
  out += this.options.xhtml ? '/>' : '>';
  return out;
};

Renderer.prototype.text = function(text) {
  return text;
};

/**
 * TextRenderer
 * returns only the textual part of the token
 */

function TextRenderer() {}

// no need for block level renderers

TextRenderer.prototype.strong =
TextRenderer.prototype.em =
TextRenderer.prototype.codespan =
TextRenderer.prototype.del =
TextRenderer.prototype.text = function(text) {
  return text;
};

TextRenderer.prototype.link =
TextRenderer.prototype.image = function(href, title, text) {
  return '' + text;
};

TextRenderer.prototype.br = function() {
  return '';
};

/**
 * Parsing & Compiling
 */

function Parser(options) {
  this.tokens = [];
  this.token = null;
  this.options = options || marked.defaults;
  this.options.renderer = this.options.renderer || new Renderer();
  this.renderer = this.options.renderer;
  this.renderer.options = this.options;
  this.slugger = new Slugger();
}

/**
 * Static Parse Method
 */

Parser.parse = function(src, options) {
  var parser = new Parser(options);
  return parser.parse(src);
};

/**
 * Parse Loop
 */

Parser.prototype.parse = function(src) {
  this.inline = new InlineLexer(src.links, this.options);
  // use an InlineLexer with a TextRenderer to extract pure text
  this.inlineText = new InlineLexer(
    src.links,
    merge({}, this.options, { renderer: new TextRenderer() })
  );
  this.tokens = src.reverse();

  var out = '';
  while (this.next()) {
    out += this.tok();
  }

  return out;
};

/**
 * Next Token
 */

Parser.prototype.next = function() {
  this.token = this.tokens.pop();
  return this.token;
};

/**
 * Preview Next Token
 */

Parser.prototype.peek = function() {
  return this.tokens[this.tokens.length - 1] || 0;
};

/**
 * Parse Text Tokens
 */

Parser.prototype.parseText = function() {
  var body = this.token.text;

  while (this.peek().type === 'text') {
    body += '\n' + this.next().text;
  }

  return this.inline.output(body);
};

/**
 * Parse Current Token
 */

Parser.prototype.tok = function() {
  switch (this.token.type) {
    case 'space': {
      return '';
    }
    case 'hr': {
      return this.renderer.hr();
    }
    case 'heading': {
      return this.renderer.heading(
        this.inline.output(this.token.text),
        this.token.depth,
        unescape(this.inlineText.output(this.token.text)),
        this.slugger);
    }
    case 'code': {
      return this.renderer.code(this.token.text,
        this.token.lang,
        this.token.escaped);
    }
    case 'table': {
      var header = '',
          body = '',
          i,
          row,
          cell,
          j;

      // header
      cell = '';
      for (i = 0; i < this.token.header.length; i++) {
        cell += this.renderer.tablecell(
          this.inline.output(this.token.header[i]),
          { header: true, align: this.token.align[i] }
        );
      }
      header += this.renderer.tablerow(cell);

      for (i = 0; i < this.token.cells.length; i++) {
        row = this.token.cells[i];

        cell = '';
        for (j = 0; j < row.length; j++) {
          cell += this.renderer.tablecell(
            this.inline.output(row[j]),
            { header: false, align: this.token.align[j] }
          );
        }

        body += this.renderer.tablerow(cell);
      }
      return this.renderer.table(header, body);
    }
    case 'blockquote_start': {
      body = '';

      while (this.next().type !== 'blockquote_end') {
        body += this.tok();
      }

      return this.renderer.blockquote(body);
    }
    case 'list_start': {
      body = '';
      var ordered = this.token.ordered,
          start = this.token.start;

      while (this.next().type !== 'list_end') {
        body += this.tok();
      }

      return this.renderer.list(body, ordered, start);
    }
    case 'list_item_start': {
      body = '';
      var loose = this.token.loose;
      var checked = this.token.checked;
      var task = this.token.task;

      if (this.token.task) {
        body += this.renderer.checkbox(checked);
      }

      while (this.next().type !== 'list_item_end') {
        body += !loose && this.token.type === 'text'
          ? this.parseText()
          : this.tok();
      }
      return this.renderer.listitem(body, task, checked);
    }
    case 'html': {
      // TODO parse inline content if parameter markdown=1
      return this.renderer.html(this.token.text);
    }
    case 'paragraph': {
      return this.renderer.paragraph(this.inline.output(this.token.text));
    }
    case 'text': {
      return this.renderer.paragraph(this.parseText());
    }
    default: {
      var errMsg = 'Token with "' + this.token.type + '" type was not found.';
      if (this.options.silent) {
        console.log(errMsg);
      } else {
        throw new Error(errMsg);
      }
    }
  }
};

/**
 * Slugger generates header id
 */

function Slugger() {
  this.seen = {};
}

/**
 * Convert string to unique id
 */

Slugger.prototype.slug = function(value) {
  var slug = value
    .toLowerCase()
    .trim()
    .replace(/[\u2000-\u206F\u2E00-\u2E7F\\'!"#$%&()*+,./:;<=>?@[\]^`{|}~]/g, '')
    .replace(/\s/g, '-');

  if (this.seen.hasOwnProperty(slug)) {
    var originalSlug = slug;
    do {
      this.seen[originalSlug]++;
      slug = originalSlug + '-' + this.seen[originalSlug];
    } while (this.seen.hasOwnProperty(slug));
  }
  this.seen[slug] = 0;

  return slug;
};

/**
 * Helpers
 */

function escape(html, encode) {
  if (encode) {
    if (escape.escapeTest.test(html)) {
      return html.replace(escape.escapeReplace, function(ch) { return escape.replacements[ch]; });
    }
  } else {
    if (escape.escapeTestNoEncode.test(html)) {
      return html.replace(escape.escapeReplaceNoEncode, function(ch) { return escape.replacements[ch]; });
    }
  }

  return html;
}

escape.escapeTest = /[&<>"']/;
escape.escapeReplace = /[&<>"']/g;
escape.replacements = {
  '&': '&amp;',
  '<': '&lt;',
  '>': '&gt;',
  '"': '&quot;',
  "'": '&#39;'
};

escape.escapeTestNoEncode = /[<>"']|&(?!#?\w+;)/;
escape.escapeReplaceNoEncode = /[<>"']|&(?!#?\w+;)/g;

function unescape(html) {
  // explicitly match decimal, hex, and named HTML entities
  return html.replace(/&(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/ig, function(_, n) {
    n = n.toLowerCase();
    if (n === 'colon') return ':';
    if (n.charAt(0) === '#') {
      return n.charAt(1) === 'x'
        ? String.fromCharCode(parseInt(n.substring(2), 16))
        : String.fromCharCode(+n.substring(1));
    }
    return '';
  });
}

function edit(regex, opt) {
  regex = regex.source || regex;
  opt = opt || '';
  return {
    replace: function(name, val) {
      val = val.source || val;
      val = val.replace(/(^|[^\[])\^/g, '$1');
      regex = regex.replace(name, val);
      return this;
    },
    getRegex: function() {
      return new RegExp(regex, opt);
    }
  };
}

function cleanUrl(sanitize, base, href) {
  if (sanitize) {
    try {
      var prot = decodeURIComponent(unescape(href))
        .replace(/[^\w:]/g, '')
        .toLowerCase();
    } catch (e) {
      return null;
    }
    if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0 || prot.indexOf('data:') === 0) {
      return null;
    }
  }
  if (base && !originIndependentUrl.test(href)) {
    href = resolveUrl(base, href);
  }
  try {
    href = encodeURI(href).replace(/%25/g, '%');
  } catch (e) {
    return null;
  }
  return href;
}

function resolveUrl(base, href) {
  if (!baseUrls[' ' + base]) {
    // we can ignore everything in base after the last slash of its path component,
    // but we might need to add _that_
    // https://tools.ietf.org/html/rfc3986#section-3
    if (/^[^:]+:\/*[^/]*$/.test(base)) {
      baseUrls[' ' + base] = base + '/';
    } else {
      baseUrls[' ' + base] = rtrim(base, '/', true);
    }
  }
  base = baseUrls[' ' + base];

  if (href.slice(0, 2) === '//') {
    return base.replace(/:[\s\S]*/, ':') + href;
  } else if (href.charAt(0) === '/') {
    return base.replace(/(:\/*[^/]*)[\s\S]*/, '$1') + href;
  } else {
    return base + href;
  }
}
var baseUrls = {};
var originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;

function noop() {}
noop.exec = noop;

function merge(obj) {
  var i = 1,
      target,
      key;

  for (; i < arguments.length; i++) {
    target = arguments[i];
    for (key in target) {
      if (Object.prototype.hasOwnProperty.call(target, key)) {
        obj[key] = target[key];
      }
    }
  }

  return obj;
}

function splitCells(tableRow, count) {
  // ensure that every cell-delimiting pipe has a space
  // before it to distinguish it from an escaped pipe
  var row = tableRow.replace(/\|/g, function(match, offset, str) {
        var escaped = false,
            curr = offset;
        while (--curr >= 0 && str[curr] === '\\') escaped = !escaped;
        if (escaped) {
          // odd number of slashes means | is escaped
          // so we leave it alone
          return '|';
        } else {
          // add space before unescaped |
          return ' |';
        }
      }),
      cells = row.split(/ \|/),
      i = 0;

  if (cells.length > count) {
    cells.splice(count);
  } else {
    while (cells.length < count) cells.push('');
  }

  for (; i < cells.length; i++) {
    // leading or trailing whitespace is ignored per the gfm spec
    cells[i] = cells[i].trim().replace(/\\\|/g, '|');
  }
  return cells;
}

// Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').
// /c*$/ is vulnerable to REDOS.
// invert: Remove suffix of non-c chars instead. Default falsey.
function rtrim(str, c, invert) {
  if (str.length === 0) {
    return '';
  }

  // Length of suffix matching the invert condition.
  var suffLen = 0;

  // Step left until we fail to match the invert condition.
  while (suffLen < str.length) {
    var currChar = str.charAt(str.length - suffLen - 1);
    if (currChar === c && !invert) {
      suffLen++;
    } else if (currChar !== c && invert) {
      suffLen++;
    } else {
      break;
    }
  }

  return str.substr(0, str.length - suffLen);
}

function findClosingBracket(str, b) {
  if (str.indexOf(b[1]) === -1) {
    return -1;
  }
  var level = 0;
  for (var i = 0; i < str.length; i++) {
    if (str[i] === '\\') {
      i++;
    } else if (str[i] === b[0]) {
      level++;
    } else if (str[i] === b[1]) {
      level--;
      if (level < 0) {
        return i;
      }
    }
  }
  return -1;
}

function checkSanitizeDeprecation(opt) {
  if (opt && opt.sanitize && !opt.silent) {
    console.warn('marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options');
  }
}

/**
 * Marked
 */

function marked(src, opt, callback) {
  // throw error in case of non string input
  if (typeof src === 'undefined' || src === null) {
    throw new Error('marked(): input parameter is undefined or null');
  }
  if (typeof src !== 'string') {
    throw new Error('marked(): input parameter is of type '
      + Object.prototype.toString.call(src) + ', string expected');
  }

  if (callback || typeof opt === 'function') {
    if (!callback) {
      callback = opt;
      opt = null;
    }

    opt = merge({}, marked.defaults, opt || {});
    checkSanitizeDeprecation(opt);

    var highlight = opt.highlight,
        tokens,
        pending,
        i = 0;

    try {
      tokens = Lexer.lex(src, opt);
    } catch (e) {
      return callback(e);
    }

    pending = tokens.length;

    var done = function(err) {
      if (err) {
        opt.highlight = highlight;
        return callback(err);
      }

      var out;

      try {
        out = Parser.parse(tokens, opt);
      } catch (e) {
        err = e;
      }

      opt.highlight = highlight;

      return err
        ? callback(err)
        : callback(null, out);
    };

    if (!highlight || highlight.length < 3) {
      return done();
    }

    delete opt.highlight;

    if (!pending) return done();

    for (; i < tokens.length; i++) {
      (function(token) {
        if (token.type !== 'code') {
          return --pending || done();
        }
        return highlight(token.text, token.lang, function(err, code) {
          if (err) return done(err);
          if (code == null || code === token.text) {
            return --pending || done();
          }
          token.text = code;
          token.escaped = true;
          --pending || done();
        });
      })(tokens[i]);
    }

    return;
  }
  try {
    if (opt) opt = merge({}, marked.defaults, opt);
    checkSanitizeDeprecation(opt);
    return Parser.parse(Lexer.lex(src, opt), opt);
  } catch (e) {
    e.message += '\nPlease report this to https://github.com/markedjs/marked.';
    if ((opt || marked.defaults).silent) {
      return '<p>An error occurred:</p><pre>'
        + escape(e.message + '', true)
        + '</pre>';
    }
    throw e;
  }
}

/**
 * Options
 */

marked.options =
marked.setOptions = function(opt) {
  merge(marked.defaults, opt);
  return marked;
};

marked.getDefaults = function() {
  return {
    baseUrl: null,
    breaks: false,
    gfm: true,
    headerIds: true,
    headerPrefix: '',
    highlight: null,
    langPrefix: 'language-',
    mangle: true,
    pedantic: false,
    renderer: new Renderer(),
    sanitize: false,
    sanitizer: null,
    silent: false,
    smartLists: false,
    smartypants: false,
    xhtml: false
  };
};

marked.defaults = marked.getDefaults();

/**
 * Expose
 */

marked.Parser = Parser;
marked.parser = Parser.parse;

marked.Renderer = Renderer;
marked.TextRenderer = TextRenderer;

marked.Lexer = Lexer;
marked.lexer = Lexer.lex;

marked.InlineLexer = InlineLexer;
marked.inlineLexer = InlineLexer.output;

marked.Slugger = Slugger;

marked.parse = marked;

if (typeof module !== 'undefined' && typeof exports === 'object') {
  module.exports = marked;
} else if (typeof define === 'function' && define.amd) {
  define(function() { return marked; });
} else {
  root.marked = marked;
}
})(this || (typeof window !== 'undefined' ? window : global));

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],26:[function(require,module,exports){
'use strict';

var safeIsNaN = Number.isNaN ||
    function ponyfill(value) {
        return typeof value === 'number' && value !== value;
    };
function isEqual(first, second) {
    if (first === second) {
        return true;
    }
    if (safeIsNaN(first) && safeIsNaN(second)) {
        return true;
    }
    return false;
}
function areInputsEqual(newInputs, lastInputs) {
    if (newInputs.length !== lastInputs.length) {
        return false;
    }
    for (var i = 0; i < newInputs.length; i++) {
        if (!isEqual(newInputs[i], lastInputs[i])) {
            return false;
        }
    }
    return true;
}

function memoizeOne(resultFn, isEqual) {
    if (isEqual === void 0) { isEqual = areInputsEqual; }
    var lastThis;
    var lastArgs = [];
    var lastResult;
    var calledOnce = false;
    function memoized() {
        var newArgs = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            newArgs[_i] = arguments[_i];
        }
        if (calledOnce && lastThis === this && isEqual(newArgs, lastArgs)) {
            return lastResult;
        }
        lastResult = resultFn.apply(this, newArgs);
        calledOnce = true;
        lastThis = this;
        lastArgs = newArgs;
        return lastResult;
    }
    return memoized;
}

module.exports = memoizeOne;

},{}],27:[function(require,module,exports){
var wildcard = require('wildcard');
var reMimePartSplit = /[\/\+\.]/;

/**
  # mime-match

  A simple function to checker whether a target mime type matches a mime-type
  pattern (e.g. image/jpeg matches image/jpeg OR image/*).

  ## Example Usage

  <<< example.js

**/
module.exports = function(target, pattern) {
  function test(pattern) {
    var result = wildcard(pattern, target, reMimePartSplit);

    // ensure that we have a valid mime type (should have two parts)
    return result && result.length >= 2;
  }

  return pattern ? test(pattern.split(';')[0]) : test;
};

},{"wildcard":28}],28:[function(require,module,exports){
/* jshint node: true */
'use strict';

/**
  # wildcard

  Very simple wildcard matching, which is designed to provide the same
  functionality that is found in the
  [eve](https://github.com/adobe-webplatform/eve) eventing library.

  ## Usage

  It works with strings:

  <<< examples/strings.js

  Arrays:

  <<< examples/arrays.js

  Objects (matching against keys):

  <<< examples/objects.js

  While the library works in Node, if you are are looking for file-based
  wildcard matching then you should have a look at:

  <https://github.com/isaacs/node-glob>
**/

function WildcardMatcher(text, separator) {
  this.text = text = text || '';
  this.hasWild = ~text.indexOf('*');
  this.separator = separator;
  this.parts = text.split(separator);
}

WildcardMatcher.prototype.match = function(input) {
  var matches = true;
  var parts = this.parts;
  var ii;
  var partsCount = parts.length;
  var testParts;

  if (typeof input == 'string' || input instanceof String) {
    if (!this.hasWild && this.text != input) {
      matches = false;
    } else {
      testParts = (input || '').split(this.separator);
      for (ii = 0; matches && ii < partsCount; ii++) {
        if (parts[ii] === '*')  {
          continue;
        } else if (ii < testParts.length) {
          matches = parts[ii] === testParts[ii];
        } else {
          matches = false;
        }
      }

      // If matches, then return the component parts
      matches = matches && testParts;
    }
  }
  else if (typeof input.splice == 'function') {
    matches = [];

    for (ii = input.length; ii--; ) {
      if (this.match(input[ii])) {
        matches[matches.length] = input[ii];
      }
    }
  }
  else if (typeof input == 'object') {
    matches = {};

    for (var key in input) {
      if (this.match(key)) {
        matches[key] = input[key];
      }
    }
  }

  return matches;
};

module.exports = function(text, test, separator) {
  var matcher = new WildcardMatcher(text, separator || /[\/\.]/);
  if (typeof test != 'undefined') {
    return matcher.match(test);
  }

  return matcher;
};

},{}],29:[function(require,module,exports){
/**
 * Helpers.
 */

var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var w = d * 7;
var y = d * 365.25;

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

module.exports = function(val, options) {
  options = options || {};
  var type = typeof val;
  if (type === 'string' && val.length > 0) {
    return parse(val);
  } else if (type === 'number' && isFinite(val)) {
    return options.long ? fmtLong(val) : fmtShort(val);
  }
  throw new Error(
    'val is not a non-empty string or a valid number. val=' +
      JSON.stringify(val)
  );
};

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  str = String(str);
  if (str.length > 100) {
    return;
  }
  var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
    str
  );
  if (!match) {
    return;
  }
  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;
    case 'weeks':
    case 'week':
    case 'w':
      return n * w;
    case 'days':
    case 'day':
    case 'd':
      return n * d;
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;
    default:
      return undefined;
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtShort(ms) {
  var msAbs = Math.abs(ms);
  if (msAbs >= d) {
    return Math.round(ms / d) + 'd';
  }
  if (msAbs >= h) {
    return Math.round(ms / h) + 'h';
  }
  if (msAbs >= m) {
    return Math.round(ms / m) + 'm';
  }
  if (msAbs >= s) {
    return Math.round(ms / s) + 's';
  }
  return ms + 'ms';
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtLong(ms) {
  var msAbs = Math.abs(ms);
  if (msAbs >= d) {
    return plural(ms, msAbs, d, 'day');
  }
  if (msAbs >= h) {
    return plural(ms, msAbs, h, 'hour');
  }
  if (msAbs >= m) {
    return plural(ms, msAbs, m, 'minute');
  }
  if (msAbs >= s) {
    return plural(ms, msAbs, s, 'second');
  }
  return ms + ' ms';
}

/**
 * Pluralization helper.
 */

function plural(ms, msAbs, n, name) {
  var isPlural = msAbs >= n * 1.5;
  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
}

},{}],30:[function(require,module,exports){
/**
* Create an event emitter with namespaces
* @name createNamespaceEmitter
* @example
* var emitter = require('./index')()
*
* emitter.on('*', function () {
*   console.log('all events emitted', this.event)
* })
*
* emitter.on('example', function () {
*   console.log('example event emitted')
* })
*/
module.exports = function createNamespaceEmitter () {
  var emitter = {}
  var _fns = emitter._fns = {}

  /**
  * Emit an event. Optionally namespace the event. Handlers are fired in the order in which they were added with exact matches taking precedence. Separate the namespace and event with a `:`
  * @name emit
  * @param {String} event – the name of the event, with optional namespace
  * @param {...*} data – up to 6 arguments that are passed to the event listener
  * @example
  * emitter.emit('example')
  * emitter.emit('demo:test')
  * emitter.emit('data', { example: true}, 'a string', 1)
  */
  emitter.emit = function emit (event, arg1, arg2, arg3, arg4, arg5, arg6) {
    var toEmit = getListeners(event)

    if (toEmit.length) {
      emitAll(event, toEmit, [arg1, arg2, arg3, arg4, arg5, arg6])
    }
  }

  /**
  * Create en event listener.
  * @name on
  * @param {String} event
  * @param {Function} fn
  * @example
  * emitter.on('example', function () {})
  * emitter.on('demo', function () {})
  */
  emitter.on = function on (event, fn) {
    if (!_fns[event]) {
      _fns[event] = []
    }

    _fns[event].push(fn)
  }

  /**
  * Create en event listener that fires once.
  * @name once
  * @param {String} event
  * @param {Function} fn
  * @example
  * emitter.once('example', function () {})
  * emitter.once('demo', function () {})
  */
  emitter.once = function once (event, fn) {
    function one () {
      fn.apply(this, arguments)
      emitter.off(event, one)
    }
    this.on(event, one)
  }

  /**
  * Stop listening to an event. Stop all listeners on an event by only passing the event name. Stop a single listener by passing that event handler as a callback.
  * You must be explicit about what will be unsubscribed: `emitter.off('demo')` will unsubscribe an `emitter.on('demo')` listener,
  * `emitter.off('demo:example')` will unsubscribe an `emitter.on('demo:example')` listener
  * @name off
  * @param {String} event
  * @param {Function} [fn] – the specific handler
  * @example
  * emitter.off('example')
  * emitter.off('demo', function () {})
  */
  emitter.off = function off (event, fn) {
    var keep = []

    if (event && fn) {
      var fns = this._fns[event]
      var i = 0
      var l = fns ? fns.length : 0

      for (i; i < l; i++) {
        if (fns[i] !== fn) {
          keep.push(fns[i])
        }
      }
    }

    keep.length ? this._fns[event] = keep : delete this._fns[event]
  }

  function getListeners (e) {
    var out = _fns[e] ? _fns[e] : []
    var idx = e.indexOf(':')
    var args = (idx === -1) ? [e] : [e.substring(0, idx), e.substring(idx + 1)]

    var keys = Object.keys(_fns)
    var i = 0
    var l = keys.length

    for (i; i < l; i++) {
      var key = keys[i]
      if (key === '*') {
        out = out.concat(_fns[key])
      }

      if (args.length === 2 && args[0] === key) {
        out = out.concat(_fns[key])
        break
      }
    }

    return out
  }

  function emitAll (e, fns, args) {
    var i = 0
    var l = fns.length

    for (i; i < l; i++) {
      if (!fns[i]) break
      fns[i].event = e
      fns[i].apply(fns[i], args)
    }
  }

  return emitter
}

},{}],31:[function(require,module,exports){
(function (process){(function (){
let { urlAlphabet } = require('./url-alphabet/index.cjs')
if (process.env.NODE_ENV !== 'production') {
  if (
    typeof navigator !== 'undefined' &&
    navigator.product === 'ReactNative' &&
    typeof crypto === 'undefined'
  ) {
    throw new Error(
      'React Native does not have a built-in secure random generator. ' +
        'If you don’t need unpredictable IDs use `nanoid/non-secure`. ' +
        'For secure IDs, import `react-native-get-random-values` ' +
        'before Nano ID.'
    )
  }
  if (typeof msCrypto !== 'undefined' && typeof crypto === 'undefined') {
    throw new Error(
      'Import file with `if (!window.crypto) window.crypto = window.msCrypto`' +
        ' before importing Nano ID to fix IE 11 support'
    )
  }
  if (typeof crypto === 'undefined') {
    throw new Error(
      'Your browser does not have secure random generator. ' +
        'If you don’t need unpredictable IDs, you can use nanoid/non-secure.'
    )
  }
}
let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))
let customRandom = (alphabet, size, getRandom) => {
  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1
  let step = -~((1.6 * mask * size) / alphabet.length)
  return () => {
    let id = ''
    while (true) {
      let bytes = getRandom(step)
      let j = step
      while (j--) {
        id += alphabet[bytes[j] & mask] || ''
        if (id.length === size) return id
      }
    }
  }
}
let customAlphabet = (alphabet, size) => customRandom(alphabet, size, random)
let nanoid = (size = 21) => {
  let id = ''
  let bytes = crypto.getRandomValues(new Uint8Array(size))
  while (size--) {
    let byte = bytes[size] & 63
    if (byte < 36) {
      id += byte.toString(36)
    } else if (byte < 62) {
      id += (byte - 26).toString(36).toUpperCase()
    } else if (byte < 63) {
      id += '_'
    } else {
      id += '-'
    }
  }
  return id
}
module.exports = { nanoid, customAlphabet, customRandom, urlAlphabet, random }

}).call(this)}).call(this,require('_process'))

},{"./url-alphabet/index.cjs":32,"_process":36}],32:[function(require,module,exports){
let urlAlphabet =
  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict'
module.exports = { urlAlphabet }

},{}],33:[function(require,module,exports){
/**
 * Compiles a querystring
 * Returns string representation of the object
 *
 * @param {Object}
 * @api private
 */

exports.encode = function (obj) {
  var str = '';

  for (var i in obj) {
    if (obj.hasOwnProperty(i)) {
      if (str.length) str += '&';
      str += encodeURIComponent(i) + '=' + encodeURIComponent(obj[i]);
    }
  }

  return str;
};

/**
 * Parses a simple querystring into an object
 *
 * @param {String} qs
 * @api private
 */

exports.decode = function(qs){
  var qry = {};
  var pairs = qs.split('&');
  for (var i = 0, l = pairs.length; i < l; i++) {
    var pair = pairs[i].split('=');
    qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);
  }
  return qry;
};

},{}],34:[function(require,module,exports){
/**
 * Parses an URI
 *
 * @author Steven Levithan <stevenlevithan.com> (MIT license)
 * @api private
 */

var re = /^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;

var parts = [
    'source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'
];

module.exports = function parseuri(str) {
    var src = str,
        b = str.indexOf('['),
        e = str.indexOf(']');

    if (b != -1 && e != -1) {
        str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ';') + str.substring(e, str.length);
    }

    var m = re.exec(str || ''),
        uri = {},
        i = 14;

    while (i--) {
        uri[parts[i]] = m[i] || '';
    }

    if (b != -1 && e != -1) {
        uri.source = src;
        uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ':');
        uri.authority = uri.authority.replace('[', '').replace(']', '').replace(/;/g, ':');
        uri.ipv6uri = true;
    }

    uri.pathNames = pathNames(uri, uri['path']);
    uri.queryKey = queryKey(uri, uri['query']);

    return uri;
};

function pathNames(obj, path) {
    var regx = /\/{2,9}/g,
        names = path.replace(regx, "/").split("/");

    if (path.substr(0, 1) == '/' || path.length === 0) {
        names.splice(0, 1);
    }
    if (path.substr(path.length - 1, 1) == '/') {
        names.splice(names.length - 1, 1);
    }

    return names;
}

function queryKey(uri, query) {
    var data = {};

    query.replace(/(?:^|&)([^&=]*)=?([^&]*)/g, function ($0, $1, $2) {
        if ($1) {
            data[$1] = $2;
        }
    });

    return data;
}

},{}],35:[function(require,module,exports){
var n,l,u,t,i,r,o,f,e={},c=[],s=/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;function a(n,l){for(var u in l)n[u]=l[u];return n}function v(n){var l=n.parentNode;l&&l.removeChild(n)}function h(l,u,t){var i,r,o,f={};for(o in u)"key"==o?i=u[o]:"ref"==o?r=u[o]:f[o]=u[o];if(arguments.length>2&&(f.children=arguments.length>3?n.call(arguments,2):t),"function"==typeof l&&null!=l.defaultProps)for(o in l.defaultProps)void 0===f[o]&&(f[o]=l.defaultProps[o]);return p(l,f,i,r,null)}function p(n,t,i,r,o){var f={type:n,props:t,key:i,ref:r,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,__h:null,constructor:void 0,__v:null==o?++u:o};return null==o&&null!=l.vnode&&l.vnode(f),f}function y(n){return n.children}function d(n,l){this.props=n,this.context=l}function _(n,l){if(null==l)return n.__?_(n.__,n.__.__k.indexOf(n)+1):null;for(var u;l<n.__k.length;l++)if(null!=(u=n.__k[l])&&null!=u.__e)return u.__e;return"function"==typeof n.type?_(n):null}function k(n){var l,u;if(null!=(n=n.__)&&null!=n.__c){for(n.__e=n.__c.base=null,l=0;l<n.__k.length;l++)if(null!=(u=n.__k[l])&&null!=u.__e){n.__e=n.__c.base=u.__e;break}return k(n)}}function x(n){(!n.__d&&(n.__d=!0)&&i.push(n)&&!b.__r++||o!==l.debounceRendering)&&((o=l.debounceRendering)||r)(b)}function b(){for(var n;b.__r=i.length;)n=i.sort(function(n,l){return n.__v.__b-l.__v.__b}),i=[],n.some(function(n){var l,u,t,i,r,o;n.__d&&(r=(i=(l=n).__v).__e,(o=l.__P)&&(u=[],(t=a({},i)).__v=i.__v+1,I(o,i,t,l.__n,void 0!==o.ownerSVGElement,null!=i.__h?[r]:null,u,null==r?_(i):r,i.__h),T(u,i),i.__e!=r&&k(i)))})}function m(n,l,u,t,i,r,o,f,s,a){var v,h,d,k,x,b,m,A=t&&t.__k||c,P=A.length;for(u.__k=[],v=0;v<l.length;v++)if(null!=(k=u.__k[v]=null==(k=l[v])||"boolean"==typeof k?null:"string"==typeof k||"number"==typeof k||"bigint"==typeof k?p(null,k,null,null,k):Array.isArray(k)?p(y,{children:k},null,null,null):k.__b>0?p(k.type,k.props,k.key,null,k.__v):k)){if(k.__=u,k.__b=u.__b+1,null===(d=A[v])||d&&k.key==d.key&&k.type===d.type)A[v]=void 0;else for(h=0;h<P;h++){if((d=A[h])&&k.key==d.key&&k.type===d.type){A[h]=void 0;break}d=null}I(n,k,d=d||e,i,r,o,f,s,a),x=k.__e,(h=k.ref)&&d.ref!=h&&(m||(m=[]),d.ref&&m.push(d.ref,null,k),m.push(h,k.__c||x,k)),null!=x?(null==b&&(b=x),"function"==typeof k.type&&k.__k===d.__k?k.__d=s=g(k,s,n):s=w(n,k,d,A,x,s),"function"==typeof u.type&&(u.__d=s)):s&&d.__e==s&&s.parentNode!=n&&(s=_(d))}for(u.__e=b,v=P;v--;)null!=A[v]&&("function"==typeof u.type&&null!=A[v].__e&&A[v].__e==u.__d&&(u.__d=_(t,v+1)),L(A[v],A[v]));if(m)for(v=0;v<m.length;v++)z(m[v],m[++v],m[++v])}function g(n,l,u){for(var t,i=n.__k,r=0;i&&r<i.length;r++)(t=i[r])&&(t.__=n,l="function"==typeof t.type?g(t,l,u):w(u,t,t,i,t.__e,l));return l}function w(n,l,u,t,i,r){var o,f,e;if(void 0!==l.__d)o=l.__d,l.__d=void 0;else if(null==u||i!=r||null==i.parentNode)n:if(null==r||r.parentNode!==n)n.appendChild(i),o=null;else{for(f=r,e=0;(f=f.nextSibling)&&e<t.length;e+=2)if(f==i)break n;n.insertBefore(i,r),o=r}return void 0!==o?o:i.nextSibling}function A(n,l,u,t,i){var r;for(r in u)"children"===r||"key"===r||r in l||C(n,r,null,u[r],t);for(r in l)i&&"function"!=typeof l[r]||"children"===r||"key"===r||"value"===r||"checked"===r||u[r]===l[r]||C(n,r,l[r],u[r],t)}function P(n,l,u){"-"===l[0]?n.setProperty(l,u):n[l]=null==u?"":"number"!=typeof u||s.test(l)?u:u+"px"}function C(n,l,u,t,i){var r;n:if("style"===l)if("string"==typeof u)n.style.cssText=u;else{if("string"==typeof t&&(n.style.cssText=t=""),t)for(l in t)u&&l in u||P(n.style,l,"");if(u)for(l in u)t&&u[l]===t[l]||P(n.style,l,u[l])}else if("o"===l[0]&&"n"===l[1])r=l!==(l=l.replace(/Capture$/,"")),l=l.toLowerCase()in n?l.toLowerCase().slice(2):l.slice(2),n.l||(n.l={}),n.l[l+r]=u,u?t||n.addEventListener(l,r?H:$,r):n.removeEventListener(l,r?H:$,r);else if("dangerouslySetInnerHTML"!==l){if(i)l=l.replace(/xlink[H:h]/,"h").replace(/sName$/,"s");else if("href"!==l&&"list"!==l&&"form"!==l&&"tabIndex"!==l&&"download"!==l&&l in n)try{n[l]=null==u?"":u;break n}catch(n){}"function"==typeof u||(null!=u&&(!1!==u||"a"===l[0]&&"r"===l[1])?n.setAttribute(l,u):n.removeAttribute(l))}}function $(n){this.l[n.type+!1](l.event?l.event(n):n)}function H(n){this.l[n.type+!0](l.event?l.event(n):n)}function I(n,u,t,i,r,o,f,e,c){var s,v,h,p,_,k,x,b,g,w,A,P=u.type;if(void 0!==u.constructor)return null;null!=t.__h&&(c=t.__h,e=u.__e=t.__e,u.__h=null,o=[e]),(s=l.__b)&&s(u);try{n:if("function"==typeof P){if(b=u.props,g=(s=P.contextType)&&i[s.__c],w=s?g?g.props.value:s.__:i,t.__c?x=(v=u.__c=t.__c).__=v.__E:("prototype"in P&&P.prototype.render?u.__c=v=new P(b,w):(u.__c=v=new d(b,w),v.constructor=P,v.render=M),g&&g.sub(v),v.props=b,v.state||(v.state={}),v.context=w,v.__n=i,h=v.__d=!0,v.__h=[]),null==v.__s&&(v.__s=v.state),null!=P.getDerivedStateFromProps&&(v.__s==v.state&&(v.__s=a({},v.__s)),a(v.__s,P.getDerivedStateFromProps(b,v.__s))),p=v.props,_=v.state,h)null==P.getDerivedStateFromProps&&null!=v.componentWillMount&&v.componentWillMount(),null!=v.componentDidMount&&v.__h.push(v.componentDidMount);else{if(null==P.getDerivedStateFromProps&&b!==p&&null!=v.componentWillReceiveProps&&v.componentWillReceiveProps(b,w),!v.__e&&null!=v.shouldComponentUpdate&&!1===v.shouldComponentUpdate(b,v.__s,w)||u.__v===t.__v){v.props=b,v.state=v.__s,u.__v!==t.__v&&(v.__d=!1),v.__v=u,u.__e=t.__e,u.__k=t.__k,u.__k.forEach(function(n){n&&(n.__=u)}),v.__h.length&&f.push(v);break n}null!=v.componentWillUpdate&&v.componentWillUpdate(b,v.__s,w),null!=v.componentDidUpdate&&v.__h.push(function(){v.componentDidUpdate(p,_,k)})}v.context=w,v.props=b,v.state=v.__s,(s=l.__r)&&s(u),v.__d=!1,v.__v=u,v.__P=n,s=v.render(v.props,v.state,v.context),v.state=v.__s,null!=v.getChildContext&&(i=a(a({},i),v.getChildContext())),h||null==v.getSnapshotBeforeUpdate||(k=v.getSnapshotBeforeUpdate(p,_)),A=null!=s&&s.type===y&&null==s.key?s.props.children:s,m(n,Array.isArray(A)?A:[A],u,t,i,r,o,f,e,c),v.base=u.__e,u.__h=null,v.__h.length&&f.push(v),x&&(v.__E=v.__=null),v.__e=!1}else null==o&&u.__v===t.__v?(u.__k=t.__k,u.__e=t.__e):u.__e=j(t.__e,u,t,i,r,o,f,c);(s=l.diffed)&&s(u)}catch(n){u.__v=null,(c||null!=o)&&(u.__e=e,u.__h=!!c,o[o.indexOf(e)]=null),l.__e(n,u,t)}}function T(n,u){l.__c&&l.__c(u,n),n.some(function(u){try{n=u.__h,u.__h=[],n.some(function(n){n.call(u)})}catch(n){l.__e(n,u.__v)}})}function j(l,u,t,i,r,o,f,c){var s,a,h,p=t.props,y=u.props,d=u.type,k=0;if("svg"===d&&(r=!0),null!=o)for(;k<o.length;k++)if((s=o[k])&&(s===l||(d?s.localName==d:3==s.nodeType))){l=s,o[k]=null;break}if(null==l){if(null===d)return document.createTextNode(y);l=r?document.createElementNS("http://www.w3.org/2000/svg",d):document.createElement(d,y.is&&y),o=null,c=!1}if(null===d)p===y||c&&l.data===y||(l.data=y);else{if(o=o&&n.call(l.childNodes),a=(p=t.props||e).dangerouslySetInnerHTML,h=y.dangerouslySetInnerHTML,!c){if(null!=o)for(p={},k=0;k<l.attributes.length;k++)p[l.attributes[k].name]=l.attributes[k].value;(h||a)&&(h&&(a&&h.__html==a.__html||h.__html===l.innerHTML)||(l.innerHTML=h&&h.__html||""))}if(A(l,y,p,r,c),h)u.__k=[];else if(k=u.props.children,m(l,Array.isArray(k)?k:[k],u,t,i,r&&"foreignObject"!==d,o,f,o?o[0]:t.__k&&_(t,0),c),null!=o)for(k=o.length;k--;)null!=o[k]&&v(o[k]);c||("value"in y&&void 0!==(k=y.value)&&(k!==l.value||"progress"===d&&!k)&&C(l,"value",k,p.value,!1),"checked"in y&&void 0!==(k=y.checked)&&k!==l.checked&&C(l,"checked",k,p.checked,!1))}return l}function z(n,u,t){try{"function"==typeof n?n(u):n.current=u}catch(n){l.__e(n,t)}}function L(n,u,t){var i,r;if(l.unmount&&l.unmount(n),(i=n.ref)&&(i.current&&i.current!==n.__e||z(i,null,u)),null!=(i=n.__c)){if(i.componentWillUnmount)try{i.componentWillUnmount()}catch(n){l.__e(n,u)}i.base=i.__P=null}if(i=n.__k)for(r=0;r<i.length;r++)i[r]&&L(i[r],u,"function"!=typeof n.type);t||null==n.__e||v(n.__e),n.__e=n.__d=void 0}function M(n,l,u){return this.constructor(n,u)}function N(u,t,i){var r,o,f;l.__&&l.__(u,t),o=(r="function"==typeof i)?null:i&&i.__k||t.__k,f=[],I(t,u=(!r&&i||t).__k=h(y,null,[u]),o||e,e,void 0!==t.ownerSVGElement,!r&&i?[i]:o?null:t.firstChild?n.call(t.childNodes):null,f,!r&&i?i:o?o.__e:t.firstChild,r),T(f,u)}n=c.slice,l={__e:function(n,l){for(var u,t,i;l=l.__;)if((u=l.__c)&&!u.__)try{if((t=u.constructor)&&null!=t.getDerivedStateFromError&&(u.setState(t.getDerivedStateFromError(n)),i=u.__d),null!=u.componentDidCatch&&(u.componentDidCatch(n),i=u.__d),i)return u.__E=u}catch(l){n=l}throw n}},u=0,t=function(n){return null!=n&&void 0===n.constructor},d.prototype.setState=function(n,l){var u;u=null!=this.__s&&this.__s!==this.state?this.__s:this.__s=a({},this.state),"function"==typeof n&&(n=n(a({},u),this.props)),n&&a(u,n),null!=n&&this.__v&&(l&&this.__h.push(l),x(this))},d.prototype.forceUpdate=function(n){this.__v&&(this.__e=!0,n&&this.__h.push(n),x(this))},d.prototype.render=y,i=[],r="function"==typeof Promise?Promise.prototype.then.bind(Promise.resolve()):setTimeout,b.__r=0,f=0,exports.render=N,exports.hydrate=function n(l,u){N(l,u,n)},exports.createElement=h,exports.h=h,exports.Fragment=y,exports.createRef=function(){return{current:null}},exports.isValidElement=t,exports.Component=d,exports.cloneElement=function(l,u,t){var i,r,o,f=a({},l.props);for(o in u)"key"==o?i=u[o]:"ref"==o?r=u[o]:f[o]=u[o];return arguments.length>2&&(f.children=arguments.length>3?n.call(arguments,2):t),p(l.type,f,i||l.key,r||l.ref,null)},exports.createContext=function(n,l){var u={__c:l="__cC"+f++,__:n,Consumer:function(n,l){return n.children(l)},Provider:function(n){var u,t;return this.getChildContext||(u=[],(t={})[l]=this,this.getChildContext=function(){return t},this.shouldComponentUpdate=function(n){this.props.value!==n.value&&u.some(x)},this.sub=function(n){u.push(n);var l=n.componentWillUnmount;n.componentWillUnmount=function(){u.splice(u.indexOf(n),1),l&&l.call(n)}}),n.children}};return u.Provider.__=u.Consumer.contextType=u},exports.toChildArray=function n(l,u){return u=u||[],null==l||"boolean"==typeof l||(Array.isArray(l)?l.some(function(l){n(l,u)}):u.push(l)),u},exports.options=l;


},{}],36:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],37:[function(require,module,exports){
'use strict';

var has = Object.prototype.hasOwnProperty
  , undef;

/**
 * Decode a URI encoded string.
 *
 * @param {String} input The URI encoded string.
 * @returns {String|Null} The decoded string.
 * @api private
 */
function decode(input) {
  try {
    return decodeURIComponent(input.replace(/\+/g, ' '));
  } catch (e) {
    return null;
  }
}

/**
 * Attempts to encode a given input.
 *
 * @param {String} input The string that needs to be encoded.
 * @returns {String|Null} The encoded string.
 * @api private
 */
function encode(input) {
  try {
    return encodeURIComponent(input);
  } catch (e) {
    return null;
  }
}

/**
 * Simple query string parser.
 *
 * @param {String} query The query string that needs to be parsed.
 * @returns {Object}
 * @api public
 */
function querystring(query) {
  var parser = /([^=?#&]+)=?([^&]*)/g
    , result = {}
    , part;

  while (part = parser.exec(query)) {
    var key = decode(part[1])
      , value = decode(part[2]);

    //
    // Prevent overriding of existing properties. This ensures that build-in
    // methods like `toString` or __proto__ are not overriden by malicious
    // querystrings.
    //
    // In the case if failed decoding, we want to omit the key/value pairs
    // from the result.
    //
    if (key === null || value === null || key in result) continue;
    result[key] = value;
  }

  return result;
}

/**
 * Transform a query string to an object.
 *
 * @param {Object} obj Object that should be transformed.
 * @param {String} prefix Optional prefix.
 * @returns {String}
 * @api public
 */
function querystringify(obj, prefix) {
  prefix = prefix || '';

  var pairs = []
    , value
    , key;

  //
  // Optionally prefix with a '?' if needed
  //
  if ('string' !== typeof prefix) prefix = '?';

  for (key in obj) {
    if (has.call(obj, key)) {
      value = obj[key];

      //
      // Edge cases where we actually want to encode the value to an empty
      // string instead of the stringified value.
      //
      if (!value && (value === null || value === undef || isNaN(value))) {
        value = '';
      }

      key = encode(key);
      value = encode(value);

      //
      // If we failed to encode the strings, we should bail out as we don't
      // want to add invalid strings to the query.
      //
      if (key === null || value === null) continue;
      pairs.push(key +'='+ value);
    }
  }

  return pairs.length ? prefix + pairs.join('&') : '';
}

//
// Expose the module.
//
exports.stringify = querystringify;
exports.parse = querystring;

},{}],38:[function(require,module,exports){
(function (global){(function (){
/*! queue-microtask. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
let promise

module.exports = typeof queueMicrotask === 'function'
  ? queueMicrotask.bind(typeof window !== 'undefined' ? window : global)
  // reuse resolved promise, and allocate it lazily
  : cb => (promise || (promise = Promise.resolve()))
    .then(cb)
    .catch(err => setTimeout(() => { throw err }, 0))

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],39:[function(require,module,exports){
'use strict';

/**
 * Check if we're required to add a port number.
 *
 * @see https://url.spec.whatwg.org/#default-port
 * @param {Number|String} port Port number we need to check
 * @param {String} protocol Protocol we need to check against.
 * @returns {Boolean} Is it a default port for the given protocol
 * @api private
 */
module.exports = function required(port, protocol) {
  protocol = protocol.split(':')[0];
  port = +port;

  if (!port) return false;

  switch (protocol) {
    case 'http':
    case 'ws':
    return port !== 80;

    case 'https':
    case 'wss':
    return port !== 443;

    case 'ftp':
    return port !== 21;

    case 'gopher':
    return port !== 70;

    case 'file':
    return false;
  }

  return port !== 0;
};

},{}],40:[function(require,module,exports){
/*! run-parallel. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
module.exports = runParallel

const queueMicrotask = require('queue-microtask')

function runParallel (tasks, cb) {
  let results, pending, keys
  let isSync = true

  if (Array.isArray(tasks)) {
    results = []
    pending = tasks.length
  } else {
    keys = Object.keys(tasks)
    results = {}
    pending = keys.length
  }

  function done (err) {
    function end () {
      if (cb) cb(err, results)
      cb = null
    }
    if (isSync) queueMicrotask(end)
    else end()
  }

  function each (i, err, result) {
    results[i] = result
    if (--pending === 0 || err) {
      done(err)
    }
  }

  if (!pending) {
    // empty
    done(null)
  } else if (keys) {
    // object
    keys.forEach(function (key) {
      tasks[key](function (err, result) { each(key, err, result) })
    })
  } else {
    // array
    tasks.forEach(function (task, i) {
      task(function (err, result) { each(i, err, result) })
    })
  }

  isSync = false
}

},{"queue-microtask":38}],41:[function(require,module,exports){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = exports.connect = exports.io = exports.Socket = exports.Manager = exports.protocol = void 0;
const url_js_1 = require("./url.js");
const manager_js_1 = require("./manager.js");
Object.defineProperty(exports, "Manager", { enumerable: true, get: function () { return manager_js_1.Manager; } });
const socket_js_1 = require("./socket.js");
Object.defineProperty(exports, "Socket", { enumerable: true, get: function () { return socket_js_1.Socket; } });
const debug_1 = __importDefault(require("debug")); // debug()
const debug = debug_1.default("socket.io-client"); // debug()
/**
 * Managers cache.
 */
const cache = {};
function lookup(uri, opts) {
    if (typeof uri === "object") {
        opts = uri;
        uri = undefined;
    }
    opts = opts || {};
    const parsed = url_js_1.url(uri, opts.path || "/socket.io");
    const source = parsed.source;
    const id = parsed.id;
    const path = parsed.path;
    const sameNamespace = cache[id] && path in cache[id]["nsps"];
    const newConnection = opts.forceNew ||
        opts["force new connection"] ||
        false === opts.multiplex ||
        sameNamespace;
    let io;
    if (newConnection) {
        debug("ignoring socket cache for %s", source);
        io = new manager_js_1.Manager(source, opts);
    }
    else {
        if (!cache[id]) {
            debug("new io instance for %s", source);
            cache[id] = new manager_js_1.Manager(source, opts);
        }
        io = cache[id];
    }
    if (parsed.query && !opts.query) {
        opts.query = parsed.queryKey;
    }
    return io.socket(parsed.path, opts);
}
exports.io = lookup;
exports.connect = lookup;
exports.default = lookup;
// so that "lookup" can be used both as a function (e.g. `io(...)`) and as a
// namespace (e.g. `io.connect(...)`), for backward compatibility
Object.assign(lookup, {
    Manager: manager_js_1.Manager,
    Socket: socket_js_1.Socket,
    io: lookup,
    connect: lookup,
});
/**
 * Protocol version.
 *
 * @public
 */
var socket_io_parser_1 = require("socket.io-parser");
Object.defineProperty(exports, "protocol", { enumerable: true, get: function () { return socket_io_parser_1.protocol; } });

module.exports = lookup;

},{"./manager.js":42,"./socket.js":44,"./url.js":45,"debug":9,"socket.io-parser":58}],42:[function(require,module,exports){
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Manager = void 0;
const engine_io_client_1 = require("engine.io-client");
const socket_js_1 = require("./socket.js");
const parser = __importStar(require("socket.io-parser"));
const on_js_1 = require("./on.js");
const backo2_1 = __importDefault(require("backo2"));
const component_emitter_1 = require("@socket.io/component-emitter");
const debug_1 = __importDefault(require("debug")); // debug()
const debug = debug_1.default("socket.io-client:manager"); // debug()
class Manager extends component_emitter_1.Emitter {
    constructor(uri, opts) {
        var _a;
        super();
        this.nsps = {};
        this.subs = [];
        if (uri && "object" === typeof uri) {
            opts = uri;
            uri = undefined;
        }
        opts = opts || {};
        opts.path = opts.path || "/socket.io";
        this.opts = opts;
        engine_io_client_1.installTimerFunctions(this, opts);
        this.reconnection(opts.reconnection !== false);
        this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);
        this.reconnectionDelay(opts.reconnectionDelay || 1000);
        this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);
        this.randomizationFactor((_a = opts.randomizationFactor) !== null && _a !== void 0 ? _a : 0.5);
        this.backoff = new backo2_1.default({
            min: this.reconnectionDelay(),
            max: this.reconnectionDelayMax(),
            jitter: this.randomizationFactor(),
        });
        this.timeout(null == opts.timeout ? 20000 : opts.timeout);
        this._readyState = "closed";
        this.uri = uri;
        const _parser = opts.parser || parser;
        this.encoder = new _parser.Encoder();
        this.decoder = new _parser.Decoder();
        this._autoConnect = opts.autoConnect !== false;
        if (this._autoConnect)
            this.open();
    }
    reconnection(v) {
        if (!arguments.length)
            return this._reconnection;
        this._reconnection = !!v;
        return this;
    }
    reconnectionAttempts(v) {
        if (v === undefined)
            return this._reconnectionAttempts;
        this._reconnectionAttempts = v;
        return this;
    }
    reconnectionDelay(v) {
        var _a;
        if (v === undefined)
            return this._reconnectionDelay;
        this._reconnectionDelay = v;
        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMin(v);
        return this;
    }
    randomizationFactor(v) {
        var _a;
        if (v === undefined)
            return this._randomizationFactor;
        this._randomizationFactor = v;
        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setJitter(v);
        return this;
    }
    reconnectionDelayMax(v) {
        var _a;
        if (v === undefined)
            return this._reconnectionDelayMax;
        this._reconnectionDelayMax = v;
        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMax(v);
        return this;
    }
    timeout(v) {
        if (!arguments.length)
            return this._timeout;
        this._timeout = v;
        return this;
    }
    /**
     * Starts trying to reconnect if reconnection is enabled and we have not
     * started reconnecting yet
     *
     * @private
     */
    maybeReconnectOnOpen() {
        // Only try to reconnect if it's the first time we're connecting
        if (!this._reconnecting &&
            this._reconnection &&
            this.backoff.attempts === 0) {
            // keeps reconnection from firing twice for the same reconnection loop
            this.reconnect();
        }
    }
    /**
     * Sets the current transport `socket`.
     *
     * @param {Function} fn - optional, callback
     * @return self
     * @public
     */
    open(fn) {
        debug("readyState %s", this._readyState);
        if (~this._readyState.indexOf("open"))
            return this;
        debug("opening %s", this.uri);
        this.engine = new engine_io_client_1.Socket(this.uri, this.opts);
        const socket = this.engine;
        const self = this;
        this._readyState = "opening";
        this.skipReconnect = false;
        // emit `open`
        const openSubDestroy = on_js_1.on(socket, "open", function () {
            self.onopen();
            fn && fn();
        });
        // emit `error`
        const errorSub = on_js_1.on(socket, "error", (err) => {
            debug("error");
            self.cleanup();
            self._readyState = "closed";
            this.emitReserved("error", err);
            if (fn) {
                fn(err);
            }
            else {
                // Only do this if there is no fn to handle the error
                self.maybeReconnectOnOpen();
            }
        });
        if (false !== this._timeout) {
            const timeout = this._timeout;
            debug("connect attempt will timeout after %d", timeout);
            if (timeout === 0) {
                openSubDestroy(); // prevents a race condition with the 'open' event
            }
            // set timer
            const timer = this.setTimeoutFn(() => {
                debug("connect attempt timed out after %d", timeout);
                openSubDestroy();
                socket.close();
                // @ts-ignore
                socket.emit("error", new Error("timeout"));
            }, timeout);
            if (this.opts.autoUnref) {
                timer.unref();
            }
            this.subs.push(function subDestroy() {
                clearTimeout(timer);
            });
        }
        this.subs.push(openSubDestroy);
        this.subs.push(errorSub);
        return this;
    }
    /**
     * Alias for open()
     *
     * @return self
     * @public
     */
    connect(fn) {
        return this.open(fn);
    }
    /**
     * Called upon transport open.
     *
     * @private
     */
    onopen() {
        debug("open");
        // clear old subs
        this.cleanup();
        // mark as open
        this._readyState = "open";
        this.emitReserved("open");
        // add new subs
        const socket = this.engine;
        this.subs.push(on_js_1.on(socket, "ping", this.onping.bind(this)), on_js_1.on(socket, "data", this.ondata.bind(this)), on_js_1.on(socket, "error", this.onerror.bind(this)), on_js_1.on(socket, "close", this.onclose.bind(this)), on_js_1.on(this.decoder, "decoded", this.ondecoded.bind(this)));
    }
    /**
     * Called upon a ping.
     *
     * @private
     */
    onping() {
        this.emitReserved("ping");
    }
    /**
     * Called with data.
     *
     * @private
     */
    ondata(data) {
        this.decoder.add(data);
    }
    /**
     * Called when parser fully decodes a packet.
     *
     * @private
     */
    ondecoded(packet) {
        this.emitReserved("packet", packet);
    }
    /**
     * Called upon socket error.
     *
     * @private
     */
    onerror(err) {
        debug("error", err);
        this.emitReserved("error", err);
    }
    /**
     * Creates a new socket for the given `nsp`.
     *
     * @return {Socket}
     * @public
     */
    socket(nsp, opts) {
        let socket = this.nsps[nsp];
        if (!socket) {
            socket = new socket_js_1.Socket(this, nsp, opts);
            this.nsps[nsp] = socket;
        }
        return socket;
    }
    /**
     * Called upon a socket close.
     *
     * @param socket
     * @private
     */
    _destroy(socket) {
        const nsps = Object.keys(this.nsps);
        for (const nsp of nsps) {
            const socket = this.nsps[nsp];
            if (socket.active) {
                debug("socket %s is still active, skipping close", nsp);
                return;
            }
        }
        this._close();
    }
    /**
     * Writes a packet.
     *
     * @param packet
     * @private
     */
    _packet(packet) {
        debug("writing packet %j", packet);
        const encodedPackets = this.encoder.encode(packet);
        for (let i = 0; i < encodedPackets.length; i++) {
            this.engine.write(encodedPackets[i], packet.options);
        }
    }
    /**
     * Clean up transport subscriptions and packet buffer.
     *
     * @private
     */
    cleanup() {
        debug("cleanup");
        this.subs.forEach((subDestroy) => subDestroy());
        this.subs.length = 0;
        this.decoder.destroy();
    }
    /**
     * Close the current socket.
     *
     * @private
     */
    _close() {
        debug("disconnect");
        this.skipReconnect = true;
        this._reconnecting = false;
        this.onclose("forced close");
        if (this.engine)
            this.engine.close();
    }
    /**
     * Alias for close()
     *
     * @private
     */
    disconnect() {
        return this._close();
    }
    /**
     * Called upon engine close.
     *
     * @private
     */
    onclose(reason) {
        debug("closed due to %s", reason);
        this.cleanup();
        this.backoff.reset();
        this._readyState = "closed";
        this.emitReserved("close", reason);
        if (this._reconnection && !this.skipReconnect) {
            this.reconnect();
        }
    }
    /**
     * Attempt a reconnection.
     *
     * @private
     */
    reconnect() {
        if (this._reconnecting || this.skipReconnect)
            return this;
        const self = this;
        if (this.backoff.attempts >= this._reconnectionAttempts) {
            debug("reconnect failed");
            this.backoff.reset();
            this.emitReserved("reconnect_failed");
            this._reconnecting = false;
        }
        else {
            const delay = this.backoff.duration();
            debug("will wait %dms before reconnect attempt", delay);
            this._reconnecting = true;
            const timer = this.setTimeoutFn(() => {
                if (self.skipReconnect)
                    return;
                debug("attempting reconnect");
                this.emitReserved("reconnect_attempt", self.backoff.attempts);
                // check again for the case socket closed in above events
                if (self.skipReconnect)
                    return;
                self.open((err) => {
                    if (err) {
                        debug("reconnect attempt error");
                        self._reconnecting = false;
                        self.reconnect();
                        this.emitReserved("reconnect_error", err);
                    }
                    else {
                        debug("reconnect success");
                        self.onreconnect();
                    }
                });
            }, delay);
            if (this.opts.autoUnref) {
                timer.unref();
            }
            this.subs.push(function subDestroy() {
                clearTimeout(timer);
            });
        }
    }
    /**
     * Called upon successful reconnect.
     *
     * @private
     */
    onreconnect() {
        const attempt = this.backoff.attempts;
        this._reconnecting = false;
        this.backoff.reset();
        this.emitReserved("reconnect", attempt);
    }
}
exports.Manager = Manager;

},{"./on.js":43,"./socket.js":44,"@socket.io/component-emitter":1,"backo2":3,"debug":9,"engine.io-client":47,"socket.io-parser":58}],43:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.on = void 0;
function on(obj, ev, fn) {
    obj.on(ev, fn);
    return function subDestroy() {
        obj.off(ev, fn);
    };
}
exports.on = on;

},{}],44:[function(require,module,exports){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Socket = void 0;
const socket_io_parser_1 = require("socket.io-parser");
const on_js_1 = require("./on.js");
const component_emitter_1 = require("@socket.io/component-emitter");
const debug_1 = __importDefault(require("debug")); // debug()
const debug = debug_1.default("socket.io-client:socket"); // debug()
/**
 * Internal events.
 * These events can't be emitted by the user.
 */
const RESERVED_EVENTS = Object.freeze({
    connect: 1,
    connect_error: 1,
    disconnect: 1,
    disconnecting: 1,
    // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener
    newListener: 1,
    removeListener: 1,
});
class Socket extends component_emitter_1.Emitter {
    /**
     * `Socket` constructor.
     *
     * @public
     */
    constructor(io, nsp, opts) {
        super();
        this.connected = false;
        this.disconnected = true;
        this.receiveBuffer = [];
        this.sendBuffer = [];
        this.ids = 0;
        this.acks = {};
        this.flags = {};
        this.io = io;
        this.nsp = nsp;
        if (opts && opts.auth) {
            this.auth = opts.auth;
        }
        if (this.io._autoConnect)
            this.open();
    }
    /**
     * Subscribe to open, close and packet events
     *
     * @private
     */
    subEvents() {
        if (this.subs)
            return;
        const io = this.io;
        this.subs = [
            on_js_1.on(io, "open", this.onopen.bind(this)),
            on_js_1.on(io, "packet", this.onpacket.bind(this)),
            on_js_1.on(io, "error", this.onerror.bind(this)),
            on_js_1.on(io, "close", this.onclose.bind(this)),
        ];
    }
    /**
     * Whether the Socket will try to reconnect when its Manager connects or reconnects
     */
    get active() {
        return !!this.subs;
    }
    /**
     * "Opens" the socket.
     *
     * @public
     */
    connect() {
        if (this.connected)
            return this;
        this.subEvents();
        if (!this.io["_reconnecting"])
            this.io.open(); // ensure open
        if ("open" === this.io._readyState)
            this.onopen();
        return this;
    }
    /**
     * Alias for connect()
     */
    open() {
        return this.connect();
    }
    /**
     * Sends a `message` event.
     *
     * @return self
     * @public
     */
    send(...args) {
        args.unshift("message");
        this.emit.apply(this, args);
        return this;
    }
    /**
     * Override `emit`.
     * If the event is in `events`, it's emitted normally.
     *
     * @return self
     * @public
     */
    emit(ev, ...args) {
        if (RESERVED_EVENTS.hasOwnProperty(ev)) {
            throw new Error('"' + ev + '" is a reserved event name');
        }
        args.unshift(ev);
        const packet = {
            type: socket_io_parser_1.PacketType.EVENT,
            data: args,
        };
        packet.options = {};
        packet.options.compress = this.flags.compress !== false;
        // event ack callback
        if ("function" === typeof args[args.length - 1]) {
            const id = this.ids++;
            debug("emitting packet with ack id %d", id);
            const ack = args.pop();
            this._registerAckCallback(id, ack);
            packet.id = id;
        }
        const isTransportWritable = this.io.engine &&
            this.io.engine.transport &&
            this.io.engine.transport.writable;
        const discardPacket = this.flags.volatile && (!isTransportWritable || !this.connected);
        if (discardPacket) {
            debug("discard packet as the transport is not currently writable");
        }
        else if (this.connected) {
            this.packet(packet);
        }
        else {
            this.sendBuffer.push(packet);
        }
        this.flags = {};
        return this;
    }
    /**
     * @private
     */
    _registerAckCallback(id, ack) {
        const timeout = this.flags.timeout;
        if (timeout === undefined) {
            this.acks[id] = ack;
            return;
        }
        // @ts-ignore
        const timer = this.io.setTimeoutFn(() => {
            delete this.acks[id];
            for (let i = 0; i < this.sendBuffer.length; i++) {
                if (this.sendBuffer[i].id === id) {
                    debug("removing packet with ack id %d from the buffer", id);
                    this.sendBuffer.splice(i, 1);
                }
            }
            debug("event with ack id %d has timed out after %d ms", id, timeout);
            ack.call(this, new Error("operation has timed out"));
        }, timeout);
        this.acks[id] = (...args) => {
            // @ts-ignore
            this.io.clearTimeoutFn(timer);
            ack.apply(this, [null, ...args]);
        };
    }
    /**
     * Sends a packet.
     *
     * @param packet
     * @private
     */
    packet(packet) {
        packet.nsp = this.nsp;
        this.io._packet(packet);
    }
    /**
     * Called upon engine `open`.
     *
     * @private
     */
    onopen() {
        debug("transport is open - connecting");
        if (typeof this.auth == "function") {
            this.auth((data) => {
                this.packet({ type: socket_io_parser_1.PacketType.CONNECT, data });
            });
        }
        else {
            this.packet({ type: socket_io_parser_1.PacketType.CONNECT, data: this.auth });
        }
    }
    /**
     * Called upon engine or manager `error`.
     *
     * @param err
     * @private
     */
    onerror(err) {
        if (!this.connected) {
            this.emitReserved("connect_error", err);
        }
    }
    /**
     * Called upon engine `close`.
     *
     * @param reason
     * @private
     */
    onclose(reason) {
        debug("close (%s)", reason);
        this.connected = false;
        this.disconnected = true;
        delete this.id;
        this.emitReserved("disconnect", reason);
    }
    /**
     * Called with socket packet.
     *
     * @param packet
     * @private
     */
    onpacket(packet) {
        const sameNamespace = packet.nsp === this.nsp;
        if (!sameNamespace)
            return;
        switch (packet.type) {
            case socket_io_parser_1.PacketType.CONNECT:
                if (packet.data && packet.data.sid) {
                    const id = packet.data.sid;
                    this.onconnect(id);
                }
                else {
                    this.emitReserved("connect_error", new Error("It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)"));
                }
                break;
            case socket_io_parser_1.PacketType.EVENT:
                this.onevent(packet);
                break;
            case socket_io_parser_1.PacketType.BINARY_EVENT:
                this.onevent(packet);
                break;
            case socket_io_parser_1.PacketType.ACK:
                this.onack(packet);
                break;
            case socket_io_parser_1.PacketType.BINARY_ACK:
                this.onack(packet);
                break;
            case socket_io_parser_1.PacketType.DISCONNECT:
                this.ondisconnect();
                break;
            case socket_io_parser_1.PacketType.CONNECT_ERROR:
                this.destroy();
                const err = new Error(packet.data.message);
                // @ts-ignore
                err.data = packet.data.data;
                this.emitReserved("connect_error", err);
                break;
        }
    }
    /**
     * Called upon a server event.
     *
     * @param packet
     * @private
     */
    onevent(packet) {
        const args = packet.data || [];
        debug("emitting event %j", args);
        if (null != packet.id) {
            debug("attaching ack callback to event");
            args.push(this.ack(packet.id));
        }
        if (this.connected) {
            this.emitEvent(args);
        }
        else {
            this.receiveBuffer.push(Object.freeze(args));
        }
    }
    emitEvent(args) {
        if (this._anyListeners && this._anyListeners.length) {
            const listeners = this._anyListeners.slice();
            for (const listener of listeners) {
                listener.apply(this, args);
            }
        }
        super.emit.apply(this, args);
    }
    /**
     * Produces an ack callback to emit with an event.
     *
     * @private
     */
    ack(id) {
        const self = this;
        let sent = false;
        return function (...args) {
            // prevent double callbacks
            if (sent)
                return;
            sent = true;
            debug("sending ack %j", args);
            self.packet({
                type: socket_io_parser_1.PacketType.ACK,
                id: id,
                data: args,
            });
        };
    }
    /**
     * Called upon a server acknowlegement.
     *
     * @param packet
     * @private
     */
    onack(packet) {
        const ack = this.acks[packet.id];
        if ("function" === typeof ack) {
            debug("calling ack %s with %j", packet.id, packet.data);
            ack.apply(this, packet.data);
            delete this.acks[packet.id];
        }
        else {
            debug("bad ack %s", packet.id);
        }
    }
    /**
     * Called upon server connect.
     *
     * @private
     */
    onconnect(id) {
        debug("socket connected with id %s", id);
        this.id = id;
        this.connected = true;
        this.disconnected = false;
        this.emitBuffered();
        this.emitReserved("connect");
    }
    /**
     * Emit buffered events (received and emitted).
     *
     * @private
     */
    emitBuffered() {
        this.receiveBuffer.forEach((args) => this.emitEvent(args));
        this.receiveBuffer = [];
        this.sendBuffer.forEach((packet) => this.packet(packet));
        this.sendBuffer = [];
    }
    /**
     * Called upon server disconnect.
     *
     * @private
     */
    ondisconnect() {
        debug("server disconnect (%s)", this.nsp);
        this.destroy();
        this.onclose("io server disconnect");
    }
    /**
     * Called upon forced client/server side disconnections,
     * this method ensures the manager stops tracking us and
     * that reconnections don't get triggered for this.
     *
     * @private
     */
    destroy() {
        if (this.subs) {
            // clean subscriptions to avoid reconnections
            this.subs.forEach((subDestroy) => subDestroy());
            this.subs = undefined;
        }
        this.io["_destroy"](this);
    }
    /**
     * Disconnects the socket manually.
     *
     * @return self
     * @public
     */
    disconnect() {
        if (this.connected) {
            debug("performing disconnect (%s)", this.nsp);
            this.packet({ type: socket_io_parser_1.PacketType.DISCONNECT });
        }
        // remove socket from pool
        this.destroy();
        if (this.connected) {
            // fire events
            this.onclose("io client disconnect");
        }
        return this;
    }
    /**
     * Alias for disconnect()
     *
     * @return self
     * @public
     */
    close() {
        return this.disconnect();
    }
    /**
     * Sets the compress flag.
     *
     * @param compress - if `true`, compresses the sending data
     * @return self
     * @public
     */
    compress(compress) {
        this.flags.compress = compress;
        return this;
    }
    /**
     * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not
     * ready to send messages.
     *
     * @returns self
     * @public
     */
    get volatile() {
        this.flags.volatile = true;
        return this;
    }
    /**
     * Sets a modifier for a subsequent event emission that the callback will be called with an error when the
     * given number of milliseconds have elapsed without an acknowledgement from the server:
     *
     * ```
     * socket.timeout(5000).emit("my-event", (err) => {
     *   if (err) {
     *     // the server did not acknowledge the event in the given delay
     *   }
     * });
     * ```
     *
     * @returns self
     * @public
     */
    timeout(timeout) {
        this.flags.timeout = timeout;
        return this;
    }
    /**
     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the
     * callback.
     *
     * @param listener
     * @public
     */
    onAny(listener) {
        this._anyListeners = this._anyListeners || [];
        this._anyListeners.push(listener);
        return this;
    }
    /**
     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the
     * callback. The listener is added to the beginning of the listeners array.
     *
     * @param listener
     * @public
     */
    prependAny(listener) {
        this._anyListeners = this._anyListeners || [];
        this._anyListeners.unshift(listener);
        return this;
    }
    /**
     * Removes the listener that will be fired when any event is emitted.
     *
     * @param listener
     * @public
     */
    offAny(listener) {
        if (!this._anyListeners) {
            return this;
        }
        if (listener) {
            const listeners = this._anyListeners;
            for (let i = 0; i < listeners.length; i++) {
                if (listener === listeners[i]) {
                    listeners.splice(i, 1);
                    return this;
                }
            }
        }
        else {
            this._anyListeners = [];
        }
        return this;
    }
    /**
     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,
     * e.g. to remove listeners.
     *
     * @public
     */
    listenersAny() {
        return this._anyListeners || [];
    }
}
exports.Socket = Socket;

},{"./on.js":43,"@socket.io/component-emitter":1,"debug":9,"socket.io-parser":58}],45:[function(require,module,exports){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.url = void 0;
const parseuri_1 = __importDefault(require("parseuri"));
const debug_1 = __importDefault(require("debug")); // debug()
const debug = debug_1.default("socket.io-client:url"); // debug()
/**
 * URL parser.
 *
 * @param uri - url
 * @param path - the request path of the connection
 * @param loc - An object meant to mimic window.location.
 *        Defaults to window.location.
 * @public
 */
function url(uri, path = "", loc) {
    let obj = uri;
    // default to window.location
    loc = loc || (typeof location !== "undefined" && location);
    if (null == uri)
        uri = loc.protocol + "//" + loc.host;
    // relative path support
    if (typeof uri === "string") {
        if ("/" === uri.charAt(0)) {
            if ("/" === uri.charAt(1)) {
                uri = loc.protocol + uri;
            }
            else {
                uri = loc.host + uri;
            }
        }
        if (!/^(https?|wss?):\/\//.test(uri)) {
            debug("protocol-less url %s", uri);
            if ("undefined" !== typeof loc) {
                uri = loc.protocol + "//" + uri;
            }
            else {
                uri = "https://" + uri;
            }
        }
        // parse
        debug("parse %s", uri);
        obj = parseuri_1.default(uri);
    }
    // make sure we treat `localhost:80` and `localhost` equally
    if (!obj.port) {
        if (/^(http|ws)$/.test(obj.protocol)) {
            obj.port = "80";
        }
        else if (/^(http|ws)s$/.test(obj.protocol)) {
            obj.port = "443";
        }
    }
    obj.path = obj.path || "/";
    const ipv6 = obj.host.indexOf(":") !== -1;
    const host = ipv6 ? "[" + obj.host + "]" : obj.host;
    // define unique id
    obj.id = obj.protocol + "://" + host + ":" + obj.port + path;
    // define href
    obj.href =
        obj.protocol +
            "://" +
            host +
            (loc && loc.port === obj.port ? "" : ":" + obj.port);
    return obj;
}
exports.url = url;

},{"debug":9,"parseuri":34}],46:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = (() => {
    if (typeof self !== "undefined") {
        return self;
    }
    else if (typeof window !== "undefined") {
        return window;
    }
    else {
        return Function("return this")();
    }
})();

},{}],47:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.installTimerFunctions = exports.transports = exports.Transport = exports.protocol = exports.Socket = void 0;
const socket_js_1 = require("./socket.js");
Object.defineProperty(exports, "Socket", { enumerable: true, get: function () { return socket_js_1.Socket; } });
exports.protocol = socket_js_1.Socket.protocol;
var transport_js_1 = require("./transport.js");
Object.defineProperty(exports, "Transport", { enumerable: true, get: function () { return transport_js_1.Transport; } });
var index_js_1 = require("./transports/index.js");
Object.defineProperty(exports, "transports", { enumerable: true, get: function () { return index_js_1.transports; } });
var util_js_1 = require("./util.js");
Object.defineProperty(exports, "installTimerFunctions", { enumerable: true, get: function () { return util_js_1.installTimerFunctions; } });

},{"./socket.js":48,"./transport.js":49,"./transports/index.js":50,"./util.js":56}],48:[function(require,module,exports){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Socket = void 0;
const index_js_1 = require("./transports/index.js");
const util_js_1 = require("./util.js");
const parseqs_1 = __importDefault(require("parseqs"));
const parseuri_1 = __importDefault(require("parseuri"));
const debug_1 = __importDefault(require("debug")); // debug()
const component_emitter_1 = require("@socket.io/component-emitter");
const engine_io_parser_1 = require("engine.io-parser");
const debug = (0, debug_1.default)("engine.io-client:socket"); // debug()
class Socket extends component_emitter_1.Emitter {
    /**
     * Socket constructor.
     *
     * @param {String|Object} uri or options
     * @param {Object} opts - options
     * @api public
     */
    constructor(uri, opts = {}) {
        super();
        if (uri && "object" === typeof uri) {
            opts = uri;
            uri = null;
        }
        if (uri) {
            uri = (0, parseuri_1.default)(uri);
            opts.hostname = uri.host;
            opts.secure = uri.protocol === "https" || uri.protocol === "wss";
            opts.port = uri.port;
            if (uri.query)
                opts.query = uri.query;
        }
        else if (opts.host) {
            opts.hostname = (0, parseuri_1.default)(opts.host).host;
        }
        (0, util_js_1.installTimerFunctions)(this, opts);
        this.secure =
            null != opts.secure
                ? opts.secure
                : typeof location !== "undefined" && "https:" === location.protocol;
        if (opts.hostname && !opts.port) {
            // if no port is specified manually, use the protocol default
            opts.port = this.secure ? "443" : "80";
        }
        this.hostname =
            opts.hostname ||
                (typeof location !== "undefined" ? location.hostname : "localhost");
        this.port =
            opts.port ||
                (typeof location !== "undefined" && location.port
                    ? location.port
                    : this.secure
                        ? "443"
                        : "80");
        this.transports = opts.transports || ["polling", "websocket"];
        this.readyState = "";
        this.writeBuffer = [];
        this.prevBufferLen = 0;
        this.opts = Object.assign({
            path: "/engine.io",
            agent: false,
            withCredentials: false,
            upgrade: true,
            timestampParam: "t",
            rememberUpgrade: false,
            rejectUnauthorized: true,
            perMessageDeflate: {
                threshold: 1024
            },
            transportOptions: {},
            closeOnBeforeunload: true
        }, opts);
        this.opts.path = this.opts.path.replace(/\/$/, "") + "/";
        if (typeof this.opts.query === "string") {
            this.opts.query = parseqs_1.default.decode(this.opts.query);
        }
        // set on handshake
        this.id = null;
        this.upgrades = null;
        this.pingInterval = null;
        this.pingTimeout = null;
        // set on heartbeat
        this.pingTimeoutTimer = null;
        if (typeof addEventListener === "function") {
            if (this.opts.closeOnBeforeunload) {
                // Firefox closes the connection when the "beforeunload" event is emitted but not Chrome. This event listener
                // ensures every browser behaves the same (no "disconnect" event at the Socket.IO level when the page is
                // closed/reloaded)
                addEventListener("beforeunload", () => {
                    if (this.transport) {
                        // silently close the transport
                        this.transport.removeAllListeners();
                        this.transport.close();
                    }
                }, false);
            }
            if (this.hostname !== "localhost") {
                this.offlineEventListener = () => {
                    this.onClose("transport close");
                };
                addEventListener("offline", this.offlineEventListener, false);
            }
        }
        this.open();
    }
    /**
     * Creates transport of the given type.
     *
     * @param {String} transport name
     * @return {Transport}
     * @api private
     */
    createTransport(name) {
        debug('creating transport "%s"', name);
        const query = clone(this.opts.query);
        // append engine.io protocol identifier
        query.EIO = engine_io_parser_1.protocol;
        // transport name
        query.transport = name;
        // session id if we already have one
        if (this.id)
            query.sid = this.id;
        const opts = Object.assign({}, this.opts.transportOptions[name], this.opts, {
            query,
            socket: this,
            hostname: this.hostname,
            secure: this.secure,
            port: this.port
        });
        debug("options: %j", opts);
        return new index_js_1.transports[name](opts);
    }
    /**
     * Initializes transport to use and starts probe.
     *
     * @api private
     */
    open() {
        let transport;
        if (this.opts.rememberUpgrade &&
            Socket.priorWebsocketSuccess &&
            this.transports.indexOf("websocket") !== -1) {
            transport = "websocket";
        }
        else if (0 === this.transports.length) {
            // Emit error on next tick so it can be listened to
            this.setTimeoutFn(() => {
                this.emitReserved("error", "No transports available");
            }, 0);
            return;
        }
        else {
            transport = this.transports[0];
        }
        this.readyState = "opening";
        // Retry with the next transport if the transport is disabled (jsonp: false)
        try {
            transport = this.createTransport(transport);
        }
        catch (e) {
            debug("error while creating transport: %s", e);
            this.transports.shift();
            this.open();
            return;
        }
        transport.open();
        this.setTransport(transport);
    }
    /**
     * Sets the current transport. Disables the existing one (if any).
     *
     * @api private
     */
    setTransport(transport) {
        debug("setting transport %s", transport.name);
        if (this.transport) {
            debug("clearing existing transport %s", this.transport.name);
            this.transport.removeAllListeners();
        }
        // set up transport
        this.transport = transport;
        // set up transport listeners
        transport
            .on("drain", this.onDrain.bind(this))
            .on("packet", this.onPacket.bind(this))
            .on("error", this.onError.bind(this))
            .on("close", () => {
            this.onClose("transport close");
        });
    }
    /**
     * Probes a transport.
     *
     * @param {String} transport name
     * @api private
     */
    probe(name) {
        debug('probing transport "%s"', name);
        let transport = this.createTransport(name);
        let failed = false;
        Socket.priorWebsocketSuccess = false;
        const onTransportOpen = () => {
            if (failed)
                return;
            debug('probe transport "%s" opened', name);
            transport.send([{ type: "ping", data: "probe" }]);
            transport.once("packet", msg => {
                if (failed)
                    return;
                if ("pong" === msg.type && "probe" === msg.data) {
                    debug('probe transport "%s" pong', name);
                    this.upgrading = true;
                    this.emitReserved("upgrading", transport);
                    if (!transport)
                        return;
                    Socket.priorWebsocketSuccess = "websocket" === transport.name;
                    debug('pausing current transport "%s"', this.transport.name);
                    this.transport.pause(() => {
                        if (failed)
                            return;
                        if ("closed" === this.readyState)
                            return;
                        debug("changing transport and sending upgrade packet");
                        cleanup();
                        this.setTransport(transport);
                        transport.send([{ type: "upgrade" }]);
                        this.emitReserved("upgrade", transport);
                        transport = null;
                        this.upgrading = false;
                        this.flush();
                    });
                }
                else {
                    debug('probe transport "%s" failed', name);
                    const err = new Error("probe error");
                    // @ts-ignore
                    err.transport = transport.name;
                    this.emitReserved("upgradeError", err);
                }
            });
        };
        function freezeTransport() {
            if (failed)
                return;
            // Any callback called by transport should be ignored since now
            failed = true;
            cleanup();
            transport.close();
            transport = null;
        }
        // Handle any error that happens while probing
        const onerror = err => {
            const error = new Error("probe error: " + err);
            // @ts-ignore
            error.transport = transport.name;
            freezeTransport();
            debug('probe transport "%s" failed because of error: %s', name, err);
            this.emitReserved("upgradeError", error);
        };
        function onTransportClose() {
            onerror("transport closed");
        }
        // When the socket is closed while we're probing
        function onclose() {
            onerror("socket closed");
        }
        // When the socket is upgraded while we're probing
        function onupgrade(to) {
            if (transport && to.name !== transport.name) {
                debug('"%s" works - aborting "%s"', to.name, transport.name);
                freezeTransport();
            }
        }
        // Remove all listeners on the transport and on self
        const cleanup = () => {
            transport.removeListener("open", onTransportOpen);
            transport.removeListener("error", onerror);
            transport.removeListener("close", onTransportClose);
            this.off("close", onclose);
            this.off("upgrading", onupgrade);
        };
        transport.once("open", onTransportOpen);
        transport.once("error", onerror);
        transport.once("close", onTransportClose);
        this.once("close", onclose);
        this.once("upgrading", onupgrade);
        transport.open();
    }
    /**
     * Called when connection is deemed open.
     *
     * @api private
     */
    onOpen() {
        debug("socket open");
        this.readyState = "open";
        Socket.priorWebsocketSuccess = "websocket" === this.transport.name;
        this.emitReserved("open");
        this.flush();
        // we check for `readyState` in case an `open`
        // listener already closed the socket
        if ("open" === this.readyState &&
            this.opts.upgrade &&
            this.transport.pause) {
            debug("starting upgrade probes");
            let i = 0;
            const l = this.upgrades.length;
            for (; i < l; i++) {
                this.probe(this.upgrades[i]);
            }
        }
    }
    /**
     * Handles a packet.
     *
     * @api private
     */
    onPacket(packet) {
        if ("opening" === this.readyState ||
            "open" === this.readyState ||
            "closing" === this.readyState) {
            debug('socket receive: type "%s", data "%s"', packet.type, packet.data);
            this.emitReserved("packet", packet);
            // Socket is live - any packet counts
            this.emitReserved("heartbeat");
            switch (packet.type) {
                case "open":
                    this.onHandshake(JSON.parse(packet.data));
                    break;
                case "ping":
                    this.resetPingTimeout();
                    this.sendPacket("pong");
                    this.emitReserved("ping");
                    this.emitReserved("pong");
                    break;
                case "error":
                    const err = new Error("server error");
                    // @ts-ignore
                    err.code = packet.data;
                    this.onError(err);
                    break;
                case "message":
                    this.emitReserved("data", packet.data);
                    this.emitReserved("message", packet.data);
                    break;
            }
        }
        else {
            debug('packet received with socket readyState "%s"', this.readyState);
        }
    }
    /**
     * Called upon handshake completion.
     *
     * @param {Object} data - handshake obj
     * @api private
     */
    onHandshake(data) {
        this.emitReserved("handshake", data);
        this.id = data.sid;
        this.transport.query.sid = data.sid;
        this.upgrades = this.filterUpgrades(data.upgrades);
        this.pingInterval = data.pingInterval;
        this.pingTimeout = data.pingTimeout;
        this.onOpen();
        // In case open handler closes socket
        if ("closed" === this.readyState)
            return;
        this.resetPingTimeout();
    }
    /**
     * Sets and resets ping timeout timer based on server pings.
     *
     * @api private
     */
    resetPingTimeout() {
        this.clearTimeoutFn(this.pingTimeoutTimer);
        this.pingTimeoutTimer = this.setTimeoutFn(() => {
            this.onClose("ping timeout");
        }, this.pingInterval + this.pingTimeout);
        if (this.opts.autoUnref) {
            this.pingTimeoutTimer.unref();
        }
    }
    /**
     * Called on `drain` event
     *
     * @api private
     */
    onDrain() {
        this.writeBuffer.splice(0, this.prevBufferLen);
        // setting prevBufferLen = 0 is very important
        // for example, when upgrading, upgrade packet is sent over,
        // and a nonzero prevBufferLen could cause problems on `drain`
        this.prevBufferLen = 0;
        if (0 === this.writeBuffer.length) {
            this.emitReserved("drain");
        }
        else {
            this.flush();
        }
    }
    /**
     * Flush write buffers.
     *
     * @api private
     */
    flush() {
        if ("closed" !== this.readyState &&
            this.transport.writable &&
            !this.upgrading &&
            this.writeBuffer.length) {
            debug("flushing %d packets in socket", this.writeBuffer.length);
            this.transport.send(this.writeBuffer);
            // keep track of current length of writeBuffer
            // splice writeBuffer and callbackBuffer on `drain`
            this.prevBufferLen = this.writeBuffer.length;
            this.emitReserved("flush");
        }
    }
    /**
     * Sends a message.
     *
     * @param {String} message.
     * @param {Function} callback function.
     * @param {Object} options.
     * @return {Socket} for chaining.
     * @api public
     */
    write(msg, options, fn) {
        this.sendPacket("message", msg, options, fn);
        return this;
    }
    send(msg, options, fn) {
        this.sendPacket("message", msg, options, fn);
        return this;
    }
    /**
     * Sends a packet.
     *
     * @param {String} packet type.
     * @param {String} data.
     * @param {Object} options.
     * @param {Function} callback function.
     * @api private
     */
    sendPacket(type, data, options, fn) {
        if ("function" === typeof data) {
            fn = data;
            data = undefined;
        }
        if ("function" === typeof options) {
            fn = options;
            options = null;
        }
        if ("closing" === this.readyState || "closed" === this.readyState) {
            return;
        }
        options = options || {};
        options.compress = false !== options.compress;
        const packet = {
            type: type,
            data: data,
            options: options
        };
        this.emitReserved("packetCreate", packet);
        this.writeBuffer.push(packet);
        if (fn)
            this.once("flush", fn);
        this.flush();
    }
    /**
     * Closes the connection.
     *
     * @api public
     */
    close() {
        const close = () => {
            this.onClose("forced close");
            debug("socket closing - telling transport to close");
            this.transport.close();
        };
        const cleanupAndClose = () => {
            this.off("upgrade", cleanupAndClose);
            this.off("upgradeError", cleanupAndClose);
            close();
        };
        const waitForUpgrade = () => {
            // wait for upgrade to finish since we can't send packets while pausing a transport
            this.once("upgrade", cleanupAndClose);
            this.once("upgradeError", cleanupAndClose);
        };
        if ("opening" === this.readyState || "open" === this.readyState) {
            this.readyState = "closing";
            if (this.writeBuffer.length) {
                this.once("drain", () => {
                    if (this.upgrading) {
                        waitForUpgrade();
                    }
                    else {
                        close();
                    }
                });
            }
            else if (this.upgrading) {
                waitForUpgrade();
            }
            else {
                close();
            }
        }
        return this;
    }
    /**
     * Called upon transport error
     *
     * @api private
     */
    onError(err) {
        debug("socket error %j", err);
        Socket.priorWebsocketSuccess = false;
        this.emitReserved("error", err);
        this.onClose("transport error", err);
    }
    /**
     * Called upon transport close.
     *
     * @api private
     */
    onClose(reason, desc) {
        if ("opening" === this.readyState ||
            "open" === this.readyState ||
            "closing" === this.readyState) {
            debug('socket close with reason: "%s"', reason);
            // clear timers
            this.clearTimeoutFn(this.pingTimeoutTimer);
            // stop event from firing again for transport
            this.transport.removeAllListeners("close");
            // ensure transport won't stay open
            this.transport.close();
            // ignore further transport communication
            this.transport.removeAllListeners();
            if (typeof removeEventListener === "function") {
                removeEventListener("offline", this.offlineEventListener, false);
            }
            // set ready state
            this.readyState = "closed";
            // clear session id
            this.id = null;
            // emit close event
            this.emitReserved("close", reason, desc);
            // clean buffers after, so users can still
            // grab the buffers on `close` event
            this.writeBuffer = [];
            this.prevBufferLen = 0;
        }
    }
    /**
     * Filters upgrades, returning only those matching client transports.
     *
     * @param {Array} server upgrades
     * @api private
     *
     */
    filterUpgrades(upgrades) {
        const filteredUpgrades = [];
        let i = 0;
        const j = upgrades.length;
        for (; i < j; i++) {
            if (~this.transports.indexOf(upgrades[i]))
                filteredUpgrades.push(upgrades[i]);
        }
        return filteredUpgrades;
    }
}
exports.Socket = Socket;
Socket.protocol = engine_io_parser_1.protocol;
function clone(obj) {
    const o = {};
    for (let i in obj) {
        if (obj.hasOwnProperty(i)) {
            o[i] = obj[i];
        }
    }
    return o;
}

},{"./transports/index.js":50,"./util.js":56,"@socket.io/component-emitter":1,"debug":9,"engine.io-parser":15,"parseqs":33,"parseuri":34}],49:[function(require,module,exports){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Transport = void 0;
const engine_io_parser_1 = require("engine.io-parser");
const component_emitter_1 = require("@socket.io/component-emitter");
const util_js_1 = require("./util.js");
const debug_1 = __importDefault(require("debug")); // debug()
const debug = (0, debug_1.default)("engine.io-client:transport"); // debug()
class Transport extends component_emitter_1.Emitter {
    /**
     * Transport abstract constructor.
     *
     * @param {Object} options.
     * @api private
     */
    constructor(opts) {
        super();
        this.writable = false;
        (0, util_js_1.installTimerFunctions)(this, opts);
        this.opts = opts;
        this.query = opts.query;
        this.readyState = "";
        this.socket = opts.socket;
    }
    /**
     * Emits an error.
     *
     * @param {String} str
     * @return {Transport} for chaining
     * @api protected
     */
    onError(msg, desc) {
        const err = new Error(msg);
        // @ts-ignore
        err.type = "TransportError";
        // @ts-ignore
        err.description = desc;
        super.emit("error", err);
        return this;
    }
    /**
     * Opens the transport.
     *
     * @api public
     */
    open() {
        if ("closed" === this.readyState || "" === this.readyState) {
            this.readyState = "opening";
            this.doOpen();
        }
        return this;
    }
    /**
     * Closes the transport.
     *
     * @api public
     */
    close() {
        if ("opening" === this.readyState || "open" === this.readyState) {
            this.doClose();
            this.onClose();
        }
        return this;
    }
    /**
     * Sends multiple packets.
     *
     * @param {Array} packets
     * @api public
     */
    send(packets) {
        if ("open" === this.readyState) {
            this.write(packets);
        }
        else {
            // this might happen if the transport was silently closed in the beforeunload event handler
            debug("transport is not open, discarding packets");
        }
    }
    /**
     * Called upon open
     *
     * @api protected
     */
    onOpen() {
        this.readyState = "open";
        this.writable = true;
        super.emit("open");
    }
    /**
     * Called with data.
     *
     * @param {String} data
     * @api protected
     */
    onData(data) {
        const packet = (0, engine_io_parser_1.decodePacket)(data, this.socket.binaryType);
        this.onPacket(packet);
    }
    /**
     * Called with a decoded packet.
     *
     * @api protected
     */
    onPacket(packet) {
        super.emit("packet", packet);
    }
    /**
     * Called upon close.
     *
     * @api protected
     */
    onClose() {
        this.readyState = "closed";
        super.emit("close");
    }
}
exports.Transport = Transport;

},{"./util.js":56,"@socket.io/component-emitter":1,"debug":9,"engine.io-parser":15}],50:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.transports = void 0;
const polling_xhr_js_1 = require("./polling-xhr.js");
const websocket_js_1 = require("./websocket.js");
exports.transports = {
    websocket: websocket_js_1.WS,
    polling: polling_xhr_js_1.XHR
};

},{"./polling-xhr.js":51,"./websocket.js":54}],51:[function(require,module,exports){
"use strict";
/* global attachEvent */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Request = exports.XHR = void 0;
const xmlhttprequest_js_1 = __importDefault(require("./xmlhttprequest.js"));
const debug_1 = __importDefault(require("debug")); // debug()
const globalThis_js_1 = __importDefault(require("../globalThis.js"));
const util_js_1 = require("../util.js");
const component_emitter_1 = require("@socket.io/component-emitter");
const polling_js_1 = require("./polling.js");
const debug = (0, debug_1.default)("engine.io-client:polling-xhr"); // debug()
/**
 * Empty function
 */
function empty() { }
const hasXHR2 = (function () {
    const xhr = new xmlhttprequest_js_1.default({
        xdomain: false
    });
    return null != xhr.responseType;
})();
class XHR extends polling_js_1.Polling {
    /**
     * XHR Polling constructor.
     *
     * @param {Object} opts
     * @api public
     */
    constructor(opts) {
        super(opts);
        if (typeof location !== "undefined") {
            const isSSL = "https:" === location.protocol;
            let port = location.port;
            // some user agents have empty `location.port`
            if (!port) {
                port = isSSL ? "443" : "80";
            }
            this.xd =
                (typeof location !== "undefined" &&
                    opts.hostname !== location.hostname) ||
                    port !== opts.port;
            this.xs = opts.secure !== isSSL;
        }
        /**
         * XHR supports binary
         */
        const forceBase64 = opts && opts.forceBase64;
        this.supportsBinary = hasXHR2 && !forceBase64;
    }
    /**
     * Creates a request.
     *
     * @param {String} method
     * @api private
     */
    request(opts = {}) {
        Object.assign(opts, { xd: this.xd, xs: this.xs }, this.opts);
        return new Request(this.uri(), opts);
    }
    /**
     * Sends data.
     *
     * @param {String} data to send.
     * @param {Function} called upon flush.
     * @api private
     */
    doWrite(data, fn) {
        const req = this.request({
            method: "POST",
            data: data
        });
        req.on("success", fn);
        req.on("error", err => {
            this.onError("xhr post error", err);
        });
    }
    /**
     * Starts a poll cycle.
     *
     * @api private
     */
    doPoll() {
        debug("xhr poll");
        const req = this.request();
        req.on("data", this.onData.bind(this));
        req.on("error", err => {
            this.onError("xhr poll error", err);
        });
        this.pollXhr = req;
    }
}
exports.XHR = XHR;
class Request extends component_emitter_1.Emitter {
    /**
     * Request constructor
     *
     * @param {Object} options
     * @api public
     */
    constructor(uri, opts) {
        super();
        (0, util_js_1.installTimerFunctions)(this, opts);
        this.opts = opts;
        this.method = opts.method || "GET";
        this.uri = uri;
        this.async = false !== opts.async;
        this.data = undefined !== opts.data ? opts.data : null;
        this.create();
    }
    /**
     * Creates the XHR object and sends the request.
     *
     * @api private
     */
    create() {
        const opts = (0, util_js_1.pick)(this.opts, "agent", "pfx", "key", "passphrase", "cert", "ca", "ciphers", "rejectUnauthorized", "autoUnref");
        opts.xdomain = !!this.opts.xd;
        opts.xscheme = !!this.opts.xs;
        const xhr = (this.xhr = new xmlhttprequest_js_1.default(opts));
        try {
            debug("xhr open %s: %s", this.method, this.uri);
            xhr.open(this.method, this.uri, this.async);
            try {
                if (this.opts.extraHeaders) {
                    xhr.setDisableHeaderCheck && xhr.setDisableHeaderCheck(true);
                    for (let i in this.opts.extraHeaders) {
                        if (this.opts.extraHeaders.hasOwnProperty(i)) {
                            xhr.setRequestHeader(i, this.opts.extraHeaders[i]);
                        }
                    }
                }
            }
            catch (e) { }
            if ("POST" === this.method) {
                try {
                    xhr.setRequestHeader("Content-type", "text/plain;charset=UTF-8");
                }
                catch (e) { }
            }
            try {
                xhr.setRequestHeader("Accept", "*/*");
            }
            catch (e) { }
            // ie6 check
            if ("withCredentials" in xhr) {
                xhr.withCredentials = this.opts.withCredentials;
            }
            if (this.opts.requestTimeout) {
                xhr.timeout = this.opts.requestTimeout;
            }
            xhr.onreadystatechange = () => {
                if (4 !== xhr.readyState)
                    return;
                if (200 === xhr.status || 1223 === xhr.status) {
                    this.onLoad();
                }
                else {
                    // make sure the `error` event handler that's user-set
                    // does not throw in the same tick and gets caught here
                    this.setTimeoutFn(() => {
                        this.onError(typeof xhr.status === "number" ? xhr.status : 0);
                    }, 0);
                }
            };
            debug("xhr data %s", this.data);
            xhr.send(this.data);
        }
        catch (e) {
            // Need to defer since .create() is called directly from the constructor
            // and thus the 'error' event can only be only bound *after* this exception
            // occurs.  Therefore, also, we cannot throw here at all.
            this.setTimeoutFn(() => {
                this.onError(e);
            }, 0);
            return;
        }
        if (typeof document !== "undefined") {
            this.index = Request.requestsCount++;
            Request.requests[this.index] = this;
        }
    }
    /**
     * Called upon successful response.
     *
     * @api private
     */
    onSuccess() {
        this.emit("success");
        this.cleanup();
    }
    /**
     * Called if we have data.
     *
     * @api private
     */
    onData(data) {
        this.emit("data", data);
        this.onSuccess();
    }
    /**
     * Called upon error.
     *
     * @api private
     */
    onError(err) {
        this.emit("error", err);
        this.cleanup(true);
    }
    /**
     * Cleans up house.
     *
     * @api private
     */
    cleanup(fromError) {
        if ("undefined" === typeof this.xhr || null === this.xhr) {
            return;
        }
        this.xhr.onreadystatechange = empty;
        if (fromError) {
            try {
                this.xhr.abort();
            }
            catch (e) { }
        }
        if (typeof document !== "undefined") {
            delete Request.requests[this.index];
        }
        this.xhr = null;
    }
    /**
     * Called upon load.
     *
     * @api private
     */
    onLoad() {
        const data = this.xhr.responseText;
        if (data !== null) {
            this.onData(data);
        }
    }
    /**
     * Aborts the request.
     *
     * @api public
     */
    abort() {
        this.cleanup();
    }
}
exports.Request = Request;
Request.requestsCount = 0;
Request.requests = {};
/**
 * Aborts pending requests when unloading the window. This is needed to prevent
 * memory leaks (e.g. when using IE) and to ensure that no spurious error is
 * emitted.
 */
if (typeof document !== "undefined") {
    // @ts-ignore
    if (typeof attachEvent === "function") {
        // @ts-ignore
        attachEvent("onunload", unloadHandler);
    }
    else if (typeof addEventListener === "function") {
        const terminationEvent = "onpagehide" in globalThis_js_1.default ? "pagehide" : "unload";
        addEventListener(terminationEvent, unloadHandler, false);
    }
}
function unloadHandler() {
    for (let i in Request.requests) {
        if (Request.requests.hasOwnProperty(i)) {
            Request.requests[i].abort();
        }
    }
}

},{"../globalThis.js":46,"../util.js":56,"./polling.js":52,"./xmlhttprequest.js":55,"@socket.io/component-emitter":1,"debug":9}],52:[function(require,module,exports){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Polling = void 0;
const transport_js_1 = require("../transport.js");
const debug_1 = __importDefault(require("debug")); // debug()
const yeast_1 = __importDefault(require("yeast"));
const parseqs_1 = __importDefault(require("parseqs"));
const engine_io_parser_1 = require("engine.io-parser");
const debug = (0, debug_1.default)("engine.io-client:polling"); // debug()
class Polling extends transport_js_1.Transport {
    constructor() {
        super(...arguments);
        this.polling = false;
    }
    /**
     * Transport name.
     */
    get name() {
        return "polling";
    }
    /**
     * Opens the socket (triggers polling). We write a PING message to determine
     * when the transport is open.
     *
     * @api private
     */
    doOpen() {
        this.poll();
    }
    /**
     * Pauses polling.
     *
     * @param {Function} callback upon buffers are flushed and transport is paused
     * @api private
     */
    pause(onPause) {
        this.readyState = "pausing";
        const pause = () => {
            debug("paused");
            this.readyState = "paused";
            onPause();
        };
        if (this.polling || !this.writable) {
            let total = 0;
            if (this.polling) {
                debug("we are currently polling - waiting to pause");
                total++;
                this.once("pollComplete", function () {
                    debug("pre-pause polling complete");
                    --total || pause();
                });
            }
            if (!this.writable) {
                debug("we are currently writing - waiting to pause");
                total++;
                this.once("drain", function () {
                    debug("pre-pause writing complete");
                    --total || pause();
                });
            }
        }
        else {
            pause();
        }
    }
    /**
     * Starts polling cycle.
     *
     * @api public
     */
    poll() {
        debug("polling");
        this.polling = true;
        this.doPoll();
        this.emit("poll");
    }
    /**
     * Overloads onData to detect payloads.
     *
     * @api private
     */
    onData(data) {
        debug("polling got data %s", data);
        const callback = packet => {
            // if its the first message we consider the transport open
            if ("opening" === this.readyState && packet.type === "open") {
                this.onOpen();
            }
            // if its a close packet, we close the ongoing requests
            if ("close" === packet.type) {
                this.onClose();
                return false;
            }
            // otherwise bypass onData and handle the message
            this.onPacket(packet);
        };
        // decode payload
        (0, engine_io_parser_1.decodePayload)(data, this.socket.binaryType).forEach(callback);
        // if an event did not trigger closing
        if ("closed" !== this.readyState) {
            // if we got data we're not polling
            this.polling = false;
            this.emit("pollComplete");
            if ("open" === this.readyState) {
                this.poll();
            }
            else {
                debug('ignoring poll - transport state "%s"', this.readyState);
            }
        }
    }
    /**
     * For polling, send a close packet.
     *
     * @api private
     */
    doClose() {
        const close = () => {
            debug("writing close packet");
            this.write([{ type: "close" }]);
        };
        if ("open" === this.readyState) {
            debug("transport open - closing");
            close();
        }
        else {
            // in case we're trying to close while
            // handshaking is in progress (GH-164)
            debug("transport not open - deferring close");
            this.once("open", close);
        }
    }
    /**
     * Writes a packets payload.
     *
     * @param {Array} data packets
     * @param {Function} drain callback
     * @api private
     */
    write(packets) {
        this.writable = false;
        (0, engine_io_parser_1.encodePayload)(packets, data => {
            this.doWrite(data, () => {
                this.writable = true;
                this.emit("drain");
            });
        });
    }
    /**
     * Generates uri for connection.
     *
     * @api private
     */
    uri() {
        let query = this.query || {};
        const schema = this.opts.secure ? "https" : "http";
        let port = "";
        // cache busting is forced
        if (false !== this.opts.timestampRequests) {
            query[this.opts.timestampParam] = (0, yeast_1.default)();
        }
        if (!this.supportsBinary && !query.sid) {
            query.b64 = 1;
        }
        // avoid port if default for schema
        if (this.opts.port &&
            (("https" === schema && Number(this.opts.port) !== 443) ||
                ("http" === schema && Number(this.opts.port) !== 80))) {
            port = ":" + this.opts.port;
        }
        const encodedQuery = parseqs_1.default.encode(query);
        const ipv6 = this.opts.hostname.indexOf(":") !== -1;
        return (schema +
            "://" +
            (ipv6 ? "[" + this.opts.hostname + "]" : this.opts.hostname) +
            port +
            this.opts.path +
            (encodedQuery.length ? "?" + encodedQuery : ""));
    }
}
exports.Polling = Polling;

},{"../transport.js":49,"debug":9,"engine.io-parser":15,"parseqs":33,"yeast":75}],53:[function(require,module,exports){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultBinaryType = exports.usingBrowserWebSocket = exports.WebSocket = exports.nextTick = void 0;
const globalThis_js_1 = __importDefault(require("../globalThis.js"));
exports.nextTick = (() => {
    const isPromiseAvailable = typeof Promise === "function" && typeof Promise.resolve === "function";
    if (isPromiseAvailable) {
        return cb => Promise.resolve().then(cb);
    }
    else {
        return (cb, setTimeoutFn) => setTimeoutFn(cb, 0);
    }
})();
exports.WebSocket = globalThis_js_1.default.WebSocket || globalThis_js_1.default.MozWebSocket;
exports.usingBrowserWebSocket = true;
exports.defaultBinaryType = "arraybuffer";

},{"../globalThis.js":46}],54:[function(require,module,exports){
(function (Buffer){(function (){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WS = void 0;
const transport_js_1 = require("../transport.js");
const parseqs_1 = __importDefault(require("parseqs"));
const yeast_1 = __importDefault(require("yeast"));
const util_js_1 = require("../util.js");
const websocket_constructor_js_1 = require("./websocket-constructor.js");
const debug_1 = __importDefault(require("debug")); // debug()
const engine_io_parser_1 = require("engine.io-parser");
const debug = (0, debug_1.default)("engine.io-client:websocket"); // debug()
// detect ReactNative environment
const isReactNative = typeof navigator !== "undefined" &&
    typeof navigator.product === "string" &&
    navigator.product.toLowerCase() === "reactnative";
class WS extends transport_js_1.Transport {
    /**
     * WebSocket transport constructor.
     *
     * @api {Object} connection options
     * @api public
     */
    constructor(opts) {
        super(opts);
        this.supportsBinary = !opts.forceBase64;
    }
    /**
     * Transport name.
     *
     * @api public
     */
    get name() {
        return "websocket";
    }
    /**
     * Opens socket.
     *
     * @api private
     */
    doOpen() {
        if (!this.check()) {
            // let probe timeout
            return;
        }
        const uri = this.uri();
        const protocols = this.opts.protocols;
        // React Native only supports the 'headers' option, and will print a warning if anything else is passed
        const opts = isReactNative
            ? {}
            : (0, util_js_1.pick)(this.opts, "agent", "perMessageDeflate", "pfx", "key", "passphrase", "cert", "ca", "ciphers", "rejectUnauthorized", "localAddress", "protocolVersion", "origin", "maxPayload", "family", "checkServerIdentity");
        if (this.opts.extraHeaders) {
            opts.headers = this.opts.extraHeaders;
        }
        try {
            this.ws =
                websocket_constructor_js_1.usingBrowserWebSocket && !isReactNative
                    ? protocols
                        ? new websocket_constructor_js_1.WebSocket(uri, protocols)
                        : new websocket_constructor_js_1.WebSocket(uri)
                    : new websocket_constructor_js_1.WebSocket(uri, protocols, opts);
        }
        catch (err) {
            return this.emit("error", err);
        }
        this.ws.binaryType = this.socket.binaryType || websocket_constructor_js_1.defaultBinaryType;
        this.addEventListeners();
    }
    /**
     * Adds event listeners to the socket
     *
     * @api private
     */
    addEventListeners() {
        this.ws.onopen = () => {
            if (this.opts.autoUnref) {
                this.ws._socket.unref();
            }
            this.onOpen();
        };
        this.ws.onclose = this.onClose.bind(this);
        this.ws.onmessage = ev => this.onData(ev.data);
        this.ws.onerror = e => this.onError("websocket error", e);
    }
    /**
     * Writes data to socket.
     *
     * @param {Array} array of packets.
     * @api private
     */
    write(packets) {
        this.writable = false;
        // encodePacket efficient as it uses WS framing
        // no need for encodePayload
        for (let i = 0; i < packets.length; i++) {
            const packet = packets[i];
            const lastPacket = i === packets.length - 1;
            (0, engine_io_parser_1.encodePacket)(packet, this.supportsBinary, data => {
                // always create a new object (GH-437)
                const opts = {};
                if (!websocket_constructor_js_1.usingBrowserWebSocket) {
                    if (packet.options) {
                        opts.compress = packet.options.compress;
                    }
                    if (this.opts.perMessageDeflate) {
                        const len = "string" === typeof data ? Buffer.byteLength(data) : data.length;
                        if (len < this.opts.perMessageDeflate.threshold) {
                            opts.compress = false;
                        }
                    }
                }
                // Sometimes the websocket has already been closed but the browser didn't
                // have a chance of informing us about it yet, in that case send will
                // throw an error
                try {
                    if (websocket_constructor_js_1.usingBrowserWebSocket) {
                        // TypeError is thrown when passing the second argument on Safari
                        this.ws.send(data);
                    }
                    else {
                        this.ws.send(data, opts);
                    }
                }
                catch (e) {
                    debug("websocket closed before onclose event");
                }
                if (lastPacket) {
                    // fake drain
                    // defer to next tick to allow Socket to clear writeBuffer
                    (0, websocket_constructor_js_1.nextTick)(() => {
                        this.writable = true;
                        this.emit("drain");
                    }, this.setTimeoutFn);
                }
            });
        }
    }
    /**
     * Closes socket.
     *
     * @api private
     */
    doClose() {
        if (typeof this.ws !== "undefined") {
            this.ws.close();
            this.ws = null;
        }
    }
    /**
     * Generates uri for connection.
     *
     * @api private
     */
    uri() {
        let query = this.query || {};
        const schema = this.opts.secure ? "wss" : "ws";
        let port = "";
        // avoid port if default for schema
        if (this.opts.port &&
            (("wss" === schema && Number(this.opts.port) !== 443) ||
                ("ws" === schema && Number(this.opts.port) !== 80))) {
            port = ":" + this.opts.port;
        }
        // append timestamp to URI
        if (this.opts.timestampRequests) {
            query[this.opts.timestampParam] = (0, yeast_1.default)();
        }
        // communicate binary support capabilities
        if (!this.supportsBinary) {
            query.b64 = 1;
        }
        const encodedQuery = parseqs_1.default.encode(query);
        const ipv6 = this.opts.hostname.indexOf(":") !== -1;
        return (schema +
            "://" +
            (ipv6 ? "[" + this.opts.hostname + "]" : this.opts.hostname) +
            port +
            this.opts.path +
            (encodedQuery.length ? "?" + encodedQuery : ""));
    }
    /**
     * Feature detection for WebSocket.
     *
     * @return {Boolean} whether this transport is available.
     * @api public
     */
    check() {
        return (!!websocket_constructor_js_1.WebSocket &&
            !("__initialize" in websocket_constructor_js_1.WebSocket && this.name === WS.prototype.name));
    }
}
exports.WS = WS;

}).call(this)}).call(this,require("buffer").Buffer)

},{"../transport.js":49,"../util.js":56,"./websocket-constructor.js":53,"buffer":6,"debug":9,"engine.io-parser":15,"parseqs":33,"yeast":75}],55:[function(require,module,exports){
"use strict";
// browser shim for xmlhttprequest module
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const has_cors_1 = __importDefault(require("has-cors"));
const globalThis_js_1 = __importDefault(require("../globalThis.js"));
function default_1(opts) {
    const xdomain = opts.xdomain;
    // XMLHttpRequest can be disabled on IE
    try {
        if ("undefined" !== typeof XMLHttpRequest && (!xdomain || has_cors_1.default)) {
            return new XMLHttpRequest();
        }
    }
    catch (e) { }
    if (!xdomain) {
        try {
            return new globalThis_js_1.default[["Active"].concat("Object").join("X")]("Microsoft.XMLHTTP");
        }
        catch (e) { }
    }
}
exports.default = default_1;

},{"../globalThis.js":46,"has-cors":19}],56:[function(require,module,exports){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.installTimerFunctions = exports.pick = void 0;
const globalThis_js_1 = __importDefault(require("./globalThis.js"));
function pick(obj, ...attr) {
    return attr.reduce((acc, k) => {
        if (obj.hasOwnProperty(k)) {
            acc[k] = obj[k];
        }
        return acc;
    }, {});
}
exports.pick = pick;
// Keep a reference to the real timeout functions so they can be used when overridden
const NATIVE_SET_TIMEOUT = setTimeout;
const NATIVE_CLEAR_TIMEOUT = clearTimeout;
function installTimerFunctions(obj, opts) {
    if (opts.useNativeTimers) {
        obj.setTimeoutFn = NATIVE_SET_TIMEOUT.bind(globalThis_js_1.default);
        obj.clearTimeoutFn = NATIVE_CLEAR_TIMEOUT.bind(globalThis_js_1.default);
    }
    else {
        obj.setTimeoutFn = setTimeout.bind(globalThis_js_1.default);
        obj.clearTimeoutFn = clearTimeout.bind(globalThis_js_1.default);
    }
}
exports.installTimerFunctions = installTimerFunctions;

},{"./globalThis.js":46}],57:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.reconstructPacket = exports.deconstructPacket = void 0;
const is_binary_js_1 = require("./is-binary.js");
/**
 * Replaces every Buffer | ArrayBuffer | Blob | File in packet with a numbered placeholder.
 *
 * @param {Object} packet - socket.io event packet
 * @return {Object} with deconstructed packet and list of buffers
 * @public
 */
function deconstructPacket(packet) {
    const buffers = [];
    const packetData = packet.data;
    const pack = packet;
    pack.data = _deconstructPacket(packetData, buffers);
    pack.attachments = buffers.length; // number of binary 'attachments'
    return { packet: pack, buffers: buffers };
}
exports.deconstructPacket = deconstructPacket;
function _deconstructPacket(data, buffers) {
    if (!data)
        return data;
    if (is_binary_js_1.isBinary(data)) {
        const placeholder = { _placeholder: true, num: buffers.length };
        buffers.push(data);
        return placeholder;
    }
    else if (Array.isArray(data)) {
        const newData = new Array(data.length);
        for (let i = 0; i < data.length; i++) {
            newData[i] = _deconstructPacket(data[i], buffers);
        }
        return newData;
    }
    else if (typeof data === "object" && !(data instanceof Date)) {
        const newData = {};
        for (const key in data) {
            if (data.hasOwnProperty(key)) {
                newData[key] = _deconstructPacket(data[key], buffers);
            }
        }
        return newData;
    }
    return data;
}
/**
 * Reconstructs a binary packet from its placeholder packet and buffers
 *
 * @param {Object} packet - event packet with placeholders
 * @param {Array} buffers - binary buffers to put in placeholder positions
 * @return {Object} reconstructed packet
 * @public
 */
function reconstructPacket(packet, buffers) {
    packet.data = _reconstructPacket(packet.data, buffers);
    packet.attachments = undefined; // no longer useful
    return packet;
}
exports.reconstructPacket = reconstructPacket;
function _reconstructPacket(data, buffers) {
    if (!data)
        return data;
    if (data && data._placeholder) {
        return buffers[data.num]; // appropriate buffer (should be natural order anyway)
    }
    else if (Array.isArray(data)) {
        for (let i = 0; i < data.length; i++) {
            data[i] = _reconstructPacket(data[i], buffers);
        }
    }
    else if (typeof data === "object") {
        for (const key in data) {
            if (data.hasOwnProperty(key)) {
                data[key] = _reconstructPacket(data[key], buffers);
            }
        }
    }
    return data;
}

},{"./is-binary.js":59}],58:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Decoder = exports.Encoder = exports.PacketType = exports.protocol = void 0;
const component_emitter_1 = require("@socket.io/component-emitter");
const binary_js_1 = require("./binary.js");
const is_binary_js_1 = require("./is-binary.js");
const debug_1 = require("debug"); // debug()
const debug = debug_1.default("socket.io-parser"); // debug()
/**
 * Protocol version.
 *
 * @public
 */
exports.protocol = 5;
var PacketType;
(function (PacketType) {
    PacketType[PacketType["CONNECT"] = 0] = "CONNECT";
    PacketType[PacketType["DISCONNECT"] = 1] = "DISCONNECT";
    PacketType[PacketType["EVENT"] = 2] = "EVENT";
    PacketType[PacketType["ACK"] = 3] = "ACK";
    PacketType[PacketType["CONNECT_ERROR"] = 4] = "CONNECT_ERROR";
    PacketType[PacketType["BINARY_EVENT"] = 5] = "BINARY_EVENT";
    PacketType[PacketType["BINARY_ACK"] = 6] = "BINARY_ACK";
})(PacketType = exports.PacketType || (exports.PacketType = {}));
/**
 * A socket.io Encoder instance
 */
class Encoder {
    /**
     * Encode a packet as a single string if non-binary, or as a
     * buffer sequence, depending on packet type.
     *
     * @param {Object} obj - packet object
     */
    encode(obj) {
        debug("encoding packet %j", obj);
        if (obj.type === PacketType.EVENT || obj.type === PacketType.ACK) {
            if (is_binary_js_1.hasBinary(obj)) {
                obj.type =
                    obj.type === PacketType.EVENT
                        ? PacketType.BINARY_EVENT
                        : PacketType.BINARY_ACK;
                return this.encodeAsBinary(obj);
            }
        }
        return [this.encodeAsString(obj)];
    }
    /**
     * Encode packet as string.
     */
    encodeAsString(obj) {
        // first is type
        let str = "" + obj.type;
        // attachments if we have them
        if (obj.type === PacketType.BINARY_EVENT ||
            obj.type === PacketType.BINARY_ACK) {
            str += obj.attachments + "-";
        }
        // if we have a namespace other than `/`
        // we append it followed by a comma `,`
        if (obj.nsp && "/" !== obj.nsp) {
            str += obj.nsp + ",";
        }
        // immediately followed by the id
        if (null != obj.id) {
            str += obj.id;
        }
        // json data
        if (null != obj.data) {
            str += JSON.stringify(obj.data);
        }
        debug("encoded %j as %s", obj, str);
        return str;
    }
    /**
     * Encode packet as 'buffer sequence' by removing blobs, and
     * deconstructing packet into object with placeholders and
     * a list of buffers.
     */
    encodeAsBinary(obj) {
        const deconstruction = binary_js_1.deconstructPacket(obj);
        const pack = this.encodeAsString(deconstruction.packet);
        const buffers = deconstruction.buffers;
        buffers.unshift(pack); // add packet info to beginning of data list
        return buffers; // write all the buffers
    }
}
exports.Encoder = Encoder;
/**
 * A socket.io Decoder instance
 *
 * @return {Object} decoder
 */
class Decoder extends component_emitter_1.Emitter {
    constructor() {
        super();
    }
    /**
     * Decodes an encoded packet string into packet JSON.
     *
     * @param {String} obj - encoded packet
     */
    add(obj) {
        let packet;
        if (typeof obj === "string") {
            packet = this.decodeString(obj);
            if (packet.type === PacketType.BINARY_EVENT ||
                packet.type === PacketType.BINARY_ACK) {
                // binary packet's json
                this.reconstructor = new BinaryReconstructor(packet);
                // no attachments, labeled binary but no binary data to follow
                if (packet.attachments === 0) {
                    super.emitReserved("decoded", packet);
                }
            }
            else {
                // non-binary full packet
                super.emitReserved("decoded", packet);
            }
        }
        else if (is_binary_js_1.isBinary(obj) || obj.base64) {
            // raw binary data
            if (!this.reconstructor) {
                throw new Error("got binary data when not reconstructing a packet");
            }
            else {
                packet = this.reconstructor.takeBinaryData(obj);
                if (packet) {
                    // received final buffer
                    this.reconstructor = null;
                    super.emitReserved("decoded", packet);
                }
            }
        }
        else {
            throw new Error("Unknown type: " + obj);
        }
    }
    /**
     * Decode a packet String (JSON data)
     *
     * @param {String} str
     * @return {Object} packet
     */
    decodeString(str) {
        let i = 0;
        // look up type
        const p = {
            type: Number(str.charAt(0)),
        };
        if (PacketType[p.type] === undefined) {
            throw new Error("unknown packet type " + p.type);
        }
        // look up attachments if type binary
        if (p.type === PacketType.BINARY_EVENT ||
            p.type === PacketType.BINARY_ACK) {
            const start = i + 1;
            while (str.charAt(++i) !== "-" && i != str.length) { }
            const buf = str.substring(start, i);
            if (buf != Number(buf) || str.charAt(i) !== "-") {
                throw new Error("Illegal attachments");
            }
            p.attachments = Number(buf);
        }
        // look up namespace (if any)
        if ("/" === str.charAt(i + 1)) {
            const start = i + 1;
            while (++i) {
                const c = str.charAt(i);
                if ("," === c)
                    break;
                if (i === str.length)
                    break;
            }
            p.nsp = str.substring(start, i);
        }
        else {
            p.nsp = "/";
        }
        // look up id
        const next = str.charAt(i + 1);
        if ("" !== next && Number(next) == next) {
            const start = i + 1;
            while (++i) {
                const c = str.charAt(i);
                if (null == c || Number(c) != c) {
                    --i;
                    break;
                }
                if (i === str.length)
                    break;
            }
            p.id = Number(str.substring(start, i + 1));
        }
        // look up json data
        if (str.charAt(++i)) {
            const payload = tryParse(str.substr(i));
            if (Decoder.isPayloadValid(p.type, payload)) {
                p.data = payload;
            }
            else {
                throw new Error("invalid payload");
            }
        }
        debug("decoded %s as %j", str, p);
        return p;
    }
    static isPayloadValid(type, payload) {
        switch (type) {
            case PacketType.CONNECT:
                return typeof payload === "object";
            case PacketType.DISCONNECT:
                return payload === undefined;
            case PacketType.CONNECT_ERROR:
                return typeof payload === "string" || typeof payload === "object";
            case PacketType.EVENT:
            case PacketType.BINARY_EVENT:
                return Array.isArray(payload) && payload.length > 0;
            case PacketType.ACK:
            case PacketType.BINARY_ACK:
                return Array.isArray(payload);
        }
    }
    /**
     * Deallocates a parser's resources
     */
    destroy() {
        if (this.reconstructor) {
            this.reconstructor.finishedReconstruction();
        }
    }
}
exports.Decoder = Decoder;
function tryParse(str) {
    try {
        return JSON.parse(str);
    }
    catch (e) {
        return false;
    }
}
/**
 * A manager of a binary event's 'buffer sequence'. Should
 * be constructed whenever a packet of type BINARY_EVENT is
 * decoded.
 *
 * @param {Object} packet
 * @return {BinaryReconstructor} initialized reconstructor
 */
class BinaryReconstructor {
    constructor(packet) {
        this.packet = packet;
        this.buffers = [];
        this.reconPack = packet;
    }
    /**
     * Method to be called when binary data received from connection
     * after a BINARY_EVENT packet.
     *
     * @param {Buffer | ArrayBuffer} binData - the raw binary data received
     * @return {null | Object} returns null if more binary data is expected or
     *   a reconstructed packet object if all buffers have been received.
     */
    takeBinaryData(binData) {
        this.buffers.push(binData);
        if (this.buffers.length === this.reconPack.attachments) {
            // done with buffer list
            const packet = binary_js_1.reconstructPacket(this.reconPack, this.buffers);
            this.finishedReconstruction();
            return packet;
        }
        return null;
    }
    /**
     * Cleans up binary packet reconstruction variables.
     */
    finishedReconstruction() {
        this.reconPack = null;
        this.buffers = [];
    }
}

},{"./binary.js":57,"./is-binary.js":59,"@socket.io/component-emitter":1,"debug":9}],59:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.hasBinary = exports.isBinary = void 0;
const withNativeArrayBuffer = typeof ArrayBuffer === "function";
const isView = (obj) => {
    return typeof ArrayBuffer.isView === "function"
        ? ArrayBuffer.isView(obj)
        : obj.buffer instanceof ArrayBuffer;
};
const toString = Object.prototype.toString;
const withNativeBlob = typeof Blob === "function" ||
    (typeof Blob !== "undefined" &&
        toString.call(Blob) === "[object BlobConstructor]");
const withNativeFile = typeof File === "function" ||
    (typeof File !== "undefined" &&
        toString.call(File) === "[object FileConstructor]");
/**
 * Returns true if obj is a Buffer, an ArrayBuffer, a Blob or a File.
 *
 * @private
 */
function isBinary(obj) {
    return ((withNativeArrayBuffer && (obj instanceof ArrayBuffer || isView(obj))) ||
        (withNativeBlob && obj instanceof Blob) ||
        (withNativeFile && obj instanceof File));
}
exports.isBinary = isBinary;
function hasBinary(obj, toJSON) {
    if (!obj || typeof obj !== "object") {
        return false;
    }
    if (Array.isArray(obj)) {
        for (let i = 0, l = obj.length; i < l; i++) {
            if (hasBinary(obj[i])) {
                return true;
            }
        }
        return false;
    }
    if (isBinary(obj)) {
        return true;
    }
    if (obj.toJSON &&
        typeof obj.toJSON === "function" &&
        arguments.length === 1) {
        return hasBinary(obj.toJSON(), true);
    }
    for (const key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key) && hasBinary(obj[key])) {
            return true;
        }
    }
    return false;
}
exports.hasBinary = hasBinary;

},{}],60:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _isReactNative = _interopRequireDefault(require("./isReactNative"));

var _uriToBlob = _interopRequireDefault(require("./uriToBlob"));

var _isCordova = _interopRequireDefault(require("./isCordova"));

var _readAsByteArray = _interopRequireDefault(require("./readAsByteArray"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

var FileSource = /*#__PURE__*/function () {
  // Make this.size a method
  function FileSource(file) {
    _classCallCheck(this, FileSource);

    this._file = file;
    this.size = file.size;
  }

  _createClass(FileSource, [{
    key: "slice",
    value: function slice(start, end) {
      // In Apache Cordova applications, a File must be resolved using
      // FileReader instances, see
      // https://cordova.apache.org/docs/en/8.x/reference/cordova-plugin-file/index.html#read-a-file
      if ((0, _isCordova.default)()) {
        return (0, _readAsByteArray.default)(this._file.slice(start, end));
      }

      var value = this._file.slice(start, end);

      return Promise.resolve({
        value: value
      });
    }
  }, {
    key: "close",
    value: function close() {// Nothing to do here since we don't need to release any resources.
    }
  }]);

  return FileSource;
}();

var StreamSource = /*#__PURE__*/function () {
  function StreamSource(reader, chunkSize) {
    _classCallCheck(this, StreamSource);

    this._chunkSize = chunkSize;
    this._buffer = undefined;
    this._bufferOffset = 0;
    this._reader = reader;
    this._done = false;
  }

  _createClass(StreamSource, [{
    key: "slice",
    value: function slice(start, end) {
      if (start < this._bufferOffset) {
        return Promise.reject(new Error("Requested data is before the reader's current offset"));
      }

      return this._readUntilEnoughDataOrDone(start, end);
    }
  }, {
    key: "_readUntilEnoughDataOrDone",
    value: function _readUntilEnoughDataOrDone(start, end) {
      var _this = this;

      var hasEnoughData = end <= this._bufferOffset + len(this._buffer);

      if (this._done || hasEnoughData) {
        var value = this._getDataFromBuffer(start, end);

        var done = value == null ? this._done : false;
        return Promise.resolve({
          value: value,
          done: done
        });
      }

      return this._reader.read().then(function (_ref) {
        var value = _ref.value,
            done = _ref.done;

        if (done) {
          _this._done = true;
        } else if (_this._buffer === undefined) {
          _this._buffer = value;
        } else {
          _this._buffer = concat(_this._buffer, value);
        }

        return _this._readUntilEnoughDataOrDone(start, end);
      });
    }
  }, {
    key: "_getDataFromBuffer",
    value: function _getDataFromBuffer(start, end) {
      // Remove data from buffer before `start`.
      // Data might be reread from the buffer if an upload fails, so we can only
      // safely delete data when it comes *before* what is currently being read.
      if (start > this._bufferOffset) {
        this._buffer = this._buffer.slice(start - this._bufferOffset);
        this._bufferOffset = start;
      } // If the buffer is empty after removing old data, all data has been read.


      var hasAllDataBeenRead = len(this._buffer) === 0;

      if (this._done && hasAllDataBeenRead) {
        return null;
      } // We already removed data before `start`, so we just return the first
      // chunk from the buffer.


      return this._buffer.slice(0, end - start);
    }
  }, {
    key: "close",
    value: function close() {
      if (this._reader.cancel) {
        this._reader.cancel();
      }
    }
  }]);

  return StreamSource;
}();

function len(blobOrArray) {
  if (blobOrArray === undefined) return 0;
  if (blobOrArray.size !== undefined) return blobOrArray.size;
  return blobOrArray.length;
}
/*
  Typed arrays and blobs don't have a concat method.
  This function helps StreamSource accumulate data to reach chunkSize.
*/


function concat(a, b) {
  if (a.concat) {
    // Is `a` an Array?
    return a.concat(b);
  }

  if (a instanceof Blob) {
    return new Blob([a, b], {
      type: a.type
    });
  }

  if (a.set) {
    // Is `a` a typed array?
    var c = new a.constructor(a.length + b.length);
    c.set(a);
    c.set(b, a.length);
    return c;
  }

  throw new Error('Unknown data type');
}

var FileReader = /*#__PURE__*/function () {
  function FileReader() {
    _classCallCheck(this, FileReader);
  }

  _createClass(FileReader, [{
    key: "openFile",
    value: function openFile(input, chunkSize) {
      // In React Native, when user selects a file, instead of a File or Blob,
      // you usually get a file object {} with a uri property that contains
      // a local path to the file. We use XMLHttpRequest to fetch
      // the file blob, before uploading with tus.
      if ((0, _isReactNative.default)() && input && typeof input.uri !== 'undefined') {
        return (0, _uriToBlob.default)(input.uri).then(function (blob) {
          return new FileSource(blob);
        })["catch"](function (err) {
          throw new Error("tus: cannot fetch `file.uri` as Blob, make sure the uri is correct and accessible. ".concat(err));
        });
      } // Since we emulate the Blob type in our tests (not all target browsers
      // support it), we cannot use `instanceof` for testing whether the input value
      // can be handled. Instead, we simply check is the slice() function and the
      // size property are available.


      if (typeof input.slice === 'function' && typeof input.size !== 'undefined') {
        return Promise.resolve(new FileSource(input));
      }

      if (typeof input.read === 'function') {
        chunkSize = +chunkSize;

        if (!isFinite(chunkSize)) {
          return Promise.reject(new Error('cannot create source for stream without a finite value for the `chunkSize` option'));
        }

        return Promise.resolve(new StreamSource(input, chunkSize));
      }

      return Promise.reject(new Error('source object may only be an instance of File, Blob, or Reader in this environment'));
    }
  }]);

  return FileReader;
}();

exports.default = FileReader;
},{"./isCordova":64,"./isReactNative":65,"./readAsByteArray":66,"./uriToBlob":67}],61:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = fingerprint;

var _isReactNative = _interopRequireDefault(require("./isReactNative"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// TODO: Differenciate between input types

/**
 * Generate a fingerprint for a file which will be used the store the endpoint
 *
 * @param {File} file
 * @param {Object} options
 * @param {Function} callback
 */
function fingerprint(file, options) {
  if ((0, _isReactNative.default)()) {
    return Promise.resolve(reactNativeFingerprint(file, options));
  }

  return Promise.resolve(['tus-br', file.name, file.type, file.size, file.lastModified, options.endpoint].join('-'));
}

function reactNativeFingerprint(file, options) {
  var exifHash = file.exif ? hashCode(JSON.stringify(file.exif)) : 'noexif';
  return ['tus-rn', file.name || 'noname', file.size || 'nosize', exifHash, options.endpoint].join('/');
}

function hashCode(str) {
  // from https://stackoverflow.com/a/8831937/151666
  var hash = 0;

  if (str.length === 0) {
    return hash;
  }

  for (var i = 0; i < str.length; i++) {
    var _char = str.charCodeAt(i);

    hash = (hash << 5) - hash + _char;
    hash &= hash; // Convert to 32bit integer
  }

  return hash;
}
},{"./isReactNative":65}],62:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}
/* global window */


var XHRHttpStack = /*#__PURE__*/function () {
  function XHRHttpStack() {
    _classCallCheck(this, XHRHttpStack);
  }

  _createClass(XHRHttpStack, [{
    key: "createRequest",
    value: function createRequest(method, url) {
      return new Request(method, url);
    }
  }, {
    key: "getName",
    value: function getName() {
      return 'XHRHttpStack';
    }
  }]);

  return XHRHttpStack;
}();

exports.default = XHRHttpStack;

var Request = /*#__PURE__*/function () {
  function Request(method, url) {
    _classCallCheck(this, Request);

    this._xhr = new XMLHttpRequest();

    this._xhr.open(method, url, true);

    this._method = method;
    this._url = url;
    this._headers = {};
  }

  _createClass(Request, [{
    key: "getMethod",
    value: function getMethod() {
      return this._method;
    }
  }, {
    key: "getURL",
    value: function getURL() {
      return this._url;
    }
  }, {
    key: "setHeader",
    value: function setHeader(header, value) {
      this._xhr.setRequestHeader(header, value);

      this._headers[header] = value;
    }
  }, {
    key: "getHeader",
    value: function getHeader(header) {
      return this._headers[header];
    }
  }, {
    key: "setProgressHandler",
    value: function setProgressHandler(progressHandler) {
      // Test support for progress events before attaching an event listener
      if (!('upload' in this._xhr)) {
        return;
      }

      this._xhr.upload.onprogress = function (e) {
        if (!e.lengthComputable) {
          return;
        }

        progressHandler(e.loaded);
      };
    }
  }, {
    key: "send",
    value: function send() {
      var _this = this;

      var body = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      return new Promise(function (resolve, reject) {
        _this._xhr.onload = function () {
          resolve(new Response(_this._xhr));
        };

        _this._xhr.onerror = function (err) {
          reject(err);
        };

        _this._xhr.send(body);
      });
    }
  }, {
    key: "abort",
    value: function abort() {
      this._xhr.abort();

      return Promise.resolve();
    }
  }, {
    key: "getUnderlyingObject",
    value: function getUnderlyingObject() {
      return this._xhr;
    }
  }]);

  return Request;
}();

var Response = /*#__PURE__*/function () {
  function Response(xhr) {
    _classCallCheck(this, Response);

    this._xhr = xhr;
  }

  _createClass(Response, [{
    key: "getStatus",
    value: function getStatus() {
      return this._xhr.status;
    }
  }, {
    key: "getHeader",
    value: function getHeader(header) {
      return this._xhr.getResponseHeader(header);
    }
  }, {
    key: "getBody",
    value: function getBody() {
      return this._xhr.responseText;
    }
  }, {
    key: "getUnderlyingObject",
    value: function getUnderlyingObject() {
      return this._xhr;
    }
  }]);

  return Response;
}();
},{}],63:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "enableDebugLog", {
  enumerable: true,
  get: function () {
    return _logger.enableDebugLog;
  }
});
Object.defineProperty(exports, "canStoreURLs", {
  enumerable: true,
  get: function () {
    return _urlStorage.canStoreURLs;
  }
});
Object.defineProperty(exports, "HttpStack", {
  enumerable: true,
  get: function () {
    return _httpStack.default;
  }
});
exports.isSupported = exports.defaultOptions = exports.Upload = void 0;

var _upload = _interopRequireDefault(require("../upload"));

var _noopUrlStorage = _interopRequireDefault(require("../noopUrlStorage"));

var _logger = require("../logger");

var _urlStorage = require("./urlStorage");

var _httpStack = _interopRequireDefault(require("./httpStack"));

var _fileReader = _interopRequireDefault(require("./fileReader"));

var _fingerprint = _interopRequireDefault(require("./fingerprint"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _createSuper(Derived) {
  return function () {
    var Super = _getPrototypeOf(Derived),
        result;

    if (_isNativeReflectConstruct()) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}
/* global window */


var defaultOptions = _objectSpread({}, _upload.default.defaultOptions, {
  httpStack: new _httpStack.default(),
  fileReader: new _fileReader.default(),
  urlStorage: _urlStorage.canStoreURLs ? new _urlStorage.WebStorageUrlStorage() : new _noopUrlStorage.default(),
  fingerprint: _fingerprint.default
});

exports.defaultOptions = defaultOptions;

var Upload = /*#__PURE__*/function (_BaseUpload) {
  _inherits(Upload, _BaseUpload);

  var _super = _createSuper(Upload);

  function Upload() {
    var file = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Upload);

    options = _objectSpread({}, defaultOptions, {}, options);
    return _super.call(this, file, options);
  }

  _createClass(Upload, null, [{
    key: "terminate",
    value: function terminate(url, options, cb) {
      options = _objectSpread({}, defaultOptions, {}, options);
      return _upload.default.terminate(url, options, cb);
    }
  }]);

  return Upload;
}(_upload.default);

exports.Upload = Upload;
var _window = window,
    XMLHttpRequest = _window.XMLHttpRequest,
    Blob = _window.Blob;
var isSupported = XMLHttpRequest && Blob && typeof Blob.prototype.slice === 'function';
exports.isSupported = isSupported;
},{"../logger":70,"../noopUrlStorage":71,"../upload":72,"./fileReader":60,"./fingerprint":61,"./httpStack":62,"./urlStorage":68}],64:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var isCordova = function isCordova() {
  return typeof window != 'undefined' && (typeof window.PhoneGap != 'undefined' || typeof window.Cordova != 'undefined' || typeof window.cordova != 'undefined');
};

var _default = isCordova;
exports.default = _default;
},{}],65:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var isReactNative = function isReactNative() {
  return typeof navigator !== 'undefined' && typeof navigator.product === 'string' && navigator.product.toLowerCase() === 'reactnative';
};

var _default = isReactNative;
exports.default = _default;
},{}],66:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = readAsByteArray;

/**
 * readAsByteArray converts a File object to a Uint8Array.
 * This function is only used on the Apache Cordova platform.
 * See https://cordova.apache.org/docs/en/latest/reference/cordova-plugin-file/index.html#read-a-file
 */
function readAsByteArray(chunk) {
  return new Promise(function (resolve, reject) {
    var reader = new FileReader();

    reader.onload = function () {
      var value = new Uint8Array(reader.result);
      resolve({
        value: value
      });
    };

    reader.onerror = function (err) {
      reject(err);
    };

    reader.readAsArrayBuffer(chunk);
  });
}
},{}],67:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = uriToBlob;

/**
 * uriToBlob resolves a URI to a Blob object. This is used for
 * React Native to retrieve a file (identified by a file://
 * URI) as a blob.
 */
function uriToBlob(uri) {
  return new Promise(function (resolve, reject) {
    var xhr = new XMLHttpRequest();
    xhr.responseType = 'blob';

    xhr.onload = function () {
      var blob = xhr.response;
      resolve(blob);
    };

    xhr.onerror = function (err) {
      reject(err);
    };

    xhr.open('GET', uri);
    xhr.send();
  });
}
},{}],68:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WebStorageUrlStorage = exports.canStoreURLs = void 0;

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}
/* global window, localStorage */


var hasStorage = false;

try {
  hasStorage = 'localStorage' in window; // Attempt to store and read entries from the local storage to detect Private
  // Mode on Safari on iOS (see #49)

  var key = 'tusSupport';
  localStorage.setItem(key, localStorage.getItem(key));
} catch (e) {
  // If we try to access localStorage inside a sandboxed iframe, a SecurityError
  // is thrown. When in private mode on iOS Safari, a QuotaExceededError is
  // thrown (see #49)
  if (e.code === e.SECURITY_ERR || e.code === e.QUOTA_EXCEEDED_ERR) {
    hasStorage = false;
  } else {
    throw e;
  }
}

var canStoreURLs = hasStorage;
exports.canStoreURLs = canStoreURLs;

var WebStorageUrlStorage = /*#__PURE__*/function () {
  function WebStorageUrlStorage() {
    _classCallCheck(this, WebStorageUrlStorage);
  }

  _createClass(WebStorageUrlStorage, [{
    key: "findAllUploads",
    value: function findAllUploads() {
      var results = this._findEntries('tus::');

      return Promise.resolve(results);
    }
  }, {
    key: "findUploadsByFingerprint",
    value: function findUploadsByFingerprint(fingerprint) {
      var results = this._findEntries("tus::".concat(fingerprint, "::"));

      return Promise.resolve(results);
    }
  }, {
    key: "removeUpload",
    value: function removeUpload(urlStorageKey) {
      localStorage.removeItem(urlStorageKey);
      return Promise.resolve();
    }
  }, {
    key: "addUpload",
    value: function addUpload(fingerprint, upload) {
      var id = Math.round(Math.random() * 1e12);
      var key = "tus::".concat(fingerprint, "::").concat(id);
      localStorage.setItem(key, JSON.stringify(upload));
      return Promise.resolve(key);
    }
  }, {
    key: "_findEntries",
    value: function _findEntries(prefix) {
      var results = [];

      for (var i = 0; i < localStorage.length; i++) {
        var _key = localStorage.key(i);

        if (_key.indexOf(prefix) !== 0) continue;

        try {
          var upload = JSON.parse(localStorage.getItem(_key));
          upload.urlStorageKey = _key;
          results.push(upload);
        } catch (e) {// The JSON parse error is intentionally ignored here, so a malformed
          // entry in the storage cannot prevent an upload.
        }
      }

      return results;
    }
  }]);

  return WebStorageUrlStorage;
}();

exports.WebStorageUrlStorage = WebStorageUrlStorage;
},{}],69:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _createSuper(Derived) {
  return function () {
    var Super = _getPrototypeOf(Derived),
        result;

    if (_isNativeReflectConstruct()) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? new Map() : undefined;

  _wrapNativeSuper = function _wrapNativeSuper(Class) {
    if (Class === null || !_isNativeFunction(Class)) return Class;

    if (typeof Class !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }

    if (typeof _cache !== "undefined") {
      if (_cache.has(Class)) return _cache.get(Class);

      _cache.set(Class, Wrapper);
    }

    function Wrapper() {
      return _construct(Class, arguments, _getPrototypeOf(this).constructor);
    }

    Wrapper.prototype = Object.create(Class.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    return _setPrototypeOf(Wrapper, Class);
  };

  return _wrapNativeSuper(Class);
}

function _construct(Parent, args, Class) {
  if (_isNativeReflectConstruct()) {
    _construct = Reflect.construct;
  } else {
    _construct = function _construct(Parent, args, Class) {
      var a = [null];
      a.push.apply(a, args);
      var Constructor = Function.bind.apply(Parent, a);
      var instance = new Constructor();
      if (Class) _setPrototypeOf(instance, Class.prototype);
      return instance;
    };
  }

  return _construct.apply(null, arguments);
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _isNativeFunction(fn) {
  return Function.toString.call(fn).indexOf("[native code]") !== -1;
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

var DetailedError = /*#__PURE__*/function (_Error) {
  _inherits(DetailedError, _Error);

  var _super = _createSuper(DetailedError);

  function DetailedError(message) {
    var _this;

    var causingErr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var req = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    var res = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

    _classCallCheck(this, DetailedError);

    _this = _super.call(this, message);
    _this.originalRequest = req;
    _this.originalResponse = res;
    _this.causingError = causingErr;

    if (causingErr != null) {
      message += ", caused by ".concat(causingErr.toString());
    }

    if (req != null) {
      var requestId = req.getHeader('X-Request-ID') || 'n/a';
      var method = req.getMethod();
      var url = req.getURL();
      var status = res ? res.getStatus() : 'n/a';
      var body = res ? res.getBody() || '' : 'n/a';
      message += ", originated from request (method: ".concat(method, ", url: ").concat(url, ", response code: ").concat(status, ", response text: ").concat(body, ", request id: ").concat(requestId, ")");
    }

    _this.message = message;
    return _this;
  }

  return DetailedError;
}( /*#__PURE__*/_wrapNativeSuper(Error));

var _default = DetailedError;
exports.default = _default;
},{}],70:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.enableDebugLog = enableDebugLog;
exports.log = log;

/* eslint no-console: "off" */
var isEnabled = false;

function enableDebugLog() {
  isEnabled = true;
}

function log(msg) {
  if (!isEnabled) return;
  console.log(msg);
}
},{}],71:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}
/* eslint no-unused-vars: "off" */


var NoopUrlStorage = /*#__PURE__*/function () {
  function NoopUrlStorage() {
    _classCallCheck(this, NoopUrlStorage);
  }

  _createClass(NoopUrlStorage, [{
    key: "listAllUploads",
    value: function listAllUploads() {
      return Promise.resolve([]);
    }
  }, {
    key: "findUploadsByFingerprint",
    value: function findUploadsByFingerprint(fingerprint) {
      return Promise.resolve([]);
    }
  }, {
    key: "removeUpload",
    value: function removeUpload(urlStorageKey) {
      return Promise.resolve();
    }
  }, {
    key: "addUpload",
    value: function addUpload(fingerprint, upload) {
      return Promise.resolve(null);
    }
  }]);

  return NoopUrlStorage;
}();

exports.default = NoopUrlStorage;
},{}],72:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _jsBase = require("js-base64");

var _urlParse = _interopRequireDefault(require("url-parse"));

var _error = _interopRequireDefault(require("./error"));

var _logger = require("./logger");

var _uuid = _interopRequireDefault(require("./uuid"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}
/* global window */


var defaultOptions = {
  endpoint: null,
  uploadUrl: null,
  metadata: {},
  fingerprint: null,
  uploadSize: null,
  onProgress: null,
  onChunkComplete: null,
  onSuccess: null,
  onError: null,
  _onUploadUrlAvailable: null,
  overridePatchMethod: false,
  headers: {},
  addRequestId: false,
  onBeforeRequest: null,
  onAfterResponse: null,
  onShouldRetry: null,
  chunkSize: Infinity,
  retryDelays: [0, 1000, 3000, 5000],
  parallelUploads: 1,
  storeFingerprintForResuming: true,
  removeFingerprintOnSuccess: false,
  uploadLengthDeferred: false,
  uploadDataDuringCreation: false,
  urlStorage: null,
  fileReader: null,
  httpStack: null
};

var BaseUpload = /*#__PURE__*/function () {
  function BaseUpload(file, options) {
    _classCallCheck(this, BaseUpload); // Warn about removed options from previous versions


    if ('resume' in options) {
      console.log('tus: The `resume` option has been removed in tus-js-client v2. Please use the URL storage API instead.'); // eslint-disable-line no-console
    } // The default options will already be added from the wrapper classes.


    this.options = options; // The storage module used to store URLs

    this._urlStorage = this.options.urlStorage; // The underlying File/Blob object

    this.file = file; // The URL against which the file will be uploaded

    this.url = null; // The underlying request object for the current PATCH request

    this._req = null; // The fingerpinrt for the current file (set after start())

    this._fingerprint = null; // The key that the URL storage returned when saving an URL with a fingerprint,

    this._urlStorageKey = null; // The offset used in the current PATCH request

    this._offset = null; // True if the current PATCH request has been aborted

    this._aborted = false; // The file's size in bytes

    this._size = null; // The Source object which will wrap around the given file and provides us
    // with a unified interface for getting its size and slice chunks from its
    // content allowing us to easily handle Files, Blobs, Buffers and Streams.

    this._source = null; // The current count of attempts which have been made. Zero indicates none.

    this._retryAttempt = 0; // The timeout's ID which is used to delay the next retry

    this._retryTimeout = null; // The offset of the remote upload before the latest attempt was started.

    this._offsetBeforeRetry = 0; // An array of BaseUpload instances which are used for uploading the different
    // parts, if the parallelUploads option is used.

    this._parallelUploads = null; // An array of upload URLs which are used for uploading the different
    // parts, if the parallelUploads option is used.

    this._parallelUploadUrls = null;
  }
  /**
   * Use the Termination extension to delete an upload from the server by sending a DELETE
   * request to the specified upload URL. This is only possible if the server supports the
   * Termination extension. If the `options.retryDelays` property is set, the method will
   * also retry if an error ocurrs.
   *
   * @param {String} url The upload's URL which will be terminated.
   * @param {object} options Optional options for influencing HTTP requests.
   * @return {Promise} The Promise will be resolved/rejected when the requests finish.
   */


  _createClass(BaseUpload, [{
    key: "findPreviousUploads",
    value: function findPreviousUploads() {
      var _this = this;

      return this.options.fingerprint(this.file, this.options).then(function (fingerprint) {
        return _this._urlStorage.findUploadsByFingerprint(fingerprint);
      });
    }
  }, {
    key: "resumeFromPreviousUpload",
    value: function resumeFromPreviousUpload(previousUpload) {
      this.url = previousUpload.uploadUrl || null;
      this._parallelUploadUrls = previousUpload.parallelUploadUrls || null;
      this._urlStorageKey = previousUpload.urlStorageKey;
    }
  }, {
    key: "start",
    value: function start() {
      var _this2 = this;

      var file = this.file;

      if (!file) {
        this._emitError(new Error('tus: no file or stream to upload provided'));

        return;
      }

      if (!this.options.endpoint && !this.options.uploadUrl) {
        this._emitError(new Error('tus: neither an endpoint or an upload URL is provided'));

        return;
      }

      var retryDelays = this.options.retryDelays;

      if (retryDelays != null && Object.prototype.toString.call(retryDelays) !== '[object Array]') {
        this._emitError(new Error('tus: the `retryDelays` option must either be an array or null'));

        return;
      }

      if (this.options.parallelUploads > 1) {
        // Test which options are incompatible with parallel uploads.
        ['uploadUrl', 'uploadSize', 'uploadLengthDeferred'].forEach(function (optionName) {
          if (_this2.options[optionName]) {
            _this2._emitError(new Error("tus: cannot use the ".concat(optionName, " option when parallelUploads is enabled")));
          }
        });
      }

      this.options.fingerprint(file, this.options).then(function (fingerprint) {
        if (fingerprint == null) {
          (0, _logger.log)('No fingerprint was calculated meaning that the upload cannot be stored in the URL storage.');
        } else {
          (0, _logger.log)("Calculated fingerprint: ".concat(fingerprint));
        }

        _this2._fingerprint = fingerprint;

        if (_this2._source) {
          return _this2._source;
        }

        return _this2.options.fileReader.openFile(file, _this2.options.chunkSize);
      }).then(function (source) {
        _this2._source = source; // If the upload was configured to use multiple requests or if we resume from
        // an upload which used multiple requests, we start a parallel upload.

        if (_this2.options.parallelUploads > 1 || _this2._parallelUploadUrls != null) {
          _this2._startParallelUpload();
        } else {
          _this2._startSingleUpload();
        }
      })["catch"](function (err) {
        _this2._emitError(err);
      });
    }
    /**
     * Initiate the uploading procedure for a parallelized upload, where one file is split into
     * multiple request which are run in parallel.
     *
     * @api private
     */

  }, {
    key: "_startParallelUpload",
    value: function _startParallelUpload() {
      var _this3 = this;

      var totalSize = this._size = this._source.size;
      var totalProgress = 0;
      this._parallelUploads = [];
      var partCount = this._parallelUploadUrls != null ? this._parallelUploadUrls.length : this.options.parallelUploads; // The input file will be split into multiple slices which are uploaded in separate
      // requests. Here we generate the start and end position for the slices.

      var parts = splitSizeIntoParts(this._source.size, partCount, this._parallelUploadUrls); // Create an empty list for storing the upload URLs

      this._parallelUploadUrls = new Array(parts.length); // Generate a promise for each slice that will be resolve if the respective
      // upload is completed.

      var uploads = parts.map(function (part, index) {
        var lastPartProgress = 0;
        return _this3._source.slice(part.start, part.end).then(function (_ref) {
          var value = _ref.value;
          return new Promise(function (resolve, reject) {
            // Merge with the user supplied options but overwrite some values.
            var options = _objectSpread({}, _this3.options, {
              // If available, the partial upload should be resumed from a previous URL.
              uploadUrl: part.uploadUrl || null,
              // We take manually care of resuming for partial uploads, so they should
              // not be stored in the URL storage.
              storeFingerprintForResuming: false,
              removeFingerprintOnSuccess: false,
              // Reset the parallelUploads option to not cause recursion.
              parallelUploads: 1,
              metadata: {},
              // Add the header to indicate the this is a partial upload.
              headers: _objectSpread({}, _this3.options.headers, {
                'Upload-Concat': 'partial'
              }),
              // Reject or resolve the promise if the upload errors or completes.
              onSuccess: resolve,
              onError: reject,
              // Based in the progress for this partial upload, calculate the progress
              // for the entire final upload.
              onProgress: function onProgress(newPartProgress) {
                totalProgress = totalProgress - lastPartProgress + newPartProgress;
                lastPartProgress = newPartProgress;

                _this3._emitProgress(totalProgress, totalSize);
              },
              // Wait until every partial upload has an upload URL, so we can add
              // them to the URL storage.
              _onUploadUrlAvailable: function _onUploadUrlAvailable() {
                _this3._parallelUploadUrls[index] = upload.url; // Test if all uploads have received an URL

                if (_this3._parallelUploadUrls.filter(function (u) {
                  return !!u;
                }).length === parts.length) {
                  _this3._saveUploadInUrlStorage();
                }
              }
            });

            var upload = new BaseUpload(value, options);
            upload.start(); // Store the upload in an array, so we can later abort them if necessary.

            _this3._parallelUploads.push(upload);
          });
        });
      });
      var req; // Wait until all partial uploads are finished and we can send the POST request for
      // creating the final upload.

      Promise.all(uploads).then(function () {
        req = _this3._openRequest('POST', _this3.options.endpoint);
        req.setHeader('Upload-Concat', "final;".concat(_this3._parallelUploadUrls.join(' '))); // Add metadata if values have been added

        var metadata = encodeMetadata(_this3.options.metadata);

        if (metadata !== '') {
          req.setHeader('Upload-Metadata', metadata);
        }

        return _this3._sendRequest(req, null);
      }).then(function (res) {
        if (!inStatusCategory(res.getStatus(), 200)) {
          _this3._emitHttpError(req, res, 'tus: unexpected response while creating upload');

          return;
        }

        var location = res.getHeader('Location');

        if (location == null) {
          _this3._emitHttpError(req, res, 'tus: invalid or missing Location header');

          return;
        }

        _this3.url = resolveUrl(_this3.options.endpoint, location);
        (0, _logger.log)("Created upload at ".concat(_this3.url));

        _this3._emitSuccess();
      })["catch"](function (err) {
        _this3._emitError(err);
      });
    }
    /**
     * Initiate the uploading procedure for a non-parallel upload. Here the entire file is
     * uploaded in a sequential matter.
     *
     * @api private
     */

  }, {
    key: "_startSingleUpload",
    value: function _startSingleUpload() {
      // First, we look at the uploadLengthDeferred option.
      // Next, we check if the caller has supplied a manual upload size.
      // Finally, we try to use the calculated size from the source object.
      if (this.options.uploadLengthDeferred) {
        this._size = null;
      } else if (this.options.uploadSize != null) {
        this._size = +this.options.uploadSize;

        if (isNaN(this._size)) {
          this._emitError(new Error('tus: cannot convert `uploadSize` option into a number'));

          return;
        }
      } else {
        this._size = this._source.size;

        if (this._size == null) {
          this._emitError(new Error("tus: cannot automatically derive upload's size from input and must be specified manually using the `uploadSize` option"));

          return;
        }
      } // Reset the aborted flag when the upload is started or else the
      // _performUpload will stop before sending a request if the upload has been
      // aborted previously.


      this._aborted = false; // The upload had been started previously and we should reuse this URL.

      if (this.url != null) {
        (0, _logger.log)("Resuming upload from previous URL: ".concat(this.url));

        this._resumeUpload();

        return;
      } // A URL has manually been specified, so we try to resume


      if (this.options.uploadUrl != null) {
        (0, _logger.log)("Resuming upload from provided URL: ".concat(this.options.url));
        this.url = this.options.uploadUrl;

        this._resumeUpload();

        return;
      } // An upload has not started for the file yet, so we start a new one


      (0, _logger.log)('Creating a new upload');

      this._createUpload();
    }
    /**
     * Abort any running request and stop the current upload. After abort is called, no event
     * handler will be invoked anymore. You can use the `start` method to resume the upload
     * again.
     * If `shouldTerminate` is true, the `terminate` function will be called to remove the
     * current upload from the server.
     *
     * @param {boolean} shouldTerminate True if the upload should be deleted from the server.
     * @return {Promise} The Promise will be resolved/rejected when the requests finish.
     */

  }, {
    key: "abort",
    value: function abort(shouldTerminate) {
      var _this4 = this; // Count the number of arguments to see if a callback is being provided in the old style required by tus-js-client 1.x, then throw an error if it is.
      // `arguments` is a JavaScript built-in variable that contains all of the function's arguments.


      if (arguments.length > 1 && typeof arguments[1] === 'function') {
        throw new Error('tus: the abort function does not accept a callback since v2 anymore; please use the returned Promise instead');
      } // Stop any parallel partial uploads, that have been started in _startParallelUploads.


      if (this._parallelUploads != null) {
        this._parallelUploads.forEach(function (upload) {
          upload.abort(shouldTerminate);
        });
      } // Stop any current running request.


      if (this._req !== null) {
        this._req.abort();

        this._source.close();
      }

      this._aborted = true; // Stop any timeout used for initiating a retry.

      if (this._retryTimeout != null) {
        clearTimeout(this._retryTimeout);
        this._retryTimeout = null;
      }

      if (!shouldTerminate || this.url == null) {
        return Promise.resolve();
      }

      return BaseUpload.terminate(this.url, this.options) // Remove entry from the URL storage since the upload URL is no longer valid.
      .then(function () {
        return _this4._removeFromUrlStorage();
      });
    }
  }, {
    key: "_emitHttpError",
    value: function _emitHttpError(req, res, message, causingErr) {
      this._emitError(new _error.default(message, causingErr, req, res));
    }
  }, {
    key: "_emitError",
    value: function _emitError(err) {
      var _this5 = this; // Do not emit errors, e.g. from aborted HTTP requests, if the upload has been stopped.


      if (this._aborted) return; // Check if we should retry, when enabled, before sending the error to the user.

      if (this.options.retryDelays != null) {
        // We will reset the attempt counter if
        // - we were already able to connect to the server (offset != null) and
        // - we were able to upload a small chunk of data to the server
        var shouldResetDelays = this._offset != null && this._offset > this._offsetBeforeRetry;

        if (shouldResetDelays) {
          this._retryAttempt = 0;
        }

        if (shouldRetry(err, this._retryAttempt, this.options)) {
          var delay = this.options.retryDelays[this._retryAttempt++];
          this._offsetBeforeRetry = this._offset;
          this._retryTimeout = setTimeout(function () {
            _this5.start();
          }, delay);
          return;
        }
      }

      if (typeof this.options.onError === 'function') {
        this.options.onError(err);
      } else {
        throw err;
      }
    }
    /**
     * Publishes notification if the upload has been successfully completed.
     *
     * @api private
     */

  }, {
    key: "_emitSuccess",
    value: function _emitSuccess() {
      if (this.options.removeFingerprintOnSuccess) {
        // Remove stored fingerprint and corresponding endpoint. This causes
        // new uploads of the same file to be treated as a different file.
        this._removeFromUrlStorage();
      }

      if (typeof this.options.onSuccess === 'function') {
        this.options.onSuccess();
      }
    }
    /**
     * Publishes notification when data has been sent to the server. This
     * data may not have been accepted by the server yet.
     *
     * @param {number} bytesSent  Number of bytes sent to the server.
     * @param {number} bytesTotal Total number of bytes to be sent to the server.
     * @api private
     */

  }, {
    key: "_emitProgress",
    value: function _emitProgress(bytesSent, bytesTotal) {
      if (typeof this.options.onProgress === 'function') {
        this.options.onProgress(bytesSent, bytesTotal);
      }
    }
    /**
     * Publishes notification when a chunk of data has been sent to the server
     * and accepted by the server.
     * @param {number} chunkSize  Size of the chunk that was accepted by the server.
     * @param {number} bytesAccepted Total number of bytes that have been
     *                                accepted by the server.
     * @param {number} bytesTotal Total number of bytes to be sent to the server.
     * @api private
     */

  }, {
    key: "_emitChunkComplete",
    value: function _emitChunkComplete(chunkSize, bytesAccepted, bytesTotal) {
      if (typeof this.options.onChunkComplete === 'function') {
        this.options.onChunkComplete(chunkSize, bytesAccepted, bytesTotal);
      }
    }
    /**
     * Create a new upload using the creation extension by sending a POST
     * request to the endpoint. After successful creation the file will be
     * uploaded
     *
     * @api private
     */

  }, {
    key: "_createUpload",
    value: function _createUpload() {
      var _this6 = this;

      if (!this.options.endpoint) {
        this._emitError(new Error('tus: unable to create upload because no endpoint is provided'));

        return;
      }

      var req = this._openRequest('POST', this.options.endpoint);

      if (this.options.uploadLengthDeferred) {
        req.setHeader('Upload-Defer-Length', 1);
      } else {
        req.setHeader('Upload-Length', this._size);
      } // Add metadata if values have been added


      var metadata = encodeMetadata(this.options.metadata);

      if (metadata !== '') {
        req.setHeader('Upload-Metadata', metadata);
      }

      var promise;

      if (this.options.uploadDataDuringCreation && !this.options.uploadLengthDeferred) {
        this._offset = 0;
        promise = this._addChunkToRequest(req);
      } else {
        promise = this._sendRequest(req, null);
      }

      promise.then(function (res) {
        if (!inStatusCategory(res.getStatus(), 200)) {
          _this6._emitHttpError(req, res, 'tus: unexpected response while creating upload');

          return;
        }

        var location = res.getHeader('Location');

        if (location == null) {
          _this6._emitHttpError(req, res, 'tus: invalid or missing Location header');

          return;
        }

        _this6.url = resolveUrl(_this6.options.endpoint, location);
        (0, _logger.log)("Created upload at ".concat(_this6.url));

        if (typeof _this6.options._onUploadUrlAvailable === 'function') {
          _this6.options._onUploadUrlAvailable();
        }

        if (_this6._size === 0) {
          // Nothing to upload and file was successfully created
          _this6._emitSuccess();

          _this6._source.close();

          return;
        }

        _this6._saveUploadInUrlStorage();

        if (_this6.options.uploadDataDuringCreation) {
          _this6._handleUploadResponse(req, res);
        } else {
          _this6._offset = 0;

          _this6._performUpload();
        }
      })["catch"](function (err) {
        _this6._emitHttpError(req, null, 'tus: failed to create upload', err);
      });
    }
    /*
     * Try to resume an existing upload. First a HEAD request will be sent
     * to retrieve the offset. If the request fails a new upload will be
     * created. In the case of a successful response the file will be uploaded.
     *
     * @api private
     */

  }, {
    key: "_resumeUpload",
    value: function _resumeUpload() {
      var _this7 = this;

      var req = this._openRequest('HEAD', this.url);

      var promise = this._sendRequest(req, null);

      promise.then(function (res) {
        var status = res.getStatus();

        if (!inStatusCategory(status, 200)) {
          if (inStatusCategory(status, 400)) {
            // Remove stored fingerprint and corresponding endpoint,
            // on client errors since the file can not be found
            _this7._removeFromUrlStorage();
          } // If the upload is locked (indicated by the 423 Locked status code), we
          // emit an error instead of directly starting a new upload. This way the
          // retry logic can catch the error and will retry the upload. An upload
          // is usually locked for a short period of time and will be available
          // afterwards.


          if (status === 423) {
            _this7._emitHttpError(req, res, 'tus: upload is currently locked; retry later');

            return;
          }

          if (!_this7.options.endpoint) {
            // Don't attempt to create a new upload if no endpoint is provided.
            _this7._emitHttpError(req, res, 'tus: unable to resume upload (new upload cannot be created without an endpoint)');

            return;
          } // Try to create a new upload


          _this7.url = null;

          _this7._createUpload();

          return;
        }

        var offset = parseInt(res.getHeader('Upload-Offset'), 10);

        if (isNaN(offset)) {
          _this7._emitHttpError(req, res, 'tus: invalid or missing offset value');

          return;
        }

        var length = parseInt(res.getHeader('Upload-Length'), 10);

        if (isNaN(length) && !_this7.options.uploadLengthDeferred) {
          _this7._emitHttpError(req, res, 'tus: invalid or missing length value');

          return;
        }

        if (typeof _this7.options._onUploadUrlAvailable === 'function') {
          _this7.options._onUploadUrlAvailable();
        } // Upload has already been completed and we do not need to send additional
        // data to the server


        if (offset === length) {
          _this7._emitProgress(length, length);

          _this7._emitSuccess();

          return;
        }

        _this7._offset = offset;

        _this7._performUpload();
      })["catch"](function (err) {
        _this7._emitHttpError(req, null, 'tus: failed to resume upload', err);
      });
    }
    /**
     * Start uploading the file using PATCH requests. The file will be divided
     * into chunks as specified in the chunkSize option. During the upload
     * the onProgress event handler may be invoked multiple times.
     *
     * @api private
     */

  }, {
    key: "_performUpload",
    value: function _performUpload() {
      var _this8 = this; // If the upload has been aborted, we will not send the next PATCH request.
      // This is important if the abort method was called during a callback, such
      // as onChunkComplete or onProgress.


      if (this._aborted) {
        return;
      }

      var req; // Some browser and servers may not support the PATCH method. For those
      // cases, you can tell tus-js-client to use a POST request with the
      // X-HTTP-Method-Override header for simulating a PATCH request.

      if (this.options.overridePatchMethod) {
        req = this._openRequest('POST', this.url);
        req.setHeader('X-HTTP-Method-Override', 'PATCH');
      } else {
        req = this._openRequest('PATCH', this.url);
      }

      req.setHeader('Upload-Offset', this._offset);

      var promise = this._addChunkToRequest(req);

      promise.then(function (res) {
        if (!inStatusCategory(res.getStatus(), 200)) {
          _this8._emitHttpError(req, res, 'tus: unexpected response while uploading chunk');

          return;
        }

        _this8._handleUploadResponse(req, res);
      })["catch"](function (err) {
        // Don't emit an error if the upload was aborted manually
        if (_this8._aborted) {
          return;
        }

        _this8._emitHttpError(req, null, "tus: failed to upload chunk at offset ".concat(_this8._offset), err);
      });
    }
    /**
     * _addChunktoRequest reads a chunk from the source and sends it using the
     * supplied request object. It will not handle the response.
     *
     * @api private
     */

  }, {
    key: "_addChunkToRequest",
    value: function _addChunkToRequest(req) {
      var _this9 = this;

      var start = this._offset;
      var end = this._offset + this.options.chunkSize;
      req.setProgressHandler(function (bytesSent) {
        _this9._emitProgress(start + bytesSent, _this9._size);
      });
      req.setHeader('Content-Type', 'application/offset+octet-stream'); // The specified chunkSize may be Infinity or the calcluated end position
      // may exceed the file's size. In both cases, we limit the end position to
      // the input's total size for simpler calculations and correctness.

      if ((end === Infinity || end > this._size) && !this.options.uploadLengthDeferred) {
        end = this._size;
      }

      return this._source.slice(start, end).then(function (_ref2) {
        var value = _ref2.value,
            done = _ref2.done; // If the upload length is deferred, the upload size was not specified during
        // upload creation. So, if the file reader is done reading, we know the total
        // upload size and can tell the tus server.

        if (_this9.options.uploadLengthDeferred && done) {
          _this9._size = _this9._offset + (value && value.size ? value.size : 0);
          req.setHeader('Upload-Length', _this9._size);
        }

        if (value === null) {
          return _this9._sendRequest(req);
        }

        _this9._emitProgress(_this9._offset, _this9._size);

        return _this9._sendRequest(req, value);
      });
    }
    /**
     * _handleUploadResponse is used by requests that haven been sent using _addChunkToRequest
     * and already have received a response.
     *
     * @api private
     */

  }, {
    key: "_handleUploadResponse",
    value: function _handleUploadResponse(req, res) {
      var offset = parseInt(res.getHeader('Upload-Offset'), 10);

      if (isNaN(offset)) {
        this._emitHttpError(req, res, 'tus: invalid or missing offset value');

        return;
      }

      this._emitProgress(offset, this._size);

      this._emitChunkComplete(offset - this._offset, offset, this._size);

      this._offset = offset;

      if (offset == this._size) {
        // Yay, finally done :)
        this._emitSuccess();

        this._source.close();

        return;
      }

      this._performUpload();
    }
    /**
     * Create a new HTTP request object with the given method and URL.
     *
     * @api private
     */

  }, {
    key: "_openRequest",
    value: function _openRequest(method, url) {
      var req = openRequest(method, url, this.options);
      this._req = req;
      return req;
    }
    /**
     * Remove the entry in the URL storage, if it has been saved before.
     *
     * @api private
     */

  }, {
    key: "_removeFromUrlStorage",
    value: function _removeFromUrlStorage() {
      var _this10 = this;

      if (!this._urlStorageKey) return;

      this._urlStorage.removeUpload(this._urlStorageKey)["catch"](function (err) {
        _this10._emitError(err);
      });

      this._urlStorageKey = null;
    }
    /**
     * Add the upload URL to the URL storage, if possible.
     *
     * @api private
     */

  }, {
    key: "_saveUploadInUrlStorage",
    value: function _saveUploadInUrlStorage() {
      var _this11 = this; // Only if a fingerprint was calculated for the input (i.e. not a stream), we can store the upload URL.


      if (!this.options.storeFingerprintForResuming || !this._fingerprint) {
        return;
      }

      var storedUpload = {
        size: this._size,
        metadata: this.options.metadata,
        creationTime: new Date().toString()
      };

      if (this._parallelUploads) {
        // Save multiple URLs if the parallelUploads option is used ...
        storedUpload.parallelUploadUrls = this._parallelUploadUrls;
      } else {
        // ... otherwise we just save the one available URL.
        storedUpload.uploadUrl = this.url;
      }

      this._urlStorage.addUpload(this._fingerprint, storedUpload).then(function (urlStorageKey) {
        return _this11._urlStorageKey = urlStorageKey;
      })["catch"](function (err) {
        _this11._emitError(err);
      });
    }
    /**
     * Send a request with the provided body.
     *
     * @api private
     */

  }, {
    key: "_sendRequest",
    value: function _sendRequest(req) {
      var body = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      return sendRequest(req, body, this.options);
    }
  }], [{
    key: "terminate",
    value: function terminate(url, options) {
      // Count the number of arguments to see if a callback is being provided as the last
      // argument in the old style required by tus-js-client 1.x, then throw an error if it is.
      // `arguments` is a JavaScript built-in variable that contains all of the function's arguments.
      if (arguments.length > 1 && typeof arguments[arguments.length - 1] === 'function') {
        throw new Error('tus: the terminate function does not accept a callback since v2 anymore; please use the returned Promise instead');
      } // Note that in order for the trick above to work, a default value cannot be set for `options`,
      // so the check below replaces the old default `{}`.


      if (options === undefined) {
        options = {};
      }

      var req = openRequest('DELETE', url, options);
      return sendRequest(req, null, options).then(function (res) {
        // A 204 response indicates a successfull request
        if (res.getStatus() === 204) {
          return;
        }

        throw new _error.default('tus: unexpected response while terminating upload', null, req, res);
      })["catch"](function (err) {
        if (!(err instanceof _error.default)) {
          err = new _error.default('tus: failed to terminate upload', err, req, null);
        }

        if (!shouldRetry(err, 0, options)) {
          throw err;
        } // Instead of keeping track of the retry attempts, we remove the first element from the delays
        // array. If the array is empty, all retry attempts are used up and we will bubble up the error.
        // We recursively call the terminate function will removing elements from the retryDelays array.


        var delay = options.retryDelays[0];
        var remainingDelays = options.retryDelays.slice(1);

        var newOptions = _objectSpread({}, options, {
          retryDelays: remainingDelays
        });

        return new Promise(function (resolve) {
          return setTimeout(resolve, delay);
        }).then(function () {
          return BaseUpload.terminate(url, newOptions);
        });
      });
    }
  }]);

  return BaseUpload;
}();

function encodeMetadata(metadata) {
  var encoded = [];

  for (var key in metadata) {
    encoded.push("".concat(key, " ").concat(_jsBase.Base64.encode(metadata[key])));
  }

  return encoded.join(',');
}
/**
 * Checks whether a given status is in the range of the expected category.
 * For example, only a status between 200 and 299 will satisfy the category 200.
 *
 * @api private
 */


function inStatusCategory(status, category) {
  return status >= category && status < category + 100;
}
/**
 * Create a new HTTP request with the specified method and URL.
 * The necessary headers that are included in every request
 * will be added, including the request ID.
 *
 * @api private
 */


function openRequest(method, url, options) {
  var req = options.httpStack.createRequest(method, url);
  req.setHeader('Tus-Resumable', '1.0.0');
  var headers = options.headers || {};

  for (var name in headers) {
    req.setHeader(name, headers[name]);
  }

  if (options.addRequestId) {
    var requestId = (0, _uuid.default)();
    req.setHeader('X-Request-ID', requestId);
  }

  return req;
}
/**
 * Send a request with the provided body while invoking the onBeforeRequest
 * and onAfterResponse callbacks.
 *
 * @api private
 */


function sendRequest(req, body, options) {
  var onBeforeRequestPromise = typeof options.onBeforeRequest === 'function' ? Promise.resolve(options.onBeforeRequest(req)) : Promise.resolve();
  return onBeforeRequestPromise.then(function () {
    return req.send(body).then(function (res) {
      var onAfterResponsePromise = typeof options.onAfterResponse === 'function' ? Promise.resolve(options.onAfterResponse(req, res)) : Promise.resolve();
      return onAfterResponsePromise.then(function () {
        return res;
      });
    });
  });
}
/**
 * Checks whether the browser running this code has internet access.
 * This function will always return true in the node.js environment
 *
 * @api private
 */


function isOnline() {
  var online = true;

  if (typeof window !== 'undefined' && 'navigator' in window && window.navigator.onLine === false) {
    online = false;
  }

  return online;
}
/**
 * Checks whether or not it is ok to retry a request.
 * @param {Error} err the error returned from the last request
 * @param {number} retryAttempt the number of times the request has already been retried
 * @param {object} options tus Upload options
 *
 * @api private
 */


function shouldRetry(err, retryAttempt, options) {
  // We only attempt a retry if
  // - retryDelays option is set
  // - we didn't exceed the maxium number of retries, yet, and
  // - this error was caused by a request or it's response and
  // - the error is server error (i.e. not a status 4xx except a 409 or 423) or
  // a onShouldRetry is specified and returns true
  // - the browser does not indicate that we are offline
  if (options.retryDelays == null || retryAttempt >= options.retryDelays.length || err.originalRequest == null) {
    return false;
  }

  if (options && typeof options.onShouldRetry === 'function') {
    return options.onShouldRetry(err, retryAttempt, options);
  }

  var status = err.originalResponse ? err.originalResponse.getStatus() : 0;
  return (!inStatusCategory(status, 400) || status === 409 || status === 423) && isOnline();
}
/**
 * Resolve a relative link given the origin as source. For example,
 * if a HTTP request to http://example.com/files/ returns a Location
 * header with the value /upload/abc, the resolved URL will be:
 * http://example.com/upload/abc
 */


function resolveUrl(origin, link) {
  return new _urlParse.default(link, origin).toString();
}
/**
 * Calculate the start and end positions for the parts if an upload
 * is split into multiple parallel requests.
 *
 * @param {number} totalSize The byte size of the upload, which will be split.
 * @param {number} partCount The number in how many parts the upload will be split.
 * @param {string[]} previousUrls The upload URLs for previous parts.
 * @return {object[]}
 * @api private
 */


function splitSizeIntoParts(totalSize, partCount, previousUrls) {
  var partSize = Math.floor(totalSize / partCount);
  var parts = [];

  for (var i = 0; i < partCount; i++) {
    parts.push({
      start: partSize * i,
      end: partSize * (i + 1)
    });
  }

  parts[partCount - 1].end = totalSize; // Attach URLs from previous uploads, if available.

  if (previousUrls) {
    parts.forEach(function (part, index) {
      part.uploadUrl = previousUrls[index] || null;
    });
  }

  return parts;
}

BaseUpload.defaultOptions = defaultOptions;
var _default = BaseUpload;
exports.default = _default;
},{"./error":69,"./logger":70,"./uuid":73,"js-base64":22,"url-parse":74}],73:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = uuid;

/**
 * Generate a UUID v4 based on random numbers. We intentioanlly use the less
 * secure Math.random function here since the more secure crypto.getRandomNumbers
 * is not available on all platforms.
 * This is not a problem for us since we use the UUID only for generating a
 * request ID, so we can correlate server logs to client errors.
 *
 * This function is taken from following site:
 * https://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript
 *
 * @return {string} The generate UUID
 */
function uuid() {
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
    var r = Math.random() * 16 | 0,
        v = c == 'x' ? r : r & 0x3 | 0x8;
    return v.toString(16);
  });
}
},{}],74:[function(require,module,exports){
(function (global){(function (){
'use strict';

var required = require('requires-port')
  , qs = require('querystringify')
  , slashes = /^[A-Za-z][A-Za-z0-9+-.]*:\/\//
  , protocolre = /^([a-z][a-z0-9.+-]*:)?(\/\/)?([\\/]+)?([\S\s]*)/i
  , windowsDriveLetter = /^[a-zA-Z]:/
  , whitespace = '[\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\\uFEFF]'
  , left = new RegExp('^'+ whitespace +'+');

/**
 * Trim a given string.
 *
 * @param {String} str String to trim.
 * @public
 */
function trimLeft(str) {
  return (str ? str : '').toString().replace(left, '');
}

/**
 * These are the parse rules for the URL parser, it informs the parser
 * about:
 *
 * 0. The char it Needs to parse, if it's a string it should be done using
 *    indexOf, RegExp using exec and NaN means set as current value.
 * 1. The property we should set when parsing this value.
 * 2. Indication if it's backwards or forward parsing, when set as number it's
 *    the value of extra chars that should be split off.
 * 3. Inherit from location if non existing in the parser.
 * 4. `toLowerCase` the resulting value.
 */
var rules = [
  ['#', 'hash'],                        // Extract from the back.
  ['?', 'query'],                       // Extract from the back.
  function sanitize(address, url) {     // Sanitize what is left of the address
    return isSpecial(url.protocol) ? address.replace(/\\/g, '/') : address;
  },
  ['/', 'pathname'],                    // Extract from the back.
  ['@', 'auth', 1],                     // Extract from the front.
  [NaN, 'host', undefined, 1, 1],       // Set left over value.
  [/:(\d+)$/, 'port', undefined, 1],    // RegExp the back.
  [NaN, 'hostname', undefined, 1, 1]    // Set left over.
];

/**
 * These properties should not be copied or inherited from. This is only needed
 * for all non blob URL's as a blob URL does not include a hash, only the
 * origin.
 *
 * @type {Object}
 * @private
 */
var ignore = { hash: 1, query: 1 };

/**
 * The location object differs when your code is loaded through a normal page,
 * Worker or through a worker using a blob. And with the blobble begins the
 * trouble as the location object will contain the URL of the blob, not the
 * location of the page where our code is loaded in. The actual origin is
 * encoded in the `pathname` so we can thankfully generate a good "default"
 * location from it so we can generate proper relative URL's again.
 *
 * @param {Object|String} loc Optional default location object.
 * @returns {Object} lolcation object.
 * @public
 */
function lolcation(loc) {
  var globalVar;

  if (typeof window !== 'undefined') globalVar = window;
  else if (typeof global !== 'undefined') globalVar = global;
  else if (typeof self !== 'undefined') globalVar = self;
  else globalVar = {};

  var location = globalVar.location || {};
  loc = loc || location;

  var finaldestination = {}
    , type = typeof loc
    , key;

  if ('blob:' === loc.protocol) {
    finaldestination = new Url(unescape(loc.pathname), {});
  } else if ('string' === type) {
    finaldestination = new Url(loc, {});
    for (key in ignore) delete finaldestination[key];
  } else if ('object' === type) {
    for (key in loc) {
      if (key in ignore) continue;
      finaldestination[key] = loc[key];
    }

    if (finaldestination.slashes === undefined) {
      finaldestination.slashes = slashes.test(loc.href);
    }
  }

  return finaldestination;
}

/**
 * Check whether a protocol scheme is special.
 *
 * @param {String} The protocol scheme of the URL
 * @return {Boolean} `true` if the protocol scheme is special, else `false`
 * @private
 */
function isSpecial(scheme) {
  return (
    scheme === 'file:' ||
    scheme === 'ftp:' ||
    scheme === 'http:' ||
    scheme === 'https:' ||
    scheme === 'ws:' ||
    scheme === 'wss:'
  );
}

/**
 * @typedef ProtocolExtract
 * @type Object
 * @property {String} protocol Protocol matched in the URL, in lowercase.
 * @property {Boolean} slashes `true` if protocol is followed by "//", else `false`.
 * @property {String} rest Rest of the URL that is not part of the protocol.
 */

/**
 * Extract protocol information from a URL with/without double slash ("//").
 *
 * @param {String} address URL we want to extract from.
 * @param {Object} location
 * @return {ProtocolExtract} Extracted information.
 * @private
 */
function extractProtocol(address, location) {
  address = trimLeft(address);
  location = location || {};

  var match = protocolre.exec(address);
  var protocol = match[1] ? match[1].toLowerCase() : '';
  var forwardSlashes = !!match[2];
  var otherSlashes = !!match[3];
  var slashesCount = 0;
  var rest;

  if (forwardSlashes) {
    if (otherSlashes) {
      rest = match[2] + match[3] + match[4];
      slashesCount = match[2].length + match[3].length;
    } else {
      rest = match[2] + match[4];
      slashesCount = match[2].length;
    }
  } else {
    if (otherSlashes) {
      rest = match[3] + match[4];
      slashesCount = match[3].length;
    } else {
      rest = match[4]
    }
  }

  if (protocol === 'file:') {
    if (slashesCount >= 2) {
      rest = rest.slice(2);
    }
  } else if (isSpecial(protocol)) {
    rest = match[4];
  } else if (protocol) {
    if (forwardSlashes) {
      rest = rest.slice(2);
    }
  } else if (slashesCount >= 2 && isSpecial(location.protocol)) {
    rest = match[4];
  }

  return {
    protocol: protocol,
    slashes: forwardSlashes || isSpecial(protocol),
    slashesCount: slashesCount,
    rest: rest
  };
}

/**
 * Resolve a relative URL pathname against a base URL pathname.
 *
 * @param {String} relative Pathname of the relative URL.
 * @param {String} base Pathname of the base URL.
 * @return {String} Resolved pathname.
 * @private
 */
function resolve(relative, base) {
  if (relative === '') return base;

  var path = (base || '/').split('/').slice(0, -1).concat(relative.split('/'))
    , i = path.length
    , last = path[i - 1]
    , unshift = false
    , up = 0;

  while (i--) {
    if (path[i] === '.') {
      path.splice(i, 1);
    } else if (path[i] === '..') {
      path.splice(i, 1);
      up++;
    } else if (up) {
      if (i === 0) unshift = true;
      path.splice(i, 1);
      up--;
    }
  }

  if (unshift) path.unshift('');
  if (last === '.' || last === '..') path.push('');

  return path.join('/');
}

/**
 * The actual URL instance. Instead of returning an object we've opted-in to
 * create an actual constructor as it's much more memory efficient and
 * faster and it pleases my OCD.
 *
 * It is worth noting that we should not use `URL` as class name to prevent
 * clashes with the global URL instance that got introduced in browsers.
 *
 * @constructor
 * @param {String} address URL we want to parse.
 * @param {Object|String} [location] Location defaults for relative paths.
 * @param {Boolean|Function} [parser] Parser for the query string.
 * @private
 */
function Url(address, location, parser) {
  address = trimLeft(address);

  if (!(this instanceof Url)) {
    return new Url(address, location, parser);
  }

  var relative, extracted, parse, instruction, index, key
    , instructions = rules.slice()
    , type = typeof location
    , url = this
    , i = 0;

  //
  // The following if statements allows this module two have compatibility with
  // 2 different API:
  //
  // 1. Node.js's `url.parse` api which accepts a URL, boolean as arguments
  //    where the boolean indicates that the query string should also be parsed.
  //
  // 2. The `URL` interface of the browser which accepts a URL, object as
  //    arguments. The supplied object will be used as default values / fall-back
  //    for relative paths.
  //
  if ('object' !== type && 'string' !== type) {
    parser = location;
    location = null;
  }

  if (parser && 'function' !== typeof parser) parser = qs.parse;

  location = lolcation(location);

  //
  // Extract protocol information before running the instructions.
  //
  extracted = extractProtocol(address || '', location);
  relative = !extracted.protocol && !extracted.slashes;
  url.slashes = extracted.slashes || relative && location.slashes;
  url.protocol = extracted.protocol || location.protocol || '';
  address = extracted.rest;

  //
  // When the authority component is absent the URL starts with a path
  // component.
  //
  if (
    extracted.protocol === 'file:' && (
      extracted.slashesCount !== 2 || windowsDriveLetter.test(address)) ||
    (!extracted.slashes &&
      (extracted.protocol ||
        extracted.slashesCount < 2 ||
        !isSpecial(url.protocol)))
  ) {
    instructions[3] = [/(.*)/, 'pathname'];
  }

  for (; i < instructions.length; i++) {
    instruction = instructions[i];

    if (typeof instruction === 'function') {
      address = instruction(address, url);
      continue;
    }

    parse = instruction[0];
    key = instruction[1];

    if (parse !== parse) {
      url[key] = address;
    } else if ('string' === typeof parse) {
      if (~(index = address.indexOf(parse))) {
        if ('number' === typeof instruction[2]) {
          url[key] = address.slice(0, index);
          address = address.slice(index + instruction[2]);
        } else {
          url[key] = address.slice(index);
          address = address.slice(0, index);
        }
      }
    } else if ((index = parse.exec(address))) {
      url[key] = index[1];
      address = address.slice(0, index.index);
    }

    url[key] = url[key] || (
      relative && instruction[3] ? location[key] || '' : ''
    );

    //
    // Hostname, host and protocol should be lowercased so they can be used to
    // create a proper `origin`.
    //
    if (instruction[4]) url[key] = url[key].toLowerCase();
  }

  //
  // Also parse the supplied query string in to an object. If we're supplied
  // with a custom parser as function use that instead of the default build-in
  // parser.
  //
  if (parser) url.query = parser(url.query);

  //
  // If the URL is relative, resolve the pathname against the base URL.
  //
  if (
      relative
    && location.slashes
    && url.pathname.charAt(0) !== '/'
    && (url.pathname !== '' || location.pathname !== '')
  ) {
    url.pathname = resolve(url.pathname, location.pathname);
  }

  //
  // Default to a / for pathname if none exists. This normalizes the URL
  // to always have a /
  //
  if (url.pathname.charAt(0) !== '/' && isSpecial(url.protocol)) {
    url.pathname = '/' + url.pathname;
  }

  //
  // We should not add port numbers if they are already the default port number
  // for a given protocol. As the host also contains the port number we're going
  // override it with the hostname which contains no port number.
  //
  if (!required(url.port, url.protocol)) {
    url.host = url.hostname;
    url.port = '';
  }

  //
  // Parse down the `auth` for the username and password.
  //
  url.username = url.password = '';
  if (url.auth) {
    instruction = url.auth.split(':');
    url.username = instruction[0] || '';
    url.password = instruction[1] || '';
  }

  url.origin = url.protocol !== 'file:' && isSpecial(url.protocol) && url.host
    ? url.protocol +'//'+ url.host
    : 'null';

  //
  // The href is just the compiled result.
  //
  url.href = url.toString();
}

/**
 * This is convenience method for changing properties in the URL instance to
 * insure that they all propagate correctly.
 *
 * @param {String} part          Property we need to adjust.
 * @param {Mixed} value          The newly assigned value.
 * @param {Boolean|Function} fn  When setting the query, it will be the function
 *                               used to parse the query.
 *                               When setting the protocol, double slash will be
 *                               removed from the final url if it is true.
 * @returns {URL} URL instance for chaining.
 * @public
 */
function set(part, value, fn) {
  var url = this;

  switch (part) {
    case 'query':
      if ('string' === typeof value && value.length) {
        value = (fn || qs.parse)(value);
      }

      url[part] = value;
      break;

    case 'port':
      url[part] = value;

      if (!required(value, url.protocol)) {
        url.host = url.hostname;
        url[part] = '';
      } else if (value) {
        url.host = url.hostname +':'+ value;
      }

      break;

    case 'hostname':
      url[part] = value;

      if (url.port) value += ':'+ url.port;
      url.host = value;
      break;

    case 'host':
      url[part] = value;

      if (/:\d+$/.test(value)) {
        value = value.split(':');
        url.port = value.pop();
        url.hostname = value.join(':');
      } else {
        url.hostname = value;
        url.port = '';
      }

      break;

    case 'protocol':
      url.protocol = value.toLowerCase();
      url.slashes = !fn;
      break;

    case 'pathname':
    case 'hash':
      if (value) {
        var char = part === 'pathname' ? '/' : '#';
        url[part] = value.charAt(0) !== char ? char + value : value;
      } else {
        url[part] = value;
      }
      break;

    default:
      url[part] = value;
  }

  for (var i = 0; i < rules.length; i++) {
    var ins = rules[i];

    if (ins[4]) url[ins[1]] = url[ins[1]].toLowerCase();
  }

  url.origin = url.protocol !== 'file:' && isSpecial(url.protocol) && url.host
    ? url.protocol +'//'+ url.host
    : 'null';

  url.href = url.toString();

  return url;
}

/**
 * Transform the properties back in to a valid and full URL string.
 *
 * @param {Function} stringify Optional query stringify function.
 * @returns {String} Compiled version of the URL.
 * @public
 */
function toString(stringify) {
  if (!stringify || 'function' !== typeof stringify) stringify = qs.stringify;

  var query
    , url = this
    , protocol = url.protocol;

  if (protocol && protocol.charAt(protocol.length - 1) !== ':') protocol += ':';

  var result = protocol + (url.slashes || isSpecial(url.protocol) ? '//' : '');

  if (url.username) {
    result += url.username;
    if (url.password) result += ':'+ url.password;
    result += '@';
  }

  result += url.host + url.pathname;

  query = 'object' === typeof url.query ? stringify(url.query) : url.query;
  if (query) result += '?' !== query.charAt(0) ? '?'+ query : query;

  if (url.hash) result += url.hash;

  return result;
}

Url.prototype = { set: set, toString: toString };

//
// Expose the URL parser and some additional properties that might be useful for
// others or testing.
//
Url.extractProtocol = extractProtocol;
Url.location = lolcation;
Url.trimLeft = trimLeft;
Url.qs = qs;

module.exports = Url;

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"querystringify":37,"requires-port":39}],75:[function(require,module,exports){
'use strict';

var alphabet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_'.split('')
  , length = 64
  , map = {}
  , seed = 0
  , i = 0
  , prev;

/**
 * Return a string representing the specified number.
 *
 * @param {Number} num The number to convert.
 * @returns {String} The string representation of the number.
 * @api public
 */
function encode(num) {
  var encoded = '';

  do {
    encoded = alphabet[num % length] + encoded;
    num = Math.floor(num / length);
  } while (num > 0);

  return encoded;
}

/**
 * Return the integer value specified by the given string.
 *
 * @param {String} str The string to convert.
 * @returns {Number} The integer value represented by the string.
 * @api public
 */
function decode(str) {
  var decoded = 0;

  for (i = 0; i < str.length; i++) {
    decoded = decoded * length + map[str.charAt(i)];
  }

  return decoded;
}

/**
 * Yeast: A tiny growing id generator.
 *
 * @returns {String} A unique id.
 * @api public
 */
function yeast() {
  var now = encode(+new Date());

  if (now !== prev) return seed = 0, prev = now;
  return now +'.'+ encode(seed++);
}

//
// Map each character to its index.
//
for (; i < length; i++) map[alphabet[i]] = i;

//
// Expose the `yeast`, `encode` and `decode` functions.
//
yeast.encode = encode;
yeast.decode = decode;
module.exports = yeast;

},{}],76:[function(require,module,exports){
'use strict';

class AuthError extends Error {
  constructor() {
    super('Authorization required');
    this.name = 'AuthError';
    this.isAuthError = true;
  }

}

module.exports = AuthError;

},{}],77:[function(require,module,exports){
'use strict';

const RequestClient = require('./RequestClient');

const tokenStorage = require('./tokenStorage');

const getName = id => {
  return id.split('-').map(s => s.charAt(0).toUpperCase() + s.slice(1)).join(' ');
};

module.exports = class Provider extends RequestClient {
  constructor(uppy, opts) {
    super(uppy, opts);
    this.provider = opts.provider;
    this.id = this.provider;
    this.name = this.opts.name || getName(this.id);
    this.pluginId = this.opts.pluginId;
    this.tokenKey = `companion-${this.pluginId}-auth-token`;
    this.companionKeysParams = this.opts.companionKeysParams;
    this.preAuthToken = null;
  }

  headers() {
    return Promise.all([super.headers(), this.getAuthToken()]).then(_ref => {
      let [headers, token] = _ref;
      const authHeaders = {};

      if (token) {
        authHeaders['uppy-auth-token'] = token;
      }

      if (this.companionKeysParams) {
        authHeaders['uppy-credentials-params'] = btoa(JSON.stringify({
          params: this.companionKeysParams
        }));
      }

      return { ...headers,
        ...authHeaders
      };
    });
  }

  onReceiveResponse(response) {
    response = super.onReceiveResponse(response);
    const plugin = this.uppy.getPlugin(this.pluginId);
    const oldAuthenticated = plugin.getPluginState().authenticated;
    const authenticated = oldAuthenticated ? response.status !== 401 : response.status < 400;
    plugin.setPluginState({
      authenticated
    });
    return response;
  }

  setAuthToken(token) {
    return this.uppy.getPlugin(this.pluginId).storage.setItem(this.tokenKey, token);
  }

  getAuthToken() {
    return this.uppy.getPlugin(this.pluginId).storage.getItem(this.tokenKey);
  }

  authUrl(queries) {
    if (queries === void 0) {
      queries = {};
    }

    if (this.preAuthToken) {
      queries.uppyPreAuthToken = this.preAuthToken;
    }

    return `${this.hostname}/${this.id}/connect?${new URLSearchParams(queries)}`;
  }

  fileUrl(id) {
    return `${this.hostname}/${this.id}/get/${id}`;
  }

  fetchPreAuthToken() {
    if (!this.companionKeysParams) {
      return Promise.resolve();
    }

    return this.post(`${this.id}/preauth/`, {
      params: this.companionKeysParams
    }).then(res => {
      this.preAuthToken = res.token;
    }).catch(err => {
      this.uppy.log(`[CompanionClient] unable to fetch preAuthToken ${err}`, 'warning');
    });
  }

  list(directory) {
    return this.get(`${this.id}/list/${directory || ''}`);
  }

  logout() {
    return this.get(`${this.id}/logout`).then(response => Promise.all([response, this.uppy.getPlugin(this.pluginId).storage.removeItem(this.tokenKey)])).then(_ref2 => {
      let [response] = _ref2;
      return response;
    });
  }

  static initPlugin(plugin, opts, defaultOpts) {
    plugin.type = 'acquirer';
    plugin.files = [];

    if (defaultOpts) {
      plugin.opts = { ...defaultOpts,
        ...opts
      };
    }

    if (opts.serverUrl || opts.serverPattern) {
      throw new Error('`serverUrl` and `serverPattern` have been renamed to `companionUrl` and `companionAllowedHosts` respectively in the 0.30.5 release. Please consult the docs (for example, https://uppy.io/docs/instagram/ for the Instagram plugin) and use the updated options.`');
    }

    if (opts.companionAllowedHosts) {
      const pattern = opts.companionAllowedHosts; // validate companionAllowedHosts param

      if (typeof pattern !== 'string' && !Array.isArray(pattern) && !(pattern instanceof RegExp)) {
        throw new TypeError(`${plugin.id}: the option "companionAllowedHosts" must be one of string, Array, RegExp`);
      }

      plugin.opts.companionAllowedHosts = pattern;
    } else if (/^(?!https?:\/\/).*$/i.test(opts.companionUrl)) {
      // does not start with https://
      plugin.opts.companionAllowedHosts = `https://${opts.companionUrl.replace(/^\/\//, '')}`;
    } else {
      plugin.opts.companionAllowedHosts = new URL(opts.companionUrl).origin;
    }

    plugin.storage = plugin.opts.storage || tokenStorage;
  }

};

},{"./RequestClient":78,"./tokenStorage":82}],78:[function(require,module,exports){
'use strict';

var _class, _getPostResponseFunc, _getUrl, _errorHandler, _temp;

function _classPrivateFieldLooseBase(receiver, privateKey) { if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) { throw new TypeError("attempted to use private field on non-instance"); } return receiver; }

var id = 0;

function _classPrivateFieldLooseKey(name) { return "__private_" + id++ + "_" + name; }

const fetchWithNetworkError = require('./../../utils/lib/fetchWithNetworkError');

const AuthError = require('./AuthError'); // Remove the trailing slash so we can always safely append /xyz.


function stripSlash(url) {
  return url.replace(/\/$/, '');
}

async function handleJSONResponse(res) {
  if (res.status === 401) {
    throw new AuthError();
  }

  const jsonPromise = res.json();

  if (res.status < 200 || res.status > 300) {
    let errMsg = `Failed request with status: ${res.status}. ${res.statusText}`;

    try {
      const errData = await jsonPromise;
      errMsg = errData.message ? `${errMsg} message: ${errData.message}` : errMsg;
      errMsg = errData.requestId ? `${errMsg} request-Id: ${errData.requestId}` : errMsg;
    } finally {
      // eslint-disable-next-line no-unsafe-finally
      throw new Error(errMsg);
    }
  }

  return jsonPromise;
}

module.exports = (_temp = (_getPostResponseFunc = /*#__PURE__*/_classPrivateFieldLooseKey("getPostResponseFunc"), _getUrl = /*#__PURE__*/_classPrivateFieldLooseKey("getUrl"), _errorHandler = /*#__PURE__*/_classPrivateFieldLooseKey("errorHandler"), _class = class RequestClient {
  // eslint-disable-next-line global-require
  constructor(uppy, opts) {
    Object.defineProperty(this, _errorHandler, {
      value: _errorHandler2
    });
    Object.defineProperty(this, _getUrl, {
      value: _getUrl2
    });
    Object.defineProperty(this, _getPostResponseFunc, {
      writable: true,
      value: skip => response => skip ? response : this.onReceiveResponse(response)
    });
    this.uppy = uppy;
    this.opts = opts;
    this.onReceiveResponse = this.onReceiveResponse.bind(this);
    this.allowedHeaders = ['accept', 'content-type', 'uppy-auth-token'];
    this.preflightDone = false;
  }

  get hostname() {
    const {
      companion
    } = this.uppy.getState();
    const host = this.opts.companionUrl;
    return stripSlash(companion && companion[host] ? companion[host] : host);
  }

  headers() {
    const userHeaders = this.opts.companionHeaders || {};
    return Promise.resolve({ ...RequestClient.defaultHeaders,
      ...userHeaders
    });
  }

  onReceiveResponse(response) {
    const state = this.uppy.getState();
    const companion = state.companion || {};
    const host = this.opts.companionUrl;
    const {
      headers
    } = response; // Store the self-identified domain name for the Companion instance we just hit.

    if (headers.has('i-am') && headers.get('i-am') !== companion[host]) {
      this.uppy.setState({
        companion: { ...companion,
          [host]: headers.get('i-am')
        }
      });
    }

    return response;
  }

  preflight(path) {
    if (this.preflightDone) {
      return Promise.resolve(this.allowedHeaders.slice());
    }

    return fetch(_classPrivateFieldLooseBase(this, _getUrl)[_getUrl](path), {
      method: 'OPTIONS'
    }).then(response => {
      if (response.headers.has('access-control-allow-headers')) {
        this.allowedHeaders = response.headers.get('access-control-allow-headers').split(',').map(headerName => headerName.trim().toLowerCase());
      }

      this.preflightDone = true;
      return this.allowedHeaders.slice();
    }).catch(err => {
      this.uppy.log(`[CompanionClient] unable to make preflight request ${err}`, 'warning');
      this.preflightDone = true;
      return this.allowedHeaders.slice();
    });
  }

  preflightAndHeaders(path) {
    return Promise.all([this.preflight(path), this.headers()]).then(_ref => {
      let [allowedHeaders, headers] = _ref;
      // filter to keep only allowed Headers
      Object.keys(headers).forEach(header => {
        if (!allowedHeaders.includes(header.toLowerCase())) {
          this.uppy.log(`[CompanionClient] excluding disallowed header ${header}`);
          delete headers[header]; // eslint-disable-line no-param-reassign
        }
      });
      return headers;
    });
  }

  get(path, skipPostResponse) {
    const method = 'get';
    return this.preflightAndHeaders(path).then(headers => fetchWithNetworkError(_classPrivateFieldLooseBase(this, _getUrl)[_getUrl](path), {
      method,
      headers,
      credentials: this.opts.companionCookiesRule || 'same-origin'
    })).then(_classPrivateFieldLooseBase(this, _getPostResponseFunc)[_getPostResponseFunc](skipPostResponse)).then(handleJSONResponse).catch(_classPrivateFieldLooseBase(this, _errorHandler)[_errorHandler](method, path));
  }

  post(path, data, skipPostResponse) {
    const method = 'post';
    return this.preflightAndHeaders(path).then(headers => fetchWithNetworkError(_classPrivateFieldLooseBase(this, _getUrl)[_getUrl](path), {
      method,
      headers,
      credentials: this.opts.companionCookiesRule || 'same-origin',
      body: JSON.stringify(data)
    })).then(_classPrivateFieldLooseBase(this, _getPostResponseFunc)[_getPostResponseFunc](skipPostResponse)).then(handleJSONResponse).catch(_classPrivateFieldLooseBase(this, _errorHandler)[_errorHandler](method, path));
  }

  delete(path, data, skipPostResponse) {
    const method = 'delete';
    return this.preflightAndHeaders(path).then(headers => fetchWithNetworkError(`${this.hostname}/${path}`, {
      method,
      headers,
      credentials: this.opts.companionCookiesRule || 'same-origin',
      body: data ? JSON.stringify(data) : null
    })).then(_classPrivateFieldLooseBase(this, _getPostResponseFunc)[_getPostResponseFunc](skipPostResponse)).then(handleJSONResponse).catch(_classPrivateFieldLooseBase(this, _errorHandler)[_errorHandler](method, path));
  }

}), _class.VERSION = "2.0.3", _class.defaultHeaders = {
  Accept: 'application/json',
  'Content-Type': 'application/json',
  'Uppy-Versions': `@uppy/companion-client=${_class.VERSION}`
}, _temp);

function _getUrl2(url) {
  if (/^(https?:|)\/\//.test(url)) {
    return url;
  }

  return `${this.hostname}/${url}`;
}

function _errorHandler2(method, path) {
  return err => {
    var _err;

    if (!((_err = err) != null && _err.isAuthError)) {
      const error = new Error(`Could not ${method} ${_classPrivateFieldLooseBase(this, _getUrl)[_getUrl](path)}`);
      error.cause = err;
      err = error; // eslint-disable-line no-param-reassign
    }

    return Promise.reject(err);
  };
}

},{"./../../utils/lib/fetchWithNetworkError":195,"./AuthError":76}],79:[function(require,module,exports){
'use strict';

const RequestClient = require('./RequestClient');

const getName = id => {
  return id.split('-').map(s => s.charAt(0).toUpperCase() + s.slice(1)).join(' ');
};

module.exports = class SearchProvider extends RequestClient {
  constructor(uppy, opts) {
    super(uppy, opts);
    this.provider = opts.provider;
    this.id = this.provider;
    this.name = this.opts.name || getName(this.id);
    this.pluginId = this.opts.pluginId;
  }

  fileUrl(id) {
    return `${this.hostname}/search/${this.id}/get/${id}`;
  }

  search(text, queries) {
    queries = queries ? `&${queries}` : '';
    return this.get(`search/${this.id}/list?q=${encodeURIComponent(text)}${queries}`);
  }

};

},{"./RequestClient":78}],80:[function(require,module,exports){
"use strict";

var _queued, _emitter, _isOpen, _socket, _handleMessage;

let _Symbol$for, _Symbol$for2;

function _classPrivateFieldLooseBase(receiver, privateKey) { if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) { throw new TypeError("attempted to use private field on non-instance"); } return receiver; }

var id = 0;

function _classPrivateFieldLooseKey(name) { return "__private_" + id++ + "_" + name; }

const ee = require('namespace-emitter');

module.exports = (_queued = /*#__PURE__*/_classPrivateFieldLooseKey("queued"), _emitter = /*#__PURE__*/_classPrivateFieldLooseKey("emitter"), _isOpen = /*#__PURE__*/_classPrivateFieldLooseKey("isOpen"), _socket = /*#__PURE__*/_classPrivateFieldLooseKey("socket"), _handleMessage = /*#__PURE__*/_classPrivateFieldLooseKey("handleMessage"), _Symbol$for = Symbol.for('uppy test: getSocket'), _Symbol$for2 = Symbol.for('uppy test: getQueued'), class UppySocket {
  constructor(opts) {
    Object.defineProperty(this, _queued, {
      writable: true,
      value: []
    });
    Object.defineProperty(this, _emitter, {
      writable: true,
      value: ee()
    });
    Object.defineProperty(this, _isOpen, {
      writable: true,
      value: false
    });
    Object.defineProperty(this, _socket, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _handleMessage, {
      writable: true,
      value: e => {
        try {
          const message = JSON.parse(e.data);
          this.emit(message.action, message.payload);
        } catch (err) {
          // TODO: use a more robust error handler.
          console.log(err); // eslint-disable-line no-console
        }
      }
    });
    this.opts = opts;

    if (!opts || opts.autoOpen !== false) {
      this.open();
    }
  }

  get isOpen() {
    return _classPrivateFieldLooseBase(this, _isOpen)[_isOpen];
  }

  [_Symbol$for]() {
    return _classPrivateFieldLooseBase(this, _socket)[_socket];
  }

  [_Symbol$for2]() {
    return _classPrivateFieldLooseBase(this, _queued)[_queued];
  }

  open() {
    _classPrivateFieldLooseBase(this, _socket)[_socket] = new WebSocket(this.opts.target);

    _classPrivateFieldLooseBase(this, _socket)[_socket].onopen = () => {
      _classPrivateFieldLooseBase(this, _isOpen)[_isOpen] = true;

      while (_classPrivateFieldLooseBase(this, _queued)[_queued].length > 0 && _classPrivateFieldLooseBase(this, _isOpen)[_isOpen]) {
        const first = _classPrivateFieldLooseBase(this, _queued)[_queued].shift();

        this.send(first.action, first.payload);
      }
    };

    _classPrivateFieldLooseBase(this, _socket)[_socket].onclose = () => {
      _classPrivateFieldLooseBase(this, _isOpen)[_isOpen] = false;
    };

    _classPrivateFieldLooseBase(this, _socket)[_socket].onmessage = _classPrivateFieldLooseBase(this, _handleMessage)[_handleMessage];
  }

  close() {
    var _classPrivateFieldLoo;

    (_classPrivateFieldLoo = _classPrivateFieldLooseBase(this, _socket)[_socket]) == null ? void 0 : _classPrivateFieldLoo.close();
  }

  send(action, payload) {
    // attach uuid
    if (!_classPrivateFieldLooseBase(this, _isOpen)[_isOpen]) {
      _classPrivateFieldLooseBase(this, _queued)[_queued].push({
        action,
        payload
      });

      return;
    }

    _classPrivateFieldLooseBase(this, _socket)[_socket].send(JSON.stringify({
      action,
      payload
    }));
  }

  on(action, handler) {
    _classPrivateFieldLooseBase(this, _emitter)[_emitter].on(action, handler);
  }

  emit(action, payload) {
    _classPrivateFieldLooseBase(this, _emitter)[_emitter].emit(action, payload);
  }

  once(action, handler) {
    _classPrivateFieldLooseBase(this, _emitter)[_emitter].once(action, handler);
  }

});

},{"namespace-emitter":30}],81:[function(require,module,exports){
'use strict';
/**
 * Manages communications with Companion
 */

const RequestClient = require('./RequestClient');

const Provider = require('./Provider');

const SearchProvider = require('./SearchProvider');

const Socket = require('./Socket');

module.exports = {
  RequestClient,
  Provider,
  SearchProvider,
  Socket
};

},{"./Provider":77,"./RequestClient":78,"./SearchProvider":79,"./Socket":80}],82:[function(require,module,exports){
'use strict';
/**
 * This module serves as an Async wrapper for LocalStorage
 */

module.exports.setItem = (key, value) => {
  return new Promise(resolve => {
    localStorage.setItem(key, value);
    resolve();
  });
};

module.exports.getItem = key => {
  return Promise.resolve(localStorage.getItem(key));
};

module.exports.removeItem = key => {
  return new Promise(resolve => {
    localStorage.removeItem(key);
    resolve();
  });
};

},{}],83:[function(require,module,exports){
"use strict";

/**
 * Core plugin logic that all plugins share.
 *
 * BasePlugin does not contain DOM rendering so it can be used for plugins
 * without a user interface.
 *
 * See `Plugin` for the extended version with Preact rendering for interfaces.
 */
const Translator = require('./../../utils/lib/Translator');

module.exports = class BasePlugin {
  constructor(uppy, opts) {
    if (opts === void 0) {
      opts = {};
    }

    this.uppy = uppy;
    this.opts = opts;
  }

  getPluginState() {
    const {
      plugins
    } = this.uppy.getState();
    return plugins[this.id] || {};
  }

  setPluginState(update) {
    const {
      plugins
    } = this.uppy.getState();
    this.uppy.setState({
      plugins: { ...plugins,
        [this.id]: { ...plugins[this.id],
          ...update
        }
      }
    });
  }

  setOptions(newOpts) {
    this.opts = { ...this.opts,
      ...newOpts
    };
    this.setPluginState(); // so that UI re-renders with new options

    this.i18nInit();
  }

  i18nInit() {
    const translator = new Translator([this.defaultLocale, this.uppy.locale, this.opts.locale]);
    this.i18n = translator.translate.bind(translator);
    this.i18nArray = translator.translateArray.bind(translator);
    this.setPluginState(); // so that UI re-renders and we see the updated locale
  }
  /**
   * Extendable methods
   * ==================
   * These methods are here to serve as an overview of the extendable methods as well as
   * making them not conditional in use, such as `if (this.afterUpdate)`.
   */
  // eslint-disable-next-line class-methods-use-this


  addTarget() {
    throw new Error('Extend the addTarget method to add your plugin to another plugin\'s target');
  } // eslint-disable-next-line class-methods-use-this


  install() {} // eslint-disable-next-line class-methods-use-this


  uninstall() {}
  /**
   * Called when plugin is mounted, whether in DOM or into another plugin.
   * Needed because sometimes plugins are mounted separately/after `install`,
   * so this.el and this.parent might not be available in `install`.
   * This is the case with @uppy/react plugins, for example.
   */


  render() {
    throw new Error('Extend the render method to add your plugin to a DOM element');
  } // eslint-disable-next-line class-methods-use-this


  update() {} // Called after every state update, after everything's mounted. Debounced.
  // eslint-disable-next-line class-methods-use-this


  afterUpdate() {}

};

},{"./../../utils/lib/Translator":191}],84:[function(require,module,exports){
"use strict";

function _classPrivateFieldLooseBase(receiver, privateKey) { if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) { throw new TypeError("attempted to use private field on non-instance"); } return receiver; }

var id = 0;

function _classPrivateFieldLooseKey(name) { return "__private_" + id++ + "_" + name; }

const {
  render
} = require('preact');

const findDOMElement = require('./../../utils/lib/findDOMElement');

const BasePlugin = require('./BasePlugin');
/**
 * Defer a frequent call to the microtask queue.
 *
 * @param {() => T} fn
 * @returns {Promise<T>}
 */


function debounce(fn) {
  let calling = null;
  let latestArgs = null;
  return function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    latestArgs = args;

    if (!calling) {
      calling = Promise.resolve().then(() => {
        calling = null; // At this point `args` may be different from the most
        // recent state, if multiple calls happened since this task
        // was queued. So we use the `latestArgs`, which definitely
        // is the most recent call.

        return fn(...latestArgs);
      });
    }

    return calling;
  };
}
/**
 * UIPlugin is the extended version of BasePlugin to incorporate rendering with Preact.
 * Use this for plugins that need a user interface.
 *
 * For plugins without an user interface, see BasePlugin.
 */


var _updateUI = /*#__PURE__*/_classPrivateFieldLooseKey("updateUI");

class UIPlugin extends BasePlugin {
  constructor() {
    super(...arguments);
    Object.defineProperty(this, _updateUI, {
      writable: true,
      value: void 0
    });
  }

  /**
   * Check if supplied `target` is a DOM element or an `object`.
   * If it’s an object — target is a plugin, and we search `plugins`
   * for a plugin with same name and return its target.
   */
  mount(target, plugin) {
    const callerPluginName = plugin.id;
    const targetElement = findDOMElement(target);

    if (targetElement) {
      this.isTargetDOMEl = true; // When target is <body> with a single <div> element,
      // Preact thinks it’s the Uppy root element in there when doing a diff,
      // and destroys it. So we are creating a fragment (could be empty div)

      const uppyRootElement = document.createDocumentFragment(); // API for plugins that require a synchronous rerender.

      _classPrivateFieldLooseBase(this, _updateUI)[_updateUI] = debounce(state => {
        // plugin could be removed, but this.rerender is debounced below,
        // so it could still be called even after uppy.removePlugin or uppy.close
        // hence the check
        if (!this.uppy.getPlugin(this.id)) return;
        render(this.render(state), uppyRootElement);
        this.afterUpdate();
      });
      this.uppy.log(`Installing ${callerPluginName} to a DOM element '${target}'`);

      if (this.opts.replaceTargetContent) {
        // Doing render(h(null), targetElement), which should have been
        // a better way, since because the component might need to do additional cleanup when it is removed,
        // stopped working — Preact just adds null into target, not replacing
        targetElement.innerHTML = '';
      }

      render(this.render(this.uppy.getState()), uppyRootElement);
      this.el = uppyRootElement.firstElementChild;
      targetElement.appendChild(uppyRootElement);
      this.onMount();
      return this.el;
    }

    let targetPlugin;

    if (typeof target === 'object' && target instanceof UIPlugin) {
      // Targeting a plugin *instance*
      targetPlugin = target;
    } else if (typeof target === 'function') {
      // Targeting a plugin type
      const Target = target; // Find the target plugin instance.

      this.uppy.iteratePlugins(p => {
        if (p instanceof Target) {
          targetPlugin = p;
          return false;
        }
      });
    }

    if (targetPlugin) {
      this.uppy.log(`Installing ${callerPluginName} to ${targetPlugin.id}`);
      this.parent = targetPlugin;
      this.el = targetPlugin.addTarget(plugin);
      this.onMount();
      return this.el;
    }

    this.uppy.log(`Not installing ${callerPluginName}`);
    let message = `Invalid target option given to ${callerPluginName}.`;

    if (typeof target === 'function') {
      message += ' The given target is not a Plugin class. ' + 'Please check that you\'re not specifying a React Component instead of a plugin. ' + 'If you are using @uppy/* packages directly, make sure you have only 1 version of @uppy/core installed: ' + 'run `npm ls @uppy/core` on the command line and verify that all the versions match and are deduped correctly.';
    } else {
      message += 'If you meant to target an HTML element, please make sure that the element exists. ' + 'Check that the <script> tag initializing Uppy is right before the closing </body> tag at the end of the page. ' + '(see https://github.com/transloadit/uppy/issues/1042)\n\n' + 'If you meant to target a plugin, please confirm that your `import` statements or `require` calls are correct.';
    }

    throw new Error(message);
  }

  update(state) {
    if (this.el != null) {
      var _classPrivateFieldLoo, _classPrivateFieldLoo2;

      (_classPrivateFieldLoo = (_classPrivateFieldLoo2 = _classPrivateFieldLooseBase(this, _updateUI))[_updateUI]) == null ? void 0 : _classPrivateFieldLoo.call(_classPrivateFieldLoo2, state);
    }
  }

  unmount() {
    if (this.isTargetDOMEl) {
      var _this$el;

      (_this$el = this.el) == null ? void 0 : _this$el.remove();
    }

    this.onUnmount();
  } // eslint-disable-next-line class-methods-use-this


  onMount() {} // eslint-disable-next-line class-methods-use-this


  onUnmount() {}

}

module.exports = UIPlugin;

},{"./../../utils/lib/findDOMElement":197,"./BasePlugin":83,"preact":35}],85:[function(require,module,exports){
/* global AggregateError */
'use strict';

let _Symbol$for, _Symbol$for2;

function _classPrivateFieldLooseBase(receiver, privateKey) { if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) { throw new TypeError("attempted to use private field on non-instance"); } return receiver; }

var id = 0;

function _classPrivateFieldLooseKey(name) { return "__private_" + id++ + "_" + name; }

const Translator = require('./../../utils/lib/Translator');

const ee = require('namespace-emitter');

const {
  nanoid
} = require('nanoid');

const throttle = require('lodash.throttle');

const prettierBytes = require('@transloadit/prettier-bytes');

const match = require('mime-match');

const DefaultStore = require('./../../store-default');

const getFileType = require('./../../utils/lib/getFileType');

const getFileNameAndExtension = require('./../../utils/lib/getFileNameAndExtension');

const generateFileID = require('./../../utils/lib/generateFileID');

const supportsUploadProgress = require('./supportsUploadProgress');

const getFileName = require('./getFileName');

const {
  justErrorsLogger,
  debugLogger
} = require('./loggers');

const locale = require('./locale'); // Exported from here.


class RestrictionError extends Error {
  constructor() {
    super(...arguments);
    this.isRestriction = true;
  }

}

if (typeof AggregateError === 'undefined') {
  // eslint-disable-next-line no-global-assign
  globalThis.AggregateError = class AggregateError extends Error {
    constructor(errors, message) {
      super(message);
      this.errors = errors;
    }

  };
}

class AggregateRestrictionError extends AggregateError {
  constructor() {
    super(...arguments);
    this.isRestriction = true;
  }

}
/**
 * Uppy Core module.
 * Manages plugins, state updates, acts as an event bus,
 * adds/removes files and metadata.
 */


var _plugins = /*#__PURE__*/_classPrivateFieldLooseKey("plugins");

var _storeUnsubscribe = /*#__PURE__*/_classPrivateFieldLooseKey("storeUnsubscribe");

var _emitter = /*#__PURE__*/_classPrivateFieldLooseKey("emitter");

var _preProcessors = /*#__PURE__*/_classPrivateFieldLooseKey("preProcessors");

var _uploaders = /*#__PURE__*/_classPrivateFieldLooseKey("uploaders");

var _postProcessors = /*#__PURE__*/_classPrivateFieldLooseKey("postProcessors");

var _checkRestrictions = /*#__PURE__*/_classPrivateFieldLooseKey("checkRestrictions");

var _checkMinNumberOfFiles = /*#__PURE__*/_classPrivateFieldLooseKey("checkMinNumberOfFiles");

var _checkRequiredMetaFieldsOnFile = /*#__PURE__*/_classPrivateFieldLooseKey("checkRequiredMetaFieldsOnFile");

var _checkRequiredMetaFields = /*#__PURE__*/_classPrivateFieldLooseKey("checkRequiredMetaFields");

var _showOrLogErrorAndThrow = /*#__PURE__*/_classPrivateFieldLooseKey("showOrLogErrorAndThrow");

var _assertNewUploadAllowed = /*#__PURE__*/_classPrivateFieldLooseKey("assertNewUploadAllowed");

var _checkAndCreateFileStateObject = /*#__PURE__*/_classPrivateFieldLooseKey("checkAndCreateFileStateObject");

var _startIfAutoProceed = /*#__PURE__*/_classPrivateFieldLooseKey("startIfAutoProceed");

var _addListeners = /*#__PURE__*/_classPrivateFieldLooseKey("addListeners");

var _updateOnlineStatus = /*#__PURE__*/_classPrivateFieldLooseKey("updateOnlineStatus");

var _createUpload = /*#__PURE__*/_classPrivateFieldLooseKey("createUpload");

var _getUpload = /*#__PURE__*/_classPrivateFieldLooseKey("getUpload");

var _removeUpload = /*#__PURE__*/_classPrivateFieldLooseKey("removeUpload");

var _runUpload = /*#__PURE__*/_classPrivateFieldLooseKey("runUpload");

_Symbol$for = Symbol.for('uppy test: getPlugins');
_Symbol$for2 = Symbol.for('uppy test: createUpload');

class Uppy {
  // eslint-disable-next-line global-require

  /** @type {Record<string, BasePlugin[]>} */

  /**
   * Instantiate Uppy
   *
   * @param {object} opts — Uppy options
   */
  constructor(_opts) {
    Object.defineProperty(this, _runUpload, {
      value: _runUpload2
    });
    Object.defineProperty(this, _removeUpload, {
      value: _removeUpload2
    });
    Object.defineProperty(this, _getUpload, {
      value: _getUpload2
    });
    Object.defineProperty(this, _createUpload, {
      value: _createUpload2
    });
    Object.defineProperty(this, _addListeners, {
      value: _addListeners2
    });
    Object.defineProperty(this, _startIfAutoProceed, {
      value: _startIfAutoProceed2
    });
    Object.defineProperty(this, _checkAndCreateFileStateObject, {
      value: _checkAndCreateFileStateObject2
    });
    Object.defineProperty(this, _assertNewUploadAllowed, {
      value: _assertNewUploadAllowed2
    });
    Object.defineProperty(this, _showOrLogErrorAndThrow, {
      value: _showOrLogErrorAndThrow2
    });
    Object.defineProperty(this, _checkRequiredMetaFields, {
      value: _checkRequiredMetaFields2
    });
    Object.defineProperty(this, _checkRequiredMetaFieldsOnFile, {
      value: _checkRequiredMetaFieldsOnFile2
    });
    Object.defineProperty(this, _checkMinNumberOfFiles, {
      value: _checkMinNumberOfFiles2
    });
    Object.defineProperty(this, _checkRestrictions, {
      value: _checkRestrictions2
    });
    Object.defineProperty(this, _plugins, {
      writable: true,
      value: Object.create(null)
    });
    Object.defineProperty(this, _storeUnsubscribe, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _emitter, {
      writable: true,
      value: ee()
    });
    Object.defineProperty(this, _preProcessors, {
      writable: true,
      value: new Set()
    });
    Object.defineProperty(this, _uploaders, {
      writable: true,
      value: new Set()
    });
    Object.defineProperty(this, _postProcessors, {
      writable: true,
      value: new Set()
    });
    Object.defineProperty(this, _updateOnlineStatus, {
      writable: true,
      value: this.updateOnlineStatus.bind(this)
    });
    this.defaultLocale = locale;
    const defaultOptions = {
      id: 'uppy',
      autoProceed: false,

      /**
       * @deprecated The method should not be used
       */
      allowMultipleUploads: true,
      allowMultipleUploadBatches: true,
      debug: false,
      restrictions: {
        maxFileSize: null,
        minFileSize: null,
        maxTotalFileSize: null,
        maxNumberOfFiles: null,
        minNumberOfFiles: null,
        allowedFileTypes: null,
        requiredMetaFields: []
      },
      meta: {},
      onBeforeFileAdded: currentFile => currentFile,
      onBeforeUpload: files => files,
      store: DefaultStore(),
      logger: justErrorsLogger,
      infoTimeout: 5000
    }; // Merge default options with the ones set by user,
    // making sure to merge restrictions too

    this.opts = { ...defaultOptions,
      ..._opts,
      restrictions: { ...defaultOptions.restrictions,
        ...(_opts && _opts.restrictions)
      }
    }; // Support debug: true for backwards-compatability, unless logger is set in opts
    // opts instead of this.opts to avoid comparing objects — we set logger: justErrorsLogger in defaultOptions

    if (_opts && _opts.logger && _opts.debug) {
      this.log('You are using a custom `logger`, but also set `debug: true`, which uses built-in logger to output logs to console. Ignoring `debug: true` and using your custom `logger`.', 'warning');
    } else if (_opts && _opts.debug) {
      this.opts.logger = debugLogger;
    }

    this.log(`Using Core v${this.constructor.VERSION}`);

    if (this.opts.restrictions.allowedFileTypes && this.opts.restrictions.allowedFileTypes !== null && !Array.isArray(this.opts.restrictions.allowedFileTypes)) {
      throw new TypeError('`restrictions.allowedFileTypes` must be an array');
    }

    this.i18nInit(); // ___Why throttle at 500ms?
    //    - We must throttle at >250ms for superfocus in Dashboard to work well
    //    (because animation takes 0.25s, and we want to wait for all animations to be over before refocusing).
    //    [Practical Check]: if thottle is at 100ms, then if you are uploading a file,
    //    and click 'ADD MORE FILES', - focus won't activate in Firefox.
    //    - We must throttle at around >500ms to avoid performance lags.
    //    [Practical Check] Firefox, try to upload a big file for a prolonged period of time. Laptop will start to heat up.

    this.calculateProgress = throttle(this.calculateProgress.bind(this), 500, {
      leading: true,
      trailing: true
    });
    this.store = this.opts.store;
    this.setState({
      plugins: {},
      files: {},
      currentUploads: {},
      allowNewUpload: true,
      capabilities: {
        uploadProgress: supportsUploadProgress(),
        individualCancellation: true,
        resumableUploads: false
      },
      totalProgress: 0,
      meta: { ...this.opts.meta
      },
      info: [],
      recoveredState: null
    });
    _classPrivateFieldLooseBase(this, _storeUnsubscribe)[_storeUnsubscribe] = this.store.subscribe((prevState, nextState, patch) => {
      this.emit('state-update', prevState, nextState, patch);
      this.updateAll(nextState);
    }); // Exposing uppy object on window for debugging and testing

    if (this.opts.debug && typeof window !== 'undefined') {
      window[this.opts.id] = this;
    }

    _classPrivateFieldLooseBase(this, _addListeners)[_addListeners]();
  }

  emit(event) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    _classPrivateFieldLooseBase(this, _emitter)[_emitter].emit(event, ...args);
  }

  on(event, callback) {
    _classPrivateFieldLooseBase(this, _emitter)[_emitter].on(event, callback);

    return this;
  }

  once(event, callback) {
    _classPrivateFieldLooseBase(this, _emitter)[_emitter].once(event, callback);

    return this;
  }

  off(event, callback) {
    _classPrivateFieldLooseBase(this, _emitter)[_emitter].off(event, callback);

    return this;
  }
  /**
   * Iterate on all plugins and run `update` on them.
   * Called each time state changes.
   *
   */


  updateAll(state) {
    this.iteratePlugins(plugin => {
      plugin.update(state);
    });
  }
  /**
   * Updates state with a patch
   *
   * @param {object} patch {foo: 'bar'}
   */


  setState(patch) {
    this.store.setState(patch);
  }
  /**
   * Returns current state.
   *
   * @returns {object}
   */


  getState() {
    return this.store.getState();
  }
  /**
   * Back compat for when uppy.state is used instead of uppy.getState().
   *
   * @deprecated
   */


  get state() {
    // Here, state is a non-enumerable property.
    return this.getState();
  }
  /**
   * Shorthand to set state for a specific file.
   */


  setFileState(fileID, state) {
    if (!this.getState().files[fileID]) {
      throw new Error(`Can’t set state for ${fileID} (the file could have been removed)`);
    }

    this.setState({
      files: { ...this.getState().files,
        [fileID]: { ...this.getState().files[fileID],
          ...state
        }
      }
    });
  }

  i18nInit() {
    const translator = new Translator([this.defaultLocale, this.opts.locale]);
    this.i18n = translator.translate.bind(translator);
    this.i18nArray = translator.translateArray.bind(translator);
    this.locale = translator.locale;
  }

  setOptions(newOpts) {
    this.opts = { ...this.opts,
      ...newOpts,
      restrictions: { ...this.opts.restrictions,
        ...(newOpts && newOpts.restrictions)
      }
    };

    if (newOpts.meta) {
      this.setMeta(newOpts.meta);
    }

    this.i18nInit();

    if (newOpts.locale) {
      this.iteratePlugins(plugin => {
        plugin.setOptions();
      });
    } // Note: this is not the preact `setState`, it's an internal function that has the same name.


    this.setState(); // so that UI re-renders with new options
  }

  resetProgress() {
    const defaultProgress = {
      percentage: 0,
      bytesUploaded: 0,
      uploadComplete: false,
      uploadStarted: null
    };
    const files = { ...this.getState().files
    };
    const updatedFiles = {};
    Object.keys(files).forEach(fileID => {
      const updatedFile = { ...files[fileID]
      };
      updatedFile.progress = { ...updatedFile.progress,
        ...defaultProgress
      };
      updatedFiles[fileID] = updatedFile;
    });
    this.setState({
      files: updatedFiles,
      totalProgress: 0
    });
    this.emit('reset-progress');
  }

  addPreProcessor(fn) {
    _classPrivateFieldLooseBase(this, _preProcessors)[_preProcessors].add(fn);
  }

  removePreProcessor(fn) {
    return _classPrivateFieldLooseBase(this, _preProcessors)[_preProcessors].delete(fn);
  }

  addPostProcessor(fn) {
    _classPrivateFieldLooseBase(this, _postProcessors)[_postProcessors].add(fn);
  }

  removePostProcessor(fn) {
    return _classPrivateFieldLooseBase(this, _postProcessors)[_postProcessors].delete(fn);
  }

  addUploader(fn) {
    _classPrivateFieldLooseBase(this, _uploaders)[_uploaders].add(fn);
  }

  removeUploader(fn) {
    return _classPrivateFieldLooseBase(this, _uploaders)[_uploaders].delete(fn);
  }

  setMeta(data) {
    const updatedMeta = { ...this.getState().meta,
      ...data
    };
    const updatedFiles = { ...this.getState().files
    };
    Object.keys(updatedFiles).forEach(fileID => {
      updatedFiles[fileID] = { ...updatedFiles[fileID],
        meta: { ...updatedFiles[fileID].meta,
          ...data
        }
      };
    });
    this.log('Adding metadata:');
    this.log(data);
    this.setState({
      meta: updatedMeta,
      files: updatedFiles
    });
  }

  setFileMeta(fileID, data) {
    const updatedFiles = { ...this.getState().files
    };

    if (!updatedFiles[fileID]) {
      this.log('Was trying to set metadata for a file that has been removed: ', fileID);
      return;
    }

    const newMeta = { ...updatedFiles[fileID].meta,
      ...data
    };
    updatedFiles[fileID] = { ...updatedFiles[fileID],
      meta: newMeta
    };
    this.setState({
      files: updatedFiles
    });
  }
  /**
   * Get a file object.
   *
   * @param {string} fileID The ID of the file object to return.
   */


  getFile(fileID) {
    return this.getState().files[fileID];
  }
  /**
   * Get all files in an array.
   */


  getFiles() {
    const {
      files
    } = this.getState();
    return Object.values(files);
  }

  getObjectOfFilesPerState() {
    const {
      files: filesObject,
      totalProgress,
      error
    } = this.getState();
    const files = Object.values(filesObject);
    const inProgressFiles = files.filter(_ref => {
      let {
        progress
      } = _ref;
      return !progress.uploadComplete && progress.uploadStarted;
    });
    const newFiles = files.filter(file => !file.progress.uploadStarted);
    const startedFiles = files.filter(file => file.progress.uploadStarted || file.progress.preprocess || file.progress.postprocess);
    const uploadStartedFiles = files.filter(file => file.progress.uploadStarted);
    const pausedFiles = files.filter(file => file.isPaused);
    const completeFiles = files.filter(file => file.progress.uploadComplete);
    const erroredFiles = files.filter(file => file.error);
    const inProgressNotPausedFiles = inProgressFiles.filter(file => !file.isPaused);
    const processingFiles = files.filter(file => file.progress.preprocess || file.progress.postprocess);
    return {
      newFiles,
      startedFiles,
      uploadStartedFiles,
      pausedFiles,
      completeFiles,
      erroredFiles,
      inProgressFiles,
      inProgressNotPausedFiles,
      processingFiles,
      isUploadStarted: uploadStartedFiles.length > 0,
      isAllComplete: totalProgress === 100 && completeFiles.length === files.length && processingFiles.length === 0,
      isAllErrored: !!error && erroredFiles.length === files.length,
      isAllPaused: inProgressFiles.length !== 0 && pausedFiles.length === inProgressFiles.length,
      isUploadInProgress: inProgressFiles.length > 0,
      isSomeGhost: files.some(file => file.isGhost)
    };
  }
  /**
   * A public wrapper for _checkRestrictions — checks if a file passes a set of restrictions.
   * For use in UI pluigins (like Providers), to disallow selecting files that won’t pass restrictions.
   *
   * @param {object} file object to check
   * @param {Array} [files] array to check maxNumberOfFiles and maxTotalFileSize
   * @returns {object} { result: true/false, reason: why file didn’t pass restrictions }
   */


  validateRestrictions(file, files) {
    try {
      _classPrivateFieldLooseBase(this, _checkRestrictions)[_checkRestrictions](file, files);

      return {
        result: true
      };
    } catch (err) {
      return {
        result: false,
        reason: err.message
      };
    }
  }
  /**
   * Check if file passes a set of restrictions set in options: maxFileSize, minFileSize,
   * maxNumberOfFiles and allowedFileTypes.
   *
   * @param {object} file object to check
   * @param {Array} [files] array to check maxNumberOfFiles and maxTotalFileSize
   * @private
   */


  checkIfFileAlreadyExists(fileID) {
    const {
      files
    } = this.getState();

    if (files[fileID] && !files[fileID].isGhost) {
      return true;
    }

    return false;
  }
  /**
   * Create a file state object based on user-provided `addFile()` options.
   *
   * Note this is extremely side-effectful and should only be done when a file state object
   * will be added to state immediately afterward!
   *
   * The `files` value is passed in because it may be updated by the caller without updating the store.
   */


  /**
   * Add a new file to `state.files`. This will run `onBeforeFileAdded`,
   * try to guess file type in a clever way, check file against restrictions,
   * and start an upload if `autoProceed === true`.
   *
   * @param {object} file object to add
   * @returns {string} id for the added file
   */
  addFile(file) {
    _classPrivateFieldLooseBase(this, _assertNewUploadAllowed)[_assertNewUploadAllowed](file);

    const {
      files
    } = this.getState();

    let newFile = _classPrivateFieldLooseBase(this, _checkAndCreateFileStateObject)[_checkAndCreateFileStateObject](files, file); // Users are asked to re-select recovered files without data,
    // and to keep the progress, meta and everthing else, we only replace said data


    if (files[newFile.id] && files[newFile.id].isGhost) {
      newFile = { ...files[newFile.id],
        data: file.data,
        isGhost: false
      };
      this.log(`Replaced the blob in the restored ghost file: ${newFile.name}, ${newFile.id}`);
    }

    this.setState({
      files: { ...files,
        [newFile.id]: newFile
      }
    });
    this.emit('file-added', newFile);
    this.emit('files-added', [newFile]);
    this.log(`Added file: ${newFile.name}, ${newFile.id}, mime type: ${newFile.type}`);

    _classPrivateFieldLooseBase(this, _startIfAutoProceed)[_startIfAutoProceed]();

    return newFile.id;
  }
  /**
   * Add multiple files to `state.files`. See the `addFile()` documentation.
   *
   * If an error occurs while adding a file, it is logged and the user is notified.
   * This is good for UI plugins, but not for programmatic use.
   * Programmatic users should usually still use `addFile()` on individual files.
   */


  addFiles(fileDescriptors) {
    _classPrivateFieldLooseBase(this, _assertNewUploadAllowed)[_assertNewUploadAllowed](); // create a copy of the files object only once


    const files = { ...this.getState().files
    };
    const newFiles = [];
    const errors = [];

    for (let i = 0; i < fileDescriptors.length; i++) {
      try {
        let newFile = _classPrivateFieldLooseBase(this, _checkAndCreateFileStateObject)[_checkAndCreateFileStateObject](files, fileDescriptors[i]); // Users are asked to re-select recovered files without data,
        // and to keep the progress, meta and everthing else, we only replace said data


        if (files[newFile.id] && files[newFile.id].isGhost) {
          newFile = { ...files[newFile.id],
            data: fileDescriptors[i].data,
            isGhost: false
          };
          this.log(`Replaced blob in a ghost file: ${newFile.name}, ${newFile.id}`);
        }

        files[newFile.id] = newFile;
        newFiles.push(newFile);
      } catch (err) {
        if (!err.isRestriction) {
          errors.push(err);
        }
      }
    }

    this.setState({
      files
    });
    newFiles.forEach(newFile => {
      this.emit('file-added', newFile);
    });
    this.emit('files-added', newFiles);

    if (newFiles.length > 5) {
      this.log(`Added batch of ${newFiles.length} files`);
    } else {
      Object.keys(newFiles).forEach(fileID => {
        this.log(`Added file: ${newFiles[fileID].name}\n id: ${newFiles[fileID].id}\n type: ${newFiles[fileID].type}`);
      });
    }

    if (newFiles.length > 0) {
      _classPrivateFieldLooseBase(this, _startIfAutoProceed)[_startIfAutoProceed]();
    }

    if (errors.length > 0) {
      let message = 'Multiple errors occurred while adding files:\n';
      errors.forEach(subError => {
        message += `\n * ${subError.message}`;
      });
      this.info({
        message: this.i18n('addBulkFilesFailed', {
          smart_count: errors.length
        }),
        details: message
      }, 'error', this.opts.infoTimeout);

      if (typeof AggregateError === 'function') {
        throw new AggregateError(errors, message);
      } else {
        const err = new Error(message);
        err.errors = errors;
        throw err;
      }
    }
  }

  removeFiles(fileIDs, reason) {
    const {
      files,
      currentUploads
    } = this.getState();
    const updatedFiles = { ...files
    };
    const updatedUploads = { ...currentUploads
    };
    const removedFiles = Object.create(null);
    fileIDs.forEach(fileID => {
      if (files[fileID]) {
        removedFiles[fileID] = files[fileID];
        delete updatedFiles[fileID];
      }
    }); // Remove files from the `fileIDs` list in each upload.

    function fileIsNotRemoved(uploadFileID) {
      return removedFiles[uploadFileID] === undefined;
    }

    Object.keys(updatedUploads).forEach(uploadID => {
      const newFileIDs = currentUploads[uploadID].fileIDs.filter(fileIsNotRemoved); // Remove the upload if no files are associated with it anymore.

      if (newFileIDs.length === 0) {
        delete updatedUploads[uploadID];
        return;
      }

      updatedUploads[uploadID] = { ...currentUploads[uploadID],
        fileIDs: newFileIDs
      };
    });
    const stateUpdate = {
      currentUploads: updatedUploads,
      files: updatedFiles
    }; // If all files were removed - allow new uploads,
    // and clear recoveredState

    if (Object.keys(updatedFiles).length === 0) {
      stateUpdate.allowNewUpload = true;
      stateUpdate.error = null;
      stateUpdate.recoveredState = null;
    }

    this.setState(stateUpdate);
    this.calculateTotalProgress();
    const removedFileIDs = Object.keys(removedFiles);
    removedFileIDs.forEach(fileID => {
      this.emit('file-removed', removedFiles[fileID], reason);
    });

    if (removedFileIDs.length > 5) {
      this.log(`Removed ${removedFileIDs.length} files`);
    } else {
      this.log(`Removed files: ${removedFileIDs.join(', ')}`);
    }
  }

  removeFile(fileID, reason) {
    if (reason === void 0) {
      reason = null;
    }

    this.removeFiles([fileID], reason);
  }

  pauseResume(fileID) {
    if (!this.getState().capabilities.resumableUploads || this.getFile(fileID).uploadComplete) {
      return undefined;
    }

    const wasPaused = this.getFile(fileID).isPaused || false;
    const isPaused = !wasPaused;
    this.setFileState(fileID, {
      isPaused
    });
    this.emit('upload-pause', fileID, isPaused);
    return isPaused;
  }

  pauseAll() {
    const updatedFiles = { ...this.getState().files
    };
    const inProgressUpdatedFiles = Object.keys(updatedFiles).filter(file => {
      return !updatedFiles[file].progress.uploadComplete && updatedFiles[file].progress.uploadStarted;
    });
    inProgressUpdatedFiles.forEach(file => {
      const updatedFile = { ...updatedFiles[file],
        isPaused: true
      };
      updatedFiles[file] = updatedFile;
    });
    this.setState({
      files: updatedFiles
    });
    this.emit('pause-all');
  }

  resumeAll() {
    const updatedFiles = { ...this.getState().files
    };
    const inProgressUpdatedFiles = Object.keys(updatedFiles).filter(file => {
      return !updatedFiles[file].progress.uploadComplete && updatedFiles[file].progress.uploadStarted;
    });
    inProgressUpdatedFiles.forEach(file => {
      const updatedFile = { ...updatedFiles[file],
        isPaused: false,
        error: null
      };
      updatedFiles[file] = updatedFile;
    });
    this.setState({
      files: updatedFiles
    });
    this.emit('resume-all');
  }

  retryAll() {
    const updatedFiles = { ...this.getState().files
    };
    const filesToRetry = Object.keys(updatedFiles).filter(file => {
      return updatedFiles[file].error;
    });
    filesToRetry.forEach(file => {
      const updatedFile = { ...updatedFiles[file],
        isPaused: false,
        error: null
      };
      updatedFiles[file] = updatedFile;
    });
    this.setState({
      files: updatedFiles,
      error: null
    });
    this.emit('retry-all', filesToRetry);

    if (filesToRetry.length === 0) {
      return Promise.resolve({
        successful: [],
        failed: []
      });
    }

    const uploadID = _classPrivateFieldLooseBase(this, _createUpload)[_createUpload](filesToRetry, {
      forceAllowNewUpload: true // create new upload even if allowNewUpload: false

    });

    return _classPrivateFieldLooseBase(this, _runUpload)[_runUpload](uploadID);
  }

  cancelAll() {
    this.emit('cancel-all');
    const {
      files
    } = this.getState();
    const fileIDs = Object.keys(files);

    if (fileIDs.length) {
      this.removeFiles(fileIDs, 'cancel-all');
    }

    this.setState({
      totalProgress: 0,
      error: null,
      recoveredState: null
    });
  }

  retryUpload(fileID) {
    this.setFileState(fileID, {
      error: null,
      isPaused: false
    });
    this.emit('upload-retry', fileID);

    const uploadID = _classPrivateFieldLooseBase(this, _createUpload)[_createUpload]([fileID], {
      forceAllowNewUpload: true // create new upload even if allowNewUpload: false

    });

    return _classPrivateFieldLooseBase(this, _runUpload)[_runUpload](uploadID);
  }

  reset() {
    this.cancelAll();
  }

  logout() {
    this.iteratePlugins(plugin => {
      if (plugin.provider && plugin.provider.logout) {
        plugin.provider.logout();
      }
    });
  }

  calculateProgress(file, data) {
    if (!this.getFile(file.id)) {
      this.log(`Not setting progress for a file that has been removed: ${file.id}`);
      return;
    } // bytesTotal may be null or zero; in that case we can't divide by it


    const canHavePercentage = Number.isFinite(data.bytesTotal) && data.bytesTotal > 0;
    this.setFileState(file.id, {
      progress: { ...this.getFile(file.id).progress,
        bytesUploaded: data.bytesUploaded,
        bytesTotal: data.bytesTotal,
        percentage: canHavePercentage ? Math.round(data.bytesUploaded / data.bytesTotal * 100) : 0
      }
    });
    this.calculateTotalProgress();
  }

  calculateTotalProgress() {
    // calculate total progress, using the number of files currently uploading,
    // multiplied by 100 and the summ of individual progress of each file
    const files = this.getFiles();
    const inProgress = files.filter(file => {
      return file.progress.uploadStarted || file.progress.preprocess || file.progress.postprocess;
    });

    if (inProgress.length === 0) {
      this.emit('progress', 0);
      this.setState({
        totalProgress: 0
      });
      return;
    }

    const sizedFiles = inProgress.filter(file => file.progress.bytesTotal != null);
    const unsizedFiles = inProgress.filter(file => file.progress.bytesTotal == null);

    if (sizedFiles.length === 0) {
      const progressMax = inProgress.length * 100;
      const currentProgress = unsizedFiles.reduce((acc, file) => {
        return acc + file.progress.percentage;
      }, 0);
      const totalProgress = Math.round(currentProgress / progressMax * 100);
      this.setState({
        totalProgress
      });
      return;
    }

    let totalSize = sizedFiles.reduce((acc, file) => {
      return acc + file.progress.bytesTotal;
    }, 0);
    const averageSize = totalSize / sizedFiles.length;
    totalSize += averageSize * unsizedFiles.length;
    let uploadedSize = 0;
    sizedFiles.forEach(file => {
      uploadedSize += file.progress.bytesUploaded;
    });
    unsizedFiles.forEach(file => {
      uploadedSize += averageSize * (file.progress.percentage || 0) / 100;
    });
    let totalProgress = totalSize === 0 ? 0 : Math.round(uploadedSize / totalSize * 100); // hot fix, because:
    // uploadedSize ended up larger than totalSize, resulting in 1325% total

    if (totalProgress > 100) {
      totalProgress = 100;
    }

    this.setState({
      totalProgress
    });
    this.emit('progress', totalProgress);
  }
  /**
   * Registers listeners for all global actions, like:
   * `error`, `file-removed`, `upload-progress`
   */


  updateOnlineStatus() {
    const online = typeof window.navigator.onLine !== 'undefined' ? window.navigator.onLine : true;

    if (!online) {
      this.emit('is-offline');
      this.info(this.i18n('noInternetConnection'), 'error', 0);
      this.wasOffline = true;
    } else {
      this.emit('is-online');

      if (this.wasOffline) {
        this.emit('back-online');
        this.info(this.i18n('connectedToInternet'), 'success', 3000);
        this.wasOffline = false;
      }
    }
  }

  getID() {
    return this.opts.id;
  }
  /**
   * Registers a plugin with Core.
   *
   * @param {object} Plugin object
   * @param {object} [opts] object with options to be passed to Plugin
   * @returns {object} self for chaining
   */
  // eslint-disable-next-line no-shadow


  use(Plugin, opts) {
    if (typeof Plugin !== 'function') {
      const msg = `Expected a plugin class, but got ${Plugin === null ? 'null' : typeof Plugin}.` + ' Please verify that the plugin was imported and spelled correctly.';
      throw new TypeError(msg);
    } // Instantiate


    const plugin = new Plugin(this, opts);
    const pluginId = plugin.id;

    if (!pluginId) {
      throw new Error('Your plugin must have an id');
    }

    if (!plugin.type) {
      throw new Error('Your plugin must have a type');
    }

    const existsPluginAlready = this.getPlugin(pluginId);

    if (existsPluginAlready) {
      const msg = `Already found a plugin named '${existsPluginAlready.id}'. ` + `Tried to use: '${pluginId}'.\n` + 'Uppy plugins must have unique `id` options. See https://uppy.io/docs/plugins/#id.';
      throw new Error(msg);
    }

    if (Plugin.VERSION) {
      this.log(`Using ${pluginId} v${Plugin.VERSION}`);
    }

    if (plugin.type in _classPrivateFieldLooseBase(this, _plugins)[_plugins]) {
      _classPrivateFieldLooseBase(this, _plugins)[_plugins][plugin.type].push(plugin);
    } else {
      _classPrivateFieldLooseBase(this, _plugins)[_plugins][plugin.type] = [plugin];
    }

    plugin.install();
    return this;
  }
  /**
   * Find one Plugin by name.
   *
   * @param {string} id plugin id
   * @returns {BasePlugin|undefined}
   */


  getPlugin(id) {
    for (const plugins of Object.values(_classPrivateFieldLooseBase(this, _plugins)[_plugins])) {
      const foundPlugin = plugins.find(plugin => plugin.id === id);
      if (foundPlugin != null) return foundPlugin;
    }

    return undefined;
  }

  [_Symbol$for](type) {
    return _classPrivateFieldLooseBase(this, _plugins)[_plugins][type];
  }
  /**
   * Iterate through all `use`d plugins.
   *
   * @param {Function} method that will be run on each plugin
   */


  iteratePlugins(method) {
    Object.values(_classPrivateFieldLooseBase(this, _plugins)[_plugins]).flat(1).forEach(method);
  }
  /**
   * Uninstall and remove a plugin.
   *
   * @param {object} instance The plugin instance to remove.
   */


  removePlugin(instance) {
    this.log(`Removing plugin ${instance.id}`);
    this.emit('plugin-remove', instance);

    if (instance.uninstall) {
      instance.uninstall();
    }

    const list = _classPrivateFieldLooseBase(this, _plugins)[_plugins][instance.type]; // list.indexOf failed here, because Vue3 converted the plugin instance
    // to a Proxy object, which failed the strict comparison test:
    // obj !== objProxy


    const index = list.findIndex(item => item.id === instance.id);

    if (index !== -1) {
      list.splice(index, 1);
    }

    const state = this.getState();
    const updatedState = {
      plugins: { ...state.plugins,
        [instance.id]: undefined
      }
    };
    this.setState(updatedState);
  }
  /**
   * Uninstall all plugins and close down this Uppy instance.
   */


  close() {
    this.log(`Closing Uppy instance ${this.opts.id}: removing all files and uninstalling plugins`);
    this.reset();

    _classPrivateFieldLooseBase(this, _storeUnsubscribe)[_storeUnsubscribe]();

    this.iteratePlugins(plugin => {
      this.removePlugin(plugin);
    });

    if (typeof window !== 'undefined' && window.removeEventListener) {
      window.removeEventListener('online', _classPrivateFieldLooseBase(this, _updateOnlineStatus)[_updateOnlineStatus]);
      window.removeEventListener('offline', _classPrivateFieldLooseBase(this, _updateOnlineStatus)[_updateOnlineStatus]);
    }
  }

  hideInfo() {
    const {
      info
    } = this.getState();
    this.setState({
      info: info.slice(1)
    });
    this.emit('info-hidden');
  }
  /**
   * Set info message in `state.info`, so that UI plugins like `Informer`
   * can display the message.
   *
   * @param {string | object} message Message to be displayed by the informer
   * @param {string} [type]
   * @param {number} [duration]
   */


  info(message, type, duration) {
    if (type === void 0) {
      type = 'info';
    }

    if (duration === void 0) {
      duration = 3000;
    }

    const isComplexMessage = typeof message === 'object';
    this.setState({
      info: [...this.getState().info, {
        type,
        message: isComplexMessage ? message.message : message,
        details: isComplexMessage ? message.details : null
      }]
    });
    setTimeout(() => this.hideInfo(), duration);
    this.emit('info-visible');
  }
  /**
   * Passes messages to a function, provided in `opts.logger`.
   * If `opts.logger: Uppy.debugLogger` or `opts.debug: true`, logs to the browser console.
   *
   * @param {string|object} message to log
   * @param {string} [type] optional `error` or `warning`
   */


  log(message, type) {
    const {
      logger
    } = this.opts;

    switch (type) {
      case 'error':
        logger.error(message);
        break;

      case 'warning':
        logger.warn(message);
        break;

      default:
        logger.debug(message);
        break;
    }
  }
  /**
   * Restore an upload by its ID.
   */


  restore(uploadID) {
    this.log(`Core: attempting to restore upload "${uploadID}"`);

    if (!this.getState().currentUploads[uploadID]) {
      _classPrivateFieldLooseBase(this, _removeUpload)[_removeUpload](uploadID);

      return Promise.reject(new Error('Nonexistent upload'));
    }

    return _classPrivateFieldLooseBase(this, _runUpload)[_runUpload](uploadID);
  }
  /**
   * Create an upload for a bunch of files.
   *
   * @param {Array<string>} fileIDs File IDs to include in this upload.
   * @returns {string} ID of this upload.
   */


  [_Symbol$for2]() {
    return _classPrivateFieldLooseBase(this, _createUpload)[_createUpload](...arguments);
  }

  /**
   * Add data to an upload's result object.
   *
   * @param {string} uploadID The ID of the upload.
   * @param {object} data Data properties to add to the result object.
   */
  addResultData(uploadID, data) {
    if (!_classPrivateFieldLooseBase(this, _getUpload)[_getUpload](uploadID)) {
      this.log(`Not setting result for an upload that has been removed: ${uploadID}`);
      return;
    }

    const {
      currentUploads
    } = this.getState();
    const currentUpload = { ...currentUploads[uploadID],
      result: { ...currentUploads[uploadID].result,
        ...data
      }
    };
    this.setState({
      currentUploads: { ...currentUploads,
        [uploadID]: currentUpload
      }
    });
  }
  /**
   * Remove an upload, eg. if it has been canceled or completed.
   *
   * @param {string} uploadID The ID of the upload.
   */


  /**
   * Start an upload for all the files that are not currently being uploaded.
   *
   * @returns {Promise}
   */
  upload() {
    var _classPrivateFieldLoo;

    if (!((_classPrivateFieldLoo = _classPrivateFieldLooseBase(this, _plugins)[_plugins].uploader) != null && _classPrivateFieldLoo.length)) {
      this.log('No uploader type plugins are used', 'warning');
    }

    let {
      files
    } = this.getState();
    const onBeforeUploadResult = this.opts.onBeforeUpload(files);

    if (onBeforeUploadResult === false) {
      return Promise.reject(new Error('Not starting the upload because onBeforeUpload returned false'));
    }

    if (onBeforeUploadResult && typeof onBeforeUploadResult === 'object') {
      files = onBeforeUploadResult; // Updating files in state, because uploader plugins receive file IDs,
      // and then fetch the actual file object from state

      this.setState({
        files
      });
    }

    return Promise.resolve().then(() => {
      _classPrivateFieldLooseBase(this, _checkMinNumberOfFiles)[_checkMinNumberOfFiles](files);

      _classPrivateFieldLooseBase(this, _checkRequiredMetaFields)[_checkRequiredMetaFields](files);
    }).catch(err => {
      _classPrivateFieldLooseBase(this, _showOrLogErrorAndThrow)[_showOrLogErrorAndThrow](err);
    }).then(() => {
      const {
        currentUploads
      } = this.getState(); // get a list of files that are currently assigned to uploads

      const currentlyUploadingFiles = Object.values(currentUploads).flatMap(curr => curr.fileIDs);
      const waitingFileIDs = [];
      Object.keys(files).forEach(fileID => {
        const file = this.getFile(fileID); // if the file hasn't started uploading and hasn't already been assigned to an upload..

        if (!file.progress.uploadStarted && currentlyUploadingFiles.indexOf(fileID) === -1) {
          waitingFileIDs.push(file.id);
        }
      });

      const uploadID = _classPrivateFieldLooseBase(this, _createUpload)[_createUpload](waitingFileIDs);

      return _classPrivateFieldLooseBase(this, _runUpload)[_runUpload](uploadID);
    }).catch(err => {
      _classPrivateFieldLooseBase(this, _showOrLogErrorAndThrow)[_showOrLogErrorAndThrow](err, {
        showInformer: false
      });
    });
  }

}

function _checkRestrictions2(file, files) {
  if (files === void 0) {
    files = this.getFiles();
  }

  const {
    maxFileSize,
    minFileSize,
    maxTotalFileSize,
    maxNumberOfFiles,
    allowedFileTypes
  } = this.opts.restrictions;

  if (maxNumberOfFiles) {
    if (files.length + 1 > maxNumberOfFiles) {
      throw new RestrictionError(`${this.i18n('youCanOnlyUploadX', {
        smart_count: maxNumberOfFiles
      })}`);
    }
  }

  if (allowedFileTypes) {
    const isCorrectFileType = allowedFileTypes.some(type => {
      // check if this is a mime-type
      if (type.indexOf('/') > -1) {
        if (!file.type) return false;
        return match(file.type.replace(/;.*?$/, ''), type);
      } // otherwise this is likely an extension


      if (type[0] === '.' && file.extension) {
        return file.extension.toLowerCase() === type.substr(1).toLowerCase();
      }

      return false;
    });

    if (!isCorrectFileType) {
      const allowedFileTypesString = allowedFileTypes.join(', ');
      throw new RestrictionError(this.i18n('youCanOnlyUploadFileTypes', {
        types: allowedFileTypesString
      }));
    }
  } // We can't check maxTotalFileSize if the size is unknown.


  if (maxTotalFileSize && file.size != null) {
    let totalFilesSize = 0;
    totalFilesSize += file.size;
    files.forEach(f => {
      totalFilesSize += f.size;
    });

    if (totalFilesSize > maxTotalFileSize) {
      throw new RestrictionError(this.i18n('exceedsSize', {
        size: prettierBytes(maxTotalFileSize),
        file: file.name
      }));
    }
  } // We can't check maxFileSize if the size is unknown.


  if (maxFileSize && file.size != null) {
    if (file.size > maxFileSize) {
      throw new RestrictionError(this.i18n('exceedsSize', {
        size: prettierBytes(maxFileSize),
        file: file.name
      }));
    }
  } // We can't check minFileSize if the size is unknown.


  if (minFileSize && file.size != null) {
    if (file.size < minFileSize) {
      throw new RestrictionError(this.i18n('inferiorSize', {
        size: prettierBytes(minFileSize)
      }));
    }
  }
}

function _checkMinNumberOfFiles2(files) {
  const {
    minNumberOfFiles
  } = this.opts.restrictions;

  if (Object.keys(files).length < minNumberOfFiles) {
    throw new RestrictionError(`${this.i18n('youHaveToAtLeastSelectX', {
      smart_count: minNumberOfFiles
    })}`);
  }
}

function _checkRequiredMetaFieldsOnFile2(file) {
  const {
    requiredMetaFields
  } = this.opts.restrictions;
  const {
    hasOwnProperty
  } = Object.prototype;
  const errors = [];
  const missingFields = [];

  for (let i = 0; i < requiredMetaFields.length; i++) {
    if (!hasOwnProperty.call(file.meta, requiredMetaFields[i]) || file.meta[requiredMetaFields[i]] === '') {
      const err = new RestrictionError(`${this.i18n('missingRequiredMetaFieldOnFile', {
        fileName: file.name
      })}`);
      errors.push(err);
      missingFields.push(requiredMetaFields[i]);

      _classPrivateFieldLooseBase(this, _showOrLogErrorAndThrow)[_showOrLogErrorAndThrow](err, {
        file,
        showInformer: false,
        throwErr: false
      });
    }
  }

  this.setFileState(file.id, {
    missingRequiredMetaFields: missingFields
  });
  return errors;
}

function _checkRequiredMetaFields2(files) {
  const errors = Object.keys(files).flatMap(fileID => {
    const file = this.getFile(fileID);
    return _classPrivateFieldLooseBase(this, _checkRequiredMetaFieldsOnFile)[_checkRequiredMetaFieldsOnFile](file);
  });

  if (errors.length) {
    throw new AggregateRestrictionError(errors, `${this.i18n('missingRequiredMetaField')}`);
  }
}

function _showOrLogErrorAndThrow2(err, _temp) {
  let {
    showInformer = true,
    file = null,
    throwErr = true
  } = _temp === void 0 ? {} : _temp;
  const message = typeof err === 'object' ? err.message : err;
  const details = typeof err === 'object' && err.details ? err.details : ''; // Restriction errors should be logged, but not as errors,
  // as they are expected and shown in the UI.

  let logMessageWithDetails = message;

  if (details) {
    logMessageWithDetails += ` ${details}`;
  }

  if (err.isRestriction) {
    this.log(logMessageWithDetails);
    this.emit('restriction-failed', file, err);
  } else {
    this.log(logMessageWithDetails, 'error');
  } // Sometimes informer has to be shown manually by the developer,
  // for example, in `onBeforeFileAdded`.


  if (showInformer) {
    this.info({
      message,
      details
    }, 'error', this.opts.infoTimeout);
  }

  if (throwErr) {
    throw typeof err === 'object' ? err : new Error(err);
  }
}

function _assertNewUploadAllowed2(file) {
  const {
    allowNewUpload
  } = this.getState();

  if (allowNewUpload === false) {
    _classPrivateFieldLooseBase(this, _showOrLogErrorAndThrow)[_showOrLogErrorAndThrow](new RestrictionError(this.i18n('noMoreFilesAllowed')), {
      file
    });
  }
}

function _checkAndCreateFileStateObject2(files, fileDescriptor) {
  const fileType = getFileType(fileDescriptor);
  const fileName = getFileName(fileType, fileDescriptor);
  const fileExtension = getFileNameAndExtension(fileName).extension;
  const isRemote = Boolean(fileDescriptor.isRemote);
  const fileID = generateFileID({ ...fileDescriptor,
    type: fileType
  });

  if (this.checkIfFileAlreadyExists(fileID)) {
    const error = new RestrictionError(this.i18n('noDuplicates', {
      fileName
    }));

    _classPrivateFieldLooseBase(this, _showOrLogErrorAndThrow)[_showOrLogErrorAndThrow](error, {
      file: fileDescriptor
    });
  }

  const meta = fileDescriptor.meta || {};
  meta.name = fileName;
  meta.type = fileType; // `null` means the size is unknown.

  const size = Number.isFinite(fileDescriptor.data.size) ? fileDescriptor.data.size : null;
  let newFile = {
    source: fileDescriptor.source || '',
    id: fileID,
    name: fileName,
    extension: fileExtension || '',
    meta: { ...this.getState().meta,
      ...meta
    },
    type: fileType,
    data: fileDescriptor.data,
    progress: {
      percentage: 0,
      bytesUploaded: 0,
      bytesTotal: size,
      uploadComplete: false,
      uploadStarted: null
    },
    size,
    isRemote,
    remote: fileDescriptor.remote || '',
    preview: fileDescriptor.preview
  };
  const onBeforeFileAddedResult = this.opts.onBeforeFileAdded(newFile, files);

  if (onBeforeFileAddedResult === false) {
    // Don’t show UI info for this error, as it should be done by the developer
    _classPrivateFieldLooseBase(this, _showOrLogErrorAndThrow)[_showOrLogErrorAndThrow](new RestrictionError('Cannot add the file because onBeforeFileAdded returned false.'), {
      showInformer: false,
      fileDescriptor
    });
  } else if (typeof onBeforeFileAddedResult === 'object' && onBeforeFileAddedResult !== null) {
    newFile = onBeforeFileAddedResult;
  }

  try {
    const filesArray = Object.keys(files).map(i => files[i]);

    _classPrivateFieldLooseBase(this, _checkRestrictions)[_checkRestrictions](newFile, filesArray);
  } catch (err) {
    _classPrivateFieldLooseBase(this, _showOrLogErrorAndThrow)[_showOrLogErrorAndThrow](err, {
      file: newFile
    });
  }

  return newFile;
}

function _startIfAutoProceed2() {
  if (this.opts.autoProceed && !this.scheduledAutoProceed) {
    this.scheduledAutoProceed = setTimeout(() => {
      this.scheduledAutoProceed = null;
      this.upload().catch(err => {
        if (!err.isRestriction) {
          this.log(err.stack || err.message || err);
        }
      });
    }, 4);
  }
}

function _addListeners2() {
  /**
   * @param {Error} error
   * @param {object} [file]
   * @param {object} [response]
   */
  const errorHandler = (error, file, response) => {
    let errorMsg = error.message || 'Unknown error';

    if (error.details) {
      errorMsg += ` ${error.details}`;
    }

    this.setState({
      error: errorMsg
    });

    if (file != null && file.id in this.getState().files) {
      this.setFileState(file.id, {
        error: errorMsg,
        response
      });
    }
  };

  this.on('error', errorHandler);
  this.on('upload-error', (file, error, response) => {
    errorHandler(error, file, response);

    if (typeof error === 'object' && error.message) {
      const newError = new Error(error.message);
      newError.details = error.message;

      if (error.details) {
        newError.details += ` ${error.details}`;
      }

      newError.message = this.i18n('failedToUpload', {
        file: file.name
      });

      _classPrivateFieldLooseBase(this, _showOrLogErrorAndThrow)[_showOrLogErrorAndThrow](newError, {
        throwErr: false
      });
    } else {
      _classPrivateFieldLooseBase(this, _showOrLogErrorAndThrow)[_showOrLogErrorAndThrow](error, {
        throwErr: false
      });
    }
  });
  this.on('upload', () => {
    this.setState({
      error: null
    });
  });
  this.on('upload-started', file => {
    if (!this.getFile(file.id)) {
      this.log(`Not setting progress for a file that has been removed: ${file.id}`);
      return;
    }

    this.setFileState(file.id, {
      progress: {
        uploadStarted: Date.now(),
        uploadComplete: false,
        percentage: 0,
        bytesUploaded: 0,
        bytesTotal: file.size
      }
    });
  });
  this.on('upload-progress', this.calculateProgress);
  this.on('upload-success', (file, uploadResp) => {
    if (!this.getFile(file.id)) {
      this.log(`Not setting progress for a file that has been removed: ${file.id}`);
      return;
    }

    const currentProgress = this.getFile(file.id).progress;
    this.setFileState(file.id, {
      progress: { ...currentProgress,
        postprocess: _classPrivateFieldLooseBase(this, _postProcessors)[_postProcessors].size > 0 ? {
          mode: 'indeterminate'
        } : null,
        uploadComplete: true,
        percentage: 100,
        bytesUploaded: currentProgress.bytesTotal
      },
      response: uploadResp,
      uploadURL: uploadResp.uploadURL,
      isPaused: false
    }); // Remote providers sometimes don't tell us the file size,
    // but we can know how many bytes we uploaded once the upload is complete.

    if (file.size == null) {
      this.setFileState(file.id, {
        size: uploadResp.bytesUploaded || currentProgress.bytesTotal
      });
    }

    this.calculateTotalProgress();
  });
  this.on('preprocess-progress', (file, progress) => {
    if (!this.getFile(file.id)) {
      this.log(`Not setting progress for a file that has been removed: ${file.id}`);
      return;
    }

    this.setFileState(file.id, {
      progress: { ...this.getFile(file.id).progress,
        preprocess: progress
      }
    });
  });
  this.on('preprocess-complete', file => {
    if (!this.getFile(file.id)) {
      this.log(`Not setting progress for a file that has been removed: ${file.id}`);
      return;
    }

    const files = { ...this.getState().files
    };
    files[file.id] = { ...files[file.id],
      progress: { ...files[file.id].progress
      }
    };
    delete files[file.id].progress.preprocess;
    this.setState({
      files
    });
  });
  this.on('postprocess-progress', (file, progress) => {
    if (!this.getFile(file.id)) {
      this.log(`Not setting progress for a file that has been removed: ${file.id}`);
      return;
    }

    this.setFileState(file.id, {
      progress: { ...this.getState().files[file.id].progress,
        postprocess: progress
      }
    });
  });
  this.on('postprocess-complete', file => {
    if (!this.getFile(file.id)) {
      this.log(`Not setting progress for a file that has been removed: ${file.id}`);
      return;
    }

    const files = { ...this.getState().files
    };
    files[file.id] = { ...files[file.id],
      progress: { ...files[file.id].progress
      }
    };
    delete files[file.id].progress.postprocess;
    this.setState({
      files
    });
  });
  this.on('restored', () => {
    // Files may have changed--ensure progress is still accurate.
    this.calculateTotalProgress();
  });
  this.on('dashboard:file-edit-complete', file => {
    if (file) {
      _classPrivateFieldLooseBase(this, _checkRequiredMetaFieldsOnFile)[_checkRequiredMetaFieldsOnFile](file);
    }
  }); // show informer if offline

  if (typeof window !== 'undefined' && window.addEventListener) {
    window.addEventListener('online', _classPrivateFieldLooseBase(this, _updateOnlineStatus)[_updateOnlineStatus]);
    window.addEventListener('offline', _classPrivateFieldLooseBase(this, _updateOnlineStatus)[_updateOnlineStatus]);
    setTimeout(_classPrivateFieldLooseBase(this, _updateOnlineStatus)[_updateOnlineStatus], 3000);
  }
}

function _createUpload2(fileIDs, opts) {
  if (opts === void 0) {
    opts = {};
  }

  // uppy.retryAll sets this to true — when retrying we want to ignore `allowNewUpload: false`
  const {
    forceAllowNewUpload = false
  } = opts;
  const {
    allowNewUpload,
    currentUploads
  } = this.getState();

  if (!allowNewUpload && !forceAllowNewUpload) {
    throw new Error('Cannot create a new upload: already uploading.');
  }

  const uploadID = nanoid();
  this.emit('upload', {
    id: uploadID,
    fileIDs
  });
  this.setState({
    allowNewUpload: this.opts.allowMultipleUploadBatches !== false && this.opts.allowMultipleUploads !== false,
    currentUploads: { ...currentUploads,
      [uploadID]: {
        fileIDs,
        step: 0,
        result: {}
      }
    }
  });
  return uploadID;
}

function _getUpload2(uploadID) {
  const {
    currentUploads
  } = this.getState();
  return currentUploads[uploadID];
}

function _removeUpload2(uploadID) {
  const currentUploads = { ...this.getState().currentUploads
  };
  delete currentUploads[uploadID];
  this.setState({
    currentUploads
  });
}

async function _runUpload2(uploadID) {
  let {
    currentUploads
  } = this.getState();
  let currentUpload = currentUploads[uploadID];
  const restoreStep = currentUpload.step || 0;
  const steps = [..._classPrivateFieldLooseBase(this, _preProcessors)[_preProcessors], ..._classPrivateFieldLooseBase(this, _uploaders)[_uploaders], ..._classPrivateFieldLooseBase(this, _postProcessors)[_postProcessors]];

  try {
    for (let step = restoreStep; step < steps.length; step++) {
      if (!currentUpload) {
        break;
      }

      const fn = steps[step];
      const updatedUpload = { ...currentUpload,
        step
      };
      this.setState({
        currentUploads: { ...currentUploads,
          [uploadID]: updatedUpload
        }
      }); // TODO give this the `updatedUpload` object as its only parameter maybe?
      // Otherwise when more metadata may be added to the upload this would keep getting more parameters

      await fn(updatedUpload.fileIDs, uploadID); // Update currentUpload value in case it was modified asynchronously.

      currentUploads = this.getState().currentUploads;
      currentUpload = currentUploads[uploadID];
    }
  } catch (err) {
    this.emit('error', err);

    _classPrivateFieldLooseBase(this, _removeUpload)[_removeUpload](uploadID);

    throw err;
  } // Set result data.


  if (currentUpload) {
    // Mark postprocessing step as complete if necessary; this addresses a case where we might get
    // stuck in the postprocessing UI while the upload is fully complete.
    // If the postprocessing steps do not do any work, they may not emit postprocessing events at
    // all, and never mark the postprocessing as complete. This is fine on its own but we
    // introduced code in the @uppy/core upload-success handler to prepare postprocessing progress
    // state if any postprocessors are registered. That is to avoid a "flash of completed state"
    // before the postprocessing plugins can emit events.
    //
    // So, just in case an upload with postprocessing plugins *has* completed *without* emitting
    // postprocessing completion, we do it instead.
    currentUpload.fileIDs.forEach(fileID => {
      const file = this.getFile(fileID);

      if (file && file.progress.postprocess) {
        this.emit('postprocess-complete', file);
      }
    });
    const files = currentUpload.fileIDs.map(fileID => this.getFile(fileID));
    const successful = files.filter(file => !file.error);
    const failed = files.filter(file => file.error);
    await this.addResultData(uploadID, {
      successful,
      failed,
      uploadID
    }); // Update currentUpload value in case it was modified asynchronously.

    currentUploads = this.getState().currentUploads;
    currentUpload = currentUploads[uploadID];
  } // Emit completion events.
  // This is in a separate function so that the `currentUploads` variable
  // always refers to the latest state. In the handler right above it refers
  // to an outdated object without the `.result` property.


  let result;

  if (currentUpload) {
    result = currentUpload.result;
    this.emit('complete', result);

    _classPrivateFieldLooseBase(this, _removeUpload)[_removeUpload](uploadID);
  }

  if (result == null) {
    this.log(`Not setting result for an upload that has been removed: ${uploadID}`);
  }

  return result;
}

Uppy.VERSION = "2.1.2";
module.exports = Uppy;

},{"./../../store-default":171,"./../../utils/lib/Translator":191,"./../../utils/lib/generateFileID":198,"./../../utils/lib/getFileNameAndExtension":205,"./../../utils/lib/getFileType":206,"./getFileName":86,"./locale":88,"./loggers":89,"./supportsUploadProgress":90,"@transloadit/prettier-bytes":2,"lodash.throttle":24,"mime-match":27,"namespace-emitter":30,"nanoid":31}],86:[function(require,module,exports){
"use strict";

module.exports = function getFileName(fileType, fileDescriptor) {
  if (fileDescriptor.name) {
    return fileDescriptor.name;
  }

  if (fileType.split('/')[0] === 'image') {
    return `${fileType.split('/')[0]}.${fileType.split('/')[1]}`;
  }

  return 'noname';
};

},{}],87:[function(require,module,exports){
'use strict';

const Uppy = require('./Uppy');

const UIPlugin = require('./UIPlugin');

const BasePlugin = require('./BasePlugin');

const {
  debugLogger
} = require('./loggers');

module.exports = Uppy;
module.exports.Uppy = Uppy;
module.exports.UIPlugin = UIPlugin;
module.exports.BasePlugin = BasePlugin;
module.exports.debugLogger = debugLogger;

},{"./BasePlugin":83,"./UIPlugin":84,"./Uppy":85,"./loggers":89}],88:[function(require,module,exports){
"use strict";

module.exports = {
  strings: {
    addBulkFilesFailed: {
      0: 'Failed to add %{smart_count} file due to an internal error',
      1: 'Failed to add %{smart_count} files due to internal errors'
    },
    youCanOnlyUploadX: {
      0: 'You can only upload %{smart_count} file',
      1: 'You can only upload %{smart_count} files'
    },
    youHaveToAtLeastSelectX: {
      0: 'You have to select at least %{smart_count} file',
      1: 'You have to select at least %{smart_count} files'
    },
    exceedsSize: '%{file} exceeds maximum allowed size of %{size}',
    missingRequiredMetaField: 'Missing required meta fields',
    missingRequiredMetaFieldOnFile: 'Missing required meta fields in %{fileName}',
    inferiorSize: 'This file is smaller than the allowed size of %{size}',
    youCanOnlyUploadFileTypes: 'You can only upload: %{types}',
    noMoreFilesAllowed: 'Cannot add more files',
    noDuplicates: "Cannot add the duplicate file '%{fileName}', it already exists",
    companionError: 'Connection with Companion failed',
    authAborted: 'Authentication aborted',
    companionUnauthorizeHint: 'To unauthorize to your %{provider} account, please go to %{url}',
    failedToUpload: 'Failed to upload %{file}',
    noInternetConnection: 'No Internet connection',
    connectedToInternet: 'Connected to the Internet',
    // Strings for remote providers
    noFilesFound: 'You have no files or folders here',
    selectX: {
      0: 'Select %{smart_count}',
      1: 'Select %{smart_count}'
    },
    allFilesFromFolderNamed: 'All files from folder %{name}',
    openFolderNamed: 'Open folder %{name}',
    cancel: 'Cancel',
    logOut: 'Log out',
    filter: 'Filter',
    resetFilter: 'Reset filter',
    loading: 'Loading...',
    authenticateWithTitle: 'Please authenticate with %{pluginName} to select files',
    authenticateWith: 'Connect to %{pluginName}',
    signInWithGoogle: 'Sign in with Google',
    searchImages: 'Search for images',
    enterTextToSearch: 'Enter text to search for images',
    backToSearch: 'Back to Search',
    emptyFolderAdded: 'No files were added from empty folder',
    folderAlreadyAdded: 'The folder "%{folder}" was already added',
    folderAdded: {
      0: 'Added %{smart_count} file from %{folder}',
      1: 'Added %{smart_count} files from %{folder}'
    }
  }
};

},{}],89:[function(require,module,exports){
"use strict";

/* eslint-disable no-console */
const getTimeStamp = require('./../../utils/lib/getTimeStamp'); // Swallow all logs, except errors.
// default if logger is not set or debug: false


const justErrorsLogger = {
  debug: () => {},
  warn: () => {},
  error: function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return console.error(`[Uppy] [${getTimeStamp()}]`, ...args);
  }
}; // Print logs to console with namespace + timestamp,
// set by logger: Uppy.debugLogger or debug: true

const debugLogger = {
  debug: function () {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    return console.debug(`[Uppy] [${getTimeStamp()}]`, ...args);
  },
  warn: function () {
    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }

    return console.warn(`[Uppy] [${getTimeStamp()}]`, ...args);
  },
  error: function () {
    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
      args[_key4] = arguments[_key4];
    }

    return console.error(`[Uppy] [${getTimeStamp()}]`, ...args);
  }
};
module.exports = {
  justErrorsLogger,
  debugLogger
};

},{"./../../utils/lib/getTimeStamp":211}],90:[function(require,module,exports){
"use strict";

// Edge 15.x does not fire 'progress' events on uploads.
// See https://github.com/transloadit/uppy/issues/945
// And https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/12224510/
module.exports = function supportsUploadProgress(userAgent) {
  // Allow passing in userAgent for tests
  if (userAgent == null) {
    userAgent = typeof navigator !== 'undefined' ? navigator.userAgent : null;
  } // Assume it works because basically everything supports progress events.


  if (!userAgent) return true;
  const m = /Edge\/(\d+\.\d+)/.exec(userAgent);
  if (!m) return true;
  const edgeVersion = m[1];
  let [major, minor] = edgeVersion.split('.');
  major = parseInt(major, 10);
  minor = parseInt(minor, 10); // Worked before:
  // Edge 40.15063.0.0
  // Microsoft EdgeHTML 15.15063

  if (major < 15 || major === 15 && minor < 15063) {
    return true;
  } // Fixed in:
  // Microsoft EdgeHTML 18.18218


  if (major > 18 || major === 18 && minor >= 18218) {
    return true;
  } // other versions don't work.


  return false;
};

},{}],91:[function(require,module,exports){
"use strict";

let _Symbol$for;

const {
  h,
  Component
} = require('preact');

_Symbol$for = Symbol.for('uppy test: disable unused locale key warning');

class AddFiles extends Component {
  constructor() {
    super(...arguments);

    this.triggerFileInputClick = () => {
      this.fileInput.click();
    };

    this.triggerFolderInputClick = () => {
      this.folderInput.click();
    };

    this.onFileInputChange = event => {
      this.props.handleInputChange(event); // We clear the input after a file is selected, because otherwise
      // change event is not fired in Chrome and Safari when a file
      // with the same name is selected.
      // ___Why not use value="" on <input/> instead?
      //    Because if we use that method of clearing the input,
      //    Chrome will not trigger change if we drop the same file twice (Issue #768).

      event.target.value = null;
    };

    this.renderHiddenInput = (isFolder, refCallback) => {
      return h("input", {
        className: "uppy-Dashboard-input",
        hidden: true,
        "aria-hidden": "true",
        tabIndex: -1,
        webkitdirectory: isFolder,
        type: "file",
        name: "files[]",
        multiple: this.props.maxNumberOfFiles !== 1,
        onChange: this.onFileInputChange,
        accept: this.props.allowedFileTypes,
        ref: refCallback
      });
    };

    this.renderMyDeviceAcquirer = () => {
      return h("div", {
        className: "uppy-DashboardTab",
        role: "presentation",
        "data-uppy-acquirer-id": "MyDevice"
      }, h("button", {
        type: "button",
        className: "uppy-u-reset uppy-c-btn uppy-DashboardTab-btn",
        role: "tab",
        tabIndex: 0,
        "data-uppy-super-focusable": true,
        onClick: this.triggerFileInputClick
      }, h("svg", {
        "aria-hidden": "true",
        focusable: "false",
        width: "32",
        height: "32",
        viewBox: "0 0 32 32"
      }, h("g", {
        fill: "none",
        fillRule: "evenodd"
      }, h("rect", {
        className: "uppy-ProviderIconBg",
        width: "32",
        height: "32",
        rx: "16",
        fill: "#2275D7"
      }), h("path", {
        d: "M21.973 21.152H9.863l-1.108-5.087h14.464l-1.246 5.087zM9.935 11.37h3.958l.886 1.444a.673.673 0 0 0 .585.316h6.506v1.37H9.935v-3.13zm14.898 3.44a.793.793 0 0 0-.616-.31h-.978v-2.126c0-.379-.275-.613-.653-.613H15.75l-.886-1.445a.673.673 0 0 0-.585-.316H9.232c-.378 0-.667.209-.667.587V14.5h-.782a.793.793 0 0 0-.61.303.795.795 0 0 0-.155.663l1.45 6.633c.078.36.396.618.764.618h13.354c.36 0 .674-.246.76-.595l1.631-6.636a.795.795 0 0 0-.144-.675z",
        fill: "#FFF"
      }))), h("div", {
        className: "uppy-DashboardTab-name"
      }, this.props.i18n('myDevice'))));
    };

    this.renderBrowseButton = (text, onClickFn) => {
      const numberOfAcquirers = this.props.acquirers.length;
      return h("button", {
        type: "button",
        className: "uppy-u-reset uppy-Dashboard-browse",
        onClick: onClickFn,
        "data-uppy-super-focusable": numberOfAcquirers === 0
      }, text);
    };

    this.renderDropPasteBrowseTagline = () => {
      const numberOfAcquirers = this.props.acquirers.length;
      const browseFiles = this.renderBrowseButton(this.props.i18n('browseFiles'), this.triggerFileInputClick);
      const browseFolders = this.renderBrowseButton(this.props.i18n('browseFolders'), this.triggerFolderInputClick); // in order to keep the i18n CamelCase and options lower (as are defaults) we will want to transform a lower
      // to Camel

      const lowerFMSelectionType = this.props.fileManagerSelectionType;
      const camelFMSelectionType = lowerFMSelectionType.charAt(0).toUpperCase() + lowerFMSelectionType.slice(1);
      return h("div", {
        class: "uppy-Dashboard-AddFiles-title"
      }, // eslint-disable-next-line no-nested-ternary
      this.props.disableLocalFiles ? this.props.i18n('importFiles') : numberOfAcquirers > 0 ? this.props.i18nArray(`dropPasteImport${camelFMSelectionType}`, {
        browseFiles,
        browseFolders,
        browse: browseFiles
      }) : this.props.i18nArray(`dropPaste${camelFMSelectionType}`, {
        browseFiles,
        browseFolders,
        browse: browseFiles
      }));
    };

    this.renderAcquirer = acquirer => {
      return h("div", {
        className: "uppy-DashboardTab",
        role: "presentation",
        "data-uppy-acquirer-id": acquirer.id
      }, h("button", {
        type: "button",
        className: "uppy-u-reset uppy-c-btn uppy-DashboardTab-btn",
        role: "tab",
        tabIndex: 0,
        "aria-controls": `uppy-DashboardContent-panel--${acquirer.id}`,
        "aria-selected": this.props.activePickerPanel.id === acquirer.id,
        "data-uppy-super-focusable": true,
        onClick: () => this.props.showPanel(acquirer.id)
      }, acquirer.icon(), h("div", {
        className: "uppy-DashboardTab-name"
      }, acquirer.name)));
    };

    this.renderAcquirers = (acquirers, disableLocalFiles) => {
      // Group last two buttons, so we don’t end up with
      // just one button on a new line
      const acquirersWithoutLastTwo = [...acquirers];
      const lastTwoAcquirers = acquirersWithoutLastTwo.splice(acquirers.length - 2, acquirers.length);
      return h("div", {
        className: "uppy-Dashboard-AddFiles-list",
        role: "tablist"
      }, !disableLocalFiles && this.renderMyDeviceAcquirer(), acquirersWithoutLastTwo.map(acquirer => this.renderAcquirer(acquirer)), h("span", {
        role: "presentation",
        style: {
          'white-space': 'nowrap'
        }
      }, lastTwoAcquirers.map(acquirer => this.renderAcquirer(acquirer))));
    };
  }

  [_Symbol$for]() {
    // Those are actually used in `renderDropPasteBrowseTagline` method.
    this.props.i18nArray('dropPasteBoth');
    this.props.i18nArray('dropPasteFiles');
    this.props.i18nArray('dropPasteFolders');
    this.props.i18nArray('dropPasteImportBoth');
    this.props.i18nArray('dropPasteImportFiles');
    this.props.i18nArray('dropPasteImportFolders');
  }

  renderPoweredByUppy() {
    const {
      i18nArray
    } = this.props;
    const uppyBranding = h("span", null, h("svg", {
      "aria-hidden": "true",
      focusable: "false",
      className: "uppy-c-icon uppy-Dashboard-poweredByIcon",
      width: "11",
      height: "11",
      viewBox: "0 0 11 11"
    }, h("path", {
      d: "M7.365 10.5l-.01-4.045h2.612L5.5.806l-4.467 5.65h2.604l.01 4.044h3.718z",
      fillRule: "evenodd"
    })), h("span", {
      className: "uppy-Dashboard-poweredByUppy"
    }, "Uppy"));
    const linkText = i18nArray('poweredBy', {
      uppy: uppyBranding
    });
    return h("a", {
      tabIndex: "-1",
      href: "https://uppy.io",
      rel: "noreferrer noopener",
      target: "_blank",
      className: "uppy-Dashboard-poweredBy"
    }, linkText);
  }

  render() {
    return h("div", {
      className: "uppy-Dashboard-AddFiles"
    }, this.renderHiddenInput(false, ref => {
      this.fileInput = ref;
    }), this.renderHiddenInput(true, ref => {
      this.folderInput = ref;
    }), this.renderDropPasteBrowseTagline(), this.props.acquirers.length > 0 && this.renderAcquirers(this.props.acquirers, this.props.disableLocalFiles), h("div", {
      className: "uppy-Dashboard-AddFiles-info"
    }, this.props.note && h("div", {
      className: "uppy-Dashboard-note"
    }, this.props.note), this.props.proudlyDisplayPoweredByUppy && this.renderPoweredByUppy(this.props)));
  }

}

module.exports = AddFiles;

},{"preact":35}],92:[function(require,module,exports){
"use strict";

const {
  h
} = require('preact');

const classNames = require('classnames');

const AddFiles = require('./AddFiles');

const AddFilesPanel = props => {
  return h("div", {
    className: classNames('uppy-Dashboard-AddFilesPanel', props.className),
    "data-uppy-panelType": "AddFiles",
    "aria-hidden": props.showAddFilesPanel
  }, h("div", {
    className: "uppy-DashboardContent-bar"
  }, h("div", {
    className: "uppy-DashboardContent-title",
    role: "heading",
    "aria-level": "1"
  }, props.i18n('addingMoreFiles')), h("button", {
    className: "uppy-DashboardContent-back",
    type: "button",
    onClick: () => props.toggleAddFilesPanel(false)
  }, props.i18n('back'))), h(AddFiles, props));
};

module.exports = AddFilesPanel;

},{"./AddFiles":91,"classnames":7,"preact":35}],93:[function(require,module,exports){
"use strict";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const {
  h
} = require('preact');

const classNames = require('classnames');

const isDragDropSupported = require('./../../../utils/lib/isDragDropSupported');

const FileList = require('./FileList');

const AddFiles = require('./AddFiles');

const AddFilesPanel = require('./AddFilesPanel');

const PickerPanelContent = require('./PickerPanelContent');

const EditorPanel = require('./EditorPanel');

const PanelTopBar = require('./PickerPanelTopBar');

const FileCard = require('./FileCard');

const Slide = require('./Slide'); // http://dev.edenspiekermann.com/2016/02/11/introducing-accessible-modal-dialog
// https://github.com/ghosh/micromodal


const WIDTH_XL = 900;
const WIDTH_LG = 700;
const WIDTH_MD = 576;
const HEIGHT_MD = 400;

module.exports = function Dashboard(props) {
  const noFiles = props.totalFileCount === 0;
  const isSizeMD = props.containerWidth > WIDTH_MD;
  const wrapperClassName = classNames({
    'uppy-Root': props.isTargetDOMEl
  });
  const dashboardClassName = classNames({
    'uppy-Dashboard': true,
    'uppy-Dashboard--isDisabled': props.disabled,
    'uppy-Dashboard--animateOpenClose': props.animateOpenClose,
    'uppy-Dashboard--isClosing': props.isClosing,
    'uppy-Dashboard--isDraggingOver': props.isDraggingOver,
    'uppy-Dashboard--modal': !props.inline,
    'uppy-size--md': props.containerWidth > WIDTH_MD,
    'uppy-size--lg': props.containerWidth > WIDTH_LG,
    'uppy-size--xl': props.containerWidth > WIDTH_XL,
    'uppy-size--height-md': props.containerHeight > HEIGHT_MD,
    'uppy-Dashboard--isAddFilesPanelVisible': props.showAddFilesPanel,
    'uppy-Dashboard--isInnerWrapVisible': props.areInsidesReadyToBeVisible
  }); // Important: keep these in sync with the percent width values in `src/components/FileItem/index.scss`.

  let itemsPerRow = 1; // mobile

  if (props.containerWidth > WIDTH_XL) {
    itemsPerRow = 5;
  } else if (props.containerWidth > WIDTH_LG) {
    itemsPerRow = 4;
  } else if (props.containerWidth > WIDTH_MD) {
    itemsPerRow = 3;
  }

  const showFileList = props.showSelectedFiles && !noFiles;
  const numberOfFilesForRecovery = props.recoveredState ? Object.keys(props.recoveredState.files).length : null;
  const numberOfGhosts = props.files ? Object.keys(props.files).filter(fileID => props.files[fileID].isGhost).length : null;

  const renderRestoredText = () => {
    if (numberOfGhosts > 0) {
      return props.i18n('recoveredXFiles', {
        smart_count: numberOfGhosts
      });
    }

    return props.i18n('recoveredAllFiles');
  };

  const dashboard = h("div", {
    className: dashboardClassName,
    "data-uppy-theme": props.theme,
    "data-uppy-num-acquirers": props.acquirers.length,
    "data-uppy-drag-drop-supported": !props.disableLocalFiles && isDragDropSupported(),
    "aria-hidden": props.inline ? 'false' : props.isHidden,
    "aria-disabled": props.disabled,
    "aria-label": !props.inline ? props.i18n('dashboardWindowTitle') : props.i18n('dashboardTitle'),
    onPaste: props.handlePaste,
    onDragOver: props.handleDragOver,
    onDragLeave: props.handleDragLeave,
    onDrop: props.handleDrop
  }, h("div", {
    "aria-hidden": "true",
    className: "uppy-Dashboard-overlay",
    tabIndex: -1,
    onClick: props.handleClickOutside
  }), h("div", {
    className: "uppy-Dashboard-inner",
    "aria-modal": !props.inline && 'true',
    role: !props.inline && 'dialog',
    style: {
      width: props.inline && props.width ? props.width : '',
      height: props.inline && props.height ? props.height : ''
    }
  }, !props.inline ? h("button", {
    className: "uppy-u-reset uppy-Dashboard-close",
    type: "button",
    "aria-label": props.i18n('closeModal'),
    title: props.i18n('closeModal'),
    onClick: props.closeModal
  }, h("span", {
    "aria-hidden": "true"
  }, "\xD7")) : null, h("div", {
    className: "uppy-Dashboard-innerWrap"
  }, h("div", {
    className: "uppy-Dashboard-dropFilesHereHint"
  }, props.i18n('dropHint')), showFileList && h(PanelTopBar, props), numberOfFilesForRecovery && h("div", {
    className: "uppy-Dashboard-serviceMsg"
  }, h("svg", {
    className: "uppy-Dashboard-serviceMsg-icon",
    "aria-hidden": "true",
    focusable: "false",
    width: "21",
    height: "16",
    viewBox: "0 0 24 19"
  }, h("g", {
    transform: "translate(0 -1)",
    fill: "none",
    fillRule: "evenodd"
  }, h("path", {
    d: "M12.857 1.43l10.234 17.056A1 1 0 0122.234 20H1.766a1 1 0 01-.857-1.514L11.143 1.429a1 1 0 011.714 0z",
    fill: "#FFD300"
  }), h("path", {
    fill: "#000",
    d: "M11 6h2l-.3 8h-1.4z"
  }), h("circle", {
    fill: "#000",
    cx: "12",
    cy: "17",
    r: "1"
  }))), h("strong", {
    className: "uppy-Dashboard-serviceMsg-title"
  }, props.i18n('sessionRestored')), h("div", {
    className: "uppy-Dashboard-serviceMsg-text"
  }, renderRestoredText())), showFileList ? h(FileList, _extends({}, props, {
    itemsPerRow: itemsPerRow
  })) : h(AddFiles, _extends({}, props, {
    isSizeMD: isSizeMD
  })), h(Slide, null, props.showAddFilesPanel ? h(AddFilesPanel, _extends({
    key: "AddFiles"
  }, props, {
    isSizeMD: isSizeMD
  })) : null), h(Slide, null, props.fileCardFor ? h(FileCard, _extends({
    key: "FileCard"
  }, props)) : null), h(Slide, null, props.activePickerPanel ? h(PickerPanelContent, _extends({
    key: "Picker"
  }, props)) : null), h(Slide, null, props.showFileEditor ? h(EditorPanel, _extends({
    key: "Editor"
  }, props)) : null), h("div", {
    className: "uppy-Dashboard-progressindicators"
  }, props.progressindicators.map(target => {
    return props.uppy.getPlugin(target.id).render(props.state);
  })))));
  return (// Wrap it for RTL language support
    h("div", {
      className: wrapperClassName,
      dir: props.direction
    }, dashboard)
  );
};

},{"./../../../utils/lib/isDragDropSupported":214,"./AddFiles":91,"./AddFilesPanel":92,"./EditorPanel":94,"./FileCard":95,"./FileList":102,"./PickerPanelContent":104,"./PickerPanelTopBar":105,"./Slide":106,"classnames":7,"preact":35}],94:[function(require,module,exports){
"use strict";

const {
  h
} = require('preact');

const classNames = require('classnames');

function EditorPanel(props) {
  const file = props.files[props.fileCardFor];
  return h("div", {
    className: classNames('uppy-DashboardContent-panel', props.className),
    role: "tabpanel",
    "data-uppy-panelType": "FileEditor",
    id: "uppy-DashboardContent-panel--editor"
  }, h("div", {
    className: "uppy-DashboardContent-bar"
  }, h("div", {
    className: "uppy-DashboardContent-title",
    role: "heading",
    "aria-level": "1"
  }, props.i18nArray('editing', {
    file: h("span", {
      className: "uppy-DashboardContent-titleFile"
    }, file.meta ? file.meta.name : file.name)
  })), h("button", {
    className: "uppy-DashboardContent-back",
    type: "button",
    onClick: props.hideAllPanels
  }, props.i18n('cancel')), h("button", {
    className: "uppy-DashboardContent-save",
    type: "button",
    onClick: props.saveFileEditor
  }, props.i18n('save'))), h("div", {
    className: "uppy-DashboardContent-panelBody"
  }, props.editors.map(target => {
    return props.uppy.getPlugin(target.id).render(props.state);
  })));
}

module.exports = EditorPanel;

},{"classnames":7,"preact":35}],95:[function(require,module,exports){
"use strict";

const {
  h,
  Component
} = require('preact');

const classNames = require('classnames');

const {
  nanoid
} = require('nanoid');

const getFileTypeIcon = require('../../utils/getFileTypeIcon');

const ignoreEvent = require('../../utils/ignoreEvent.js');

const FilePreview = require('../FilePreview');

class FileCard extends Component {
  constructor(props) {
    super(props);
    this.form = document.createElement('form');

    this.updateMeta = (newVal, name) => {
      this.setState(_ref => {
        let {
          formState
        } = _ref;
        return {
          formState: { ...formState,
            [name]: newVal
          }
        };
      });
    };

    this.handleSave = e => {
      e.preventDefault();
      const fileID = this.props.fileCardFor;
      this.props.saveFileCard(this.state.formState, fileID);
    };

    this.handleCancel = () => {
      this.props.toggleFileCard(false);
    };

    this.saveOnEnter = ev => {
      if (ev.keyCode === 13) {
        ev.stopPropagation();
        ev.preventDefault();
        const file = this.props.files[this.props.fileCardFor];
        this.props.saveFileCard(this.state.formState, file.id);
      }
    };

    this.renderMetaFields = () => {
      const metaFields = this.getMetaFields() || [];
      const fieldCSSClasses = {
        text: 'uppy-u-reset uppy-c-textInput uppy-Dashboard-FileCard-input'
      };
      return metaFields.map(field => {
        const id = `uppy-Dashboard-FileCard-input-${field.id}`;
        const required = this.props.requiredMetaFields.includes(field.id);
        return h("fieldset", {
          key: field.id,
          className: "uppy-Dashboard-FileCard-fieldset"
        }, h("label", {
          className: "uppy-Dashboard-FileCard-label",
          htmlFor: id
        }, field.name), field.render !== undefined ? field.render({
          value: this.state.formState[field.id],
          onChange: newVal => this.updateMeta(newVal, field.id),
          fieldCSSClasses,
          required,
          form: this.form.id
        }, h) : h("input", {
          className: fieldCSSClasses.text,
          id: id,
          form: this.form.id,
          type: field.type || 'text',
          required: required,
          value: this.state.formState[field.id],
          placeholder: field.placeholder // If `form` attribute is not supported, we need to capture pressing Enter to avoid bubbling in case Uppy is
          // embedded inside a <form>.
          ,
          onKeyUp: 'form' in HTMLInputElement.prototype ? undefined : this.saveOnEnter,
          onKeyDown: 'form' in HTMLInputElement.prototype ? undefined : this.saveOnEnter,
          onKeyPress: 'form' in HTMLInputElement.prototype ? undefined : this.saveOnEnter,
          onInput: ev => this.updateMeta(ev.target.value, field.id),
          "data-uppy-super-focusable": true
        }));
      });
    };

    const _file = this.props.files[this.props.fileCardFor];

    const _metaFields = this.getMetaFields() || [];

    const storedMetaData = {};

    _metaFields.forEach(field => {
      storedMetaData[field.id] = _file.meta[field.id] || '';
    });

    this.state = {
      formState: storedMetaData
    };
    this.form.id = nanoid();
  } // TODO(aduh95): move this to `UNSAFE_componentWillMount` when updating to Preact X+.


  componentWillMount() {
    // eslint-disable-line react/no-deprecated
    this.form.addEventListener('submit', this.handleSave);
    document.body.appendChild(this.form);
  }

  componentWillUnmount() {
    this.form.removeEventListener('submit', this.handleSave);
    document.body.removeChild(this.form);
  }

  getMetaFields() {
    return typeof this.props.metaFields === 'function' ? this.props.metaFields(this.props.files[this.props.fileCardFor]) : this.props.metaFields;
  }

  render() {
    const file = this.props.files[this.props.fileCardFor];
    const showEditButton = this.props.canEditFile(file);
    return h("div", {
      className: classNames('uppy-Dashboard-FileCard', this.props.className),
      "data-uppy-panelType": "FileCard",
      onDragOver: ignoreEvent,
      onDragLeave: ignoreEvent,
      onDrop: ignoreEvent,
      onPaste: ignoreEvent
    }, h("div", {
      className: "uppy-DashboardContent-bar"
    }, h("div", {
      className: "uppy-DashboardContent-title",
      role: "heading",
      "aria-level": "1"
    }, this.props.i18nArray('editing', {
      file: h("span", {
        className: "uppy-DashboardContent-titleFile"
      }, file.meta ? file.meta.name : file.name)
    })), h("button", {
      className: "uppy-DashboardContent-back",
      type: "button",
      form: this.form.id,
      title: this.props.i18n('finishEditingFile'),
      onClick: this.handleCancel
    }, this.props.i18n('cancel'))), h("div", {
      className: "uppy-Dashboard-FileCard-inner"
    }, h("div", {
      className: "uppy-Dashboard-FileCard-preview",
      style: {
        backgroundColor: getFileTypeIcon(file.type).color
      }
    }, h(FilePreview, {
      file: file
    }), showEditButton && h("button", {
      type: "button",
      className: "uppy-u-reset uppy-c-btn uppy-Dashboard-FileCard-edit",
      onClick: event => {
        // When opening the image editor we want to save any meta fields changes.
        // Otherwise it's confusing for the user to click save in the editor,
        // but the changes here are discarded. This bypasses validation,
        // but we are okay with that.
        this.handleSave(event);
        this.props.openFileEditor(file);
      },
      form: this.form.id
    }, this.props.i18n('editFile'))), h("div", {
      className: "uppy-Dashboard-FileCard-info"
    }, this.renderMetaFields()), h("div", {
      className: "uppy-Dashboard-FileCard-actions"
    }, h("button", {
      className: "uppy-u-reset uppy-c-btn uppy-c-btn-primary uppy-Dashboard-FileCard-actionsBtn" // If `form` attribute is supported, we want a submit button to trigger the form validation.
      // Otherwise, fallback to a classic button with a onClick event handler.
      ,
      type: 'form' in HTMLButtonElement.prototype ? 'submit' : 'button',
      onClick: 'form' in HTMLButtonElement.prototype ? undefined : this.handleSave,
      form: this.form.id
    }, this.props.i18n('saveChanges')), h("button", {
      className: "uppy-u-reset uppy-c-btn uppy-c-btn-link uppy-Dashboard-FileCard-actionsBtn",
      type: "button",
      onClick: this.handleCancel,
      form: this.form.id
    }, this.props.i18n('cancel')))));
  }

}

module.exports = FileCard;

},{"../../utils/getFileTypeIcon":113,"../../utils/ignoreEvent.js":114,"../FilePreview":103,"classnames":7,"nanoid":31,"preact":35}],96:[function(require,module,exports){
"use strict";

const {
  h
} = require('preact');

const copyToClipboard = require('../../../utils/copyToClipboard');

function EditButton(_ref) {
  let {
    file,
    uploadInProgressOrComplete,
    metaFields,
    canEditFile,
    i18n,
    onClick
  } = _ref;

  if (!uploadInProgressOrComplete && metaFields && metaFields.length > 0 || !uploadInProgressOrComplete && canEditFile(file)) {
    return h("button", {
      className: "uppy-u-reset uppy-Dashboard-Item-action uppy-Dashboard-Item-action--edit",
      type: "button",
      "aria-label": i18n('editFileWithFilename', {
        file: file.meta.name
      }),
      title: i18n('editFileWithFilename', {
        file: file.meta.name
      }),
      onClick: () => onClick()
    }, h("svg", {
      "aria-hidden": "true",
      focusable: "false",
      className: "uppy-c-icon",
      width: "14",
      height: "14",
      viewBox: "0 0 14 14"
    }, h("g", {
      fillRule: "evenodd"
    }, h("path", {
      d: "M1.5 10.793h2.793A1 1 0 0 0 5 10.5L11.5 4a1 1 0 0 0 0-1.414L9.707.793a1 1 0 0 0-1.414 0l-6.5 6.5A1 1 0 0 0 1.5 8v2.793zm1-1V8L9 1.5l1.793 1.793-6.5 6.5H2.5z",
      fillRule: "nonzero"
    }), h("rect", {
      x: "1",
      y: "12.293",
      width: "11",
      height: "1",
      rx: ".5"
    }), h("path", {
      fillRule: "nonzero",
      d: "M6.793 2.5L9.5 5.207l.707-.707L7.5 1.793z"
    }))));
  }

  return null;
}

function RemoveButton(_ref2) {
  let {
    i18n,
    onClick,
    file
  } = _ref2;
  return h("button", {
    className: "uppy-u-reset uppy-Dashboard-Item-action uppy-Dashboard-Item-action--remove",
    type: "button",
    "aria-label": i18n('removeFile', {
      file: file.meta.name
    }),
    title: i18n('removeFile', {
      file: file.meta.name
    }),
    onClick: () => onClick()
  }, h("svg", {
    "aria-hidden": "true",
    focusable: "false",
    className: "uppy-c-icon",
    width: "18",
    height: "18",
    viewBox: "0 0 18 18"
  }, h("path", {
    d: "M9 0C4.034 0 0 4.034 0 9s4.034 9 9 9 9-4.034 9-9-4.034-9-9-9z"
  }), h("path", {
    fill: "#FFF",
    d: "M13 12.222l-.778.778L9 9.778 5.778 13 5 12.222 8.222 9 5 5.778 5.778 5 9 8.222 12.222 5l.778.778L9.778 9z"
  })));
}

const copyLinkToClipboard = (event, props) => {
  copyToClipboard(props.file.uploadURL, props.i18n('copyLinkToClipboardFallback')).then(() => {
    props.uppy.log('Link copied to clipboard.');
    props.uppy.info(props.i18n('copyLinkToClipboardSuccess'), 'info', 3000);
  }).catch(props.uppy.log) // avoid losing focus
  .then(() => event.target.focus({
    preventScroll: true
  }));
};

function CopyLinkButton(props) {
  const {
    i18n
  } = props;
  return h("button", {
    className: "uppy-u-reset uppy-Dashboard-Item-action uppy-Dashboard-Item-action--copyLink",
    type: "button",
    "aria-label": i18n('copyLink'),
    title: i18n('copyLink'),
    onClick: event => copyLinkToClipboard(event, props)
  }, h("svg", {
    "aria-hidden": "true",
    focusable: "false",
    className: "uppy-c-icon",
    width: "14",
    height: "14",
    viewBox: "0 0 14 12"
  }, h("path", {
    d: "M7.94 7.703a2.613 2.613 0 0 1-.626 2.681l-.852.851a2.597 2.597 0 0 1-1.849.766A2.616 2.616 0 0 1 2.764 7.54l.852-.852a2.596 2.596 0 0 1 2.69-.625L5.267 7.099a1.44 1.44 0 0 0-.833.407l-.852.851a1.458 1.458 0 0 0 1.03 2.486c.39 0 .755-.152 1.03-.426l.852-.852c.231-.231.363-.522.406-.824l1.04-1.038zm4.295-5.937A2.596 2.596 0 0 0 10.387 1c-.698 0-1.355.272-1.849.766l-.852.851a2.614 2.614 0 0 0-.624 2.688l1.036-1.036c.041-.304.173-.6.407-.833l.852-.852c.275-.275.64-.426 1.03-.426a1.458 1.458 0 0 1 1.03 2.486l-.852.851a1.442 1.442 0 0 1-.824.406l-1.04 1.04a2.596 2.596 0 0 0 2.683-.628l.851-.85a2.616 2.616 0 0 0 0-3.697zm-6.88 6.883a.577.577 0 0 0 .82 0l3.474-3.474a.579.579 0 1 0-.819-.82L5.355 7.83a.579.579 0 0 0 0 .819z"
  })));
}

module.exports = function Buttons(props) {
  const {
    uppy,
    file,
    uploadInProgressOrComplete,
    canEditFile,
    metaFields,
    showLinkToFileUploadResult,
    showRemoveButton,
    i18n,
    toggleFileCard,
    openFileEditor
  } = props;

  const editAction = () => {
    if (metaFields && metaFields.length > 0) {
      toggleFileCard(true, file.id);
    } else {
      openFileEditor(file);
    }
  };

  return h("div", {
    className: "uppy-Dashboard-Item-actionWrapper"
  }, h(EditButton, {
    i18n: i18n,
    file: file,
    uploadInProgressOrComplete: uploadInProgressOrComplete,
    canEditFile: canEditFile,
    metaFields: metaFields,
    onClick: editAction
  }), showLinkToFileUploadResult && file.uploadURL ? h(CopyLinkButton, {
    file: file,
    uppy: uppy,
    i18n: i18n
  }) : null, showRemoveButton ? h(RemoveButton, {
    i18n: i18n,
    file: file,
    uppy: uppy,
    onClick: () => props.uppy.removeFile(file.id, 'removed-by-user')
  }) : null);
};

},{"../../../utils/copyToClipboard":110,"preact":35}],97:[function(require,module,exports){
"use strict";

const {
  h,
  Fragment
} = require('preact');

const prettierBytes = require('@transloadit/prettier-bytes');

const truncateString = require('./../../../../../utils/lib/truncateString');

const MetaErrorMessage = require('../MetaErrorMessage');

const renderFileName = props => {
  const {
    author,
    name
  } = props.file.meta;

  function getMaxNameLength() {
    if (props.containerWidth <= 352) {
      return 35;
    }

    if (props.containerWidth <= 576) {
      return 60;
    } // When `author` is present, we want to make sure
    // the file name fits on one line so we can place
    // the author on the second line.


    return author ? 20 : 30;
  }

  return h("div", {
    className: "uppy-Dashboard-Item-name",
    title: name
  }, truncateString(name, getMaxNameLength()));
};

const renderAuthor = props => {
  const {
    author
  } = props.file.meta;
  const {
    providerName
  } = props.file.remote;
  const dot = `\u00B7`;

  if (!author) {
    return null;
  }

  return h("div", {
    className: "uppy-Dashboard-Item-author"
  }, h("a", {
    href: `${author.url}?utm_source=Companion&utm_medium=referral`,
    target: "_blank",
    rel: "noopener noreferrer"
  }, truncateString(author.name, 13)), providerName ? h(Fragment, null, ` ${dot} `, providerName) : null);
};

const renderFileSize = props => props.file.size && h("div", {
  className: "uppy-Dashboard-Item-statusSize"
}, prettierBytes(props.file.size));

const ReSelectButton = props => props.file.isGhost && h("span", null, ' \u2022 ', h("button", {
  className: "uppy-u-reset uppy-c-btn uppy-Dashboard-Item-reSelect",
  type: "button",
  onClick: props.toggleAddFilesPanel
}, props.i18n('reSelect')));

const ErrorButton = _ref => {
  let {
    file,
    onClick
  } = _ref;

  if (file.error) {
    return h("button", {
      className: "uppy-u-reset uppy-Dashboard-Item-errorDetails",
      "aria-label": file.error,
      "data-microtip-position": "bottom",
      "data-microtip-size": "medium",
      onClick: onClick,
      type: "button"
    }, "?");
  }

  return null;
};

module.exports = function FileInfo(props) {
  const {
    file
  } = props;
  return h("div", {
    className: "uppy-Dashboard-Item-fileInfo",
    "data-uppy-file-source": file.source
  }, h("div", {
    className: "uppy-Dashboard-Item-fileName"
  }, renderFileName(props), h(ErrorButton, {
    file: props.file // eslint-disable-next-line no-alert
    ,
    onClick: () => alert(props.file.error) // TODO: move to a custom alert implementation

  })), h("div", {
    className: "uppy-Dashboard-Item-status"
  }, renderAuthor(props), renderFileSize(props), ReSelectButton(props)), h(MetaErrorMessage, {
    file: props.file,
    i18n: props.i18n,
    toggleFileCard: props.toggleFileCard,
    metaFields: props.metaFields
  }));
};

},{"../MetaErrorMessage":100,"./../../../../../utils/lib/truncateString":224,"@transloadit/prettier-bytes":2,"preact":35}],98:[function(require,module,exports){
"use strict";

const {
  h
} = require('preact');

const FilePreview = require('../../FilePreview');

const MetaErrorMessage = require('../MetaErrorMessage');

const getFileTypeIcon = require('../../../utils/getFileTypeIcon');

module.exports = function FilePreviewAndLink(props) {
  return h("div", {
    className: "uppy-Dashboard-Item-previewInnerWrap",
    style: {
      backgroundColor: getFileTypeIcon(props.file.type).color
    }
  }, props.showLinkToFileUploadResult && props.file.uploadURL && h("a", {
    className: "uppy-Dashboard-Item-previewLink",
    href: props.file.uploadURL,
    rel: "noreferrer noopener",
    target: "_blank",
    "aria-label": props.file.meta.name
  }, h("span", {
    hidden: true
  }, props.file.meta.name)), h(FilePreview, {
    file: props.file
  }), h(MetaErrorMessage, {
    file: props.file,
    i18n: props.i18n,
    toggleFileCard: props.toggleFileCard,
    metaFields: props.metaFields
  }));
};

},{"../../../utils/getFileTypeIcon":113,"../../FilePreview":103,"../MetaErrorMessage":100,"preact":35}],99:[function(require,module,exports){
"use strict";

const {
  h
} = require('preact');

function onPauseResumeCancelRetry(props) {
  if (props.isUploaded) return;

  if (props.error && !props.hideRetryButton) {
    props.uppy.retryUpload(props.file.id);
    return;
  }

  if (props.resumableUploads && !props.hidePauseResumeButton) {
    props.uppy.pauseResume(props.file.id);
  } else if (props.individualCancellation && !props.hideCancelButton) {
    props.uppy.removeFile(props.file.id);
  }
}

function progressIndicatorTitle(props) {
  if (props.isUploaded) {
    return props.i18n('uploadComplete');
  }

  if (props.error) {
    return props.i18n('retryUpload');
  }

  if (props.resumableUploads) {
    if (props.file.isPaused) {
      return props.i18n('resumeUpload');
    }

    return props.i18n('pauseUpload');
  }

  if (props.individualCancellation) {
    return props.i18n('cancelUpload');
  }

  return '';
}

function ProgressIndicatorButton(props) {
  return h("div", {
    className: "uppy-Dashboard-Item-progress"
  }, h("button", {
    className: "uppy-u-reset uppy-Dashboard-Item-progressIndicator",
    type: "button",
    "aria-label": progressIndicatorTitle(props),
    title: progressIndicatorTitle(props),
    onClick: () => onPauseResumeCancelRetry(props)
  }, props.children));
}

function ProgressCircleContainer(_ref) {
  let {
    children
  } = _ref;
  return h("svg", {
    "aria-hidden": "true",
    focusable: "false",
    width: "70",
    height: "70",
    viewBox: "0 0 36 36",
    className: "uppy-c-icon uppy-Dashboard-Item-progressIcon--circle"
  }, children);
}

function ProgressCircle(_ref2) {
  let {
    progress
  } = _ref2;
  // circle length equals 2 * PI * R
  const circleLength = 2 * Math.PI * 15;
  return h("g", null, h("circle", {
    className: "uppy-Dashboard-Item-progressIcon--bg",
    r: "15",
    cx: "18",
    cy: "18",
    "stroke-width": "2",
    fill: "none"
  }), h("circle", {
    className: "uppy-Dashboard-Item-progressIcon--progress",
    r: "15",
    cx: "18",
    cy: "18",
    transform: "rotate(-90, 18, 18)",
    fill: "none",
    "stroke-width": "2",
    "stroke-dasharray": circleLength,
    "stroke-dashoffset": circleLength - circleLength / 100 * progress
  }));
}

module.exports = function FileProgress(props) {
  // Nothing if upload has not started
  if (!props.file.progress.uploadStarted) {
    return null;
  } // Green checkmark when complete


  if (props.isUploaded) {
    return h("div", {
      className: "uppy-Dashboard-Item-progress"
    }, h("div", {
      className: "uppy-Dashboard-Item-progressIndicator"
    }, h(ProgressCircleContainer, null, h("circle", {
      r: "15",
      cx: "18",
      cy: "18",
      fill: "#1bb240"
    }), h("polygon", {
      className: "uppy-Dashboard-Item-progressIcon--check",
      transform: "translate(2, 3)",
      points: "14 22.5 7 15.2457065 8.99985857 13.1732815 14 18.3547104 22.9729883 9 25 11.1005634"
    }))));
  }

  if (props.recoveredState) {
    return;
  } // Retry button for error


  if (props.error && !props.hideRetryButton) {
    return h(ProgressIndicatorButton, props, h("svg", {
      "aria-hidden": "true",
      focusable: "false",
      className: "uppy-c-icon uppy-Dashboard-Item-progressIcon--retry",
      width: "28",
      height: "31",
      viewBox: "0 0 16 19"
    }, h("path", {
      d: "M16 11a8 8 0 1 1-8-8v2a6 6 0 1 0 6 6h2z"
    }), h("path", {
      d: "M7.9 3H10v2H7.9z"
    }), h("path", {
      d: "M8.536.5l3.535 3.536-1.414 1.414L7.12 1.914z"
    }), h("path", {
      d: "M10.657 2.621l1.414 1.415L8.536 7.57 7.12 6.157z"
    })));
  } // Pause/resume button for resumable uploads


  if (props.resumableUploads && !props.hidePauseResumeButton) {
    return h(ProgressIndicatorButton, props, h(ProgressCircleContainer, null, h(ProgressCircle, {
      progress: props.file.progress.percentage
    }), props.file.isPaused ? h("polygon", {
      className: "uppy-Dashboard-Item-progressIcon--play",
      transform: "translate(3, 3)",
      points: "12 20 12 10 20 15"
    }) : h("g", {
      className: "uppy-Dashboard-Item-progressIcon--pause",
      transform: "translate(14.5, 13)"
    }, h("rect", {
      x: "0",
      y: "0",
      width: "2",
      height: "10",
      rx: "0"
    }), h("rect", {
      x: "5",
      y: "0",
      width: "2",
      height: "10",
      rx: "0"
    }))));
  } // Cancel button for non-resumable uploads if individualCancellation is supported (not bundled)


  if (!props.resumableUploads && props.individualCancellation && !props.hideCancelButton) {
    return h(ProgressIndicatorButton, props, h(ProgressCircleContainer, null, h(ProgressCircle, {
      progress: props.file.progress.percentage
    }), h("polygon", {
      className: "cancel",
      transform: "translate(2, 2)",
      points: "19.8856516 11.0625 16 14.9481516 12.1019737 11.0625 11.0625 12.1143484 14.9481516 16 11.0625 19.8980263 12.1019737 20.9375 16 17.0518484 19.8856516 20.9375 20.9375 19.8980263 17.0518484 16 20.9375 12"
    })));
  } // Just progress when buttons are disabled


  return h("div", {
    className: "uppy-Dashboard-Item-progress"
  }, h("div", {
    className: "uppy-Dashboard-Item-progressIndicator"
  }, h(ProgressCircleContainer, null, h(ProgressCircle, {
    progress: props.file.progress.percentage
  }))));
};

},{"preact":35}],100:[function(require,module,exports){
"use strict";

const {
  h
} = require('preact');

const metaFieldIdToName = (metaFieldId, metaFields) => {
  const field = metaFields.filter(f => f.id === metaFieldId);
  return field[0].name;
};

module.exports = function renderMissingMetaFieldsError(props) {
  const {
    file,
    toggleFileCard,
    i18n,
    metaFields
  } = props;
  const {
    missingRequiredMetaFields
  } = file;

  if (!(missingRequiredMetaFields != null && missingRequiredMetaFields.length)) {
    return null;
  }

  const metaFieldsString = missingRequiredMetaFields.map(missingMetaField => metaFieldIdToName(missingMetaField, metaFields)).join(', ');
  return h("div", {
    className: "uppy-Dashboard-Item-errorMessage"
  }, i18n('missingRequiredMetaFields', {
    smart_count: missingRequiredMetaFields.length,
    fields: metaFieldsString
  }), ' ', h("button", {
    type: "button",
    class: "uppy-u-reset uppy-Dashboard-Item-errorMessageBtn",
    onClick: () => toggleFileCard(true, file.id)
  }, i18n('editFile')));
};

},{"preact":35}],101:[function(require,module,exports){
"use strict";

const {
  h,
  Component
} = require('preact');

const classNames = require('classnames');

const shallowEqual = require('is-shallow-equal');

const FilePreviewAndLink = require('./FilePreviewAndLink');

const FileProgress = require('./FileProgress');

const FileInfo = require('./FileInfo');

const Buttons = require('./Buttons');

module.exports = class FileItem extends Component {
  componentDidMount() {
    const {
      file
    } = this.props;

    if (!file.preview) {
      this.props.handleRequestThumbnail(file);
    }
  }

  shouldComponentUpdate(nextProps) {
    return !shallowEqual(this.props, nextProps);
  } // VirtualList mounts FileItems again and they emit `thumbnail:request`
  // Otherwise thumbnails are broken or missing after Golden Retriever restores files


  componentDidUpdate() {
    const {
      file
    } = this.props;

    if (!file.preview) {
      this.props.handleRequestThumbnail(file);
    }
  }

  componentWillUnmount() {
    const {
      file
    } = this.props;

    if (!file.preview) {
      this.props.handleCancelThumbnail(file);
    }
  }

  render() {
    const {
      file
    } = this.props;
    const isProcessing = file.progress.preprocess || file.progress.postprocess;
    const isUploaded = file.progress.uploadComplete && !isProcessing && !file.error;
    const uploadInProgressOrComplete = file.progress.uploadStarted || isProcessing;
    const uploadInProgress = file.progress.uploadStarted && !file.progress.uploadComplete || isProcessing;
    const error = file.error || false; // File that Golden Retriever was able to partly restore (only meta, not blob),
    // users still need to re-add it, so it’s a ghost

    const {
      isGhost
    } = file;
    let showRemoveButton = this.props.individualCancellation ? !isUploaded : !uploadInProgress && !isUploaded;

    if (isUploaded && this.props.showRemoveButtonAfterComplete) {
      showRemoveButton = true;
    }

    const dashboardItemClass = classNames({
      'uppy-Dashboard-Item': true,
      'is-inprogress': uploadInProgress && !this.props.recoveredState,
      'is-processing': isProcessing,
      'is-complete': isUploaded,
      'is-error': !!error,
      'is-resumable': this.props.resumableUploads,
      'is-noIndividualCancellation': !this.props.individualCancellation,
      'is-ghost': isGhost
    });
    return h("div", {
      className: dashboardItemClass,
      id: `uppy_${file.id}`,
      role: this.props.role
    }, h("div", {
      className: "uppy-Dashboard-Item-preview"
    }, h(FilePreviewAndLink, {
      file: file,
      showLinkToFileUploadResult: this.props.showLinkToFileUploadResult,
      i18n: this.props.i18n,
      toggleFileCard: this.props.toggleFileCard,
      metaFields: this.props.metaFields
    }), h(FileProgress, {
      uppy: this.props.uppy,
      file: file,
      error: error,
      isUploaded: isUploaded,
      hideRetryButton: this.props.hideRetryButton,
      hideCancelButton: this.props.hideCancelButton,
      hidePauseResumeButton: this.props.hidePauseResumeButton,
      recoveredState: this.props.recoveredState,
      showRemoveButtonAfterComplete: this.props.showRemoveButtonAfterComplete,
      resumableUploads: this.props.resumableUploads,
      individualCancellation: this.props.individualCancellation,
      i18n: this.props.i18n
    })), h("div", {
      className: "uppy-Dashboard-Item-fileInfoAndButtons"
    }, h(FileInfo, {
      file: file,
      id: this.props.id,
      acquirers: this.props.acquirers,
      containerWidth: this.props.containerWidth,
      i18n: this.props.i18n,
      toggleAddFilesPanel: this.props.toggleAddFilesPanel,
      toggleFileCard: this.props.toggleFileCard,
      metaFields: this.props.metaFields
    }), h(Buttons, {
      file: file,
      metaFields: this.props.metaFields,
      showLinkToFileUploadResult: this.props.showLinkToFileUploadResult,
      showRemoveButton: showRemoveButton,
      canEditFile: this.props.canEditFile,
      uploadInProgressOrComplete: uploadInProgressOrComplete,
      toggleFileCard: this.props.toggleFileCard,
      openFileEditor: this.props.openFileEditor,
      uppy: this.props.uppy,
      i18n: this.props.i18n
    })));
  }

};

},{"./Buttons":96,"./FileInfo":97,"./FilePreviewAndLink":98,"./FileProgress":99,"classnames":7,"is-shallow-equal":21,"preact":35}],102:[function(require,module,exports){
"use strict";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const classNames = require('classnames');

const {
  h
} = require('preact');

const FileItem = require('./FileItem/index.js');

const VirtualList = require('./VirtualList');

function chunks(list, size) {
  const chunked = [];
  let currentChunk = [];
  list.forEach(item => {
    if (currentChunk.length < size) {
      currentChunk.push(item);
    } else {
      chunked.push(currentChunk);
      currentChunk = [item];
    }
  });
  if (currentChunk.length) chunked.push(currentChunk);
  return chunked;
}

module.exports = props => {
  const noFiles = props.totalFileCount === 0;
  const dashboardFilesClass = classNames('uppy-Dashboard-files', {
    'uppy-Dashboard-files--noFiles': noFiles
  }); // It's not great that this is hardcoded!
  // It's ESPECIALLY not great that this is checking against `itemsPerRow`!

  const rowHeight = props.itemsPerRow === 1 // Mobile
  ? 71 // 190px height + 2 * 5px margin
  : 200;
  const fileProps = {
    // FIXME This is confusing, it's actually the Dashboard's plugin ID
    id: props.id,
    error: props.error,
    // TODO move this to context
    i18n: props.i18n,
    uppy: props.uppy,
    // features
    acquirers: props.acquirers,
    resumableUploads: props.resumableUploads,
    individualCancellation: props.individualCancellation,
    // visual options
    hideRetryButton: props.hideRetryButton,
    hidePauseResumeButton: props.hidePauseResumeButton,
    hideCancelButton: props.hideCancelButton,
    showLinkToFileUploadResult: props.showLinkToFileUploadResult,
    showRemoveButtonAfterComplete: props.showRemoveButtonAfterComplete,
    isWide: props.isWide,
    metaFields: props.metaFields,
    recoveredState: props.recoveredState,
    // callbacks
    toggleFileCard: props.toggleFileCard,
    handleRequestThumbnail: props.handleRequestThumbnail,
    handleCancelThumbnail: props.handleCancelThumbnail
  };

  const sortByGhostComesFirst = (file1, file2) => {
    return props.files[file2].isGhost - props.files[file1].isGhost;
  }; // Sort files by file.isGhost, ghost files first, only if recoveredState is present


  const files = Object.keys(props.files);
  if (props.recoveredState) files.sort(sortByGhostComesFirst);
  const rows = chunks(files, props.itemsPerRow);

  const renderRow = row => // The `role="presentation` attribute ensures that the list items are properly
  // associated with the `VirtualList` element.
  // We use the first file ID as the key—this should not change across scroll rerenders
  h("div", {
    role: "presentation",
    key: row[0]
  }, row.map(fileID => h(FileItem, _extends({
    key: fileID,
    uppy: props.uppy
  }, fileProps, {
    role: "listitem",
    openFileEditor: props.openFileEditor,
    canEditFile: props.canEditFile,
    toggleAddFilesPanel: props.toggleAddFilesPanel,
    file: props.files[fileID]
  }))));

  return h(VirtualList, {
    class: dashboardFilesClass,
    role: "list",
    data: rows,
    renderRow: renderRow,
    rowHeight: rowHeight
  });
};

},{"./FileItem/index.js":101,"./VirtualList":107,"classnames":7,"preact":35}],103:[function(require,module,exports){
"use strict";

const {
  h
} = require('preact');

const getFileTypeIcon = require('../utils/getFileTypeIcon');

module.exports = function FilePreview(props) {
  const {
    file
  } = props;

  if (file.preview) {
    return h("img", {
      className: "uppy-Dashboard-Item-previewImg",
      alt: file.name,
      src: file.preview
    });
  }

  const {
    color,
    icon
  } = getFileTypeIcon(file.type);
  return h("div", {
    className: "uppy-Dashboard-Item-previewIconWrap"
  }, h("span", {
    className: "uppy-Dashboard-Item-previewIcon",
    style: {
      color
    }
  }, icon), h("svg", {
    "aria-hidden": "true",
    focusable: "false",
    className: "uppy-Dashboard-Item-previewIconBg",
    width: "58",
    height: "76",
    viewBox: "0 0 58 76"
  }, h("rect", {
    fill: "#FFF",
    width: "58",
    height: "76",
    rx: "3",
    fillRule: "evenodd"
  })));
};

},{"../utils/getFileTypeIcon":113,"preact":35}],104:[function(require,module,exports){
"use strict";

const {
  h
} = require('preact');

const classNames = require('classnames');

const ignoreEvent = require('../utils/ignoreEvent.js');

function PickerPanelContent(props) {
  return h("div", {
    className: classNames('uppy-DashboardContent-panel', props.className),
    role: "tabpanel",
    "data-uppy-panelType": "PickerPanel",
    id: `uppy-DashboardContent-panel--${props.activePickerPanel.id}`,
    onDragOver: ignoreEvent,
    onDragLeave: ignoreEvent,
    onDrop: ignoreEvent,
    onPaste: ignoreEvent
  }, h("div", {
    className: "uppy-DashboardContent-bar"
  }, h("div", {
    className: "uppy-DashboardContent-title",
    role: "heading",
    "aria-level": "1"
  }, props.i18n('importFrom', {
    name: props.activePickerPanel.name
  })), h("button", {
    className: "uppy-DashboardContent-back",
    type: "button",
    onClick: props.hideAllPanels
  }, props.i18n('cancel'))), h("div", {
    className: "uppy-DashboardContent-panelBody"
  }, props.uppy.getPlugin(props.activePickerPanel.id).render(props.state)));
}

module.exports = PickerPanelContent;

},{"../utils/ignoreEvent.js":114,"classnames":7,"preact":35}],105:[function(require,module,exports){
"use strict";

const {
  h
} = require('preact');

const uploadStates = {
  STATE_ERROR: 'error',
  STATE_WAITING: 'waiting',
  STATE_PREPROCESSING: 'preprocessing',
  STATE_UPLOADING: 'uploading',
  STATE_POSTPROCESSING: 'postprocessing',
  STATE_COMPLETE: 'complete',
  STATE_PAUSED: 'paused'
};

function getUploadingState(isAllErrored, isAllComplete, isAllPaused, files) {
  if (files === void 0) {
    files = {};
  }

  if (isAllErrored) {
    return uploadStates.STATE_ERROR;
  }

  if (isAllComplete) {
    return uploadStates.STATE_COMPLETE;
  }

  if (isAllPaused) {
    return uploadStates.STATE_PAUSED;
  }

  let state = uploadStates.STATE_WAITING;
  const fileIDs = Object.keys(files);

  for (let i = 0; i < fileIDs.length; i++) {
    const {
      progress
    } = files[fileIDs[i]]; // If ANY files are being uploaded right now, show the uploading state.

    if (progress.uploadStarted && !progress.uploadComplete) {
      return uploadStates.STATE_UPLOADING;
    } // If files are being preprocessed AND postprocessed at this time, we show the
    // preprocess state. If any files are being uploaded we show uploading.


    if (progress.preprocess && state !== uploadStates.STATE_UPLOADING) {
      state = uploadStates.STATE_PREPROCESSING;
    } // If NO files are being preprocessed or uploaded right now, but some files are
    // being postprocessed, show the postprocess state.


    if (progress.postprocess && state !== uploadStates.STATE_UPLOADING && state !== uploadStates.STATE_PREPROCESSING) {
      state = uploadStates.STATE_POSTPROCESSING;
    }
  }

  return state;
}

function UploadStatus(props) {
  const uploadingState = getUploadingState(props.isAllErrored, props.isAllComplete, props.isAllPaused, props.files);

  switch (uploadingState) {
    case 'uploading':
      return props.i18n('uploadingXFiles', {
        smart_count: props.inProgressNotPausedFiles.length
      });

    case 'preprocessing':
    case 'postprocessing':
      return props.i18n('processingXFiles', {
        smart_count: props.processingFiles.length
      });

    case 'paused':
      return props.i18n('uploadPaused');

    case 'waiting':
      return props.i18n('xFilesSelected', {
        smart_count: props.newFiles.length
      });

    case 'complete':
      return props.i18n('uploadComplete');
  }
}

function PanelTopBar(props) {
  let {
    allowNewUpload
  } = props; // TODO maybe this should be done in ../index.js, then just pass that down as `allowNewUpload`

  if (allowNewUpload && props.maxNumberOfFiles) {
    allowNewUpload = props.totalFileCount < props.maxNumberOfFiles;
  }

  return h("div", {
    className: "uppy-DashboardContent-bar"
  }, !props.isAllComplete && !props.hideCancelButton ? h("button", {
    className: "uppy-DashboardContent-back",
    type: "button",
    onClick: () => props.uppy.cancelAll()
  }, props.i18n('cancel')) : h("div", null), h("div", {
    className: "uppy-DashboardContent-title",
    role: "heading",
    "aria-level": "1"
  }, h(UploadStatus, props)), allowNewUpload ? h("button", {
    className: "uppy-DashboardContent-addMore",
    type: "button",
    "aria-label": props.i18n('addMoreFiles'),
    title: props.i18n('addMoreFiles'),
    onClick: () => props.toggleAddFilesPanel(true)
  }, h("svg", {
    "aria-hidden": "true",
    focusable: "false",
    className: "uppy-c-icon",
    width: "15",
    height: "15",
    viewBox: "0 0 15 15"
  }, h("path", {
    d: "M8 6.5h6a.5.5 0 0 1 .5.5v.5a.5.5 0 0 1-.5.5H8v6a.5.5 0 0 1-.5.5H7a.5.5 0 0 1-.5-.5V8h-6a.5.5 0 0 1-.5-.5V7a.5.5 0 0 1 .5-.5h6v-6A.5.5 0 0 1 7 0h.5a.5.5 0 0 1 .5.5v6z"
  })), h("span", {
    className: "uppy-DashboardContent-addMoreCaption"
  }, props.i18n('addMore'))) : h("div", null));
}

module.exports = PanelTopBar;

},{"preact":35}],106:[function(require,module,exports){
"use strict";

const {
  cloneElement,
  Component,
  toChildArray
} = require('preact');

const classNames = require('classnames');

const transitionName = 'uppy-transition-slideDownUp';
const duration = 250;
/**
 * Vertical slide transition.
 *
 * This can take a _single_ child component, which _must_ accept a `className` prop.
 *
 * Currently this is specific to the `uppy-transition-slideDownUp` transition,
 * but it should be simple to extend this for any type of single-element
 * transition by setting the CSS name and duration as props.
 */

class Slide extends Component {
  constructor(props) {
    super(props);
    this.state = {
      cachedChildren: null,
      className: ''
    };
  } // TODO: refactor to stable lifecycle method
  // eslint-disable-next-line


  componentWillUpdate(nextProps) {
    const {
      cachedChildren
    } = this.state;
    const child = toChildArray(nextProps.children)[0];
    if (cachedChildren === child) return null;
    const patch = {
      cachedChildren: child
    }; // Enter transition

    if (child && !cachedChildren) {
      patch.className = `${transitionName}-enter`;
      cancelAnimationFrame(this.animationFrame);
      clearTimeout(this.leaveTimeout);
      this.leaveTimeout = undefined;
      this.animationFrame = requestAnimationFrame(() => {
        // Force it to render before we add the active class
        // this.base.getBoundingClientRect()
        this.setState({
          className: `${transitionName}-enter ${transitionName}-enter-active`
        });
        this.enterTimeout = setTimeout(() => {
          this.setState({
            className: ''
          });
        }, duration);
      });
    } // Leave transition


    if (cachedChildren && !child && this.leaveTimeout === undefined) {
      patch.cachedChildren = cachedChildren;
      patch.className = `${transitionName}-leave`;
      cancelAnimationFrame(this.animationFrame);
      clearTimeout(this.enterTimeout);
      this.enterTimeout = undefined;
      this.animationFrame = requestAnimationFrame(() => {
        this.setState({
          className: `${transitionName}-leave ${transitionName}-leave-active`
        });
        this.leaveTimeout = setTimeout(() => {
          this.setState({
            cachedChildren: null,
            className: ''
          });
        }, duration);
      });
    } // eslint-disable-next-line


    this.setState(patch);
  }

  render() {
    const {
      cachedChildren,
      className
    } = this.state;

    if (!cachedChildren) {
      return null;
    }

    return cloneElement(cachedChildren, {
      className: classNames(className, cachedChildren.props.className)
    });
  }

}

module.exports = Slide;

},{"classnames":7,"preact":35}],107:[function(require,module,exports){
"use strict";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/**
 * Adapted from preact-virtual-list: https://github.com/developit/preact-virtual-list
 *
 * © 2016 Jason Miller
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * Adaptations:
 * - Added role=presentation to helper elements
 * - Tweaked styles for Uppy's Dashboard use case
 */
const {
  h,
  Component
} = require('preact');

const STYLE_INNER = {
  position: 'relative',
  // Disabled for our use case: the wrapper elements around FileList already deal with overflow,
  // and this additional property would hide things that we want to show.
  //
  // overflow: 'hidden',
  width: '100%',
  minHeight: '100%'
};
const STYLE_CONTENT = {
  position: 'absolute',
  top: 0,
  left: 0,
  // Because the `top` value gets set to some offset, this `height` being 100% would make the scrollbar
  // stretch far beyond the content. For our use case, the content div actually can get its height from
  // the elements inside it, so we don't need to specify a `height` property at all.
  //
  // height: '100%',
  width: '100%',
  overflow: 'visible'
};

class VirtualList extends Component {
  constructor(props) {
    super(props); // The currently focused node, used to retain focus when the visible rows change.
    // To avoid update loops, this should not cause state updates, so it's kept as a plain property.

    this.handleScroll = () => {
      this.setState({
        offset: this.base.scrollTop
      });
    };

    this.handleResize = () => {
      this.resize();
    };

    this.focusElement = null;
    this.state = {
      offset: 0,
      height: 0
    };
  }

  componentDidMount() {
    this.resize();
    window.addEventListener('resize', this.handleResize);
  } // TODO: refactor to stable lifecycle method
  // eslint-disable-next-line


  componentWillUpdate() {
    if (this.base.contains(document.activeElement)) {
      this.focusElement = document.activeElement;
    }
  }

  componentDidUpdate() {
    // Maintain focus when rows are added and removed.
    if (this.focusElement && this.focusElement.parentNode && document.activeElement !== this.focusElement) {
      this.focusElement.focus();
    }

    this.focusElement = null;
    this.resize();
  }

  componentWillUnmount() {
    window.removeEventListener('resize', this.handleResize);
  }

  resize() {
    const {
      height
    } = this.state;

    if (height !== this.base.offsetHeight) {
      this.setState({
        height: this.base.offsetHeight
      });
    }
  }

  render(_ref) {
    let {
      data,
      rowHeight,
      renderRow,
      overscanCount = 10,
      ...props
    } = _ref;
    const {
      offset,
      height
    } = this.state; // first visible row index

    let start = Math.floor(offset / rowHeight); // actual number of visible rows (without overscan)

    let visibleRowCount = Math.floor(height / rowHeight); // Overscan: render blocks of rows modulo an overscan row count
    // This dramatically reduces DOM writes during scrolling

    if (overscanCount) {
      start = Math.max(0, start - start % overscanCount);
      visibleRowCount += overscanCount;
    } // last visible + overscan row index + padding to allow keyboard focus to travel past the visible area


    const end = start + visibleRowCount + 4; // data slice currently in viewport plus overscan items

    const selection = data.slice(start, end);
    const styleInner = { ...STYLE_INNER,
      height: data.length * rowHeight
    };
    const styleContent = { ...STYLE_CONTENT,
      top: start * rowHeight
    }; // The `role="presentation"` attributes ensure that these wrapper elements are not treated as list
    // items by accessibility and outline tools.

    return h("div", _extends({
      onScroll: this.handleScroll
    }, props), h("div", {
      role: "presentation",
      style: styleInner
    }, h("div", {
      role: "presentation",
      style: styleContent
    }, selection.map(renderRow))));
  }

}

module.exports = VirtualList;

},{"preact":35}],108:[function(require,module,exports){
"use strict";

var _class, _openFileEditorWhenFilesAdded, _attachRenderFunctionToTarget, _isTargetSupported, _getAcquirers, _getProgressIndicators, _getEditors, _temp;

function _classPrivateFieldLooseBase(receiver, privateKey) { if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) { throw new TypeError("attempted to use private field on non-instance"); } return receiver; }

var id = 0;

function _classPrivateFieldLooseKey(name) { return "__private_" + id++ + "_" + name; }

const {
  h
} = require('preact');

const {
  UIPlugin
} = require('./../../core');

const StatusBar = require('./../../status-bar');

const Informer = require('./../../informer');

const ThumbnailGenerator = require('./../../thumbnail-generator');

const findAllDOMElements = require('./../../utils/lib/findAllDOMElements');

const toArray = require('./../../utils/lib/toArray');

const getDroppedFiles = require('./../../utils/lib/getDroppedFiles');

const getTextDirection = require('./../../utils/lib/getTextDirection');

const {
  nanoid
} = require('nanoid');

const trapFocus = require('./utils/trapFocus');

const createSuperFocus = require('./utils/createSuperFocus');

const memoize = require('memoize-one').default || require('memoize-one');

const FOCUSABLE_ELEMENTS = require('./../../utils/lib/FOCUSABLE_ELEMENTS');

const DashboardUI = require('./components/Dashboard');

const locale = require('./locale');

const TAB_KEY = 9;
const ESC_KEY = 27;

function createPromise() {
  const o = {};
  o.promise = new Promise((resolve, reject) => {
    o.resolve = resolve;
    o.reject = reject;
  });
  return o;
}

function defaultPickerIcon() {
  return h("svg", {
    "aria-hidden": "true",
    focusable: "false",
    width: "30",
    height: "30",
    viewBox: "0 0 30 30"
  }, h("path", {
    d: "M15 30c8.284 0 15-6.716 15-15 0-8.284-6.716-15-15-15C6.716 0 0 6.716 0 15c0 8.284 6.716 15 15 15zm4.258-12.676v6.846h-8.426v-6.846H5.204l9.82-12.364 9.82 12.364H19.26z"
  }));
}
/**
 * Dashboard UI with previews, metadata editing, tabs for various services and more
 */


module.exports = (_temp = (_openFileEditorWhenFilesAdded = /*#__PURE__*/_classPrivateFieldLooseKey("openFileEditorWhenFilesAdded"), _attachRenderFunctionToTarget = /*#__PURE__*/_classPrivateFieldLooseKey("attachRenderFunctionToTarget"), _isTargetSupported = /*#__PURE__*/_classPrivateFieldLooseKey("isTargetSupported"), _getAcquirers = /*#__PURE__*/_classPrivateFieldLooseKey("getAcquirers"), _getProgressIndicators = /*#__PURE__*/_classPrivateFieldLooseKey("getProgressIndicators"), _getEditors = /*#__PURE__*/_classPrivateFieldLooseKey("getEditors"), _class = class Dashboard extends UIPlugin {
  constructor(uppy, _opts) {
    var _this;

    super(uppy, _opts);
    _this = this;

    this.removeTarget = plugin => {
      const pluginState = this.getPluginState(); // filter out the one we want to remove

      const newTargets = pluginState.targets.filter(target => target.id !== plugin.id);
      this.setPluginState({
        targets: newTargets
      });
    };

    this.addTarget = plugin => {
      const callerPluginId = plugin.id || plugin.constructor.name;
      const callerPluginName = plugin.title || callerPluginId;
      const callerPluginType = plugin.type;

      if (callerPluginType !== 'acquirer' && callerPluginType !== 'progressindicator' && callerPluginType !== 'editor') {
        const msg = 'Dashboard: can only be targeted by plugins of types: acquirer, progressindicator, editor';
        this.uppy.log(msg, 'error');
        return;
      }

      const target = {
        id: callerPluginId,
        name: callerPluginName,
        type: callerPluginType
      };
      const state = this.getPluginState();
      const newTargets = state.targets.slice();
      newTargets.push(target);
      this.setPluginState({
        targets: newTargets
      });
      return this.el;
    };

    this.hideAllPanels = () => {
      const state = this.getPluginState();
      const update = {
        activePickerPanel: false,
        showAddFilesPanel: false,
        activeOverlayType: null,
        fileCardFor: null,
        showFileEditor: false
      };

      if (state.activePickerPanel === update.activePickerPanel && state.showAddFilesPanel === update.showAddFilesPanel && state.showFileEditor === update.showFileEditor && state.activeOverlayType === update.activeOverlayType) {
        // avoid doing a state update if nothing changed
        return;
      }

      this.setPluginState(update);
    };

    this.showPanel = id => {
      const {
        targets
      } = this.getPluginState();
      const activePickerPanel = targets.filter(target => {
        return target.type === 'acquirer' && target.id === id;
      })[0];
      this.setPluginState({
        activePickerPanel,
        activeOverlayType: 'PickerPanel'
      });
    };

    this.canEditFile = file => {
      const {
        targets
      } = this.getPluginState();

      const editors = _classPrivateFieldLooseBase(this, _getEditors)[_getEditors](targets);

      return editors.some(target => this.uppy.getPlugin(target.id).canEditFile(file));
    };

    this.openFileEditor = file => {
      const {
        targets
      } = this.getPluginState();

      const editors = _classPrivateFieldLooseBase(this, _getEditors)[_getEditors](targets);

      this.setPluginState({
        showFileEditor: true,
        fileCardFor: file.id || null,
        activeOverlayType: 'FileEditor'
      });
      editors.forEach(editor => {
        this.uppy.getPlugin(editor.id).selectFile(file);
      });
    };

    this.saveFileEditor = () => {
      const {
        targets
      } = this.getPluginState();

      const editors = _classPrivateFieldLooseBase(this, _getEditors)[_getEditors](targets);

      editors.forEach(editor => {
        this.uppy.getPlugin(editor.id).save();
      });
      this.hideAllPanels();
    };

    this.openModal = () => {
      const {
        promise,
        resolve
      } = createPromise(); // save scroll position

      this.savedScrollPosition = window.pageYOffset; // save active element, so we can restore focus when modal is closed

      this.savedActiveElement = document.activeElement;

      if (this.opts.disablePageScrollWhenModalOpen) {
        document.body.classList.add('uppy-Dashboard-isFixed');
      }

      if (this.opts.animateOpenClose && this.getPluginState().isClosing) {
        const handler = () => {
          this.setPluginState({
            isHidden: false
          });
          this.el.removeEventListener('animationend', handler, false);
          resolve();
        };

        this.el.addEventListener('animationend', handler, false);
      } else {
        this.setPluginState({
          isHidden: false
        });
        resolve();
      }

      if (this.opts.browserBackButtonClose) {
        this.updateBrowserHistory();
      } // handle ESC and TAB keys in modal dialog


      document.addEventListener('keydown', this.handleKeyDownInModal);
      this.uppy.emit('dashboard:modal-open');
      return promise;
    };

    this.closeModal = function (opts) {
      if (opts === void 0) {
        opts = {};
      }

      const {
        // Whether the modal is being closed by the user (`true`) or by other means (e.g. browser back button)
        manualClose = true
      } = opts;

      const {
        isHidden,
        isClosing
      } = _this.getPluginState();

      if (isHidden || isClosing) {
        // short-circuit if animation is ongoing
        return;
      }

      const {
        promise,
        resolve
      } = createPromise();

      if (_this.opts.disablePageScrollWhenModalOpen) {
        document.body.classList.remove('uppy-Dashboard-isFixed');
      }

      if (_this.opts.animateOpenClose) {
        _this.setPluginState({
          isClosing: true
        });

        const handler = () => {
          _this.setPluginState({
            isHidden: true,
            isClosing: false
          });

          _this.superFocus.cancel();

          _this.savedActiveElement.focus();

          _this.el.removeEventListener('animationend', handler, false);

          resolve();
        };

        _this.el.addEventListener('animationend', handler, false);
      } else {
        _this.setPluginState({
          isHidden: true
        });

        _this.superFocus.cancel();

        _this.savedActiveElement.focus();

        resolve();
      } // handle ESC and TAB keys in modal dialog


      document.removeEventListener('keydown', _this.handleKeyDownInModal);

      if (manualClose) {
        if (_this.opts.browserBackButtonClose) {
          var _history$state;

          // Make sure that the latest entry in the history state is our modal name
          // eslint-disable-next-line no-restricted-globals
          if ((_history$state = history.state) != null && _history$state[_this.modalName]) {
            // Go back in history to clear out the entry we created (ultimately closing the modal)
            // eslint-disable-next-line no-restricted-globals
            history.back();
          }
        }
      }

      _this.uppy.emit('dashboard:modal-closed');

      return promise;
    };

    this.isModalOpen = () => {
      return !this.getPluginState().isHidden || false;
    };

    this.requestCloseModal = () => {
      if (this.opts.onRequestCloseModal) {
        return this.opts.onRequestCloseModal();
      }

      return this.closeModal();
    };

    this.setDarkModeCapability = isDarkModeOn => {
      const {
        capabilities
      } = this.uppy.getState();
      this.uppy.setState({
        capabilities: { ...capabilities,
          darkMode: isDarkModeOn
        }
      });
    };

    this.handleSystemDarkModeChange = event => {
      const isDarkModeOnNow = event.matches;
      this.uppy.log(`[Dashboard] Dark mode is ${isDarkModeOnNow ? 'on' : 'off'}`);
      this.setDarkModeCapability(isDarkModeOnNow);
    };

    this.toggleFileCard = (show, fileID) => {
      const file = this.uppy.getFile(fileID);

      if (show) {
        this.uppy.emit('dashboard:file-edit-start', file);
      } else {
        this.uppy.emit('dashboard:file-edit-complete', file);
      }

      this.setPluginState({
        fileCardFor: show ? fileID : null,
        activeOverlayType: show ? 'FileCard' : null
      });
    };

    this.toggleAddFilesPanel = show => {
      this.setPluginState({
        showAddFilesPanel: show,
        activeOverlayType: show ? 'AddFiles' : null
      });
    };

    this.addFiles = files => {
      const descriptors = files.map(file => ({
        source: this.id,
        name: file.name,
        type: file.type,
        data: file,
        meta: {
          // path of the file relative to the ancestor directory the user selected.
          // e.g. 'docs/Old Prague/airbnb.pdf'
          relativePath: file.relativePath || null
        }
      }));

      try {
        this.uppy.addFiles(descriptors);
      } catch (err) {
        this.uppy.log(err);
      }
    };

    this.startListeningToResize = () => {
      // Watch for Dashboard container (`.uppy-Dashboard-inner`) resize
      // and update containerWidth/containerHeight in plugin state accordingly.
      // Emits first event on initialization.
      this.resizeObserver = new ResizeObserver(entries => {
        const uppyDashboardInnerEl = entries[0];
        const {
          width,
          height
        } = uppyDashboardInnerEl.contentRect;
        this.uppy.log(`[Dashboard] resized: ${width} / ${height}`, 'debug');
        this.setPluginState({
          containerWidth: width,
          containerHeight: height,
          areInsidesReadyToBeVisible: true
        });
      });
      this.resizeObserver.observe(this.el.querySelector('.uppy-Dashboard-inner')); // If ResizeObserver fails to emit an event telling us what size to use - default to the mobile view

      this.makeDashboardInsidesVisibleAnywayTimeout = setTimeout(() => {
        const pluginState = this.getPluginState();
        const isModalAndClosed = !this.opts.inline && pluginState.isHidden;

        if ( // if ResizeObserver hasn't yet fired,
        !pluginState.areInsidesReadyToBeVisible // and it's not due to the modal being closed
        && !isModalAndClosed) {
          this.uppy.log("[Dashboard] resize event didn't fire on time: defaulted to mobile layout", 'debug');
          this.setPluginState({
            areInsidesReadyToBeVisible: true
          });
        }
      }, 1000);
    };

    this.stopListeningToResize = () => {
      this.resizeObserver.disconnect();
      clearTimeout(this.makeDashboardInsidesVisibleAnywayTimeout);
    };

    this.recordIfFocusedOnUppyRecently = event => {
      if (this.el.contains(event.target)) {
        this.ifFocusedOnUppyRecently = true;
      } else {
        this.ifFocusedOnUppyRecently = false; // ___Why run this.superFocus.cancel here when it already runs in superFocusOnEachUpdate?
        //    Because superFocus is debounced, when we move from Uppy to some other element on the page,
        //    previously run superFocus sometimes hits and moves focus back to Uppy.

        this.superFocus.cancel();
      }
    };

    this.disableAllFocusableElements = disable => {
      const focusableNodes = toArray(this.el.querySelectorAll(FOCUSABLE_ELEMENTS));

      if (disable) {
        focusableNodes.forEach(node => {
          // save previous tabindex in a data-attribute, to restore when enabling
          const currentTabIndex = node.getAttribute('tabindex');

          if (currentTabIndex) {
            node.dataset.inertTabindex = currentTabIndex;
          }

          node.setAttribute('tabindex', '-1');
        });
      } else {
        focusableNodes.forEach(node => {
          if ('inertTabindex' in node.dataset) {
            node.setAttribute('tabindex', node.dataset.inertTabindex);
          } else {
            node.removeAttribute('tabindex');
          }
        });
      }

      this.dashboardIsDisabled = disable;
    };

    this.updateBrowserHistory = () => {
      var _history$state2;

      // Ensure history state does not already contain our modal name to avoid double-pushing
      // eslint-disable-next-line no-restricted-globals
      if (!((_history$state2 = history.state) != null && _history$state2[this.modalName])) {
        // Push to history so that the page is not lost on browser back button press
        // eslint-disable-next-line no-restricted-globals
        history.pushState({ // eslint-disable-next-line no-restricted-globals
          ...history.state,
          [this.modalName]: true
        }, '');
      } // Listen for back button presses


      window.addEventListener('popstate', this.handlePopState, false);
    };

    this.handlePopState = event => {
      var _event$state;

      // Close the modal if the history state no longer contains our modal name
      if (this.isModalOpen() && (!event.state || !event.state[this.modalName])) {
        this.closeModal({
          manualClose: false
        });
      } // When the browser back button is pressed and uppy is now the latest entry
      // in the history but the modal is closed, fix the history by removing the
      // uppy history entry.
      // This occurs when another entry is added into the history state while the
      // modal is open, and then the modal gets manually closed.
      // Solves PR #575 (https://github.com/transloadit/uppy/pull/575)


      if (!this.isModalOpen() && (_event$state = event.state) != null && _event$state[this.modalName]) {
        // eslint-disable-next-line no-restricted-globals
        history.back();
      }
    };

    this.handleKeyDownInModal = event => {
      // close modal on esc key press
      if (event.keyCode === ESC_KEY) this.requestCloseModal(event); // trap focus on tab key press

      if (event.keyCode === TAB_KEY) trapFocus.forModal(event, this.getPluginState().activeOverlayType, this.el);
    };

    this.handleClickOutside = () => {
      if (this.opts.closeModalOnClickOutside) this.requestCloseModal();
    };

    this.handlePaste = event => {
      // Let any acquirer plugin (Url/Webcam/etc.) handle pastes to the root
      this.uppy.iteratePlugins(plugin => {
        if (plugin.type === 'acquirer') {
          // Every Plugin with .type acquirer can define handleRootPaste(event)
          plugin.handleRootPaste == null ? void 0 : plugin.handleRootPaste(event);
        }
      }); // Add all dropped files

      const files = toArray(event.clipboardData.files);

      if (files.length > 0) {
        this.uppy.log('[Dashboard] Files pasted');
        this.addFiles(files);
      }
    };

    this.handleInputChange = event => {
      event.preventDefault();
      const files = toArray(event.target.files);

      if (files.length > 0) {
        this.uppy.log('[Dashboard] Files selected through input');
        this.addFiles(files);
      }
    };

    this.handleDragOver = event => {
      var _this$opts$onDragOver, _this$opts;

      event.preventDefault();
      event.stopPropagation(); // Check if some plugin can handle the datatransfer without files —
      // for instance, the Url plugin can import a url

      const canSomePluginHandleRootDrop = () => {
        let somePluginCanHandleRootDrop = true;
        this.uppy.iteratePlugins(plugin => {
          if (plugin.canHandleRootDrop != null && plugin.canHandleRootDrop(event)) {
            somePluginCanHandleRootDrop = true;
          }
        });
        return somePluginCanHandleRootDrop;
      }; // Check if the "type" of the datatransfer object includes files


      const doesEventHaveFiles = () => {
        const {
          types
        } = event.dataTransfer;
        return types.some(type => type === 'Files');
      }; // Deny drop, if no plugins can handle datatransfer, there are no files,
      // or when opts.disabled is set, or new uploads are not allowed


      const somePluginCanHandleRootDrop = canSomePluginHandleRootDrop(event);
      const hasFiles = doesEventHaveFiles(event);

      if (!somePluginCanHandleRootDrop && !hasFiles || this.opts.disabled // opts.disableLocalFiles should only be taken into account if no plugins
      // can handle the datatransfer
      || this.opts.disableLocalFiles && (hasFiles || !somePluginCanHandleRootDrop) || !this.uppy.getState().allowNewUpload) {
        event.dataTransfer.dropEffect = 'none';
        clearTimeout(this.removeDragOverClassTimeout);
        return;
      } // Add a small (+) icon on drop
      // (and prevent browsers from interpreting this as files being _moved_ into the
      // browser, https://github.com/transloadit/uppy/issues/1978).


      event.dataTransfer.dropEffect = 'copy';
      clearTimeout(this.removeDragOverClassTimeout);
      this.setPluginState({
        isDraggingOver: true
      });
      (_this$opts$onDragOver = (_this$opts = this.opts).onDragOver) == null ? void 0 : _this$opts$onDragOver.call(_this$opts, event);
    };

    this.handleDragLeave = event => {
      var _this$opts$onDragLeav, _this$opts2;

      event.preventDefault();
      event.stopPropagation();
      clearTimeout(this.removeDragOverClassTimeout); // Timeout against flickering, this solution is taken from drag-drop library.
      // Solution with 'pointer-events: none' didn't work across browsers.

      this.removeDragOverClassTimeout = setTimeout(() => {
        this.setPluginState({
          isDraggingOver: false
        });
      }, 50);
      (_this$opts$onDragLeav = (_this$opts2 = this.opts).onDragLeave) == null ? void 0 : _this$opts$onDragLeav.call(_this$opts2, event);
    };

    this.handleDrop = async event => {
      var _this$opts$onDrop, _this$opts3;

      event.preventDefault();
      event.stopPropagation();
      clearTimeout(this.removeDragOverClassTimeout);
      this.setPluginState({
        isDraggingOver: false
      }); // Let any acquirer plugin (Url/Webcam/etc.) handle drops to the root

      this.uppy.iteratePlugins(plugin => {
        if (plugin.type === 'acquirer') {
          // Every Plugin with .type acquirer can define handleRootDrop(event)
          plugin.handleRootDrop == null ? void 0 : plugin.handleRootDrop(event);
        }
      }); // Add all dropped files

      let executedDropErrorOnce = false;

      const logDropError = error => {
        this.uppy.log(error, 'error'); // In practice all drop errors are most likely the same,
        // so let's just show one to avoid overwhelming the user

        if (!executedDropErrorOnce) {
          this.uppy.info(error.message, 'error');
          executedDropErrorOnce = true;
        }
      }; // Add all dropped files


      const files = await getDroppedFiles(event.dataTransfer, {
        logDropError
      });

      if (files.length > 0) {
        this.uppy.log('[Dashboard] Files dropped');
        this.addFiles(files);
      }

      (_this$opts$onDrop = (_this$opts3 = this.opts).onDrop) == null ? void 0 : _this$opts$onDrop.call(_this$opts3, event);
    };

    this.handleRequestThumbnail = file => {
      if (!this.opts.waitForThumbnailsBeforeUpload) {
        this.uppy.emit('thumbnail:request', file);
      }
    };

    this.handleCancelThumbnail = file => {
      if (!this.opts.waitForThumbnailsBeforeUpload) {
        this.uppy.emit('thumbnail:cancel', file);
      }
    };

    this.handleKeyDownInInline = event => {
      // Trap focus on tab key press.
      if (event.keyCode === TAB_KEY) trapFocus.forInline(event, this.getPluginState().activeOverlayType, this.el);
    };

    this.handlePasteOnBody = event => {
      const isFocusInOverlay = this.el.contains(document.activeElement);

      if (isFocusInOverlay) {
        this.handlePaste(event);
      }
    };

    this.handleComplete = _ref => {
      let {
        failed
      } = _ref;

      if (this.opts.closeAfterFinish && failed.length === 0) {
        // All uploads are done
        this.requestCloseModal();
      }
    };

    this.handleCancelRestore = () => {
      this.uppy.emit('restore-canceled');
    };

    Object.defineProperty(this, _openFileEditorWhenFilesAdded, {
      writable: true,
      value: files => {
        const firstFile = files[0];

        if (this.canEditFile(firstFile)) {
          this.openFileEditor(firstFile);
        }
      }
    });

    this.initEvents = () => {
      // Modal open button
      if (this.opts.trigger && !this.opts.inline) {
        const showModalTrigger = findAllDOMElements(this.opts.trigger);

        if (showModalTrigger) {
          showModalTrigger.forEach(trigger => trigger.addEventListener('click', this.openModal));
        } else {
          this.uppy.log('Dashboard modal trigger not found. Make sure `trigger` is set in Dashboard options, unless you are planning to call `dashboard.openModal()` method yourself', 'warning');
        }
      }

      this.startListeningToResize();
      document.addEventListener('paste', this.handlePasteOnBody);
      this.uppy.on('plugin-remove', this.removeTarget);
      this.uppy.on('file-added', this.hideAllPanels);
      this.uppy.on('dashboard:modal-closed', this.hideAllPanels);
      this.uppy.on('file-editor:complete', this.hideAllPanels);
      this.uppy.on('complete', this.handleComplete); // ___Why fire on capture?
      //    Because this.ifFocusedOnUppyRecently needs to change before onUpdate() fires.

      document.addEventListener('focus', this.recordIfFocusedOnUppyRecently, true);
      document.addEventListener('click', this.recordIfFocusedOnUppyRecently, true);

      if (this.opts.inline) {
        this.el.addEventListener('keydown', this.handleKeyDownInInline);
      }

      if (this.opts.autoOpenFileEditor) {
        this.uppy.on('files-added', _classPrivateFieldLooseBase(this, _openFileEditorWhenFilesAdded)[_openFileEditorWhenFilesAdded]);
      }
    };

    this.removeEvents = () => {
      const showModalTrigger = findAllDOMElements(this.opts.trigger);

      if (!this.opts.inline && showModalTrigger) {
        showModalTrigger.forEach(trigger => trigger.removeEventListener('click', this.openModal));
      }

      this.stopListeningToResize();
      document.removeEventListener('paste', this.handlePasteOnBody);
      window.removeEventListener('popstate', this.handlePopState, false);
      this.uppy.off('plugin-remove', this.removeTarget);
      this.uppy.off('file-added', this.hideAllPanels);
      this.uppy.off('dashboard:modal-closed', this.hideAllPanels);
      this.uppy.off('file-editor:complete', this.hideAllPanels);
      this.uppy.off('complete', this.handleComplete);
      document.removeEventListener('focus', this.recordIfFocusedOnUppyRecently);
      document.removeEventListener('click', this.recordIfFocusedOnUppyRecently);

      if (this.opts.inline) {
        this.el.removeEventListener('keydown', this.handleKeyDownInInline);
      }

      if (this.opts.autoOpenFileEditor) {
        this.uppy.off('files-added', _classPrivateFieldLooseBase(this, _openFileEditorWhenFilesAdded)[_openFileEditorWhenFilesAdded]);
      }
    };

    this.superFocusOnEachUpdate = () => {
      const isFocusInUppy = this.el.contains(document.activeElement); // When focus is lost on the page (== focus is on body for most browsers, or focus is null for IE11)

      const isFocusNowhere = document.activeElement === document.body || document.activeElement === null;
      const isInformerHidden = this.uppy.getState().info.isHidden;
      const isModal = !this.opts.inline;

      if ( // If update is connected to showing the Informer - let the screen reader calmly read it.
      isInformerHidden && ( // If we are in a modal - always superfocus without concern for other elements
      // on the page (user is unlikely to want to interact with the rest of the page)
      isModal // If we are already inside of Uppy, or
      || isFocusInUppy // If we are not focused on anything BUT we have already, at least once, focused on uppy
      //   1. We focus when isFocusNowhere, because when the element we were focused
      //      on disappears (e.g. an overlay), - focus gets lost. If user is typing
      //      something somewhere else on the page, - focus won't be 'nowhere'.
      //   2. We only focus when focus is nowhere AND this.ifFocusedOnUppyRecently,
      //      to avoid focus jumps if we do something else on the page.
      //   [Practical check] Without '&& this.ifFocusedOnUppyRecently', in Safari, in inline mode,
      //                     when file is uploading, - navigate via tab to the checkbox,
      //                     try to press space multiple times. Focus will jump to Uppy.
      || isFocusNowhere && this.ifFocusedOnUppyRecently)) {
        this.superFocus(this.el, this.getPluginState().activeOverlayType);
      } else {
        this.superFocus.cancel();
      }
    };

    this.afterUpdate = () => {
      if (this.opts.disabled && !this.dashboardIsDisabled) {
        this.disableAllFocusableElements(true);
        return;
      }

      if (!this.opts.disabled && this.dashboardIsDisabled) {
        this.disableAllFocusableElements(false);
      }

      this.superFocusOnEachUpdate();
    };

    this.saveFileCard = (meta, fileID) => {
      this.uppy.setFileMeta(fileID, meta);
      this.toggleFileCard(false, fileID);
    };

    Object.defineProperty(this, _attachRenderFunctionToTarget, {
      writable: true,
      value: target => {
        const plugin = this.uppy.getPlugin(target.id);
        return { ...target,
          icon: plugin.icon || this.opts.defaultPickerIcon,
          render: plugin.render
        };
      }
    });
    Object.defineProperty(this, _isTargetSupported, {
      writable: true,
      value: target => {
        const plugin = this.uppy.getPlugin(target.id); // If the plugin does not provide a `supported` check, assume the plugin works everywhere.

        if (typeof plugin.isSupported !== 'function') {
          return true;
        }

        return plugin.isSupported();
      }
    });
    Object.defineProperty(this, _getAcquirers, {
      writable: true,
      value: memoize(targets => {
        return targets.filter(target => target.type === 'acquirer' && _classPrivateFieldLooseBase(this, _isTargetSupported)[_isTargetSupported](target)).map(_classPrivateFieldLooseBase(this, _attachRenderFunctionToTarget)[_attachRenderFunctionToTarget]);
      })
    });
    Object.defineProperty(this, _getProgressIndicators, {
      writable: true,
      value: memoize(targets => {
        return targets.filter(target => target.type === 'progressindicator').map(_classPrivateFieldLooseBase(this, _attachRenderFunctionToTarget)[_attachRenderFunctionToTarget]);
      })
    });
    Object.defineProperty(this, _getEditors, {
      writable: true,
      value: memoize(targets => {
        return targets.filter(target => target.type === 'editor').map(_classPrivateFieldLooseBase(this, _attachRenderFunctionToTarget)[_attachRenderFunctionToTarget]);
      })
    });

    this.render = state => {
      const pluginState = this.getPluginState();
      const {
        files,
        capabilities,
        allowNewUpload
      } = state;
      const {
        newFiles,
        uploadStartedFiles,
        completeFiles,
        erroredFiles,
        inProgressFiles,
        inProgressNotPausedFiles,
        processingFiles,
        isUploadStarted,
        isAllComplete,
        isAllErrored,
        isAllPaused
      } = this.uppy.getObjectOfFilesPerState();

      const acquirers = _classPrivateFieldLooseBase(this, _getAcquirers)[_getAcquirers](pluginState.targets);

      const progressindicators = _classPrivateFieldLooseBase(this, _getProgressIndicators)[_getProgressIndicators](pluginState.targets);

      const editors = _classPrivateFieldLooseBase(this, _getEditors)[_getEditors](pluginState.targets);

      let theme;

      if (this.opts.theme === 'auto') {
        theme = capabilities.darkMode ? 'dark' : 'light';
      } else {
        theme = this.opts.theme;
      }

      if (['files', 'folders', 'both'].indexOf(this.opts.fileManagerSelectionType) < 0) {
        this.opts.fileManagerSelectionType = 'files'; // eslint-disable-next-line no-console

        console.warn(`Unsupported option for "fileManagerSelectionType". Using default of "${this.opts.fileManagerSelectionType}".`);
      }

      return DashboardUI({
        state,
        isHidden: pluginState.isHidden,
        files,
        newFiles,
        uploadStartedFiles,
        completeFiles,
        erroredFiles,
        inProgressFiles,
        inProgressNotPausedFiles,
        processingFiles,
        isUploadStarted,
        isAllComplete,
        isAllErrored,
        isAllPaused,
        totalFileCount: Object.keys(files).length,
        totalProgress: state.totalProgress,
        allowNewUpload,
        acquirers,
        theme,
        disabled: this.opts.disabled,
        disableLocalFiles: this.opts.disableLocalFiles,
        direction: this.opts.direction,
        activePickerPanel: pluginState.activePickerPanel,
        showFileEditor: pluginState.showFileEditor,
        saveFileEditor: this.saveFileEditor,
        disableAllFocusableElements: this.disableAllFocusableElements,
        animateOpenClose: this.opts.animateOpenClose,
        isClosing: pluginState.isClosing,
        progressindicators,
        editors,
        autoProceed: this.uppy.opts.autoProceed,
        id: this.id,
        closeModal: this.requestCloseModal,
        handleClickOutside: this.handleClickOutside,
        handleInputChange: this.handleInputChange,
        handlePaste: this.handlePaste,
        inline: this.opts.inline,
        showPanel: this.showPanel,
        hideAllPanels: this.hideAllPanels,
        i18n: this.i18n,
        i18nArray: this.i18nArray,
        uppy: this.uppy,
        note: this.opts.note,
        recoveredState: state.recoveredState,
        metaFields: pluginState.metaFields,
        resumableUploads: capabilities.resumableUploads || false,
        individualCancellation: capabilities.individualCancellation,
        isMobileDevice: capabilities.isMobileDevice,
        fileCardFor: pluginState.fileCardFor,
        toggleFileCard: this.toggleFileCard,
        toggleAddFilesPanel: this.toggleAddFilesPanel,
        showAddFilesPanel: pluginState.showAddFilesPanel,
        saveFileCard: this.saveFileCard,
        openFileEditor: this.openFileEditor,
        canEditFile: this.canEditFile,
        width: this.opts.width,
        height: this.opts.height,
        showLinkToFileUploadResult: this.opts.showLinkToFileUploadResult,
        fileManagerSelectionType: this.opts.fileManagerSelectionType,
        proudlyDisplayPoweredByUppy: this.opts.proudlyDisplayPoweredByUppy,
        hideCancelButton: this.opts.hideCancelButton,
        hideRetryButton: this.opts.hideRetryButton,
        hidePauseResumeButton: this.opts.hidePauseResumeButton,
        showRemoveButtonAfterComplete: this.opts.showRemoveButtonAfterComplete,
        containerWidth: pluginState.containerWidth,
        containerHeight: pluginState.containerHeight,
        areInsidesReadyToBeVisible: pluginState.areInsidesReadyToBeVisible,
        isTargetDOMEl: this.isTargetDOMEl,
        parentElement: this.el,
        allowedFileTypes: this.uppy.opts.restrictions.allowedFileTypes,
        maxNumberOfFiles: this.uppy.opts.restrictions.maxNumberOfFiles,
        requiredMetaFields: this.uppy.opts.restrictions.requiredMetaFields,
        showSelectedFiles: this.opts.showSelectedFiles,
        handleCancelRestore: this.handleCancelRestore,
        handleRequestThumbnail: this.handleRequestThumbnail,
        handleCancelThumbnail: this.handleCancelThumbnail,
        // drag props
        isDraggingOver: pluginState.isDraggingOver,
        handleDragOver: this.handleDragOver,
        handleDragLeave: this.handleDragLeave,
        handleDrop: this.handleDrop
      });
    };

    this.discoverProviderPlugins = () => {
      this.uppy.iteratePlugins(plugin => {
        if (plugin && !plugin.target && plugin.opts && plugin.opts.target === this.constructor) {
          this.addTarget(plugin);
        }
      });
    };

    this.install = () => {
      // Set default state for Dashboard
      this.setPluginState({
        isHidden: true,
        fileCardFor: null,
        activeOverlayType: null,
        showAddFilesPanel: false,
        activePickerPanel: false,
        showFileEditor: false,
        metaFields: this.opts.metaFields,
        targets: [],
        // We'll make them visible once .containerWidth is determined
        areInsidesReadyToBeVisible: false,
        isDraggingOver: false
      });
      const {
        inline,
        closeAfterFinish
      } = this.opts;

      if (inline && closeAfterFinish) {
        throw new Error('[Dashboard] `closeAfterFinish: true` cannot be used on an inline Dashboard, because an inline Dashboard cannot be closed at all. Either set `inline: false`, or disable the `closeAfterFinish` option.');
      }

      const {
        allowMultipleUploads,
        allowMultipleUploadBatches
      } = this.uppy.opts;

      if ((allowMultipleUploads || allowMultipleUploadBatches) && closeAfterFinish) {
        this.uppy.log('[Dashboard] When using `closeAfterFinish`, we recommended setting the `allowMultipleUploadBatches` option to `false` in the Uppy constructor. See https://uppy.io/docs/uppy/#allowMultipleUploads-true', 'warning');
      }

      const {
        target
      } = this.opts;

      if (target) {
        this.mount(target, this);
      }

      const plugins = this.opts.plugins || [];
      plugins.forEach(pluginID => {
        const plugin = this.uppy.getPlugin(pluginID);

        if (plugin) {
          plugin.mount(this, plugin);
        }
      });

      if (!this.opts.disableStatusBar) {
        this.uppy.use(StatusBar, {
          id: `${this.id}:StatusBar`,
          target: this,
          hideUploadButton: this.opts.hideUploadButton,
          hideRetryButton: this.opts.hideRetryButton,
          hidePauseResumeButton: this.opts.hidePauseResumeButton,
          hideCancelButton: this.opts.hideCancelButton,
          showProgressDetails: this.opts.showProgressDetails,
          hideAfterFinish: this.opts.hideProgressAfterFinish,
          locale: this.opts.locale,
          doneButtonHandler: this.opts.doneButtonHandler
        });
      }

      if (!this.opts.disableInformer) {
        this.uppy.use(Informer, {
          id: `${this.id}:Informer`,
          target: this
        });
      }

      if (!this.opts.disableThumbnailGenerator) {
        this.uppy.use(ThumbnailGenerator, {
          id: `${this.id}:ThumbnailGenerator`,
          thumbnailWidth: this.opts.thumbnailWidth,
          thumbnailType: this.opts.thumbnailType,
          waitForThumbnailsBeforeUpload: this.opts.waitForThumbnailsBeforeUpload,
          // If we don't block on thumbnails, we can lazily generate them
          lazy: !this.opts.waitForThumbnailsBeforeUpload
        });
      } // Dark Mode / theme


      this.darkModeMediaQuery = typeof window !== 'undefined' && window.matchMedia ? window.matchMedia('(prefers-color-scheme: dark)') : null;
      const isDarkModeOnFromTheStart = this.darkModeMediaQuery ? this.darkModeMediaQuery.matches : false;
      this.uppy.log(`[Dashboard] Dark mode is ${isDarkModeOnFromTheStart ? 'on' : 'off'}`);
      this.setDarkModeCapability(isDarkModeOnFromTheStart);

      if (this.opts.theme === 'auto') {
        this.darkModeMediaQuery.addListener(this.handleSystemDarkModeChange);
      }

      this.discoverProviderPlugins();
      this.initEvents();
    };

    this.uninstall = () => {
      if (!this.opts.disableInformer) {
        const informer = this.uppy.getPlugin(`${this.id}:Informer`); // Checking if this plugin exists, in case it was removed by uppy-core
        // before the Dashboard was.

        if (informer) this.uppy.removePlugin(informer);
      }

      if (!this.opts.disableStatusBar) {
        const statusBar = this.uppy.getPlugin(`${this.id}:StatusBar`);
        if (statusBar) this.uppy.removePlugin(statusBar);
      }

      if (!this.opts.disableThumbnailGenerator) {
        const thumbnail = this.uppy.getPlugin(`${this.id}:ThumbnailGenerator`);
        if (thumbnail) this.uppy.removePlugin(thumbnail);
      }

      const plugins = this.opts.plugins || [];
      plugins.forEach(pluginID => {
        const plugin = this.uppy.getPlugin(pluginID);
        if (plugin) plugin.unmount();
      });

      if (this.opts.theme === 'auto') {
        this.darkModeMediaQuery.removeListener(this.handleSystemDarkModeChange);
      }

      this.unmount();
      this.removeEvents();
    };

    this.id = this.opts.id || 'Dashboard';
    this.title = 'Dashboard';
    this.type = 'orchestrator';
    this.modalName = `uppy-Dashboard-${nanoid()}`;
    this.defaultLocale = locale; // set default options

    const defaultOptions = {
      target: 'body',
      metaFields: [],
      trigger: null,
      inline: false,
      width: 750,
      height: 550,
      thumbnailWidth: 280,
      thumbnailType: 'image/jpeg',
      waitForThumbnailsBeforeUpload: false,
      defaultPickerIcon,
      showLinkToFileUploadResult: false,
      showProgressDetails: false,
      hideUploadButton: false,
      hideCancelButton: false,
      hideRetryButton: false,
      hidePauseResumeButton: false,
      hideProgressAfterFinish: false,
      doneButtonHandler: () => {
        this.uppy.reset();
        this.requestCloseModal();
      },
      note: null,
      closeModalOnClickOutside: false,
      closeAfterFinish: false,
      disableStatusBar: false,
      disableInformer: false,
      disableThumbnailGenerator: false,
      disablePageScrollWhenModalOpen: true,
      animateOpenClose: true,
      fileManagerSelectionType: 'files',
      proudlyDisplayPoweredByUppy: true,
      onRequestCloseModal: () => this.closeModal(),
      showSelectedFiles: true,
      showRemoveButtonAfterComplete: false,
      browserBackButtonClose: false,
      theme: 'light',
      autoOpenFileEditor: false,
      disabled: false,
      disableLocalFiles: false
    }; // merge default options with the ones set by user

    this.opts = { ...defaultOptions,
      ..._opts
    };
    this.i18nInit();
    this.superFocus = createSuperFocus();
    this.ifFocusedOnUppyRecently = false; // Timeouts

    this.makeDashboardInsidesVisibleAnywayTimeout = null;
    this.removeDragOverClassTimeout = null;
  }

  onMount() {
    // Set the text direction if the page has not defined one.
    const element = this.el;
    const direction = getTextDirection(element);

    if (!direction) {
      element.dir = 'ltr';
    }
  }

}), _class.VERSION = "2.1.1", _temp);

},{"./../../core":87,"./../../informer":126,"./../../status-bar":169,"./../../thumbnail-generator":172,"./../../utils/lib/FOCUSABLE_ELEMENTS":188,"./../../utils/lib/findAllDOMElements":196,"./../../utils/lib/getDroppedFiles":200,"./../../utils/lib/getTextDirection":210,"./../../utils/lib/toArray":223,"./components/Dashboard":93,"./locale":109,"./utils/createSuperFocus":111,"./utils/trapFocus":115,"memoize-one":26,"nanoid":31,"preact":35}],109:[function(require,module,exports){
"use strict";

module.exports = {
  strings: {
    // When `inline: false`, used as the screen reader label for the button that closes the modal.
    closeModal: 'Close Modal',
    // Used as the screen reader label for the plus (+) button that shows the “Add more files” screen
    addMoreFiles: 'Add more files',
    addingMoreFiles: 'Adding more files',
    // Used as the header for import panels, e.g., “Import from Google Drive”.
    importFrom: 'Import from %{name}',
    // When `inline: false`, used as the screen reader label for the dashboard modal.
    dashboardWindowTitle: 'Uppy Dashboard Window (Press escape to close)',
    // When `inline: true`, used as the screen reader label for the dashboard area.
    dashboardTitle: 'Uppy Dashboard',
    // Shown in the Informer when a link to a file was copied to the clipboard.
    copyLinkToClipboardSuccess: 'Link copied to clipboard.',
    // Used when a link cannot be copied automatically — the user has to select the text from the
    // input element below this string.
    copyLinkToClipboardFallback: 'Copy the URL below',
    // Used as the hover title and screen reader label for buttons that copy a file link.
    copyLink: 'Copy link',
    back: 'Back',
    // Used as the screen reader label for buttons that remove a file.
    removeFile: 'Remove file',
    // Used as the screen reader label for buttons that open the metadata editor panel for a file.
    editFile: 'Edit file',
    // Shown in the panel header for the metadata editor. Rendered as “Editing image.png”.
    editing: 'Editing %{file}',
    // Used as the screen reader label for the button that saves metadata edits and returns to the
    // file list view.
    finishEditingFile: 'Finish editing file',
    saveChanges: 'Save changes',
    // Used as the label for the tab button that opens the system file selection dialog.
    myDevice: 'My Device',
    dropHint: 'Drop your files here',
    // Used as the hover text and screen reader label for file progress indicators when
    // they have been fully uploaded.
    uploadComplete: 'Upload complete',
    uploadPaused: 'Upload paused',
    // Used as the hover text and screen reader label for the buttons to resume paused uploads.
    resumeUpload: 'Resume upload',
    // Used as the hover text and screen reader label for the buttons to pause uploads.
    pauseUpload: 'Pause upload',
    // Used as the hover text and screen reader label for the buttons to retry failed uploads.
    retryUpload: 'Retry upload',
    // Used as the hover text and screen reader label for the buttons to cancel uploads.
    cancelUpload: 'Cancel upload',
    // Used in a title, how many files are currently selected
    xFilesSelected: {
      0: '%{smart_count} file selected',
      1: '%{smart_count} files selected'
    },
    uploadingXFiles: {
      0: 'Uploading %{smart_count} file',
      1: 'Uploading %{smart_count} files'
    },
    processingXFiles: {
      0: 'Processing %{smart_count} file',
      1: 'Processing %{smart_count} files'
    },
    // The "powered by Uppy" link at the bottom of the Dashboard.
    poweredBy: 'Powered by %{uppy}',
    addMore: 'Add more',
    editFileWithFilename: 'Edit file %{file}',
    save: 'Save',
    cancel: 'Cancel',
    dropPasteFiles: 'Drop files here or %{browseFiles}',
    dropPasteFolders: 'Drop files here or %{browseFolders}',
    dropPasteBoth: 'Drop files here, %{browseFiles} or %{browseFolders}',
    dropPasteImportFiles: 'Drop files here, %{browseFiles} or import from:',
    dropPasteImportFolders: 'Drop files here, %{browseFolders} or import from:',
    dropPasteImportBoth: 'Drop files here, %{browseFiles}, %{browseFolders} or import from:',
    importFiles: 'Import files from:',
    browseFiles: 'browse files',
    browseFolders: 'browse folders',
    recoveredXFiles: {
      0: 'We could not fully recover 1 file. Please re-select it and resume the upload.',
      1: 'We could not fully recover %{smart_count} files. Please re-select them and resume the upload.'
    },
    recoveredAllFiles: 'We restored all files. You can now resume the upload.',
    sessionRestored: 'Session restored',
    reSelect: 'Re-select',
    missingRequiredMetaFields: {
      0: 'Missing required meta field: %{fields}.',
      1: 'Missing required meta fields: %{fields}.'
    }
  }
};

},{}],110:[function(require,module,exports){
"use strict";

/**
 * Copies text to clipboard by creating an almost invisible textarea,
 * adding text there, then running execCommand('copy').
 * Falls back to prompt() when the easy way fails (hello, Safari!)
 * From http://stackoverflow.com/a/30810322
 *
 * @param {string} textToCopy
 * @param {string} fallbackString
 * @returns {Promise}
 */
module.exports = function copyToClipboard(textToCopy, fallbackString) {
  fallbackString = fallbackString || 'Copy the URL below';
  return new Promise(resolve => {
    const textArea = document.createElement('textarea');
    textArea.setAttribute('style', {
      position: 'fixed',
      top: 0,
      left: 0,
      width: '2em',
      height: '2em',
      padding: 0,
      border: 'none',
      outline: 'none',
      boxShadow: 'none',
      background: 'transparent'
    });
    textArea.value = textToCopy;
    document.body.appendChild(textArea);
    textArea.select();

    const magicCopyFailed = () => {
      document.body.removeChild(textArea); // eslint-disable-next-line no-alert

      window.prompt(fallbackString, textToCopy);
      resolve();
    };

    try {
      const successful = document.execCommand('copy');

      if (!successful) {
        return magicCopyFailed('copy command unavailable');
      }

      document.body.removeChild(textArea);
      return resolve();
    } catch (err) {
      document.body.removeChild(textArea);
      return magicCopyFailed(err);
    }
  });
};

},{}],111:[function(require,module,exports){
"use strict";

const debounce = require('lodash.debounce');

const FOCUSABLE_ELEMENTS = require('./../../../utils/lib/FOCUSABLE_ELEMENTS');

const getActiveOverlayEl = require('./getActiveOverlayEl');
/*
  Focuses on some element in the currently topmost overlay.

  1. If there are some [data-uppy-super-focusable] elements rendered already - focuses
     on the first superfocusable element, and leaves focus up to the control of
     a user (until currently focused element disappears from the screen [which
     can happen when overlay changes, or, e.g., when we click on a folder in googledrive]).
  2. If there are no [data-uppy-super-focusable] elements yet (or ever) - focuses
     on the first focusable element, but switches focus if superfocusable elements appear on next render.
*/


module.exports = function createSuperFocus() {
  let lastFocusWasOnSuperFocusableEl = false;

  const superFocus = (dashboardEl, activeOverlayType) => {
    const overlayEl = getActiveOverlayEl(dashboardEl, activeOverlayType);
    const isFocusInOverlay = overlayEl.contains(document.activeElement); // If focus is already in the topmost overlay, AND on last update we focused on the superfocusable
    // element - then leave focus up to the user.
    // [Practical check] without this line, typing in the search input in googledrive overlay won't work.

    if (isFocusInOverlay && lastFocusWasOnSuperFocusableEl) return;
    const superFocusableEl = overlayEl.querySelector('[data-uppy-super-focusable]'); // If we are already in the topmost overlay, AND there are no super focusable elements yet, - leave focus up to the user.
    // [Practical check] without this line, if you are in an empty folder in google drive, and something's uploading in the
    // bg, - focus will be jumping to Done all the time.

    if (isFocusInOverlay && !superFocusableEl) return;

    if (superFocusableEl) {
      superFocusableEl.focus({
        preventScroll: true
      });
      lastFocusWasOnSuperFocusableEl = true;
    } else {
      const firstEl = overlayEl.querySelector(FOCUSABLE_ELEMENTS);
      firstEl == null ? void 0 : firstEl.focus({
        preventScroll: true
      });
      lastFocusWasOnSuperFocusableEl = false;
    }
  }; // ___Why do we need to debounce?
  //    1. To deal with animations: overlay changes via animations, which results in the DOM updating AFTER plugin.update()
  //       already executed.
  //    [Practical check] without debounce, if we open the Url overlay, and click 'Done', Dashboard won't get focused again.
  //    [Practical check] if we delay 250ms instead of 260ms - IE11 won't get focused in same situation.
  //    2. Performance: there can be many state update()s in a second, and this function is called every time.


  return debounce(superFocus, 260);
};

},{"./../../../utils/lib/FOCUSABLE_ELEMENTS":188,"./getActiveOverlayEl":112,"lodash.debounce":23}],112:[function(require,module,exports){
"use strict";

/**
 * @returns {HTMLElement} - either dashboard element, or the overlay that's most on top
 */
module.exports = function getActiveOverlayEl(dashboardEl, activeOverlayType) {
  if (activeOverlayType) {
    const overlayEl = dashboardEl.querySelector(`[data-uppy-paneltype="${activeOverlayType}"]`); // if an overlay is already mounted

    if (overlayEl) return overlayEl;
  }

  return dashboardEl;
};

},{}],113:[function(require,module,exports){
"use strict";

const {
  h
} = require('preact');

function iconImage() {
  return h("svg", {
    "aria-hidden": "true",
    focusable: "false",
    width: "25",
    height: "25",
    viewBox: "0 0 25 25"
  }, h("g", {
    fill: "#686DE0",
    fillRule: "evenodd"
  }, h("path", {
    d: "M5 7v10h15V7H5zm0-1h15a1 1 0 0 1 1 1v10a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1V7a1 1 0 0 1 1-1z",
    fillRule: "nonzero"
  }), h("path", {
    d: "M6.35 17.172l4.994-5.026a.5.5 0 0 1 .707 0l2.16 2.16 3.505-3.505a.5.5 0 0 1 .707 0l2.336 2.31-.707.72-1.983-1.97-3.505 3.505a.5.5 0 0 1-.707 0l-2.16-2.159-3.938 3.939-1.409.026z",
    fillRule: "nonzero"
  }), h("circle", {
    cx: "7.5",
    cy: "9.5",
    r: "1.5"
  })));
}

function iconAudio() {
  return h("svg", {
    "aria-hidden": "true",
    focusable: "false",
    className: "uppy-c-icon",
    width: "25",
    height: "25",
    viewBox: "0 0 25 25"
  }, h("path", {
    d: "M9.5 18.64c0 1.14-1.145 2-2.5 2s-2.5-.86-2.5-2c0-1.14 1.145-2 2.5-2 .557 0 1.079.145 1.5.396V7.25a.5.5 0 0 1 .379-.485l9-2.25A.5.5 0 0 1 18.5 5v11.64c0 1.14-1.145 2-2.5 2s-2.5-.86-2.5-2c0-1.14 1.145-2 2.5-2 .557 0 1.079.145 1.5.396V8.67l-8 2v7.97zm8-11v-2l-8 2v2l8-2zM7 19.64c.855 0 1.5-.484 1.5-1s-.645-1-1.5-1-1.5.484-1.5 1 .645 1 1.5 1zm9-2c.855 0 1.5-.484 1.5-1s-.645-1-1.5-1-1.5.484-1.5 1 .645 1 1.5 1z",
    fill: "#049BCF",
    fillRule: "nonzero"
  }));
}

function iconVideo() {
  return h("svg", {
    "aria-hidden": "true",
    focusable: "false",
    className: "uppy-c-icon",
    width: "25",
    height: "25",
    viewBox: "0 0 25 25"
  }, h("path", {
    d: "M16 11.834l4.486-2.691A1 1 0 0 1 22 10v6a1 1 0 0 1-1.514.857L16 14.167V17a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1V9a1 1 0 0 1 1-1h10a1 1 0 0 1 1 1v2.834zM15 9H5v8h10V9zm1 4l5 3v-6l-5 3z",
    fill: "#19AF67",
    fillRule: "nonzero"
  }));
}

function iconPDF() {
  return h("svg", {
    "aria-hidden": "true",
    focusable: "false",
    className: "uppy-c-icon",
    width: "25",
    height: "25",
    viewBox: "0 0 25 25"
  }, h("path", {
    d: "M9.766 8.295c-.691-1.843-.539-3.401.747-3.726 1.643-.414 2.505.938 2.39 3.299-.039.79-.194 1.662-.537 3.148.324.49.66.967 1.055 1.51.17.231.382.488.629.757 1.866-.128 3.653.114 4.918.655 1.487.635 2.192 1.685 1.614 2.84-.566 1.133-1.839 1.084-3.416.249-1.141-.604-2.457-1.634-3.51-2.707a13.467 13.467 0 0 0-2.238.426c-1.392 4.051-4.534 6.453-5.707 4.572-.986-1.58 1.38-4.206 4.914-5.375.097-.322.185-.656.264-1.001.08-.353.306-1.31.407-1.737-.678-1.059-1.2-2.031-1.53-2.91zm2.098 4.87c-.033.144-.068.287-.104.427l.033-.01-.012.038a14.065 14.065 0 0 1 1.02-.197l-.032-.033.052-.004a7.902 7.902 0 0 1-.208-.271c-.197-.27-.38-.526-.555-.775l-.006.028-.002-.003c-.076.323-.148.632-.186.8zm5.77 2.978c1.143.605 1.832.632 2.054.187.26-.519-.087-1.034-1.113-1.473-.911-.39-2.175-.608-3.55-.608.845.766 1.787 1.459 2.609 1.894zM6.559 18.789c.14.223.693.16 1.425-.413.827-.648 1.61-1.747 2.208-3.206-2.563 1.064-4.102 2.867-3.633 3.62zm5.345-10.97c.088-1.793-.351-2.48-1.146-2.28-.473.119-.564 1.05-.056 2.405.213.566.52 1.188.908 1.859.18-.858.268-1.453.294-1.984z",
    fill: "#E2514A",
    fillRule: "nonzero"
  }));
}

function iconArchive() {
  return h("svg", {
    "aria-hidden": "true",
    focusable: "false",
    width: "25",
    height: "25",
    viewBox: "0 0 25 25"
  }, h("path", {
    d: "M10.45 2.05h1.05a.5.5 0 0 1 .5.5v.024a.5.5 0 0 1-.5.5h-1.05a.5.5 0 0 1-.5-.5V2.55a.5.5 0 0 1 .5-.5zm2.05 1.024h1.05a.5.5 0 0 1 .5.5V3.6a.5.5 0 0 1-.5.5H12.5a.5.5 0 0 1-.5-.5v-.025a.5.5 0 0 1 .5-.5v-.001zM10.45 0h1.05a.5.5 0 0 1 .5.5v.025a.5.5 0 0 1-.5.5h-1.05a.5.5 0 0 1-.5-.5V.5a.5.5 0 0 1 .5-.5zm2.05 1.025h1.05a.5.5 0 0 1 .5.5v.024a.5.5 0 0 1-.5.5H12.5a.5.5 0 0 1-.5-.5v-.024a.5.5 0 0 1 .5-.5zm-2.05 3.074h1.05a.5.5 0 0 1 .5.5v.025a.5.5 0 0 1-.5.5h-1.05a.5.5 0 0 1-.5-.5v-.025a.5.5 0 0 1 .5-.5zm2.05 1.025h1.05a.5.5 0 0 1 .5.5v.024a.5.5 0 0 1-.5.5H12.5a.5.5 0 0 1-.5-.5v-.024a.5.5 0 0 1 .5-.5zm-2.05 1.024h1.05a.5.5 0 0 1 .5.5v.025a.5.5 0 0 1-.5.5h-1.05a.5.5 0 0 1-.5-.5v-.025a.5.5 0 0 1 .5-.5zm2.05 1.025h1.05a.5.5 0 0 1 .5.5v.025a.5.5 0 0 1-.5.5H12.5a.5.5 0 0 1-.5-.5v-.025a.5.5 0 0 1 .5-.5zm-2.05 1.025h1.05a.5.5 0 0 1 .5.5v.025a.5.5 0 0 1-.5.5h-1.05a.5.5 0 0 1-.5-.5v-.025a.5.5 0 0 1 .5-.5zm2.05 1.025h1.05a.5.5 0 0 1 .5.5v.024a.5.5 0 0 1-.5.5H12.5a.5.5 0 0 1-.5-.5v-.024a.5.5 0 0 1 .5-.5zm-1.656 3.074l-.82 5.946c.52.302 1.174.458 1.976.458.803 0 1.455-.156 1.975-.458l-.82-5.946h-2.311zm0-1.025h2.312c.512 0 .946.378 1.015.885l.82 5.946c.056.412-.142.817-.501 1.026-.686.398-1.515.597-2.49.597-.974 0-1.804-.199-2.49-.597a1.025 1.025 0 0 1-.5-1.026l.819-5.946c.07-.507.503-.885 1.015-.885zm.545 6.6a.5.5 0 0 1-.397-.561l.143-.999a.5.5 0 0 1 .495-.429h.74a.5.5 0 0 1 .495.43l.143.998a.5.5 0 0 1-.397.561c-.404.08-.819.08-1.222 0z",
    fill: "#00C469",
    fillRule: "nonzero"
  }));
}

function iconFile() {
  return h("svg", {
    "aria-hidden": "true",
    focusable: "false",
    className: "uppy-c-icon",
    width: "25",
    height: "25",
    viewBox: "0 0 25 25"
  }, h("g", {
    fill: "#A7AFB7",
    fillRule: "nonzero"
  }, h("path", {
    d: "M5.5 22a.5.5 0 0 1-.5-.5v-18a.5.5 0 0 1 .5-.5h10.719a.5.5 0 0 1 .367.16l3.281 3.556a.5.5 0 0 1 .133.339V21.5a.5.5 0 0 1-.5.5h-14zm.5-1h13V7.25L16 4H6v17z"
  }), h("path", {
    d: "M15 4v3a1 1 0 0 0 1 1h3V7h-3V4h-1z"
  })));
}

function iconText() {
  return h("svg", {
    "aria-hidden": "true",
    focusable: "false",
    className: "uppy-c-icon",
    width: "25",
    height: "25",
    viewBox: "0 0 25 25"
  }, h("path", {
    d: "M4.5 7h13a.5.5 0 1 1 0 1h-13a.5.5 0 0 1 0-1zm0 3h15a.5.5 0 1 1 0 1h-15a.5.5 0 1 1 0-1zm0 3h15a.5.5 0 1 1 0 1h-15a.5.5 0 1 1 0-1zm0 3h10a.5.5 0 1 1 0 1h-10a.5.5 0 1 1 0-1z",
    fill: "#5A5E69",
    fillRule: "nonzero"
  }));
}

module.exports = function getIconByMime(fileType) {
  const defaultChoice = {
    color: '#838999',
    icon: iconFile()
  };
  if (!fileType) return defaultChoice;
  const fileTypeGeneral = fileType.split('/')[0];
  const fileTypeSpecific = fileType.split('/')[1]; // Text

  if (fileTypeGeneral === 'text') {
    return {
      color: '#5a5e69',
      icon: iconText()
    };
  } // Image


  if (fileTypeGeneral === 'image') {
    return {
      color: '#686de0',
      icon: iconImage()
    };
  } // Audio


  if (fileTypeGeneral === 'audio') {
    return {
      color: '#068dbb',
      icon: iconAudio()
    };
  } // Video


  if (fileTypeGeneral === 'video') {
    return {
      color: '#19af67',
      icon: iconVideo()
    };
  } // PDF


  if (fileTypeGeneral === 'application' && fileTypeSpecific === 'pdf') {
    return {
      color: '#e25149',
      icon: iconPDF()
    };
  } // Archive


  const archiveTypes = ['zip', 'x-7z-compressed', 'x-rar-compressed', 'x-tar', 'x-gzip', 'x-apple-diskimage'];

  if (fileTypeGeneral === 'application' && archiveTypes.indexOf(fileTypeSpecific) !== -1) {
    return {
      color: '#00C469',
      icon: iconArchive()
    };
  }

  return defaultChoice;
};

},{"preact":35}],114:[function(require,module,exports){
"use strict";

// ignore drop/paste events if they are not in input or textarea —
// otherwise when Url plugin adds drop/paste listeners to this.el,
// draging UI elements or pasting anything into any field triggers those events —
// Url treats them as URLs that need to be imported
function ignoreEvent(ev) {
  const {
    tagName
  } = ev.target;

  if (tagName === 'INPUT' || tagName === 'TEXTAREA') {
    ev.stopPropagation();
    return;
  }

  ev.preventDefault();
  ev.stopPropagation();
}

module.exports = ignoreEvent;

},{}],115:[function(require,module,exports){
"use strict";

const toArray = require('./../../../utils/lib/toArray');

const FOCUSABLE_ELEMENTS = require('./../../../utils/lib/FOCUSABLE_ELEMENTS');

const getActiveOverlayEl = require('./getActiveOverlayEl');

function focusOnFirstNode(event, nodes) {
  const node = nodes[0];

  if (node) {
    node.focus();
    event.preventDefault();
  }
}

function focusOnLastNode(event, nodes) {
  const node = nodes[nodes.length - 1];

  if (node) {
    node.focus();
    event.preventDefault();
  }
} // ___Why not just use (focusedItemIndex === -1)?
//    Firefox thinks <ul> is focusable, but we don't have <ul>s in our FOCUSABLE_ELEMENTS. Which means that if we tab into
//    the <ul>, code will think that we are not in the active overlay, and we should focusOnFirstNode() of the currently
//    active overlay!
//    [Practical check] if we use (focusedItemIndex === -1), instagram provider in firefox will never get focus on its pics
//    in the <ul>.


function isFocusInOverlay(activeOverlayEl) {
  return activeOverlayEl.contains(document.activeElement);
}

function trapFocus(event, activeOverlayType, dashboardEl) {
  const activeOverlayEl = getActiveOverlayEl(dashboardEl, activeOverlayType);
  const focusableNodes = toArray(activeOverlayEl.querySelectorAll(FOCUSABLE_ELEMENTS));
  const focusedItemIndex = focusableNodes.indexOf(document.activeElement); // If we pressed tab, and focus is not yet within the current overlay - focus on
  // the first element within the current overlay.
  // This is a safety measure (for when user returns from another tab e.g.), most
  // plugins will try to focus on some important element as it loads.

  if (!isFocusInOverlay(activeOverlayEl)) {
    focusOnFirstNode(event, focusableNodes); // If we pressed shift + tab, and we're on the first element of a modal
  } else if (event.shiftKey && focusedItemIndex === 0) {
    focusOnLastNode(event, focusableNodes); // If we pressed tab, and we're on the last element of the modal
  } else if (!event.shiftKey && focusedItemIndex === focusableNodes.length - 1) {
    focusOnFirstNode(event, focusableNodes);
  }
}

module.exports = {
  // Traps focus inside of the currently open overlay (e.g. Dashboard, or e.g. Instagram),
  // never lets focus disappear from the modal.
  forModal: (event, activeOverlayType, dashboardEl) => {
    trapFocus(event, activeOverlayType, dashboardEl);
  },
  // Traps focus inside of the currently open overlay, unless overlay is null - then let the user tab away.
  forInline: (event, activeOverlayType, dashboardEl) => {
    // ___When we're in the bare 'Drop files here, paste, browse or import from' screen
    if (activeOverlayType === null) {// Do nothing and let the browser handle it, user can tab away from Uppy to other elements on the page
      // ___When there is some overlay with 'Done' button
    } else {
      // Trap the focus inside this overlay!
      // User can close the overlay (click 'Done') if they want to travel away from Uppy.
      trapFocus(event, activeOverlayType, dashboardEl);
    }
  }
};

},{"./../../../utils/lib/FOCUSABLE_ELEMENTS":188,"./../../../utils/lib/toArray":223,"./getActiveOverlayEl":112}],116:[function(require,module,exports){
"use strict";

var _class, _temp;

const {
  UIPlugin
} = require('./../../core');

const {
  Provider
} = require('./../../companion-client');

const {
  ProviderViews
} = require('./../../provider-views');

const {
  h
} = require('preact');

const locale = require('./locale');

module.exports = (_temp = _class = class Dropbox extends UIPlugin {
  constructor(uppy, opts) {
    super(uppy, opts);
    this.id = this.opts.id || 'Dropbox';
    Provider.initPlugin(this, opts);
    this.title = this.opts.title || 'Dropbox';

    this.icon = () => h("svg", {
      "aria-hidden": "true",
      focusable: "false",
      width: "32",
      height: "32",
      viewBox: "0 0 32 32"
    }, h("g", {
      fill: "none",
      fillRule: "evenodd"
    }, h("rect", {
      className: "uppy-ProviderIconBg",
      fill: "#0D2481",
      width: "32",
      height: "32",
      rx: "16"
    }), h("path", {
      d: "M11 8l5 3.185-5 3.186-5-3.186L11 8zm10 0l5 3.185-5 3.186-5-3.186L21 8zM6 17.556l5-3.185 5 3.185-5 3.186-5-3.186zm15-3.185l5 3.185-5 3.186-5-3.186 5-3.185zm-10 7.432l5-3.185 5 3.185-5 3.186-5-3.186z",
      fill: "#FFF",
      fillRule: "nonzero"
    })));

    this.provider = new Provider(uppy, {
      companionUrl: this.opts.companionUrl,
      companionHeaders: this.opts.companionHeaders,
      companionKeysParams: this.opts.companionKeysParams,
      companionCookiesRule: this.opts.companionCookiesRule,
      provider: 'dropbox',
      pluginId: this.id
    });
    this.defaultLocale = locale;
    this.i18nInit();
    this.title = this.i18n('pluginNameDropbox');
    this.onFirstRender = this.onFirstRender.bind(this);
    this.render = this.render.bind(this);
  }

  install() {
    this.view = new ProviderViews(this, {
      provider: this.provider
    });
    const {
      target
    } = this.opts;

    if (target) {
      this.mount(target, this);
    }
  }

  uninstall() {
    this.view.tearDown();
    this.unmount();
  }

  onFirstRender() {
    return Promise.all([this.provider.fetchPreAuthToken(), this.view.getFolder()]);
  }

  render(state) {
    return this.view.render(state);
  }

}, _class.VERSION = "2.0.4", _temp);

},{"./../../companion-client":81,"./../../core":87,"./../../provider-views":152,"./locale":117,"preact":35}],117:[function(require,module,exports){
"use strict";

module.exports = {
  strings: {
    pluginNameDropbox: 'Dropbox'
  }
};

},{}],118:[function(require,module,exports){
"use strict";

var _class, _temp;

const {
  UIPlugin
} = require('./../../core');

const {
  Provider
} = require('./../../companion-client');

const {
  ProviderViews
} = require('./../../provider-views');

const {
  h
} = require('preact');

const locale = require('./locale.js');

module.exports = (_temp = _class = class Facebook extends UIPlugin {
  constructor(uppy, opts) {
    super(uppy, opts);
    this.id = this.opts.id || 'Facebook';
    Provider.initPlugin(this, opts);
    this.title = this.opts.title || 'Facebook';

    this.icon = () => h("svg", {
      "aria-hidden": "true",
      focusable: "false",
      width: "32",
      height: "32",
      viewBox: "0 0 32 32"
    }, h("g", {
      fill: "none",
      fillRule: "evenodd"
    }, h("rect", {
      className: "uppy-ProviderIconBg",
      width: "32",
      height: "32",
      rx: "16",
      fill: "#3C5A99"
    }), h("path", {
      d: "M17.842 26v-8.667h2.653l.398-3.377h-3.051v-2.157c0-.978.248-1.644 1.527-1.644H21V7.132A19.914 19.914 0 0 0 18.623 7c-2.352 0-3.963 1.574-3.963 4.465v2.49H12v3.378h2.66V26h3.182z",
      fill: "#FFF",
      fillRule: "nonzero"
    })));

    this.provider = new Provider(uppy, {
      companionUrl: this.opts.companionUrl,
      companionHeaders: this.opts.companionHeaders,
      companionKeysParams: this.opts.companionKeysParams,
      companionCookiesRule: this.opts.companionCookiesRule,
      provider: 'facebook',
      pluginId: this.id
    });
    this.defaultLocale = locale;
    this.i18nInit();
    this.title = this.i18n('pluginNameFacebook');
    this.onFirstRender = this.onFirstRender.bind(this);
    this.render = this.render.bind(this);
  }

  install() {
    this.view = new ProviderViews(this, {
      provider: this.provider
    });
    const {
      target
    } = this.opts;

    if (target) {
      this.mount(target, this);
    }
  }

  uninstall() {
    this.view.tearDown();
    this.unmount();
  }

  onFirstRender() {
    return Promise.all([this.provider.fetchPreAuthToken(), this.view.getFolder()]);
  }

  render(state) {
    const viewOptions = {};

    if (this.getPluginState().files.length && !this.getPluginState().folders.length) {
      viewOptions.viewType = 'grid';
      viewOptions.showFilter = false;
      viewOptions.showTitles = false;
    }

    return this.view.render(state, viewOptions);
  }

}, _class.VERSION = "2.0.4", _temp);

},{"./../../companion-client":81,"./../../core":87,"./../../provider-views":152,"./locale.js":119,"preact":35}],119:[function(require,module,exports){
"use strict";

module.exports = {
  strings: {
    pluginNameFacebook: 'Facebook'
  }
};

},{}],120:[function(require,module,exports){
"use strict";

var _class, _temp;

const BasePlugin = require('./../../core/lib/BasePlugin');

const findDOMElement = require('./../../utils/lib/findDOMElement');

const toArray = require('./../../utils/lib/toArray'); // Rollup uses get-form-data's ES modules build, and rollup-plugin-commonjs automatically resolves `.default`.
// So, if we are being built using rollup, this require() won't have a `.default` property.


const getFormData = require('get-form-data').default || require('get-form-data');
/**
 * Form
 */


module.exports = (_temp = _class = class Form extends BasePlugin {
  constructor(uppy, opts) {
    super(uppy, opts);
    this.type = 'acquirer';
    this.id = this.opts.id || 'Form';
    this.title = 'Form'; // set default options

    const defaultOptions = {
      target: null,
      resultName: 'uppyResult',
      getMetaFromForm: true,
      addResultToForm: true,
      submitOnSuccess: false,
      triggerUploadOnSubmit: false
    }; // merge default options with the ones set by user

    this.opts = { ...defaultOptions,
      ...opts
    };
    this.handleFormSubmit = this.handleFormSubmit.bind(this);
    this.handleUploadStart = this.handleUploadStart.bind(this);
    this.handleSuccess = this.handleSuccess.bind(this);
    this.addResultToForm = this.addResultToForm.bind(this);
    this.getMetaFromForm = this.getMetaFromForm.bind(this);
  }

  handleUploadStart() {
    if (this.opts.getMetaFromForm) {
      this.getMetaFromForm();
    }
  }

  handleSuccess(result) {
    if (this.opts.addResultToForm) {
      this.addResultToForm(result);
    }

    if (this.opts.submitOnSuccess) {
      this.form.submit();
    }
  }

  handleFormSubmit(ev) {
    if (this.opts.triggerUploadOnSubmit) {
      ev.preventDefault();
      const elements = toArray(ev.target.elements);
      const disabledByUppy = [];
      elements.forEach(el => {
        const isButton = el.tagName === 'BUTTON' || el.tagName === 'INPUT' && el.type === 'submit';

        if (isButton && !el.disabled) {
          el.disabled = true;
          disabledByUppy.push(el);
        }
      });
      this.uppy.upload().then(() => {
        disabledByUppy.forEach(button => {
          button.disabled = false;
        });
      }, err => {
        disabledByUppy.forEach(button => {
          button.disabled = false;
        });
        return Promise.reject(err);
      }).catch(err => {
        this.uppy.log(err.stack || err.message || err);
      });
    }
  }

  addResultToForm(result) {
    this.uppy.log('[Form] Adding result to the original form:');
    this.uppy.log(result);
    let resultInput = this.form.querySelector(`[name="${this.opts.resultName}"]`);

    if (resultInput) {
      // Append new result to the previous result array.
      // If the previous result is empty, or not an array,
      // set it to an empty array.
      let updatedResult;

      try {
        updatedResult = JSON.parse(resultInput.value);
      } catch (err) {// Nothing, since we check for array below anyway
      }

      if (!Array.isArray(updatedResult)) {
        updatedResult = [];
      }

      updatedResult.push(result);
      resultInput.value = JSON.stringify(updatedResult);
      return;
    }

    resultInput = document.createElement('input');
    resultInput.name = this.opts.resultName;
    resultInput.type = 'hidden';
    resultInput.value = JSON.stringify([result]);
    this.form.appendChild(resultInput);
  }

  getMetaFromForm() {
    const formMeta = getFormData(this.form); // We want to exclude meta the the Form plugin itself has added
    // See https://github.com/transloadit/uppy/issues/1637

    delete formMeta[this.opts.resultName];
    this.uppy.setMeta(formMeta);
  }

  install() {
    this.form = findDOMElement(this.opts.target);

    if (!this.form || this.form.nodeName !== 'FORM') {
      this.uppy.log('Form plugin requires a <form> target element passed in options to operate, none was found', 'error');
      return;
    }

    this.form.addEventListener('submit', this.handleFormSubmit);
    this.uppy.on('upload', this.handleUploadStart);
    this.uppy.on('complete', this.handleSuccess);
  }

  uninstall() {
    this.form.removeEventListener('submit', this.handleFormSubmit);
    this.uppy.off('upload', this.handleUploadStart);
    this.uppy.off('complete', this.handleSuccess);
  }

}, _class.VERSION = "2.0.4", _temp);

},{"./../../core/lib/BasePlugin":83,"./../../utils/lib/findDOMElement":197,"./../../utils/lib/toArray":223,"get-form-data":18}],121:[function(require,module,exports){
"use strict";

const {
  ProviderViews
} = require('./../../provider-views');

module.exports = class DriveProviderViews extends ProviderViews {
  toggleCheckbox(e, file) {
    e.stopPropagation();
    e.preventDefault(); // Shared Drives aren't selectable; for all else, defer to the base ProviderView.

    if (!file.custom.isSharedDrive) {
      super.toggleCheckbox(e, file);
    }
  }

};

},{"./../../provider-views":152}],122:[function(require,module,exports){
"use strict";

var _class, _temp;

const {
  UIPlugin
} = require('./../../core');

const {
  Provider
} = require('./../../companion-client');

const {
  h
} = require('preact');

const DriveProviderViews = require('./DriveProviderViews');

const locale = require('./locale');

module.exports = (_temp = _class = class GoogleDrive extends UIPlugin {
  constructor(uppy, opts) {
    super(uppy, opts);
    this.id = this.opts.id || 'GoogleDrive';
    this.title = this.opts.title || 'Google Drive';
    Provider.initPlugin(this, opts);
    this.title = this.opts.title || 'Google Drive';

    this.icon = () => h("svg", {
      "aria-hidden": "true",
      focusable: "false",
      width: "32",
      height: "32",
      viewBox: "0 0 32 32"
    }, h("g", {
      fill: "none",
      fillRule: "evenodd"
    }, h("rect", {
      className: "uppy-ProviderIconBg",
      fill: "#4285F4",
      width: "32",
      height: "32",
      rx: "16"
    }), h("path", {
      d: "M25.216 17.736L19.043 7h-6.086l6.175 10.736h6.084zm-11.275.896L10.9 24h11.723l3.04-5.368H13.942zm-1.789-10.29l-5.816 10.29L9.38 24l5.905-10.29-3.132-5.369z",
      fill: "#FFF"
    })));

    this.provider = new Provider(uppy, {
      companionUrl: this.opts.companionUrl,
      companionHeaders: this.opts.companionHeaders,
      companionKeysParams: this.opts.companionKeysParams,
      companionCookiesRule: this.opts.companionCookiesRule,
      provider: 'drive',
      pluginId: this.id
    });
    this.defaultLocale = locale;
    this.i18nInit();
    this.title = this.i18n('pluginNameGoogleDrive');
    this.onFirstRender = this.onFirstRender.bind(this);
    this.render = this.render.bind(this);
  }

  install() {
    this.view = new DriveProviderViews(this, {
      provider: this.provider
    });
    const {
      target
    } = this.opts;

    if (target) {
      this.mount(target, this);
    }
  }

  uninstall() {
    this.view.tearDown();
    this.unmount();
  }

  onFirstRender() {
    return Promise.all([this.provider.fetchPreAuthToken(), this.view.getFolder('root', '/')]);
  }

  render(state) {
    return this.view.render(state);
  }

}, _class.VERSION = "2.0.4", _temp);

},{"./../../companion-client":81,"./../../core":87,"./DriveProviderViews":121,"./locale":123,"preact":35}],123:[function(require,module,exports){
"use strict";

module.exports = {
  strings: {
    pluginNameGoogleDrive: 'Google Drive'
  }
};

},{}],124:[function(require,module,exports){
"use strict";

const {
  h,
  Component,
  createRef
} = require('preact');

const TRANSITION_MS = 300;
module.exports = class FadeIn extends Component {
  constructor() {
    super(...arguments);
    this.ref = createRef();
  }

  componentWillEnter(callback) {
    this.ref.current.style.opacity = '1';
    this.ref.current.style.transform = 'none';
    setTimeout(callback, TRANSITION_MS);
  }

  componentWillLeave(callback) {
    this.ref.current.style.opacity = '0';
    this.ref.current.style.transform = 'translateY(350%)';
    setTimeout(callback, TRANSITION_MS);
  }

  render() {
    const {
      children
    } = this.props;
    return h("div", {
      className: "uppy-Informer-animated",
      ref: this.ref
    }, children);
  }

};

},{"preact":35}],125:[function(require,module,exports){
/* eslint-disable */

/**
 * @source https://github.com/developit/preact-transition-group
 */
'use strict';

const {
  Component,
  cloneElement,
  h,
  toChildArray
} = require('preact');

function assign(obj, props) {
  return Object.assign(obj, props);
}

function getKey(vnode, fallback) {
  var _vnode$key;

  return (_vnode$key = vnode == null ? void 0 : vnode.key) != null ? _vnode$key : fallback;
}

function linkRef(component, name) {
  const cache = component._ptgLinkedRefs || (component._ptgLinkedRefs = {});
  return cache[name] || (cache[name] = c => {
    component.refs[name] = c;
  });
}

function getChildMapping(children) {
  const out = {};

  for (let i = 0; i < children.length; i++) {
    if (children[i] != null) {
      const key = getKey(children[i], i.toString(36));
      out[key] = children[i];
    }
  }

  return out;
}

function mergeChildMappings(prev, next) {
  prev = prev || {};
  next = next || {};

  const getValueForKey = key => next.hasOwnProperty(key) ? next[key] : prev[key]; // For each key of `next`, the list of keys to insert before that key in
  // the combined list


  const nextKeysPending = {};
  let pendingKeys = [];

  for (const prevKey in prev) {
    if (next.hasOwnProperty(prevKey)) {
      if (pendingKeys.length) {
        nextKeysPending[prevKey] = pendingKeys;
        pendingKeys = [];
      }
    } else {
      pendingKeys.push(prevKey);
    }
  }

  const childMapping = {};

  for (const nextKey in next) {
    if (nextKeysPending.hasOwnProperty(nextKey)) {
      for (let i = 0; i < nextKeysPending[nextKey].length; i++) {
        const pendingNextKey = nextKeysPending[nextKey][i];
        childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
      }
    }

    childMapping[nextKey] = getValueForKey(nextKey);
  } // Finally, add the keys which didn't appear before any key in `next`


  for (let i = 0; i < pendingKeys.length; i++) {
    childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
  }

  return childMapping;
}

const identity = i => i;

class TransitionGroup extends Component {
  constructor(props, context) {
    super(props, context);
    this.refs = {};
    this.state = {
      children: getChildMapping(toChildArray(toChildArray(this.props.children)) || [])
    };
    this.performAppear = this.performAppear.bind(this);
    this.performEnter = this.performEnter.bind(this);
    this.performLeave = this.performLeave.bind(this);
  }

  componentWillMount() {
    this.currentlyTransitioningKeys = {};
    this.keysToAbortLeave = [];
    this.keysToEnter = [];
    this.keysToLeave = [];
  }

  componentDidMount() {
    const initialChildMapping = this.state.children;

    for (const key in initialChildMapping) {
      if (initialChildMapping[key]) {
        // this.performAppear(getKey(initialChildMapping[key], key));
        this.performAppear(key);
      }
    }
  }

  componentWillReceiveProps(nextProps) {
    const nextChildMapping = getChildMapping(toChildArray(nextProps.children) || []);
    const prevChildMapping = this.state.children;
    this.setState(prevState => ({
      children: mergeChildMappings(prevState.children, nextChildMapping)
    }));
    let key;

    for (key in nextChildMapping) {
      if (nextChildMapping.hasOwnProperty(key)) {
        const hasPrev = prevChildMapping && prevChildMapping.hasOwnProperty(key); // We should re-enter the component and abort its leave function

        if (nextChildMapping[key] && hasPrev && this.currentlyTransitioningKeys[key]) {
          this.keysToEnter.push(key);
          this.keysToAbortLeave.push(key);
        } else if (nextChildMapping[key] && !hasPrev && !this.currentlyTransitioningKeys[key]) {
          this.keysToEnter.push(key);
        }
      }
    }

    for (key in prevChildMapping) {
      if (prevChildMapping.hasOwnProperty(key)) {
        const hasNext = nextChildMapping && nextChildMapping.hasOwnProperty(key);

        if (prevChildMapping[key] && !hasNext && !this.currentlyTransitioningKeys[key]) {
          this.keysToLeave.push(key);
        }
      }
    }
  }

  componentDidUpdate() {
    const {
      keysToEnter
    } = this;
    this.keysToEnter = [];
    keysToEnter.forEach(this.performEnter);
    const {
      keysToLeave
    } = this;
    this.keysToLeave = [];
    keysToLeave.forEach(this.performLeave);
  }

  _finishAbort(key) {
    const idx = this.keysToAbortLeave.indexOf(key);

    if (idx !== -1) {
      this.keysToAbortLeave.splice(idx, 1);
    }
  }

  performAppear(key) {
    this.currentlyTransitioningKeys[key] = true;
    const component = this.refs[key];

    if (component.componentWillAppear) {
      component.componentWillAppear(this._handleDoneAppearing.bind(this, key));
    } else {
      this._handleDoneAppearing(key);
    }
  }

  _handleDoneAppearing(key) {
    const component = this.refs[key];

    if (component.componentDidAppear) {
      component.componentDidAppear();
    }

    delete this.currentlyTransitioningKeys[key];

    this._finishAbort(key);

    const currentChildMapping = getChildMapping(toChildArray(this.props.children) || []);

    if (!currentChildMapping || !currentChildMapping.hasOwnProperty(key)) {
      // This was removed before it had fully appeared. Remove it.
      this.performLeave(key);
    }
  }

  performEnter(key) {
    this.currentlyTransitioningKeys[key] = true;
    const component = this.refs[key];

    if (component.componentWillEnter) {
      component.componentWillEnter(this._handleDoneEntering.bind(this, key));
    } else {
      this._handleDoneEntering(key);
    }
  }

  _handleDoneEntering(key) {
    const component = this.refs[key];

    if (component.componentDidEnter) {
      component.componentDidEnter();
    }

    delete this.currentlyTransitioningKeys[key];

    this._finishAbort(key);

    const currentChildMapping = getChildMapping(toChildArray(this.props.children) || []);

    if (!currentChildMapping || !currentChildMapping.hasOwnProperty(key)) {
      // This was removed before it had fully entered. Remove it.
      this.performLeave(key);
    }
  }

  performLeave(key) {
    // If we should immediately abort this leave function,
    // don't run the leave transition at all.
    const idx = this.keysToAbortLeave.indexOf(key);

    if (idx !== -1) {
      return;
    }

    this.currentlyTransitioningKeys[key] = true;
    const component = this.refs[key];

    if (component.componentWillLeave) {
      component.componentWillLeave(this._handleDoneLeaving.bind(this, key));
    } else {
      // Note that this is somewhat dangerous b/c it calls setState()
      // again, effectively mutating the component before all the work
      // is done.
      this._handleDoneLeaving(key);
    }
  }

  _handleDoneLeaving(key) {
    // If we should immediately abort the leave,
    // then skip this altogether
    const idx = this.keysToAbortLeave.indexOf(key);

    if (idx !== -1) {
      return;
    }

    const component = this.refs[key];

    if (component.componentDidLeave) {
      component.componentDidLeave();
    }

    delete this.currentlyTransitioningKeys[key];
    const currentChildMapping = getChildMapping(toChildArray(this.props.children) || []);

    if (currentChildMapping && currentChildMapping.hasOwnProperty(key)) {
      // This entered again before it fully left. Add it again.
      this.performEnter(key);
    } else {
      const children = assign({}, this.state.children);
      delete children[key];
      this.setState({
        children
      });
    }
  }

  render(_ref, _ref2) {
    let {
      childFactory,
      transitionLeave,
      transitionName,
      transitionAppear,
      transitionEnter,
      transitionLeaveTimeout,
      transitionEnterTimeout,
      transitionAppearTimeout,
      component,
      ...props
    } = _ref;
    let {
      children
    } = _ref2;
    // TODO: we could get rid of the need for the wrapper node
    // by cloning a single child
    const childrenToRender = [];

    for (const key in children) {
      if (children.hasOwnProperty(key)) {
        const child = children[key];

        if (child) {
          const ref = linkRef(this, key),
                el = cloneElement(childFactory(child), {
            ref,
            key
          });
          childrenToRender.push(el);
        }
      }
    }

    return h(component, props, childrenToRender);
  }

}

TransitionGroup.defaultProps = {
  component: 'span',
  childFactory: identity
};
module.exports = TransitionGroup;

},{"preact":35}],126:[function(require,module,exports){
"use strict";

var _class, _temp;

/* eslint-disable jsx-a11y/no-noninteractive-element-interactions  */

/* eslint-disable jsx-a11y/click-events-have-key-events */
const {
  h
} = require('preact');

const {
  UIPlugin
} = require('./../../core');

const FadeIn = require('./FadeIn');

const TransitionGroup = require('./TransitionGroup');
/**
 * Informer
 * Shows rad message bubbles
 * used like this: `uppy.info('hello world', 'info', 5000)`
 * or for errors: `uppy.info('Error uploading img.jpg', 'error', 5000)`
 *
 */


module.exports = (_temp = _class = class Informer extends UIPlugin {
  // eslint-disable-next-line global-require
  constructor(uppy, opts) {
    super(uppy, opts);

    this.render = state => {
      return h("div", {
        className: "uppy uppy-Informer"
      }, h(TransitionGroup, null, state.info.map(info => h(FadeIn, {
        key: info.message
      }, h("p", {
        role: "alert"
      }, info.message, ' ', info.details && h("span", {
        "aria-label": info.details,
        "data-microtip-position": "top-left",
        "data-microtip-size": "medium",
        role: "tooltip" // eslint-disable-next-line no-alert
        ,
        onClick: () => alert(`${info.message} \n\n ${info.details}`)
      }, "?"))))));
    };

    this.type = 'progressindicator';
    this.id = this.opts.id || 'Informer';
    this.title = 'Informer'; // set default options

    const defaultOptions = {}; // merge default options with the ones set by user

    this.opts = { ...defaultOptions,
      ...opts
    };
  }

  install() {
    const {
      target
    } = this.opts;

    if (target) {
      this.mount(target, this);
    }
  }

}, _class.VERSION = "2.0.4", _temp);

},{"./../../core":87,"./FadeIn":124,"./TransitionGroup":125,"preact":35}],127:[function(require,module,exports){
"use strict";

var _class, _temp;

const {
  UIPlugin
} = require('./../../core');

const {
  Provider
} = require('./../../companion-client');

const {
  ProviderViews
} = require('./../../provider-views');

const {
  h
} = require('preact');

const locale = require('./locale.js');

module.exports = (_temp = _class = class Instagram extends UIPlugin {
  constructor(uppy, opts) {
    super(uppy, opts);
    this.id = this.opts.id || 'Instagram';
    Provider.initPlugin(this, opts);

    this.icon = () => h("svg", {
      "aria-hidden": "true",
      focusable: "false",
      width: "32",
      height: "32",
      viewBox: "0 0 32 32"
    }, h("g", {
      fill: "none",
      fillRule: "evenodd"
    }, h("rect", {
      className: "uppy-ProviderIconBg",
      fill: "#E1306C",
      width: "32",
      height: "32",
      rx: "16"
    }), h("path", {
      d: "M16 8.622c2.403 0 2.688.009 3.637.052.877.04 1.354.187 1.67.31.392.144.745.374 1.036.673.299.29.529.644.673 1.035.123.317.27.794.31 1.671.043.95.052 1.234.052 3.637s-.009 2.688-.052 3.637c-.04.877-.187 1.354-.31 1.671a2.98 2.98 0 0 1-1.708 1.708c-.317.123-.794.27-1.671.31-.95.043-1.234.053-3.637.053s-2.688-.01-3.637-.053c-.877-.04-1.354-.187-1.671-.31a2.788 2.788 0 0 1-1.035-.673 2.788 2.788 0 0 1-.673-1.035c-.123-.317-.27-.794-.31-1.671-.043-.949-.052-1.234-.052-3.637s.009-2.688.052-3.637c.04-.877.187-1.354.31-1.67.144-.392.374-.745.673-1.036.29-.299.644-.529 1.035-.673.317-.123.794-.27 1.671-.31.95-.043 1.234-.052 3.637-.052zM16 7c-2.444 0-2.75.01-3.71.054-.959.044-1.613.196-2.185.419-.6.225-1.145.58-1.594 1.038-.458.45-.813.993-1.039 1.594-.222.572-.374 1.226-.418 2.184C7.01 13.25 7 13.556 7 16s.01 2.75.054 3.71c.044.959.196 1.613.419 2.185.226.6.58 1.145 1.038 1.594.45.458.993.813 1.594 1.038.572.223 1.227.375 2.184.419.96.044 1.267.054 3.711.054s2.75-.01 3.71-.054c.959-.044 1.613-.196 2.185-.419a4.602 4.602 0 0 0 2.632-2.632c.223-.572.375-1.226.419-2.184.044-.96.054-1.267.054-3.711s-.01-2.75-.054-3.71c-.044-.959-.196-1.613-.419-2.185A4.412 4.412 0 0 0 23.49 8.51a4.412 4.412 0 0 0-1.594-1.039c-.572-.222-1.226-.374-2.184-.418C18.75 7.01 18.444 7 16 7zm0 4.5a4.5 4.5 0 1 0 0 9 4.5 4.5 0 0 0 0-9zm0 7.421a2.921 2.921 0 1 1 0-5.842 2.921 2.921 0 0 1 0 5.842zm4.875-6.671a1.125 1.125 0 1 1 0-2.25 1.125 1.125 0 0 1 0 2.25z",
      fill: "#FFF"
    })));

    this.defaultLocale = locale;
    this.i18nInit();
    this.title = this.i18n('pluginNameInstagram');
    this.provider = new Provider(uppy, {
      companionUrl: this.opts.companionUrl,
      companionHeaders: this.opts.companionHeaders,
      companionKeysParams: this.opts.companionKeysParams,
      companionCookiesRule: this.opts.companionCookiesRule,
      provider: 'instagram',
      pluginId: this.id
    });
    this.onFirstRender = this.onFirstRender.bind(this);
    this.render = this.render.bind(this);
  }

  install() {
    this.view = new ProviderViews(this, {
      provider: this.provider,
      viewType: 'grid',
      showTitles: false,
      showFilter: false,
      showBreadcrumbs: false
    });
    const {
      target
    } = this.opts;

    if (target) {
      this.mount(target, this);
    }
  }

  uninstall() {
    this.view.tearDown();
    this.unmount();
  }

  onFirstRender() {
    return Promise.all([this.provider.fetchPreAuthToken(), this.view.getFolder('recent')]);
  }

  render(state) {
    return this.view.render(state);
  }

}, _class.VERSION = "2.0.4", _temp);

},{"./../../companion-client":81,"./../../core":87,"./../../provider-views":152,"./locale.js":128,"preact":35}],128:[function(require,module,exports){
"use strict";

module.exports = {
  strings: {
    pluginNameInstagram: 'Instagram'
  }
};

},{}],129:[function(require,module,exports){
"use strict";

var _class, _temp;

const {
  UIPlugin
} = require('./../../core');

const {
  Provider
} = require('./../../companion-client');

const {
  ProviderViews
} = require('./../../provider-views');

const {
  h
} = require('preact');

const locale = require('./locale');

module.exports = (_temp = _class = class OneDrive extends UIPlugin {
  constructor(uppy, opts) {
    super(uppy, opts);
    this.id = this.opts.id || 'OneDrive';
    Provider.initPlugin(this, opts);
    this.title = this.opts.title || 'OneDrive';

    this.icon = () => h("svg", {
      "aria-hidden": "true",
      focusable: "false",
      width: "32",
      height: "32",
      viewBox: "0 0 32 32"
    }, h("g", {
      fill: "none",
      fillRule: "evenodd"
    }, h("rect", {
      className: "uppy-ProviderIconBg",
      width: "32",
      height: "32",
      rx: "16",
      fill: "#0262C0"
    }), h("g", {
      fill: "#FFF",
      fillRule: "nonzero"
    }, h("path", {
      d: "M24.157 22s1.492-.205 1.79-1.655a2.624 2.624 0 0 0 .03-.878c-.22-1.64-1.988-2.01-1.988-2.01s.307-1.765-1.312-2.69c-1.62-.925-3.1 0-3.1 0S18.711 13 16.366 13c-3.016 0-3.519 3.448-3.519 3.448S10 16.618 10 19.14c0 2.523 2.597 2.86 2.597 2.86h11.56z"
    }), h("path", {
      d: "M9.421 19.246c0-2.197 1.606-3.159 2.871-3.472.44-1.477 1.654-3.439 4.135-3.439H16.445c1.721 0 2.79.823 3.368 1.476a3.99 3.99 0 0 1 1.147-.171h.01l.03.002C21.017 13.5 20.691 10 16.757 10c-2.69 0-3.639 2.345-3.639 2.345s-1.95-1.482-3.955.567c-1.028 1.052-.79 2.669-.79 2.669S6 15.824 6 18.412C6 20.757 8.452 21 8.452 21h1.372a3.77 3.77 0 0 1-.403-1.754z"
    }))));

    this.provider = new Provider(uppy, {
      companionUrl: this.opts.companionUrl,
      companionHeaders: this.opts.companionHeaders,
      companionCookiesRule: this.opts.companionCookiesRule,
      provider: 'onedrive',
      pluginId: this.id
    });
    this.defaultLocale = locale;
    this.i18nInit();
    this.title = this.i18n('pluginNameOneDrive');
    this.onFirstRender = this.onFirstRender.bind(this);
    this.render = this.render.bind(this);
  }

  install() {
    this.view = new ProviderViews(this, {
      provider: this.provider
    });
    const {
      target
    } = this.opts;

    if (target) {
      this.mount(target, this);
    }
  }

  uninstall() {
    this.view.tearDown();
    this.unmount();
  }

  onFirstRender() {
    return Promise.all([this.provider.fetchPreAuthToken(), this.view.getFolder()]);
  }

  render(state) {
    return this.view.render(state);
  }

}, _class.VERSION = "2.0.4", _temp);

},{"./../../companion-client":81,"./../../core":87,"./../../provider-views":152,"./locale":130,"preact":35}],130:[function(require,module,exports){
"use strict";

module.exports = {
  strings: {
    pluginNameOneDrive: 'OneDrive'
  }
};

},{}],131:[function(require,module,exports){
"use strict";

const {
  h,
  Fragment
} = require('preact');

const Breadcrumb = props => {
  const {
    getFolder,
    title,
    isLast
  } = props;
  return h(Fragment, null, h("button", {
    type: "button",
    className: "uppy-u-reset",
    onClick: getFolder
  }, title), !isLast ? ' / ' : '');
};

module.exports = props => {
  const {
    getFolder,
    title,
    breadcrumbsIcon,
    directories
  } = props;
  return h("div", {
    className: "uppy-Provider-breadcrumbs"
  }, h("div", {
    className: "uppy-Provider-breadcrumbsIcon"
  }, breadcrumbsIcon), directories.map((directory, i) => h(Breadcrumb, {
    key: directory.id,
    getFolder: () => getFolder(directory.id),
    title: i === 0 ? title : directory.title,
    isLast: i + 1 === directories.length
  })));
};

},{"preact":35}],132:[function(require,module,exports){
"use strict";

const {
  h
} = require('preact');

const classNames = require('classnames');

const remoteFileObjToLocal = require('./../../utils/lib/remoteFileObjToLocal');

const Filter = require('./Filter');

const FooterActions = require('./FooterActions');

const Item = require('./Item/index');

const VIRTUAL_SHARED_DIR = 'shared-with-me';

function Browser(props) {
  const {
    currentSelection,
    folders,
    files,
    uppyFiles,
    viewType,
    headerComponent,
    showBreadcrumbs,
    isChecked,
    toggleCheckbox,
    handleScroll,
    showTitles,
    i18n,
    validateRestrictions,
    showFilter,
    filterQuery,
    filterInput,
    getNextFolder,
    cancel,
    done,
    columns
  } = props;
  const selected = currentSelection.length;
  return h("div", {
    className: classNames('uppy-ProviderBrowser', `uppy-ProviderBrowser-viewType--${viewType}`)
  }, h("div", {
    className: "uppy-ProviderBrowser-header"
  }, h("div", {
    className: classNames('uppy-ProviderBrowser-headerBar', !showBreadcrumbs && 'uppy-ProviderBrowser-headerBar--simple')
  }, headerComponent)), showFilter && h(Filter, {
    i18n: i18n,
    filterQuery: filterQuery,
    filterInput: filterInput
  }), (() => {
    if (!folders.length && !files.length) {
      return h("div", {
        className: "uppy-Provider-empty"
      }, props.i18n('noFilesFound'));
    }

    return h("div", {
      className: "uppy-ProviderBrowser-body"
    }, h("ul", {
      className: "uppy-ProviderBrowser-list",
      onScroll: handleScroll,
      role: "listbox" // making <ul> not focusable for firefox
      ,
      tabIndex: "-1"
    }, folders.map(folder => {
      var _isChecked;

      return Item({
        columns,
        showTitles,
        viewType,
        i18n,
        id: folder.id,
        title: folder.name,
        getItemIcon: () => folder.icon,
        isChecked: isChecked(folder),
        toggleCheckbox: event => toggleCheckbox(event, folder),
        type: 'folder',
        isDisabled: (_isChecked = isChecked(folder)) == null ? void 0 : _isChecked.loading,
        isCheckboxDisabled: folder.id === VIRTUAL_SHARED_DIR,
        handleFolderClick: () => getNextFolder(folder)
      });
    }), files.map(file => {
      const validated = validateRestrictions(remoteFileObjToLocal(file), [...uppyFiles, ...currentSelection]);
      return Item({
        id: file.id,
        title: file.name,
        author: file.author,
        getItemIcon: () => file.icon,
        isChecked: isChecked(file),
        toggleCheckbox: event => toggleCheckbox(event, file),
        columns,
        showTitles,
        viewType,
        i18n,
        type: 'file',
        isDisabled: !validated.result && !isChecked(file),
        restrictionReason: validated.reason
      });
    })));
  })(), selected > 0 && h(FooterActions, {
    selected: selected,
    done: done,
    cancel: cancel,
    i18n: i18n
  }));
}

module.exports = Browser;

},{"./../../utils/lib/remoteFileObjToLocal":220,"./Filter":134,"./FooterActions":135,"./Item/index":139,"classnames":7,"preact":35}],133:[function(require,module,exports){
"use strict";

const {
  Component,
  toChildArray
} = require('preact');

module.exports = class CloseWrapper extends Component {
  componentWillUnmount() {
    const {
      onUnmount
    } = this.props;
    onUnmount();
  }

  render() {
    const {
      children
    } = this.props;
    return toChildArray(children)[0];
  }

};

},{"preact":35}],134:[function(require,module,exports){
"use strict";

const {
  h,
  Component
} = require('preact');

module.exports = class Filter extends Component {
  constructor(props) {
    super(props);
    this.preventEnterPress = this.preventEnterPress.bind(this);
  }

  preventEnterPress(ev) {
    if (ev.keyCode === 13) {
      ev.stopPropagation();
      ev.preventDefault();
    }
  }

  render() {
    return h("div", {
      className: "uppy-ProviderBrowser-search"
    }, h("input", {
      className: "uppy-u-reset uppy-ProviderBrowser-searchInput",
      type: "text",
      placeholder: this.props.i18n('filter'),
      "aria-label": this.props.i18n('filter'),
      onKeyUp: this.preventEnterPress,
      onKeyDown: this.preventEnterPress,
      onKeyPress: this.preventEnterPress,
      onInput: e => this.props.filterQuery(e),
      value: this.props.filterInput
    }), h("svg", {
      "aria-hidden": "true",
      focusable: "false",
      className: "uppy-c-icon uppy-ProviderBrowser-searchIcon",
      width: "12",
      height: "12",
      viewBox: "0 0 12 12"
    }, h("path", {
      d: "M8.638 7.99l3.172 3.172a.492.492 0 1 1-.697.697L7.91 8.656a4.977 4.977 0 0 1-2.983.983C2.206 9.639 0 7.481 0 4.819 0 2.158 2.206 0 4.927 0c2.721 0 4.927 2.158 4.927 4.82a4.74 4.74 0 0 1-1.216 3.17zm-3.71.685c2.176 0 3.94-1.726 3.94-3.856 0-2.129-1.764-3.855-3.94-3.855C2.75.964.984 2.69.984 4.819c0 2.13 1.765 3.856 3.942 3.856z"
    })), this.props.filterInput && h("button", {
      className: "uppy-u-reset uppy-ProviderBrowser-searchClose",
      type: "button",
      "aria-label": this.props.i18n('resetFilter'),
      title: this.props.i18n('resetFilter'),
      onClick: this.props.filterQuery
    }, h("svg", {
      "aria-hidden": "true",
      focusable: "false",
      className: "uppy-c-icon",
      viewBox: "0 0 19 19"
    }, h("path", {
      d: "M17.318 17.232L9.94 9.854 9.586 9.5l-.354.354-7.378 7.378h.707l-.62-.62v.706L9.318 9.94l.354-.354-.354-.354L1.94 1.854v.707l.62-.62h-.706l7.378 7.378.354.354.354-.354 7.378-7.378h-.707l.622.62v-.706L9.854 9.232l-.354.354.354.354 7.378 7.378.708-.707-7.38-7.378v.708l7.38-7.38.353-.353-.353-.353-.622-.622-.353-.353-.354.352-7.378 7.38h.708L2.56 1.23 2.208.88l-.353.353-.622.62-.353.355.352.353 7.38 7.38v-.708l-7.38 7.38-.353.353.352.353.622.622.353.353.354-.353 7.38-7.38h-.708l7.38 7.38z"
    }))));
  }

};

},{"preact":35}],135:[function(require,module,exports){
"use strict";

const {
  h
} = require('preact');

module.exports = props => {
  return h("div", {
    className: "uppy-ProviderBrowser-footer"
  }, h("button", {
    className: "uppy-u-reset uppy-c-btn uppy-c-btn-primary",
    onClick: props.done,
    type: "button"
  }, props.i18n('selectX', {
    smart_count: props.selected
  })), h("button", {
    className: "uppy-u-reset uppy-c-btn uppy-c-btn-link",
    onClick: props.cancel,
    type: "button"
  }, props.i18n('cancel')));
};

},{"preact":35}],136:[function(require,module,exports){
"use strict";

const {
  h
} = require('preact');

function GridListItem(props) {
  const {
    className,
    isDisabled,
    restrictionReason,
    isChecked,
    title,
    itemIconEl,
    showTitles,
    toggleCheckbox,
    id,
    children
  } = props;
  return h("li", {
    className: className,
    title: isDisabled ? restrictionReason : null
  }, h("input", {
    type: "checkbox",
    className: `uppy-u-reset uppy-ProviderBrowserItem-checkbox ${isChecked ? 'uppy-ProviderBrowserItem-checkbox--is-checked' : ''} uppy-ProviderBrowserItem-checkbox--grid`,
    onChange: toggleCheckbox,
    name: "listitem",
    id: id,
    checked: isChecked,
    disabled: isDisabled,
    "data-uppy-super-focusable": true
  }), h("label", {
    htmlFor: id,
    "aria-label": title,
    className: "uppy-u-reset uppy-ProviderBrowserItem-inner"
  }, h("span", {
    className: "uppy-ProviderBrowserItem-inner-relative"
  }, itemIconEl, showTitles && title, children)));
}

module.exports = GridListItem;

},{"preact":35}],137:[function(require,module,exports){
"use strict";

const {
  h
} = require('preact');

function FileIcon() {
  return h("svg", {
    "aria-hidden": "true",
    focusable: "false",
    className: "uppy-c-icon",
    width: 11,
    height: 14.5,
    viewBox: "0 0 44 58"
  }, h("path", {
    d: "M27.437.517a1 1 0 0 0-.094.03H4.25C2.037.548.217 2.368.217 4.58v48.405c0 2.212 1.82 4.03 4.03 4.03H39.03c2.21 0 4.03-1.818 4.03-4.03V15.61a1 1 0 0 0-.03-.28 1 1 0 0 0 0-.093 1 1 0 0 0-.03-.032 1 1 0 0 0 0-.03 1 1 0 0 0-.032-.063 1 1 0 0 0-.03-.063 1 1 0 0 0-.032 0 1 1 0 0 0-.03-.063 1 1 0 0 0-.032-.03 1 1 0 0 0-.03-.063 1 1 0 0 0-.063-.062l-14.593-14a1 1 0 0 0-.062-.062A1 1 0 0 0 28 .708a1 1 0 0 0-.374-.157 1 1 0 0 0-.156 0 1 1 0 0 0-.03-.03l-.003-.003zM4.25 2.547h22.218v9.97c0 2.21 1.82 4.03 4.03 4.03h10.564v36.438a2.02 2.02 0 0 1-2.032 2.032H4.25c-1.13 0-2.032-.9-2.032-2.032V4.58c0-1.13.902-2.032 2.03-2.032zm24.218 1.345l10.375 9.937.75.718H30.5c-1.13 0-2.032-.9-2.032-2.03V3.89z"
  }));
}

function FolderIcon() {
  return h("svg", {
    "aria-hidden": "true",
    focusable: "false",
    className: "uppy-c-icon",
    style: {
      minWidth: 16,
      marginRight: 3
    },
    viewBox: "0 0 276.157 276.157"
  }, h("path", {
    d: "M273.08 101.378c-3.3-4.65-8.86-7.32-15.254-7.32h-24.34V67.59c0-10.2-8.3-18.5-18.5-18.5h-85.322c-3.63 0-9.295-2.875-11.436-5.805l-6.386-8.735c-4.982-6.814-15.104-11.954-23.546-11.954H58.73c-9.292 0-18.638 6.608-21.737 15.372l-2.033 5.752c-.958 2.71-4.72 5.37-7.596 5.37H18.5C8.3 49.09 0 57.39 0 67.59v167.07c0 .886.16 1.73.443 2.52.152 3.306 1.18 6.424 3.053 9.064 3.3 4.652 8.86 7.32 15.255 7.32h188.487c11.395 0 23.27-8.425 27.035-19.18l40.677-116.188c2.11-6.035 1.43-12.164-1.87-16.816zM18.5 64.088h8.864c9.295 0 18.64-6.607 21.738-15.37l2.032-5.75c.96-2.712 4.722-5.373 7.597-5.373h29.565c3.63 0 9.295 2.876 11.437 5.806l6.386 8.735c4.982 6.815 15.104 11.954 23.546 11.954h85.322c1.898 0 3.5 1.602 3.5 3.5v26.47H69.34c-11.395 0-23.27 8.423-27.035 19.178L15 191.23V67.59c0-1.898 1.603-3.5 3.5-3.5zm242.29 49.15l-40.676 116.188c-1.674 4.78-7.812 9.135-12.877 9.135H18.75c-1.447 0-2.576-.372-3.02-.997-.442-.625-.422-1.814.057-3.18l40.677-116.19c1.674-4.78 7.812-9.134 12.877-9.134h188.487c1.448 0 2.577.372 3.02.997.443.625.423 1.814-.056 3.18z"
  }));
}

function VideoIcon() {
  return h("svg", {
    "aria-hidden": "true",
    focusable: "false",
    style: {
      width: 16,
      marginRight: 4
    },
    viewBox: "0 0 58 58"
  }, h("path", {
    d: "M36.537 28.156l-11-7a1.005 1.005 0 0 0-1.02-.033C24.2 21.3 24 21.635 24 22v14a1 1 0 0 0 1.537.844l11-7a1.002 1.002 0 0 0 0-1.688zM26 34.18V23.82L34.137 29 26 34.18z"
  }), h("path", {
    d: "M57 6H1a1 1 0 0 0-1 1v44a1 1 0 0 0 1 1h56a1 1 0 0 0 1-1V7a1 1 0 0 0-1-1zM10 28H2v-9h8v9zm-8 2h8v9H2v-9zm10 10V8h34v42H12V40zm44-12h-8v-9h8v9zm-8 2h8v9h-8v-9zm8-22v9h-8V8h8zM2 8h8v9H2V8zm0 42v-9h8v9H2zm54 0h-8v-9h8v9z"
  }));
}

module.exports = props => {
  if (props.itemIconString === null) return;

  switch (props.itemIconString) {
    case 'file':
      return h(FileIcon, null);

    case 'folder':
      return h(FolderIcon, null);

    case 'video':
      return h(VideoIcon, null);

    default:
      return h("img", {
        src: props.itemIconString,
        alt: props.alt
      });
  }
};

},{"preact":35}],138:[function(require,module,exports){
"use strict";

const {
  h
} = require('preact'); // if folder:
//   + checkbox (selects all files from folder)
//   + folder name (opens folder)
// if file:
//   + checkbox (selects file)
//   + file name (selects file)


function ListItem(props) {
  const {
    className,
    isDisabled,
    restrictionReason,
    isCheckboxDisabled,
    isChecked,
    toggleCheckbox,
    type,
    id,
    itemIconEl,
    title,
    handleFolderClick,
    showTitles,
    i18n
  } = props;
  return h("li", {
    className: className,
    title: isDisabled ? restrictionReason : null
  }, !isCheckboxDisabled ? h("input", {
    type: "checkbox",
    className: `uppy-u-reset uppy-ProviderBrowserItem-checkbox ${isChecked ? 'uppy-ProviderBrowserItem-checkbox--is-checked' : ''}`,
    onChange: toggleCheckbox // for the <label/>
    ,
    name: "listitem",
    id: id,
    checked: isChecked,
    "aria-label": type === 'file' ? null : i18n('allFilesFromFolderNamed', {
      name: title
    }),
    disabled: isDisabled,
    "data-uppy-super-focusable": true
  }) : null, type === 'file' ? // label for a checkbox
  h("label", {
    htmlFor: id,
    className: "uppy-u-reset uppy-ProviderBrowserItem-inner"
  }, h("div", {
    className: "uppy-ProviderBrowserItem-iconWrap"
  }, itemIconEl), showTitles && title) : // button to open a folder
  h("button", {
    type: "button",
    className: "uppy-u-reset uppy-ProviderBrowserItem-inner",
    onClick: handleFolderClick,
    "aria-label": i18n('openFolderNamed', {
      name: title
    })
  }, h("div", {
    className: "uppy-ProviderBrowserItem-iconWrap"
  }, itemIconEl), showTitles && h("span", null, title)));
}

module.exports = ListItem;

},{"preact":35}],139:[function(require,module,exports){
"use strict";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const {
  h
} = require('preact');

const classNames = require('classnames');

const ItemIcon = require('./components/ItemIcon');

const GridListItem = require('./components/GridLi');

const ListItem = require('./components/ListLi');

module.exports = props => {
  const {
    author
  } = props;
  const itemIconString = props.getItemIcon();
  const className = classNames('uppy-ProviderBrowserItem', {
    'uppy-ProviderBrowserItem--selected': props.isChecked
  }, {
    'uppy-ProviderBrowserItem--disabled': props.isDisabled
  }, {
    'uppy-ProviderBrowserItem--noPreview': itemIconString === 'video'
  });
  const itemIconEl = h(ItemIcon, {
    itemIconString: itemIconString
  });

  switch (props.viewType) {
    case 'grid':
      return h(GridListItem, _extends({}, props, {
        className: className,
        itemIconEl: itemIconEl
      }));

    case 'list':
      return h(ListItem, _extends({}, props, {
        className: className,
        itemIconEl: itemIconEl
      }));

    case 'unsplash':
      return h(GridListItem, _extends({}, props, {
        className: className,
        itemIconEl: itemIconEl
      }), h("a", {
        href: `${author.url}?utm_source=Companion&utm_medium=referral`,
        target: "_blank",
        rel: "noopener noreferrer",
        className: "uppy-ProviderBrowserItem-author"
      }, author.name));

    default:
      throw new Error(`There is no such type ${props.viewType}`);
  }
};

},{"./components/GridLi":136,"./components/ItemIcon":137,"./components/ListLi":138,"classnames":7,"preact":35}],140:[function(require,module,exports){
"use strict";

const {
  h
} = require('preact');

module.exports = props => {
  return h("div", {
    className: "uppy-Provider-loading"
  }, h("span", null, props.i18n('loading')));
};

},{"preact":35}],141:[function(require,module,exports){
"use strict";

const {
  h
} = require('preact');

function GoogleIcon() {
  return h("svg", {
    width: "26",
    height: "26",
    viewBox: "0 0 26 26",
    xmlns: "http://www.w3.org/2000/svg"
  }, h("g", {
    fill: "none",
    "fill-rule": "evenodd"
  }, h("circle", {
    fill: "#FFF",
    cx: "13",
    cy: "13",
    r: "13"
  }), h("path", {
    d: "M21.64 13.205c0-.639-.057-1.252-.164-1.841H13v3.481h4.844a4.14 4.14 0 01-1.796 2.716v2.259h2.908c1.702-1.567 2.684-3.875 2.684-6.615z",
    fill: "#4285F4",
    "fill-rule": "nonzero"
  }), h("path", {
    d: "M13 22c2.43 0 4.467-.806 5.956-2.18l-2.908-2.259c-.806.54-1.837.86-3.048.86-2.344 0-4.328-1.584-5.036-3.711H4.957v2.332A8.997 8.997 0 0013 22z",
    fill: "#34A853",
    "fill-rule": "nonzero"
  }), h("path", {
    d: "M7.964 14.71A5.41 5.41 0 017.682 13c0-.593.102-1.17.282-1.71V8.958H4.957A8.996 8.996 0 004 13c0 1.452.348 2.827.957 4.042l3.007-2.332z",
    fill: "#FBBC05",
    "fill-rule": "nonzero"
  }), h("path", {
    d: "M13 7.58c1.321 0 2.508.454 3.44 1.345l2.582-2.58C17.463 4.891 15.426 4 13 4a8.997 8.997 0 00-8.043 4.958l3.007 2.332C8.672 9.163 10.656 7.58 13 7.58z",
    fill: "#EA4335",
    "fill-rule": "nonzero"
  }), h("path", {
    d: "M4 4h18v18H4z"
  })));
}

function AuthView(props) {
  const {
    pluginName,
    pluginIcon,
    i18nArray,
    handleAuth
  } = props; // In order to comply with Google's brand we need to create a different button
  // for the Google Drive plugin

  const isGoogleDrive = pluginName === 'Google Drive';
  const pluginNameComponent = h("span", {
    className: "uppy-Provider-authTitleName"
  }, pluginName, h("br", null));
  return h("div", {
    className: "uppy-Provider-auth"
  }, h("div", {
    className: "uppy-Provider-authIcon"
  }, pluginIcon()), h("div", {
    className: "uppy-Provider-authTitle"
  }, i18nArray('authenticateWithTitle', {
    pluginName: pluginNameComponent
  })), isGoogleDrive ? h("button", {
    type: "button",
    className: "uppy-u-reset uppy-c-btn uppy-c-btn-primary uppy-Provider-authBtn uppy-Provider-btn-google",
    onClick: handleAuth,
    "data-uppy-super-focusable": true
  }, h(GoogleIcon, null), i18nArray('signInWithGoogle')) : h("button", {
    type: "button",
    className: "uppy-u-reset uppy-c-btn uppy-c-btn-primary uppy-Provider-authBtn",
    onClick: handleAuth,
    "data-uppy-super-focusable": true
  }, i18nArray('authenticateWith', {
    pluginName
  })));
}

module.exports = AuthView;

},{"preact":35}],142:[function(require,module,exports){
"use strict";

const User = require('./User');

const Breadcrumbs = require('../Breadcrumbs');

module.exports = props => {
  const components = [];

  if (props.showBreadcrumbs) {
    components.push(Breadcrumbs({
      getFolder: props.getFolder,
      directories: props.directories,
      breadcrumbsIcon: props.pluginIcon && props.pluginIcon(),
      title: props.title
    }));
  }

  components.push(User({
    logout: props.logout,
    username: props.username,
    i18n: props.i18n
  }));
  return components;
};

},{"../Breadcrumbs":131,"./User":144}],143:[function(require,module,exports){
"use strict";

var _class, _updateFilesAndFolders, _isOriginAllowed, _temp;

function _classPrivateFieldLooseBase(receiver, privateKey) { if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) { throw new TypeError("attempted to use private field on non-instance"); } return receiver; }

var id = 0;

function _classPrivateFieldLooseKey(name) { return "__private_" + id++ + "_" + name; }

const {
  h
} = require('preact');

const AuthView = require('./AuthView');

const Header = require('./Header');

const Browser = require('../Browser');

const LoaderView = require('../Loader');

const CloseWrapper = require('../CloseWrapper');

const View = require('../View');

function getOrigin() {
  // eslint-disable-next-line no-restricted-globals
  return location.origin;
}
/**
 * Class to easily generate generic views for Provider plugins
 */


module.exports = (_temp = (_updateFilesAndFolders = /*#__PURE__*/_classPrivateFieldLooseKey("updateFilesAndFolders"), _isOriginAllowed = /*#__PURE__*/_classPrivateFieldLooseKey("isOriginAllowed"), _class = class ProviderView extends View {
  /**
   * @param {object} plugin instance of the plugin
   * @param {object} opts
   */
  constructor(plugin, opts) {
    super(plugin, opts); // set default options

    Object.defineProperty(this, _isOriginAllowed, {
      value: _isOriginAllowed2
    });
    Object.defineProperty(this, _updateFilesAndFolders, {
      value: _updateFilesAndFolders2
    });
    const defaultOptions = {
      viewType: 'list',
      showTitles: true,
      showFilter: true,
      showBreadcrumbs: true
    }; // merge default options with the ones set by user

    this.opts = { ...defaultOptions,
      ...opts
    }; // Logic

    this.filterQuery = this.filterQuery.bind(this);
    this.getFolder = this.getFolder.bind(this);
    this.getNextFolder = this.getNextFolder.bind(this);
    this.logout = this.logout.bind(this);
    this.handleAuth = this.handleAuth.bind(this);
    this.handleScroll = this.handleScroll.bind(this);
    this.listAllFiles = this.listAllFiles.bind(this);
    this.donePicking = this.donePicking.bind(this); // Visual

    this.render = this.render.bind(this); // Set default state for the plugin

    this.plugin.setPluginState({
      authenticated: false,
      files: [],
      folders: [],
      directories: [],
      filterInput: '',
      isSearchVisible: false,
      currentSelection: []
    });
  }

  tearDown() {// Nothing.
  }

  /**
   * Based on folder ID, fetch a new folder and update it to state
   *
   * @param  {string} id Folder id
   * @returns {Promise}   Folders/files in folder
   */
  getFolder(id, name) {
    return this.sharedHandler.loaderWrapper(this.provider.list(id), res => {
      const folders = [];
      const files = [];
      let updatedDirectories;
      const state = this.plugin.getPluginState();
      const index = state.directories.findIndex(dir => id === dir.id);

      if (index !== -1) {
        updatedDirectories = state.directories.slice(0, index + 1);
      } else {
        updatedDirectories = state.directories.concat([{
          id,
          title: name
        }]);
      }

      this.username = res.username || this.username;

      _classPrivateFieldLooseBase(this, _updateFilesAndFolders)[_updateFilesAndFolders](res, files, folders);

      this.plugin.setPluginState({
        directories: updatedDirectories
      });
    }, this.handleError);
  }
  /**
   * Fetches new folder
   *
   * @param  {object} folder
   */


  getNextFolder(folder) {
    this.getFolder(folder.requestPath, folder.name);
    this.lastCheckbox = undefined;
  }
  /**
   * Removes session token on client side.
   */


  logout() {
    this.provider.logout().then(res => {
      if (res.ok) {
        if (!res.revoked) {
          const message = this.plugin.uppy.i18n('companionUnauthorizeHint', {
            provider: this.plugin.title,
            url: res.manual_revoke_url
          });
          this.plugin.uppy.info(message, 'info', 7000);
        }

        const newState = {
          authenticated: false,
          files: [],
          folders: [],
          directories: []
        };
        this.plugin.setPluginState(newState);
      }
    }).catch(this.handleError);
  }

  filterQuery(e) {
    const state = this.plugin.getPluginState();
    this.plugin.setPluginState({ ...state,
      filterInput: e ? e.target.value : ''
    });
  }
  /**
   * Adds all files found inside of specified folder.
   *
   * Uses separated state while folder contents are being fetched and
   * mantains list of selected folders, which are separated from files.
   */


  addFolder(folder) {
    const folderId = this.providerFileToId(folder);
    const state = this.plugin.getPluginState();
    const folders = { ...state.selectedFolders
    };

    if (folderId in folders && folders[folderId].loading) {
      return;
    }

    folders[folderId] = {
      loading: true,
      files: []
    };
    this.plugin.setPluginState({
      selectedFolders: { ...folders
      }
    }); // eslint-disable-next-line consistent-return

    return this.listAllFiles(folder.requestPath).then(files => {
      let count = 0; // If the same folder is added again, we don't want to send
      // X amount of duplicate file notifications, we want to say
      // the folder was already added. This checks if all files are duplicate,
      // if that's the case, we don't add the files.

      files.forEach(file => {
        const id = this.providerFileToId(file);

        if (!this.plugin.uppy.checkIfFileAlreadyExists(id)) {
          count++;
        }
      });

      if (count > 0) {
        files.forEach(file => this.addFile(file));
      }

      const ids = files.map(this.providerFileToId);
      folders[folderId] = {
        loading: false,
        files: ids
      };
      this.plugin.setPluginState({
        selectedFolders: folders
      });
      let message;

      if (count === 0) {
        message = this.plugin.uppy.i18n('folderAlreadyAdded', {
          folder: folder.name
        });
      } else if (files.length) {
        message = this.plugin.uppy.i18n('folderAdded', {
          smart_count: count,
          folder: folder.name
        });
      } else {
        message = this.plugin.uppy.i18n('emptyFolderAdded');
      }

      this.plugin.uppy.info(message);
    }).catch(e => {
      const state = this.plugin.getPluginState();
      const selectedFolders = { ...state.selectedFolders
      };
      delete selectedFolders[folderId];
      this.plugin.setPluginState({
        selectedFolders
      });
      this.handleError(e);
    });
  }

  handleAuth() {
    const authState = btoa(JSON.stringify({
      origin: getOrigin()
    }));
    const clientVersion = `@uppy/provider-views=${ProviderView.VERSION}`;
    const link = this.provider.authUrl({
      state: authState,
      uppyVersions: clientVersion
    });
    const authWindow = window.open(link, '_blank');

    const handleToken = e => {
      if (!_classPrivateFieldLooseBase(this, _isOriginAllowed)[_isOriginAllowed](e.origin, this.plugin.opts.companionAllowedHosts) || e.source !== authWindow) {
        this.plugin.uppy.log(`rejecting event from ${e.origin} vs allowed pattern ${this.plugin.opts.companionAllowedHosts}`);
        return;
      } // Check if it's a string before doing the JSON.parse to maintain support
      // for older Companion versions that used object references


      const data = typeof e.data === 'string' ? JSON.parse(e.data) : e.data;

      if (data.error) {
        this.plugin.uppy.log('auth aborted');
        const {
          uppy
        } = this.plugin;
        const message = uppy.i18n('authAborted');
        uppy.info({
          message
        }, 'warning', 5000);
        return;
      }

      if (!data.token) {
        this.plugin.uppy.log('did not receive token from auth window');
        return;
      }

      authWindow.close();
      window.removeEventListener('message', handleToken);
      this.provider.setAuthToken(data.token);
      this.preFirstRender();
    };

    window.addEventListener('message', handleToken);
  }

  async handleScroll(event) {
    const path = this.nextPagePath || null;

    if (this.shouldHandleScroll(event) && path) {
      this.isHandlingScroll = true;

      try {
        const response = await this.provider.list(path);
        const {
          files,
          folders
        } = this.plugin.getPluginState();

        _classPrivateFieldLooseBase(this, _updateFilesAndFolders)[_updateFilesAndFolders](response, files, folders);
      } catch (error) {
        this.handleError(error);
      } finally {
        this.isHandlingScroll = false;
      }
    }
  }

  listAllFiles(path, files) {
    if (files === void 0) {
      files = null;
    }

    files = files || [];
    return new Promise((resolve, reject) => {
      this.provider.list(path).then(res => {
        res.items.forEach(item => {
          if (!item.isFolder) {
            files.push(item);
          } else {
            this.addFolder(item);
          }
        });
        const moreFiles = res.nextPagePath || null;

        if (moreFiles) {
          return this.listAllFiles(moreFiles, files).then(files => resolve(files)).catch(e => reject(e));
        }

        return resolve(files);
      }).catch(e => reject(e));
    });
  }

  donePicking() {
    const {
      currentSelection
    } = this.plugin.getPluginState();
    const promises = currentSelection.map(file => {
      if (file.isFolder) {
        return this.addFolder(file);
      }

      return this.addFile(file);
    });
    this.sharedHandler.loaderWrapper(Promise.all(promises), () => {
      this.clearSelection();
    }, () => {});
  }

  render(state, viewOptions) {
    var _this = this;

    if (viewOptions === void 0) {
      viewOptions = {};
    }

    const {
      authenticated,
      didFirstRender
    } = this.plugin.getPluginState();

    if (!didFirstRender) {
      this.preFirstRender();
    }

    const targetViewOptions = { ...this.opts,
      ...viewOptions
    };
    const {
      files,
      folders,
      filterInput,
      loading,
      currentSelection
    } = this.plugin.getPluginState();
    const {
      isChecked,
      toggleCheckbox,
      filterItems
    } = this.sharedHandler;
    const hasInput = filterInput !== '';
    const headerProps = {
      showBreadcrumbs: targetViewOptions.showBreadcrumbs,
      getFolder: this.getFolder,
      directories: this.plugin.getPluginState().directories,
      pluginIcon: this.plugin.icon,
      title: this.plugin.title,
      logout: this.logout,
      username: this.username,
      i18n: this.plugin.uppy.i18n
    };
    const browserProps = {
      isChecked,
      toggleCheckbox,
      currentSelection,
      files: hasInput ? filterItems(files) : files,
      folders: hasInput ? filterItems(folders) : folders,
      username: this.username,
      getNextFolder: this.getNextFolder,
      getFolder: this.getFolder,
      filterItems: this.sharedHandler.filterItems,
      filterQuery: this.filterQuery,
      logout: this.logout,
      handleScroll: this.handleScroll,
      listAllFiles: this.listAllFiles,
      done: this.donePicking,
      cancel: this.cancelPicking,
      headerComponent: Header(headerProps),
      title: this.plugin.title,
      viewType: targetViewOptions.viewType,
      showTitles: targetViewOptions.showTitles,
      showFilter: targetViewOptions.showFilter,
      showBreadcrumbs: targetViewOptions.showBreadcrumbs,
      pluginIcon: this.plugin.icon,
      i18n: this.plugin.uppy.i18n,
      uppyFiles: this.plugin.uppy.getFiles(),
      validateRestrictions: function () {
        return _this.plugin.uppy.validateRestrictions(...arguments);
      }
    };

    if (loading) {
      return h(CloseWrapper, {
        onUnmount: this.clearSelection
      }, h(LoaderView, {
        i18n: this.plugin.uppy.i18n
      }));
    }

    if (!authenticated) {
      return h(CloseWrapper, {
        onUnmount: this.clearSelection
      }, h(AuthView, {
        pluginName: this.plugin.title,
        pluginIcon: this.plugin.icon,
        handleAuth: this.handleAuth,
        i18n: this.plugin.uppy.i18n,
        i18nArray: this.plugin.uppy.i18nArray
      }));
    }

    return h(CloseWrapper, {
      onUnmount: this.clearSelection
    }, h(Browser, browserProps));
  }

}), _class.VERSION = "2.0.5", _temp);

function _updateFilesAndFolders2(res, files, folders) {
  this.nextPagePath = res.nextPagePath;
  res.items.forEach(item => {
    if (item.isFolder) {
      folders.push(item);
    } else {
      files.push(item);
    }
  });
  this.plugin.setPluginState({
    folders,
    files
  });
}

function _isOriginAllowed2(origin, allowedOrigin) {
  const getRegex = value => {
    if (typeof value === 'string') {
      return new RegExp(`^${value}$`);
    }

    if (value instanceof RegExp) {
      return value;
    }
  };

  const patterns = Array.isArray(allowedOrigin) ? allowedOrigin.map(getRegex) : [getRegex(allowedOrigin)];
  return patterns.filter(pattern => pattern != null) // loose comparison to catch undefined
  .some(pattern => pattern.test(origin) || pattern.test(`${origin}/`)); // allowing for trailing '/'
}

},{"../Browser":132,"../CloseWrapper":133,"../Loader":140,"../View":151,"./AuthView":141,"./Header":142,"preact":35}],144:[function(require,module,exports){
"use strict";

const {
  h
} = require('preact');

module.exports = props => {
  return [h("span", {
    className: "uppy-ProviderBrowser-user",
    key: "username"
  }, props.username), h("button", {
    type: "button",
    onClick: props.logout,
    className: "uppy-u-reset uppy-ProviderBrowser-userLogout",
    key: "logout"
  }, props.i18n('logOut'))];
};

},{"preact":35}],145:[function(require,module,exports){
"use strict";

module.exports = require('./ProviderView');

},{"./ProviderView":143}],146:[function(require,module,exports){
"use strict";

const {
  h
} = require('preact');

module.exports = props => {
  return h("button", {
    type: "button",
    onClick: props.triggerSearchInput,
    className: "uppy-u-reset uppy-ProviderBrowser-userLogout"
  }, props.i18n('backToSearch'));
};

},{"preact":35}],147:[function(require,module,exports){
"use strict";

const {
  h
} = require('preact');

module.exports = props => {
  let input;

  const handleKeyPress = ev => {
    if (ev.keyCode === 13) {
      validateAndSearch();
    }
  };

  const validateAndSearch = () => {
    if (input.value) {
      props.search(input.value);
    }
  };

  return h("div", {
    className: "uppy-SearchProvider"
  }, h("input", {
    className: "uppy-u-reset uppy-c-textInput uppy-SearchProvider-input",
    type: "text",
    "aria-label": props.i18n('enterTextToSearch'),
    placeholder: props.i18n('enterTextToSearch'),
    onKeyUp: handleKeyPress,
    ref: input_ => {
      input = input_;
    },
    "data-uppy-super-focusable": true
  }), h("button", {
    className: "uppy-u-reset uppy-c-btn uppy-c-btn-primary uppy-SearchProvider-searchButton",
    type: "button",
    onClick: validateAndSearch
  }, props.i18n('searchImages')));
};

},{"preact":35}],148:[function(require,module,exports){
"use strict";

var _class, _searchTerm, _updateFilesAndInputMode, _temp;

function _classPrivateFieldLooseBase(receiver, privateKey) { if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) { throw new TypeError("attempted to use private field on non-instance"); } return receiver; }

var id = 0;

function _classPrivateFieldLooseKey(name) { return "__private_" + id++ + "_" + name; }

const {
  h
} = require('preact');

const SearchInput = require('./InputView');

const Browser = require('../Browser');

const LoaderView = require('../Loader');

const Header = require('./Header');

const CloseWrapper = require('../CloseWrapper');

const View = require('../View');
/**
 * Class to easily generate generic views for Provider plugins
 */


module.exports = (_temp = (_searchTerm = /*#__PURE__*/_classPrivateFieldLooseKey("searchTerm"), _updateFilesAndInputMode = /*#__PURE__*/_classPrivateFieldLooseKey("updateFilesAndInputMode"), _class = class SearchProviderView extends View {
  /**
   * @param {object} plugin instance of the plugin
   * @param {object} opts
   */
  constructor(plugin, opts) {
    super(plugin, opts); // set default options

    Object.defineProperty(this, _updateFilesAndInputMode, {
      value: _updateFilesAndInputMode2
    });
    Object.defineProperty(this, _searchTerm, {
      writable: true,
      value: void 0
    });
    const defaultOptions = {
      viewType: 'grid',
      showTitles: false,
      showFilter: false,
      showBreadcrumbs: false
    }; // merge default options with the ones set by user

    this.opts = { ...defaultOptions,
      ...opts
    }; // Logic

    this.search = this.search.bind(this);
    this.triggerSearchInput = this.triggerSearchInput.bind(this);
    this.addFile = this.addFile.bind(this);
    this.handleScroll = this.handleScroll.bind(this);
    this.donePicking = this.donePicking.bind(this); // Visual

    this.render = this.render.bind(this); // Set default state for the plugin

    this.plugin.setPluginState({
      isInputMode: true,
      files: [],
      folders: [],
      directories: [],
      filterInput: '',
      isSearchVisible: false,
      currentSelection: []
    });
  }

  tearDown() {// Nothing.
  }

  search(query) {
    if (query && query === _classPrivateFieldLooseBase(this, _searchTerm)[_searchTerm]) {
      // no need to search again as this is the same as the previous search
      this.plugin.setPluginState({
        isInputMode: false
      });
      return;
    }

    return this.sharedHandler.loaderWrapper(this.provider.search(query), res => {
      _classPrivateFieldLooseBase(this, _updateFilesAndInputMode)[_updateFilesAndInputMode](res, []);
    }, this.handleError);
  }

  triggerSearchInput() {
    this.plugin.setPluginState({
      isInputMode: true
    });
  }

  async handleScroll(event) {
    const query = this.nextPageQuery || null;

    if (this.shouldHandleScroll(event) && query) {
      this.isHandlingScroll = true;

      try {
        const response = await this.provider.search(_classPrivateFieldLooseBase(this, _searchTerm)[_searchTerm], query);
        const {
          files
        } = this.plugin.getPluginState();

        _classPrivateFieldLooseBase(this, _updateFilesAndInputMode)[_updateFilesAndInputMode](response, files);
      } catch (error) {
        this.handleError(error);
      } finally {
        this.isHandlingScroll = false;
      }
    }
  }

  donePicking() {
    const {
      currentSelection
    } = this.plugin.getPluginState();
    const promises = currentSelection.map(file => this.addFile(file));
    this.sharedHandler.loaderWrapper(Promise.all(promises), () => {
      this.clearSelection();
    }, () => {});
  }

  render(state, viewOptions) {
    var _this = this;

    if (viewOptions === void 0) {
      viewOptions = {};
    }

    const {
      didFirstRender,
      isInputMode
    } = this.plugin.getPluginState();

    if (!didFirstRender) {
      this.preFirstRender();
    }

    const targetViewOptions = { ...this.opts,
      ...viewOptions
    };
    const {
      files,
      folders,
      filterInput,
      loading,
      currentSelection
    } = this.plugin.getPluginState();
    const {
      isChecked,
      toggleCheckbox,
      filterItems
    } = this.sharedHandler;
    const hasInput = filterInput !== '';
    const browserProps = {
      isChecked,
      toggleCheckbox,
      currentSelection,
      files: hasInput ? filterItems(files) : files,
      folders: hasInput ? filterItems(folders) : folders,
      handleScroll: this.handleScroll,
      done: this.donePicking,
      cancel: this.cancelPicking,
      headerComponent: Header({
        triggerSearchInput: this.triggerSearchInput,
        i18n: this.plugin.uppy.i18n
      }),
      title: this.plugin.title,
      viewType: targetViewOptions.viewType,
      showTitles: targetViewOptions.showTitles,
      showFilter: targetViewOptions.showFilter,
      showBreadcrumbs: targetViewOptions.showBreadcrumbs,
      pluginIcon: this.plugin.icon,
      i18n: this.plugin.uppy.i18n,
      uppyFiles: this.plugin.uppy.getFiles(),
      validateRestrictions: function () {
        return _this.plugin.uppy.validateRestrictions(...arguments);
      }
    };

    if (loading) {
      return h(CloseWrapper, {
        onUnmount: this.clearSelection
      }, h(LoaderView, {
        i18n: this.plugin.uppy.i18n
      }));
    }

    if (isInputMode) {
      return h(CloseWrapper, {
        onUnmount: this.clearSelection
      }, h(SearchInput, {
        search: this.search,
        i18n: this.plugin.uppy.i18n
      }));
    }

    return h(CloseWrapper, {
      onUnmount: this.clearSelection
    }, h(Browser, browserProps));
  }

}), _class.VERSION = "2.0.5", _temp);

function _updateFilesAndInputMode2(res, files) {
  this.nextPageQuery = res.nextPageQuery;
  _classPrivateFieldLooseBase(this, _searchTerm)[_searchTerm] = res.searchedFor;
  res.items.forEach(item => {
    files.push(item);
  });
  this.plugin.setPluginState({
    isInputMode: false,
    files
  });
}

},{"../Browser":132,"../CloseWrapper":133,"../Loader":140,"../View":151,"./Header":146,"./InputView":147,"preact":35}],149:[function(require,module,exports){
"use strict";

module.exports = require('./SearchProviderView');

},{"./SearchProviderView":148}],150:[function(require,module,exports){
"use strict";

const remoteFileObjToLocal = require('./../../utils/lib/remoteFileObjToLocal');

module.exports = class SharedHandler {
  constructor(plugin) {
    this.plugin = plugin;
    this.filterItems = this.filterItems.bind(this);
    this.toggleCheckbox = this.toggleCheckbox.bind(this);
    this.isChecked = this.isChecked.bind(this);
    this.loaderWrapper = this.loaderWrapper.bind(this);
  }

  filterItems(items) {
    const state = this.plugin.getPluginState();

    if (!state.filterInput || state.filterInput === '') {
      return items;
    }

    return items.filter(folder => {
      return folder.name.toLowerCase().indexOf(state.filterInput.toLowerCase()) !== -1;
    });
  }
  /**
   * Toggles file/folder checkbox to on/off state while updating files list.
   *
   * Note that some extra complexity comes from supporting shift+click to
   * toggle multiple checkboxes at once, which is done by getting all files
   * in between last checked file and current one.
   */


  toggleCheckbox(e, file) {
    e.stopPropagation();
    e.preventDefault();
    e.currentTarget.focus();
    const {
      folders,
      files
    } = this.plugin.getPluginState();
    const items = this.filterItems(folders.concat(files)); // Shift-clicking selects a single consecutive list of items
    // starting at the previous click and deselects everything else.

    if (this.lastCheckbox && e.shiftKey) {
      const prevIndex = items.indexOf(this.lastCheckbox);
      const currentIndex = items.indexOf(file);
      const currentSelection = prevIndex < currentIndex ? items.slice(prevIndex, currentIndex + 1) : items.slice(currentIndex, prevIndex + 1);
      const reducedCurrentSelection = []; // Check restrictions on each file in currentSelection,
      // reduce it to only contain files that pass restrictions

      for (const item of currentSelection) {
        const {
          uppy
        } = this.plugin;
        const validatedRestrictions = uppy.validateRestrictions(remoteFileObjToLocal(item), [...uppy.getFiles(), ...reducedCurrentSelection]);

        if (validatedRestrictions.result) {
          reducedCurrentSelection.push(item);
        } else {
          uppy.info({
            message: validatedRestrictions.reason
          }, 'error', uppy.opts.infoTimeout);
        }
      }

      this.plugin.setPluginState({
        currentSelection: reducedCurrentSelection
      });
      return;
    }

    this.lastCheckbox = file;
    const {
      currentSelection
    } = this.plugin.getPluginState();

    if (this.isChecked(file)) {
      this.plugin.setPluginState({
        currentSelection: currentSelection.filter(item => item.id !== file.id)
      });
    } else {
      this.plugin.setPluginState({
        currentSelection: currentSelection.concat([file])
      });
    }
  }

  isChecked(file) {
    const {
      currentSelection
    } = this.plugin.getPluginState(); // comparing id instead of the file object, because the reference to the object
    // changes when we switch folders, and the file list is updated

    return currentSelection.some(item => item.id === file.id);
  }

  loaderWrapper(promise, then, catch_) {
    promise.then(result => {
      this.plugin.setPluginState({
        loading: false
      });
      then(result);
    }).catch(err => {
      this.plugin.setPluginState({
        loading: false
      });
      catch_(err);
    });
    this.plugin.setPluginState({
      loading: true
    });
  }

};

},{"./../../utils/lib/remoteFileObjToLocal":220}],151:[function(require,module,exports){
"use strict";

const getFileType = require('./../../utils/lib/getFileType');

const isPreviewSupported = require('./../../utils/lib/isPreviewSupported');

const generateFileID = require('./../../utils/lib/generateFileID'); // TODO: now that we have a shared `View` class,
// `SharedHandler` could be cleaned up and moved into here


const SharedHandler = require('./SharedHandler');

module.exports = class View {
  constructor(plugin, opts) {
    this.plugin = plugin;
    this.provider = opts.provider;
    this.sharedHandler = new SharedHandler(plugin);
    this.isHandlingScroll = false;
    this.preFirstRender = this.preFirstRender.bind(this);
    this.handleError = this.handleError.bind(this);
    this.addFile = this.addFile.bind(this);
    this.clearSelection = this.clearSelection.bind(this);
    this.cancelPicking = this.cancelPicking.bind(this);
  } // eslint-disable-next-line class-methods-use-this


  providerFileToId(file) {
    return generateFileID({
      data: file,
      name: file.name || file.id,
      type: file.mimetype
    });
  }

  preFirstRender() {
    this.plugin.setPluginState({
      didFirstRender: true
    });
    this.plugin.onFirstRender();
  } // eslint-disable-next-line class-methods-use-this


  shouldHandleScroll(event) {
    const {
      scrollHeight,
      scrollTop,
      offsetHeight
    } = event.target;
    const scrollPosition = scrollHeight - (scrollTop + offsetHeight);
    return scrollPosition < 50 && !this.isHandlingScroll;
  }

  clearSelection() {
    this.plugin.setPluginState({
      currentSelection: []
    });
  }

  cancelPicking() {
    this.clearSelection();
    const dashboard = this.plugin.uppy.getPlugin('Dashboard');

    if (dashboard) {
      dashboard.hideAllPanels();
    }
  }

  handleError(error) {
    const {
      uppy
    } = this.plugin;
    const message = uppy.i18n('companionError');
    uppy.log(error.toString());

    if (error.isAuthError) {
      return;
    }

    uppy.info({
      message,
      details: error.toString()
    }, 'error', 5000);
  }

  addFile(file) {
    const tagFile = {
      id: this.providerFileToId(file),
      source: this.plugin.id,
      data: file,
      name: file.name || file.id,
      type: file.mimeType,
      isRemote: true,
      meta: {},
      body: {
        fileId: file.id
      },
      remote: {
        companionUrl: this.plugin.opts.companionUrl,
        url: `${this.provider.fileUrl(file.requestPath)}`,
        body: {
          fileId: file.id
        },
        providerOptions: this.provider.opts,
        providerName: this.provider.name
      }
    };
    const fileType = getFileType(tagFile); // TODO Should we just always use the thumbnail URL if it exists?

    if (fileType && isPreviewSupported(fileType)) {
      tagFile.preview = file.thumbnail;
    }

    if (file.author) {
      tagFile.meta.author = file.author;
    }

    this.plugin.uppy.log('Adding remote file');

    try {
      this.plugin.uppy.addFile(tagFile);
      return true;
    } catch (err) {
      if (!err.isRestriction) {
        this.plugin.uppy.log(err);
      }

      return false;
    }
  }

};

},{"./../../utils/lib/generateFileID":198,"./../../utils/lib/getFileType":206,"./../../utils/lib/isPreviewSupported":217,"./SharedHandler":150}],152:[function(require,module,exports){
"use strict";

const ProviderViews = require('./ProviderView');

const SearchProviderViews = require('./SearchProviderView');

module.exports = {
  ProviderViews,
  SearchProviderViews
};

},{"./ProviderView":145,"./SearchProviderView":149}],153:[function(require,module,exports){
"use strict";

const BasePlugin = require('./../../core/lib/BasePlugin');

const toArray = require('./../../utils/lib/toArray');

const findDOMElement = require('./../../utils/lib/findDOMElement');
/**
 * Add files from existing file inputs to Uppy.
 */


class AttachFileInputs extends BasePlugin {
  constructor(uppy, opts) {
    super(uppy, opts);
    this.id = this.opts.id || 'AttachFileInputs';
    this.type = 'acquirer';
    this.handleChange = this.handleChange.bind(this);
    this.inputs = null;
  }

  handleChange(event) {
    this.addFiles(event.target);
  }

  addFiles(input) {
    const files = toArray(input.files);
    files.forEach(file => {
      try {
        this.uppy.addFile({
          source: this.id,
          name: file.name,
          type: file.type,
          data: file
        });
      } catch (err) {
        if (!err.isRestriction) {
          this.uppy.log(err);
        }
      }
    });
  }

  install() {
    this.el = findDOMElement(this.opts.target);

    if (!this.el) {
      throw new Error('[AttachFileInputs] Target form does not exist');
    }

    const {
      restrictions
    } = this.uppy.opts;
    this.inputs = this.el.querySelectorAll('input[type="file"]');
    this.inputs.forEach(input => {
      input.addEventListener('change', this.handleChange);

      if (!input.hasAttribute('multiple')) {
        if (restrictions.maxNumberOfFiles !== 1) {
          input.setAttribute('multiple', 'multiple');
        } else {
          input.removeAttribute('multiple');
        }
      }

      if (!input.hasAttribute('accept') && restrictions.allowedFileTypes) {
        input.setAttribute('accept', restrictions.allowedFileTypes.join(','));
      } // Check if this input already contains files (eg. user selected them before Uppy loaded,
      // or the page was refreshed and the browser kept files selected)


      this.addFiles(input);
    });
  }

  uninstall() {
    this.inputs.forEach(input => {
      input.removeEventListener('change', this.handleChange);
    });
    this.inputs = null;
  }

}

module.exports = AttachFileInputs;

},{"./../../core/lib/BasePlugin":83,"./../../utils/lib/findDOMElement":197,"./../../utils/lib/toArray":223}],154:[function(require,module,exports){
"use strict";

const BasePlugin = require('./../../core/lib/BasePlugin');

const findDOMElement = require('./../../utils/lib/findDOMElement');
/**
 * After an upload completes, inject result data from Transloadit in a hidden input.
 *
 * Must be added _after_ the Transloadit plugin.
 */


class TransloaditFormResult extends BasePlugin {
  constructor(uppy, opts) {
    super(uppy, opts);
    this.id = this.opts.id || 'TransloaditFormResult';
    this.type = 'modifier';
    this.handleUpload = this.handleUpload.bind(this);
  }

  getAssemblyStatuses(fileIDs) {
    const assemblyIds = [];
    fileIDs.forEach(fileID => {
      const file = this.uppy.getFile(fileID);
      const assembly = file.transloadit && file.transloadit.assembly;

      if (assembly && assemblyIds.indexOf(assembly) === -1) {
        assemblyIds.push(assembly);
      }
    });
    const tl = this.uppy.getPlugin(this.opts.transloaditPluginId || 'Transloadit');
    return assemblyIds.map(id => tl.getAssembly(id));
  }

  handleUpload(fileIDs) {
    const assemblies = this.getAssemblyStatuses(fileIDs);
    const input = document.createElement('input');
    input.type = 'hidden';
    input.name = this.opts.name;
    input.value = JSON.stringify(assemblies);
    const target = findDOMElement(this.opts.target);
    target.appendChild(input);
  }

  install() {
    this.uppy.addPostProcessor(this.handleUpload);
  }

  uninstall() {
    this.uppy.removePostProcessor(this.handleUpload);
  }

}

module.exports = TransloaditFormResult;

},{"./../../core/lib/BasePlugin":83,"./../../utils/lib/findDOMElement":197}],155:[function(require,module,exports){
"use strict";

function _classPrivateFieldLooseBase(receiver, privateKey) { if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) { throw new TypeError("attempted to use private field on non-instance"); } return receiver; }

var id = 0;

function _classPrivateFieldLooseKey(name) { return "__private_" + id++ + "_" + name; }

const BasePlugin = require('./../../core/lib/BasePlugin');
/**
 * Add a `results` key to the upload result data, containing all Transloadit Assembly results.
 */


var _afterUpload = /*#__PURE__*/_classPrivateFieldLooseKey("afterUpload");

class TransloaditResultsPlugin extends BasePlugin {
  constructor(uppy, opts) {
    super(uppy, opts);
    Object.defineProperty(this, _afterUpload, {
      writable: true,
      value: (fileIDs, uploadID) => {
        const {
          currentUploads
        } = this.uppy.getState();
        const {
          result
        } = currentUploads[uploadID];
        const assemblies = Array.isArray(result == null ? void 0 : result.transloadit) ? result.transloadit : []; // Merge the assembly.results[*] arrays and add `stepName` and
        // `assemblyId` properties.

        const assemblyResults = [];
        assemblies.forEach(assembly => {
          Object.keys(assembly.results).forEach(stepName => {
            const results = assembly.results[stepName];
            results.forEach(result => {
              assemblyResults.push({ ...result,
                assemblyId: assembly.assembly_id,
                stepName
              });
            });
          });
        });
        this.uppy.addResultData(uploadID, {
          results: assemblyResults
        });
      }
    });
    this.type = 'modifier';
    this.id = this.opts.id || 'TransloaditResultsPlugin';
  }

  install() {
    this.uppy.addPostProcessor(_classPrivateFieldLooseBase(this, _afterUpload)[_afterUpload]);
  }

}

module.exports = TransloaditResultsPlugin;

},{"./../../core/lib/BasePlugin":83}],156:[function(require,module,exports){
"use strict";

const Dashboard = require('./../../dashboard');

const has = require('./../../utils/lib/hasProperty');

const dashboardOptionNames = ['metaFields', 'width', 'height', 'thumbnailWidth', 'showLinkToFileUploadResult', 'showProgressDetails', 'hideRetryButton', 'hideCancelButton', 'hideUploadButton', 'hideProgressAfterFinish', 'note', 'disableStatusBar', 'disableInformer', 'disableThumbnailGenerator', 'showSelectedFiles', 'proudlyDisplayPoweredByUppy', 'theme'];
const modalDashboardOptionNames = ['trigger', 'closeModalOnClickOutside', 'closeAfterFinish', 'disablePageScrollWhenModalOpen', 'animateOpenClose', 'onRequestCloseModal', 'browserBackButtonClose'];

function addDashboardPlugin(uppy, opts, overrideOpts) {
  const dashboardOpts = {};
  dashboardOptionNames.forEach(key => {
    if (has(opts, key)) {
      dashboardOpts[key] = opts[key];
    }
  });
  const inline = overrideOpts.inline == null ? dashboardOpts.inline : overrideOpts.inline;

  if (!inline) {
    modalDashboardOptionNames.forEach(key => {
      if (has(opts, key)) {
        dashboardOpts[key] = opts[key];
      }
    });
  }

  uppy.use(Dashboard, { ...dashboardOpts,
    ...overrideOpts
  });
}

module.exports = addDashboardPlugin;

},{"./../../dashboard":108,"./../../utils/lib/hasProperty":212}],157:[function(require,module,exports){
"use strict";

const Transloadit = require('./../../transloadit');

const has = require('./../../utils/lib/hasProperty');

const remoteProviders = {
  dropbox: require('./../../dropbox'),
  'google-drive': require('./../../google-drive'),
  instagram: require('./../../instagram'),
  facebook: require('./../../facebook'),
  onedrive: require('./../../onedrive'),
  url: require('./../../url')
};
const localProviders = {
  webcam: require('./../../webcam')
};
const remoteProviderOptionNames = ['companionUrl', 'companionAllowedHosts', 'companionHeaders', 'target']; // No shared options.

const localProviderOptionNames = ['target'];

function addRemoteProvider(uppy, name, opts) {
  const Provider = remoteProviders[name];
  const providerOptions = {
    // Default to the :tl: Companion servers.
    companionUrl: Transloadit.COMPANION,
    companionAllowedHosts: Transloadit.COMPANION_PATTERN
  };
  remoteProviderOptionNames.forEach(name => {
    if (has(opts, name)) providerOptions[name] = opts[name];
  }); // Apply overrides for a specific provider plugin.

  if (typeof opts[name] === 'object') {
    Object.assign(providerOptions, opts[name]);
  }

  uppy.use(Provider, providerOptions);
}

function addLocalProvider(uppy, name, opts) {
  const Provider = localProviders[name];
  const providerOptions = {};
  localProviderOptionNames.forEach(name => {
    if (has(opts, name)) providerOptions[name] = opts[name];
  }); // Apply overrides for a specific provider plugin.

  if (typeof opts[name] === 'object') {
    Object.assign(providerOptions, opts[name]);
  }

  uppy.use(Provider, providerOptions);
}

function addProviders(uppy, names, opts) {
  if (opts === void 0) {
    opts = {};
  }

  names.forEach(name => {
    if (has(remoteProviders, name)) {
      addRemoteProvider(uppy, name, opts);
    } else if (has(localProviders, name)) {
      addLocalProvider(uppy, name, opts);
    } else {
      const validNames = [...Object.keys(remoteProviders), ...Object.keys(localProviders)];
      const expectedNameString = validNames.sort().map(validName => `'${validName}'`).join(', ');
      throw new Error(`Unexpected provider '${name}', expected one of [${expectedNameString}]`);
    }
  });
}

module.exports = addProviders;

},{"./../../dropbox":116,"./../../facebook":118,"./../../google-drive":122,"./../../instagram":127,"./../../onedrive":129,"./../../transloadit":178,"./../../url":184,"./../../utils/lib/hasProperty":212,"./../../webcam":235}],158:[function(require,module,exports){
"use strict";

const Transloadit = require('./../../transloadit');

const has = require('./../../utils/lib/hasProperty');

const TransloaditResults = require('./TransloaditResultsPlugin');

const transloaditOptionNames = ['service', 'waitForEncoding', 'waitForMetadata', 'alwaysRunAssembly', 'importFromUploadURLs', 'signature', 'params', 'fields', 'limit', 'locale', 'getAssemblyOptions'];

function addTransloaditPlugin(uppy, opts) {
  const transloaditOptions = {};
  transloaditOptionNames.forEach(name => {
    if (has(opts, name)) transloaditOptions[name] = opts[name];
  });
  uppy.use(Transloadit, transloaditOptions); // Adds a `results` key to the upload result data containing a flat array of all results from all Assemblies.

  if (transloaditOptions.waitForEncoding) {
    uppy.use(TransloaditResults);
  }
}

module.exports = addTransloaditPlugin;

},{"./../../transloadit":178,"./../../utils/lib/hasProperty":212,"./TransloaditResultsPlugin":155}],159:[function(require,module,exports){
"use strict";

const Uppy = require('./../../core');

const has = require('./../../utils/lib/hasProperty');

const eventNames = {
  // File management events
  onFileAdded: 'file-added',
  onFileRemoved: 'file-removed',
  // Transloadit events
  onImportError: 'transloadit:import-error',
  onAssemblyCreated: 'transloadit:assembly-created',
  onAssemblyExecuting: 'transloadit:assembly-executing',
  onAssemblyError: 'transloadit:assembly-error',
  onAssemblyComplete: 'transloadit:complete',
  onResult: 'transloadit:result',
  // Upload events
  onStart: 'upload',
  onPause: 'pause-all',
  onFilePause: 'upload-pause',
  onCancel: 'cancel-all',
  onError: 'error',
  // mostly akin to promise rejection
  onFileCancel: 'upload-cancel',
  onFileProgress: 'upload-progress',
  onFileError: 'upload-error',
  onUploaded: 'transloadit:upload',
  onComplete: 'complete' // mostly akin to promise resolution

};
const uppyOptionNames = ['autoProceed', 'restrictions', 'meta', 'onBeforeFileAdded', 'onBeforeUpload', 'debug'];

function createUppy(opts, overrides) {
  if (overrides === void 0) {
    overrides = {};
  }

  const uppyOptions = {};
  uppyOptionNames.forEach(name => {
    if (has(opts, name)) uppyOptions[name] = opts[name];
  });
  Object.assign(uppyOptions, overrides);
  const uppy = new Uppy(uppyOptions); // Builtin event aliases

  Object.keys(eventNames).forEach(optionName => {
    const eventName = eventNames[optionName];

    if (typeof opts[optionName] === 'function') {
      uppy.on(eventName, opts[optionName]);
    }
  }); // Custom events (these should probably be added to core)

  if (typeof opts.onProgress === 'function') {
    uppy.on('upload-progress', () => {
      const {
        totalProgress
      } = uppy.getState();
      opts.onProgress.call(uppy, totalProgress);
    });
  }

  return uppy;
}

module.exports = createUppy;

},{"./../../core":87,"./../../utils/lib/hasProperty":212}],160:[function(require,module,exports){
"use strict";

const createUppy = require('./createUppy');

const addDashboardPlugin = require('./addDashboardPlugin');

const addTransloaditPlugin = require('./addTransloaditPlugin');

const addProviders = require('./addProviders');

function dashboard(target, opts) {
  if (opts === void 0) {
    opts = {};
  }

  const inline = opts.inline == null ? true : opts.inline;
  const pluginId = 'Dashboard';
  const uppy = createUppy(opts);
  addTransloaditPlugin(uppy, opts);
  addDashboardPlugin(uppy, opts, {
    id: pluginId,
    inline,
    target,
    closeAfterFinish: false
  });

  if (Array.isArray(opts.providers)) {
    addProviders(uppy, opts.providers, { ...opts,
      // Install providers into the Dashboard.
      target: uppy.getPlugin(pluginId)
    });
  }

  return uppy;
}

module.exports = dashboard;

},{"./addDashboardPlugin":156,"./addProviders":157,"./addTransloaditPlugin":158,"./createUppy":159}],161:[function(require,module,exports){
"use strict";

const Uppy = require('./../../core');

const Form = require('./../../form');

const StatusBar = require('./../../status-bar');

const findDOMElement = require('./../../utils/lib/findDOMElement');

const has = require('./../../utils/lib/hasProperty');

const AttachFileInputs = require('./AttachFileInputs');

const TransloaditFormResult = require('./TransloaditFormResult');

const addDashboardPlugin = require('./addDashboardPlugin');

const addTransloaditPlugin = require('./addTransloaditPlugin');

const addProviders = require('./addProviders');

const defaultLocaleStrings = {
  chooseFiles: 'Choose files'
};

function mergeDefaultLocale(defaults, userProvided) {
  if (userProvided === void 0) {
    userProvided = {};
  }

  const strings = userProvided.strings || {};
  return { ...userProvided,
    strings: { ...defaults,
      ...strings
    }
  };
}

function form(target, opts) {
  if (!opts) throw new TypeError('robodog.form: must provide an options object');
  opts = { ...opts,
    locale: mergeDefaultLocale(defaultLocaleStrings, opts.locale)
  };
  const uppy = new Uppy(opts);
  addTransloaditPlugin(uppy, opts);
  uppy.use(TransloaditFormResult, {
    target,
    transloaditPluginId: 'Transloadit',
    name: 'transloadit'
  });
  let submitOnSuccess = true;

  if (has(opts, 'submitOnSuccess')) {
    submitOnSuccess = !!opts.submitOnSuccess;
  }

  const formOptions = {
    target,
    triggerUploadOnSubmit: true,
    submitOnSuccess,
    addResultToForm: false // using custom implementation instead

  };

  if (has(opts, 'triggerUploadOnSubmit')) {
    formOptions.triggerUploadOnSubmit = opts.triggerUploadOnSubmit;
  }

  uppy.use(Form, formOptions);
  const useDashboard = opts.dashboard || opts.modal;

  if (useDashboard) {
    const dashboardTarget = findDOMElement(opts.dashboard) || document.body;
    const dashboardId = 'form:Dashboard';
    const dashboardOpts = {
      id: dashboardId,
      target: dashboardTarget
    };

    if (opts.modal) {
      const trigger = 'input[type="file"]';
      const button = document.createElement('button');
      button.textContent = uppy.i18n('chooseFiles');
      button.type = 'button';
      const old = findDOMElement(trigger, findDOMElement(target));
      old.parentNode.replaceChild(button, old);
      dashboardOpts.inline = false;
      dashboardOpts.trigger = button;
    } else {
      dashboardOpts.inline = true;
      dashboardOpts.hideUploadButton = true;
    }

    addDashboardPlugin(uppy, opts, dashboardOpts);

    if (Array.isArray(opts.providers)) {
      addProviders(uppy, opts.providers, { ...opts,
        target: uppy.getPlugin(dashboardId)
      });
    }
  } else {
    uppy.use(AttachFileInputs, {
      target
    });
  }

  if (opts.statusBar) {
    uppy.use(StatusBar, {
      target: opts.statusBar,
      // hide most of the things to keep our api simple,
      // we can change this in the future if someone needs it
      hideUploadButton: true,
      hideAfterFinish: true,
      hideRetryButton: true,
      hidePauseResumeButtons: true,
      hideCancelButtons: true
    });
  }

  return uppy;
}

module.exports = form;

},{"./../../core":87,"./../../form":120,"./../../status-bar":169,"./../../utils/lib/findDOMElement":197,"./../../utils/lib/hasProperty":212,"./AttachFileInputs":153,"./TransloaditFormResult":154,"./addDashboardPlugin":156,"./addProviders":157,"./addTransloaditPlugin":158}],162:[function(require,module,exports){
"use strict";

const form = require('./form');

const dashboard = require('./dashboard');

const pick = require('./pick');

const upload = require('./upload');

module.exports = {
  dashboard,
  form,
  pick,
  upload,
  VERSION: "2.1.3"
};

},{"./dashboard":160,"./form":161,"./pick":163,"./upload":164}],163:[function(require,module,exports){
"use strict";

const createUppy = require('./createUppy');

const addDashboardPlugin = require('./addDashboardPlugin');

const addTransloaditPlugin = require('./addTransloaditPlugin');

const addProviders = require('./addProviders');

const CANCEL = {};

function pick(opts) {
  if (opts === void 0) {
    opts = {};
  }

  const target = opts.target || document.body;
  const pluginId = 'pick';
  const uppy = createUppy(opts, {
    allowMultipleUploadBatches: false
  });
  addTransloaditPlugin(uppy, opts);
  addDashboardPlugin(uppy, opts, {
    id: pluginId,
    target,
    closeAfterFinish: true
  });

  if (Array.isArray(opts.providers)) {
    addProviders(uppy, opts.providers, { ...opts,
      // Install providers into the Dashboard.
      target: uppy.getPlugin(pluginId)
    });
  }

  return new Promise((resolve, reject) => {
    uppy.on('complete', result => {
      if (result.failed.length === 0) {
        resolve(result);
      }
    });
    uppy.on('error', reject);
    uppy.on('cancel-all', () => reject(CANCEL));
    uppy.getPlugin(pluginId).openModal();
  }).then(result => {
    return result;
  }, err => {
    if (err === CANCEL) {
      uppy.getPlugin(pluginId).requestCloseModal();
      return null;
    }

    throw err;
  });
}

module.exports = pick;

},{"./addDashboardPlugin":156,"./addProviders":157,"./addTransloaditPlugin":158,"./createUppy":159}],164:[function(require,module,exports){
"use strict";

const toArray = require('./../../utils/lib/toArray');

const createUppy = require('./createUppy');

const addTransloaditPlugin = require('./addTransloaditPlugin');

function upload(files, opts) {
  if (opts === void 0) {
    opts = {};
  }

  if (!Array.isArray(files) && typeof files.length === 'number') {
    files = toArray(files);
  }

  const uppy = createUppy(opts, {
    allowMultipleUploads: false
  });
  addTransloaditPlugin(uppy, opts);
  files.forEach(file => {
    uppy.addFile({
      data: file,
      type: file.type,
      name: file.name,
      meta: file.meta || {}
    });
  });
  return uppy.upload();
}

module.exports = upload;

},{"./../../utils/lib/toArray":223,"./addTransloaditPlugin":158,"./createUppy":159}],165:[function(require,module,exports){
"use strict";

const classNames = require('classnames');

const throttle = require('lodash.throttle');

const prettierBytes = require('@transloadit/prettier-bytes');

const prettyETA = require('./../../utils/lib/prettyETA');

const {
  h
} = require('preact');

const statusBarStates = require('./StatusBarStates');

const DOT = `\u00B7`;

const renderDot = () => ` ${DOT} `;

function UploadBtn(props) {
  const {
    newFiles,
    isUploadStarted,
    recoveredState,
    i18n,
    uploadState,
    isSomeGhost,
    startUpload
  } = props;
  const uploadBtnClassNames = classNames('uppy-u-reset', 'uppy-c-btn', 'uppy-StatusBar-actionBtn', 'uppy-StatusBar-actionBtn--upload', {
    'uppy-c-btn-primary': uploadState === statusBarStates.STATE_WAITING
  }, {
    'uppy-StatusBar-actionBtn--disabled': isSomeGhost
  });
  const uploadBtnText = newFiles && isUploadStarted && !recoveredState ? i18n('uploadXNewFiles', {
    smart_count: newFiles
  }) : i18n('uploadXFiles', {
    smart_count: newFiles
  });
  return h("button", {
    type: "button",
    className: uploadBtnClassNames,
    "aria-label": i18n('uploadXFiles', {
      smart_count: newFiles
    }),
    onClick: startUpload,
    disabled: isSomeGhost,
    "data-uppy-super-focusable": true
  }, uploadBtnText);
}

function RetryBtn(props) {
  const {
    i18n,
    uppy
  } = props;
  return h("button", {
    type: "button",
    className: "uppy-u-reset uppy-c-btn uppy-StatusBar-actionBtn uppy-StatusBar-actionBtn--retry",
    "aria-label": i18n('retryUpload'),
    onClick: () => uppy.retryAll(),
    "data-uppy-super-focusable": true
  }, h("svg", {
    "aria-hidden": "true",
    focusable: "false",
    className: "uppy-c-icon",
    width: "8",
    height: "10",
    viewBox: "0 0 8 10"
  }, h("path", {
    d: "M4 2.408a2.75 2.75 0 1 0 2.75 2.75.626.626 0 0 1 1.25.018v.023a4 4 0 1 1-4-4.041V.25a.25.25 0 0 1 .389-.208l2.299 1.533a.25.25 0 0 1 0 .416l-2.3 1.533A.25.25 0 0 1 4 3.316v-.908z"
  })), i18n('retry'));
}

function CancelBtn(props) {
  const {
    i18n,
    uppy
  } = props;
  return h("button", {
    type: "button",
    className: "uppy-u-reset uppy-StatusBar-actionCircleBtn",
    title: i18n('cancel'),
    "aria-label": i18n('cancel'),
    onClick: () => uppy.cancelAll(),
    "data-uppy-super-focusable": true
  }, h("svg", {
    "aria-hidden": "true",
    focusable: "false",
    className: "uppy-c-icon",
    width: "16",
    height: "16",
    viewBox: "0 0 16 16"
  }, h("g", {
    fill: "none",
    fillRule: "evenodd"
  }, h("circle", {
    fill: "#888",
    cx: "8",
    cy: "8",
    r: "8"
  }), h("path", {
    fill: "#FFF",
    d: "M9.283 8l2.567 2.567-1.283 1.283L8 9.283 5.433 11.85 4.15 10.567 6.717 8 4.15 5.433 5.433 4.15 8 6.717l2.567-2.567 1.283 1.283z"
  }))));
}

function PauseResumeButton(props) {
  const {
    isAllPaused,
    i18n,
    isAllComplete,
    resumableUploads,
    uppy
  } = props;
  const title = isAllPaused ? i18n('resume') : i18n('pause');

  function togglePauseResume() {
    if (isAllComplete) return null;

    if (!resumableUploads) {
      return uppy.cancelAll();
    }

    if (isAllPaused) {
      return uppy.resumeAll();
    }

    return uppy.pauseAll();
  }

  return h("button", {
    title: title,
    "aria-label": title,
    className: "uppy-u-reset uppy-StatusBar-actionCircleBtn",
    type: "button",
    onClick: togglePauseResume,
    "data-uppy-super-focusable": true
  }, h("svg", {
    "aria-hidden": "true",
    focusable: "false",
    className: "uppy-c-icon",
    width: "16",
    height: "16",
    viewBox: "0 0 16 16"
  }, h("g", {
    fill: "none",
    fillRule: "evenodd"
  }, h("circle", {
    fill: "#888",
    cx: "8",
    cy: "8",
    r: "8"
  }), h("path", {
    fill: "#FFF",
    d: isAllPaused ? 'M6 4.25L11.5 8 6 11.75z' : 'M5 4.5h2v7H5v-7zm4 0h2v7H9v-7z'
  }))));
}

function DoneBtn(props) {
  const {
    i18n,
    doneButtonHandler
  } = props;
  return h("button", {
    type: "button",
    className: "uppy-u-reset uppy-c-btn uppy-StatusBar-actionBtn uppy-StatusBar-actionBtn--done",
    onClick: doneButtonHandler,
    "data-uppy-super-focusable": true
  }, i18n('done'));
}

function LoadingSpinner() {
  return h("svg", {
    className: "uppy-StatusBar-spinner",
    "aria-hidden": "true",
    focusable: "false",
    width: "14",
    height: "14"
  }, h("path", {
    d: "M13.983 6.547c-.12-2.509-1.64-4.893-3.939-5.936-2.48-1.127-5.488-.656-7.556 1.094C.524 3.367-.398 6.048.162 8.562c.556 2.495 2.46 4.52 4.94 5.183 2.932.784 5.61-.602 7.256-3.015-1.493 1.993-3.745 3.309-6.298 2.868-2.514-.434-4.578-2.349-5.153-4.84a6.226 6.226 0 0 1 2.98-6.778C6.34.586 9.74 1.1 11.373 3.493c.407.596.693 1.282.842 1.988.127.598.073 1.197.161 1.794.078.525.543 1.257 1.15.864.525-.341.49-1.05.456-1.592-.007-.15.02.3 0 0",
    fillRule: "evenodd"
  }));
}

function ProgressBarProcessing(props) {
  const {
    progress
  } = props;
  const {
    value,
    mode,
    message
  } = progress;
  const roundedValue = Math.round(value * 100);
  const dot = `\u00B7`;
  return h("div", {
    className: "uppy-StatusBar-content"
  }, h(LoadingSpinner, null), mode === 'determinate' ? `${roundedValue}% ${dot} ` : '', message);
}

function ProgressDetails(props) {
  const {
    numUploads,
    complete,
    totalUploadedSize,
    totalSize,
    totalETA,
    i18n
  } = props;
  const ifShowFilesUploadedOfTotal = numUploads > 1;
  return h("div", {
    className: "uppy-StatusBar-statusSecondary"
  }, ifShowFilesUploadedOfTotal && i18n('filesUploadedOfTotal', {
    complete,
    smart_count: numUploads
  }), h("span", {
    className: "uppy-StatusBar-additionalInfo"
  }, ifShowFilesUploadedOfTotal && renderDot(), i18n('dataUploadedOfTotal', {
    complete: prettierBytes(totalUploadedSize),
    total: prettierBytes(totalSize)
  }), renderDot(), i18n('xTimeLeft', {
    time: prettyETA(totalETA)
  })));
}

function FileUploadCount(props) {
  const {
    i18n,
    complete,
    numUploads
  } = props;
  return h("div", {
    className: "uppy-StatusBar-statusSecondary"
  }, i18n('filesUploadedOfTotal', {
    complete,
    smart_count: numUploads
  }));
}

function UploadNewlyAddedFiles(props) {
  const {
    i18n,
    newFiles,
    startUpload
  } = props;
  const uploadBtnClassNames = classNames('uppy-u-reset', 'uppy-c-btn', 'uppy-StatusBar-actionBtn', 'uppy-StatusBar-actionBtn--uploadNewlyAdded');
  return h("div", {
    className: "uppy-StatusBar-statusSecondary"
  }, h("div", {
    className: "uppy-StatusBar-statusSecondaryHint"
  }, i18n('xMoreFilesAdded', {
    smart_count: newFiles
  })), h("button", {
    type: "button",
    className: uploadBtnClassNames,
    "aria-label": i18n('uploadXFiles', {
      smart_count: newFiles
    }),
    onClick: startUpload
  }, i18n('upload')));
}

const ThrottledProgressDetails = throttle(ProgressDetails, 500, {
  leading: true,
  trailing: true
});

function ProgressBarUploading(props) {
  const {
    i18n,
    supportsUploadProgress,
    totalProgress,
    showProgressDetails,
    isUploadStarted,
    isAllComplete,
    isAllPaused,
    newFiles,
    numUploads,
    complete,
    totalUploadedSize,
    totalSize,
    totalETA,
    startUpload
  } = props;
  const showUploadNewlyAddedFiles = newFiles && isUploadStarted;

  if (!isUploadStarted || isAllComplete) {
    return null;
  }

  const title = isAllPaused ? i18n('paused') : i18n('uploading');

  function renderProgressDetails() {
    if (!isAllPaused && !showUploadNewlyAddedFiles && showProgressDetails) {
      if (supportsUploadProgress) {
        return h(ThrottledProgressDetails, {
          numUploads: numUploads,
          complete: complete,
          totalUploadedSize: totalUploadedSize,
          totalSize: totalSize,
          totalETA: totalETA,
          i18n: i18n
        });
      }

      return h(FileUploadCount, {
        i18n: i18n,
        complete: complete,
        numUploads: numUploads
      });
    }

    return null;
  }

  return h("div", {
    className: "uppy-StatusBar-content",
    "aria-label": title,
    title: title
  }, !isAllPaused ? h(LoadingSpinner, null) : null, h("div", {
    className: "uppy-StatusBar-status"
  }, h("div", {
    className: "uppy-StatusBar-statusPrimary"
  }, supportsUploadProgress ? `${title}: ${totalProgress}%` : title), renderProgressDetails(), showUploadNewlyAddedFiles ? h(UploadNewlyAddedFiles, {
    i18n: i18n,
    newFiles: newFiles,
    startUpload: startUpload
  }) : null));
}

function ProgressBarComplete(props) {
  const {
    i18n
  } = props;
  return h("div", {
    className: "uppy-StatusBar-content",
    role: "status",
    title: i18n('complete')
  }, h("div", {
    className: "uppy-StatusBar-status"
  }, h("div", {
    className: "uppy-StatusBar-statusPrimary"
  }, h("svg", {
    "aria-hidden": "true",
    focusable: "false",
    className: "uppy-StatusBar-statusIndicator uppy-c-icon",
    width: "15",
    height: "11",
    viewBox: "0 0 15 11"
  }, h("path", {
    d: "M.414 5.843L1.627 4.63l3.472 3.472L13.202 0l1.212 1.213L5.1 10.528z"
  })), i18n('complete'))));
}

function ProgressBarError(props) {
  const {
    error,
    i18n,
    complete,
    numUploads
  } = props;

  function displayErrorAlert() {
    const errorMessage = `${i18n('uploadFailed')} \n\n ${error}`; // eslint-disable-next-line no-alert

    alert(errorMessage); // TODO: move to custom alert implementation
  }

  return h("div", {
    className: "uppy-StatusBar-content",
    title: i18n('uploadFailed')
  }, h("svg", {
    "aria-hidden": "true",
    focusable: "false",
    className: "uppy-StatusBar-statusIndicator uppy-c-icon",
    width: "11",
    height: "11",
    viewBox: "0 0 11 11"
  }, h("path", {
    d: "M4.278 5.5L0 1.222 1.222 0 5.5 4.278 9.778 0 11 1.222 6.722 5.5 11 9.778 9.778 11 5.5 6.722 1.222 11 0 9.778z"
  })), h("div", {
    className: "uppy-StatusBar-status"
  }, h("div", {
    className: "uppy-StatusBar-statusPrimary"
  }, i18n('uploadFailed'), h("button", {
    className: "uppy-u-reset uppy-StatusBar-details",
    "aria-label": i18n('showErrorDetails'),
    "data-microtip-position": "top-right",
    "data-microtip-size": "medium",
    onClick: displayErrorAlert,
    type: "button"
  }, "?")), h(FileUploadCount, {
    i18n: i18n,
    complete: complete,
    numUploads: numUploads
  })));
}

module.exports = {
  UploadBtn,
  RetryBtn,
  CancelBtn,
  PauseResumeButton,
  DoneBtn,
  LoadingSpinner,
  ProgressDetails,
  ProgressBarProcessing,
  ProgressBarError,
  ProgressBarUploading,
  ProgressBarComplete
};

},{"./../../utils/lib/prettyETA":219,"./StatusBarStates":167,"@transloadit/prettier-bytes":2,"classnames":7,"lodash.throttle":24,"preact":35}],166:[function(require,module,exports){
"use strict";

const {
  h
} = require('preact');

const classNames = require('classnames');

const statusBarStates = require('./StatusBarStates');

const calculateProcessingProgress = require('./calculateProcessingProgress');

const {
  UploadBtn,
  RetryBtn,
  CancelBtn,
  PauseResumeButton,
  DoneBtn,
  ProgressBarProcessing,
  ProgressBarError,
  ProgressBarUploading,
  ProgressBarComplete
} = require('./Components');

const {
  STATE_ERROR,
  STATE_WAITING,
  STATE_PREPROCESSING,
  STATE_UPLOADING,
  STATE_POSTPROCESSING,
  STATE_COMPLETE
} = statusBarStates;
module.exports = StatusBar;

function StatusBar(props) {
  const {
    newFiles,
    allowNewUpload,
    isUploadInProgress,
    isAllPaused,
    resumableUploads,
    error,
    hideUploadButton,
    hidePauseResumeButton,
    hideCancelButton,
    hideRetryButton,
    recoveredState,
    uploadState,
    totalProgress,
    files,
    supportsUploadProgress,
    hideAfterFinish,
    isSomeGhost,
    isTargetDOMEl,
    doneButtonHandler,
    isUploadStarted,
    i18n,
    startUpload,
    uppy,
    isAllComplete,
    showProgressDetails,
    numUploads,
    complete,
    totalSize,
    totalETA,
    totalUploadedSize
  } = props;

  function getProgressValue() {
    switch (uploadState) {
      case STATE_POSTPROCESSING:
      case STATE_PREPROCESSING:
        {
          const progress = calculateProcessingProgress(files);

          if (progress.mode === 'determinate') {
            return progress.value * 100;
          }

          return totalProgress;
        }

      case STATE_ERROR:
        {
          return null;
        }

      case STATE_UPLOADING:
        {
          if (!supportsUploadProgress) {
            return null;
          }

          return totalProgress;
        }

      default:
        return totalProgress;
    }
  }

  function getIsIndeterminate() {
    switch (uploadState) {
      case STATE_POSTPROCESSING:
      case STATE_PREPROCESSING:
        {
          const {
            mode
          } = calculateProcessingProgress(files);
          return mode === 'indeterminate';
        }

      case STATE_UPLOADING:
        {
          if (!supportsUploadProgress) {
            return true;
          }

          return false;
        }

      default:
        return false;
    }
  }

  function getIsHidden() {
    if (recoveredState) {
      return false;
    }

    switch (uploadState) {
      case STATE_WAITING:
        return hideUploadButton || newFiles === 0;

      case STATE_COMPLETE:
        return hideAfterFinish;

      default:
        return false;
    }
  }

  const progressValue = getProgressValue();
  const isHidden = getIsHidden();
  const width = progressValue != null ? progressValue : 100;
  const showUploadBtn = !error && newFiles && !isUploadInProgress && !isAllPaused && allowNewUpload && !hideUploadButton;
  const showCancelBtn = !hideCancelButton && uploadState !== STATE_WAITING && uploadState !== STATE_COMPLETE;
  const showPauseResumeBtn = resumableUploads && !hidePauseResumeButton && uploadState === STATE_UPLOADING;
  const showRetryBtn = error && !isAllComplete && !hideRetryButton;
  const showDoneBtn = doneButtonHandler && uploadState === STATE_COMPLETE;
  const progressClassNames = classNames('uppy-StatusBar-progress', {
    'is-indeterminate': getIsIndeterminate()
  });
  const statusBarClassNames = classNames({
    'uppy-Root': isTargetDOMEl
  }, 'uppy-StatusBar', `is-${uploadState}`, {
    'has-ghosts': isSomeGhost
  });
  return h("div", {
    className: statusBarClassNames,
    "aria-hidden": isHidden
  }, h("div", {
    className: progressClassNames,
    style: {
      width: `${width}%`
    },
    role: "progressbar",
    "aria-label": `${width}%`,
    "aria-valuetext": `${width}%`,
    "aria-valuemin": "0",
    "aria-valuemax": "100",
    "aria-valuenow": progressValue
  }), (() => {
    switch (uploadState) {
      case STATE_PREPROCESSING:
      case STATE_POSTPROCESSING:
        return h(ProgressBarProcessing, {
          progress: calculateProcessingProgress(files)
        });

      case STATE_COMPLETE:
        return h(ProgressBarComplete, {
          i18n: i18n
        });

      case STATE_ERROR:
        return h(ProgressBarError, {
          error: error,
          i18n: i18n,
          numUploads: numUploads,
          complete: complete
        });

      case STATE_UPLOADING:
        return h(ProgressBarUploading, {
          i18n: i18n,
          supportsUploadProgress: supportsUploadProgress,
          totalProgress: totalProgress,
          showProgressDetails: showProgressDetails,
          isUploadStarted: isUploadStarted,
          isAllComplete: isAllComplete,
          isAllPaused: isAllPaused,
          newFiles: newFiles,
          numUploads: numUploads,
          complete: complete,
          totalUploadedSize: totalUploadedSize,
          totalSize: totalSize,
          totalETA: totalETA,
          startUpload: startUpload
        });

      default:
        return null;
    }
  })(), h("div", {
    className: "uppy-StatusBar-actions"
  }, recoveredState || showUploadBtn ? h(UploadBtn, {
    newFiles: newFiles,
    isUploadStarted: isUploadStarted,
    recoveredState: recoveredState,
    i18n: i18n,
    isSomeGhost: isSomeGhost,
    startUpload: startUpload,
    uploadState: uploadState
  }) : null, showRetryBtn ? h(RetryBtn, {
    i18n: i18n,
    uppy: uppy
  }) : null, showPauseResumeBtn ? h(PauseResumeButton, {
    isAllPaused: isAllPaused,
    i18n: i18n,
    isAllComplete: isAllComplete,
    resumableUploads: resumableUploads,
    uppy: uppy
  }) : null, showCancelBtn ? h(CancelBtn, {
    i18n: i18n,
    uppy: uppy
  }) : null, showDoneBtn ? h(DoneBtn, {
    i18n: i18n,
    doneButtonHandler: doneButtonHandler
  }) : null));
}

},{"./Components":165,"./StatusBarStates":167,"./calculateProcessingProgress":168,"classnames":7,"preact":35}],167:[function(require,module,exports){
"use strict";

module.exports = {
  STATE_ERROR: 'error',
  STATE_WAITING: 'waiting',
  STATE_PREPROCESSING: 'preprocessing',
  STATE_UPLOADING: 'uploading',
  STATE_POSTPROCESSING: 'postprocessing',
  STATE_COMPLETE: 'complete'
};

},{}],168:[function(require,module,exports){
"use strict";

module.exports = function calculateProcessingProgress(files) {
  const values = [];
  let mode;
  let message;

  for (const {
    progress
  } of Object.values(files)) {
    const {
      preprocess,
      postprocess
    } = progress; // In the future we should probably do this differently. For now we'll take the
    // mode and message from the first file…

    if (message == null && (preprocess || postprocess)) {
      ({
        mode,
        message
      } = preprocess || postprocess);
    }

    if ((preprocess == null ? void 0 : preprocess.mode) === 'determinate') values.push(preprocess.value);
    if ((postprocess == null ? void 0 : postprocess.mode) === 'determinate') values.push(postprocess.value);
  }

  const value = values.reduce((total, progressValue) => {
    return total + progressValue / values.length;
  }, 0);
  return {
    mode,
    message,
    value
  };
};

},{}],169:[function(require,module,exports){
"use strict";

var _class, _temp;

const {
  UIPlugin
} = require('./../../core');

const getSpeed = require('./../../utils/lib/getSpeed');

const getBytesRemaining = require('./../../utils/lib/getBytesRemaining');

const getTextDirection = require('./../../utils/lib/getTextDirection');

const statusBarStates = require('./StatusBarStates');

const StatusBarUI = require('./StatusBar');

const locale = require('./locale.js');
/**
 * StatusBar: renders a status bar with upload/pause/resume/cancel/retry buttons,
 * progress percentage and time remaining.
 */


module.exports = (_temp = _class = class StatusBar extends UIPlugin {
  // eslint-disable-next-line global-require
  constructor(uppy, opts) {
    super(uppy, opts);

    this.startUpload = () => {
      const {
        recoveredState
      } = this.uppy.getState();

      if (recoveredState) {
        this.uppy.emit('restore-confirmed');
        return undefined;
      }

      return this.uppy.upload().catch(() => {// Error logged in Core
      });
    };

    this.id = this.opts.id || 'StatusBar';
    this.title = 'StatusBar';
    this.type = 'progressindicator';
    this.defaultLocale = locale; // set default options

    const defaultOptions = {
      target: 'body',
      hideUploadButton: false,
      hideRetryButton: false,
      hidePauseResumeButton: false,
      hideCancelButton: false,
      showProgressDetails: false,
      hideAfterFinish: true,
      doneButtonHandler: null
    };
    this.opts = { ...defaultOptions,
      ...opts
    };
    this.i18nInit();
    this.render = this.render.bind(this);
    this.install = this.install.bind(this);
  }

  render(state) {
    const {
      capabilities,
      files,
      allowNewUpload,
      totalProgress,
      error,
      recoveredState
    } = state;
    const {
      newFiles,
      startedFiles,
      completeFiles,
      inProgressNotPausedFiles,
      isUploadStarted,
      isAllComplete,
      isAllErrored,
      isAllPaused,
      isUploadInProgress,
      isSomeGhost
    } = this.uppy.getObjectOfFilesPerState(); // If some state was recovered, we want to show Upload button/counter
    // for all the files, because in this case it’s not an Upload button,
    // but “Confirm Restore Button”

    const newFilesOrRecovered = recoveredState ? Object.values(files) : newFiles;
    const totalETA = getTotalETA(inProgressNotPausedFiles);
    const resumableUploads = !!capabilities.resumableUploads;
    const supportsUploadProgress = capabilities.uploadProgress !== false;
    let totalSize = 0;
    let totalUploadedSize = 0;
    startedFiles.forEach(file => {
      totalSize += file.progress.bytesTotal || 0;
      totalUploadedSize += file.progress.bytesUploaded || 0;
    });
    return StatusBarUI({
      error,
      uploadState: getUploadingState(error, isAllComplete, recoveredState, state.files || {}),
      allowNewUpload,
      totalProgress,
      totalSize,
      totalUploadedSize,
      isAllComplete: false,
      isAllPaused,
      isAllErrored,
      isUploadStarted,
      isUploadInProgress,
      isSomeGhost,
      recoveredState,
      complete: completeFiles.length,
      newFiles: newFilesOrRecovered.length,
      numUploads: startedFiles.length,
      totalETA,
      files,
      i18n: this.i18n,
      uppy: this.uppy,
      startUpload: this.startUpload,
      doneButtonHandler: this.opts.doneButtonHandler,
      resumableUploads,
      supportsUploadProgress,
      showProgressDetails: this.opts.showProgressDetails,
      hideUploadButton: this.opts.hideUploadButton,
      hideRetryButton: this.opts.hideRetryButton,
      hidePauseResumeButton: this.opts.hidePauseResumeButton,
      hideCancelButton: this.opts.hideCancelButton,
      hideAfterFinish: this.opts.hideAfterFinish,
      isTargetDOMEl: this.isTargetDOMEl
    });
  }

  onMount() {
    // Set the text direction if the page has not defined one.
    const element = this.el;
    const direction = getTextDirection(element);

    if (!direction) {
      element.dir = 'ltr';
    }
  }

  install() {
    const {
      target
    } = this.opts;

    if (target) {
      this.mount(target, this);
    }
  }

  uninstall() {
    this.unmount();
  }

}, _class.VERSION = "2.1.1", _temp);

function getTotalSpeed(files) {
  let totalSpeed = 0;
  files.forEach(file => {
    totalSpeed += getSpeed(file.progress);
  });
  return totalSpeed;
}

function getTotalETA(files) {
  const totalSpeed = getTotalSpeed(files);

  if (totalSpeed === 0) {
    return 0;
  }

  const totalBytesRemaining = files.reduce((total, file) => {
    return total + getBytesRemaining(file.progress);
  }, 0);
  return Math.round(totalBytesRemaining / totalSpeed * 10) / 10;
}

function getUploadingState(error, isAllComplete, recoveredState, files) {
  if (error && !isAllComplete) {
    return statusBarStates.STATE_ERROR;
  }

  if (isAllComplete) {
    return statusBarStates.STATE_COMPLETE;
  }

  if (recoveredState) {
    return statusBarStates.STATE_WAITING;
  }

  let state = statusBarStates.STATE_WAITING;
  const fileIDs = Object.keys(files);

  for (let i = 0; i < fileIDs.length; i++) {
    const {
      progress
    } = files[fileIDs[i]]; // If ANY files are being uploaded right now, show the uploading state.

    if (progress.uploadStarted && !progress.uploadComplete) {
      return statusBarStates.STATE_UPLOADING;
    } // If files are being preprocessed AND postprocessed at this time, we show the
    // preprocess state. If any files are being uploaded we show uploading.


    if (progress.preprocess && state !== statusBarStates.STATE_UPLOADING) {
      state = statusBarStates.STATE_PREPROCESSING;
    } // If NO files are being preprocessed or uploaded right now, but some files are
    // being postprocessed, show the postprocess state.


    if (progress.postprocess && state !== statusBarStates.STATE_UPLOADING && state !== statusBarStates.STATE_PREPROCESSING) {
      state = statusBarStates.STATE_POSTPROCESSING;
    }
  }

  return state;
}

},{"./../../core":87,"./../../utils/lib/getBytesRemaining":199,"./../../utils/lib/getSpeed":209,"./../../utils/lib/getTextDirection":210,"./StatusBar":166,"./StatusBarStates":167,"./locale.js":170}],170:[function(require,module,exports){
"use strict";

module.exports = {
  strings: {
    // Shown in the status bar while files are being uploaded.
    uploading: 'Uploading',
    // Shown in the status bar once all files have been uploaded.
    complete: 'Complete',
    // Shown in the status bar if an upload failed.
    uploadFailed: 'Upload failed',
    // Shown in the status bar while the upload is paused.
    paused: 'Paused',
    // Used as the label for the button that retries an upload.
    retry: 'Retry',
    // Used as the label for the button that cancels an upload.
    cancel: 'Cancel',
    // Used as the label for the button that pauses an upload.
    pause: 'Pause',
    // Used as the label for the button that resumes an upload.
    resume: 'Resume',
    // Used as the label for the button that resets the upload state after an upload
    done: 'Done',
    // When `showProgressDetails` is set, shows the number of files that have been fully uploaded so far.
    filesUploadedOfTotal: {
      0: '%{complete} of %{smart_count} file uploaded',
      1: '%{complete} of %{smart_count} files uploaded'
    },
    // When `showProgressDetails` is set, shows the amount of bytes that have been uploaded so far.
    dataUploadedOfTotal: '%{complete} of %{total}',
    // When `showProgressDetails` is set, shows an estimation of how long the upload will take to complete.
    xTimeLeft: '%{time} left',
    // Used as the label for the button that starts an upload.
    uploadXFiles: {
      0: 'Upload %{smart_count} file',
      1: 'Upload %{smart_count} files'
    },
    // Used as the label for the button that starts an upload, if another upload has been started in the past
    // and new files were added later.
    uploadXNewFiles: {
      0: 'Upload +%{smart_count} file',
      1: 'Upload +%{smart_count} files'
    },
    upload: 'Upload',
    retryUpload: 'Retry upload',
    xMoreFilesAdded: {
      0: '%{smart_count} more file added',
      1: '%{smart_count} more files added'
    },
    showErrorDetails: 'Show error details'
  }
};

},{}],171:[function(require,module,exports){
"use strict";

function _classPrivateFieldLooseBase(receiver, privateKey) { if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) { throw new TypeError("attempted to use private field on non-instance"); } return receiver; }

var id = 0;

function _classPrivateFieldLooseKey(name) { return "__private_" + id++ + "_" + name; }

var _publish = /*#__PURE__*/_classPrivateFieldLooseKey("publish");

/**
 * Default store that keeps state in a simple object.
 */
class DefaultStore {
  constructor() {
    Object.defineProperty(this, _publish, {
      value: _publish2
    });
    this.state = {};
    this.callbacks = [];
  }

  getState() {
    return this.state;
  }

  setState(patch) {
    const prevState = { ...this.state
    };
    const nextState = { ...this.state,
      ...patch
    };
    this.state = nextState;

    _classPrivateFieldLooseBase(this, _publish)[_publish](prevState, nextState, patch);
  }

  subscribe(listener) {
    this.callbacks.push(listener);
    return () => {
      // Remove the listener.
      this.callbacks.splice(this.callbacks.indexOf(listener), 1);
    };
  }

}

function _publish2() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  this.callbacks.forEach(listener => {
    listener(...args);
  });
}

DefaultStore.VERSION = "2.0.2";

module.exports = function defaultStore() {
  return new DefaultStore();
};

},{}],172:[function(require,module,exports){
"use strict";

var _class, _temp;

const {
  UIPlugin
} = require('./../../core');

const dataURItoBlob = require('./../../utils/lib/dataURItoBlob');

const isObjectURL = require('./../../utils/lib/isObjectURL');

const isPreviewSupported = require('./../../utils/lib/isPreviewSupported');

const exifr = require('exifr/dist/mini.legacy.umd.js');

const locale = require('./locale');
/**
 * The Thumbnail Generator plugin
 */


module.exports = (_temp = _class = class ThumbnailGenerator extends UIPlugin {
  constructor(uppy, opts) {
    super(uppy, opts);

    this.onFileAdded = file => {
      if (!file.preview && file.data && isPreviewSupported(file.type) && !file.isRemote) {
        this.addToQueue(file.id);
      }
    };

    this.onCancelRequest = file => {
      const index = this.queue.indexOf(file.id);

      if (index !== -1) {
        this.queue.splice(index, 1);
      }
    };

    this.onFileRemoved = file => {
      const index = this.queue.indexOf(file.id);

      if (index !== -1) {
        this.queue.splice(index, 1);
      } // Clean up object URLs.


      if (file.preview && isObjectURL(file.preview)) {
        URL.revokeObjectURL(file.preview);
      }
    };

    this.onRestored = () => {
      const restoredFiles = this.uppy.getFiles().filter(file => file.isRestored);
      restoredFiles.forEach(file => {
        // Only add blob URLs; they are likely invalid after being restored.
        if (!file.preview || isObjectURL(file.preview)) {
          this.addToQueue(file.id);
        }
      });
    };

    this.waitUntilAllProcessed = fileIDs => {
      fileIDs.forEach(fileID => {
        const file = this.uppy.getFile(fileID);
        this.uppy.emit('preprocess-progress', file, {
          mode: 'indeterminate',
          message: this.i18n('generatingThumbnails')
        });
      });

      const emitPreprocessCompleteForAll = () => {
        fileIDs.forEach(fileID => {
          const file = this.uppy.getFile(fileID);
          this.uppy.emit('preprocess-complete', file);
        });
      };

      return new Promise(resolve => {
        if (this.queueProcessing) {
          this.uppy.once('thumbnail:all-generated', () => {
            emitPreprocessCompleteForAll();
            resolve();
          });
        } else {
          emitPreprocessCompleteForAll();
          resolve();
        }
      });
    };

    this.type = 'modifier';
    this.id = this.opts.id || 'ThumbnailGenerator';
    this.title = 'Thumbnail Generator';
    this.queue = [];
    this.queueProcessing = false;
    this.defaultThumbnailDimension = 200;
    this.thumbnailType = this.opts.thumbnailType || 'image/jpeg';
    this.defaultLocale = locale;
    const defaultOptions = {
      thumbnailWidth: null,
      thumbnailHeight: null,
      waitForThumbnailsBeforeUpload: false,
      lazy: false
    };
    this.opts = { ...defaultOptions,
      ...opts
    };
    this.i18nInit();

    if (this.opts.lazy && this.opts.waitForThumbnailsBeforeUpload) {
      throw new Error('ThumbnailGenerator: The `lazy` and `waitForThumbnailsBeforeUpload` options are mutually exclusive. Please ensure at most one of them is set to `true`.');
    }
  }
  /**
   * Create a thumbnail for the given Uppy file object.
   *
   * @param {{data: Blob}} file
   * @param {number} targetWidth
   * @param {number} targetHeight
   * @returns {Promise}
   */


  createThumbnail(file, targetWidth, targetHeight) {
    const originalUrl = URL.createObjectURL(file.data);
    const onload = new Promise((resolve, reject) => {
      const image = new Image();
      image.src = originalUrl;
      image.addEventListener('load', () => {
        URL.revokeObjectURL(originalUrl);
        resolve(image);
      });
      image.addEventListener('error', event => {
        URL.revokeObjectURL(originalUrl);
        reject(event.error || new Error('Could not create thumbnail'));
      });
    });
    const orientationPromise = exifr.rotation(file.data).catch(() => 1);
    return Promise.all([onload, orientationPromise]).then(_ref => {
      let [image, orientation] = _ref;
      const dimensions = this.getProportionalDimensions(image, targetWidth, targetHeight, orientation.deg);
      const rotatedImage = this.rotateImage(image, orientation);
      const resizedImage = this.resizeImage(rotatedImage, dimensions.width, dimensions.height);
      return this.canvasToBlob(resizedImage, this.thumbnailType, 80);
    }).then(blob => {
      return URL.createObjectURL(blob);
    });
  }
  /**
   * Get the new calculated dimensions for the given image and a target width
   * or height. If both width and height are given, only width is taken into
   * account. If neither width nor height are given, the default dimension
   * is used.
   */


  getProportionalDimensions(img, width, height, rotation) {
    let aspect = img.width / img.height;

    if (rotation === 90 || rotation === 270) {
      aspect = img.height / img.width;
    }

    if (width != null) {
      return {
        width,
        height: Math.round(width / aspect)
      };
    }

    if (height != null) {
      return {
        width: Math.round(height * aspect),
        height
      };
    }

    return {
      width: this.defaultThumbnailDimension,
      height: Math.round(this.defaultThumbnailDimension / aspect)
    };
  }
  /**
   * Make sure the image doesn’t exceed browser/device canvas limits.
   * For ios with 256 RAM and ie
   */


  protect(image) {
    // https://stackoverflow.com/questions/6081483/maximum-size-of-a-canvas-element
    const ratio = image.width / image.height;
    const maxSquare = 5000000; // ios max canvas square

    const maxSize = 4096; // ie max canvas dimensions

    let maxW = Math.floor(Math.sqrt(maxSquare * ratio));
    let maxH = Math.floor(maxSquare / Math.sqrt(maxSquare * ratio));

    if (maxW > maxSize) {
      maxW = maxSize;
      maxH = Math.round(maxW / ratio);
    }

    if (maxH > maxSize) {
      maxH = maxSize;
      maxW = Math.round(ratio * maxH);
    }

    if (image.width > maxW) {
      const canvas = document.createElement('canvas');
      canvas.width = maxW;
      canvas.height = maxH;
      canvas.getContext('2d').drawImage(image, 0, 0, maxW, maxH);
      image = canvas;
    }

    return image;
  }
  /**
   * Resize an image to the target `width` and `height`.
   *
   * Returns a Canvas with the resized image on it.
   */


  resizeImage(image, targetWidth, targetHeight) {
    // Resizing in steps refactored to use a solution from
    // https://blog.uploadcare.com/image-resize-in-browsers-is-broken-e38eed08df01
    image = this.protect(image);
    let steps = Math.ceil(Math.log2(image.width / targetWidth));

    if (steps < 1) {
      steps = 1;
    }

    let sW = targetWidth * 2 ** (steps - 1);
    let sH = targetHeight * 2 ** (steps - 1);
    const x = 2;

    while (steps--) {
      const canvas = document.createElement('canvas');
      canvas.width = sW;
      canvas.height = sH;
      canvas.getContext('2d').drawImage(image, 0, 0, sW, sH);
      image = canvas;
      sW = Math.round(sW / x);
      sH = Math.round(sH / x);
    }

    return image;
  }

  rotateImage(image, translate) {
    let w = image.width;
    let h = image.height;

    if (translate.deg === 90 || translate.deg === 270) {
      w = image.height;
      h = image.width;
    }

    const canvas = document.createElement('canvas');
    canvas.width = w;
    canvas.height = h;
    const context = canvas.getContext('2d');
    context.translate(w / 2, h / 2);

    if (translate.canvas) {
      context.rotate(translate.rad);
      context.scale(translate.scaleX, translate.scaleY);
    }

    context.drawImage(image, -image.width / 2, -image.height / 2, image.width, image.height);
    return canvas;
  }
  /**
   * Save a <canvas> element's content to a Blob object.
   *
   * @param {HTMLCanvasElement} canvas
   * @returns {Promise}
   */


  canvasToBlob(canvas, type, quality) {
    try {
      canvas.getContext('2d').getImageData(0, 0, 1, 1);
    } catch (err) {
      if (err.code === 18) {
        return Promise.reject(new Error('cannot read image, probably an svg with external resources'));
      }
    }

    if (canvas.toBlob) {
      return new Promise(resolve => {
        canvas.toBlob(resolve, type, quality);
      }).then(blob => {
        if (blob === null) {
          throw new Error('cannot read image, probably an svg with external resources');
        }

        return blob;
      });
    }

    return Promise.resolve().then(() => {
      return dataURItoBlob(canvas.toDataURL(type, quality), {});
    }).then(blob => {
      if (blob === null) {
        throw new Error('could not extract blob, probably an old browser');
      }

      return blob;
    });
  }
  /**
   * Set the preview URL for a file.
   */


  setPreviewURL(fileID, preview) {
    this.uppy.setFileState(fileID, {
      preview
    });
  }

  addToQueue(item) {
    this.queue.push(item);

    if (this.queueProcessing === false) {
      this.processQueue();
    }
  }

  processQueue() {
    this.queueProcessing = true;

    if (this.queue.length > 0) {
      const current = this.uppy.getFile(this.queue.shift());

      if (!current) {
        this.uppy.log('[ThumbnailGenerator] file was removed before a thumbnail could be generated, but not removed from the queue. This is probably a bug', 'error');
        return;
      }

      return this.requestThumbnail(current).catch(() => {}) // eslint-disable-line node/handle-callback-err
      .then(() => this.processQueue());
    }

    this.queueProcessing = false;
    this.uppy.log('[ThumbnailGenerator] Emptied thumbnail queue');
    this.uppy.emit('thumbnail:all-generated');
  }

  requestThumbnail(file) {
    if (isPreviewSupported(file.type) && !file.isRemote) {
      return this.createThumbnail(file, this.opts.thumbnailWidth, this.opts.thumbnailHeight).then(preview => {
        this.setPreviewURL(file.id, preview);
        this.uppy.log(`[ThumbnailGenerator] Generated thumbnail for ${file.id}`);
        this.uppy.emit('thumbnail:generated', this.uppy.getFile(file.id), preview);
      }).catch(err => {
        this.uppy.log(`[ThumbnailGenerator] Failed thumbnail for ${file.id}:`, 'warning');
        this.uppy.log(err, 'warning');
        this.uppy.emit('thumbnail:error', this.uppy.getFile(file.id), err);
      });
    }

    return Promise.resolve();
  }

  install() {
    this.uppy.on('file-removed', this.onFileRemoved);

    if (this.opts.lazy) {
      this.uppy.on('thumbnail:request', this.onFileAdded);
      this.uppy.on('thumbnail:cancel', this.onCancelRequest);
    } else {
      this.uppy.on('file-added', this.onFileAdded);
      this.uppy.on('restored', this.onRestored);
    }

    if (this.opts.waitForThumbnailsBeforeUpload) {
      this.uppy.addPreProcessor(this.waitUntilAllProcessed);
    }
  }

  uninstall() {
    this.uppy.off('file-removed', this.onFileRemoved);

    if (this.opts.lazy) {
      this.uppy.off('thumbnail:request', this.onFileAdded);
      this.uppy.off('thumbnail:cancel', this.onCancelRequest);
    } else {
      this.uppy.off('file-added', this.onFileAdded);
      this.uppy.off('restored', this.onRestored);
    }

    if (this.opts.waitForThumbnailsBeforeUpload) {
      this.uppy.removePreProcessor(this.waitUntilAllProcessed);
    }
  }

}, _class.VERSION = "2.0.5", _temp);

},{"./../../core":87,"./../../utils/lib/dataURItoBlob":193,"./../../utils/lib/isObjectURL":216,"./../../utils/lib/isPreviewSupported":217,"./locale":173,"exifr/dist/mini.legacy.umd.js":16}],173:[function(require,module,exports){
"use strict";

module.exports = {
  strings: {
    generatingThumbnails: 'Generating thumbnails...'
  }
};

},{}],174:[function(require,module,exports){
"use strict";

function _classPrivateFieldLooseBase(receiver, privateKey) { if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) { throw new TypeError("attempted to use private field on non-instance"); } return receiver; }

var id = 0;

function _classPrivateFieldLooseKey(name) { return "__private_" + id++ + "_" + name; }

const Emitter = require('component-emitter');

const has = require('./../../utils/lib/hasProperty');

const NetworkError = require('./../../utils/lib/NetworkError');

const fetchWithNetworkError = require('./../../utils/lib/fetchWithNetworkError');

const parseUrl = require('./parseUrl'); // Lazy load socket.io to avoid a console error
// in IE 10 when the Transloadit plugin is not used.
// (The console.error call comes from `buffer`. I
// think we actually don't use that part of socket.io
// at all…)


let socketIo;

function requireSocketIo() {
  var _socketIo;

  // eslint-disable-next-line global-require
  (_socketIo = socketIo) != null ? _socketIo : socketIo = require('socket.io-client');
  return socketIo;
}

const ASSEMBLY_UPLOADING = 'ASSEMBLY_UPLOADING';
const ASSEMBLY_EXECUTING = 'ASSEMBLY_EXECUTING';
const ASSEMBLY_COMPLETED = 'ASSEMBLY_COMPLETED';
const statusOrder = [ASSEMBLY_UPLOADING, ASSEMBLY_EXECUTING, ASSEMBLY_COMPLETED];
/**
 * Check that an assembly status is equal to or larger than some desired status.
 * It checks for things that are larger so that a comparison like this works,
 * when the old assembly status is UPLOADING but the new is FINISHED:
 *
 * !isStatus(oldStatus, ASSEMBLY_EXECUTING) && isStatus(newState, ASSEMBLY_EXECUTING)
 *
 * …so that we can emit the 'executing' event even if the execution step was so
 * fast that we missed it.
 */

function isStatus(status, test) {
  return statusOrder.indexOf(status) >= statusOrder.indexOf(test);
}

var _onFinished = /*#__PURE__*/_classPrivateFieldLooseKey("onFinished");

var _connectSocket = /*#__PURE__*/_classPrivateFieldLooseKey("connectSocket");

var _onError = /*#__PURE__*/_classPrivateFieldLooseKey("onError");

var _beginPolling = /*#__PURE__*/_classPrivateFieldLooseKey("beginPolling");

var _fetchStatus = /*#__PURE__*/_classPrivateFieldLooseKey("fetchStatus");

var _diffStatus = /*#__PURE__*/_classPrivateFieldLooseKey("diffStatus");

class TransloaditAssembly extends Emitter {
  constructor(assembly) {
    super(); // The current assembly status.

    Object.defineProperty(this, _diffStatus, {
      value: _diffStatus2
    });
    Object.defineProperty(this, _fetchStatus, {
      value: _fetchStatus2
    });
    Object.defineProperty(this, _beginPolling, {
      value: _beginPolling2
    });
    Object.defineProperty(this, _onError, {
      value: _onError2
    });
    Object.defineProperty(this, _connectSocket, {
      value: _connectSocket2
    });
    Object.defineProperty(this, _onFinished, {
      value: _onFinished2
    });
    this.status = assembly; // The socket.io connection.

    this.socket = null; // The interval timer for full status updates.

    this.pollInterval = null; // Whether this assembly has been closed (finished or errored)

    this.closed = false;
  }

  connect() {
    _classPrivateFieldLooseBase(this, _connectSocket)[_connectSocket]();

    _classPrivateFieldLooseBase(this, _beginPolling)[_beginPolling]();
  }

  update() {
    return _classPrivateFieldLooseBase(this, _fetchStatus)[_fetchStatus]({
      diff: true
    });
  }
  /**
   * Update this assembly's status with a full new object. Events will be
   * emitted for status changes, new files, and new results.
   *
   * @param {object} next The new assembly status object.
   */


  updateStatus(next) {
    _classPrivateFieldLooseBase(this, _diffStatus)[_diffStatus](this.status, next);

    this.status = next;
  }
  /**
   * Diff two assembly statuses, and emit the events necessary to go from `prev`
   * to `next`.
   *
   * @param {object} prev The previous assembly status.
   * @param {object} next The new assembly status.
   */


  /**
   * Stop updating this assembly.
   */
  close() {
    this.closed = true;

    if (this.socket) {
      this.socket.disconnect();
      this.socket = null;
    }

    clearInterval(this.pollInterval);
  }

}

function _onFinished2() {
  this.emit('finished');
  this.close();
}

function _connectSocket2() {
  const parsed = parseUrl(this.status.websocket_url);
  const socket = requireSocketIo().connect(parsed.origin, {
    transports: ['websocket'],
    path: parsed.pathname
  });
  socket.on('connect', () => {
    socket.emit('assembly_connect', {
      id: this.status.assembly_id
    });
    this.emit('connect');
  });
  socket.on('connect_failed', () => {
    _classPrivateFieldLooseBase(this, _onError)[_onError](new NetworkError('Transloadit Socket.io connection error'));

    this.socket = null;
  });
  socket.on('connect_error', () => {
    socket.disconnect();
    this.socket = null;
  });
  socket.on('assembly_finished', () => {
    _classPrivateFieldLooseBase(this, _onFinished)[_onFinished]();
  });
  socket.on('assembly_upload_finished', file => {
    this.emit('upload', file);
    this.status.uploads.push(file);
  });
  socket.on('assembly_uploading_finished', () => {
    this.emit('executing');
  });
  socket.on('assembly_upload_meta_data_extracted', () => {
    this.emit('metadata');

    _classPrivateFieldLooseBase(this, _fetchStatus)[_fetchStatus]({
      diff: false
    });
  });
  socket.on('assembly_result_finished', (stepName, result) => {
    this.emit('result', stepName, result);

    if (!this.status.results[stepName]) {
      this.status.results[stepName] = [];
    }

    this.status.results[stepName].push(result);
  });
  socket.on('assembly_error', err => {
    _classPrivateFieldLooseBase(this, _onError)[_onError](err); // Refetch for updated status code


    _classPrivateFieldLooseBase(this, _fetchStatus)[_fetchStatus]({
      diff: false
    });
  });
  this.socket = socket;
}

function _onError2(err) {
  this.emit('error', Object.assign(new Error(err.message), err));
}

function _beginPolling2() {
  this.pollInterval = setInterval(() => {
    if (!this.socket || !this.socket.connected) {
      _classPrivateFieldLooseBase(this, _fetchStatus)[_fetchStatus]();
    }
  }, 2000);
}

function _fetchStatus2(_temp) {
  let {
    diff = true
  } = _temp === void 0 ? {} : _temp;
  return fetchWithNetworkError(this.status.assembly_ssl_url).then(response => response.json()).then(status => {
    // Avoid updating if we closed during this request's lifetime.
    if (this.closed) return;
    this.emit('status', status);

    if (diff) {
      this.updateStatus(status);
    } else {
      this.status = status;
    }
  }).catch(err => _classPrivateFieldLooseBase(this, _onError)[_onError](err));
}

function _diffStatus2(prev, next) {
  const prevStatus = prev.ok;
  const nextStatus = next.ok;

  if (next.error && !prev.error) {
    return _classPrivateFieldLooseBase(this, _onError)[_onError](next);
  } // Desired emit order:
  //  - executing
  //  - (n × upload)
  //  - metadata
  //  - (m × result)
  //  - finished
  // The below checks run in this order, that way even if we jump from
  // UPLOADING straight to FINISHED all the events are emitted as expected.


  const nowExecuting = isStatus(nextStatus, ASSEMBLY_EXECUTING) && !isStatus(prevStatus, ASSEMBLY_EXECUTING);

  if (nowExecuting) {
    // Without WebSockets, this is our only way to tell if uploading finished.
    // Hence, we emit this just before the 'upload's and before the 'metadata'
    // event for the most intuitive ordering, corresponding to the _usual_
    // ordering (if not guaranteed) that you'd get on the WebSocket.
    this.emit('executing');
  } // Find new uploaded files.


  Object.keys(next.uploads).filter(upload => !has(prev.uploads, upload)).forEach(upload => {
    this.emit('upload', next.uploads[upload]);
  });

  if (nowExecuting) {
    this.emit('metadata');
  } // Find new results.


  Object.keys(next.results).forEach(stepName => {
    const nextResults = next.results[stepName];
    const prevResults = prev.results[stepName];
    nextResults.filter(n => !prevResults || !prevResults.some(p => p.id === n.id)).forEach(result => {
      this.emit('result', stepName, result);
    });
  });

  if (isStatus(nextStatus, ASSEMBLY_COMPLETED) && !isStatus(prevStatus, ASSEMBLY_COMPLETED)) {
    this.emit('finished');
  }

  return undefined;
}

module.exports = TransloaditAssembly;

},{"./../../utils/lib/NetworkError":189,"./../../utils/lib/fetchWithNetworkError":195,"./../../utils/lib/hasProperty":212,"./parseUrl":180,"component-emitter":8,"socket.io-client":41}],175:[function(require,module,exports){
"use strict";

function _classPrivateFieldLooseBase(receiver, privateKey) { if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) { throw new TypeError("attempted to use private field on non-instance"); } return receiver; }

var id = 0;

function _classPrivateFieldLooseKey(name) { return "__private_" + id++ + "_" + name; }

/**
 * Check that Assembly parameters are present and include all required fields.
 */
function validateParams(params) {
  if (params == null) {
    throw new Error('Transloadit: The `params` option is required.');
  }

  if (typeof params === 'string') {
    try {
      // eslint-disable-next-line no-param-reassign
      params = JSON.parse(params);
    } catch (err) {
      // Tell the user that this is not an Uppy bug!
      const error = new Error('Transloadit: The `params` option is a malformed JSON string.');
      err.cause = err;
      throw error;
    }
  }

  if (!params.auth || !params.auth.key) {
    throw new Error('Transloadit: The `params.auth.key` option is required. ' + 'You can find your Transloadit API key at https://transloadit.com/c/template-credentials');
  }
}
/**
 * Combine Assemblies with the same options into a single Assembly for all the
 * relevant files.
 */


function dedupe(list) {
  const dedupeMap = Object.create(null);

  for (const {
    fileIDs,
    options
  } of list) {
    const id = JSON.stringify(options);

    if (id in dedupeMap) {
      dedupeMap[id].fileIDArrays.push(fileIDs);
    } else {
      dedupeMap[id] = {
        options,
        fileIDArrays: [fileIDs]
      };
    }
  }

  return Object.values(dedupeMap).map(_ref => {
    let {
      options,
      fileIDArrays
    } = _ref;
    return {
      options,
      fileIDs: fileIDArrays.flat(1)
    };
  });
}
/**
 * Turn Transloadit plugin options and a list of files into a list of Assembly
 * options.
 */


var _getAssemblyOptions = /*#__PURE__*/_classPrivateFieldLooseKey("getAssemblyOptions");

class AssemblyOptions {
  constructor(files, opts) {
    Object.defineProperty(this, _getAssemblyOptions, {
      value: _getAssemblyOptions2
    });
    this.files = files;
    this.opts = opts;
  }
  /**
   * Get Assembly options for a file.
   */


  /**
   * Generate a set of Assemblies that will handle the upload.
   * Returns a Promise for an object with keys:
   *  - fileIDs - an array of file IDs to add to this Assembly
   *  - options - Assembly options
   */
  async build() {
    const options = this.opts;

    if (this.files.length > 0) {
      return Promise.all(this.files.map(file => _classPrivateFieldLooseBase(this, _getAssemblyOptions)[_getAssemblyOptions](file))).then(dedupe);
    }

    if (options.alwaysRunAssembly) {
      // No files, just generate one Assembly
      const assemblyOptions = await options.getAssemblyOptions(null, options);
      validateParams(assemblyOptions.params);
      return [{
        fileIDs: this.files.map(file => file.id),
        options: assemblyOptions
      }];
    } // If there are no files and we do not `alwaysRunAssembly`,
    // don't do anything.


    return [];
  }

}

async function _getAssemblyOptions2(file) {
  const options = this.opts;
  const assemblyOptions = await options.getAssemblyOptions(file, options);

  if (Array.isArray(assemblyOptions.fields)) {
    assemblyOptions.fields = Object.fromEntries(assemblyOptions.fields.map(fieldName => [fieldName, file.meta[fieldName]]));
  } else if (assemblyOptions.fields == null) {
    assemblyOptions.fields = {};
  }

  validateParams(assemblyOptions.params);
  return {
    fileIDs: [file.id],
    options: assemblyOptions
  };
}

module.exports = AssemblyOptions;
module.exports.validateParams = validateParams;

},{}],176:[function(require,module,exports){
"use strict";

function _classPrivateFieldLooseBase(receiver, privateKey) { if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) { throw new TypeError("attempted to use private field on non-instance"); } return receiver; }

var id = 0;

function _classPrivateFieldLooseKey(name) { return "__private_" + id++ + "_" + name; }

const Emitter = require('component-emitter');
/**
 * Track completion of multiple assemblies.
 *
 * Emits 'assembly-complete' when an assembly completes.
 * Emits 'assembly-error' when an assembly fails.
 * Exposes a `.promise` property that resolves when all assemblies have
 * completed (or failed).
 */


var _assemblyIDs = /*#__PURE__*/_classPrivateFieldLooseKey("assemblyIDs");

var _reject = /*#__PURE__*/_classPrivateFieldLooseKey("reject");

var _remaining = /*#__PURE__*/_classPrivateFieldLooseKey("remaining");

var _resolve = /*#__PURE__*/_classPrivateFieldLooseKey("resolve");

var _uppy = /*#__PURE__*/_classPrivateFieldLooseKey("uppy");

var _watching = /*#__PURE__*/_classPrivateFieldLooseKey("watching");

var _onAssemblyComplete = /*#__PURE__*/_classPrivateFieldLooseKey("onAssemblyComplete");

var _onAssemblyCancel = /*#__PURE__*/_classPrivateFieldLooseKey("onAssemblyCancel");

var _onAssemblyError = /*#__PURE__*/_classPrivateFieldLooseKey("onAssemblyError");

var _onImportError = /*#__PURE__*/_classPrivateFieldLooseKey("onImportError");

var _checkAllComplete = /*#__PURE__*/_classPrivateFieldLooseKey("checkAllComplete");

var _removeListeners = /*#__PURE__*/_classPrivateFieldLooseKey("removeListeners");

var _addListeners = /*#__PURE__*/_classPrivateFieldLooseKey("addListeners");

class TransloaditAssemblyWatcher extends Emitter {
  constructor(uppy, assemblyIDs) {
    super();
    Object.defineProperty(this, _addListeners, {
      value: _addListeners2
    });
    Object.defineProperty(this, _removeListeners, {
      value: _removeListeners2
    });
    Object.defineProperty(this, _checkAllComplete, {
      value: _checkAllComplete2
    });
    Object.defineProperty(this, _watching, {
      value: _watching2
    });
    Object.defineProperty(this, _assemblyIDs, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _reject, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _remaining, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _resolve, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _uppy, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _onAssemblyComplete, {
      writable: true,
      value: assembly => {
        if (!_classPrivateFieldLooseBase(this, _watching)[_watching](assembly.assembly_id)) {
          return;
        }

        _classPrivateFieldLooseBase(this, _uppy)[_uppy].log(`[Transloadit] AssemblyWatcher: Got Assembly finish ${assembly.assembly_id}`);

        this.emit('assembly-complete', assembly.assembly_id);

        _classPrivateFieldLooseBase(this, _checkAllComplete)[_checkAllComplete]();
      }
    });
    Object.defineProperty(this, _onAssemblyCancel, {
      writable: true,
      value: assembly => {
        if (!_classPrivateFieldLooseBase(this, _watching)[_watching](assembly.assembly_id)) {
          return;
        }

        _classPrivateFieldLooseBase(this, _checkAllComplete)[_checkAllComplete]();
      }
    });
    Object.defineProperty(this, _onAssemblyError, {
      writable: true,
      value: (assembly, error) => {
        if (!_classPrivateFieldLooseBase(this, _watching)[_watching](assembly.assembly_id)) {
          return;
        }

        _classPrivateFieldLooseBase(this, _uppy)[_uppy].log(`[Transloadit] AssemblyWatcher: Got Assembly error ${assembly.assembly_id}`);

        _classPrivateFieldLooseBase(this, _uppy)[_uppy].log(error);

        this.emit('assembly-error', assembly.assembly_id, error);

        _classPrivateFieldLooseBase(this, _checkAllComplete)[_checkAllComplete]();
      }
    });
    Object.defineProperty(this, _onImportError, {
      writable: true,
      value: (assembly, fileID, error) => {
        if (!_classPrivateFieldLooseBase(this, _watching)[_watching](assembly.assembly_id)) {
          return;
        } // Not sure if we should be doing something when it's just one file failing.
        // ATM, the only options are 1) ignoring or 2) failing the entire upload.
        // I think failing the upload is better than silently ignoring.
        // In the future we should maybe have a way to resolve uploads with some failures,
        // like returning an object with `{ successful, failed }` uploads.


        _classPrivateFieldLooseBase(this, _onAssemblyError)[_onAssemblyError](assembly, error);
      }
    });
    _classPrivateFieldLooseBase(this, _uppy)[_uppy] = uppy;
    _classPrivateFieldLooseBase(this, _assemblyIDs)[_assemblyIDs] = assemblyIDs;
    _classPrivateFieldLooseBase(this, _remaining)[_remaining] = assemblyIDs.length;
    this.promise = new Promise((resolve, reject) => {
      _classPrivateFieldLooseBase(this, _resolve)[_resolve] = resolve;
      _classPrivateFieldLooseBase(this, _reject)[_reject] = reject;
    });

    _classPrivateFieldLooseBase(this, _addListeners)[_addListeners]();
  }
  /**
   * Are we watching this assembly ID?
   */


}

function _watching2(id) {
  return _classPrivateFieldLooseBase(this, _assemblyIDs)[_assemblyIDs].indexOf(id) !== -1;
}

function _checkAllComplete2() {
  _classPrivateFieldLooseBase(this, _remaining)[_remaining] -= 1;

  if (_classPrivateFieldLooseBase(this, _remaining)[_remaining] === 0) {
    // We're done, these listeners can be removed
    _classPrivateFieldLooseBase(this, _removeListeners)[_removeListeners]();

    _classPrivateFieldLooseBase(this, _resolve)[_resolve]();
  }
}

function _removeListeners2() {
  _classPrivateFieldLooseBase(this, _uppy)[_uppy].off('transloadit:complete', _classPrivateFieldLooseBase(this, _onAssemblyComplete)[_onAssemblyComplete]);

  _classPrivateFieldLooseBase(this, _uppy)[_uppy].off('transloadit:assembly-cancel', _classPrivateFieldLooseBase(this, _onAssemblyCancel)[_onAssemblyCancel]);

  _classPrivateFieldLooseBase(this, _uppy)[_uppy].off('transloadit:assembly-error', _classPrivateFieldLooseBase(this, _onAssemblyError)[_onAssemblyError]);

  _classPrivateFieldLooseBase(this, _uppy)[_uppy].off('transloadit:import-error', _classPrivateFieldLooseBase(this, _onImportError)[_onImportError]);
}

function _addListeners2() {
  _classPrivateFieldLooseBase(this, _uppy)[_uppy].on('transloadit:complete', _classPrivateFieldLooseBase(this, _onAssemblyComplete)[_onAssemblyComplete]);

  _classPrivateFieldLooseBase(this, _uppy)[_uppy].on('transloadit:assembly-cancel', _classPrivateFieldLooseBase(this, _onAssemblyCancel)[_onAssemblyCancel]);

  _classPrivateFieldLooseBase(this, _uppy)[_uppy].on('transloadit:assembly-error', _classPrivateFieldLooseBase(this, _onAssemblyError)[_onAssemblyError]);

  _classPrivateFieldLooseBase(this, _uppy)[_uppy].on('transloadit:import-error', _classPrivateFieldLooseBase(this, _onImportError)[_onImportError]);
}

module.exports = TransloaditAssemblyWatcher;

},{"component-emitter":8}],177:[function(require,module,exports){
"use strict";

var _headers, _reportError;

function _classPrivateFieldLooseBase(receiver, privateKey) { if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) { throw new TypeError("attempted to use private field on non-instance"); } return receiver; }

var id = 0;

function _classPrivateFieldLooseKey(name) { return "__private_" + id++ + "_" + name; }

const fetchWithNetworkError = require('./../../utils/lib/fetchWithNetworkError');
/**
 * A Barebones HTTP API client for Transloadit.
 */


module.exports = (_headers = /*#__PURE__*/_classPrivateFieldLooseKey("headers"), _reportError = /*#__PURE__*/_classPrivateFieldLooseKey("reportError"), class Client {
  constructor(_opts) {
    if (_opts === void 0) {
      _opts = {};
    }

    Object.defineProperty(this, _headers, {
      writable: true,
      value: {}
    });
    Object.defineProperty(this, _reportError, {
      writable: true,
      value: (err, params) => {
        if (this.opts.errorReporting === false) {
          throw err;
        }

        const opts = {
          type: params.type
        };

        if (params.assembly) {
          opts.assembly = params.assembly.assembly_id;
          opts.instance = params.assembly.instance;
        }

        if (params.url) {
          opts.endpoint = params.url;
        }

        this.submitError(err, opts).catch(() => {// not much we can do then is there
        });
        throw err;
      }
    });
    this.opts = _opts;

    if (this.opts.client != null) {
      _classPrivateFieldLooseBase(this, _headers)[_headers]['Transloadit-Client'] = this.opts.client;
    }
  }
  /**
   * Create a new assembly.
   *
   * @param {object} options
   * @param {string|object} options.params
   * @param {object} options.fields
   * @param {string} options.signature
   * @param {number} options.expectedFiles
   */


  createAssembly(_ref) {
    let {
      params,
      fields,
      signature,
      expectedFiles
    } = _ref;
    const data = new FormData();
    data.append('params', typeof params === 'string' ? params : JSON.stringify(params));

    if (signature) {
      data.append('signature', signature);
    }

    Object.keys(fields).forEach(key => {
      data.append(key, fields[key]);
    });
    data.append('num_expected_upload_files', expectedFiles);
    const url = new URL('/assemblies', `${this.opts.service}`).href;
    return fetchWithNetworkError(url, {
      method: 'post',
      headers: _classPrivateFieldLooseBase(this, _headers)[_headers],
      body: data
    }).then(response => response.json()).then(assembly => {
      if (assembly.error) {
        const error = new Error(assembly.error);
        error.details = assembly.message;
        error.assembly = assembly;

        if (assembly.assembly_id) {
          error.details += ` Assembly ID: ${assembly.assembly_id}`;
        }

        throw error;
      }

      return assembly;
    }).catch(err => _classPrivateFieldLooseBase(this, _reportError)[_reportError](err, {
      url,
      type: 'API_ERROR'
    }));
  }
  /**
   * Reserve resources for a file in an Assembly. Then addFile can be used later.
   *
   * @param {object} assembly
   * @param {UppyFile} file
   */


  reserveFile(assembly, file) {
    const size = encodeURIComponent(file.size);
    const url = `${assembly.assembly_ssl_url}/reserve_file?size=${size}`;
    return fetchWithNetworkError(url, {
      method: 'post',
      headers: _classPrivateFieldLooseBase(this, _headers)[_headers]
    }).then(response => response.json()).catch(err => _classPrivateFieldLooseBase(this, _reportError)[_reportError](err, {
      assembly,
      file,
      url,
      type: 'API_ERROR'
    }));
  }
  /**
   * Import a remote file to an Assembly.
   *
   * @param {object} assembly
   * @param {UppyFile} file
   */


  addFile(assembly, file) {
    if (!file.uploadURL) {
      return Promise.reject(new Error('File does not have an `uploadURL`.'));
    }

    const size = encodeURIComponent(file.size);
    const uploadUrl = encodeURIComponent(file.uploadURL);
    const filename = encodeURIComponent(file.name);
    const fieldname = 'file';
    const qs = `size=${size}&filename=${filename}&fieldname=${fieldname}&s3Url=${uploadUrl}`;
    const url = `${assembly.assembly_ssl_url}/add_file?${qs}`;
    return fetchWithNetworkError(url, {
      method: 'post',
      headers: _classPrivateFieldLooseBase(this, _headers)[_headers]
    }).then(response => response.json()).catch(err => _classPrivateFieldLooseBase(this, _reportError)[_reportError](err, {
      assembly,
      file,
      url,
      type: 'API_ERROR'
    }));
  }
  /**
   * Cancel a running Assembly.
   *
   * @param {object} assembly
   */


  cancelAssembly(assembly) {
    const url = assembly.assembly_ssl_url;
    return fetchWithNetworkError(url, {
      method: 'delete',
      headers: _classPrivateFieldLooseBase(this, _headers)[_headers]
    }).then(response => response.json()).catch(err => _classPrivateFieldLooseBase(this, _reportError)[_reportError](err, {
      url,
      type: 'API_ERROR'
    }));
  }
  /**
   * Get the current status for an assembly.
   *
   * @param {string} url The status endpoint of the assembly.
   */


  getAssemblyStatus(url) {
    return fetchWithNetworkError(url, {
      headers: _classPrivateFieldLooseBase(this, _headers)[_headers]
    }).then(response => response.json()).catch(err => _classPrivateFieldLooseBase(this, _reportError)[_reportError](err, {
      url,
      type: 'STATUS_ERROR'
    }));
  }

  submitError(err, _temp) {
    let {
      endpoint,
      instance,
      assembly
    } = _temp === void 0 ? {} : _temp;
    const message = err.details ? `${err.message} (${err.details})` : err.message;
    return fetchWithNetworkError('https://transloaditstatus.com/client_error', {
      method: 'post',
      body: JSON.stringify({
        endpoint,
        instance,
        assembly_id: assembly,
        agent: typeof navigator !== 'undefined' ? navigator.userAgent : '',
        client: this.opts.client,
        error: message
      })
    }).then(response => response.json());
  }

});

},{"./../../utils/lib/fetchWithNetworkError":195}],178:[function(require,module,exports){
"use strict";

var _class, _getClientVersion, _attachAssemblyMetadata, _createAssembly, _createAssemblyWatcher, _shouldWaitAfterUpload, _reserveFiles, _onFileUploadURLAvailable, _findFile, _onFileUploadComplete, _onResult, _onAssemblyFinished, _cancelAssembly, _onCancelAll, _getPersistentData, _onRestored, _connectAssembly, _prepareUpload, _afterUpload, _onError, _onTusError, _temp;

function _classPrivateFieldLooseBase(receiver, privateKey) { if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) { throw new TypeError("attempted to use private field on non-instance"); } return receiver; }

var id = 0;

function _classPrivateFieldLooseKey(name) { return "__private_" + id++ + "_" + name; }

const hasProperty = require('./../../utils/lib/hasProperty');

const BasePlugin = require('./../../core/lib/BasePlugin');

const Tus = require('./../../tus');

const Assembly = require('./Assembly');

const Client = require('./Client');

const AssemblyOptions = require('./AssemblyOptions');

const AssemblyWatcher = require('./AssemblyWatcher');

const locale = require('./locale');

function defaultGetAssemblyOptions(file, options) {
  return {
    params: options.params,
    signature: options.signature,
    fields: options.fields
  };
}

const sendErrorToConsole = originalErr => err => {
  const error = new Error('Failed to send error to the client');
  error.cause = err;
  console.error(error, originalErr);
};

const COMPANION = 'https://api2.transloadit.com/companion'; // Regex matching acceptable postMessage() origins for authentication feedback from companion.

const ALLOWED_COMPANION_PATTERN = /\.transloadit\.com$/; // Regex used to check if a Companion address is run by Transloadit.

const TL_COMPANION = /https?:\/\/api2(?:-\w+)?\.transloadit\.com\/companion/;
/**
 * Upload files to Transloadit using Tus.
 */

module.exports = (_temp = (_getClientVersion = /*#__PURE__*/_classPrivateFieldLooseKey("getClientVersion"), _attachAssemblyMetadata = /*#__PURE__*/_classPrivateFieldLooseKey("attachAssemblyMetadata"), _createAssembly = /*#__PURE__*/_classPrivateFieldLooseKey("createAssembly"), _createAssemblyWatcher = /*#__PURE__*/_classPrivateFieldLooseKey("createAssemblyWatcher"), _shouldWaitAfterUpload = /*#__PURE__*/_classPrivateFieldLooseKey("shouldWaitAfterUpload"), _reserveFiles = /*#__PURE__*/_classPrivateFieldLooseKey("reserveFiles"), _onFileUploadURLAvailable = /*#__PURE__*/_classPrivateFieldLooseKey("onFileUploadURLAvailable"), _findFile = /*#__PURE__*/_classPrivateFieldLooseKey("findFile"), _onFileUploadComplete = /*#__PURE__*/_classPrivateFieldLooseKey("onFileUploadComplete"), _onResult = /*#__PURE__*/_classPrivateFieldLooseKey("onResult"), _onAssemblyFinished = /*#__PURE__*/_classPrivateFieldLooseKey("onAssemblyFinished"), _cancelAssembly = /*#__PURE__*/_classPrivateFieldLooseKey("cancelAssembly"), _onCancelAll = /*#__PURE__*/_classPrivateFieldLooseKey("onCancelAll"), _getPersistentData = /*#__PURE__*/_classPrivateFieldLooseKey("getPersistentData"), _onRestored = /*#__PURE__*/_classPrivateFieldLooseKey("onRestored"), _connectAssembly = /*#__PURE__*/_classPrivateFieldLooseKey("connectAssembly"), _prepareUpload = /*#__PURE__*/_classPrivateFieldLooseKey("prepareUpload"), _afterUpload = /*#__PURE__*/_classPrivateFieldLooseKey("afterUpload"), _onError = /*#__PURE__*/_classPrivateFieldLooseKey("onError"), _onTusError = /*#__PURE__*/_classPrivateFieldLooseKey("onTusError"), _class = class Transloadit extends BasePlugin {
  // eslint-disable-line global-require
  constructor(uppy, opts) {
    var _this;

    super(uppy, opts);
    _this = this;
    Object.defineProperty(this, _connectAssembly, {
      value: _connectAssembly2
    });
    Object.defineProperty(this, _cancelAssembly, {
      value: _cancelAssembly2
    });
    Object.defineProperty(this, _onAssemblyFinished, {
      value: _onAssemblyFinished2
    });
    Object.defineProperty(this, _onResult, {
      value: _onResult2
    });
    Object.defineProperty(this, _onFileUploadComplete, {
      value: _onFileUploadComplete2
    });
    Object.defineProperty(this, _findFile, {
      value: _findFile2
    });
    Object.defineProperty(this, _reserveFiles, {
      value: _reserveFiles2
    });
    Object.defineProperty(this, _shouldWaitAfterUpload, {
      value: _shouldWaitAfterUpload2
    });
    Object.defineProperty(this, _createAssemblyWatcher, {
      value: _createAssemblyWatcher2
    });
    Object.defineProperty(this, _createAssembly, {
      value: _createAssembly2
    });
    Object.defineProperty(this, _attachAssemblyMetadata, {
      value: _attachAssemblyMetadata2
    });
    Object.defineProperty(this, _getClientVersion, {
      value: _getClientVersion2
    });
    Object.defineProperty(this, _onFileUploadURLAvailable, {
      writable: true,
      value: rawFile => {
        const file = this.uppy.getFile(rawFile.id);

        if (!file || !file.transloadit || !file.transloadit.assembly) {
          return;
        }

        const {
          assemblies
        } = this.getPluginState();
        const assembly = assemblies[file.transloadit.assembly];
        this.client.addFile(assembly, file).catch(err => {
          this.uppy.log(err);
          this.uppy.emit('transloadit:import-error', assembly, file.id, err);
        });
      }
    });
    Object.defineProperty(this, _onCancelAll, {
      writable: true,
      value: () => {
        const {
          uploadsAssemblies
        } = this.getPluginState();
        const assemblyIDs = Object.values(uploadsAssemblies).flat(1);
        const cancelPromises = assemblyIDs.map(assemblyID => {
          const assembly = this.getAssembly(assemblyID);
          return _classPrivateFieldLooseBase(this, _cancelAssembly)[_cancelAssembly](assembly);
        });
        Promise.all(cancelPromises).catch(err => {
          this.uppy.log(err);
        });
      }
    });
    Object.defineProperty(this, _getPersistentData, {
      writable: true,
      value: setData => {
        const {
          assemblies,
          uploadsAssemblies
        } = this.getPluginState();
        setData({
          [this.id]: {
            assemblies,
            uploadsAssemblies
          }
        });
      }
    });
    Object.defineProperty(this, _onRestored, {
      writable: true,
      value: pluginData => {
        const savedState = pluginData && pluginData[this.id] ? pluginData[this.id] : {};
        const previousAssemblies = savedState.assemblies || {};
        const uploadsAssemblies = savedState.uploadsAssemblies || {};

        if (Object.keys(uploadsAssemblies).length === 0) {
          // Nothing to restore.
          return;
        } // Convert loaded Assembly statuses to a Transloadit plugin state object.


        const restoreState = assemblies => {
          const files = {};
          const results = [];

          for (const [id, status] of Object.entries(assemblies)) {
            status.uploads.forEach(uploadedFile => {
              const file = _classPrivateFieldLooseBase(this, _findFile)[_findFile](uploadedFile);

              files[uploadedFile.id] = {
                id: file.id,
                assembly: id,
                uploadedFile
              };
            });
            const state = this.getPluginState();
            Object.keys(status.results).forEach(stepName => {
              for (const result of status.results[stepName]) {
                const file = state.files[result.original_id];
                result.localId = file ? file.id : null;
                results.push({
                  id: result.id,
                  result,
                  stepName,
                  assembly: id
                });
              }
            });
          }

          this.setPluginState({
            assemblies,
            files,
            results,
            uploadsAssemblies
          });
        }; // Set up the Assembly instances and AssemblyWatchers for existing Assemblies.


        const restoreAssemblies = () => {
          // eslint-disable-next-line no-shadow
          const {
            assemblies,
            uploadsAssemblies
          } = this.getPluginState(); // Set up the assembly watchers again for all the ongoing uploads.

          Object.keys(uploadsAssemblies).forEach(uploadID => {
            const assemblyIDs = uploadsAssemblies[uploadID];
            const fileIDsInUpload = assemblyIDs.flatMap(assemblyID => {
              return this.getAssemblyFiles(assemblyID).map(file => file.id);
            });

            _classPrivateFieldLooseBase(this, _createAssemblyWatcher)[_createAssemblyWatcher](assemblyIDs, fileIDsInUpload, uploadID);
          });
          const allAssemblyIDs = Object.keys(assemblies);
          allAssemblyIDs.forEach(id => {
            const assembly = new Assembly(assemblies[id]);

            _classPrivateFieldLooseBase(this, _connectAssembly)[_connectAssembly](assembly);
          });
        }; // Force-update all Assemblies to check for missed events.


        const updateAssemblies = () => {
          const {
            assemblies
          } = this.getPluginState();
          return Promise.all(Object.keys(assemblies).map(id => {
            return this.activeAssemblies[id].update();
          }));
        }; // Restore all Assembly state.


        this.restored = Promise.resolve().then(() => {
          restoreState(previousAssemblies);
          restoreAssemblies();
          return updateAssemblies();
        });
        this.restored.then(() => {
          this.restored = null;
        });
      }
    });
    Object.defineProperty(this, _prepareUpload, {
      writable: true,
      value: (fileIDs, uploadID) => {
        // Only use files without errors
        const filteredFileIDs = fileIDs.filter(file => !file.error);
        const files = filteredFileIDs.map(fileID => {
          const file = this.uppy.getFile(fileID);
          this.uppy.emit('preprocess-progress', file, {
            mode: 'indeterminate',
            message: this.i18n('creatingAssembly')
          });
          return file;
        }); // eslint-disable-next-line no-shadow

        const createAssembly = async _ref => {
          let {
            fileIDs,
            options
          } = _ref;

          try {
            const assembly = await _classPrivateFieldLooseBase(this, _createAssembly)[_createAssembly](fileIDs, uploadID, options);

            if (this.opts.importFromUploadURLs) {
              await _classPrivateFieldLooseBase(this, _reserveFiles)[_reserveFiles](assembly, fileIDs);
            }

            fileIDs.forEach(fileID => {
              const file = this.uppy.getFile(fileID);
              this.uppy.emit('preprocess-complete', file);
            });
            return assembly;
          } catch (err) {
            fileIDs.forEach(fileID => {
              const file = this.uppy.getFile(fileID); // Clear preprocessing state when the Assembly could not be created,
              // otherwise the UI gets confused about the lingering progress keys

              this.uppy.emit('preprocess-complete', file);
              this.uppy.emit('upload-error', file, err);
            });
            throw err;
          }
        };

        const {
          uploadsAssemblies
        } = this.getPluginState();
        this.setPluginState({
          uploadsAssemblies: { ...uploadsAssemblies,
            [uploadID]: []
          }
        });
        const assemblyOptions = new AssemblyOptions(files, this.opts);
        return assemblyOptions.build().then(assemblies => Promise.all(assemblies.map(createAssembly))).then(createdAssemblies => {
          const assemblyIDs = createdAssemblies.map(assembly => assembly.status.assembly_id);

          _classPrivateFieldLooseBase(this, _createAssemblyWatcher)[_createAssemblyWatcher](assemblyIDs, filteredFileIDs, uploadID);

          return Promise.all(createdAssemblies.map(assembly => _classPrivateFieldLooseBase(this, _connectAssembly)[_connectAssembly](assembly)));
        }) // If something went wrong before any Assemblies could be created,
        // clear all processing state.
        .catch(err => {
          files.forEach(file => {
            this.uppy.emit('preprocess-complete', file);
            this.uppy.emit('upload-error', file, err);
          });
          throw err;
        });
      }
    });
    Object.defineProperty(this, _afterUpload, {
      writable: true,
      value: (fileIDs, uploadID) => {
        const files = fileIDs.map(fileID => this.uppy.getFile(fileID)); // Only use files without errors

        const filteredFileIDs = files.filter(file => !file.error).map(file => file.id);
        const state = this.getPluginState(); // If we're still restoring state, wait for that to be done.

        if (this.restored) {
          return this.restored.then(() => {
            return _classPrivateFieldLooseBase(this, _afterUpload)[_afterUpload](filteredFileIDs, uploadID);
          });
        }

        const assemblyIDs = state.uploadsAssemblies[uploadID];

        const closeSocketConnections = () => {
          assemblyIDs.forEach(assemblyID => {
            const assembly = this.activeAssemblies[assemblyID];
            assembly.close();
            delete this.activeAssemblies[assemblyID];
          });
        }; // If we don't have to wait for encoding metadata or results, we can close
        // the socket immediately and finish the upload.


        if (!_classPrivateFieldLooseBase(this, _shouldWaitAfterUpload)[_shouldWaitAfterUpload]()) {
          closeSocketConnections();
          const assemblies = assemblyIDs.map(id => this.getAssembly(id));
          this.uppy.addResultData(uploadID, {
            transloadit: assemblies
          });
          return Promise.resolve();
        } // If no Assemblies were created for this upload, we also do not have to wait.
        // There's also no sockets or anything to close, so just return immediately.


        if (assemblyIDs.length === 0) {
          this.uppy.addResultData(uploadID, {
            transloadit: []
          });
          return Promise.resolve();
        }

        const incompleteFiles = files.filter(file => !hasProperty(this.completedFiles, file.id));
        incompleteFiles.forEach(file => {
          this.uppy.emit('postprocess-progress', file, {
            mode: 'indeterminate',
            message: this.i18n('encoding')
          });
        });
        const watcher = this.assemblyWatchers[uploadID];
        return watcher.promise.then(() => {
          closeSocketConnections();
          const assemblies = assemblyIDs.map(id => this.getAssembly(id)); // Remove the Assembly ID list for this upload,
          // it's no longer going to be used anywhere.

          const uploadsAssemblies = { ...this.getPluginState().uploadsAssemblies
          };
          delete uploadsAssemblies[uploadID];
          this.setPluginState({
            uploadsAssemblies
          });
          this.uppy.addResultData(uploadID, {
            transloadit: assemblies
          });
        });
      }
    });
    Object.defineProperty(this, _onError, {
      writable: true,
      value: function (err, uploadID) {
        if (err === void 0) {
          err = null;
        }

        const state = _this.getPluginState();

        const assemblyIDs = state.uploadsAssemblies[uploadID];
        assemblyIDs == null ? void 0 : assemblyIDs.forEach(assemblyID => {
          if (_this.activeAssemblies[assemblyID]) {
            _this.activeAssemblies[assemblyID].close();
          }
        });

        _this.client.submitError(err) // if we can't report the error that sucks
        .catch(sendErrorToConsole(err));
      }
    });
    Object.defineProperty(this, _onTusError, {
      writable: true,
      value: err => {
        if (err && /^tus: /.test(err.message)) {
          const xhr = err.originalRequest ? err.originalRequest.getUnderlyingObject() : null;
          const url = xhr && xhr.responseURL ? xhr.responseURL : null;
          this.client.submitError(err, {
            url,
            type: 'TUS_ERROR'
          }) // if we can't report the error that sucks
          .catch(sendErrorToConsole(err));
        }
      }
    });
    this.type = 'uploader';
    this.id = this.opts.id || 'Transloadit';
    this.title = 'Transloadit';
    this.defaultLocale = locale;
    const defaultOptions = {
      service: 'https://api2.transloadit.com',
      errorReporting: true,
      waitForEncoding: false,
      waitForMetadata: false,
      alwaysRunAssembly: false,
      importFromUploadURLs: false,
      signature: null,
      params: null,
      fields: {},
      getAssemblyOptions: defaultGetAssemblyOptions,
      limit: 0
    };
    this.opts = { ...defaultOptions,
      ...opts
    };
    this.i18nInit();
    const hasCustomAssemblyOptions = this.opts.getAssemblyOptions !== defaultOptions.getAssemblyOptions;

    if (this.opts.params) {
      AssemblyOptions.validateParams(this.opts.params);
    } else if (!hasCustomAssemblyOptions) {
      // Throw the same error that we'd throw if the `params` returned from a
      // `getAssemblyOptions()` function is null.
      AssemblyOptions.validateParams(null);
    }

    this.client = new Client({
      service: this.opts.service,
      client: _classPrivateFieldLooseBase(this, _getClientVersion)[_getClientVersion](),
      errorReporting: this.opts.errorReporting
    }); // Contains Assembly instances for in-progress Assemblies.

    this.activeAssemblies = {}; // Contains a mapping of uploadID to AssemblyWatcher

    this.assemblyWatchers = {}; // Contains a file IDs that have completed postprocessing before the upload
    // they belong to has entered the postprocess stage.

    this.completedFiles = Object.create(null);
  }

  install() {
    this.uppy.addPreProcessor(_classPrivateFieldLooseBase(this, _prepareUpload)[_prepareUpload]);
    this.uppy.addPostProcessor(_classPrivateFieldLooseBase(this, _afterUpload)[_afterUpload]); // We may need to close socket.io connections on error.

    this.uppy.on('error', _classPrivateFieldLooseBase(this, _onError)[_onError]); // Handle cancellation.

    this.uppy.on('cancel-all', _classPrivateFieldLooseBase(this, _onCancelAll)[_onCancelAll]); // For error reporting.

    this.uppy.on('upload-error', _classPrivateFieldLooseBase(this, _onTusError)[_onTusError]);

    if (this.opts.importFromUploadURLs) {
      // No uploader needed when importing; instead we take the upload URL from an existing uploader.
      this.uppy.on('upload-success', _classPrivateFieldLooseBase(this, _onFileUploadURLAvailable)[_onFileUploadURLAvailable]);
    } else {
      this.uppy.use(Tus, {
        // Disable tus-js-client fingerprinting, otherwise uploading the same file at different times
        // will upload to an outdated Assembly, and we won't get socket events for it.
        //
        // To resume a Transloadit upload, we need to reconnect to the websocket, and the state that's
        // required to do that is not saved by tus-js-client's fingerprinting. We need the tus URL,
        // the Assembly URL, and the WebSocket URL, at least. We also need to know _all_ the files that
        // were added to the Assembly, so we can properly complete it. All that state is handled by
        // Golden Retriever. So, Golden Retriever is required to do resumability with the Transloadit plugin,
        // and we disable Tus's default resume implementation to prevent bad behaviours.
        storeFingerprintForResuming: false,
        // Disable Companion's retry optimisation; we need to change the endpoint on retry
        // so it can't just reuse the same tus.Upload instance server-side.
        useFastRemoteRetry: false,
        // Only send Assembly metadata to the tus endpoint.
        metaFields: ['assembly_url', 'filename', 'fieldname'],
        // Pass the limit option to @uppy/tus
        limit: this.opts.limit
      });
    }

    this.uppy.on('restore:get-data', _classPrivateFieldLooseBase(this, _getPersistentData)[_getPersistentData]);
    this.uppy.on('restored', _classPrivateFieldLooseBase(this, _onRestored)[_onRestored]);
    this.setPluginState({
      // Contains Assembly status objects, indexed by their ID.
      assemblies: {},
      // Contains arrays of Assembly IDs, indexed by the upload ID that they belong to.
      uploadsAssemblies: {},
      // Contains file data from Transloadit, indexed by their Transloadit-assigned ID.
      files: {},
      // Contains result data from Transloadit.
      results: []
    }); // We cannot cancel individual files because Assemblies tend to contain many files.

    const {
      capabilities
    } = this.uppy.getState();
    this.uppy.setState({
      capabilities: { ...capabilities,
        individualCancellation: false
      }
    });
  }

  uninstall() {
    this.uppy.removePreProcessor(_classPrivateFieldLooseBase(this, _prepareUpload)[_prepareUpload]);
    this.uppy.removePostProcessor(_classPrivateFieldLooseBase(this, _afterUpload)[_afterUpload]);
    this.uppy.off('error', _classPrivateFieldLooseBase(this, _onError)[_onError]);

    if (this.opts.importFromUploadURLs) {
      this.uppy.off('upload-success', _classPrivateFieldLooseBase(this, _onFileUploadURLAvailable)[_onFileUploadURLAvailable]);
    }

    const {
      capabilities
    } = this.uppy.getState();
    this.uppy.setState({
      capabilities: { ...capabilities,
        individualCancellation: true
      }
    });
  }

  getAssembly(id) {
    const {
      assemblies
    } = this.getPluginState();
    return assemblies[id];
  }

  getAssemblyFiles(assemblyID) {
    return this.uppy.getFiles().filter(file => {
      return file && file.transloadit && file.transloadit.assembly === assemblyID;
    });
  }

}), _class.VERSION = "2.0.4", _temp);

function _getClientVersion2() {
  const list = [`uppy-core:${this.uppy.constructor.VERSION}`, `uppy-transloadit:${this.constructor.VERSION}`, `uppy-tus:${Tus.VERSION}`];

  const addPluginVersion = (pluginName, versionName) => {
    const plugin = this.uppy.getPlugin(pluginName);

    if (plugin) {
      list.push(`${versionName}:${plugin.constructor.VERSION}`);
    }
  };

  if (this.opts.importFromUploadURLs) {
    addPluginVersion('XHRUpload', 'uppy-xhr-upload');
    addPluginVersion('AwsS3', 'uppy-aws-s3');
    addPluginVersion('AwsS3Multipart', 'uppy-aws-s3-multipart');
  }

  addPluginVersion('Dropbox', 'uppy-dropbox');
  addPluginVersion('Box', 'uppy-box');
  addPluginVersion('Facebook', 'uppy-facebook');
  addPluginVersion('GoogleDrive', 'uppy-google-drive');
  addPluginVersion('Instagram', 'uppy-instagram');
  addPluginVersion('OneDrive', 'uppy-onedrive');
  addPluginVersion('Zoom', 'uppy-zoom');
  addPluginVersion('Url', 'uppy-url');
  return list.join(',');
}

function _attachAssemblyMetadata2(file, status) {
  // Add the metadata parameters Transloadit needs.
  const meta = { ...file.meta,
    assembly_url: status.assembly_url,
    filename: file.name,
    fieldname: 'file'
  }; // Add Assembly-specific Tus endpoint.

  const tus = { ...file.tus,
    endpoint: status.tus_url,
    // Include X-Request-ID headers for better debugging.
    addRequestId: true
  }; // Set Companion location. We only add this, if 'file' has the attribute
  // remote, because this is the criteria to identify remote files.
  // We only replace the hostname for Transloadit's companions, so that
  // people can also self-host them while still using Transloadit for encoding.

  let {
    remote
  } = file;

  if (file.remote && TL_COMPANION.test(file.remote.companionUrl)) {
    const newHost = status.companion_url.replace(/\/$/, '');
    const path = file.remote.url.replace(file.remote.companionUrl, '').replace(/^\//, '');
    remote = { ...file.remote,
      companionUrl: newHost,
      url: `${newHost}/${path}`
    };
  } // Store the Assembly ID this file is in on the file under the `transloadit` key.


  const newFile = { ...file,
    transloadit: {
      assembly: status.assembly_id
    }
  }; // Only configure the Tus plugin if we are uploading straight to Transloadit (the default).

  if (!this.opts.importFromUploadURLs) {
    Object.assign(newFile, {
      meta,
      tus,
      remote
    });
  }

  return newFile;
}

function _createAssembly2(fileIDs, uploadID, options) {
  this.uppy.log('[Transloadit] Create Assembly');
  return this.client.createAssembly({
    params: options.params,
    fields: options.fields,
    expectedFiles: fileIDs.length,
    signature: options.signature
  }).then(newAssembly => {
    const assembly = new Assembly(newAssembly);
    const {
      status
    } = assembly;
    const assemblyID = status.assembly_id;
    const {
      assemblies,
      uploadsAssemblies
    } = this.getPluginState();
    this.setPluginState({
      // Store the Assembly status.
      assemblies: { ...assemblies,
        [assemblyID]: status
      },
      // Store the list of Assemblies related to this upload.
      uploadsAssemblies: { ...uploadsAssemblies,
        [uploadID]: [...uploadsAssemblies[uploadID], assemblyID]
      }
    });
    const {
      files
    } = this.uppy.getState();
    const updatedFiles = {};
    fileIDs.forEach(id => {
      updatedFiles[id] = _classPrivateFieldLooseBase(this, _attachAssemblyMetadata)[_attachAssemblyMetadata](this.uppy.getFile(id), status);
    });
    this.uppy.setState({
      files: { ...files,
        ...updatedFiles
      }
    });
    this.uppy.emit('transloadit:assembly-created', status, fileIDs);
    this.uppy.log(`[Transloadit] Created Assembly ${assemblyID}`);
    return assembly;
  }).catch(err => {
    const error = new Error(`${this.i18n('creatingAssemblyFailed')}: ${err.message}`);
    error.cause = err; // Reject the promise.

    throw error;
  });
}

function _createAssemblyWatcher2(assemblyID, fileIDs, uploadID) {
  // AssemblyWatcher tracks completion states of all Assemblies in this upload.
  const watcher = new AssemblyWatcher(this.uppy, assemblyID);
  watcher.on('assembly-complete', id => {
    const files = this.getAssemblyFiles(id);
    files.forEach(file => {
      this.completedFiles[file.id] = true;
      this.uppy.emit('postprocess-complete', file);
    });
  });
  watcher.on('assembly-error', (id, error) => {
    // Clear postprocessing state for all our files.
    const files = this.getAssemblyFiles(id);
    files.forEach(file => {
      // TODO Maybe make a postprocess-error event here?
      this.uppy.emit('upload-error', file, error);
      this.uppy.emit('postprocess-complete', file);
    });
  });
  this.assemblyWatchers[uploadID] = watcher;
}

function _shouldWaitAfterUpload2() {
  return this.opts.waitForEncoding || this.opts.waitForMetadata;
}

function _reserveFiles2(assembly, fileIDs) {
  return Promise.all(fileIDs.map(fileID => {
    const file = this.uppy.getFile(fileID);
    return this.client.reserveFile(assembly.status, file);
  }));
}

function _findFile2(uploadedFile) {
  const files = this.uppy.getFiles();

  for (let i = 0; i < files.length; i++) {
    const file = files[i]; // Completed file upload.

    if (file.uploadURL === uploadedFile.tus_upload_url) {
      return file;
    } // In-progress file upload.


    if (file.tus && file.tus.uploadUrl === uploadedFile.tus_upload_url) {
      return file;
    }

    if (!uploadedFile.is_tus_file) {
      // Fingers-crossed check for non-tus uploads, eg imported from S3.
      if (file.name === uploadedFile.name && file.size === uploadedFile.size) {
        return file;
      }
    }
  }

  return undefined;
}

function _onFileUploadComplete2(assemblyId, uploadedFile) {
  const state = this.getPluginState();

  const file = _classPrivateFieldLooseBase(this, _findFile)[_findFile](uploadedFile);

  if (!file) {
    this.uppy.log('[Transloadit] Couldn’t file the file, it was likely removed in the process');
    return;
  }

  this.setPluginState({
    files: { ...state.files,
      [uploadedFile.id]: {
        assembly: assemblyId,
        id: file.id,
        uploadedFile
      }
    }
  });
  this.uppy.emit('transloadit:upload', uploadedFile, this.getAssembly(assemblyId));
}

function _onResult2(assemblyId, stepName, result) {
  const state = this.getPluginState();
  const file = state.files[result.original_id]; // The `file` may not exist if an import robot was used instead of a file upload.

  result.localId = file ? file.id : null; // eslint-disable-line no-param-reassign

  const entry = {
    result,
    stepName,
    id: result.id,
    assembly: assemblyId
  };
  this.setPluginState({
    results: [...state.results, entry]
  });
  this.uppy.emit('transloadit:result', stepName, result, this.getAssembly(assemblyId));
}

function _onAssemblyFinished2(status) {
  const url = status.assembly_ssl_url;
  this.client.getAssemblyStatus(url).then(finalStatus => {
    const assemblyId = finalStatus.assembly_id;
    const state = this.getPluginState();
    this.setPluginState({
      assemblies: { ...state.assemblies,
        [assemblyId]: finalStatus
      }
    });
    this.uppy.emit('transloadit:complete', finalStatus);
  });
}

async function _cancelAssembly2(assembly) {
  await this.client.cancelAssembly(assembly); // TODO bubble this through AssemblyWatcher so its event handlers can clean up correctly

  this.uppy.emit('transloadit:assembly-cancelled', assembly);
}

function _connectAssembly2(assembly) {
  const {
    status
  } = assembly;
  const id = status.assembly_id;
  this.activeAssemblies[id] = assembly; // Sync local `assemblies` state

  assembly.on('status', newStatus => {
    const {
      assemblies
    } = this.getPluginState();
    this.setPluginState({
      assemblies: { ...assemblies,
        [id]: newStatus
      }
    });
  });
  assembly.on('upload', file => {
    _classPrivateFieldLooseBase(this, _onFileUploadComplete)[_onFileUploadComplete](id, file);
  });
  assembly.on('error', error => {
    error.assembly = assembly.status; // eslint-disable-line no-param-reassign

    this.uppy.emit('transloadit:assembly-error', assembly.status, error);
  });
  assembly.on('executing', () => {
    this.uppy.emit('transloadit:assembly-executing', assembly.status);
  });

  if (this.opts.waitForEncoding) {
    assembly.on('result', (stepName, result) => {
      _classPrivateFieldLooseBase(this, _onResult)[_onResult](id, stepName, result);
    });
  }

  if (this.opts.waitForEncoding) {
    assembly.on('finished', () => {
      _classPrivateFieldLooseBase(this, _onAssemblyFinished)[_onAssemblyFinished](assembly.status);
    });
  } else if (this.opts.waitForMetadata) {
    assembly.on('metadata', () => {
      _classPrivateFieldLooseBase(this, _onAssemblyFinished)[_onAssemblyFinished](assembly.status);
    });
  } // No need to connect to the socket if the Assembly has completed by now.


  if (assembly.ok === 'ASSEMBLY_COMPLETE') {
    return assembly;
  }

  assembly.connect();
  return assembly;
}

module.exports.COMPANION = COMPANION;
module.exports.COMPANION_PATTERN = ALLOWED_COMPANION_PATTERN;

},{"./../../core/lib/BasePlugin":83,"./../../tus":182,"./../../utils/lib/hasProperty":212,"./Assembly":174,"./AssemblyOptions":175,"./AssemblyWatcher":176,"./Client":177,"./locale":179}],179:[function(require,module,exports){
"use strict";

module.exports = {
  strings: {
    // Shown while Assemblies are being created for an upload.
    creatingAssembly: 'Preparing upload...',
    // Shown if an Assembly could not be created.
    creatingAssemblyFailed: 'Transloadit: Could not create Assembly',
    // Shown after uploads have succeeded, but when the Assembly is still executing.
    // This only shows if `waitForMetadata` or `waitForEncoding` was enabled.
    encoding: 'Encoding...'
  }
};

},{}],180:[function(require,module,exports){
"use strict";

module.exports = function parseUrl(url) {
  const scheme = /^\w+:\/\//.exec(url);
  let i = 0;

  if (scheme) {
    i = scheme[0].length + 1;
  }

  const slashIndex = url.indexOf('/', i);

  if (slashIndex === -1) {
    return {
      origin: url,
      pathname: '/'
    };
  }

  return {
    origin: url.slice(0, slashIndex),
    pathname: url.slice(slashIndex)
  };
};

},{}],181:[function(require,module,exports){
"use strict";

const tus = require('tus-js-client');

function isCordova() {
  return typeof window !== 'undefined' && (typeof window.PhoneGap !== 'undefined' || typeof window.Cordova !== 'undefined' || typeof window.cordova !== 'undefined');
}

function isReactNative() {
  return typeof navigator !== 'undefined' && typeof navigator.product === 'string' && navigator.product.toLowerCase() === 'reactnative';
} // We override tus fingerprint to uppy’s `file.id`, since the `file.id`
// now also includes `relativePath` for files added from folders.
// This means you can add 2 identical files, if one is in folder a,
// the other in folder b — `a/file.jpg` and `b/file.jpg`, when added
// together with a folder, will be treated as 2 separate files.
//
// For React Native and Cordova, we let tus-js-client’s default
// fingerprint handling take charge.


module.exports = function getFingerprint(uppyFileObj) {
  return (file, options) => {
    if (isCordova() || isReactNative()) {
      return tus.defaultOptions.fingerprint(file, options);
    }

    const uppyFingerprint = ['tus', uppyFileObj.id, options.endpoint].join('-');
    return Promise.resolve(uppyFingerprint);
  };
};

},{"tus-js-client":63}],182:[function(require,module,exports){
"use strict";

var _class, _temp;

const BasePlugin = require('./../../core/lib/BasePlugin');

const tus = require('tus-js-client');

const {
  Provider,
  RequestClient,
  Socket
} = require('./../../companion-client');

const emitSocketProgress = require('./../../utils/lib/emitSocketProgress');

const getSocketHost = require('./../../utils/lib/getSocketHost');

const settle = require('./../../utils/lib/settle');

const EventTracker = require('./../../utils/lib/EventTracker');

const NetworkError = require('./../../utils/lib/NetworkError');

const isNetworkError = require('./../../utils/lib/isNetworkError');

const {
  RateLimitedQueue
} = require('./../../utils/lib/RateLimitedQueue');

const hasProperty = require('./../../utils/lib/hasProperty');

const getFingerprint = require('./getFingerprint');
/** @typedef {import('..').TusOptions} TusOptions */

/** @typedef {import('tus-js-client').UploadOptions} RawTusOptions */

/** @typedef {import('@uppy/core').Uppy} Uppy */

/** @typedef {import('@uppy/core').UppyFile} UppyFile */

/** @typedef {import('@uppy/core').FailedUppyFile<{}>} FailedUppyFile */

/**
 * Extracted from https://github.com/tus/tus-js-client/blob/master/lib/upload.js#L13
 * excepted we removed 'fingerprint' key to avoid adding more dependencies
 *
 * @type {RawTusOptions}
 */


const tusDefaultOptions = {
  endpoint: '',
  uploadUrl: null,
  metadata: {},
  uploadSize: null,
  onProgress: null,
  onChunkComplete: null,
  onSuccess: null,
  onError: null,
  overridePatchMethod: false,
  headers: {},
  addRequestId: false,
  chunkSize: Infinity,
  retryDelays: [0, 1000, 3000, 5000],
  parallelUploads: 1,
  removeFingerprintOnSuccess: false,
  uploadLengthDeferred: false,
  uploadDataDuringCreation: false
};
/**
 * Tus resumable file uploader
 */

module.exports = (_temp = _class = class Tus extends BasePlugin {
  /**
   * @param {Uppy} uppy
   * @param {TusOptions} opts
   */
  constructor(uppy, opts) {
    super(uppy, opts);
    this.type = 'uploader';
    this.id = this.opts.id || 'Tus';
    this.title = 'Tus'; // set default options

    const defaultOptions = {
      useFastRemoteRetry: true,
      limit: 5,
      retryDelays: [0, 1000, 3000, 5000],
      withCredentials: false
    }; // merge default options with the ones set by user

    /** @type {import("..").TusOptions} */

    this.opts = { ...defaultOptions,
      ...opts
    };

    if ('autoRetry' in opts) {
      throw new Error('The `autoRetry` option was deprecated and has been removed.');
    }
    /**
     * Simultaneous upload limiting is shared across all uploads with this plugin.
     *
     * @type {RateLimitedQueue}
     */


    this.requests = new RateLimitedQueue(this.opts.limit);
    this.uploaders = Object.create(null);
    this.uploaderEvents = Object.create(null);
    this.uploaderSockets = Object.create(null);
    this.handleResetProgress = this.handleResetProgress.bind(this);
    this.handleUpload = this.handleUpload.bind(this);
  }

  handleResetProgress() {
    const files = { ...this.uppy.getState().files
    };
    Object.keys(files).forEach(fileID => {
      // Only clone the file object if it has a Tus `uploadUrl` attached.
      if (files[fileID].tus && files[fileID].tus.uploadUrl) {
        const tusState = { ...files[fileID].tus
        };
        delete tusState.uploadUrl;
        files[fileID] = { ...files[fileID],
          tus: tusState
        };
      }
    });
    this.uppy.setState({
      files
    });
  }
  /**
   * Clean up all references for a file's upload: the tus.Upload instance,
   * any events related to the file, and the Companion WebSocket connection.
   *
   * @param {string} fileID
   */


  resetUploaderReferences(fileID, opts) {
    if (opts === void 0) {
      opts = {};
    }

    if (this.uploaders[fileID]) {
      const uploader = this.uploaders[fileID];
      uploader.abort();

      if (opts.abort) {
        uploader.abort(true);
      }

      this.uploaders[fileID] = null;
    }

    if (this.uploaderEvents[fileID]) {
      this.uploaderEvents[fileID].remove();
      this.uploaderEvents[fileID] = null;
    }

    if (this.uploaderSockets[fileID]) {
      this.uploaderSockets[fileID].close();
      this.uploaderSockets[fileID] = null;
    }
  }
  /**
   * Create a new Tus upload.
   *
   * A lot can happen during an upload, so this is quite hard to follow!
   * - First, the upload is started. If the file was already paused by the time the upload starts, nothing should happen.
   *   If the `limit` option is used, the upload must be queued onto the `this.requests` queue.
   *   When an upload starts, we store the tus.Upload instance, and an EventTracker instance that manages the event listeners
   *   for pausing, cancellation, removal, etc.
   * - While the upload is in progress, it may be paused or cancelled.
   *   Pausing aborts the underlying tus.Upload, and removes the upload from the `this.requests` queue. All other state is
   *   maintained.
   *   Cancelling removes the upload from the `this.requests` queue, and completely aborts the upload-- the `tus.Upload`
   *   instance is aborted and discarded, the EventTracker instance is destroyed (removing all listeners).
   *   Resuming the upload uses the `this.requests` queue as well, to prevent selectively pausing and resuming uploads from
   *   bypassing the limit.
   * - After completing an upload, the tus.Upload and EventTracker instances are cleaned up, and the upload is marked as done
   *   in the `this.requests` queue.
   * - When an upload completed with an error, the same happens as on successful completion, but the `upload()` promise is
   *   rejected.
   *
   * When working on this function, keep in mind:
   *  - When an upload is completed or cancelled for any reason, the tus.Upload and EventTracker instances need to be cleaned
   *    up using this.resetUploaderReferences().
   *  - When an upload is cancelled or paused, for any reason, it needs to be removed from the `this.requests` queue using
   *    `queuedRequest.abort()`.
   *  - When an upload is completed for any reason, including errors, it needs to be marked as such using
   *    `queuedRequest.done()`.
   *  - When an upload is started or resumed, it needs to go through the `this.requests` queue. The `queuedRequest` variable
   *    must be updated so the other uses of it are valid.
   *  - Before replacing the `queuedRequest` variable, the previous `queuedRequest` must be aborted, else it will keep taking
   *    up a spot in the queue.
   *
   * @param {UppyFile} file for use with upload
   * @param {number} current file in a queue
   * @param {number} total number of files in a queue
   * @returns {Promise<void>}
   */


  upload(file) {
    this.resetUploaderReferences(file.id); // Create a new tus upload

    return new Promise((resolve, reject) => {
      this.uppy.emit('upload-started', file);
      const opts = { ...this.opts,
        ...(file.tus || {})
      };

      if (typeof opts.headers === 'function') {
        opts.headers = opts.headers(file);
      }
      /** @type {RawTusOptions} */


      const uploadOptions = { ...tusDefaultOptions,
        ...opts
      }; // We override tus fingerprint to uppy’s `file.id`, since the `file.id`
      // now also includes `relativePath` for files added from folders.
      // This means you can add 2 identical files, if one is in folder a,
      // the other in folder b.

      uploadOptions.fingerprint = getFingerprint(file);

      uploadOptions.onBeforeRequest = req => {
        const xhr = req.getUnderlyingObject();
        xhr.withCredentials = !!opts.withCredentials;

        if (typeof opts.onBeforeRequest === 'function') {
          opts.onBeforeRequest(req);
        }
      };

      uploadOptions.onError = err => {
        this.uppy.log(err);
        const xhr = err.originalRequest ? err.originalRequest.getUnderlyingObject() : null;

        if (isNetworkError(xhr)) {
          err = new NetworkError(err, xhr);
        }

        this.resetUploaderReferences(file.id);
        queuedRequest.done();
        this.uppy.emit('upload-error', file, err);
        reject(err);
      };

      uploadOptions.onProgress = (bytesUploaded, bytesTotal) => {
        this.onReceiveUploadUrl(file, upload.url);
        this.uppy.emit('upload-progress', file, {
          uploader: this,
          bytesUploaded,
          bytesTotal
        });
      };

      uploadOptions.onSuccess = () => {
        const uploadResp = {
          uploadURL: upload.url
        };
        this.resetUploaderReferences(file.id);
        queuedRequest.done();
        this.uppy.emit('upload-success', file, uploadResp);

        if (upload.url) {
          this.uppy.log(`Download ${upload.file.name} from ${upload.url}`);
        }

        resolve(upload);
      };

      const copyProp = (obj, srcProp, destProp) => {
        if (hasProperty(obj, srcProp) && !hasProperty(obj, destProp)) {
          obj[destProp] = obj[srcProp];
        }
      };
      /** @type {Record<string, string>} */


      const meta = {};
      const metaFields = Array.isArray(opts.metaFields) ? opts.metaFields // Send along all fields by default.
      : Object.keys(file.meta);
      metaFields.forEach(item => {
        meta[item] = file.meta[item];
      }); // tusd uses metadata fields 'filetype' and 'filename'

      copyProp(meta, 'type', 'filetype');
      copyProp(meta, 'name', 'filename');
      uploadOptions.metadata = meta;
      const upload = new tus.Upload(file.data, uploadOptions);
      this.uploaders[file.id] = upload;
      this.uploaderEvents[file.id] = new EventTracker(this.uppy);
      upload.findPreviousUploads().then(previousUploads => {
        const previousUpload = previousUploads[0];

        if (previousUpload) {
          this.uppy.log(`[Tus] Resuming upload of ${file.id} started at ${previousUpload.creationTime}`);
          upload.resumeFromPreviousUpload(previousUpload);
        }
      });
      let queuedRequest = this.requests.run(() => {
        if (!file.isPaused) {
          upload.start();
        } // Don't do anything here, the caller will take care of cancelling the upload itself
        // using resetUploaderReferences(). This is because resetUploaderReferences() has to be
        // called when this request is still in the queue, and has not been started yet, too. At
        // that point this cancellation function is not going to be called.
        // Also, we need to remove the request from the queue _without_ destroying everything
        // related to this upload to handle pauses.


        return () => {};
      });
      this.onFileRemove(file.id, targetFileID => {
        queuedRequest.abort();
        this.resetUploaderReferences(file.id, {
          abort: !!upload.url
        });
        resolve(`upload ${targetFileID} was removed`);
      });
      this.onPause(file.id, isPaused => {
        if (isPaused) {
          // Remove this file from the queue so another file can start in its place.
          queuedRequest.abort();
          upload.abort();
        } else {
          // Resuming an upload should be queued, else you could pause and then
          // resume a queued upload to make it skip the queue.
          queuedRequest.abort();
          queuedRequest = this.requests.run(() => {
            upload.start();
            return () => {};
          });
        }
      });
      this.onPauseAll(file.id, () => {
        queuedRequest.abort();
        upload.abort();
      });
      this.onCancelAll(file.id, () => {
        queuedRequest.abort();
        this.resetUploaderReferences(file.id, {
          abort: !!upload.url
        });
        resolve(`upload ${file.id} was canceled`);
      });
      this.onResumeAll(file.id, () => {
        queuedRequest.abort();

        if (file.error) {
          upload.abort();
        }

        queuedRequest = this.requests.run(() => {
          upload.start();
          return () => {};
        });
      });
    }).catch(err => {
      this.uppy.emit('upload-error', file, err);
      throw err;
    });
  }
  /**
   * @param {UppyFile} file for use with upload
   * @param {number} current file in a queue
   * @param {number} total number of files in a queue
   * @returns {Promise<void>}
   */


  uploadRemote(file) {
    this.resetUploaderReferences(file.id);
    const opts = { ...this.opts
    };

    if (file.tus) {
      // Install file-specific upload overrides.
      Object.assign(opts, file.tus);
    }

    this.uppy.emit('upload-started', file);
    this.uppy.log(file.remote.url);

    if (file.serverToken) {
      return this.connectToServerSocket(file);
    }

    return new Promise((resolve, reject) => {
      const Client = file.remote.providerOptions.provider ? Provider : RequestClient;
      const client = new Client(this.uppy, file.remote.providerOptions); // !! cancellation is NOT supported at this stage yet

      client.post(file.remote.url, { ...file.remote.body,
        endpoint: opts.endpoint,
        uploadUrl: opts.uploadUrl,
        protocol: 'tus',
        size: file.data.size,
        headers: opts.headers,
        metadata: file.meta
      }).then(res => {
        this.uppy.setFileState(file.id, {
          serverToken: res.token
        });
        file = this.uppy.getFile(file.id);
        return this.connectToServerSocket(file);
      }).then(() => {
        resolve();
      }).catch(err => {
        this.uppy.emit('upload-error', file, err);
        reject(err);
      });
    });
  }
  /**
   * See the comment on the upload() method.
   *
   * Additionally, when an upload is removed, completed, or cancelled, we need to close the WebSocket connection. This is
   * handled by the resetUploaderReferences() function, so the same guidelines apply as in upload().
   *
   * @param {UppyFile} file
   */


  connectToServerSocket(file) {
    return new Promise((resolve, reject) => {
      const token = file.serverToken;
      const host = getSocketHost(file.remote.companionUrl);
      const socket = new Socket({
        target: `${host}/api/${token}`,
        autoOpen: false
      });
      this.uploaderSockets[file.id] = socket;
      this.uploaderEvents[file.id] = new EventTracker(this.uppy);
      this.onFileRemove(file.id, () => {
        queuedRequest.abort();
        socket.send('cancel', {});
        this.resetUploaderReferences(file.id);
        resolve(`upload ${file.id} was removed`);
      });
      this.onPause(file.id, isPaused => {
        if (isPaused) {
          // Remove this file from the queue so another file can start in its place.
          queuedRequest.abort();
          socket.send('pause', {});
        } else {
          // Resuming an upload should be queued, else you could pause and then
          // resume a queued upload to make it skip the queue.
          queuedRequest.abort();
          queuedRequest = this.requests.run(() => {
            socket.send('resume', {});
            return () => {};
          });
        }
      });
      this.onPauseAll(file.id, () => {
        queuedRequest.abort();
        socket.send('pause', {});
      });
      this.onCancelAll(file.id, () => {
        queuedRequest.abort();
        socket.send('cancel', {});
        this.resetUploaderReferences(file.id);
        resolve(`upload ${file.id} was canceled`);
      });
      this.onResumeAll(file.id, () => {
        queuedRequest.abort();

        if (file.error) {
          socket.send('pause', {});
        }

        queuedRequest = this.requests.run(() => {
          socket.send('resume', {});
          return () => {};
        });
      });
      this.onRetry(file.id, () => {
        // Only do the retry if the upload is actually in progress;
        // else we could try to send these messages when the upload is still queued.
        // We may need a better check for this since the socket may also be closed
        // for other reasons, like network failures.
        if (socket.isOpen) {
          socket.send('pause', {});
          socket.send('resume', {});
        }
      });
      this.onRetryAll(file.id, () => {
        // See the comment in the onRetry() call
        if (socket.isOpen) {
          socket.send('pause', {});
          socket.send('resume', {});
        }
      });
      socket.on('progress', progressData => emitSocketProgress(this, progressData, file));
      socket.on('error', errData => {
        const {
          message
        } = errData.error;
        const error = Object.assign(new Error(message), {
          cause: errData.error
        }); // If the remote retry optimisation should not be used,
        // close the socket—this will tell companion to clear state and delete the file.

        if (!this.opts.useFastRemoteRetry) {
          this.resetUploaderReferences(file.id); // Remove the serverToken so that a new one will be created for the retry.

          this.uppy.setFileState(file.id, {
            serverToken: null
          });
        } else {
          socket.close();
        }

        this.uppy.emit('upload-error', file, error);
        queuedRequest.done();
        reject(error);
      });
      socket.on('success', data => {
        const uploadResp = {
          uploadURL: data.url
        };
        this.uppy.emit('upload-success', file, uploadResp);
        this.resetUploaderReferences(file.id);
        queuedRequest.done();
        resolve();
      });
      let queuedRequest = this.requests.run(() => {
        socket.open();

        if (file.isPaused) {
          socket.send('pause', {});
        } // Don't do anything here, the caller will take care of cancelling the upload itself
        // using resetUploaderReferences(). This is because resetUploaderReferences() has to be
        // called when this request is still in the queue, and has not been started yet, too. At
        // that point this cancellation function is not going to be called.
        // Also, we need to remove the request from the queue _without_ destroying everything
        // related to this upload to handle pauses.


        return () => {};
      });
    });
  }
  /**
   * Store the uploadUrl on the file options, so that when Golden Retriever
   * restores state, we will continue uploading to the correct URL.
   *
   * @param {UppyFile} file
   * @param {string} uploadURL
   */


  onReceiveUploadUrl(file, uploadURL) {
    const currentFile = this.uppy.getFile(file.id);
    if (!currentFile) return; // Only do the update if we didn't have an upload URL yet.

    if (!currentFile.tus || currentFile.tus.uploadUrl !== uploadURL) {
      this.uppy.log('[Tus] Storing upload url');
      this.uppy.setFileState(currentFile.id, {
        tus: { ...currentFile.tus,
          uploadUrl: uploadURL
        }
      });
    }
  }
  /**
   * @param {string} fileID
   * @param {function(string): void} cb
   */


  onFileRemove(fileID, cb) {
    this.uploaderEvents[fileID].on('file-removed', file => {
      if (fileID === file.id) cb(file.id);
    });
  }
  /**
   * @param {string} fileID
   * @param {function(boolean): void} cb
   */


  onPause(fileID, cb) {
    this.uploaderEvents[fileID].on('upload-pause', (targetFileID, isPaused) => {
      if (fileID === targetFileID) {
        // const isPaused = this.uppy.pauseResume(fileID)
        cb(isPaused);
      }
    });
  }
  /**
   * @param {string} fileID
   * @param {function(): void} cb
   */


  onRetry(fileID, cb) {
    this.uploaderEvents[fileID].on('upload-retry', targetFileID => {
      if (fileID === targetFileID) {
        cb();
      }
    });
  }
  /**
   * @param {string} fileID
   * @param {function(): void} cb
   */


  onRetryAll(fileID, cb) {
    this.uploaderEvents[fileID].on('retry-all', () => {
      if (!this.uppy.getFile(fileID)) return;
      cb();
    });
  }
  /**
   * @param {string} fileID
   * @param {function(): void} cb
   */


  onPauseAll(fileID, cb) {
    this.uploaderEvents[fileID].on('pause-all', () => {
      if (!this.uppy.getFile(fileID)) return;
      cb();
    });
  }
  /**
   * @param {string} fileID
   * @param {function(): void} cb
   */


  onCancelAll(fileID, cb) {
    this.uploaderEvents[fileID].on('cancel-all', () => {
      if (!this.uppy.getFile(fileID)) return;
      cb();
    });
  }
  /**
   * @param {string} fileID
   * @param {function(): void} cb
   */


  onResumeAll(fileID, cb) {
    this.uploaderEvents[fileID].on('resume-all', () => {
      if (!this.uppy.getFile(fileID)) return;
      cb();
    });
  }
  /**
   * @param {(UppyFile | FailedUppyFile)[]} files
   */


  uploadFiles(files) {
    const promises = files.map((file, i) => {
      const current = i + 1;
      const total = files.length;

      if ('error' in file && file.error) {
        return Promise.reject(new Error(file.error));
      }

      if (file.isRemote) {
        // We emit upload-started here, so that it's also emitted for files
        // that have to wait due to the `limit` option.
        // Don't double-emit upload-started for Golden Retriever-restored files that were already started
        if (!file.progress.uploadStarted || !file.isRestored) {
          this.uppy.emit('upload-started', file);
        }

        return this.uploadRemote(file, current, total);
      } // Don't double-emit upload-started for Golden Retriever-restored files that were already started


      if (!file.progress.uploadStarted || !file.isRestored) {
        this.uppy.emit('upload-started', file);
      }

      return this.upload(file, current, total);
    });
    return settle(promises);
  }
  /**
   * @param {string[]} fileIDs
   */


  handleUpload(fileIDs) {
    if (fileIDs.length === 0) {
      this.uppy.log('[Tus] No files to upload');
      return Promise.resolve();
    }

    if (this.opts.limit === 0) {
      this.uppy.log('[Tus] When uploading multiple files at once, consider setting the `limit` option (to `10` for example), to limit the number of concurrent uploads, which helps prevent memory and network issues: https://uppy.io/docs/tus/#limit-0', 'warning');
    }

    this.uppy.log('[Tus] Uploading...');
    const filesToUpload = fileIDs.map(fileID => this.uppy.getFile(fileID));
    return this.uploadFiles(filesToUpload).then(() => null);
  }

  install() {
    this.uppy.setState({
      capabilities: { ...this.uppy.getState().capabilities,
        resumableUploads: true
      }
    });
    this.uppy.addUploader(this.handleUpload);
    this.uppy.on('reset-progress', this.handleResetProgress);
  }

  uninstall() {
    this.uppy.setState({
      capabilities: { ...this.uppy.getState().capabilities,
        resumableUploads: false
      }
    });
    this.uppy.removeUploader(this.handleUpload);
  }

}, _class.VERSION = "2.1.1", _temp);

},{"./../../companion-client":81,"./../../core/lib/BasePlugin":83,"./../../utils/lib/EventTracker":187,"./../../utils/lib/NetworkError":189,"./../../utils/lib/RateLimitedQueue":190,"./../../utils/lib/emitSocketProgress":194,"./../../utils/lib/getSocketHost":208,"./../../utils/lib/hasProperty":212,"./../../utils/lib/isNetworkError":215,"./../../utils/lib/settle":222,"./getFingerprint":181,"tus-js-client":63}],183:[function(require,module,exports){
"use strict";

const {
  h,
  Component
} = require('preact');

class UrlUI extends Component {
  constructor(props) {
    super(props);
    this.handleKeyPress = this.handleKeyPress.bind(this);
    this.handleClick = this.handleClick.bind(this);
  }

  componentDidMount() {
    this.input.value = '';
  }

  handleKeyPress(ev) {
    if (ev.keyCode === 13) {
      this.props.addFile(this.input.value);
    }
  }

  handleClick() {
    this.props.addFile(this.input.value);
  }

  render() {
    return h("div", {
      className: "uppy-Url"
    }, h("input", {
      className: "uppy-u-reset uppy-c-textInput uppy-Url-input",
      type: "text",
      "aria-label": this.props.i18n('enterUrlToImport'),
      placeholder: this.props.i18n('enterUrlToImport'),
      onKeyUp: this.handleKeyPress,
      ref: input => {
        this.input = input;
      },
      "data-uppy-super-focusable": true
    }), h("button", {
      className: "uppy-u-reset uppy-c-btn uppy-c-btn-primary uppy-Url-importButton",
      type: "button",
      onClick: this.handleClick
    }, this.props.i18n('import')));
  }

}

module.exports = UrlUI;

},{"preact":35}],184:[function(require,module,exports){
"use strict";

var _class, _temp;

const {
  UIPlugin
} = require('./../../core');

const {
  h
} = require('preact');

const {
  RequestClient
} = require('./../../companion-client');

const toArray = require('./../../utils/lib/toArray');

const UrlUI = require('./UrlUI.js');

const forEachDroppedOrPastedUrl = require('./utils/forEachDroppedOrPastedUrl');

const locale = require('./locale');

function UrlIcon() {
  return h("svg", {
    "aria-hidden": "true",
    focusable: "false",
    width: "32",
    height: "32",
    viewBox: "0 0 32 32"
  }, h("g", {
    fill: "none",
    fillRule: "evenodd"
  }, h("rect", {
    className: "uppy-ProviderIconBg",
    fill: "#FF753E",
    width: "32",
    height: "32",
    rx: "16"
  }), h("path", {
    d: "M22.788 15.389l-2.199 2.19a3.184 3.184 0 0 1-.513.437c-.806.584-1.686.876-2.638.876a4.378 4.378 0 0 1-3.519-1.752c-.22-.292-.146-.802.147-1.021.293-.22.806-.146 1.026.146.953 1.313 2.785 1.532 4.105.583a.571.571 0 0 0 .293-.292l2.199-2.189c1.1-1.167 1.1-2.992-.073-4.086a2.976 2.976 0 0 0-4.105 0l-1.246 1.24a.71.71 0 0 1-1.026 0 .703.703 0 0 1 0-1.022l1.246-1.24a4.305 4.305 0 0 1 6.083 0c1.833 1.605 1.906 4.451.22 6.13zm-7.183 5.035l-1.246 1.24a2.976 2.976 0 0 1-4.105 0c-1.172-1.094-1.172-2.991-.073-4.086l2.2-2.19.292-.291c.66-.438 1.393-.657 2.2-.584.805.146 1.465.51 1.905 1.168.22.292.733.365 1.026.146.293-.22.367-.73.147-1.022-.733-.949-1.76-1.532-2.859-1.678-1.1-.22-2.272.073-3.225.802l-.44.438-2.199 2.19c-1.686 1.75-1.612 4.524.074 6.202.88.803 1.979 1.241 3.078 1.241 1.1 0 2.199-.438 3.079-1.24l1.246-1.241a.703.703 0 0 0 0-1.022c-.294-.292-.807-.365-1.1-.073z",
    fill: "#FFF",
    fillRule: "nonzero"
  })));
}
/**
 * Url
 *
 */


module.exports = (_temp = _class = class Url extends UIPlugin {
  constructor(uppy, opts) {
    super(uppy, opts);
    this.id = this.opts.id || 'Url';
    this.title = this.opts.title || 'Link';
    this.type = 'acquirer';

    this.icon = () => h(UrlIcon, null); // Set default options and locale


    this.defaultLocale = locale;
    const defaultOptions = {};
    this.opts = { ...defaultOptions,
      ...opts
    };
    this.i18nInit();
    this.hostname = this.opts.companionUrl;

    if (!this.hostname) {
      throw new Error('Companion hostname is required, please consult https://uppy.io/docs/companion');
    } // Bind all event handlers for referencability


    this.getMeta = this.getMeta.bind(this);
    this.addFile = this.addFile.bind(this);
    this.handleRootDrop = this.handleRootDrop.bind(this);
    this.handleRootPaste = this.handleRootPaste.bind(this);
    this.client = new RequestClient(uppy, {
      companionUrl: this.opts.companionUrl,
      companionHeaders: this.opts.companionHeaders,
      companionCookiesRule: this.opts.companionCookiesRule
    });
  }

  getFileNameFromUrl(url) {
    return url.substring(url.lastIndexOf('/') + 1);
  }

  checkIfCorrectURL(url) {
    if (!url) return false;
    const protocol = url.match(/^([a-z0-9]+):\/\//)[1];

    if (protocol !== 'http' && protocol !== 'https') {
      return false;
    }

    return true;
  }

  addProtocolToURL(url) {
    const protocolRegex = /^[a-z0-9]+:\/\//;
    const defaultProtocol = 'http://';

    if (protocolRegex.test(url)) {
      return url;
    }

    return defaultProtocol + url;
  }

  getMeta(url) {
    return this.client.post('url/meta', {
      url
    }).then(res => {
      if (res.error) {
        this.uppy.log('[URL] Error:');
        this.uppy.log(res.error);
        throw new Error('Failed to fetch the file');
      }

      return res;
    });
  }

  addFile(url) {
    url = this.addProtocolToURL(url);

    if (!this.checkIfCorrectURL(url)) {
      this.uppy.log(`[URL] Incorrect URL entered: ${url}`);
      this.uppy.info(this.i18n('enterCorrectUrl'), 'error', 4000);
      return;
    }

    return this.getMeta(url).then(meta => {
      const tagFile = {
        source: this.id,
        name: this.getFileNameFromUrl(url),
        type: meta.type,
        data: {
          size: meta.size
        },
        isRemote: true,
        body: {
          url
        },
        remote: {
          companionUrl: this.opts.companionUrl,
          url: `${this.hostname}/url/get`,
          body: {
            fileId: url,
            url
          },
          providerOptions: this.client.opts
        }
      };
      return tagFile;
    }).then(tagFile => {
      this.uppy.log('[Url] Adding remote file');

      try {
        return this.uppy.addFile(tagFile);
      } catch (err) {
        if (!err.isRestriction) {
          this.uppy.log(err);
        }

        return err;
      }
    }).catch(err => {
      this.uppy.log(err);
      this.uppy.info({
        message: this.i18n('failedToFetch'),
        details: err
      }, 'error', 4000);
      return err;
    });
  }

  canHandleRootDrop(e) {
    const items = toArray(e.dataTransfer.items);
    const urls = items.filter(item => item.kind === 'string' && item.type === 'text/uri-list');
    return urls.length > 0;
  }

  handleRootDrop(e) {
    forEachDroppedOrPastedUrl(e.dataTransfer, 'drop', url => {
      this.uppy.log(`[URL] Adding file from dropped url: ${url}`);
      this.addFile(url);
    });
  }

  handleRootPaste(e) {
    forEachDroppedOrPastedUrl(e.clipboardData, 'paste', url => {
      this.uppy.log(`[URL] Adding file from pasted url: ${url}`);
      this.addFile(url);
    });
  }

  render() {
    return h(UrlUI, {
      i18n: this.i18n,
      addFile: this.addFile
    });
  }

  install() {
    const {
      target
    } = this.opts;

    if (target) {
      this.mount(target, this);
    }
  }

  uninstall() {
    this.unmount();
  }

}, _class.VERSION = "2.0.4", _temp);

},{"./../../companion-client":81,"./../../core":87,"./../../utils/lib/toArray":223,"./UrlUI.js":183,"./locale":185,"./utils/forEachDroppedOrPastedUrl":186,"preact":35}],185:[function(require,module,exports){
"use strict";

module.exports = {
  strings: {
    // Label for the "Import" button.
    import: 'Import',
    // Placeholder text for the URL input.
    enterUrlToImport: 'Enter URL to import a file',
    // Error message shown if Companion could not load a URL.
    failedToFetch: 'Companion failed to fetch this URL, please make sure it’s correct',
    // Error message shown if the input does not look like a URL.
    enterCorrectUrl: 'Incorrect URL: Please make sure you are entering a direct link to a file'
  }
};

},{}],186:[function(require,module,exports){
"use strict";

const toArray = require('./../../../utils/lib/toArray');
/*
  SITUATION

    1. Cross-browser dataTransfer.items

      paste in chrome [Copy Image]:
      0: {kind: "file", type: "image/png"}
      1: {kind: "string", type: "text/html"}
      paste in safari [Copy Image]:
      0: {kind: "file", type: "image/png"}
      1: {kind: "string", type: "text/html"}
      2: {kind: "string", type: "text/plain"}
      3: {kind: "string", type: "text/uri-list"}
      paste in firefox [Copy Image]:
      0: {kind: "file", type: "image/png"}
      1: {kind: "string", type: "text/html"}

      paste in chrome [Copy Image Address]:
      0: {kind: "string", type: "text/plain"}
      paste in safari [Copy Image Address]:
      0: {kind: "string", type: "text/plain"}
      1: {kind: "string", type: "text/uri-list"}
      paste in firefox [Copy Image Address]:
      0: {kind: "string", type: "text/plain"}

      drop in chrome [from browser]:
      0: {kind: "string", type: "text/uri-list"}
      1: {kind: "string", type: "text/html"}
      drop in safari [from browser]:
      0: {kind: "string", type: "text/uri-list"}
      1: {kind: "string", type: "text/html"}
      2: {kind: "file", type: "image/png"}
      drop in firefox [from browser]:
      0: {kind: "string", type: "text/uri-list"}
      1: {kind: "string", type: "text/x-moz-url"}
      2: {kind: "string", type: "text/plain"}

    2. We can determine if it's a 'copypaste' or a 'drop', but we can't discern between [Copy Image] and [Copy Image Address]

  CONCLUSION

    1. 'paste' ([Copy Image] or [Copy Image Address], we can't discern between these two)
      Don't do anything if there is 'file' item. .handlePaste in the DashboardPlugin will deal with all 'file' items.
      If there are no 'file' items - handle 'text/plain' items.

    2. 'drop'
      Take 'text/uri-list' items. Safari has an additional item of .kind === 'file', and you may worry about the item being
      duplicated (first by DashboardPlugin, and then by UrlPlugin, now), but don't. Directory handling code won't pay
      attention to this particular item of kind 'file'.
*/

/**
 * Finds all links dropped/pasted from one browser window to another.
 *
 * @param {object} dataTransfer - DataTransfer instance, e.g. e.clipboardData, or e.dataTransfer
 * @param {string} isDropOrPaste - either 'drop' or 'paste'
 * @param {Function} callback - (urlString) => {}
 */


module.exports = function forEachDroppedOrPastedUrl(dataTransfer, isDropOrPaste, callback) {
  const items = toArray(dataTransfer.items);
  let urlItems;

  switch (isDropOrPaste) {
    case 'paste':
      {
        const atLeastOneFileIsDragged = items.some(item => item.kind === 'file');

        if (atLeastOneFileIsDragged) {
          return;
        }

        urlItems = items.filter(item => item.kind === 'string' && item.type === 'text/plain');
        break;
      }

    case 'drop':
      {
        urlItems = items.filter(item => item.kind === 'string' && item.type === 'text/uri-list');
        break;
      }

    default:
      {
        throw new Error(`isDropOrPaste must be either 'drop' or 'paste', but it's ${isDropOrPaste}`);
      }
  }

  urlItems.forEach(item => {
    item.getAsString(urlString => callback(urlString));
  });
};

},{"./../../../utils/lib/toArray":223}],187:[function(require,module,exports){
"use strict";

var _emitter, _events;

function _classPrivateFieldLooseBase(receiver, privateKey) { if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) { throw new TypeError("attempted to use private field on non-instance"); } return receiver; }

var id = 0;

function _classPrivateFieldLooseKey(name) { return "__private_" + id++ + "_" + name; }

/**
 * Create a wrapper around an event emitter with a `remove` method to remove
 * all events that were added using the wrapped emitter.
 */
module.exports = (_emitter = /*#__PURE__*/_classPrivateFieldLooseKey("emitter"), _events = /*#__PURE__*/_classPrivateFieldLooseKey("events"), class EventTracker {
  constructor(emitter) {
    Object.defineProperty(this, _emitter, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _events, {
      writable: true,
      value: []
    });
    _classPrivateFieldLooseBase(this, _emitter)[_emitter] = emitter;
  }

  on(event, fn) {
    _classPrivateFieldLooseBase(this, _events)[_events].push([event, fn]);

    return _classPrivateFieldLooseBase(this, _emitter)[_emitter].on(event, fn);
  }

  remove() {
    for (const [event, fn] of _classPrivateFieldLooseBase(this, _events)[_events].splice(0)) {
      _classPrivateFieldLooseBase(this, _emitter)[_emitter].off(event, fn);
    }
  }

});

},{}],188:[function(require,module,exports){
"use strict";

module.exports = ['a[href]:not([tabindex^="-"]):not([inert]):not([aria-hidden])', 'area[href]:not([tabindex^="-"]):not([inert]):not([aria-hidden])', 'input:not([disabled]):not([inert]):not([aria-hidden])', 'select:not([disabled]):not([inert]):not([aria-hidden])', 'textarea:not([disabled]):not([inert]):not([aria-hidden])', 'button:not([disabled]):not([inert]):not([aria-hidden])', 'iframe:not([tabindex^="-"]):not([inert]):not([aria-hidden])', 'object:not([tabindex^="-"]):not([inert]):not([aria-hidden])', 'embed:not([tabindex^="-"]):not([inert]):not([aria-hidden])', '[contenteditable]:not([tabindex^="-"]):not([inert]):not([aria-hidden])', '[tabindex]:not([tabindex^="-"]):not([inert]):not([aria-hidden])'];

},{}],189:[function(require,module,exports){
"use strict";

class NetworkError extends Error {
  constructor(error, xhr) {
    if (xhr === void 0) {
      xhr = null;
    }

    super(`This looks like a network error, the endpoint might be blocked by an internet provider or a firewall.`);
    this.cause = error;
    this.isNetworkError = true;
    this.request = xhr;
  }

}

module.exports = NetworkError;

},{}],190:[function(require,module,exports){
"use strict";

function _classPrivateFieldLooseBase(receiver, privateKey) { if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) { throw new TypeError("attempted to use private field on non-instance"); } return receiver; }

var id = 0;

function _classPrivateFieldLooseKey(name) { return "__private_" + id++ + "_" + name; }

function createCancelError() {
  return new Error('Cancelled');
}

var _activeRequests = /*#__PURE__*/_classPrivateFieldLooseKey("activeRequests");

var _queuedHandlers = /*#__PURE__*/_classPrivateFieldLooseKey("queuedHandlers");

var _call = /*#__PURE__*/_classPrivateFieldLooseKey("call");

var _queueNext = /*#__PURE__*/_classPrivateFieldLooseKey("queueNext");

var _next = /*#__PURE__*/_classPrivateFieldLooseKey("next");

var _queue = /*#__PURE__*/_classPrivateFieldLooseKey("queue");

var _dequeue = /*#__PURE__*/_classPrivateFieldLooseKey("dequeue");

class RateLimitedQueue {
  constructor(limit) {
    Object.defineProperty(this, _dequeue, {
      value: _dequeue2
    });
    Object.defineProperty(this, _queue, {
      value: _queue2
    });
    Object.defineProperty(this, _next, {
      value: _next2
    });
    Object.defineProperty(this, _queueNext, {
      value: _queueNext2
    });
    Object.defineProperty(this, _call, {
      value: _call2
    });
    Object.defineProperty(this, _activeRequests, {
      writable: true,
      value: 0
    });
    Object.defineProperty(this, _queuedHandlers, {
      writable: true,
      value: []
    });

    if (typeof limit !== 'number' || limit === 0) {
      this.limit = Infinity;
    } else {
      this.limit = limit;
    }
  }

  run(fn, queueOptions) {
    if (_classPrivateFieldLooseBase(this, _activeRequests)[_activeRequests] < this.limit) {
      return _classPrivateFieldLooseBase(this, _call)[_call](fn);
    }

    return _classPrivateFieldLooseBase(this, _queue)[_queue](fn, queueOptions);
  }

  wrapPromiseFunction(fn, queueOptions) {
    var _this = this;

    return function () {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      let queuedRequest;
      const outerPromise = new Promise((resolve, reject) => {
        queuedRequest = _this.run(() => {
          let cancelError;
          let innerPromise;

          try {
            innerPromise = Promise.resolve(fn(...args));
          } catch (err) {
            innerPromise = Promise.reject(err);
          }

          innerPromise.then(result => {
            if (cancelError) {
              reject(cancelError);
            } else {
              queuedRequest.done();
              resolve(result);
            }
          }, err => {
            if (cancelError) {
              reject(cancelError);
            } else {
              queuedRequest.done();
              reject(err);
            }
          });
          return () => {
            cancelError = createCancelError();
          };
        }, queueOptions);
      });

      outerPromise.abort = () => {
        queuedRequest.abort();
      };

      return outerPromise;
    };
  }

}

function _call2(fn) {
  _classPrivateFieldLooseBase(this, _activeRequests)[_activeRequests] += 1;
  let done = false;
  let cancelActive;

  try {
    cancelActive = fn();
  } catch (err) {
    _classPrivateFieldLooseBase(this, _activeRequests)[_activeRequests] -= 1;
    throw err;
  }

  return {
    abort: () => {
      if (done) return;
      done = true;
      _classPrivateFieldLooseBase(this, _activeRequests)[_activeRequests] -= 1;
      cancelActive();

      _classPrivateFieldLooseBase(this, _queueNext)[_queueNext]();
    },
    done: () => {
      if (done) return;
      done = true;
      _classPrivateFieldLooseBase(this, _activeRequests)[_activeRequests] -= 1;

      _classPrivateFieldLooseBase(this, _queueNext)[_queueNext]();
    }
  };
}

function _queueNext2() {
  // Do it soon but not immediately, this allows clearing out the entire queue synchronously
  // one by one without continuously _advancing_ it (and starting new tasks before immediately
  // aborting them)
  queueMicrotask(() => _classPrivateFieldLooseBase(this, _next)[_next]());
}

function _next2() {
  if (_classPrivateFieldLooseBase(this, _activeRequests)[_activeRequests] >= this.limit) {
    return;
  }

  if (_classPrivateFieldLooseBase(this, _queuedHandlers)[_queuedHandlers].length === 0) {
    return;
  } // Dispatch the next request, and update the abort/done handlers
  // so that cancelling it does the Right Thing (and doesn't just try
  // to dequeue an already-running request).


  const next = _classPrivateFieldLooseBase(this, _queuedHandlers)[_queuedHandlers].shift();

  const handler = _classPrivateFieldLooseBase(this, _call)[_call](next.fn);

  next.abort = handler.abort;
  next.done = handler.done;
}

function _queue2(fn, options) {
  if (options === void 0) {
    options = {};
  }

  const handler = {
    fn,
    priority: options.priority || 0,
    abort: () => {
      _classPrivateFieldLooseBase(this, _dequeue)[_dequeue](handler);
    },
    done: () => {
      throw new Error('Cannot mark a queued request as done: this indicates a bug');
    }
  };

  const index = _classPrivateFieldLooseBase(this, _queuedHandlers)[_queuedHandlers].findIndex(other => {
    return handler.priority > other.priority;
  });

  if (index === -1) {
    _classPrivateFieldLooseBase(this, _queuedHandlers)[_queuedHandlers].push(handler);
  } else {
    _classPrivateFieldLooseBase(this, _queuedHandlers)[_queuedHandlers].splice(index, 0, handler);
  }

  return handler;
}

function _dequeue2(handler) {
  const index = _classPrivateFieldLooseBase(this, _queuedHandlers)[_queuedHandlers].indexOf(handler);

  if (index !== -1) {
    _classPrivateFieldLooseBase(this, _queuedHandlers)[_queuedHandlers].splice(index, 1);
  }
}

module.exports = {
  RateLimitedQueue,
  internalRateLimitedQueue: Symbol('__queue')
};

},{}],191:[function(require,module,exports){
"use strict";

var _apply;

function _classPrivateFieldLooseBase(receiver, privateKey) { if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) { throw new TypeError("attempted to use private field on non-instance"); } return receiver; }

var id = 0;

function _classPrivateFieldLooseKey(name) { return "__private_" + id++ + "_" + name; }

const has = require('./hasProperty');

function insertReplacement(source, rx, replacement) {
  const newParts = [];
  source.forEach(chunk => {
    // When the source contains multiple placeholders for interpolation,
    // we should ignore chunks that are not strings, because those
    // can be JSX objects and will be otherwise incorrectly turned into strings.
    // Without this condition we’d get this: [object Object] hello [object Object] my <button>
    if (typeof chunk !== 'string') {
      return newParts.push(chunk);
    }

    return rx[Symbol.split](chunk).forEach((raw, i, list) => {
      if (raw !== '') {
        newParts.push(raw);
      } // Interlace with the `replacement` value


      if (i < list.length - 1) {
        newParts.push(replacement);
      }
    });
  });
  return newParts;
}
/**
 * Takes a string with placeholder variables like `%{smart_count} file selected`
 * and replaces it with values from options `{smart_count: 5}`
 *
 * @license https://github.com/airbnb/polyglot.js/blob/master/LICENSE
 * taken from https://github.com/airbnb/polyglot.js/blob/master/lib/polyglot.js#L299
 *
 * @param {string} phrase that needs interpolation, with placeholders
 * @param {object} options with values that will be used to replace placeholders
 * @returns {any[]} interpolated
 */


function interpolate(phrase, options) {
  const dollarRegex = /\$/g;
  const dollarBillsYall = '$$$$';
  let interpolated = [phrase];
  if (options == null) return interpolated;

  for (const arg of Object.keys(options)) {
    if (arg !== '_') {
      // Ensure replacement value is escaped to prevent special $-prefixed
      // regex replace tokens. the "$$$$" is needed because each "$" needs to
      // be escaped with "$" itself, and we need two in the resulting output.
      let replacement = options[arg];

      if (typeof replacement === 'string') {
        replacement = dollarRegex[Symbol.replace](replacement, dollarBillsYall);
      } // We create a new `RegExp` each time instead of using a more-efficient
      // string replace so that the same argument can be replaced multiple times
      // in the same phrase.


      interpolated = insertReplacement(interpolated, new RegExp(`%\\{${arg}\\}`, 'g'), replacement);
    }
  }

  return interpolated;
}
/**
 * Translates strings with interpolation & pluralization support.
 * Extensible with custom dictionaries and pluralization functions.
 *
 * Borrows heavily from and inspired by Polyglot https://github.com/airbnb/polyglot.js,
 * basically a stripped-down version of it. Differences: pluralization functions are not hardcoded
 * and can be easily added among with dictionaries, nested objects are used for pluralization
 * as opposed to `||||` delimeter
 *
 * Usage example: `translator.translate('files_chosen', {smart_count: 3})`
 */


module.exports = (_apply = /*#__PURE__*/_classPrivateFieldLooseKey("apply"), class Translator {
  /**
   * @param {object|Array<object>} locales - locale or list of locales.
   */
  constructor(locales) {
    Object.defineProperty(this, _apply, {
      value: _apply2
    });
    this.locale = {
      strings: {},

      pluralize(n) {
        if (n === 1) {
          return 0;
        }

        return 1;
      }

    };

    if (Array.isArray(locales)) {
      locales.forEach(_classPrivateFieldLooseBase(this, _apply)[_apply], this);
    } else {
      _classPrivateFieldLooseBase(this, _apply)[_apply](locales);
    }
  }

  /**
   * Public translate method
   *
   * @param {string} key
   * @param {object} options with values that will be used later to replace placeholders in string
   * @returns {string} translated (and interpolated)
   */
  translate(key, options) {
    return this.translateArray(key, options).join('');
  }
  /**
   * Get a translation and return the translated and interpolated parts as an array.
   *
   * @param {string} key
   * @param {object} options with values that will be used to replace placeholders
   * @returns {Array} The translated and interpolated parts, in order.
   */


  translateArray(key, options) {
    if (!has(this.locale.strings, key)) {
      throw new Error(`missing string: ${key}`);
    }

    const string = this.locale.strings[key];
    const hasPluralForms = typeof string === 'object';

    if (hasPluralForms) {
      if (options && typeof options.smart_count !== 'undefined') {
        const plural = this.locale.pluralize(options.smart_count);
        return interpolate(string[plural], options);
      }

      throw new Error('Attempted to use a string with plural forms, but no value was given for %{smart_count}');
    }

    return interpolate(string, options);
  }

});

function _apply2(locale) {
  if (!(locale != null && locale.strings)) {
    return;
  }

  const prevLocale = this.locale;
  this.locale = { ...prevLocale,
    strings: { ...prevLocale.strings,
      ...locale.strings
    }
  };
  this.locale.pluralize = locale.pluralize || prevLocale.pluralize;
}

},{"./hasProperty":212}],192:[function(require,module,exports){
"use strict";

/**
 * Save a <canvas> element's content to a Blob object.
 *
 * @param {HTMLCanvasElement} canvas
 * @returns {Promise}
 */
module.exports = function canvasToBlob(canvas, type, quality) {
  return new Promise(resolve => {
    canvas.toBlob(resolve, type, quality);
  });
};

},{}],193:[function(require,module,exports){
"use strict";

const DATA_URL_PATTERN = /^data:([^/]+\/[^,;]+(?:[^,]*?))(;base64)?,([\s\S]*)$/;

module.exports = function dataURItoBlob(dataURI, opts, toFile) {
  var _ref, _opts$mimeType;

  // get the base64 data
  const dataURIData = DATA_URL_PATTERN.exec(dataURI); // user may provide mime type, if not get it from data URI

  const mimeType = (_ref = (_opts$mimeType = opts.mimeType) != null ? _opts$mimeType : dataURIData == null ? void 0 : dataURIData[1]) != null ? _ref : 'plain/text';
  let data;

  if (dataURIData[2] != null) {
    const binary = atob(decodeURIComponent(dataURIData[3]));
    const bytes = new Uint8Array(binary.length);

    for (let i = 0; i < binary.length; i++) {
      bytes[i] = binary.charCodeAt(i);
    }

    data = [bytes];
  } else {
    data = [decodeURIComponent(dataURIData[3])];
  } // Convert to a File?


  if (toFile) {
    return new File(data, opts.name || '', {
      type: mimeType
    });
  }

  return new Blob(data, {
    type: mimeType
  });
};

},{}],194:[function(require,module,exports){
"use strict";

const throttle = require('lodash.throttle');

function emitSocketProgress(uploader, progressData, file) {
  const {
    progress,
    bytesUploaded,
    bytesTotal
  } = progressData;

  if (progress) {
    uploader.uppy.log(`Upload progress: ${progress}`);
    uploader.uppy.emit('upload-progress', file, {
      uploader,
      bytesUploaded,
      bytesTotal
    });
  }
}

module.exports = throttle(emitSocketProgress, 300, {
  leading: true,
  trailing: true
});

},{"lodash.throttle":24}],195:[function(require,module,exports){
"use strict";

const NetworkError = require('./NetworkError');
/**
 * Wrapper around window.fetch that throws a NetworkError when appropriate
 */


module.exports = function fetchWithNetworkError() {
  return fetch(...arguments).catch(err => {
    if (err.name === 'AbortError') {
      throw err;
    } else {
      throw new NetworkError(err);
    }
  });
};

},{"./NetworkError":189}],196:[function(require,module,exports){
"use strict";

const isDOMElement = require('./isDOMElement');
/**
 * Find one or more DOM elements.
 *
 * @param {string|Node} element
 * @returns {Node[]|null}
 */


module.exports = function findAllDOMElements(element) {
  if (typeof element === 'string') {
    const elements = document.querySelectorAll(element);
    return elements.length === 0 ? null : Array.from(elements);
  }

  if (typeof element === 'object' && isDOMElement(element)) {
    return [element];
  }

  return null;
};

},{"./isDOMElement":213}],197:[function(require,module,exports){
"use strict";

const isDOMElement = require('./isDOMElement');
/**
 * Find a DOM element.
 *
 * @param {Node|string} element
 * @returns {Node|null}
 */


module.exports = function findDOMElement(element, context) {
  if (context === void 0) {
    context = document;
  }

  if (typeof element === 'string') {
    return context.querySelector(element);
  }

  if (isDOMElement(element)) {
    return element;
  }

  return null;
};

},{"./isDOMElement":213}],198:[function(require,module,exports){
"use strict";

function encodeCharacter(character) {
  return character.charCodeAt(0).toString(32);
}

function encodeFilename(name) {
  let suffix = '';
  return name.replace(/[^A-Z0-9]/ig, character => {
    suffix += `-${encodeCharacter(character)}`;
    return '/';
  }) + suffix;
}
/**
 * Takes a file object and turns it into fileID, by converting file.name to lowercase,
 * removing extra characters and adding type, size and lastModified
 *
 * @param {object} file
 * @returns {string} the fileID
 */


module.exports = function generateFileID(file) {
  // It's tempting to do `[items].filter(Boolean).join('-')` here, but that
  // is slower! simple string concatenation is fast
  let id = 'uppy';

  if (typeof file.name === 'string') {
    id += `-${encodeFilename(file.name.toLowerCase())}`;
  }

  if (file.type !== undefined) {
    id += `-${file.type}`;
  }

  if (file.meta && typeof file.meta.relativePath === 'string') {
    id += `-${encodeFilename(file.meta.relativePath.toLowerCase())}`;
  }

  if (file.data.size !== undefined) {
    id += `-${file.data.size}`;
  }

  if (file.data.lastModified !== undefined) {
    id += `-${file.data.lastModified}`;
  }

  return id;
};

},{}],199:[function(require,module,exports){
"use strict";

module.exports = function getBytesRemaining(fileProgress) {
  return fileProgress.bytesTotal - fileProgress.bytesUploaded;
};

},{}],200:[function(require,module,exports){
"use strict";

const webkitGetAsEntryApi = require('./utils/webkitGetAsEntryApi/index');

const fallbackApi = require('./utils/fallbackApi');
/**
 * Returns a promise that resolves to the array of dropped files (if a folder is
 * dropped, and browser supports folder parsing - promise resolves to the flat
 * array of all files in all directories).
 * Each file has .relativePath prop appended to it (e.g. "/docs/Prague/ticket_from_prague_to_ufa.pdf")
 * if browser supports it. Otherwise it's undefined.
 *
 * @param {DataTransfer} dataTransfer
 * @param {Function} logDropError - a function that's called every time some
 * folder or some file error out (e.g. because of the folder name being too long
 * on Windows). Notice that resulting promise will always be resolved anyway.
 *
 * @returns {Promise} - Array<File>
 */


module.exports = function getDroppedFiles(dataTransfer, _temp) {
  var _dataTransfer$items;

  let {
    logDropError = () => {}
  } = _temp === void 0 ? {} : _temp;

  // Get all files from all subdirs. Works (at least) in Chrome, Mozilla, and Safari
  if ((_dataTransfer$items = dataTransfer.items) != null && _dataTransfer$items[0] && 'webkitGetAsEntry' in dataTransfer.items[0]) {
    return webkitGetAsEntryApi(dataTransfer, logDropError); // Otherwise just return all first-order files
  }

  return fallbackApi(dataTransfer);
};

},{"./utils/fallbackApi":201,"./utils/webkitGetAsEntryApi/index":204}],201:[function(require,module,exports){
"use strict";

const toArray = require('../../toArray'); // .files fallback, should be implemented in any browser


module.exports = function fallbackApi(dataTransfer) {
  const files = toArray(dataTransfer.files);
  return Promise.resolve(files);
};

},{"../../toArray":223}],202:[function(require,module,exports){
"use strict";

/**
 * Recursive function, calls the original callback() when the directory is entirely parsed.
 *
 * @param {FileSystemDirectoryReader} directoryReader
 * @param {Array} oldEntries
 * @param {Function} logDropError
 * @param {Function} callback - called with ([ all files and directories in that directoryReader ])
 */
module.exports = function getFilesAndDirectoriesFromDirectory(directoryReader, oldEntries, logDropError, _ref) {
  let {
    onSuccess
  } = _ref;
  directoryReader.readEntries(entries => {
    const newEntries = [...oldEntries, ...entries]; // According to the FileSystem API spec, getFilesAndDirectoriesFromDirectory()
    // must be called until it calls the onSuccess with an empty array.

    if (entries.length) {
      setTimeout(() => {
        getFilesAndDirectoriesFromDirectory(directoryReader, newEntries, logDropError, {
          onSuccess
        });
      }, 0); // Done iterating this particular directory
    } else {
      onSuccess(newEntries);
    }
  }, // Make sure we resolve on error anyway, it's fine if only one directory couldn't be parsed!
  error => {
    logDropError(error);
    onSuccess(oldEntries);
  });
};

},{}],203:[function(require,module,exports){
"use strict";

/**
 * Get the relative path from the FileEntry#fullPath, because File#webkitRelativePath is always '', at least onDrop.
 *
 * @param {FileEntry} fileEntry
 *
 * @returns {string|null} - if file is not in a folder - return null (this is to
 * be consistent with .relativePath-s of files selected from My Device). If file
 * is in a folder - return its fullPath, e.g. '/simpsons/hi.jpeg'.
 */
module.exports = function getRelativePath(fileEntry) {
  // fileEntry.fullPath - "/simpsons/hi.jpeg" or undefined (for browsers that don't support it)
  // fileEntry.name - "hi.jpeg"
  if (!fileEntry.fullPath || fileEntry.fullPath === `/${fileEntry.name}`) {
    return null;
  }

  return fileEntry.fullPath;
};

},{}],204:[function(require,module,exports){
"use strict";

const toArray = require('../../../toArray');

const getRelativePath = require('./getRelativePath');

const getFilesAndDirectoriesFromDirectory = require('./getFilesAndDirectoriesFromDirectory');

module.exports = function webkitGetAsEntryApi(dataTransfer, logDropError) {
  const files = [];
  const rootPromises = [];
  /**
   * Returns a resolved promise, when :files array is enhanced
   *
   * @param {(FileSystemFileEntry|FileSystemDirectoryEntry)} entry
   * @returns {Promise} - empty promise that resolves when :files is enhanced with a file
   */

  const createPromiseToAddFileOrParseDirectory = entry => new Promise(resolve => {
    // This is a base call
    if (entry.isFile) {
      // Creates a new File object which can be used to read the file.
      entry.file(file => {
        // eslint-disable-next-line no-param-reassign
        file.relativePath = getRelativePath(entry);
        files.push(file);
        resolve();
      }, // Make sure we resolve on error anyway, it's fine if only one file couldn't be read!
      error => {
        logDropError(error);
        resolve();
      }); // This is a recursive call
    } else if (entry.isDirectory) {
      const directoryReader = entry.createReader();
      getFilesAndDirectoriesFromDirectory(directoryReader, [], logDropError, {
        onSuccess: entries => resolve(Promise.all(entries.map(createPromiseToAddFileOrParseDirectory)))
      });
    }
  }); // For each dropped item, - make sure it's a file/directory, and start deepening in!


  toArray(dataTransfer.items).forEach(item => {
    const entry = item.webkitGetAsEntry(); // :entry can be null when we drop the url e.g.

    if (entry) {
      rootPromises.push(createPromiseToAddFileOrParseDirectory(entry));
    }
  });
  return Promise.all(rootPromises).then(() => files);
};

},{"../../../toArray":223,"./getFilesAndDirectoriesFromDirectory":202,"./getRelativePath":203}],205:[function(require,module,exports){
"use strict";

/**
 * Takes a full filename string and returns an object {name, extension}
 *
 * @param {string} fullFileName
 * @returns {object} {name, extension}
 */
module.exports = function getFileNameAndExtension(fullFileName) {
  const lastDot = fullFileName.lastIndexOf('.'); // these count as no extension: "no-dot", "trailing-dot."

  if (lastDot === -1 || lastDot === fullFileName.length - 1) {
    return {
      name: fullFileName,
      extension: undefined
    };
  }

  return {
    name: fullFileName.slice(0, lastDot),
    extension: fullFileName.slice(lastDot + 1)
  };
};

},{}],206:[function(require,module,exports){
"use strict";

const getFileNameAndExtension = require('./getFileNameAndExtension');

const mimeTypes = require('./mimeTypes');

module.exports = function getFileType(file) {
  var _getFileNameAndExtens;

  if (file.type) return file.type;
  const fileExtension = file.name ? (_getFileNameAndExtens = getFileNameAndExtension(file.name).extension) == null ? void 0 : _getFileNameAndExtens.toLowerCase() : null;

  if (fileExtension && fileExtension in mimeTypes) {
    // else, see if we can map extension to a mime type
    return mimeTypes[fileExtension];
  } // if all fails, fall back to a generic byte stream type


  return 'application/octet-stream';
};

},{"./getFileNameAndExtension":205,"./mimeTypes":218}],207:[function(require,module,exports){
"use strict";

const mimeToExtensions = {
  'audio/mp3': 'mp3',
  'audio/mp4': 'mp4',
  'audio/ogg': 'ogg',
  'audio/webm': 'webm',
  'image/gif': 'gif',
  'image/heic': 'heic',
  'image/heif': 'heif',
  'image/jpeg': 'jpg',
  'image/png': 'png',
  'image/svg+xml': 'svg',
  'video/mp4': 'mp4',
  'video/ogg': 'ogv',
  'video/quicktime': 'mov',
  'video/webm': 'webm',
  'video/x-matroska': 'mkv',
  'video/x-msvideo': 'avi'
};

module.exports = function getFileTypeExtension(mimeType) {
  // Remove the ; bit in 'video/x-matroska;codecs=avc1'
  // eslint-disable-next-line no-param-reassign
  [mimeType] = mimeType.split(';', 1);
  return mimeToExtensions[mimeType] || null;
};

},{}],208:[function(require,module,exports){
"use strict";

module.exports = function getSocketHost(url) {
  // get the host domain
  const regex = /^(?:https?:\/\/|\/\/)?(?:[^@\n]+@)?(?:www\.)?([^\n]+)/i;
  const host = regex.exec(url)[1];
  const socketProtocol = /^http:\/\//i.test(url) ? 'ws' : 'wss';
  return `${socketProtocol}://${host}`;
};

},{}],209:[function(require,module,exports){
"use strict";

module.exports = function getSpeed(fileProgress) {
  if (!fileProgress.bytesUploaded) return 0;
  const timeElapsed = Date.now() - fileProgress.uploadStarted;
  const uploadSpeed = fileProgress.bytesUploaded / (timeElapsed / 1000);
  return uploadSpeed;
};

},{}],210:[function(require,module,exports){
"use strict";

/**
 * Get the declared text direction for an element.
 *
 * @param {Node} element
 * @returns {string|undefined}
 */
function getTextDirection(element) {
  var _element;

  // There is another way to determine text direction using getComputedStyle(), as done here:
  // https://github.com/pencil-js/text-direction/blob/2a235ce95089b3185acec3b51313cbba921b3811/text-direction.js
  //
  // We do not use that approach because we are interested specifically in the _declared_ text direction.
  // If no text direction is declared, we have to provide our own explicit text direction so our
  // bidirectional CSS style sheets work.
  while (element && !element.dir) {
    // eslint-disable-next-line no-param-reassign
    element = element.parentNode;
  }

  return (_element = element) == null ? void 0 : _element.dir;
}

module.exports = getTextDirection;

},{}],211:[function(require,module,exports){
"use strict";

/**
 * Adds zero to strings shorter than two characters.
 *
 * @param {number} number
 * @returns {string}
 */
function pad(number) {
  return number < 10 ? `0${number}` : number.toString();
}
/**
 * Returns a timestamp in the format of `hours:minutes:seconds`
 */


module.exports = function getTimeStamp() {
  const date = new Date();
  const hours = pad(date.getHours());
  const minutes = pad(date.getMinutes());
  const seconds = pad(date.getSeconds());
  return `${hours}:${minutes}:${seconds}`;
};

},{}],212:[function(require,module,exports){
"use strict";

module.exports = function has(object, key) {
  return Object.prototype.hasOwnProperty.call(object, key);
};

},{}],213:[function(require,module,exports){
"use strict";

/**
 * Check if an object is a DOM element. Duck-typing based on `nodeType`.
 *
 * @param {*} obj
 */
module.exports = function isDOMElement(obj) {
  return (obj == null ? void 0 : obj.nodeType) === Node.ELEMENT_NODE;
};

},{}],214:[function(require,module,exports){
"use strict";

/**
 * Checks if the browser supports Drag & Drop (not supported on mobile devices, for example).
 *
 * @returns {boolean}
 */
module.exports = function isDragDropSupported() {
  const div = document.body;

  if (!('draggable' in div) || !('ondragstart' in div && 'ondrop' in div)) {
    return false;
  }

  if (!('FormData' in window)) {
    return false;
  }

  if (!('FileReader' in window)) {
    return false;
  }

  return true;
};

},{}],215:[function(require,module,exports){
"use strict";

function isNetworkError(xhr) {
  if (!xhr) {
    return false;
  }

  return xhr.readyState !== 0 && xhr.readyState !== 4 || xhr.status === 0;
}

module.exports = isNetworkError;

},{}],216:[function(require,module,exports){
"use strict";

/**
 * Check if a URL string is an object URL from `URL.createObjectURL`.
 *
 * @param {string} url
 * @returns {boolean}
 */
module.exports = function isObjectURL(url) {
  return url.startsWith('blob:');
};

},{}],217:[function(require,module,exports){
"use strict";

module.exports = function isPreviewSupported(fileType) {
  if (!fileType) return false; // list of images that browsers can preview

  return /^[^/]+\/(jpe?g|gif|png|svg|svg\+xml|bmp|webp|avif)$/.test(fileType);
};

},{}],218:[function(require,module,exports){
"use strict";

// ___Why not add the mime-types package?
//    It's 19.7kB gzipped, and we only need mime types for well-known extensions (for file previews).
// ___Where to take new extensions from?
//    https://github.com/jshttp/mime-db/blob/master/db.json
module.exports = {
  md: 'text/markdown',
  markdown: 'text/markdown',
  mp4: 'video/mp4',
  mp3: 'audio/mp3',
  svg: 'image/svg+xml',
  jpg: 'image/jpeg',
  png: 'image/png',
  gif: 'image/gif',
  heic: 'image/heic',
  heif: 'image/heif',
  yaml: 'text/yaml',
  yml: 'text/yaml',
  csv: 'text/csv',
  tsv: 'text/tab-separated-values',
  tab: 'text/tab-separated-values',
  avi: 'video/x-msvideo',
  mks: 'video/x-matroska',
  mkv: 'video/x-matroska',
  mov: 'video/quicktime',
  doc: 'application/msword',
  docm: 'application/vnd.ms-word.document.macroenabled.12',
  docx: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
  dot: 'application/msword',
  dotm: 'application/vnd.ms-word.template.macroenabled.12',
  dotx: 'application/vnd.openxmlformats-officedocument.wordprocessingml.template',
  xla: 'application/vnd.ms-excel',
  xlam: 'application/vnd.ms-excel.addin.macroenabled.12',
  xlc: 'application/vnd.ms-excel',
  xlf: 'application/x-xliff+xml',
  xlm: 'application/vnd.ms-excel',
  xls: 'application/vnd.ms-excel',
  xlsb: 'application/vnd.ms-excel.sheet.binary.macroenabled.12',
  xlsm: 'application/vnd.ms-excel.sheet.macroenabled.12',
  xlsx: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
  xlt: 'application/vnd.ms-excel',
  xltm: 'application/vnd.ms-excel.template.macroenabled.12',
  xltx: 'application/vnd.openxmlformats-officedocument.spreadsheetml.template',
  xlw: 'application/vnd.ms-excel',
  txt: 'text/plain',
  text: 'text/plain',
  conf: 'text/plain',
  log: 'text/plain',
  pdf: 'application/pdf',
  zip: 'application/zip',
  '7z': 'application/x-7z-compressed',
  rar: 'application/x-rar-compressed',
  tar: 'application/x-tar',
  gz: 'application/gzip',
  dmg: 'application/x-apple-diskimage'
};

},{}],219:[function(require,module,exports){
"use strict";

const secondsToTime = require('./secondsToTime');

module.exports = function prettyETA(seconds) {
  const time = secondsToTime(seconds); // Only display hours and minutes if they are greater than 0 but always
  // display minutes if hours is being displayed
  // Display a leading zero if the there is a preceding unit: 1m 05s, but 5s

  const hoursStr = time.hours === 0 ? '' : `${time.hours}h`;
  const minutesStr = time.minutes === 0 ? '' : `${time.hours === 0 ? time.minutes : ` ${time.minutes.toString(10).padStart(2, '0')}`}m`;
  const secondsStr = time.hours !== 0 ? '' : `${time.minutes === 0 ? time.seconds : ` ${time.seconds.toString(10).padStart(2, '0')}`}s`;
  return `${hoursStr}${minutesStr}${secondsStr}`;
};

},{"./secondsToTime":221}],220:[function(require,module,exports){
"use strict";

const getFileNameAndExtension = require('./getFileNameAndExtension');

module.exports = function remoteFileObjToLocal(file) {
  return { ...file,
    type: file.mimeType,
    extension: file.name ? getFileNameAndExtension(file.name).extension : null
  };
};

},{"./getFileNameAndExtension":205}],221:[function(require,module,exports){
"use strict";

module.exports = function secondsToTime(rawSeconds) {
  const hours = Math.floor(rawSeconds / 3600) % 24;
  const minutes = Math.floor(rawSeconds / 60) % 60;
  const seconds = Math.floor(rawSeconds % 60);
  return {
    hours,
    minutes,
    seconds
  };
};

},{}],222:[function(require,module,exports){
"use strict";

module.exports = function settle(promises) {
  const resolutions = [];
  const rejections = [];

  function resolved(value) {
    resolutions.push(value);
  }

  function rejected(error) {
    rejections.push(error);
  }

  const wait = Promise.all(promises.map(promise => promise.then(resolved, rejected)));
  return wait.then(() => {
    return {
      successful: resolutions,
      failed: rejections
    };
  });
};

},{}],223:[function(require,module,exports){
"use strict";

/**
 * Converts list into array
 */
module.exports = Array.from;

},{}],224:[function(require,module,exports){
"use strict";

/**
 * Truncates a string to the given number of chars (maxLength) by inserting '...' in the middle of that string.
 * Partially taken from https://stackoverflow.com/a/5723274/3192470.
 *
 * @param {string} string - string to be truncated
 * @param {number} maxLength - maximum size of the resulting string
 * @returns {string}
 */
const separator = '...';

module.exports = function truncateString(string, maxLength) {
  // Return the empty string if maxLength is zero
  if (maxLength === 0) return ''; // Return original string if it's already shorter than maxLength

  if (string.length <= maxLength) return string; // Return truncated substring appended of the ellipsis char if string can't be meaningfully truncated

  if (maxLength <= separator.length + 1) return `${string.slice(0, maxLength - 1)}…`;
  const charsToShow = maxLength - separator.length;
  const frontChars = Math.ceil(charsToShow / 2);
  const backChars = Math.floor(charsToShow / 2);
  return string.slice(0, frontChars) + separator + string.slice(-backChars);
};

},{}],225:[function(require,module,exports){
"use strict";

const {
  h
} = require('preact');

module.exports = () => {
  return h("svg", {
    "aria-hidden": "true",
    focusable: "false",
    fill: "#0097DC",
    width: "66",
    height: "55",
    viewBox: "0 0 66 55"
  }, h("path", {
    d: "M57.3 8.433c4.59 0 8.1 3.51 8.1 8.1v29.7c0 4.59-3.51 8.1-8.1 8.1H8.7c-4.59 0-8.1-3.51-8.1-8.1v-29.7c0-4.59 3.51-8.1 8.1-8.1h9.45l4.59-7.02c.54-.54 1.35-1.08 2.16-1.08h16.2c.81 0 1.62.54 2.16 1.08l4.59 7.02h9.45zM33 14.64c-8.62 0-15.393 6.773-15.393 15.393 0 8.62 6.773 15.393 15.393 15.393 8.62 0 15.393-6.773 15.393-15.393 0-8.62-6.773-15.393-15.393-15.393zM33 40c-5.648 0-9.966-4.319-9.966-9.967 0-5.647 4.318-9.966 9.966-9.966s9.966 4.319 9.966 9.966C42.966 35.681 38.648 40 33 40z",
    fillRule: "evenodd"
  }));
};

},{"preact":35}],226:[function(require,module,exports){
"use strict";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/* eslint-disable jsx-a11y/media-has-caption */
const {
  h,
  Component
} = require('preact');

const SnapshotButton = require('./SnapshotButton');

const RecordButton = require('./RecordButton');

const RecordingLength = require('./RecordingLength');

const VideoSourceSelect = require('./VideoSourceSelect');

const SubmitButton = require('./SubmitButton');

const DiscardButton = require('./DiscardButton');

function isModeAvailable(modes, mode) {
  return modes.indexOf(mode) !== -1;
}

class CameraScreen extends Component {
  componentDidMount() {
    const {
      onFocus
    } = this.props;
    onFocus();
  }

  componentWillUnmount() {
    const {
      onStop
    } = this.props;
    onStop();
  }

  render() {
    const {
      src,
      recordedVideo,
      recording,
      modes,
      supportsRecording,
      videoSources,
      showVideoSourceDropdown,
      showRecordingLength,
      onSubmit,
      i18n,
      mirror,
      onSnapshot,
      onStartRecording,
      onStopRecording,
      onDiscardRecordedVideo,
      recordingLengthSeconds
    } = this.props;
    const hasRecordedVideo = !!recordedVideo;
    const shouldShowRecordButton = !hasRecordedVideo && supportsRecording && (isModeAvailable(modes, 'video-only') || isModeAvailable(modes, 'audio-only') || isModeAvailable(modes, 'video-audio'));
    const shouldShowSnapshotButton = !hasRecordedVideo && isModeAvailable(modes, 'picture');
    const shouldShowRecordingLength = supportsRecording && showRecordingLength && !hasRecordedVideo;
    const shouldShowVideoSourceDropdown = showVideoSourceDropdown && videoSources && videoSources.length > 1;
    const videoProps = {
      playsinline: true
    };

    if (recordedVideo) {
      videoProps.muted = false;
      videoProps.controls = true;
      videoProps.src = recordedVideo; // reset srcObject in dom. If not resetted, stream sticks in element

      if (this.videoElement) {
        this.videoElement.srcObject = undefined;
      }
    } else {
      videoProps.muted = true;
      videoProps.autoplay = true;
      videoProps.srcObject = src;
    }

    return h("div", {
      className: "uppy uppy-Webcam-container"
    }, h("div", {
      className: "uppy-Webcam-videoContainer"
    }, h("video", _extends({
      /* eslint-disable-next-line no-return-assign */
      ref: videoElement => this.videoElement = videoElement,
      className: `uppy-Webcam-video  ${mirror ? 'uppy-Webcam-video--mirrored' : ''}`
      /* eslint-disable-next-line react/jsx-props-no-spreading */

    }, videoProps))), h("div", {
      className: "uppy-Webcam-footer"
    }, h("div", {
      className: "uppy-Webcam-videoSourceContainer"
    }, shouldShowVideoSourceDropdown ? VideoSourceSelect(this.props) : null), h("div", {
      className: "uppy-Webcam-buttonContainer"
    }, shouldShowSnapshotButton && h(SnapshotButton, {
      onSnapshot: onSnapshot,
      i18n: i18n
    }), shouldShowRecordButton && h(RecordButton, {
      recording: recording,
      onStartRecording: onStartRecording,
      onStopRecording: onStopRecording,
      i18n: i18n
    }), hasRecordedVideo && h(SubmitButton, {
      onSubmit: onSubmit,
      i18n: i18n
    }), hasRecordedVideo && h(DiscardButton, {
      onDiscard: onDiscardRecordedVideo,
      i18n: i18n
    })), h("div", {
      className: "uppy-Webcam-recordingLength"
    }, shouldShowRecordingLength && h(RecordingLength, {
      recordingLengthSeconds: recordingLengthSeconds,
      i18n: i18n
    }))));
  }

}

module.exports = CameraScreen;

},{"./DiscardButton":227,"./RecordButton":229,"./RecordingLength":230,"./SnapshotButton":231,"./SubmitButton":232,"./VideoSourceSelect":233,"preact":35}],227:[function(require,module,exports){
"use strict";

const {
  h
} = require('preact');

function DiscardButton(_ref) {
  let {
    onDiscard,
    i18n
  } = _ref;
  return h("button", {
    className: "uppy-u-reset uppy-c-btn uppy-Webcam-button uppy-Webcam-button--discard",
    type: "button",
    title: i18n('discardRecordedFile'),
    "aria-label": i18n('discardRecordedFile'),
    onClick: onDiscard,
    "data-uppy-super-focusable": true
  }, h("svg", {
    width: "13",
    height: "13",
    viewBox: "0 0 13 13",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-hidden": "true",
    focusable: "false",
    className: "uppy-c-icon"
  }, h("g", {
    fill: "#FFF",
    fillRule: "evenodd"
  }, h("path", {
    d: "M.496 11.367L11.103.76l1.414 1.414L1.911 12.781z"
  }), h("path", {
    d: "M11.104 12.782L.497 2.175 1.911.76l10.607 10.606z"
  }))));
}

module.exports = DiscardButton;

},{"preact":35}],228:[function(require,module,exports){
"use strict";

const {
  h
} = require('preact');

module.exports = props => {
  return h("div", {
    className: "uppy-Webcam-permissons"
  }, h("div", {
    className: "uppy-Webcam-permissonsIcon"
  }, props.icon()), h("h1", {
    className: "uppy-Webcam-title"
  }, props.hasCamera ? props.i18n('allowAccessTitle') : props.i18n('noCameraTitle')), h("p", null, props.hasCamera ? props.i18n('allowAccessDescription') : props.i18n('noCameraDescription')));
};

},{"preact":35}],229:[function(require,module,exports){
"use strict";

const {
  h
} = require('preact');

module.exports = function RecordButton(_ref) {
  let {
    recording,
    onStartRecording,
    onStopRecording,
    i18n
  } = _ref;

  if (recording) {
    return h("button", {
      className: "uppy-u-reset uppy-c-btn uppy-Webcam-button",
      type: "button",
      title: i18n('stopRecording'),
      "aria-label": i18n('stopRecording'),
      onClick: onStopRecording,
      "data-uppy-super-focusable": true
    }, h("svg", {
      "aria-hidden": "true",
      focusable: "false",
      className: "uppy-c-icon",
      width: "100",
      height: "100",
      viewBox: "0 0 100 100"
    }, h("rect", {
      x: "15",
      y: "15",
      width: "70",
      height: "70"
    })));
  }

  return h("button", {
    className: "uppy-u-reset uppy-c-btn uppy-Webcam-button",
    type: "button",
    title: i18n('startRecording'),
    "aria-label": i18n('startRecording'),
    onClick: onStartRecording,
    "data-uppy-super-focusable": true
  }, h("svg", {
    "aria-hidden": "true",
    focusable: "false",
    className: "uppy-c-icon",
    width: "100",
    height: "100",
    viewBox: "0 0 100 100"
  }, h("circle", {
    cx: "50",
    cy: "50",
    r: "40"
  })));
};

},{"preact":35}],230:[function(require,module,exports){
"use strict";

const {
  h
} = require('preact');

const formatSeconds = require('./formatSeconds');

module.exports = function RecordingLength(_ref) {
  let {
    recordingLengthSeconds,
    i18n
  } = _ref;
  const formattedRecordingLengthSeconds = formatSeconds(recordingLengthSeconds);
  return h("span", {
    "aria-label": i18n('recordingLength', {
      recording_length: formattedRecordingLengthSeconds
    })
  }, formattedRecordingLengthSeconds);
};

},{"./formatSeconds":234,"preact":35}],231:[function(require,module,exports){
"use strict";

const {
  h
} = require('preact');

const CameraIcon = require('./CameraIcon');

module.exports = _ref => {
  let {
    onSnapshot,
    i18n
  } = _ref;
  return h("button", {
    className: "uppy-u-reset uppy-c-btn uppy-Webcam-button uppy-Webcam-button--picture",
    type: "button",
    title: i18n('takePicture'),
    "aria-label": i18n('takePicture'),
    onClick: onSnapshot,
    "data-uppy-super-focusable": true
  }, CameraIcon());
};

},{"./CameraIcon":225,"preact":35}],232:[function(require,module,exports){
"use strict";

const {
  h
} = require('preact');

function SubmitButton(_ref) {
  let {
    onSubmit,
    i18n
  } = _ref;
  return h("button", {
    className: "uppy-u-reset uppy-c-btn uppy-Webcam-button uppy-Webcam-button--submit",
    type: "button",
    title: i18n('submitRecordedFile'),
    "aria-label": i18n('submitRecordedFile'),
    onClick: onSubmit,
    "data-uppy-super-focusable": true
  }, h("svg", {
    width: "12",
    height: "9",
    viewBox: "0 0 12 9",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-hidden": "true",
    focusable: "false",
    className: "uppy-c-icon"
  }, h("path", {
    fill: "#fff",
    fillRule: "nonzero",
    d: "M10.66 0L12 1.31 4.136 9 0 4.956l1.34-1.31L4.136 6.38z"
  })));
}

module.exports = SubmitButton;

},{"preact":35}],233:[function(require,module,exports){
"use strict";

const {
  h
} = require('preact');

module.exports = _ref => {
  let {
    currentDeviceId,
    videoSources,
    onChangeVideoSource
  } = _ref;
  return h("div", {
    className: "uppy-Webcam-videoSource"
  }, h("select", {
    className: "uppy-u-reset uppy-Webcam-videoSource-select",
    onChange: event => {
      onChangeVideoSource(event.target.value);
    }
  }, videoSources.map(videoSource => h("option", {
    key: videoSource.deviceId,
    value: videoSource.deviceId,
    selected: videoSource.deviceId === currentDeviceId
  }, videoSource.label))));
};

},{"preact":35}],234:[function(require,module,exports){
"use strict";

/**
 * Takes an Integer value of seconds (e.g. 83) and converts it into a human-readable formatted string (e.g. '1:23').
 *
 * @param {Integer} seconds
 * @returns {string} the formatted seconds (e.g. '1:23' for 1 minute and 23 seconds)
 *
 */
module.exports = function formatSeconds(seconds) {
  return `${Math.floor(seconds / 60)}:${String(seconds % 60).padStart(2, 0)}`;
};

},{}],235:[function(require,module,exports){
"use strict";

var _class, _enableMirror, _temp;

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classPrivateFieldLooseBase(receiver, privateKey) { if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) { throw new TypeError("attempted to use private field on non-instance"); } return receiver; }

var id = 0;

function _classPrivateFieldLooseKey(name) { return "__private_" + id++ + "_" + name; }

const {
  h
} = require('preact');

const {
  UIPlugin
} = require('./../../core');

const getFileTypeExtension = require('./../../utils/lib/getFileTypeExtension');

const mimeTypes = require('./../../utils/lib/mimeTypes');

const canvasToBlob = require('./../../utils/lib/canvasToBlob');

const supportsMediaRecorder = require('./supportsMediaRecorder');

const CameraIcon = require('./CameraIcon');

const CameraScreen = require('./CameraScreen');

const PermissionsScreen = require('./PermissionsScreen');

const locale = require('./locale.js');
/**
 * Normalize a MIME type or file extension into a MIME type.
 *
 * @param {string} fileType - MIME type or a file extension prefixed with `.`.
 * @returns {string|undefined} The MIME type or `undefined` if the fileType is an extension and is not known.
 */


function toMimeType(fileType) {
  if (fileType[0] === '.') {
    return mimeTypes[fileType.slice(1)];
  }

  return fileType;
}
/**
 * Is this MIME type a video?
 *
 * @param {string} mimeType - MIME type.
 * @returns {boolean}
 */


function isVideoMimeType(mimeType) {
  return /^video\/[^*]+$/.test(mimeType);
}
/**
 * Is this MIME type an image?
 *
 * @param {string} mimeType - MIME type.
 * @returns {boolean}
 */


function isImageMimeType(mimeType) {
  return /^image\/[^*]+$/.test(mimeType);
}

function getMediaDevices() {
  // bug in the compatibility data
  // eslint-disable-next-line compat/compat
  return navigator.mediaDevices;
}
/**
 * Webcam
 */


module.exports = (_temp = (_enableMirror = /*#__PURE__*/_classPrivateFieldLooseKey("enableMirror"), _class = class Webcam extends UIPlugin {
  // eslint-disable-next-line global-require
  // enableMirror is used to toggle mirroring, for instance when discarding the video,
  // while `opts.mirror` is used to remember the initial user setting
  constructor(uppy, opts) {
    super(uppy, opts);
    Object.defineProperty(this, _enableMirror, {
      writable: true,
      value: void 0
    });
    this.mediaDevices = getMediaDevices();
    this.supportsUserMedia = !!this.mediaDevices; // eslint-disable-next-line no-restricted-globals

    this.protocol = location.protocol.match(/https/i) ? 'https' : 'http';
    this.id = this.opts.id || 'Webcam';
    this.type = 'acquirer';
    this.capturedMediaFile = null;

    this.icon = () => h("svg", {
      "aria-hidden": "true",
      focusable: "false",
      width: "32",
      height: "32",
      viewBox: "0 0 32 32"
    }, h("g", {
      fill: "none",
      fillRule: "evenodd"
    }, h("rect", {
      className: "uppy-ProviderIconBg",
      fill: "#03BFEF",
      width: "32",
      height: "32",
      rx: "16"
    }), h("path", {
      d: "M22 11c1.133 0 2 .867 2 2v7.333c0 1.134-.867 2-2 2H10c-1.133 0-2-.866-2-2V13c0-1.133.867-2 2-2h2.333l1.134-1.733C13.6 9.133 13.8 9 14 9h4c.2 0 .4.133.533.267L19.667 11H22zm-6 1.533a3.764 3.764 0 0 0-3.8 3.8c0 2.129 1.672 3.801 3.8 3.801s3.8-1.672 3.8-3.8c0-2.13-1.672-3.801-3.8-3.801zm0 6.261c-1.395 0-2.46-1.066-2.46-2.46 0-1.395 1.065-2.461 2.46-2.461s2.46 1.066 2.46 2.46c0 1.395-1.065 2.461-2.46 2.461z",
      fill: "#FFF",
      fillRule: "nonzero"
    })));

    this.defaultLocale = locale; // set default options

    const defaultOptions = {
      onBeforeSnapshot: () => Promise.resolve(),
      countdown: false,
      modes: ['video-audio', 'video-only', 'audio-only', 'picture'],
      mirror: true,
      showVideoSourceDropdown: false,
      facingMode: 'user',
      preferredImageMimeType: null,
      preferredVideoMimeType: null,
      showRecordingLength: false
    };
    this.opts = { ...defaultOptions,
      ...opts
    };
    this.i18nInit();
    this.title = this.i18n('pluginNameCamera');
    _classPrivateFieldLooseBase(this, _enableMirror)[_enableMirror] = this.opts.mirror;
    this.install = this.install.bind(this);
    this.setPluginState = this.setPluginState.bind(this);
    this.render = this.render.bind(this); // Camera controls

    this.start = this.start.bind(this);
    this.stop = this.stop.bind(this);
    this.takeSnapshot = this.takeSnapshot.bind(this);
    this.startRecording = this.startRecording.bind(this);
    this.stopRecording = this.stopRecording.bind(this);
    this.discardRecordedVideo = this.discardRecordedVideo.bind(this);
    this.submit = this.submit.bind(this);
    this.oneTwoThreeSmile = this.oneTwoThreeSmile.bind(this);
    this.focus = this.focus.bind(this);
    this.changeVideoSource = this.changeVideoSource.bind(this);
    this.webcamActive = false;

    if (this.opts.countdown) {
      this.opts.onBeforeSnapshot = this.oneTwoThreeSmile;
    }

    this.setPluginState({
      hasCamera: false,
      cameraReady: false,
      cameraError: null,
      recordingLengthSeconds: 0,
      videoSources: [],
      currentDeviceId: null
    });
  }

  setOptions(newOpts) {
    super.setOptions({ ...newOpts,
      videoConstraints: { // May be undefined but ... handles that
        ...this.opts.videoConstraints,
        ...(newOpts == null ? void 0 : newOpts.videoConstraints)
      }
    });
  }

  hasCameraCheck() {
    if (!this.mediaDevices) {
      return Promise.resolve(false);
    }

    return this.mediaDevices.enumerateDevices().then(devices => {
      return devices.some(device => device.kind === 'videoinput');
    });
  }

  isAudioOnly() {
    return this.opts.modes.length === 1 && this.opts.modes[0] === 'audio-only';
  }

  getConstraints(deviceId) {
    if (deviceId === void 0) {
      deviceId = null;
    }

    const acceptsAudio = this.opts.modes.indexOf('video-audio') !== -1 || this.opts.modes.indexOf('audio-only') !== -1;
    const acceptsVideo = !this.isAudioOnly() && (this.opts.modes.indexOf('video-audio') !== -1 || this.opts.modes.indexOf('video-only') !== -1 || this.opts.modes.indexOf('picture') !== -1);
    const videoConstraints = { ...(this.opts.videoConstraints || {
        facingMode: this.opts.facingMode
      }),
      // facingMode takes precedence over deviceId, and not needed
      // when specific device is selected
      ...(deviceId ? {
        deviceId,
        facingMode: null
      } : {})
    };
    return {
      audio: acceptsAudio,
      video: acceptsVideo ? videoConstraints : false
    };
  } // eslint-disable-next-line consistent-return


  start(options) {
    if (options === void 0) {
      options = null;
    }

    if (!this.supportsUserMedia) {
      return Promise.reject(new Error('Webcam access not supported'));
    }

    this.webcamActive = true;

    if (this.opts.mirror) {
      _classPrivateFieldLooseBase(this, _enableMirror)[_enableMirror] = true;
    }

    const constraints = this.getConstraints(options && options.deviceId ? options.deviceId : null);
    this.hasCameraCheck().then(hasCamera => {
      this.setPluginState({
        hasCamera
      }); // ask user for access to their camera

      return this.mediaDevices.getUserMedia(constraints).then(stream => {
        this.stream = stream;
        let currentDeviceId = null;
        const tracks = this.isAudioOnly() ? stream.getAudioTracks() : stream.getVideoTracks();

        if (!options || !options.deviceId) {
          currentDeviceId = tracks[0].getSettings().deviceId;
        } else {
          tracks.forEach(track => {
            if (track.getSettings().deviceId === options.deviceId) {
              currentDeviceId = track.getSettings().deviceId;
            }
          });
        } // Update the sources now, so we can access the names.


        this.updateVideoSources();
        this.setPluginState({
          currentDeviceId,
          cameraReady: true
        });
      }).catch(err => {
        this.setPluginState({
          cameraReady: false,
          cameraError: err
        });
        this.uppy.info(err.message, 'error');
      });
    });
  }
  /**
   * @returns {object}
   */


  getMediaRecorderOptions() {
    const options = {}; // Try to use the `opts.preferredVideoMimeType` or one of the `allowedFileTypes` for the recording.
    // If the browser doesn't support it, we'll fall back to the browser default instead.
    // Safari doesn't have the `isTypeSupported` API.

    if (MediaRecorder.isTypeSupported) {
      const {
        restrictions
      } = this.uppy.opts;
      let preferredVideoMimeTypes = [];

      if (this.opts.preferredVideoMimeType) {
        preferredVideoMimeTypes = [this.opts.preferredVideoMimeType];
      } else if (restrictions.allowedFileTypes) {
        preferredVideoMimeTypes = restrictions.allowedFileTypes.map(toMimeType).filter(isVideoMimeType);
      }

      const filterSupportedTypes = candidateType => MediaRecorder.isTypeSupported(candidateType) && getFileTypeExtension(candidateType);

      const acceptableMimeTypes = preferredVideoMimeTypes.filter(filterSupportedTypes);

      if (acceptableMimeTypes.length > 0) {
        // eslint-disable-next-line prefer-destructuring
        options.mimeType = acceptableMimeTypes[0];
      }
    }

    return options;
  }

  startRecording() {
    // only used if supportsMediaRecorder() returned true
    // eslint-disable-next-line compat/compat
    this.recorder = new MediaRecorder(this.stream, this.getMediaRecorderOptions());
    this.recordingChunks = [];
    let stoppingBecauseOfMaxSize = false;
    this.recorder.addEventListener('dataavailable', event => {
      this.recordingChunks.push(event.data);
      const {
        restrictions
      } = this.uppy.opts;

      if (this.recordingChunks.length > 1 && restrictions.maxFileSize != null && !stoppingBecauseOfMaxSize) {
        const totalSize = this.recordingChunks.reduce((acc, chunk) => acc + chunk.size, 0); // Exclude the initial chunk from the average size calculation because it is likely to be a very small outlier

        const averageChunkSize = (totalSize - this.recordingChunks[0].size) / (this.recordingChunks.length - 1);
        const expectedEndChunkSize = averageChunkSize * 3;
        const maxSize = Math.max(0, restrictions.maxFileSize - expectedEndChunkSize);

        if (totalSize > maxSize) {
          stoppingBecauseOfMaxSize = true;
          this.uppy.info(this.i18n('recordingStoppedMaxSize'), 'warning', 4000);
          this.stopRecording();
        }
      }
    }); // use a "time slice" of 500ms: ondataavailable will be called each 500ms
    // smaller time slices mean we can more accurately check the max file size restriction

    this.recorder.start(500);

    if (this.opts.showRecordingLength) {
      // Start the recordingLengthTimer if we are showing the recording length.
      this.recordingLengthTimer = setInterval(() => {
        const currentRecordingLength = this.getPluginState().recordingLengthSeconds;
        this.setPluginState({
          recordingLengthSeconds: currentRecordingLength + 1
        });
      }, 1000);
    }

    this.setPluginState({
      isRecording: true
    });
  }

  stopRecording() {
    const stopped = new Promise(resolve => {
      this.recorder.addEventListener('stop', () => {
        resolve();
      });
      this.recorder.stop();

      if (this.opts.showRecordingLength) {
        // Stop the recordingLengthTimer if we are showing the recording length.
        clearInterval(this.recordingLengthTimer);
        this.setPluginState({
          recordingLengthSeconds: 0
        });
      }
    });
    return stopped.then(() => {
      this.setPluginState({
        isRecording: false
      });
      return this.getVideo();
    }).then(file => {
      try {
        this.capturedMediaFile = file; // create object url for capture result preview

        this.setPluginState({
          // eslint-disable-next-line compat/compat
          recordedVideo: URL.createObjectURL(file.data)
        });
        _classPrivateFieldLooseBase(this, _enableMirror)[_enableMirror] = false;
      } catch (err) {
        // Logging the error, exept restrictions, which is handled in Core
        if (!err.isRestriction) {
          this.uppy.log(err);
        }
      }
    }).then(() => {
      this.recordingChunks = null;
      this.recorder = null;
    }, error => {
      this.recordingChunks = null;
      this.recorder = null;
      throw error;
    });
  }

  discardRecordedVideo() {
    this.setPluginState({
      recordedVideo: null
    });

    if (this.opts.mirror) {
      _classPrivateFieldLooseBase(this, _enableMirror)[_enableMirror] = true;
    }

    this.capturedMediaFile = null;
  }

  submit() {
    try {
      if (this.capturedMediaFile) {
        this.uppy.addFile(this.capturedMediaFile);
      }
    } catch (err) {
      // Logging the error, exept restrictions, which is handled in Core
      if (!err.isRestriction) {
        this.uppy.log(err, 'error');
      }
    }
  }

  async stop() {
    if (this.stream) {
      const audioTracks = this.stream.getAudioTracks();
      const videoTracks = this.stream.getVideoTracks();
      audioTracks.concat(videoTracks).forEach(track => track.stop());
    }

    if (this.recorder) {
      await new Promise(resolve => {
        this.recorder.addEventListener('stop', resolve, {
          once: true
        });
        this.recorder.stop();

        if (this.opts.showRecordingLength) {
          clearInterval(this.recordingLengthTimer);
        }
      });
    }

    this.recordingChunks = null;
    this.recorder = null;
    this.webcamActive = false;
    this.stream = null;
    this.setPluginState({
      recordedVideo: null,
      isRecording: false,
      recordingLengthSeconds: 0
    });
  }

  getVideoElement() {
    return this.el.querySelector('.uppy-Webcam-video');
  }

  oneTwoThreeSmile() {
    return new Promise((resolve, reject) => {
      let count = this.opts.countdown; // eslint-disable-next-line consistent-return

      const countDown = setInterval(() => {
        if (!this.webcamActive) {
          clearInterval(countDown);
          this.captureInProgress = false;
          return reject(new Error('Webcam is not active'));
        }

        if (count > 0) {
          this.uppy.info(`${count}...`, 'warning', 800);
          count--;
        } else {
          clearInterval(countDown);
          this.uppy.info(this.i18n('smile'), 'success', 1500);
          setTimeout(() => resolve(), 1500);
        }
      }, 1000);
    });
  }

  takeSnapshot() {
    if (this.captureInProgress) return;
    this.captureInProgress = true;
    this.opts.onBeforeSnapshot().catch(err => {
      const message = typeof err === 'object' ? err.message : err;
      this.uppy.info(message, 'error', 5000);
      return Promise.reject(new Error(`onBeforeSnapshot: ${message}`));
    }).then(() => {
      return this.getImage();
    }).then(tagFile => {
      this.captureInProgress = false;

      try {
        this.uppy.addFile(tagFile);
      } catch (err) {
        // Logging the error, except restrictions, which is handled in Core
        if (!err.isRestriction) {
          this.uppy.log(err);
        }
      }
    }, error => {
      this.captureInProgress = false;
      throw error;
    });
  }

  getImage() {
    const video = this.getVideoElement();

    if (!video) {
      return Promise.reject(new Error('No video element found, likely due to the Webcam tab being closed.'));
    }

    const width = video.videoWidth;
    const height = video.videoHeight;
    const canvas = document.createElement('canvas');
    canvas.width = width;
    canvas.height = height;
    const ctx = canvas.getContext('2d');
    ctx.drawImage(video, 0, 0);
    const {
      restrictions
    } = this.uppy.opts;
    let preferredImageMimeTypes = [];

    if (this.opts.preferredImageMimeType) {
      preferredImageMimeTypes = [this.opts.preferredImageMimeType];
    } else if (restrictions.allowedFileTypes) {
      preferredImageMimeTypes = restrictions.allowedFileTypes.map(toMimeType).filter(isImageMimeType);
    }

    const mimeType = preferredImageMimeTypes[0] || 'image/jpeg';
    const ext = getFileTypeExtension(mimeType) || 'jpg';
    const name = `cam-${Date.now()}.${ext}`;
    return canvasToBlob(canvas, mimeType).then(blob => {
      return {
        source: this.id,
        name,
        data: new Blob([blob], {
          type: mimeType
        }),
        type: mimeType
      };
    });
  }

  getVideo() {
    // Sometimes in iOS Safari, Blobs (especially the first Blob in the recordingChunks Array)
    // have empty 'type' attributes (e.g. '') so we need to find a Blob that has a defined 'type'
    // attribute in order to determine the correct MIME type.
    const mimeType = this.recordingChunks.find(blob => {
      var _blob$type;

      return ((_blob$type = blob.type) == null ? void 0 : _blob$type.length) > 0;
    }).type;
    const fileExtension = getFileTypeExtension(mimeType);

    if (!fileExtension) {
      return Promise.reject(new Error(`Could not retrieve recording: Unsupported media type "${mimeType}"`));
    }

    const name = `webcam-${Date.now()}.${fileExtension}`;
    const blob = new Blob(this.recordingChunks, {
      type: mimeType
    });
    const file = {
      source: this.id,
      name,
      data: new Blob([blob], {
        type: mimeType
      }),
      type: mimeType
    };
    return Promise.resolve(file);
  }

  focus() {
    if (!this.opts.countdown) return;
    setTimeout(() => {
      this.uppy.info(this.i18n('smile'), 'success', 1500);
    }, 1000);
  }

  changeVideoSource(deviceId) {
    this.stop();
    this.start({
      deviceId
    });
  }

  updateVideoSources() {
    this.mediaDevices.enumerateDevices().then(devices => {
      this.setPluginState({
        videoSources: devices.filter(device => device.kind === 'videoinput')
      });
    });
  }

  render() {
    if (!this.webcamActive) {
      this.start();
    }

    const webcamState = this.getPluginState();

    if (!webcamState.cameraReady || !webcamState.hasCamera) {
      return h(PermissionsScreen, {
        icon: CameraIcon,
        i18n: this.i18n,
        hasCamera: webcamState.hasCamera
      });
    }

    return h(CameraScreen // eslint-disable-next-line react/jsx-props-no-spreading
    , _extends({}, webcamState, {
      onChangeVideoSource: this.changeVideoSource,
      onSnapshot: this.takeSnapshot,
      onStartRecording: this.startRecording,
      onStopRecording: this.stopRecording,
      onDiscardRecordedVideo: this.discardRecordedVideo,
      onSubmit: this.submit,
      onFocus: this.focus,
      onStop: this.stop,
      i18n: this.i18n,
      modes: this.opts.modes,
      showRecordingLength: this.opts.showRecordingLength,
      showVideoSourceDropdown: this.opts.showVideoSourceDropdown,
      supportsRecording: supportsMediaRecorder(),
      recording: webcamState.isRecording,
      mirror: _classPrivateFieldLooseBase(this, _enableMirror)[_enableMirror],
      src: this.stream
    }));
  }

  install() {
    this.setPluginState({
      cameraReady: false,
      recordingLengthSeconds: 0
    });
    const {
      target
    } = this.opts;

    if (target) {
      this.mount(target, this);
    }

    if (this.mediaDevices) {
      this.updateVideoSources();

      this.mediaDevices.ondevicechange = () => {
        this.updateVideoSources();

        if (this.stream) {
          let restartStream = true;
          const {
            videoSources,
            currentDeviceId
          } = this.getPluginState();
          videoSources.forEach(videoSource => {
            if (currentDeviceId === videoSource.deviceId) {
              restartStream = false;
            }
          });

          if (restartStream) {
            this.stop();
            this.start();
          }
        }
      };
    }
  }

  uninstall() {
    this.stop();
    this.unmount();
  }

  onUnmount() {
    this.stop();
  }

}), _class.VERSION = "2.0.4", _temp);

},{"./../../core":87,"./../../utils/lib/canvasToBlob":192,"./../../utils/lib/getFileTypeExtension":207,"./../../utils/lib/mimeTypes":218,"./CameraIcon":225,"./CameraScreen":226,"./PermissionsScreen":228,"./locale.js":236,"./supportsMediaRecorder":237,"preact":35}],236:[function(require,module,exports){
"use strict";

module.exports = {
  strings: {
    pluginNameCamera: 'Camera',
    noCameraTitle: 'Camera Not Available',
    noCameraDescription: 'In order to take pictures or record video, please connect a camera device',
    recordingStoppedMaxSize: 'Recording stopped because the file size is about to exceed the limit',
    submitRecordedFile: 'Submit recorded file',
    discardRecordedFile: 'Discard recorded file',
    // Shown before a picture is taken when the `countdown` option is set.
    smile: 'Smile!',
    // Used as the label for the button that takes a picture.
    // This is not visibly rendered but is picked up by screen readers.
    takePicture: 'Take a picture',
    // Used as the label for the button that starts a video recording.
    // This is not visibly rendered but is picked up by screen readers.
    startRecording: 'Begin video recording',
    // Used as the label for the button that stops a video recording.
    // This is not visibly rendered but is picked up by screen readers.
    stopRecording: 'Stop video recording',
    // Used as the label for the recording length counter. See the showRecordingLength option.
    // This is not visibly rendered but is picked up by screen readers.
    recordingLength: 'Recording length %{recording_length}',
    // Title on the “allow access” screen
    allowAccessTitle: 'Please allow access to your camera',
    // Description on the “allow access” screen
    allowAccessDescription: 'In order to take pictures or record video with your camera, please allow camera access for this site.'
  }
};

},{}],237:[function(require,module,exports){
"use strict";

module.exports = function supportsMediaRecorder() {
  /* eslint-disable compat/compat */
  return typeof MediaRecorder === 'function' && !!MediaRecorder.prototype && typeof MediaRecorder.prototype.start === 'function';
  /* eslint-enable compat/compat */
};

},{}],238:[function(require,module,exports){
"use strict";

/* eslint-env browser */
const marked = require('marked');

const dragdrop = require('drag-drop'); // Add Robodog JS. It is advisable to install Robodog from npm/yarn.
// But for experimenting, you can use also Transloadit’s CDN, Edgly:
// <script src="https://releases.transloadit.com/uppy/robodog/v2.1.3/robodog.min.js"></script>


const robodog = require('./../../../../packages/@uppy/robodog');

const TRANSLOADIT_EXAMPLE_KEY = '35c1aed03f5011e982b6afe82599b6a0';
const TRANSLOADIT_EXAMPLE_TEMPLATE = '0b2ee2bc25dc43619700c2ce0a75164a';
/**
 * A textarea for markdown text, with support for file attachments.
 *
 * ## Usage
 *
 * ```js
 * const element = document.querySelector('textarea')
 * const mdtxt = new MarkdownTextarea(element)
 * mdtxt.install()
 * ```
 */

class MarkdownTextarea {
  constructor(element) {
    this.element = element;
    this.controls = document.createElement('div');
    this.controls.classList.add('mdtxt-controls');
    this.uploadLine = document.createElement('button');
    this.uploadLine.setAttribute('type', 'button');
    this.uploadLine.classList.add('form-upload');
    this.uploadLine.appendChild(document.createTextNode('Tap here to upload an attachment'));
  }

  install() {
    const {
      element
    } = this;
    const wrapper = document.createElement('div');
    wrapper.classList.add('mdtxt');
    element.parentNode.replaceChild(wrapper, element);
    wrapper.appendChild(this.controls);
    wrapper.appendChild(element);
    wrapper.appendChild(this.uploadLine);
    this.setupUploadLine();
    this.setupTextareaDrop();
  }

  setupTextareaDrop() {
    dragdrop(this.element, files => {
      this.uploadFiles(files);
    });
  }

  setupUploadLine() {
    this.uploadLine.addEventListener('click', () => {
      this.pickFiles();
    });
  }

  reportUploadError(err) {
    this.uploadLine.classList.add('error');
    const message = document.createElement('span');
    message.appendChild(document.createTextNode(err.message));
    this.uploadLine.insertChild(message, this.uploadLine.firstChild);
  }

  unreportUploadError() {
    this.uploadLine.classList.remove('error');
    const message = this.uploadLine.querySelector('message');

    if (message) {
      this.uploadLine.removeChild(message);
    }
  }

  insertAttachments(attachments) {
    attachments.forEach(attachment => {
      const {
        file,
        thumb
      } = attachment;
      const link = `\n[LABEL](${file.ssl_url})\n`;
      const labelText = `View File ${file.basename}`;

      if (thumb) {
        this.element.value += link.replace('LABEL', `![${labelText}](${thumb.ssl_url})`);
      } else {
        this.element.value += link.replace('LABEL', labelText);
      }
    });
  }

  matchFilesAndThumbs(results) {
    const filesById = {};
    const thumbsById = {};
    results.forEach(result => {
      if (result.stepName === 'thumbnails') {
        thumbsById[result.original_id] = result;
      } else {
        filesById[result.original_id] = result;
      }
    });
    return Object.keys(filesById).map(key => ({
      file: filesById[key],
      thumb: thumbsById[key]
    }));
  }

  uploadFiles(files) {
    robodog.upload(files, {
      waitForEncoding: true,
      params: {
        auth: {
          key: TRANSLOADIT_EXAMPLE_KEY
        },
        template_id: TRANSLOADIT_EXAMPLE_TEMPLATE
      }
    }).then(result => {
      if (result === null) return;
      this.insertAttachments(this.matchFilesAndThumbs(result.results));
    }).catch(err => {
      console.error(err);
      this.reportUploadError(err);
    });
  }

  pickFiles() {
    robodog.pick({
      waitForEncoding: true,
      params: {
        auth: {
          key: TRANSLOADIT_EXAMPLE_KEY
        },
        template_id: TRANSLOADIT_EXAMPLE_TEMPLATE
      },
      providers: ['webcam', 'url', 'instagram', 'google-drive', 'dropbox']
    }).then(result => {
      if (result === null) return;
      this.insertAttachments(this.matchFilesAndThumbs(result.results));
    }).catch(err => {
      console.error(err);
      this.reportUploadError(err);
    });
  }

}

const textarea = new MarkdownTextarea(document.querySelector('#new textarea'));
textarea.install();

function renderSnippet(title, text) {
  const template = document.querySelector('#snippet');
  const newSnippet = document.importNode(template.content, true);
  const titleEl = newSnippet.querySelector('.snippet-title');
  const contentEl = newSnippet.querySelector('.snippet-content');
  titleEl.appendChild(document.createTextNode(title));
  contentEl.innerHTML = marked(text);
  const list = document.querySelector('#snippets');
  list.insertBefore(newSnippet, list.firstChild);
}

function saveSnippet(title, text) {
  const id = parseInt(localStorage.numSnippets || 0, 10);
  localStorage[`snippet_${id}`] = JSON.stringify({
    title,
    text
  });
  localStorage.numSnippets = id + 1;
}

function loadSnippets() {
  for (let id = 0; localStorage[`snippet_${id}`] != null; id += 1) {
    const {
      title,
      text
    } = JSON.parse(localStorage[`snippet_${id}`]);
    renderSnippet(title, text);
  }
}

document.querySelector('#new').addEventListener('submit', event => {
  event.preventDefault();
  const title = event.target.querySelector('input[name="title"]').value || 'Unnamed Snippet';
  const text = textarea.element.value;
  saveSnippet(title, text);
  renderSnippet(title, text);
  event.target.querySelector('input').value = '';
  event.target.querySelector('textarea').value = '';
});
window.addEventListener('DOMContentLoaded', () => {
  loadSnippets();
});

},{"./../../../../packages/@uppy/robodog":162,"drag-drop":11,"marked":25}]},{},[238])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIuLi9ub2RlX21vZHVsZXMvQHNvY2tldC5pby9jb21wb25lbnQtZW1pdHRlci9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9AdHJhbnNsb2FkaXQvcHJldHRpZXItYnl0ZXMvcHJldHRpZXJCeXRlcy5qcyIsIi4uL25vZGVfbW9kdWxlcy9iYWNrbzIvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvYmFzZTY0LWFycmF5YnVmZmVyL2Rpc3QvYmFzZTY0LWFycmF5YnVmZmVyLnVtZC5qcyIsIi4uL25vZGVfbW9kdWxlcy9iYXNlNjQtanMvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnVmZmVyL2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NsYXNzbmFtZXMvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvY29tcG9uZW50LWVtaXR0ZXIvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvZGVidWcvc3JjL2Jyb3dzZXIuanMiLCIuLi9ub2RlX21vZHVsZXMvZGVidWcvc3JjL2NvbW1vbi5qcyIsIi4uL25vZGVfbW9kdWxlcy9kcmFnLWRyb3AvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLXBhcnNlci9idWlsZC9janMvY29tbW9ucy5qcyIsIi4uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tcGFyc2VyL2J1aWxkL2Nqcy9kZWNvZGVQYWNrZXQuYnJvd3Nlci5qcyIsIi4uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tcGFyc2VyL2J1aWxkL2Nqcy9lbmNvZGVQYWNrZXQuYnJvd3Nlci5qcyIsIi4uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tcGFyc2VyL2J1aWxkL2Nqcy9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9leGlmci9kaXN0L21pbmkubGVnYWN5LnVtZC5qcyIsIi4uL25vZGVfbW9kdWxlcy9mbGF0dGVuL2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2dldC1mb3JtLWRhdGEvbGliL2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2hhcy1jb3JzL2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2llZWU3NTQvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvaXMtc2hhbGxvdy1lcXVhbC9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9qcy1iYXNlNjQvYmFzZTY0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC5kZWJvdW5jZS9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9sb2Rhc2gudGhyb3R0bGUvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvbWFya2VkL2xpYi9tYXJrZWQuanMiLCIuLi9ub2RlX21vZHVsZXMvbWVtb2l6ZS1vbmUvZGlzdC9tZW1vaXplLW9uZS5janMuanMiLCIuLi9ub2RlX21vZHVsZXMvbWltZS1tYXRjaC9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9taW1lLW1hdGNoL25vZGVfbW9kdWxlcy93aWxkY2FyZC9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9tcy9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9uYW1lc3BhY2UtZW1pdHRlci9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9uYW5vaWQvaW5kZXguYnJvd3Nlci5janMiLCIuLi9ub2RlX21vZHVsZXMvbmFub2lkL3VybC1hbHBoYWJldC9pbmRleC5janMiLCIuLi9ub2RlX21vZHVsZXMvcGFyc2Vxcy9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9wYXJzZXVyaS9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9wcmVhY3QvZGlzdC9wcmVhY3QuanMiLCIuLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3F1ZXJ5c3RyaW5naWZ5L2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL3F1ZXVlLW1pY3JvdGFzay9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9yZXF1aXJlcy1wb3J0L2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL3J1bi1wYXJhbGxlbC9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L2J1aWxkL2Nqcy9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L2J1aWxkL2Nqcy9tYW5hZ2VyLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1jbGllbnQvYnVpbGQvY2pzL29uLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1jbGllbnQvYnVpbGQvY2pzL3NvY2tldC5qcyIsIi4uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L2J1aWxkL2Nqcy91cmwuanMiLCIuLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLWNsaWVudC9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9idWlsZC9janMvZ2xvYmFsVGhpcy5icm93c2VyLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1jbGllbnQvbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvYnVpbGQvY2pzL2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1jbGllbnQvbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvYnVpbGQvY2pzL3NvY2tldC5qcyIsIi4uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2J1aWxkL2Nqcy90cmFuc3BvcnQuanMiLCIuLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLWNsaWVudC9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9idWlsZC9janMvdHJhbnNwb3J0cy9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2J1aWxkL2Nqcy90cmFuc3BvcnRzL3BvbGxpbmcteGhyLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1jbGllbnQvbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvYnVpbGQvY2pzL3RyYW5zcG9ydHMvcG9sbGluZy5qcyIsIi4uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2J1aWxkL2Nqcy90cmFuc3BvcnRzL3dlYnNvY2tldC1jb25zdHJ1Y3Rvci5icm93c2VyLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1jbGllbnQvbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvYnVpbGQvY2pzL3RyYW5zcG9ydHMvd2Vic29ja2V0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1jbGllbnQvbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvYnVpbGQvY2pzL3RyYW5zcG9ydHMveG1saHR0cHJlcXVlc3QuYnJvd3Nlci5qcyIsIi4uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2J1aWxkL2Nqcy91dGlsLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1jbGllbnQvbm9kZV9tb2R1bGVzL3NvY2tldC5pby1wYXJzZXIvYnVpbGQvY2pzL2JpbmFyeS5qcyIsIi4uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tcGFyc2VyL2J1aWxkL2Nqcy9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tcGFyc2VyL2J1aWxkL2Nqcy9pcy1iaW5hcnkuanMiLCIuLi9ub2RlX21vZHVsZXMvdHVzLWpzLWNsaWVudC9saWIuZXM1L2Jyb3dzZXIvZmlsZVJlYWRlci5qcyIsIi4uL25vZGVfbW9kdWxlcy90dXMtanMtY2xpZW50L2xpYi5lczUvYnJvd3Nlci9maW5nZXJwcmludC5qcyIsIi4uL25vZGVfbW9kdWxlcy90dXMtanMtY2xpZW50L2xpYi5lczUvYnJvd3Nlci9odHRwU3RhY2suanMiLCIuLi9ub2RlX21vZHVsZXMvdHVzLWpzLWNsaWVudC9saWIuZXM1L2Jyb3dzZXIvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvdHVzLWpzLWNsaWVudC9saWIuZXM1L2Jyb3dzZXIvaXNDb3Jkb3ZhLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3R1cy1qcy1jbGllbnQvbGliLmVzNS9icm93c2VyL2lzUmVhY3ROYXRpdmUuanMiLCIuLi9ub2RlX21vZHVsZXMvdHVzLWpzLWNsaWVudC9saWIuZXM1L2Jyb3dzZXIvcmVhZEFzQnl0ZUFycmF5LmpzIiwiLi4vbm9kZV9tb2R1bGVzL3R1cy1qcy1jbGllbnQvbGliLmVzNS9icm93c2VyL3VyaVRvQmxvYi5qcyIsIi4uL25vZGVfbW9kdWxlcy90dXMtanMtY2xpZW50L2xpYi5lczUvYnJvd3Nlci91cmxTdG9yYWdlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3R1cy1qcy1jbGllbnQvbGliLmVzNS9lcnJvci5qcyIsIi4uL25vZGVfbW9kdWxlcy90dXMtanMtY2xpZW50L2xpYi5lczUvbG9nZ2VyLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3R1cy1qcy1jbGllbnQvbGliLmVzNS9ub29wVXJsU3RvcmFnZS5qcyIsIi4uL25vZGVfbW9kdWxlcy90dXMtanMtY2xpZW50L2xpYi5lczUvdXBsb2FkLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3R1cy1qcy1jbGllbnQvbGliLmVzNS91dWlkLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3VybC1wYXJzZS9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy95ZWFzdC9pbmRleC5qcyIsIi4uL3BhY2thZ2VzL0B1cHB5L2NvbXBhbmlvbi1jbGllbnQvc3JjL0F1dGhFcnJvci5qcyIsIi4uL3BhY2thZ2VzL0B1cHB5L2NvbXBhbmlvbi1jbGllbnQvc3JjL1Byb3ZpZGVyLmpzIiwiLi4vcGFja2FnZXMvQHVwcHkvY29tcGFuaW9uLWNsaWVudC9zcmMvUmVxdWVzdENsaWVudC5qcyIsIi4uL3BhY2thZ2VzL0B1cHB5L2NvbXBhbmlvbi1jbGllbnQvc3JjL1NlYXJjaFByb3ZpZGVyLmpzIiwiLi4vcGFja2FnZXMvQHVwcHkvY29tcGFuaW9uLWNsaWVudC9zcmMvU29ja2V0LmpzIiwiLi4vcGFja2FnZXMvQHVwcHkvY29tcGFuaW9uLWNsaWVudC9zcmMvaW5kZXguanMiLCIuLi9wYWNrYWdlcy9AdXBweS9jb21wYW5pb24tY2xpZW50L3NyYy90b2tlblN0b3JhZ2UuanMiLCIuLi9wYWNrYWdlcy9AdXBweS9jb3JlL3NyYy9CYXNlUGx1Z2luLmpzIiwiLi4vcGFja2FnZXMvQHVwcHkvY29yZS9zcmMvVUlQbHVnaW4uanMiLCIuLi9wYWNrYWdlcy9AdXBweS9jb3JlL3NyYy9VcHB5LmpzIiwiLi4vcGFja2FnZXMvQHVwcHkvY29yZS9zcmMvZ2V0RmlsZU5hbWUuanMiLCIuLi9wYWNrYWdlcy9AdXBweS9jb3JlL3NyYy9pbmRleC5qcyIsIi4uL3BhY2thZ2VzL0B1cHB5L2NvcmUvc3JjL2xvY2FsZS5qcyIsIi4uL3BhY2thZ2VzL0B1cHB5L2NvcmUvc3JjL2xvZ2dlcnMuanMiLCIuLi9wYWNrYWdlcy9AdXBweS9jb3JlL3NyYy9zdXBwb3J0c1VwbG9hZFByb2dyZXNzLmpzIiwiLi4vcGFja2FnZXMvQHVwcHkvZGFzaGJvYXJkL3NyYy9jb21wb25lbnRzL0FkZEZpbGVzLmpzIiwiLi4vcGFja2FnZXMvQHVwcHkvZGFzaGJvYXJkL3NyYy9jb21wb25lbnRzL0FkZEZpbGVzUGFuZWwuanMiLCIuLi9wYWNrYWdlcy9AdXBweS9kYXNoYm9hcmQvc3JjL2NvbXBvbmVudHMvRGFzaGJvYXJkLmpzIiwiLi4vcGFja2FnZXMvQHVwcHkvZGFzaGJvYXJkL3NyYy9jb21wb25lbnRzL0VkaXRvclBhbmVsLmpzIiwiLi4vcGFja2FnZXMvQHVwcHkvZGFzaGJvYXJkL3NyYy9jb21wb25lbnRzL0ZpbGVDYXJkL2luZGV4LmpzIiwiLi4vcGFja2FnZXMvQHVwcHkvZGFzaGJvYXJkL3NyYy9jb21wb25lbnRzL0ZpbGVJdGVtL0J1dHRvbnMvaW5kZXguanMiLCIuLi9wYWNrYWdlcy9AdXBweS9kYXNoYm9hcmQvc3JjL2NvbXBvbmVudHMvRmlsZUl0ZW0vRmlsZUluZm8vaW5kZXguanMiLCIuLi9wYWNrYWdlcy9AdXBweS9kYXNoYm9hcmQvc3JjL2NvbXBvbmVudHMvRmlsZUl0ZW0vRmlsZVByZXZpZXdBbmRMaW5rL2luZGV4LmpzIiwiLi4vcGFja2FnZXMvQHVwcHkvZGFzaGJvYXJkL3NyYy9jb21wb25lbnRzL0ZpbGVJdGVtL0ZpbGVQcm9ncmVzcy9pbmRleC5qcyIsIi4uL3BhY2thZ2VzL0B1cHB5L2Rhc2hib2FyZC9zcmMvY29tcG9uZW50cy9GaWxlSXRlbS9NZXRhRXJyb3JNZXNzYWdlLmpzIiwiLi4vcGFja2FnZXMvQHVwcHkvZGFzaGJvYXJkL3NyYy9jb21wb25lbnRzL0ZpbGVJdGVtL2luZGV4LmpzIiwiLi4vcGFja2FnZXMvQHVwcHkvZGFzaGJvYXJkL3NyYy9jb21wb25lbnRzL0ZpbGVMaXN0LmpzIiwiLi4vcGFja2FnZXMvQHVwcHkvZGFzaGJvYXJkL3NyYy9jb21wb25lbnRzL0ZpbGVQcmV2aWV3LmpzIiwiLi4vcGFja2FnZXMvQHVwcHkvZGFzaGJvYXJkL3NyYy9jb21wb25lbnRzL1BpY2tlclBhbmVsQ29udGVudC5qcyIsIi4uL3BhY2thZ2VzL0B1cHB5L2Rhc2hib2FyZC9zcmMvY29tcG9uZW50cy9QaWNrZXJQYW5lbFRvcEJhci5qcyIsIi4uL3BhY2thZ2VzL0B1cHB5L2Rhc2hib2FyZC9zcmMvY29tcG9uZW50cy9TbGlkZS5qcyIsIi4uL3BhY2thZ2VzL0B1cHB5L2Rhc2hib2FyZC9zcmMvY29tcG9uZW50cy9WaXJ0dWFsTGlzdC5qcyIsIi4uL3BhY2thZ2VzL0B1cHB5L2Rhc2hib2FyZC9zcmMvaW5kZXguanMiLCIuLi9wYWNrYWdlcy9AdXBweS9kYXNoYm9hcmQvc3JjL2xvY2FsZS5qcyIsIi4uL3BhY2thZ2VzL0B1cHB5L2Rhc2hib2FyZC9zcmMvdXRpbHMvY29weVRvQ2xpcGJvYXJkLmpzIiwiLi4vcGFja2FnZXMvQHVwcHkvZGFzaGJvYXJkL3NyYy91dGlscy9jcmVhdGVTdXBlckZvY3VzLmpzIiwiLi4vcGFja2FnZXMvQHVwcHkvZGFzaGJvYXJkL3NyYy91dGlscy9nZXRBY3RpdmVPdmVybGF5RWwuanMiLCIuLi9wYWNrYWdlcy9AdXBweS9kYXNoYm9hcmQvc3JjL3V0aWxzL2dldEZpbGVUeXBlSWNvbi5qcyIsIi4uL3BhY2thZ2VzL0B1cHB5L2Rhc2hib2FyZC9zcmMvdXRpbHMvaWdub3JlRXZlbnQuanMiLCIuLi9wYWNrYWdlcy9AdXBweS9kYXNoYm9hcmQvc3JjL3V0aWxzL3RyYXBGb2N1cy5qcyIsIi4uL3BhY2thZ2VzL0B1cHB5L2Ryb3Bib3gvc3JjL2luZGV4LmpzIiwiLi4vcGFja2FnZXMvQHVwcHkvZHJvcGJveC9zcmMvbG9jYWxlLmpzIiwiLi4vcGFja2FnZXMvQHVwcHkvZmFjZWJvb2svc3JjL2luZGV4LmpzIiwiLi4vcGFja2FnZXMvQHVwcHkvZmFjZWJvb2svc3JjL2xvY2FsZS5qcyIsIi4uL3BhY2thZ2VzL0B1cHB5L2Zvcm0vc3JjL2luZGV4LmpzIiwiLi4vcGFja2FnZXMvQHVwcHkvZ29vZ2xlLWRyaXZlL3NyYy9Ecml2ZVByb3ZpZGVyVmlld3MuanMiLCIuLi9wYWNrYWdlcy9AdXBweS9nb29nbGUtZHJpdmUvc3JjL2luZGV4LmpzIiwiLi4vcGFja2FnZXMvQHVwcHkvZ29vZ2xlLWRyaXZlL3NyYy9sb2NhbGUuanMiLCIuLi9wYWNrYWdlcy9AdXBweS9pbmZvcm1lci9zcmMvRmFkZUluLmpzIiwiLi4vcGFja2FnZXMvQHVwcHkvaW5mb3JtZXIvc3JjL1RyYW5zaXRpb25Hcm91cC5qcyIsIi4uL3BhY2thZ2VzL0B1cHB5L2luZm9ybWVyL3NyYy9pbmRleC5qcyIsIi4uL3BhY2thZ2VzL0B1cHB5L2luc3RhZ3JhbS9zcmMvaW5kZXguanMiLCIuLi9wYWNrYWdlcy9AdXBweS9pbnN0YWdyYW0vc3JjL2xvY2FsZS5qcyIsIi4uL3BhY2thZ2VzL0B1cHB5L29uZWRyaXZlL3NyYy9pbmRleC5qcyIsIi4uL3BhY2thZ2VzL0B1cHB5L29uZWRyaXZlL3NyYy9sb2NhbGUuanMiLCIuLi9wYWNrYWdlcy9AdXBweS9wcm92aWRlci12aWV3cy9zcmMvQnJlYWRjcnVtYnMuanMiLCIuLi9wYWNrYWdlcy9AdXBweS9wcm92aWRlci12aWV3cy9zcmMvQnJvd3Nlci5qcyIsIi4uL3BhY2thZ2VzL0B1cHB5L3Byb3ZpZGVyLXZpZXdzL3NyYy9DbG9zZVdyYXBwZXIuanMiLCIuLi9wYWNrYWdlcy9AdXBweS9wcm92aWRlci12aWV3cy9zcmMvRmlsdGVyLmpzIiwiLi4vcGFja2FnZXMvQHVwcHkvcHJvdmlkZXItdmlld3Mvc3JjL0Zvb3RlckFjdGlvbnMuanMiLCIuLi9wYWNrYWdlcy9AdXBweS9wcm92aWRlci12aWV3cy9zcmMvSXRlbS9jb21wb25lbnRzL0dyaWRMaS5qcyIsIi4uL3BhY2thZ2VzL0B1cHB5L3Byb3ZpZGVyLXZpZXdzL3NyYy9JdGVtL2NvbXBvbmVudHMvSXRlbUljb24uanMiLCIuLi9wYWNrYWdlcy9AdXBweS9wcm92aWRlci12aWV3cy9zcmMvSXRlbS9jb21wb25lbnRzL0xpc3RMaS5qcyIsIi4uL3BhY2thZ2VzL0B1cHB5L3Byb3ZpZGVyLXZpZXdzL3NyYy9JdGVtL2luZGV4LmpzIiwiLi4vcGFja2FnZXMvQHVwcHkvcHJvdmlkZXItdmlld3Mvc3JjL0xvYWRlci5qcyIsIi4uL3BhY2thZ2VzL0B1cHB5L3Byb3ZpZGVyLXZpZXdzL3NyYy9Qcm92aWRlclZpZXcvQXV0aFZpZXcuanMiLCIuLi9wYWNrYWdlcy9AdXBweS9wcm92aWRlci12aWV3cy9zcmMvUHJvdmlkZXJWaWV3L0hlYWRlci5qcyIsIi4uL3BhY2thZ2VzL0B1cHB5L3Byb3ZpZGVyLXZpZXdzL3NyYy9Qcm92aWRlclZpZXcvUHJvdmlkZXJWaWV3LmpzIiwiLi4vcGFja2FnZXMvQHVwcHkvcHJvdmlkZXItdmlld3Mvc3JjL1Byb3ZpZGVyVmlldy9Vc2VyLmpzIiwiLi4vcGFja2FnZXMvQHVwcHkvcHJvdmlkZXItdmlld3Mvc3JjL1Byb3ZpZGVyVmlldy9pbmRleC5qcyIsIi4uL3BhY2thZ2VzL0B1cHB5L3Byb3ZpZGVyLXZpZXdzL3NyYy9TZWFyY2hQcm92aWRlclZpZXcvSGVhZGVyLmpzIiwiLi4vcGFja2FnZXMvQHVwcHkvcHJvdmlkZXItdmlld3Mvc3JjL1NlYXJjaFByb3ZpZGVyVmlldy9JbnB1dFZpZXcuanMiLCIuLi9wYWNrYWdlcy9AdXBweS9wcm92aWRlci12aWV3cy9zcmMvU2VhcmNoUHJvdmlkZXJWaWV3L1NlYXJjaFByb3ZpZGVyVmlldy5qcyIsIi4uL3BhY2thZ2VzL0B1cHB5L3Byb3ZpZGVyLXZpZXdzL3NyYy9TZWFyY2hQcm92aWRlclZpZXcvaW5kZXguanMiLCIuLi9wYWNrYWdlcy9AdXBweS9wcm92aWRlci12aWV3cy9zcmMvU2hhcmVkSGFuZGxlci5qcyIsIi4uL3BhY2thZ2VzL0B1cHB5L3Byb3ZpZGVyLXZpZXdzL3NyYy9WaWV3LmpzIiwiLi4vcGFja2FnZXMvQHVwcHkvcHJvdmlkZXItdmlld3Mvc3JjL2luZGV4LmpzIiwiLi4vcGFja2FnZXMvQHVwcHkvcm9ib2RvZy9zcmMvQXR0YWNoRmlsZUlucHV0cy5qcyIsIi4uL3BhY2thZ2VzL0B1cHB5L3JvYm9kb2cvc3JjL1RyYW5zbG9hZGl0Rm9ybVJlc3VsdC5qcyIsIi4uL3BhY2thZ2VzL0B1cHB5L3JvYm9kb2cvc3JjL1RyYW5zbG9hZGl0UmVzdWx0c1BsdWdpbi5qcyIsIi4uL3BhY2thZ2VzL0B1cHB5L3JvYm9kb2cvc3JjL2FkZERhc2hib2FyZFBsdWdpbi5qcyIsIi4uL3BhY2thZ2VzL0B1cHB5L3JvYm9kb2cvc3JjL2FkZFByb3ZpZGVycy5qcyIsIi4uL3BhY2thZ2VzL0B1cHB5L3JvYm9kb2cvc3JjL2FkZFRyYW5zbG9hZGl0UGx1Z2luLmpzIiwiLi4vcGFja2FnZXMvQHVwcHkvcm9ib2RvZy9zcmMvY3JlYXRlVXBweS5qcyIsIi4uL3BhY2thZ2VzL0B1cHB5L3JvYm9kb2cvc3JjL2Rhc2hib2FyZC5qcyIsIi4uL3BhY2thZ2VzL0B1cHB5L3JvYm9kb2cvc3JjL2Zvcm0uanMiLCIuLi9wYWNrYWdlcy9AdXBweS9yb2JvZG9nL3NyYy9pbmRleC5qcyIsIi4uL3BhY2thZ2VzL0B1cHB5L3JvYm9kb2cvc3JjL3BpY2suanMiLCIuLi9wYWNrYWdlcy9AdXBweS9yb2JvZG9nL3NyYy91cGxvYWQuanMiLCIuLi9wYWNrYWdlcy9AdXBweS9zdGF0dXMtYmFyL3NyYy9Db21wb25lbnRzLmpzIiwiLi4vcGFja2FnZXMvQHVwcHkvc3RhdHVzLWJhci9zcmMvU3RhdHVzQmFyLmpzIiwiLi4vcGFja2FnZXMvQHVwcHkvc3RhdHVzLWJhci9zcmMvU3RhdHVzQmFyU3RhdGVzLmpzIiwiLi4vcGFja2FnZXMvQHVwcHkvc3RhdHVzLWJhci9zcmMvY2FsY3VsYXRlUHJvY2Vzc2luZ1Byb2dyZXNzLmpzIiwiLi4vcGFja2FnZXMvQHVwcHkvc3RhdHVzLWJhci9zcmMvaW5kZXguanMiLCIuLi9wYWNrYWdlcy9AdXBweS9zdGF0dXMtYmFyL3NyYy9sb2NhbGUuanMiLCIuLi9wYWNrYWdlcy9AdXBweS9zdG9yZS1kZWZhdWx0L3NyYy9pbmRleC5qcyIsIi4uL3BhY2thZ2VzL0B1cHB5L3RodW1ibmFpbC1nZW5lcmF0b3Ivc3JjL2luZGV4LmpzIiwiLi4vcGFja2FnZXMvQHVwcHkvdGh1bWJuYWlsLWdlbmVyYXRvci9zcmMvbG9jYWxlLmpzIiwiLi4vcGFja2FnZXMvQHVwcHkvdHJhbnNsb2FkaXQvc3JjL0Fzc2VtYmx5LmpzIiwiLi4vcGFja2FnZXMvQHVwcHkvdHJhbnNsb2FkaXQvc3JjL0Fzc2VtYmx5T3B0aW9ucy5qcyIsIi4uL3BhY2thZ2VzL0B1cHB5L3RyYW5zbG9hZGl0L3NyYy9Bc3NlbWJseVdhdGNoZXIuanMiLCIuLi9wYWNrYWdlcy9AdXBweS90cmFuc2xvYWRpdC9zcmMvQ2xpZW50LmpzIiwiLi4vcGFja2FnZXMvQHVwcHkvdHJhbnNsb2FkaXQvc3JjL2luZGV4LmpzIiwiLi4vcGFja2FnZXMvQHVwcHkvdHJhbnNsb2FkaXQvc3JjL2xvY2FsZS5qcyIsIi4uL3BhY2thZ2VzL0B1cHB5L3RyYW5zbG9hZGl0L3NyYy9wYXJzZVVybC5qcyIsIi4uL3BhY2thZ2VzL0B1cHB5L3R1cy9zcmMvZ2V0RmluZ2VycHJpbnQuanMiLCIuLi9wYWNrYWdlcy9AdXBweS90dXMvc3JjL2luZGV4LmpzIiwiLi4vcGFja2FnZXMvQHVwcHkvdXJsL3NyYy9VcmxVSS5qcyIsIi4uL3BhY2thZ2VzL0B1cHB5L3VybC9zcmMvaW5kZXguanMiLCIuLi9wYWNrYWdlcy9AdXBweS91cmwvc3JjL2xvY2FsZS5qcyIsIi4uL3BhY2thZ2VzL0B1cHB5L3VybC9zcmMvdXRpbHMvZm9yRWFjaERyb3BwZWRPclBhc3RlZFVybC5qcyIsIi4uL3BhY2thZ2VzL0B1cHB5L3V0aWxzL3NyYy9FdmVudFRyYWNrZXIuanMiLCIuLi9wYWNrYWdlcy9AdXBweS91dGlscy9zcmMvRk9DVVNBQkxFX0VMRU1FTlRTLmpzIiwiLi4vcGFja2FnZXMvQHVwcHkvdXRpbHMvc3JjL05ldHdvcmtFcnJvci5qcyIsIi4uL3BhY2thZ2VzL0B1cHB5L3V0aWxzL3NyYy9SYXRlTGltaXRlZFF1ZXVlLmpzIiwiLi4vcGFja2FnZXMvQHVwcHkvdXRpbHMvc3JjL1RyYW5zbGF0b3IuanMiLCIuLi9wYWNrYWdlcy9AdXBweS91dGlscy9zcmMvY2FudmFzVG9CbG9iLmpzIiwiLi4vcGFja2FnZXMvQHVwcHkvdXRpbHMvc3JjL2RhdGFVUkl0b0Jsb2IuanMiLCIuLi9wYWNrYWdlcy9AdXBweS91dGlscy9zcmMvZW1pdFNvY2tldFByb2dyZXNzLmpzIiwiLi4vcGFja2FnZXMvQHVwcHkvdXRpbHMvc3JjL2ZldGNoV2l0aE5ldHdvcmtFcnJvci5qcyIsIi4uL3BhY2thZ2VzL0B1cHB5L3V0aWxzL3NyYy9maW5kQWxsRE9NRWxlbWVudHMuanMiLCIuLi9wYWNrYWdlcy9AdXBweS91dGlscy9zcmMvZmluZERPTUVsZW1lbnQuanMiLCIuLi9wYWNrYWdlcy9AdXBweS91dGlscy9zcmMvZ2VuZXJhdGVGaWxlSUQuanMiLCIuLi9wYWNrYWdlcy9AdXBweS91dGlscy9zcmMvZ2V0Qnl0ZXNSZW1haW5pbmcuanMiLCIuLi9wYWNrYWdlcy9AdXBweS91dGlscy9zcmMvZ2V0RHJvcHBlZEZpbGVzL2luZGV4LmpzIiwiLi4vcGFja2FnZXMvQHVwcHkvdXRpbHMvc3JjL2dldERyb3BwZWRGaWxlcy91dGlscy9mYWxsYmFja0FwaS5qcyIsIi4uL3BhY2thZ2VzL0B1cHB5L3V0aWxzL3NyYy9nZXREcm9wcGVkRmlsZXMvdXRpbHMvd2Via2l0R2V0QXNFbnRyeUFwaS9nZXRGaWxlc0FuZERpcmVjdG9yaWVzRnJvbURpcmVjdG9yeS5qcyIsIi4uL3BhY2thZ2VzL0B1cHB5L3V0aWxzL3NyYy9nZXREcm9wcGVkRmlsZXMvdXRpbHMvd2Via2l0R2V0QXNFbnRyeUFwaS9nZXRSZWxhdGl2ZVBhdGguanMiLCIuLi9wYWNrYWdlcy9AdXBweS91dGlscy9zcmMvZ2V0RHJvcHBlZEZpbGVzL3V0aWxzL3dlYmtpdEdldEFzRW50cnlBcGkvaW5kZXguanMiLCIuLi9wYWNrYWdlcy9AdXBweS91dGlscy9zcmMvZ2V0RmlsZU5hbWVBbmRFeHRlbnNpb24uanMiLCIuLi9wYWNrYWdlcy9AdXBweS91dGlscy9zcmMvZ2V0RmlsZVR5cGUuanMiLCIuLi9wYWNrYWdlcy9AdXBweS91dGlscy9zcmMvZ2V0RmlsZVR5cGVFeHRlbnNpb24uanMiLCIuLi9wYWNrYWdlcy9AdXBweS91dGlscy9zcmMvZ2V0U29ja2V0SG9zdC5qcyIsIi4uL3BhY2thZ2VzL0B1cHB5L3V0aWxzL3NyYy9nZXRTcGVlZC5qcyIsIi4uL3BhY2thZ2VzL0B1cHB5L3V0aWxzL3NyYy9nZXRUZXh0RGlyZWN0aW9uLmpzIiwiLi4vcGFja2FnZXMvQHVwcHkvdXRpbHMvc3JjL2dldFRpbWVTdGFtcC5qcyIsIi4uL3BhY2thZ2VzL0B1cHB5L3V0aWxzL3NyYy9oYXNQcm9wZXJ0eS5qcyIsIi4uL3BhY2thZ2VzL0B1cHB5L3V0aWxzL3NyYy9pc0RPTUVsZW1lbnQuanMiLCIuLi9wYWNrYWdlcy9AdXBweS91dGlscy9zcmMvaXNEcmFnRHJvcFN1cHBvcnRlZC5qcyIsIi4uL3BhY2thZ2VzL0B1cHB5L3V0aWxzL3NyYy9pc05ldHdvcmtFcnJvci5qcyIsIi4uL3BhY2thZ2VzL0B1cHB5L3V0aWxzL3NyYy9pc09iamVjdFVSTC5qcyIsIi4uL3BhY2thZ2VzL0B1cHB5L3V0aWxzL3NyYy9pc1ByZXZpZXdTdXBwb3J0ZWQuanMiLCIuLi9wYWNrYWdlcy9AdXBweS91dGlscy9zcmMvbWltZVR5cGVzLmpzIiwiLi4vcGFja2FnZXMvQHVwcHkvdXRpbHMvc3JjL3ByZXR0eUVUQS5qcyIsIi4uL3BhY2thZ2VzL0B1cHB5L3V0aWxzL3NyYy9yZW1vdGVGaWxlT2JqVG9Mb2NhbC5qcyIsIi4uL3BhY2thZ2VzL0B1cHB5L3V0aWxzL3NyYy9zZWNvbmRzVG9UaW1lLmpzIiwiLi4vcGFja2FnZXMvQHVwcHkvdXRpbHMvc3JjL3NldHRsZS5qcyIsIi4uL3BhY2thZ2VzL0B1cHB5L3V0aWxzL3NyYy90b0FycmF5LmpzIiwiLi4vcGFja2FnZXMvQHVwcHkvdXRpbHMvc3JjL3RydW5jYXRlU3RyaW5nLmpzIiwiLi4vcGFja2FnZXMvQHVwcHkvd2ViY2FtL3NyYy9DYW1lcmFJY29uLmpzIiwiLi4vcGFja2FnZXMvQHVwcHkvd2ViY2FtL3NyYy9DYW1lcmFTY3JlZW4uanMiLCIuLi9wYWNrYWdlcy9AdXBweS93ZWJjYW0vc3JjL0Rpc2NhcmRCdXR0b24uanMiLCIuLi9wYWNrYWdlcy9AdXBweS93ZWJjYW0vc3JjL1Blcm1pc3Npb25zU2NyZWVuLmpzIiwiLi4vcGFja2FnZXMvQHVwcHkvd2ViY2FtL3NyYy9SZWNvcmRCdXR0b24uanMiLCIuLi9wYWNrYWdlcy9AdXBweS93ZWJjYW0vc3JjL1JlY29yZGluZ0xlbmd0aC5qcyIsIi4uL3BhY2thZ2VzL0B1cHB5L3dlYmNhbS9zcmMvU25hcHNob3RCdXR0b24uanMiLCIuLi9wYWNrYWdlcy9AdXBweS93ZWJjYW0vc3JjL1N1Ym1pdEJ1dHRvbi5qcyIsIi4uL3BhY2thZ2VzL0B1cHB5L3dlYmNhbS9zcmMvVmlkZW9Tb3VyY2VTZWxlY3QuanMiLCIuLi9wYWNrYWdlcy9AdXBweS93ZWJjYW0vc3JjL2Zvcm1hdFNlY29uZHMuanMiLCIuLi9wYWNrYWdlcy9AdXBweS93ZWJjYW0vc3JjL2luZGV4LmpzIiwiLi4vcGFja2FnZXMvQHVwcHkvd2ViY2FtL3NyYy9sb2NhbGUuanMiLCIuLi9wYWNrYWdlcy9AdXBweS93ZWJjYW0vc3JjL3N1cHBvcnRzTWVkaWFSZWNvcmRlci5qcyIsInNyYy9leGFtcGxlcy9tYXJrZG93bi1zbmlwcGV0cy9hcHAuZXM2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzdEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDdEpBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUNqdkRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMURBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQy9LQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUM3UUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUN0Q0E7QUFDQTs7OztBQ0RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FDdE9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUN6WEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUN2YkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUN4cURBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25EQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN4QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN0ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUN4SUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDOURBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwRUE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeExBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQ3RIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM1lBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1ZkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0RUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNiQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNaQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOWtCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdFJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeExBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQ25CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUNsTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNaQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNaQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDek1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzdEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RwQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDekJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7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QTlELEVBQWlFO0FBQy9ELFVBQU07QUFBRSxNQUFBLEtBQUY7QUFBUyxNQUFBO0FBQVQsUUFBa0IsSUFBSSxDQUFDLEtBQUwsQ0FBVyxZQUFZLENBQUUsV0FBVSxFQUFHLEVBQWYsQ0FBdkIsQ0FBeEI7QUFDQSxJQUFBLGFBQWEsQ0FBQyxLQUFELEVBQVEsSUFBUixDQUFiO0FBQ0Q7QUFDRjs7QUFFRCxRQUFRLENBQUMsYUFBVCxDQUF1QixNQUF2QixFQUErQixnQkFBL0IsQ0FBZ0QsUUFBaEQsRUFBMkQsS0FBRCxJQUFXO0FBQ25FLEVBQUEsS0FBSyxDQUFDLGNBQU47QUFFQSxRQUFNLEtBQUssR0FBRyxLQUFLLENBQUMsTUFBTixDQUFhLGFBQWIsQ0FBMkIscUJBQTNCLEVBQWtELEtBQWxELElBQ1osaUJBREY7QUFFQSxRQUFNLElBQUksR0FBRyxRQUFRLENBQUMsT0FBVCxDQUFpQixLQUE5QjtBQUVBLEVBQUEsV0FBVyxDQUFDLEtBQUQsRUFBUSxJQUFSLENBQVg7QUFDQSxFQUFBLGFBQWEsQ0FBQyxLQUFELEVBQVEsSUFBUixDQUFiO0FBRUEsRUFBQSxLQUFLLENBQUMsTUFBTixDQUFhLGFBQWIsQ0FBMkIsT0FBM0IsRUFBb0MsS0FBcEMsR0FBNEMsRUFBNUM7QUFDQSxFQUFBLEtBQUssQ0FBQyxNQUFOLENBQWEsYUFBYixDQUEyQixVQUEzQixFQUF1QyxLQUF2QyxHQUErQyxFQUEvQztBQUNELENBWkQ7QUFjQSxNQUFNLENBQUMsZ0JBQVAsQ0FBd0Isa0JBQXhCLEVBQTRDLE1BQU07QUFDaEQsRUFBQSxZQUFZO0FBQ2IsQ0FGRCIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gcihlLG4sdCl7ZnVuY3Rpb24gbyhpLGYpe2lmKCFuW2ldKXtpZighZVtpXSl7dmFyIGM9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZTtpZighZiYmYylyZXR1cm4gYyhpLCEwKTtpZih1KXJldHVybiB1KGksITApO3ZhciBhPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIraStcIidcIik7dGhyb3cgYS5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGF9dmFyIHA9bltpXT17ZXhwb3J0czp7fX07ZVtpXVswXS5jYWxsKHAuZXhwb3J0cyxmdW5jdGlvbihyKXt2YXIgbj1lW2ldWzFdW3JdO3JldHVybiBvKG58fHIpfSxwLHAuZXhwb3J0cyxyLGUsbix0KX1yZXR1cm4gbltpXS5leHBvcnRzfWZvcih2YXIgdT1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlLGk9MDtpPHQubGVuZ3RoO2krKylvKHRbaV0pO3JldHVybiBvfXJldHVybiByfSkoKSIsIlxuLyoqXG4gKiBFeHBvc2UgYEVtaXR0ZXJgLlxuICovXG5cbmV4cG9ydHMuRW1pdHRlciA9IEVtaXR0ZXI7XG5cbi8qKlxuICogSW5pdGlhbGl6ZSBhIG5ldyBgRW1pdHRlcmAuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBFbWl0dGVyKG9iaikge1xuICBpZiAob2JqKSByZXR1cm4gbWl4aW4ob2JqKTtcbn1cblxuLyoqXG4gKiBNaXhpbiB0aGUgZW1pdHRlciBwcm9wZXJ0aWVzLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIG1peGluKG9iaikge1xuICBmb3IgKHZhciBrZXkgaW4gRW1pdHRlci5wcm90b3R5cGUpIHtcbiAgICBvYmpba2V5XSA9IEVtaXR0ZXIucHJvdG90eXBlW2tleV07XG4gIH1cbiAgcmV0dXJuIG9iajtcbn1cblxuLyoqXG4gKiBMaXN0ZW4gb24gdGhlIGdpdmVuIGBldmVudGAgd2l0aCBgZm5gLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqIEByZXR1cm4ge0VtaXR0ZXJ9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkVtaXR0ZXIucHJvdG90eXBlLm9uID1cbkVtaXR0ZXIucHJvdG90eXBlLmFkZEV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbihldmVudCwgZm4pe1xuICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge307XG4gICh0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdID0gdGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XSB8fCBbXSlcbiAgICAucHVzaChmbik7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBBZGRzIGFuIGBldmVudGAgbGlzdGVuZXIgdGhhdCB3aWxsIGJlIGludm9rZWQgYSBzaW5nbGVcbiAqIHRpbWUgdGhlbiBhdXRvbWF0aWNhbGx5IHJlbW92ZWQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICogQHJldHVybiB7RW1pdHRlcn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuRW1pdHRlci5wcm90b3R5cGUub25jZSA9IGZ1bmN0aW9uKGV2ZW50LCBmbil7XG4gIGZ1bmN0aW9uIG9uKCkge1xuICAgIHRoaXMub2ZmKGV2ZW50LCBvbik7XG4gICAgZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIG9uLmZuID0gZm47XG4gIHRoaXMub24oZXZlbnQsIG9uKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFJlbW92ZSB0aGUgZ2l2ZW4gY2FsbGJhY2sgZm9yIGBldmVudGAgb3IgYWxsXG4gKiByZWdpc3RlcmVkIGNhbGxiYWNrcy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKiBAcmV0dXJuIHtFbWl0dGVyfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5FbWl0dGVyLnByb3RvdHlwZS5vZmYgPVxuRW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIgPVxuRW1pdHRlci5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID1cbkVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbihldmVudCwgZm4pe1xuICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge307XG5cbiAgLy8gYWxsXG4gIGlmICgwID09IGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICB0aGlzLl9jYWxsYmFja3MgPSB7fTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8vIHNwZWNpZmljIGV2ZW50XG4gIHZhciBjYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdO1xuICBpZiAoIWNhbGxiYWNrcykgcmV0dXJuIHRoaXM7XG5cbiAgLy8gcmVtb3ZlIGFsbCBoYW5kbGVyc1xuICBpZiAoMSA9PSBhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgZGVsZXRlIHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF07XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvLyByZW1vdmUgc3BlY2lmaWMgaGFuZGxlclxuICB2YXIgY2I7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY2FsbGJhY2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgY2IgPSBjYWxsYmFja3NbaV07XG4gICAgaWYgKGNiID09PSBmbiB8fCBjYi5mbiA9PT0gZm4pIHtcbiAgICAgIGNhbGxiYWNrcy5zcGxpY2UoaSwgMSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICAvLyBSZW1vdmUgZXZlbnQgc3BlY2lmaWMgYXJyYXlzIGZvciBldmVudCB0eXBlcyB0aGF0IG5vXG4gIC8vIG9uZSBpcyBzdWJzY3JpYmVkIGZvciB0byBhdm9pZCBtZW1vcnkgbGVhay5cbiAgaWYgKGNhbGxiYWNrcy5sZW5ndGggPT09IDApIHtcbiAgICBkZWxldGUgdGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBFbWl0IGBldmVudGAgd2l0aCB0aGUgZ2l2ZW4gYXJncy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcbiAqIEBwYXJhbSB7TWl4ZWR9IC4uLlxuICogQHJldHVybiB7RW1pdHRlcn1cbiAqL1xuXG5FbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24oZXZlbnQpe1xuICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge307XG5cbiAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpXG4gICAgLCBjYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdO1xuXG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gIH1cblxuICBpZiAoY2FsbGJhY2tzKSB7XG4gICAgY2FsbGJhY2tzID0gY2FsbGJhY2tzLnNsaWNlKDApO1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBjYWxsYmFja3MubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgIGNhbGxiYWNrc1tpXS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8vIGFsaWFzIHVzZWQgZm9yIHJlc2VydmVkIGV2ZW50cyAocHJvdGVjdGVkIG1ldGhvZClcbkVtaXR0ZXIucHJvdG90eXBlLmVtaXRSZXNlcnZlZCA9IEVtaXR0ZXIucHJvdG90eXBlLmVtaXQ7XG5cbi8qKlxuICogUmV0dXJuIGFycmF5IG9mIGNhbGxiYWNrcyBmb3IgYGV2ZW50YC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcbiAqIEByZXR1cm4ge0FycmF5fVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5FbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lcnMgPSBmdW5jdGlvbihldmVudCl7XG4gIHRoaXMuX2NhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyB8fCB7fTtcbiAgcmV0dXJuIHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF0gfHwgW107XG59O1xuXG4vKipcbiAqIENoZWNrIGlmIHRoaXMgZW1pdHRlciBoYXMgYGV2ZW50YCBoYW5kbGVycy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkVtaXR0ZXIucHJvdG90eXBlLmhhc0xpc3RlbmVycyA9IGZ1bmN0aW9uKGV2ZW50KXtcbiAgcmV0dXJuICEhIHRoaXMubGlzdGVuZXJzKGV2ZW50KS5sZW5ndGg7XG59O1xuIiwiLy8gQWRhcHRlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9GbGV0L3ByZXR0aWVyLWJ5dGVzL1xuLy8gQ2hhbmdpbmcgMTAwMCBieXRlcyB0byAxMDI0LCBzbyB3ZSBjYW4ga2VlcCB1cHBlcmNhc2UgS0IgdnMga0Jcbi8vIElTQyBMaWNlbnNlIChjKSBEYW4gRmxldHRyZSBodHRwczovL2dpdGh1Yi5jb20vRmxldC9wcmV0dGllci1ieXRlcy9ibG9iL21hc3Rlci9MSUNFTlNFXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHByZXR0aWVyQnl0ZXMgKG51bSkge1xuICBpZiAodHlwZW9mIG51bSAhPT0gJ251bWJlcicgfHwgaXNOYU4obnVtKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGEgbnVtYmVyLCBnb3QgJyArIHR5cGVvZiBudW0pXG4gIH1cblxuICB2YXIgbmVnID0gbnVtIDwgMFxuICB2YXIgdW5pdHMgPSBbJ0InLCAnS0InLCAnTUInLCAnR0InLCAnVEInLCAnUEInLCAnRUInLCAnWkInLCAnWUInXVxuXG4gIGlmIChuZWcpIHtcbiAgICBudW0gPSAtbnVtXG4gIH1cblxuICBpZiAobnVtIDwgMSkge1xuICAgIHJldHVybiAobmVnID8gJy0nIDogJycpICsgbnVtICsgJyBCJ1xuICB9XG5cbiAgdmFyIGV4cG9uZW50ID0gTWF0aC5taW4oTWF0aC5mbG9vcihNYXRoLmxvZyhudW0pIC8gTWF0aC5sb2coMTAyNCkpLCB1bml0cy5sZW5ndGggLSAxKVxuICBudW0gPSBOdW1iZXIobnVtIC8gTWF0aC5wb3coMTAyNCwgZXhwb25lbnQpKVxuICB2YXIgdW5pdCA9IHVuaXRzW2V4cG9uZW50XVxuXG4gIGlmIChudW0gPj0gMTAgfHwgbnVtICUgMSA9PT0gMCkge1xuICAgIC8vIERvIG5vdCBzaG93IGRlY2ltYWxzIHdoZW4gdGhlIG51bWJlciBpcyB0d28tZGlnaXQsIG9yIGlmIHRoZSBudW1iZXIgaGFzIG5vXG4gICAgLy8gZGVjaW1hbCBjb21wb25lbnQuXG4gICAgcmV0dXJuIChuZWcgPyAnLScgOiAnJykgKyBudW0udG9GaXhlZCgwKSArICcgJyArIHVuaXRcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKG5lZyA/ICctJyA6ICcnKSArIG51bS50b0ZpeGVkKDEpICsgJyAnICsgdW5pdFxuICB9XG59XG4iLCJcbi8qKlxuICogRXhwb3NlIGBCYWNrb2ZmYC5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IEJhY2tvZmY7XG5cbi8qKlxuICogSW5pdGlhbGl6ZSBiYWNrb2ZmIHRpbWVyIHdpdGggYG9wdHNgLlxuICpcbiAqIC0gYG1pbmAgaW5pdGlhbCB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcyBbMTAwXVxuICogLSBgbWF4YCBtYXggdGltZW91dCBbMTAwMDBdXG4gKiAtIGBqaXR0ZXJgIFswXVxuICogLSBgZmFjdG9yYCBbMl1cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0c1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBCYWNrb2ZmKG9wdHMpIHtcbiAgb3B0cyA9IG9wdHMgfHwge307XG4gIHRoaXMubXMgPSBvcHRzLm1pbiB8fCAxMDA7XG4gIHRoaXMubWF4ID0gb3B0cy5tYXggfHwgMTAwMDA7XG4gIHRoaXMuZmFjdG9yID0gb3B0cy5mYWN0b3IgfHwgMjtcbiAgdGhpcy5qaXR0ZXIgPSBvcHRzLmppdHRlciA+IDAgJiYgb3B0cy5qaXR0ZXIgPD0gMSA/IG9wdHMuaml0dGVyIDogMDtcbiAgdGhpcy5hdHRlbXB0cyA9IDA7XG59XG5cbi8qKlxuICogUmV0dXJuIHRoZSBiYWNrb2ZmIGR1cmF0aW9uLlxuICpcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuQmFja29mZi5wcm90b3R5cGUuZHVyYXRpb24gPSBmdW5jdGlvbigpe1xuICB2YXIgbXMgPSB0aGlzLm1zICogTWF0aC5wb3codGhpcy5mYWN0b3IsIHRoaXMuYXR0ZW1wdHMrKyk7XG4gIGlmICh0aGlzLmppdHRlcikge1xuICAgIHZhciByYW5kID0gIE1hdGgucmFuZG9tKCk7XG4gICAgdmFyIGRldmlhdGlvbiA9IE1hdGguZmxvb3IocmFuZCAqIHRoaXMuaml0dGVyICogbXMpO1xuICAgIG1zID0gKE1hdGguZmxvb3IocmFuZCAqIDEwKSAmIDEpID09IDAgID8gbXMgLSBkZXZpYXRpb24gOiBtcyArIGRldmlhdGlvbjtcbiAgfVxuICByZXR1cm4gTWF0aC5taW4obXMsIHRoaXMubWF4KSB8IDA7XG59O1xuXG4vKipcbiAqIFJlc2V0IHRoZSBudW1iZXIgb2YgYXR0ZW1wdHMuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5CYWNrb2ZmLnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uKCl7XG4gIHRoaXMuYXR0ZW1wdHMgPSAwO1xufTtcblxuLyoqXG4gKiBTZXQgdGhlIG1pbmltdW0gZHVyYXRpb25cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkJhY2tvZmYucHJvdG90eXBlLnNldE1pbiA9IGZ1bmN0aW9uKG1pbil7XG4gIHRoaXMubXMgPSBtaW47XG59O1xuXG4vKipcbiAqIFNldCB0aGUgbWF4aW11bSBkdXJhdGlvblxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuQmFja29mZi5wcm90b3R5cGUuc2V0TWF4ID0gZnVuY3Rpb24obWF4KXtcbiAgdGhpcy5tYXggPSBtYXg7XG59O1xuXG4vKipcbiAqIFNldCB0aGUgaml0dGVyXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5CYWNrb2ZmLnByb3RvdHlwZS5zZXRKaXR0ZXIgPSBmdW5jdGlvbihqaXR0ZXIpe1xuICB0aGlzLmppdHRlciA9IGppdHRlcjtcbn07XG5cbiIsIi8qXG4gKiBiYXNlNjQtYXJyYXlidWZmZXIgMS4wLjEgPGh0dHBzOi8vZ2l0aHViLmNvbS9uaWtsYXN2aC9iYXNlNjQtYXJyYXlidWZmZXI+XG4gKiBDb3B5cmlnaHQgKGMpIDIwMjEgTmlrbGFzIHZvbiBIZXJ0emVuIDxodHRwczovL2hlcnR6ZW4uY29tPlxuICogUmVsZWFzZWQgdW5kZXIgTUlUIExpY2Vuc2VcbiAqL1xuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBmYWN0b3J5KGV4cG9ydHMpIDpcbiAgICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWydleHBvcnRzJ10sIGZhY3RvcnkpIDpcbiAgICAoZ2xvYmFsID0gdHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsVGhpcyA6IGdsb2JhbCB8fCBzZWxmLCBmYWN0b3J5KGdsb2JhbFsnYmFzZTY0LWFycmF5YnVmZmVyJ10gPSB7fSkpO1xufSh0aGlzLCAoZnVuY3Rpb24gKGV4cG9ydHMpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgdmFyIGNoYXJzID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8nO1xuICAgIC8vIFVzZSBhIGxvb2t1cCB0YWJsZSB0byBmaW5kIHRoZSBpbmRleC5cbiAgICB2YXIgbG9va3VwID0gdHlwZW9mIFVpbnQ4QXJyYXkgPT09ICd1bmRlZmluZWQnID8gW10gOiBuZXcgVWludDhBcnJheSgyNTYpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hhcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbG9va3VwW2NoYXJzLmNoYXJDb2RlQXQoaSldID0gaTtcbiAgICB9XG4gICAgdmFyIGVuY29kZSA9IGZ1bmN0aW9uIChhcnJheWJ1ZmZlcikge1xuICAgICAgICB2YXIgYnl0ZXMgPSBuZXcgVWludDhBcnJheShhcnJheWJ1ZmZlciksIGksIGxlbiA9IGJ5dGVzLmxlbmd0aCwgYmFzZTY0ID0gJyc7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMykge1xuICAgICAgICAgICAgYmFzZTY0ICs9IGNoYXJzW2J5dGVzW2ldID4+IDJdO1xuICAgICAgICAgICAgYmFzZTY0ICs9IGNoYXJzWygoYnl0ZXNbaV0gJiAzKSA8PCA0KSB8IChieXRlc1tpICsgMV0gPj4gNCldO1xuICAgICAgICAgICAgYmFzZTY0ICs9IGNoYXJzWygoYnl0ZXNbaSArIDFdICYgMTUpIDw8IDIpIHwgKGJ5dGVzW2kgKyAyXSA+PiA2KV07XG4gICAgICAgICAgICBiYXNlNjQgKz0gY2hhcnNbYnl0ZXNbaSArIDJdICYgNjNdO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsZW4gJSAzID09PSAyKSB7XG4gICAgICAgICAgICBiYXNlNjQgPSBiYXNlNjQuc3Vic3RyaW5nKDAsIGJhc2U2NC5sZW5ndGggLSAxKSArICc9JztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChsZW4gJSAzID09PSAxKSB7XG4gICAgICAgICAgICBiYXNlNjQgPSBiYXNlNjQuc3Vic3RyaW5nKDAsIGJhc2U2NC5sZW5ndGggLSAyKSArICc9PSc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJhc2U2NDtcbiAgICB9O1xuICAgIHZhciBkZWNvZGUgPSBmdW5jdGlvbiAoYmFzZTY0KSB7XG4gICAgICAgIHZhciBidWZmZXJMZW5ndGggPSBiYXNlNjQubGVuZ3RoICogMC43NSwgbGVuID0gYmFzZTY0Lmxlbmd0aCwgaSwgcCA9IDAsIGVuY29kZWQxLCBlbmNvZGVkMiwgZW5jb2RlZDMsIGVuY29kZWQ0O1xuICAgICAgICBpZiAoYmFzZTY0W2Jhc2U2NC5sZW5ndGggLSAxXSA9PT0gJz0nKSB7XG4gICAgICAgICAgICBidWZmZXJMZW5ndGgtLTtcbiAgICAgICAgICAgIGlmIChiYXNlNjRbYmFzZTY0Lmxlbmd0aCAtIDJdID09PSAnPScpIHtcbiAgICAgICAgICAgICAgICBidWZmZXJMZW5ndGgtLTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgYXJyYXlidWZmZXIgPSBuZXcgQXJyYXlCdWZmZXIoYnVmZmVyTGVuZ3RoKSwgYnl0ZXMgPSBuZXcgVWludDhBcnJheShhcnJheWJ1ZmZlcik7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgICAgICAgICAgZW5jb2RlZDEgPSBsb29rdXBbYmFzZTY0LmNoYXJDb2RlQXQoaSldO1xuICAgICAgICAgICAgZW5jb2RlZDIgPSBsb29rdXBbYmFzZTY0LmNoYXJDb2RlQXQoaSArIDEpXTtcbiAgICAgICAgICAgIGVuY29kZWQzID0gbG9va3VwW2Jhc2U2NC5jaGFyQ29kZUF0KGkgKyAyKV07XG4gICAgICAgICAgICBlbmNvZGVkNCA9IGxvb2t1cFtiYXNlNjQuY2hhckNvZGVBdChpICsgMyldO1xuICAgICAgICAgICAgYnl0ZXNbcCsrXSA9IChlbmNvZGVkMSA8PCAyKSB8IChlbmNvZGVkMiA+PiA0KTtcbiAgICAgICAgICAgIGJ5dGVzW3ArK10gPSAoKGVuY29kZWQyICYgMTUpIDw8IDQpIHwgKGVuY29kZWQzID4+IDIpO1xuICAgICAgICAgICAgYnl0ZXNbcCsrXSA9ICgoZW5jb2RlZDMgJiAzKSA8PCA2KSB8IChlbmNvZGVkNCAmIDYzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXJyYXlidWZmZXI7XG4gICAgfTtcblxuICAgIGV4cG9ydHMuZGVjb2RlID0gZGVjb2RlO1xuICAgIGV4cG9ydHMuZW5jb2RlID0gZW5jb2RlO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxufSkpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJhc2U2NC1hcnJheWJ1ZmZlci51bWQuanMubWFwXG4iLCIndXNlIHN0cmljdCdcblxuZXhwb3J0cy5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aFxuZXhwb3J0cy50b0J5dGVBcnJheSA9IHRvQnl0ZUFycmF5XG5leHBvcnRzLmZyb21CeXRlQXJyYXkgPSBmcm9tQnl0ZUFycmF5XG5cbnZhciBsb29rdXAgPSBbXVxudmFyIHJldkxvb2t1cCA9IFtdXG52YXIgQXJyID0gdHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnID8gVWludDhBcnJheSA6IEFycmF5XG5cbnZhciBjb2RlID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8nXG5mb3IgKHZhciBpID0gMCwgbGVuID0gY29kZS5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICBsb29rdXBbaV0gPSBjb2RlW2ldXG4gIHJldkxvb2t1cFtjb2RlLmNoYXJDb2RlQXQoaSldID0gaVxufVxuXG4vLyBTdXBwb3J0IGRlY29kaW5nIFVSTC1zYWZlIGJhc2U2NCBzdHJpbmdzLCBhcyBOb2RlLmpzIGRvZXMuXG4vLyBTZWU6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Jhc2U2NCNVUkxfYXBwbGljYXRpb25zXG5yZXZMb29rdXBbJy0nLmNoYXJDb2RlQXQoMCldID0gNjJcbnJldkxvb2t1cFsnXycuY2hhckNvZGVBdCgwKV0gPSA2M1xuXG5mdW5jdGlvbiBnZXRMZW5zIChiNjQpIHtcbiAgdmFyIGxlbiA9IGI2NC5sZW5ndGhcblxuICBpZiAobGVuICUgNCA+IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc3RyaW5nLiBMZW5ndGggbXVzdCBiZSBhIG11bHRpcGxlIG9mIDQnKVxuICB9XG5cbiAgLy8gVHJpbSBvZmYgZXh0cmEgYnl0ZXMgYWZ0ZXIgcGxhY2Vob2xkZXIgYnl0ZXMgYXJlIGZvdW5kXG4gIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2JlYXRnYW1taXQvYmFzZTY0LWpzL2lzc3Vlcy80MlxuICB2YXIgdmFsaWRMZW4gPSBiNjQuaW5kZXhPZignPScpXG4gIGlmICh2YWxpZExlbiA9PT0gLTEpIHZhbGlkTGVuID0gbGVuXG5cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IHZhbGlkTGVuID09PSBsZW5cbiAgICA/IDBcbiAgICA6IDQgLSAodmFsaWRMZW4gJSA0KVxuXG4gIHJldHVybiBbdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbl1cbn1cblxuLy8gYmFzZTY0IGlzIDQvMyArIHVwIHRvIHR3byBjaGFyYWN0ZXJzIG9mIHRoZSBvcmlnaW5hbCBkYXRhXG5mdW5jdGlvbiBieXRlTGVuZ3RoIChiNjQpIHtcbiAgdmFyIGxlbnMgPSBnZXRMZW5zKGI2NClcbiAgdmFyIHZhbGlkTGVuID0gbGVuc1swXVxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gbGVuc1sxXVxuICByZXR1cm4gKCh2YWxpZExlbiArIHBsYWNlSG9sZGVyc0xlbikgKiAzIC8gNCkgLSBwbGFjZUhvbGRlcnNMZW5cbn1cblxuZnVuY3Rpb24gX2J5dGVMZW5ndGggKGI2NCwgdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbikge1xuICByZXR1cm4gKCh2YWxpZExlbiArIHBsYWNlSG9sZGVyc0xlbikgKiAzIC8gNCkgLSBwbGFjZUhvbGRlcnNMZW5cbn1cblxuZnVuY3Rpb24gdG9CeXRlQXJyYXkgKGI2NCkge1xuICB2YXIgdG1wXG4gIHZhciBsZW5zID0gZ2V0TGVucyhiNjQpXG4gIHZhciB2YWxpZExlbiA9IGxlbnNbMF1cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IGxlbnNbMV1cblxuICB2YXIgYXJyID0gbmV3IEFycihfYnl0ZUxlbmd0aChiNjQsIHZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW4pKVxuXG4gIHZhciBjdXJCeXRlID0gMFxuXG4gIC8vIGlmIHRoZXJlIGFyZSBwbGFjZWhvbGRlcnMsIG9ubHkgZ2V0IHVwIHRvIHRoZSBsYXN0IGNvbXBsZXRlIDQgY2hhcnNcbiAgdmFyIGxlbiA9IHBsYWNlSG9sZGVyc0xlbiA+IDBcbiAgICA/IHZhbGlkTGVuIC0gNFxuICAgIDogdmFsaWRMZW5cblxuICB2YXIgaVxuICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTgpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCAxMikgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildIDw8IDYpIHxcbiAgICAgIHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMyldXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDE2KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gOCkgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICBpZiAocGxhY2VIb2xkZXJzTGVuID09PSAyKSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDIpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA+PiA0KVxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgaWYgKHBsYWNlSG9sZGVyc0xlbiA9PT0gMSkge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxMCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDQpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA+PiAyKVxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBhcnJcbn1cblxuZnVuY3Rpb24gdHJpcGxldFRvQmFzZTY0IChudW0pIHtcbiAgcmV0dXJuIGxvb2t1cFtudW0gPj4gMTggJiAweDNGXSArXG4gICAgbG9va3VwW251bSA+PiAxMiAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtID4+IDYgJiAweDNGXSArXG4gICAgbG9va3VwW251bSAmIDB4M0ZdXG59XG5cbmZ1bmN0aW9uIGVuY29kZUNodW5rICh1aW50OCwgc3RhcnQsIGVuZCkge1xuICB2YXIgdG1wXG4gIHZhciBvdXRwdXQgPSBbXVxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkgKz0gMykge1xuICAgIHRtcCA9XG4gICAgICAoKHVpbnQ4W2ldIDw8IDE2KSAmIDB4RkYwMDAwKSArXG4gICAgICAoKHVpbnQ4W2kgKyAxXSA8PCA4KSAmIDB4RkYwMCkgK1xuICAgICAgKHVpbnQ4W2kgKyAyXSAmIDB4RkYpXG4gICAgb3V0cHV0LnB1c2godHJpcGxldFRvQmFzZTY0KHRtcCkpXG4gIH1cbiAgcmV0dXJuIG91dHB1dC5qb2luKCcnKVxufVxuXG5mdW5jdGlvbiBmcm9tQnl0ZUFycmF5ICh1aW50OCkge1xuICB2YXIgdG1wXG4gIHZhciBsZW4gPSB1aW50OC5sZW5ndGhcbiAgdmFyIGV4dHJhQnl0ZXMgPSBsZW4gJSAzIC8vIGlmIHdlIGhhdmUgMSBieXRlIGxlZnQsIHBhZCAyIGJ5dGVzXG4gIHZhciBwYXJ0cyA9IFtdXG4gIHZhciBtYXhDaHVua0xlbmd0aCA9IDE2MzgzIC8vIG11c3QgYmUgbXVsdGlwbGUgb2YgM1xuXG4gIC8vIGdvIHRocm91Z2ggdGhlIGFycmF5IGV2ZXJ5IHRocmVlIGJ5dGVzLCB3ZSdsbCBkZWFsIHdpdGggdHJhaWxpbmcgc3R1ZmYgbGF0ZXJcbiAgZm9yICh2YXIgaSA9IDAsIGxlbjIgPSBsZW4gLSBleHRyYUJ5dGVzOyBpIDwgbGVuMjsgaSArPSBtYXhDaHVua0xlbmd0aCkge1xuICAgIHBhcnRzLnB1c2goZW5jb2RlQ2h1bmsodWludDgsIGksIChpICsgbWF4Q2h1bmtMZW5ndGgpID4gbGVuMiA/IGxlbjIgOiAoaSArIG1heENodW5rTGVuZ3RoKSkpXG4gIH1cblxuICAvLyBwYWQgdGhlIGVuZCB3aXRoIHplcm9zLCBidXQgbWFrZSBzdXJlIHRvIG5vdCBmb3JnZXQgdGhlIGV4dHJhIGJ5dGVzXG4gIGlmIChleHRyYUJ5dGVzID09PSAxKSB7XG4gICAgdG1wID0gdWludDhbbGVuIC0gMV1cbiAgICBwYXJ0cy5wdXNoKFxuICAgICAgbG9va3VwW3RtcCA+PiAyXSArXG4gICAgICBsb29rdXBbKHRtcCA8PCA0KSAmIDB4M0ZdICtcbiAgICAgICc9PSdcbiAgICApXG4gIH0gZWxzZSBpZiAoZXh0cmFCeXRlcyA9PT0gMikge1xuICAgIHRtcCA9ICh1aW50OFtsZW4gLSAyXSA8PCA4KSArIHVpbnQ4W2xlbiAtIDFdXG4gICAgcGFydHMucHVzaChcbiAgICAgIGxvb2t1cFt0bXAgPj4gMTBdICtcbiAgICAgIGxvb2t1cFsodG1wID4+IDQpICYgMHgzRl0gK1xuICAgICAgbG9va3VwWyh0bXAgPDwgMikgJiAweDNGXSArXG4gICAgICAnPSdcbiAgICApXG4gIH1cblxuICByZXR1cm4gcGFydHMuam9pbignJylcbn1cbiIsIi8qIVxuICogVGhlIGJ1ZmZlciBtb2R1bGUgZnJvbSBub2RlLmpzLCBmb3IgdGhlIGJyb3dzZXIuXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGh0dHBzOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cblxuJ3VzZSBzdHJpY3QnXG5cbnZhciBiYXNlNjQgPSByZXF1aXJlKCdiYXNlNjQtanMnKVxudmFyIGllZWU3NTQgPSByZXF1aXJlKCdpZWVlNzU0JylcblxuZXhwb3J0cy5CdWZmZXIgPSBCdWZmZXJcbmV4cG9ydHMuU2xvd0J1ZmZlciA9IFNsb3dCdWZmZXJcbmV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVMgPSA1MFxuXG52YXIgS19NQVhfTEVOR1RIID0gMHg3ZmZmZmZmZlxuZXhwb3J0cy5rTWF4TGVuZ3RoID0gS19NQVhfTEVOR1RIXG5cbi8qKlxuICogSWYgYEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUYDpcbiAqICAgPT09IHRydWUgICAgVXNlIFVpbnQ4QXJyYXkgaW1wbGVtZW50YXRpb24gKGZhc3Rlc3QpXG4gKiAgID09PSBmYWxzZSAgIFByaW50IHdhcm5pbmcgYW5kIHJlY29tbWVuZCB1c2luZyBgYnVmZmVyYCB2NC54IHdoaWNoIGhhcyBhbiBPYmplY3RcbiAqICAgICAgICAgICAgICAgaW1wbGVtZW50YXRpb24gKG1vc3QgY29tcGF0aWJsZSwgZXZlbiBJRTYpXG4gKlxuICogQnJvd3NlcnMgdGhhdCBzdXBwb3J0IHR5cGVkIGFycmF5cyBhcmUgSUUgMTArLCBGaXJlZm94IDQrLCBDaHJvbWUgNyssIFNhZmFyaSA1LjErLFxuICogT3BlcmEgMTEuNissIGlPUyA0LjIrLlxuICpcbiAqIFdlIHJlcG9ydCB0aGF0IHRoZSBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgdHlwZWQgYXJyYXlzIGlmIHRoZSBhcmUgbm90IHN1YmNsYXNzYWJsZVxuICogdXNpbmcgX19wcm90b19fLiBGaXJlZm94IDQtMjkgbGFja3Mgc3VwcG9ydCBmb3IgYWRkaW5nIG5ldyBwcm9wZXJ0aWVzIHRvIGBVaW50OEFycmF5YFxuICogKFNlZTogaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njk1NDM4KS4gSUUgMTAgbGFja3Mgc3VwcG9ydFxuICogZm9yIF9fcHJvdG9fXyBhbmQgaGFzIGEgYnVnZ3kgdHlwZWQgYXJyYXkgaW1wbGVtZW50YXRpb24uXG4gKi9cbkJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUID0gdHlwZWRBcnJheVN1cHBvcnQoKVxuXG5pZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUICYmIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIHR5cGVvZiBjb25zb2xlLmVycm9yID09PSAnZnVuY3Rpb24nKSB7XG4gIGNvbnNvbGUuZXJyb3IoXG4gICAgJ1RoaXMgYnJvd3NlciBsYWNrcyB0eXBlZCBhcnJheSAoVWludDhBcnJheSkgc3VwcG9ydCB3aGljaCBpcyByZXF1aXJlZCBieSAnICtcbiAgICAnYGJ1ZmZlcmAgdjUueC4gVXNlIGBidWZmZXJgIHY0LnggaWYgeW91IHJlcXVpcmUgb2xkIGJyb3dzZXIgc3VwcG9ydC4nXG4gIClcbn1cblxuZnVuY3Rpb24gdHlwZWRBcnJheVN1cHBvcnQgKCkge1xuICAvLyBDYW4gdHlwZWQgYXJyYXkgaW5zdGFuY2VzIGNhbiBiZSBhdWdtZW50ZWQ/XG4gIHRyeSB7XG4gICAgdmFyIGFyciA9IG5ldyBVaW50OEFycmF5KDEpXG4gICAgYXJyLl9fcHJvdG9fXyA9IHsgX19wcm90b19fOiBVaW50OEFycmF5LnByb3RvdHlwZSwgZm9vOiBmdW5jdGlvbiAoKSB7IHJldHVybiA0MiB9IH1cbiAgICByZXR1cm4gYXJyLmZvbygpID09PSA0MlxuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KEJ1ZmZlci5wcm90b3R5cGUsICdwYXJlbnQnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKHRoaXMpKSByZXR1cm4gdW5kZWZpbmVkXG4gICAgcmV0dXJuIHRoaXMuYnVmZmVyXG4gIH1cbn0pXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShCdWZmZXIucHJvdG90eXBlLCAnb2Zmc2V0Jywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcih0aGlzKSkgcmV0dXJuIHVuZGVmaW5lZFxuICAgIHJldHVybiB0aGlzLmJ5dGVPZmZzZXRcbiAgfVxufSlcblxuZnVuY3Rpb24gY3JlYXRlQnVmZmVyIChsZW5ndGgpIHtcbiAgaWYgKGxlbmd0aCA+IEtfTUFYX0xFTkdUSCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgdmFsdWUgXCInICsgbGVuZ3RoICsgJ1wiIGlzIGludmFsaWQgZm9yIG9wdGlvbiBcInNpemVcIicpXG4gIH1cbiAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2VcbiAgdmFyIGJ1ZiA9IG5ldyBVaW50OEFycmF5KGxlbmd0aClcbiAgYnVmLl9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgcmV0dXJuIGJ1ZlxufVxuXG4vKipcbiAqIFRoZSBCdWZmZXIgY29uc3RydWN0b3IgcmV0dXJucyBpbnN0YW5jZXMgb2YgYFVpbnQ4QXJyYXlgIHRoYXQgaGF2ZSB0aGVpclxuICogcHJvdG90eXBlIGNoYW5nZWQgdG8gYEJ1ZmZlci5wcm90b3R5cGVgLiBGdXJ0aGVybW9yZSwgYEJ1ZmZlcmAgaXMgYSBzdWJjbGFzcyBvZlxuICogYFVpbnQ4QXJyYXlgLCBzbyB0aGUgcmV0dXJuZWQgaW5zdGFuY2VzIHdpbGwgaGF2ZSBhbGwgdGhlIG5vZGUgYEJ1ZmZlcmAgbWV0aG9kc1xuICogYW5kIHRoZSBgVWludDhBcnJheWAgbWV0aG9kcy4gU3F1YXJlIGJyYWNrZXQgbm90YXRpb24gd29ya3MgYXMgZXhwZWN0ZWQgLS0gaXRcbiAqIHJldHVybnMgYSBzaW5nbGUgb2N0ZXQuXG4gKlxuICogVGhlIGBVaW50OEFycmF5YCBwcm90b3R5cGUgcmVtYWlucyB1bm1vZGlmaWVkLlxuICovXG5cbmZ1bmN0aW9uIEJ1ZmZlciAoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgLy8gQ29tbW9uIGNhc2UuXG4gIGlmICh0eXBlb2YgYXJnID09PSAnbnVtYmVyJykge1xuICAgIGlmICh0eXBlb2YgZW5jb2RpbmdPck9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICdUaGUgXCJzdHJpbmdcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgc3RyaW5nLiBSZWNlaXZlZCB0eXBlIG51bWJlcidcbiAgICAgIClcbiAgICB9XG4gICAgcmV0dXJuIGFsbG9jVW5zYWZlKGFyZylcbiAgfVxuICByZXR1cm4gZnJvbShhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuLy8gRml4IHN1YmFycmF5KCkgaW4gRVMyMDE2LiBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyL3B1bGwvOTdcbmlmICh0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wuc3BlY2llcyAhPSBudWxsICYmXG4gICAgQnVmZmVyW1N5bWJvbC5zcGVjaWVzXSA9PT0gQnVmZmVyKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShCdWZmZXIsIFN5bWJvbC5zcGVjaWVzLCB7XG4gICAgdmFsdWU6IG51bGwsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIHdyaXRhYmxlOiBmYWxzZVxuICB9KVxufVxuXG5CdWZmZXIucG9vbFNpemUgPSA4MTkyIC8vIG5vdCB1c2VkIGJ5IHRoaXMgaW1wbGVtZW50YXRpb25cblxuZnVuY3Rpb24gZnJvbSAodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBmcm9tU3RyaW5nKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0KVxuICB9XG5cbiAgaWYgKEFycmF5QnVmZmVyLmlzVmlldyh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZnJvbUFycmF5TGlrZSh2YWx1ZSlcbiAgfVxuXG4gIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKFxuICAgICAgJ1RoZSBmaXJzdCBhcmd1bWVudCBtdXN0IGJlIG9uZSBvZiB0eXBlIHN0cmluZywgQnVmZmVyLCBBcnJheUJ1ZmZlciwgQXJyYXksICcgK1xuICAgICAgJ29yIEFycmF5LWxpa2UgT2JqZWN0LiBSZWNlaXZlZCB0eXBlICcgKyAodHlwZW9mIHZhbHVlKVxuICAgIClcbiAgfVxuXG4gIGlmIChpc0luc3RhbmNlKHZhbHVlLCBBcnJheUJ1ZmZlcikgfHxcbiAgICAgICh2YWx1ZSAmJiBpc0luc3RhbmNlKHZhbHVlLmJ1ZmZlciwgQXJyYXlCdWZmZXIpKSkge1xuICAgIHJldHVybiBmcm9tQXJyYXlCdWZmZXIodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICdUaGUgXCJ2YWx1ZVwiIGFyZ3VtZW50IG11c3Qgbm90IGJlIG9mIHR5cGUgbnVtYmVyLiBSZWNlaXZlZCB0eXBlIG51bWJlcidcbiAgICApXG4gIH1cblxuICB2YXIgdmFsdWVPZiA9IHZhbHVlLnZhbHVlT2YgJiYgdmFsdWUudmFsdWVPZigpXG4gIGlmICh2YWx1ZU9mICE9IG51bGwgJiYgdmFsdWVPZiAhPT0gdmFsdWUpIHtcbiAgICByZXR1cm4gQnVmZmVyLmZyb20odmFsdWVPZiwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgdmFyIGIgPSBmcm9tT2JqZWN0KHZhbHVlKVxuICBpZiAoYikgcmV0dXJuIGJcblxuICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvUHJpbWl0aXZlICE9IG51bGwgJiZcbiAgICAgIHR5cGVvZiB2YWx1ZVtTeW1ib2wudG9QcmltaXRpdmVdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKFxuICAgICAgdmFsdWVbU3ltYm9sLnRvUHJpbWl0aXZlXSgnc3RyaW5nJyksIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aFxuICAgIClcbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgJ1RoZSBmaXJzdCBhcmd1bWVudCBtdXN0IGJlIG9uZSBvZiB0eXBlIHN0cmluZywgQnVmZmVyLCBBcnJheUJ1ZmZlciwgQXJyYXksICcgK1xuICAgICdvciBBcnJheS1saWtlIE9iamVjdC4gUmVjZWl2ZWQgdHlwZSAnICsgKHR5cGVvZiB2YWx1ZSlcbiAgKVxufVxuXG4vKipcbiAqIEZ1bmN0aW9uYWxseSBlcXVpdmFsZW50IHRvIEJ1ZmZlcihhcmcsIGVuY29kaW5nKSBidXQgdGhyb3dzIGEgVHlwZUVycm9yXG4gKiBpZiB2YWx1ZSBpcyBhIG51bWJlci5cbiAqIEJ1ZmZlci5mcm9tKHN0clssIGVuY29kaW5nXSlcbiAqIEJ1ZmZlci5mcm9tKGFycmF5KVxuICogQnVmZmVyLmZyb20oYnVmZmVyKVxuICogQnVmZmVyLmZyb20oYXJyYXlCdWZmZXJbLCBieXRlT2Zmc2V0WywgbGVuZ3RoXV0pXG4gKiovXG5CdWZmZXIuZnJvbSA9IGZ1bmN0aW9uICh2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBmcm9tKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cbi8vIE5vdGU6IENoYW5nZSBwcm90b3R5cGUgKmFmdGVyKiBCdWZmZXIuZnJvbSBpcyBkZWZpbmVkIHRvIHdvcmthcm91bmQgQ2hyb21lIGJ1Zzpcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyL3B1bGwvMTQ4XG5CdWZmZXIucHJvdG90eXBlLl9fcHJvdG9fXyA9IFVpbnQ4QXJyYXkucHJvdG90eXBlXG5CdWZmZXIuX19wcm90b19fID0gVWludDhBcnJheVxuXG5mdW5jdGlvbiBhc3NlcnRTaXplIChzaXplKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInNpemVcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgbnVtYmVyJylcbiAgfSBlbHNlIGlmIChzaXplIDwgMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgdmFsdWUgXCInICsgc2l6ZSArICdcIiBpcyBpbnZhbGlkIGZvciBvcHRpb24gXCJzaXplXCInKVxuICB9XG59XG5cbmZ1bmN0aW9uIGFsbG9jIChzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICBhc3NlcnRTaXplKHNpemUpXG4gIGlmIChzaXplIDw9IDApIHtcbiAgICByZXR1cm4gY3JlYXRlQnVmZmVyKHNpemUpXG4gIH1cbiAgaWYgKGZpbGwgIT09IHVuZGVmaW5lZCkge1xuICAgIC8vIE9ubHkgcGF5IGF0dGVudGlvbiB0byBlbmNvZGluZyBpZiBpdCdzIGEgc3RyaW5nLiBUaGlzXG4gICAgLy8gcHJldmVudHMgYWNjaWRlbnRhbGx5IHNlbmRpbmcgaW4gYSBudW1iZXIgdGhhdCB3b3VsZFxuICAgIC8vIGJlIGludGVycHJldHRlZCBhcyBhIHN0YXJ0IG9mZnNldC5cbiAgICByZXR1cm4gdHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJ1xuICAgICAgPyBjcmVhdGVCdWZmZXIoc2l6ZSkuZmlsbChmaWxsLCBlbmNvZGluZylcbiAgICAgIDogY3JlYXRlQnVmZmVyKHNpemUpLmZpbGwoZmlsbClcbiAgfVxuICByZXR1cm4gY3JlYXRlQnVmZmVyKHNpemUpXG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBmaWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICogYWxsb2Moc2l6ZVssIGZpbGxbLCBlbmNvZGluZ11dKVxuICoqL1xuQnVmZmVyLmFsbG9jID0gZnVuY3Rpb24gKHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIHJldHVybiBhbGxvYyhzaXplLCBmaWxsLCBlbmNvZGluZylcbn1cblxuZnVuY3Rpb24gYWxsb2NVbnNhZmUgKHNpemUpIHtcbiAgYXNzZXJ0U2l6ZShzaXplKVxuICByZXR1cm4gY3JlYXRlQnVmZmVyKHNpemUgPCAwID8gMCA6IGNoZWNrZWQoc2l6ZSkgfCAwKVxufVxuXG4vKipcbiAqIEVxdWl2YWxlbnQgdG8gQnVmZmVyKG51bSksIGJ5IGRlZmF1bHQgY3JlYXRlcyBhIG5vbi16ZXJvLWZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKiAqL1xuQnVmZmVyLmFsbG9jVW5zYWZlID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgcmV0dXJuIGFsbG9jVW5zYWZlKHNpemUpXG59XG4vKipcbiAqIEVxdWl2YWxlbnQgdG8gU2xvd0J1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICovXG5CdWZmZXIuYWxsb2NVbnNhZmVTbG93ID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgcmV0dXJuIGFsbG9jVW5zYWZlKHNpemUpXG59XG5cbmZ1bmN0aW9uIGZyb21TdHJpbmcgKHN0cmluZywgZW5jb2RpbmcpIHtcbiAgaWYgKHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycgfHwgZW5jb2RpbmcgPT09ICcnKSB7XG4gICAgZW5jb2RpbmcgPSAndXRmOCdcbiAgfVxuXG4gIGlmICghQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICB9XG5cbiAgdmFyIGxlbmd0aCA9IGJ5dGVMZW5ndGgoc3RyaW5nLCBlbmNvZGluZykgfCAwXG4gIHZhciBidWYgPSBjcmVhdGVCdWZmZXIobGVuZ3RoKVxuXG4gIHZhciBhY3R1YWwgPSBidWYud3JpdGUoc3RyaW5nLCBlbmNvZGluZylcblxuICBpZiAoYWN0dWFsICE9PSBsZW5ndGgpIHtcbiAgICAvLyBXcml0aW5nIGEgaGV4IHN0cmluZywgZm9yIGV4YW1wbGUsIHRoYXQgY29udGFpbnMgaW52YWxpZCBjaGFyYWN0ZXJzIHdpbGxcbiAgICAvLyBjYXVzZSBldmVyeXRoaW5nIGFmdGVyIHRoZSBmaXJzdCBpbnZhbGlkIGNoYXJhY3RlciB0byBiZSBpZ25vcmVkLiAoZS5nLlxuICAgIC8vICdhYnh4Y2QnIHdpbGwgYmUgdHJlYXRlZCBhcyAnYWInKVxuICAgIGJ1ZiA9IGJ1Zi5zbGljZSgwLCBhY3R1YWwpXG4gIH1cblxuICByZXR1cm4gYnVmXG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUxpa2UgKGFycmF5KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGggPCAwID8gMCA6IGNoZWNrZWQoYXJyYXkubGVuZ3RoKSB8IDBcbiAgdmFyIGJ1ZiA9IGNyZWF0ZUJ1ZmZlcihsZW5ndGgpXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHtcbiAgICBidWZbaV0gPSBhcnJheVtpXSAmIDI1NVxuICB9XG4gIHJldHVybiBidWZcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5QnVmZmVyIChhcnJheSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmIChieXRlT2Zmc2V0IDwgMCB8fCBhcnJheS5ieXRlTGVuZ3RoIDwgYnl0ZU9mZnNldCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcIm9mZnNldFwiIGlzIG91dHNpZGUgb2YgYnVmZmVyIGJvdW5kcycpXG4gIH1cblxuICBpZiAoYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQgKyAobGVuZ3RoIHx8IDApKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1wibGVuZ3RoXCIgaXMgb3V0c2lkZSBvZiBidWZmZXIgYm91bmRzJylcbiAgfVxuXG4gIHZhciBidWZcbiAgaWYgKGJ5dGVPZmZzZXQgPT09IHVuZGVmaW5lZCAmJiBsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGJ1ZiA9IG5ldyBVaW50OEFycmF5KGFycmF5KVxuICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYnVmID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXksIGJ5dGVPZmZzZXQpXG4gIH0gZWxzZSB7XG4gICAgYnVmID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlXG4gIGJ1Zi5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIHJldHVybiBidWZcbn1cblxuZnVuY3Rpb24gZnJvbU9iamVjdCAob2JqKSB7XG4gIGlmIChCdWZmZXIuaXNCdWZmZXIob2JqKSkge1xuICAgIHZhciBsZW4gPSBjaGVja2VkKG9iai5sZW5ndGgpIHwgMFxuICAgIHZhciBidWYgPSBjcmVhdGVCdWZmZXIobGVuKVxuXG4gICAgaWYgKGJ1Zi5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBidWZcbiAgICB9XG5cbiAgICBvYmouY29weShidWYsIDAsIDAsIGxlbilcbiAgICByZXR1cm4gYnVmXG4gIH1cblxuICBpZiAob2JqLmxlbmd0aCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKHR5cGVvZiBvYmoubGVuZ3RoICE9PSAnbnVtYmVyJyB8fCBudW1iZXJJc05hTihvYmoubGVuZ3RoKSkge1xuICAgICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcigwKVxuICAgIH1cbiAgICByZXR1cm4gZnJvbUFycmF5TGlrZShvYmopXG4gIH1cblxuICBpZiAob2JqLnR5cGUgPT09ICdCdWZmZXInICYmIEFycmF5LmlzQXJyYXkob2JqLmRhdGEpKSB7XG4gICAgcmV0dXJuIGZyb21BcnJheUxpa2Uob2JqLmRhdGEpXG4gIH1cbn1cblxuZnVuY3Rpb24gY2hlY2tlZCAobGVuZ3RoKSB7XG4gIC8vIE5vdGU6IGNhbm5vdCB1c2UgYGxlbmd0aCA8IEtfTUFYX0xFTkdUSGAgaGVyZSBiZWNhdXNlIHRoYXQgZmFpbHMgd2hlblxuICAvLyBsZW5ndGggaXMgTmFOICh3aGljaCBpcyBvdGhlcndpc2UgY29lcmNlZCB0byB6ZXJvLilcbiAgaWYgKGxlbmd0aCA+PSBLX01BWF9MRU5HVEgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byBhbGxvY2F0ZSBCdWZmZXIgbGFyZ2VyIHRoYW4gbWF4aW11bSAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAnc2l6ZTogMHgnICsgS19NQVhfTEVOR1RILnRvU3RyaW5nKDE2KSArICcgYnl0ZXMnKVxuICB9XG4gIHJldHVybiBsZW5ndGggfCAwXG59XG5cbmZ1bmN0aW9uIFNsb3dCdWZmZXIgKGxlbmd0aCkge1xuICBpZiAoK2xlbmd0aCAhPSBsZW5ndGgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBlcWVxZXFcbiAgICBsZW5ndGggPSAwXG4gIH1cbiAgcmV0dXJuIEJ1ZmZlci5hbGxvYygrbGVuZ3RoKVxufVxuXG5CdWZmZXIuaXNCdWZmZXIgPSBmdW5jdGlvbiBpc0J1ZmZlciAoYikge1xuICByZXR1cm4gYiAhPSBudWxsICYmIGIuX2lzQnVmZmVyID09PSB0cnVlICYmXG4gICAgYiAhPT0gQnVmZmVyLnByb3RvdHlwZSAvLyBzbyBCdWZmZXIuaXNCdWZmZXIoQnVmZmVyLnByb3RvdHlwZSkgd2lsbCBiZSBmYWxzZVxufVxuXG5CdWZmZXIuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUgKGEsIGIpIHtcbiAgaWYgKGlzSW5zdGFuY2UoYSwgVWludDhBcnJheSkpIGEgPSBCdWZmZXIuZnJvbShhLCBhLm9mZnNldCwgYS5ieXRlTGVuZ3RoKVxuICBpZiAoaXNJbnN0YW5jZShiLCBVaW50OEFycmF5KSkgYiA9IEJ1ZmZlci5mcm9tKGIsIGIub2Zmc2V0LCBiLmJ5dGVMZW5ndGgpXG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGEpIHx8ICFCdWZmZXIuaXNCdWZmZXIoYikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgJ1RoZSBcImJ1ZjFcIiwgXCJidWYyXCIgYXJndW1lbnRzIG11c3QgYmUgb25lIG9mIHR5cGUgQnVmZmVyIG9yIFVpbnQ4QXJyYXknXG4gICAgKVxuICB9XG5cbiAgaWYgKGEgPT09IGIpIHJldHVybiAwXG5cbiAgdmFyIHggPSBhLmxlbmd0aFxuICB2YXIgeSA9IGIubGVuZ3RoXG5cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IE1hdGgubWluKHgsIHkpOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAoYVtpXSAhPT0gYltpXSkge1xuICAgICAgeCA9IGFbaV1cbiAgICAgIHkgPSBiW2ldXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIGlmICh4IDwgeSkgcmV0dXJuIC0xXG4gIGlmICh5IDwgeCkgcmV0dXJuIDFcbiAgcmV0dXJuIDBcbn1cblxuQnVmZmVyLmlzRW5jb2RpbmcgPSBmdW5jdGlvbiBpc0VuY29kaW5nIChlbmNvZGluZykge1xuICBzd2l0Y2ggKFN0cmluZyhlbmNvZGluZykudG9Mb3dlckNhc2UoKSkge1xuICAgIGNhc2UgJ2hleCc6XG4gICAgY2FzZSAndXRmOCc6XG4gICAgY2FzZSAndXRmLTgnOlxuICAgIGNhc2UgJ2FzY2lpJzpcbiAgICBjYXNlICdsYXRpbjEnOlxuICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgY2FzZSAnYmFzZTY0JzpcbiAgICBjYXNlICd1Y3MyJzpcbiAgICBjYXNlICd1Y3MtMic6XG4gICAgY2FzZSAndXRmMTZsZSc6XG4gICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgcmV0dXJuIHRydWVcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuQnVmZmVyLmNvbmNhdCA9IGZ1bmN0aW9uIGNvbmNhdCAobGlzdCwgbGVuZ3RoKSB7XG4gIGlmICghQXJyYXkuaXNBcnJheShsaXN0KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpXG4gIH1cblxuICBpZiAobGlzdC5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gQnVmZmVyLmFsbG9jKDApXG4gIH1cblxuICB2YXIgaVxuICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBsZW5ndGggPSAwXG4gICAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyArK2kpIHtcbiAgICAgIGxlbmd0aCArPSBsaXN0W2ldLmxlbmd0aFxuICAgIH1cbiAgfVxuXG4gIHZhciBidWZmZXIgPSBCdWZmZXIuYWxsb2NVbnNhZmUobGVuZ3RoKVxuICB2YXIgcG9zID0gMFxuICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgIHZhciBidWYgPSBsaXN0W2ldXG4gICAgaWYgKGlzSW5zdGFuY2UoYnVmLCBVaW50OEFycmF5KSkge1xuICAgICAgYnVmID0gQnVmZmVyLmZyb20oYnVmKVxuICAgIH1cbiAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKVxuICAgIH1cbiAgICBidWYuY29weShidWZmZXIsIHBvcylcbiAgICBwb3MgKz0gYnVmLmxlbmd0aFxuICB9XG4gIHJldHVybiBidWZmZXJcbn1cblxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoc3RyaW5nLCBlbmNvZGluZykge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHN0cmluZykpIHtcbiAgICByZXR1cm4gc3RyaW5nLmxlbmd0aFxuICB9XG4gIGlmIChBcnJheUJ1ZmZlci5pc1ZpZXcoc3RyaW5nKSB8fCBpc0luc3RhbmNlKHN0cmluZywgQXJyYXlCdWZmZXIpKSB7XG4gICAgcmV0dXJuIHN0cmluZy5ieXRlTGVuZ3RoXG4gIH1cbiAgaWYgKHR5cGVvZiBzdHJpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICdUaGUgXCJzdHJpbmdcIiBhcmd1bWVudCBtdXN0IGJlIG9uZSBvZiB0eXBlIHN0cmluZywgQnVmZmVyLCBvciBBcnJheUJ1ZmZlci4gJyArXG4gICAgICAnUmVjZWl2ZWQgdHlwZSAnICsgdHlwZW9mIHN0cmluZ1xuICAgIClcbiAgfVxuXG4gIHZhciBsZW4gPSBzdHJpbmcubGVuZ3RoXG4gIHZhciBtdXN0TWF0Y2ggPSAoYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdID09PSB0cnVlKVxuICBpZiAoIW11c3RNYXRjaCAmJiBsZW4gPT09IDApIHJldHVybiAwXG5cbiAgLy8gVXNlIGEgZm9yIGxvb3AgdG8gYXZvaWQgcmVjdXJzaW9uXG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG4gIGZvciAoOzspIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxlblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIGxlbiAqIDJcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBsZW4gPj4+IDFcbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRUb0J5dGVzKHN0cmluZykubGVuZ3RoXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHtcbiAgICAgICAgICByZXR1cm4gbXVzdE1hdGNoID8gLTEgOiB1dGY4VG9CeXRlcyhzdHJpbmcpLmxlbmd0aCAvLyBhc3N1bWUgdXRmOFxuICAgICAgICB9XG4gICAgICAgIGVuY29kaW5nID0gKCcnICsgZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5CdWZmZXIuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGhcblxuZnVuY3Rpb24gc2xvd1RvU3RyaW5nIChlbmNvZGluZywgc3RhcnQsIGVuZCkge1xuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuXG4gIC8vIE5vIG5lZWQgdG8gdmVyaWZ5IHRoYXQgXCJ0aGlzLmxlbmd0aCA8PSBNQVhfVUlOVDMyXCIgc2luY2UgaXQncyBhIHJlYWQtb25seVxuICAvLyBwcm9wZXJ0eSBvZiBhIHR5cGVkIGFycmF5LlxuXG4gIC8vIFRoaXMgYmVoYXZlcyBuZWl0aGVyIGxpa2UgU3RyaW5nIG5vciBVaW50OEFycmF5IGluIHRoYXQgd2Ugc2V0IHN0YXJ0L2VuZFxuICAvLyB0byB0aGVpciB1cHBlci9sb3dlciBib3VuZHMgaWYgdGhlIHZhbHVlIHBhc3NlZCBpcyBvdXQgb2YgcmFuZ2UuXG4gIC8vIHVuZGVmaW5lZCBpcyBoYW5kbGVkIHNwZWNpYWxseSBhcyBwZXIgRUNNQS0yNjIgNnRoIEVkaXRpb24sXG4gIC8vIFNlY3Rpb24gMTMuMy4zLjcgUnVudGltZSBTZW1hbnRpY3M6IEtleWVkQmluZGluZ0luaXRpYWxpemF0aW9uLlxuICBpZiAoc3RhcnQgPT09IHVuZGVmaW5lZCB8fCBzdGFydCA8IDApIHtcbiAgICBzdGFydCA9IDBcbiAgfVxuICAvLyBSZXR1cm4gZWFybHkgaWYgc3RhcnQgPiB0aGlzLmxlbmd0aC4gRG9uZSBoZXJlIHRvIHByZXZlbnQgcG90ZW50aWFsIHVpbnQzMlxuICAvLyBjb2VyY2lvbiBmYWlsIGJlbG93LlxuICBpZiAoc3RhcnQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkIHx8IGVuZCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgfVxuXG4gIGlmIChlbmQgPD0gMCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgLy8gRm9yY2UgY29lcnNpb24gdG8gdWludDMyLiBUaGlzIHdpbGwgYWxzbyBjb2VyY2UgZmFsc2V5L05hTiB2YWx1ZXMgdG8gMC5cbiAgZW5kID4+Pj0gMFxuICBzdGFydCA+Pj49IDBcblxuICBpZiAoZW5kIDw9IHN0YXJ0KSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9ICd1dGY4J1xuXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGhleFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgICAgcmV0dXJuIGFzY2lpU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsYXRpbjFTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICByZXR1cm4gYmFzZTY0U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIHV0ZjE2bGVTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICAgICAgZW5jb2RpbmcgPSAoZW5jb2RpbmcgKyAnJykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cblxuLy8gVGhpcyBwcm9wZXJ0eSBpcyB1c2VkIGJ5IGBCdWZmZXIuaXNCdWZmZXJgIChhbmQgdGhlIGBpcy1idWZmZXJgIG5wbSBwYWNrYWdlKVxuLy8gdG8gZGV0ZWN0IGEgQnVmZmVyIGluc3RhbmNlLiBJdCdzIG5vdCBwb3NzaWJsZSB0byB1c2UgYGluc3RhbmNlb2YgQnVmZmVyYFxuLy8gcmVsaWFibHkgaW4gYSBicm93c2VyaWZ5IGNvbnRleHQgYmVjYXVzZSB0aGVyZSBjb3VsZCBiZSBtdWx0aXBsZSBkaWZmZXJlbnRcbi8vIGNvcGllcyBvZiB0aGUgJ2J1ZmZlcicgcGFja2FnZSBpbiB1c2UuIFRoaXMgbWV0aG9kIHdvcmtzIGV2ZW4gZm9yIEJ1ZmZlclxuLy8gaW5zdGFuY2VzIHRoYXQgd2VyZSBjcmVhdGVkIGZyb20gYW5vdGhlciBjb3B5IG9mIHRoZSBgYnVmZmVyYCBwYWNrYWdlLlxuLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9pc3N1ZXMvMTU0XG5CdWZmZXIucHJvdG90eXBlLl9pc0J1ZmZlciA9IHRydWVcblxuZnVuY3Rpb24gc3dhcCAoYiwgbiwgbSkge1xuICB2YXIgaSA9IGJbbl1cbiAgYltuXSA9IGJbbV1cbiAgYlttXSA9IGlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwMTYgPSBmdW5jdGlvbiBzd2FwMTYgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDIgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDE2LWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDIpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyAxKVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDMyID0gZnVuY3Rpb24gc3dhcDMyICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSA0ICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAzMi1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSA0KSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgMylcbiAgICBzd2FwKHRoaXMsIGkgKyAxLCBpICsgMilcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXA2NCA9IGZ1bmN0aW9uIHN3YXA2NCAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgOCAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNjQtYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gOCkge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDcpXG4gICAgc3dhcCh0aGlzLCBpICsgMSwgaSArIDYpXG4gICAgc3dhcCh0aGlzLCBpICsgMiwgaSArIDUpXG4gICAgc3dhcCh0aGlzLCBpICsgMywgaSArIDQpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nICgpIHtcbiAgdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW5ndGggPT09IDApIHJldHVybiAnJ1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCAwLCBsZW5ndGgpXG4gIHJldHVybiBzbG93VG9TdHJpbmcuYXBwbHkodGhpcywgYXJndW1lbnRzKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvTG9jYWxlU3RyaW5nID0gQnVmZmVyLnByb3RvdHlwZS50b1N0cmluZ1xuXG5CdWZmZXIucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uIGVxdWFscyAoYikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihiKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlcicpXG4gIGlmICh0aGlzID09PSBiKSByZXR1cm4gdHJ1ZVxuICByZXR1cm4gQnVmZmVyLmNvbXBhcmUodGhpcywgYikgPT09IDBcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCAoKSB7XG4gIHZhciBzdHIgPSAnJ1xuICB2YXIgbWF4ID0gZXhwb3J0cy5JTlNQRUNUX01BWF9CWVRFU1xuICBzdHIgPSB0aGlzLnRvU3RyaW5nKCdoZXgnLCAwLCBtYXgpLnJlcGxhY2UoLyguezJ9KS9nLCAnJDEgJykudHJpbSgpXG4gIGlmICh0aGlzLmxlbmd0aCA+IG1heCkgc3RyICs9ICcgLi4uICdcbiAgcmV0dXJuICc8QnVmZmVyICcgKyBzdHIgKyAnPidcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAodGFyZ2V0LCBzdGFydCwgZW5kLCB0aGlzU3RhcnQsIHRoaXNFbmQpIHtcbiAgaWYgKGlzSW5zdGFuY2UodGFyZ2V0LCBVaW50OEFycmF5KSkge1xuICAgIHRhcmdldCA9IEJ1ZmZlci5mcm9tKHRhcmdldCwgdGFyZ2V0Lm9mZnNldCwgdGFyZ2V0LmJ5dGVMZW5ndGgpXG4gIH1cbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIodGFyZ2V0KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAnVGhlIFwidGFyZ2V0XCIgYXJndW1lbnQgbXVzdCBiZSBvbmUgb2YgdHlwZSBCdWZmZXIgb3IgVWludDhBcnJheS4gJyArXG4gICAgICAnUmVjZWl2ZWQgdHlwZSAnICsgKHR5cGVvZiB0YXJnZXQpXG4gICAgKVxuICB9XG5cbiAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICBzdGFydCA9IDBcbiAgfVxuICBpZiAoZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICBlbmQgPSB0YXJnZXQgPyB0YXJnZXQubGVuZ3RoIDogMFxuICB9XG4gIGlmICh0aGlzU3RhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXNTdGFydCA9IDBcbiAgfVxuICBpZiAodGhpc0VuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpc0VuZCA9IHRoaXMubGVuZ3RoXG4gIH1cblxuICBpZiAoc3RhcnQgPCAwIHx8IGVuZCA+IHRhcmdldC5sZW5ndGggfHwgdGhpc1N0YXJ0IDwgMCB8fCB0aGlzRW5kID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignb3V0IG9mIHJhbmdlIGluZGV4JylcbiAgfVxuXG4gIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCAmJiBzdGFydCA+PSBlbmQpIHtcbiAgICByZXR1cm4gMFxuICB9XG4gIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCkge1xuICAgIHJldHVybiAtMVxuICB9XG4gIGlmIChzdGFydCA+PSBlbmQpIHtcbiAgICByZXR1cm4gMVxuICB9XG5cbiAgc3RhcnQgPj4+PSAwXG4gIGVuZCA+Pj49IDBcbiAgdGhpc1N0YXJ0ID4+Pj0gMFxuICB0aGlzRW5kID4+Pj0gMFxuXG4gIGlmICh0aGlzID09PSB0YXJnZXQpIHJldHVybiAwXG5cbiAgdmFyIHggPSB0aGlzRW5kIC0gdGhpc1N0YXJ0XG4gIHZhciB5ID0gZW5kIC0gc3RhcnRcbiAgdmFyIGxlbiA9IE1hdGgubWluKHgsIHkpXG5cbiAgdmFyIHRoaXNDb3B5ID0gdGhpcy5zbGljZSh0aGlzU3RhcnQsIHRoaXNFbmQpXG4gIHZhciB0YXJnZXRDb3B5ID0gdGFyZ2V0LnNsaWNlKHN0YXJ0LCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgIGlmICh0aGlzQ29weVtpXSAhPT0gdGFyZ2V0Q29weVtpXSkge1xuICAgICAgeCA9IHRoaXNDb3B5W2ldXG4gICAgICB5ID0gdGFyZ2V0Q29weVtpXVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBpZiAoeCA8IHkpIHJldHVybiAtMVxuICBpZiAoeSA8IHgpIHJldHVybiAxXG4gIHJldHVybiAwXG59XG5cbi8vIEZpbmRzIGVpdGhlciB0aGUgZmlyc3QgaW5kZXggb2YgYHZhbGAgaW4gYGJ1ZmZlcmAgYXQgb2Zmc2V0ID49IGBieXRlT2Zmc2V0YCxcbi8vIE9SIHRoZSBsYXN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA8PSBgYnl0ZU9mZnNldGAuXG4vL1xuLy8gQXJndW1lbnRzOlxuLy8gLSBidWZmZXIgLSBhIEJ1ZmZlciB0byBzZWFyY2hcbi8vIC0gdmFsIC0gYSBzdHJpbmcsIEJ1ZmZlciwgb3IgbnVtYmVyXG4vLyAtIGJ5dGVPZmZzZXQgLSBhbiBpbmRleCBpbnRvIGBidWZmZXJgOyB3aWxsIGJlIGNsYW1wZWQgdG8gYW4gaW50MzJcbi8vIC0gZW5jb2RpbmcgLSBhbiBvcHRpb25hbCBlbmNvZGluZywgcmVsZXZhbnQgaXMgdmFsIGlzIGEgc3RyaW5nXG4vLyAtIGRpciAtIHRydWUgZm9yIGluZGV4T2YsIGZhbHNlIGZvciBsYXN0SW5kZXhPZlxuZnVuY3Rpb24gYmlkaXJlY3Rpb25hbEluZGV4T2YgKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7XG4gIC8vIEVtcHR5IGJ1ZmZlciBtZWFucyBubyBtYXRjaFxuICBpZiAoYnVmZmVyLmxlbmd0aCA9PT0gMCkgcmV0dXJuIC0xXG5cbiAgLy8gTm9ybWFsaXplIGJ5dGVPZmZzZXRcbiAgaWYgKHR5cGVvZiBieXRlT2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgIGVuY29kaW5nID0gYnl0ZU9mZnNldFxuICAgIGJ5dGVPZmZzZXQgPSAwXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA+IDB4N2ZmZmZmZmYpIHtcbiAgICBieXRlT2Zmc2V0ID0gMHg3ZmZmZmZmZlxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPCAtMHg4MDAwMDAwMCkge1xuICAgIGJ5dGVPZmZzZXQgPSAtMHg4MDAwMDAwMFxuICB9XG4gIGJ5dGVPZmZzZXQgPSArYnl0ZU9mZnNldCAvLyBDb2VyY2UgdG8gTnVtYmVyLlxuICBpZiAobnVtYmVySXNOYU4oYnl0ZU9mZnNldCkpIHtcbiAgICAvLyBieXRlT2Zmc2V0OiBpdCBpdCdzIHVuZGVmaW5lZCwgbnVsbCwgTmFOLCBcImZvb1wiLCBldGMsIHNlYXJjaCB3aG9sZSBidWZmZXJcbiAgICBieXRlT2Zmc2V0ID0gZGlyID8gMCA6IChidWZmZXIubGVuZ3RoIC0gMSlcbiAgfVxuXG4gIC8vIE5vcm1hbGl6ZSBieXRlT2Zmc2V0OiBuZWdhdGl2ZSBvZmZzZXRzIHN0YXJ0IGZyb20gdGhlIGVuZCBvZiB0aGUgYnVmZmVyXG4gIGlmIChieXRlT2Zmc2V0IDwgMCkgYnl0ZU9mZnNldCA9IGJ1ZmZlci5sZW5ndGggKyBieXRlT2Zmc2V0XG4gIGlmIChieXRlT2Zmc2V0ID49IGJ1ZmZlci5sZW5ndGgpIHtcbiAgICBpZiAoZGlyKSByZXR1cm4gLTFcbiAgICBlbHNlIGJ5dGVPZmZzZXQgPSBidWZmZXIubGVuZ3RoIC0gMVxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPCAwKSB7XG4gICAgaWYgKGRpcikgYnl0ZU9mZnNldCA9IDBcbiAgICBlbHNlIHJldHVybiAtMVxuICB9XG5cbiAgLy8gTm9ybWFsaXplIHZhbFxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICB2YWwgPSBCdWZmZXIuZnJvbSh2YWwsIGVuY29kaW5nKVxuICB9XG5cbiAgLy8gRmluYWxseSwgc2VhcmNoIGVpdGhlciBpbmRleE9mIChpZiBkaXIgaXMgdHJ1ZSkgb3IgbGFzdEluZGV4T2ZcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcih2YWwpKSB7XG4gICAgLy8gU3BlY2lhbCBjYXNlOiBsb29raW5nIGZvciBlbXB0eSBzdHJpbmcvYnVmZmVyIGFsd2F5cyBmYWlsc1xuICAgIGlmICh2YWwubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gLTFcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5SW5kZXhPZihidWZmZXIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcilcbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIHZhbCA9IHZhbCAmIDB4RkYgLy8gU2VhcmNoIGZvciBhIGJ5dGUgdmFsdWUgWzAtMjU1XVxuICAgIGlmICh0eXBlb2YgVWludDhBcnJheS5wcm90b3R5cGUuaW5kZXhPZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaWYgKGRpcikge1xuICAgICAgICByZXR1cm4gVWludDhBcnJheS5wcm90b3R5cGUuaW5kZXhPZi5jYWxsKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmxhc3RJbmRleE9mLmNhbGwoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhcnJheUluZGV4T2YoYnVmZmVyLCBbIHZhbCBdLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKVxuICB9XG5cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcigndmFsIG11c3QgYmUgc3RyaW5nLCBudW1iZXIgb3IgQnVmZmVyJylcbn1cblxuZnVuY3Rpb24gYXJyYXlJbmRleE9mIChhcnIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcikge1xuICB2YXIgaW5kZXhTaXplID0gMVxuICB2YXIgYXJyTGVuZ3RoID0gYXJyLmxlbmd0aFxuICB2YXIgdmFsTGVuZ3RoID0gdmFsLmxlbmd0aFxuXG4gIGlmIChlbmNvZGluZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZW5jb2RpbmcgPSBTdHJpbmcoZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICBpZiAoZW5jb2RpbmcgPT09ICd1Y3MyJyB8fCBlbmNvZGluZyA9PT0gJ3Vjcy0yJyB8fFxuICAgICAgICBlbmNvZGluZyA9PT0gJ3V0ZjE2bGUnIHx8IGVuY29kaW5nID09PSAndXRmLTE2bGUnKSB7XG4gICAgICBpZiAoYXJyLmxlbmd0aCA8IDIgfHwgdmFsLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgcmV0dXJuIC0xXG4gICAgICB9XG4gICAgICBpbmRleFNpemUgPSAyXG4gICAgICBhcnJMZW5ndGggLz0gMlxuICAgICAgdmFsTGVuZ3RoIC89IDJcbiAgICAgIGJ5dGVPZmZzZXQgLz0gMlxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWQgKGJ1ZiwgaSkge1xuICAgIGlmIChpbmRleFNpemUgPT09IDEpIHtcbiAgICAgIHJldHVybiBidWZbaV1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGJ1Zi5yZWFkVUludDE2QkUoaSAqIGluZGV4U2l6ZSlcbiAgICB9XG4gIH1cblxuICB2YXIgaVxuICBpZiAoZGlyKSB7XG4gICAgdmFyIGZvdW5kSW5kZXggPSAtMVxuICAgIGZvciAoaSA9IGJ5dGVPZmZzZXQ7IGkgPCBhcnJMZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHJlYWQoYXJyLCBpKSA9PT0gcmVhZCh2YWwsIGZvdW5kSW5kZXggPT09IC0xID8gMCA6IGkgLSBmb3VuZEluZGV4KSkge1xuICAgICAgICBpZiAoZm91bmRJbmRleCA9PT0gLTEpIGZvdW5kSW5kZXggPSBpXG4gICAgICAgIGlmIChpIC0gZm91bmRJbmRleCArIDEgPT09IHZhbExlbmd0aCkgcmV0dXJuIGZvdW5kSW5kZXggKiBpbmRleFNpemVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChmb3VuZEluZGV4ICE9PSAtMSkgaSAtPSBpIC0gZm91bmRJbmRleFxuICAgICAgICBmb3VuZEluZGV4ID0gLTFcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGJ5dGVPZmZzZXQgKyB2YWxMZW5ndGggPiBhcnJMZW5ndGgpIGJ5dGVPZmZzZXQgPSBhcnJMZW5ndGggLSB2YWxMZW5ndGhcbiAgICBmb3IgKGkgPSBieXRlT2Zmc2V0OyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIGZvdW5kID0gdHJ1ZVxuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB2YWxMZW5ndGg7IGorKykge1xuICAgICAgICBpZiAocmVhZChhcnIsIGkgKyBqKSAhPT0gcmVhZCh2YWwsIGopKSB7XG4gICAgICAgICAgZm91bmQgPSBmYWxzZVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChmb3VuZCkgcmV0dXJuIGlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gLTFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbmNsdWRlcyA9IGZ1bmN0aW9uIGluY2x1ZGVzICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiB0aGlzLmluZGV4T2YodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykgIT09IC0xXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5kZXhPZiA9IGZ1bmN0aW9uIGluZGV4T2YgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGJpZGlyZWN0aW9uYWxJbmRleE9mKHRoaXMsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIHRydWUpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUubGFzdEluZGV4T2YgPSBmdW5jdGlvbiBsYXN0SW5kZXhPZiAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gYmlkaXJlY3Rpb25hbEluZGV4T2YodGhpcywgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZmFsc2UpXG59XG5cbmZ1bmN0aW9uIGhleFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgb2Zmc2V0ID0gTnVtYmVyKG9mZnNldCkgfHwgMFxuICB2YXIgcmVtYWluaW5nID0gYnVmLmxlbmd0aCAtIG9mZnNldFxuICBpZiAoIWxlbmd0aCkge1xuICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICB9IGVsc2Uge1xuICAgIGxlbmd0aCA9IE51bWJlcihsZW5ndGgpXG4gICAgaWYgKGxlbmd0aCA+IHJlbWFpbmluZykge1xuICAgICAgbGVuZ3RoID0gcmVtYWluaW5nXG4gICAgfVxuICB9XG5cbiAgdmFyIHN0ckxlbiA9IHN0cmluZy5sZW5ndGhcblxuICBpZiAobGVuZ3RoID4gc3RyTGVuIC8gMikge1xuICAgIGxlbmd0aCA9IHN0ckxlbiAvIDJcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgdmFyIHBhcnNlZCA9IHBhcnNlSW50KHN0cmluZy5zdWJzdHIoaSAqIDIsIDIpLCAxNilcbiAgICBpZiAobnVtYmVySXNOYU4ocGFyc2VkKSkgcmV0dXJuIGlcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSBwYXJzZWRcbiAgfVxuICByZXR1cm4gaVxufVxuXG5mdW5jdGlvbiB1dGY4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcih1dGY4VG9CeXRlcyhzdHJpbmcsIGJ1Zi5sZW5ndGggLSBvZmZzZXQpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBhc2NpaVdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIoYXNjaWlUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGxhdGluMVdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGFzY2lpV3JpdGUoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBiYXNlNjRXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKGJhc2U2NFRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gdWNzMldyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIodXRmMTZsZVRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIHdyaXRlIChzdHJpbmcsIG9mZnNldCwgbGVuZ3RoLCBlbmNvZGluZykge1xuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nKVxuICBpZiAob2Zmc2V0ID09PSB1bmRlZmluZWQpIHtcbiAgICBlbmNvZGluZyA9ICd1dGY4J1xuICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoXG4gICAgb2Zmc2V0ID0gMFxuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nLCBlbmNvZGluZylcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygb2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgIGVuY29kaW5nID0gb2Zmc2V0XG4gICAgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICBvZmZzZXQgPSAwXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIG9mZnNldFssIGxlbmd0aF1bLCBlbmNvZGluZ10pXG4gIH0gZWxzZSBpZiAoaXNGaW5pdGUob2Zmc2V0KSkge1xuICAgIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICAgIGlmIChpc0Zpbml0ZShsZW5ndGgpKSB7XG4gICAgICBsZW5ndGggPSBsZW5ndGggPj4+IDBcbiAgICAgIGlmIChlbmNvZGluZyA9PT0gdW5kZWZpbmVkKSBlbmNvZGluZyA9ICd1dGY4J1xuICAgIH0gZWxzZSB7XG4gICAgICBlbmNvZGluZyA9IGxlbmd0aFxuICAgICAgbGVuZ3RoID0gdW5kZWZpbmVkXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdCdWZmZXIud3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0WywgbGVuZ3RoXSkgaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZCdcbiAgICApXG4gIH1cblxuICB2YXIgcmVtYWluaW5nID0gdGhpcy5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkIHx8IGxlbmd0aCA+IHJlbWFpbmluZykgbGVuZ3RoID0gcmVtYWluaW5nXG5cbiAgaWYgKChzdHJpbmcubGVuZ3RoID4gMCAmJiAobGVuZ3RoIDwgMCB8fCBvZmZzZXQgPCAwKSkgfHwgb2Zmc2V0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byB3cml0ZSBvdXRzaWRlIGJ1ZmZlciBib3VuZHMnKVxuICB9XG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCdcblxuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGhleFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgICAgcmV0dXJuIGFzY2lpV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsYXRpbjFXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICAvLyBXYXJuaW5nOiBtYXhMZW5ndGggbm90IHRha2VuIGludG8gYWNjb3VudCBpbiBiYXNlNjRXcml0ZVxuICAgICAgICByZXR1cm4gYmFzZTY0V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIHVjczJXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04gKCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdCdWZmZXInLFxuICAgIGRhdGE6IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRoaXMuX2FyciB8fCB0aGlzLCAwKVxuICB9XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKHN0YXJ0ID09PSAwICYmIGVuZCA9PT0gYnVmLmxlbmd0aCkge1xuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1Zi5zbGljZShzdGFydCwgZW5kKSlcbiAgfVxufVxuXG5mdW5jdGlvbiB1dGY4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG4gIHZhciByZXMgPSBbXVxuXG4gIHZhciBpID0gc3RhcnRcbiAgd2hpbGUgKGkgPCBlbmQpIHtcbiAgICB2YXIgZmlyc3RCeXRlID0gYnVmW2ldXG4gICAgdmFyIGNvZGVQb2ludCA9IG51bGxcbiAgICB2YXIgYnl0ZXNQZXJTZXF1ZW5jZSA9IChmaXJzdEJ5dGUgPiAweEVGKSA/IDRcbiAgICAgIDogKGZpcnN0Qnl0ZSA+IDB4REYpID8gM1xuICAgICAgICA6IChmaXJzdEJ5dGUgPiAweEJGKSA/IDJcbiAgICAgICAgICA6IDFcblxuICAgIGlmIChpICsgYnl0ZXNQZXJTZXF1ZW5jZSA8PSBlbmQpIHtcbiAgICAgIHZhciBzZWNvbmRCeXRlLCB0aGlyZEJ5dGUsIGZvdXJ0aEJ5dGUsIHRlbXBDb2RlUG9pbnRcblxuICAgICAgc3dpdGNoIChieXRlc1BlclNlcXVlbmNlKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBpZiAoZmlyc3RCeXRlIDwgMHg4MCkge1xuICAgICAgICAgICAgY29kZVBvaW50ID0gZmlyc3RCeXRlXG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4MUYpIDw8IDB4NiB8IChzZWNvbmRCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHg3Rikge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAodGhpcmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweEMgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpIDw8IDB4NiB8ICh0aGlyZEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGRiAmJiAodGVtcENvZGVQb2ludCA8IDB4RDgwMCB8fCB0ZW1wQ29kZVBvaW50ID4gMHhERkZGKSkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBmb3VydGhCeXRlID0gYnVmW2kgKyAzXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAoZm91cnRoQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHgxMiB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHhDIHwgKHRoaXJkQnl0ZSAmIDB4M0YpIDw8IDB4NiB8IChmb3VydGhCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHhGRkZGICYmIHRlbXBDb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjb2RlUG9pbnQgPT09IG51bGwpIHtcbiAgICAgIC8vIHdlIGRpZCBub3QgZ2VuZXJhdGUgYSB2YWxpZCBjb2RlUG9pbnQgc28gaW5zZXJ0IGFcbiAgICAgIC8vIHJlcGxhY2VtZW50IGNoYXIgKFUrRkZGRCkgYW5kIGFkdmFuY2Ugb25seSAxIGJ5dGVcbiAgICAgIGNvZGVQb2ludCA9IDB4RkZGRFxuICAgICAgYnl0ZXNQZXJTZXF1ZW5jZSA9IDFcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA+IDB4RkZGRikge1xuICAgICAgLy8gZW5jb2RlIHRvIHV0ZjE2IChzdXJyb2dhdGUgcGFpciBkYW5jZSlcbiAgICAgIGNvZGVQb2ludCAtPSAweDEwMDAwXG4gICAgICByZXMucHVzaChjb2RlUG9pbnQgPj4+IDEwICYgMHgzRkYgfCAweEQ4MDApXG4gICAgICBjb2RlUG9pbnQgPSAweERDMDAgfCBjb2RlUG9pbnQgJiAweDNGRlxuICAgIH1cblxuICAgIHJlcy5wdXNoKGNvZGVQb2ludClcbiAgICBpICs9IGJ5dGVzUGVyU2VxdWVuY2VcbiAgfVxuXG4gIHJldHVybiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkocmVzKVxufVxuXG4vLyBCYXNlZCBvbiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yMjc0NzI3Mi82ODA3NDIsIHRoZSBicm93c2VyIHdpdGhcbi8vIHRoZSBsb3dlc3QgbGltaXQgaXMgQ2hyb21lLCB3aXRoIDB4MTAwMDAgYXJncy5cbi8vIFdlIGdvIDEgbWFnbml0dWRlIGxlc3MsIGZvciBzYWZldHlcbnZhciBNQVhfQVJHVU1FTlRTX0xFTkdUSCA9IDB4MTAwMFxuXG5mdW5jdGlvbiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkgKGNvZGVQb2ludHMpIHtcbiAgdmFyIGxlbiA9IGNvZGVQb2ludHMubGVuZ3RoXG4gIGlmIChsZW4gPD0gTUFYX0FSR1VNRU5UU19MRU5HVEgpIHtcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsIGNvZGVQb2ludHMpIC8vIGF2b2lkIGV4dHJhIHNsaWNlKClcbiAgfVxuXG4gIC8vIERlY29kZSBpbiBjaHVua3MgdG8gYXZvaWQgXCJjYWxsIHN0YWNrIHNpemUgZXhjZWVkZWRcIi5cbiAgdmFyIHJlcyA9ICcnXG4gIHZhciBpID0gMFxuICB3aGlsZSAoaSA8IGxlbikge1xuICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFxuICAgICAgU3RyaW5nLFxuICAgICAgY29kZVBvaW50cy5zbGljZShpLCBpICs9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKVxuICAgIClcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgcmV0ID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldICYgMHg3RilcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGxhdGluMVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHJldCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSlcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGhleFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGhcblxuICBpZiAoIXN0YXJ0IHx8IHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIGlmICghZW5kIHx8IGVuZCA8IDAgfHwgZW5kID4gbGVuKSBlbmQgPSBsZW5cblxuICB2YXIgb3V0ID0gJydcbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICBvdXQgKz0gdG9IZXgoYnVmW2ldKVxuICB9XG4gIHJldHVybiBvdXRcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGJ5dGVzID0gYnVmLnNsaWNlKHN0YXJ0LCBlbmQpXG4gIHZhciByZXMgPSAnJ1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZXNbaV0gKyAoYnl0ZXNbaSArIDFdICogMjU2KSlcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc2xpY2UgPSBmdW5jdGlvbiBzbGljZSAoc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgc3RhcnQgPSB+fnN0YXJ0XG4gIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogfn5lbmRcblxuICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgKz0gbGVuXG4gICAgaWYgKHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIH0gZWxzZSBpZiAoc3RhcnQgPiBsZW4pIHtcbiAgICBzdGFydCA9IGxlblxuICB9XG5cbiAgaWYgKGVuZCA8IDApIHtcbiAgICBlbmQgKz0gbGVuXG4gICAgaWYgKGVuZCA8IDApIGVuZCA9IDBcbiAgfSBlbHNlIGlmIChlbmQgPiBsZW4pIHtcbiAgICBlbmQgPSBsZW5cbiAgfVxuXG4gIGlmIChlbmQgPCBzdGFydCkgZW5kID0gc3RhcnRcblxuICB2YXIgbmV3QnVmID0gdGhpcy5zdWJhcnJheShzdGFydCwgZW5kKVxuICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZVxuICBuZXdCdWYuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICByZXR1cm4gbmV3QnVmXG59XG5cbi8qXG4gKiBOZWVkIHRvIG1ha2Ugc3VyZSB0aGF0IGJ1ZmZlciBpc24ndCB0cnlpbmcgdG8gd3JpdGUgb3V0IG9mIGJvdW5kcy5cbiAqL1xuZnVuY3Rpb24gY2hlY2tPZmZzZXQgKG9mZnNldCwgZXh0LCBsZW5ndGgpIHtcbiAgaWYgKChvZmZzZXQgJSAxKSAhPT0gMCB8fCBvZmZzZXQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignb2Zmc2V0IGlzIG5vdCB1aW50JylcbiAgaWYgKG9mZnNldCArIGV4dCA+IGxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RyeWluZyB0byBhY2Nlc3MgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50TEUgPSBmdW5jdGlvbiByZWFkVUludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldF1cbiAgdmFyIG11bCA9IDFcbiAgdmFyIGkgPSAwXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgaV0gKiBtdWxcbiAgfVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludEJFID0gZnVuY3Rpb24gcmVhZFVJbnRCRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG4gIH1cblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdXG4gIHZhciBtdWwgPSAxXG4gIHdoaWxlIChieXRlTGVuZ3RoID4gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF0gKiBtdWxcbiAgfVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDggPSBmdW5jdGlvbiByZWFkVUludDggKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiB0aGlzW29mZnNldF1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2TEUgPSBmdW5jdGlvbiByZWFkVUludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiB0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgOCkgfCB0aGlzW29mZnNldCArIDFdXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkxFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAoKHRoaXNbb2Zmc2V0XSkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgMTYpKSArXG4gICAgICAodGhpc1tvZmZzZXQgKyAzXSAqIDB4MTAwMDAwMClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDMyQkUgPSBmdW5jdGlvbiByZWFkVUludDMyQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0gKiAweDEwMDAwMDApICtcbiAgICAoKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgdGhpc1tvZmZzZXQgKyAzXSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50TEUgPSBmdW5jdGlvbiByZWFkSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XVxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludEJFID0gZnVuY3Rpb24gcmVhZEludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aFxuICB2YXIgbXVsID0gMVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWldXG4gIHdoaWxlIChpID4gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0taV0gKiBtdWxcbiAgfVxuICBtdWwgKj0gMHg4MFxuXG4gIGlmICh2YWwgPj0gbXVsKSB2YWwgLT0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpXG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQ4ID0gZnVuY3Rpb24gcmVhZEludDggKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpXG4gIGlmICghKHRoaXNbb2Zmc2V0XSAmIDB4ODApKSByZXR1cm4gKHRoaXNbb2Zmc2V0XSlcbiAgcmV0dXJuICgoMHhmZiAtIHRoaXNbb2Zmc2V0XSArIDEpICogLTEpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDE2TEUgPSBmdW5jdGlvbiByZWFkSW50MTZMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAxXSB8ICh0aGlzW29mZnNldF0gPDwgOClcbiAgcmV0dXJuICh2YWwgJiAweDgwMDApID8gdmFsIHwgMHhGRkZGMDAwMCA6IHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkxFID0gZnVuY3Rpb24gcmVhZEludDMyTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0pIHxcbiAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAzXSA8PCAyNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRJbnQzMkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDI0KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0TEUgPSBmdW5jdGlvbiByZWFkRmxvYXRMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIHRydWUsIDIzLCA0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdEJFID0gZnVuY3Rpb24gcmVhZEZsb2F0QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUxFID0gZnVuY3Rpb24gcmVhZERvdWJsZUxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgNTIsIDgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUJFID0gZnVuY3Rpb24gcmVhZERvdWJsZUJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDUyLCA4KVxufVxuXG5mdW5jdGlvbiBjaGVja0ludCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBleHQsIG1heCwgbWluKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiYnVmZmVyXCIgYXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlciBpbnN0YW5jZScpXG4gIGlmICh2YWx1ZSA+IG1heCB8fCB2YWx1ZSA8IG1pbikgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1widmFsdWVcIiBhcmd1bWVudCBpcyBvdXQgb2YgYm91bmRzJylcbiAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludExFID0gZnVuY3Rpb24gd3JpdGVVSW50TEUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIG1heEJ5dGVzID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpIC0gMVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG1heEJ5dGVzLCAwKVxuICB9XG5cbiAgdmFyIG11bCA9IDFcbiAgdmFyIGkgPSAwXG4gIHRoaXNbb2Zmc2V0XSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAodmFsdWUgLyBtdWwpICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnRCRSA9IGZ1bmN0aW9uIHdyaXRlVUludEJFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDFcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcbiAgfVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgdmFyIG11bCA9IDFcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50OCA9IGZ1bmN0aW9uIHdyaXRlVUludDggKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAxLCAweGZmLCAwKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHhmZmZmLCAwKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHhmZmZmLCAwKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDgpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyTEUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHhmZmZmZmZmZiwgMClcbiAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSA+Pj4gMjQpXG4gIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KVxuICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHhmZmZmZmZmZiwgMClcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiAyNClcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpXG4gIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50TEUgPSBmdW5jdGlvbiB3cml0ZUludExFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBsaW1pdCA9IE1hdGgucG93KDIsICg4ICogYnl0ZUxlbmd0aCkgLSAxKVxuXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbGltaXQgLSAxLCAtbGltaXQpXG4gIH1cblxuICB2YXIgaSA9IDBcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHN1YiA9IDBcbiAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgaWYgKHZhbHVlIDwgMCAmJiBzdWIgPT09IDAgJiYgdGhpc1tvZmZzZXQgKyBpIC0gMV0gIT09IDApIHtcbiAgICAgIHN1YiA9IDFcbiAgICB9XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICgodmFsdWUgLyBtdWwpID4+IDApIC0gc3ViICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludEJFID0gZnVuY3Rpb24gd3JpdGVJbnRCRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCAoOCAqIGJ5dGVMZW5ndGgpIC0gMSlcblxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIGxpbWl0IC0gMSwgLWxpbWl0KVxuICB9XG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoIC0gMVxuICB2YXIgbXVsID0gMVxuICB2YXIgc3ViID0gMFxuICB0aGlzW29mZnNldCArIGldID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgtLWkgPj0gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIGlmICh2YWx1ZSA8IDAgJiYgc3ViID09PSAwICYmIHRoaXNbb2Zmc2V0ICsgaSArIDFdICE9PSAwKSB7XG4gICAgICBzdWIgPSAxXG4gICAgfVxuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAoKHZhbHVlIC8gbXVsKSA+PiAwKSAtIHN1YiAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQ4ID0gZnVuY3Rpb24gd3JpdGVJbnQ4ICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHg3ZiwgLTB4ODApXG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZiArIHZhbHVlICsgMVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZMRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMClcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2QkUgPSBmdW5jdGlvbiB3cml0ZUludDE2QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVJbnQzMkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KVxuICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmZmZmZmICsgdmFsdWUgKyAxXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KVxuICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiA4KVxuICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuZnVuY3Rpb24gY2hlY2tJRUVFNzU0IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxuICBpZiAob2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbmZ1bmN0aW9uIHdyaXRlRmxvYXQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrSUVFRTc1NChidWYsIHZhbHVlLCBvZmZzZXQsIDQsIDMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgsIC0zLjQwMjgyMzQ2NjM4NTI4ODZlKzM4KVxuICB9XG4gIGllZWU3NTQud3JpdGUoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIDIzLCA0KVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRMRSA9IGZ1bmN0aW9uIHdyaXRlRmxvYXRMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRmxvYXQodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdEJFID0gZnVuY3Rpb24gd3JpdGVGbG9hdEJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbmZ1bmN0aW9uIHdyaXRlRG91YmxlIChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja0lFRUU3NTQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCA4LCAxLjc5NzY5MzEzNDg2MjMxNTdFKzMwOCwgLTEuNzk3NjkzMTM0ODYyMzE1N0UrMzA4KVxuICB9XG4gIGllZWU3NTQud3JpdGUoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIDUyLCA4KVxuICByZXR1cm4gb2Zmc2V0ICsgOFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlTEUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVCRSA9IGZ1bmN0aW9uIHdyaXRlRG91YmxlQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZURvdWJsZSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbi8vIGNvcHkodGFyZ2V0QnVmZmVyLCB0YXJnZXRTdGFydD0wLCBzb3VyY2VTdGFydD0wLCBzb3VyY2VFbmQ9YnVmZmVyLmxlbmd0aClcbkJ1ZmZlci5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uIGNvcHkgKHRhcmdldCwgdGFyZ2V0U3RhcnQsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIodGFyZ2V0KSkgdGhyb3cgbmV3IFR5cGVFcnJvcignYXJndW1lbnQgc2hvdWxkIGJlIGEgQnVmZmVyJylcbiAgaWYgKCFzdGFydCkgc3RhcnQgPSAwXG4gIGlmICghZW5kICYmIGVuZCAhPT0gMCkgZW5kID0gdGhpcy5sZW5ndGhcbiAgaWYgKHRhcmdldFN0YXJ0ID49IHRhcmdldC5sZW5ndGgpIHRhcmdldFN0YXJ0ID0gdGFyZ2V0Lmxlbmd0aFxuICBpZiAoIXRhcmdldFN0YXJ0KSB0YXJnZXRTdGFydCA9IDBcbiAgaWYgKGVuZCA+IDAgJiYgZW5kIDwgc3RhcnQpIGVuZCA9IHN0YXJ0XG5cbiAgLy8gQ29weSAwIGJ5dGVzOyB3ZSdyZSBkb25lXG4gIGlmIChlbmQgPT09IHN0YXJ0KSByZXR1cm4gMFxuICBpZiAodGFyZ2V0Lmxlbmd0aCA9PT0gMCB8fCB0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIDBcblxuICAvLyBGYXRhbCBlcnJvciBjb25kaXRpb25zXG4gIGlmICh0YXJnZXRTdGFydCA8IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcigndGFyZ2V0U3RhcnQgb3V0IG9mIGJvdW5kcycpXG4gIH1cbiAgaWYgKHN0YXJ0IDwgMCB8fCBzdGFydCA+PSB0aGlzLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG4gIGlmIChlbmQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignc291cmNlRW5kIG91dCBvZiBib3VuZHMnKVxuXG4gIC8vIEFyZSB3ZSBvb2I/XG4gIGlmIChlbmQgPiB0aGlzLmxlbmd0aCkgZW5kID0gdGhpcy5sZW5ndGhcbiAgaWYgKHRhcmdldC5sZW5ndGggLSB0YXJnZXRTdGFydCA8IGVuZCAtIHN0YXJ0KSB7XG4gICAgZW5kID0gdGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0ICsgc3RhcnRcbiAgfVxuXG4gIHZhciBsZW4gPSBlbmQgLSBzdGFydFxuXG4gIGlmICh0aGlzID09PSB0YXJnZXQgJiYgdHlwZW9mIFVpbnQ4QXJyYXkucHJvdG90eXBlLmNvcHlXaXRoaW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyBVc2UgYnVpbHQtaW4gd2hlbiBhdmFpbGFibGUsIG1pc3NpbmcgZnJvbSBJRTExXG4gICAgdGhpcy5jb3B5V2l0aGluKHRhcmdldFN0YXJ0LCBzdGFydCwgZW5kKVxuICB9IGVsc2UgaWYgKHRoaXMgPT09IHRhcmdldCAmJiBzdGFydCA8IHRhcmdldFN0YXJ0ICYmIHRhcmdldFN0YXJ0IDwgZW5kKSB7XG4gICAgLy8gZGVzY2VuZGluZyBjb3B5IGZyb20gZW5kXG4gICAgZm9yICh2YXIgaSA9IGxlbiAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICB0YXJnZXRbaSArIHRhcmdldFN0YXJ0XSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBVaW50OEFycmF5LnByb3RvdHlwZS5zZXQuY2FsbChcbiAgICAgIHRhcmdldCxcbiAgICAgIHRoaXMuc3ViYXJyYXkoc3RhcnQsIGVuZCksXG4gICAgICB0YXJnZXRTdGFydFxuICAgIClcbiAgfVxuXG4gIHJldHVybiBsZW5cbn1cblxuLy8gVXNhZ2U6XG4vLyAgICBidWZmZXIuZmlsbChudW1iZXJbLCBvZmZzZXRbLCBlbmRdXSlcbi8vICAgIGJ1ZmZlci5maWxsKGJ1ZmZlclssIG9mZnNldFssIGVuZF1dKVxuLy8gICAgYnVmZmVyLmZpbGwoc3RyaW5nWywgb2Zmc2V0WywgZW5kXV1bLCBlbmNvZGluZ10pXG5CdWZmZXIucHJvdG90eXBlLmZpbGwgPSBmdW5jdGlvbiBmaWxsICh2YWwsIHN0YXJ0LCBlbmQsIGVuY29kaW5nKSB7XG4gIC8vIEhhbmRsZSBzdHJpbmcgY2FzZXM6XG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIGlmICh0eXBlb2Ygc3RhcnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IHN0YXJ0XG4gICAgICBzdGFydCA9IDBcbiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZW5kID09PSAnc3RyaW5nJykge1xuICAgICAgZW5jb2RpbmcgPSBlbmRcbiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gICAgfVxuICAgIGlmIChlbmNvZGluZyAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2VuY29kaW5nIG11c3QgYmUgYSBzdHJpbmcnKVxuICAgIH1cbiAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJyAmJiAhQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgfVxuICAgIGlmICh2YWwubGVuZ3RoID09PSAxKSB7XG4gICAgICB2YXIgY29kZSA9IHZhbC5jaGFyQ29kZUF0KDApXG4gICAgICBpZiAoKGVuY29kaW5nID09PSAndXRmOCcgJiYgY29kZSA8IDEyOCkgfHxcbiAgICAgICAgICBlbmNvZGluZyA9PT0gJ2xhdGluMScpIHtcbiAgICAgICAgLy8gRmFzdCBwYXRoOiBJZiBgdmFsYCBmaXRzIGludG8gYSBzaW5nbGUgYnl0ZSwgdXNlIHRoYXQgbnVtZXJpYyB2YWx1ZS5cbiAgICAgICAgdmFsID0gY29kZVxuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIHZhbCA9IHZhbCAmIDI1NVxuICB9XG5cbiAgLy8gSW52YWxpZCByYW5nZXMgYXJlIG5vdCBzZXQgdG8gYSBkZWZhdWx0LCBzbyBjYW4gcmFuZ2UgY2hlY2sgZWFybHkuXG4gIGlmIChzdGFydCA8IDAgfHwgdGhpcy5sZW5ndGggPCBzdGFydCB8fCB0aGlzLmxlbmd0aCA8IGVuZCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdPdXQgb2YgcmFuZ2UgaW5kZXgnKVxuICB9XG5cbiAgaWYgKGVuZCA8PSBzdGFydCkge1xuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBzdGFydCA9IHN0YXJ0ID4+PiAwXG4gIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gdGhpcy5sZW5ndGggOiBlbmQgPj4+IDBcblxuICBpZiAoIXZhbCkgdmFsID0gMFxuXG4gIHZhciBpXG4gIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIGZvciAoaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICAgIHRoaXNbaV0gPSB2YWxcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGJ5dGVzID0gQnVmZmVyLmlzQnVmZmVyKHZhbClcbiAgICAgID8gdmFsXG4gICAgICA6IEJ1ZmZlci5mcm9tKHZhbCwgZW5jb2RpbmcpXG4gICAgdmFyIGxlbiA9IGJ5dGVzLmxlbmd0aFxuICAgIGlmIChsZW4gPT09IDApIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSB2YWx1ZSBcIicgKyB2YWwgK1xuICAgICAgICAnXCIgaXMgaW52YWxpZCBmb3IgYXJndW1lbnQgXCJ2YWx1ZVwiJylcbiAgICB9XG4gICAgZm9yIChpID0gMDsgaSA8IGVuZCAtIHN0YXJ0OyArK2kpIHtcbiAgICAgIHRoaXNbaSArIHN0YXJ0XSA9IGJ5dGVzW2kgJSBsZW5dXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuLy8gSEVMUEVSIEZVTkNUSU9OU1xuLy8gPT09PT09PT09PT09PT09PVxuXG52YXIgSU5WQUxJRF9CQVNFNjRfUkUgPSAvW14rLzAtOUEtWmEtei1fXS9nXG5cbmZ1bmN0aW9uIGJhc2U2NGNsZWFuIChzdHIpIHtcbiAgLy8gTm9kZSB0YWtlcyBlcXVhbCBzaWducyBhcyBlbmQgb2YgdGhlIEJhc2U2NCBlbmNvZGluZ1xuICBzdHIgPSBzdHIuc3BsaXQoJz0nKVswXVxuICAvLyBOb2RlIHN0cmlwcyBvdXQgaW52YWxpZCBjaGFyYWN0ZXJzIGxpa2UgXFxuIGFuZCBcXHQgZnJvbSB0aGUgc3RyaW5nLCBiYXNlNjQtanMgZG9lcyBub3RcbiAgc3RyID0gc3RyLnRyaW0oKS5yZXBsYWNlKElOVkFMSURfQkFTRTY0X1JFLCAnJylcbiAgLy8gTm9kZSBjb252ZXJ0cyBzdHJpbmdzIHdpdGggbGVuZ3RoIDwgMiB0byAnJ1xuICBpZiAoc3RyLmxlbmd0aCA8IDIpIHJldHVybiAnJ1xuICAvLyBOb2RlIGFsbG93cyBmb3Igbm9uLXBhZGRlZCBiYXNlNjQgc3RyaW5ncyAobWlzc2luZyB0cmFpbGluZyA9PT0pLCBiYXNlNjQtanMgZG9lcyBub3RcbiAgd2hpbGUgKHN0ci5sZW5ndGggJSA0ICE9PSAwKSB7XG4gICAgc3RyID0gc3RyICsgJz0nXG4gIH1cbiAgcmV0dXJuIHN0clxufVxuXG5mdW5jdGlvbiB0b0hleCAobikge1xuICBpZiAobiA8IDE2KSByZXR1cm4gJzAnICsgbi50b1N0cmluZygxNilcbiAgcmV0dXJuIG4udG9TdHJpbmcoMTYpXG59XG5cbmZ1bmN0aW9uIHV0ZjhUb0J5dGVzIChzdHJpbmcsIHVuaXRzKSB7XG4gIHVuaXRzID0gdW5pdHMgfHwgSW5maW5pdHlcbiAgdmFyIGNvZGVQb2ludFxuICB2YXIgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aFxuICB2YXIgbGVhZFN1cnJvZ2F0ZSA9IG51bGxcbiAgdmFyIGJ5dGVzID0gW11cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgY29kZVBvaW50ID0gc3RyaW5nLmNoYXJDb2RlQXQoaSlcblxuICAgIC8vIGlzIHN1cnJvZ2F0ZSBjb21wb25lbnRcbiAgICBpZiAoY29kZVBvaW50ID4gMHhEN0ZGICYmIGNvZGVQb2ludCA8IDB4RTAwMCkge1xuICAgICAgLy8gbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgIGlmICghbGVhZFN1cnJvZ2F0ZSkge1xuICAgICAgICAvLyBubyBsZWFkIHlldFxuICAgICAgICBpZiAoY29kZVBvaW50ID4gMHhEQkZGKSB7XG4gICAgICAgICAgLy8gdW5leHBlY3RlZCB0cmFpbFxuICAgICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH0gZWxzZSBpZiAoaSArIDEgPT09IGxlbmd0aCkge1xuICAgICAgICAgIC8vIHVucGFpcmVkIGxlYWRcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gdmFsaWQgbGVhZFxuICAgICAgICBsZWFkU3Vycm9nYXRlID0gY29kZVBvaW50XG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gMiBsZWFkcyBpbiBhIHJvd1xuICAgICAgaWYgKGNvZGVQb2ludCA8IDB4REMwMCkge1xuICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICAvLyB2YWxpZCBzdXJyb2dhdGUgcGFpclxuICAgICAgY29kZVBvaW50ID0gKGxlYWRTdXJyb2dhdGUgLSAweEQ4MDAgPDwgMTAgfCBjb2RlUG9pbnQgLSAweERDMDApICsgMHgxMDAwMFxuICAgIH0gZWxzZSBpZiAobGVhZFN1cnJvZ2F0ZSkge1xuICAgICAgLy8gdmFsaWQgYm1wIGNoYXIsIGJ1dCBsYXN0IGNoYXIgd2FzIGEgbGVhZFxuICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgfVxuXG4gICAgbGVhZFN1cnJvZ2F0ZSA9IG51bGxcblxuICAgIC8vIGVuY29kZSB1dGY4XG4gICAgaWYgKGNvZGVQb2ludCA8IDB4ODApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMSkgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChjb2RlUG9pbnQpXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDgwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAyKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2IHwgMHhDMCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4MTAwMDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMykgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4QyB8IDB4RTAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4MTEwMDAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDQpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDEyIHwgMHhGMCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4QyAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBjb2RlIHBvaW50JylcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYnl0ZXNcbn1cblxuZnVuY3Rpb24gYXNjaWlUb0J5dGVzIChzdHIpIHtcbiAgdmFyIGJ5dGVBcnJheSA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgLy8gTm9kZSdzIGNvZGUgc2VlbXMgdG8gYmUgZG9pbmcgdGhpcyBhbmQgbm90ICYgMHg3Ri4uXG4gICAgYnl0ZUFycmF5LnB1c2goc3RyLmNoYXJDb2RlQXQoaSkgJiAweEZGKVxuICB9XG4gIHJldHVybiBieXRlQXJyYXlcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVRvQnl0ZXMgKHN0ciwgdW5pdHMpIHtcbiAgdmFyIGMsIGhpLCBsb1xuICB2YXIgYnl0ZUFycmF5ID0gW11cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoKHVuaXRzIC09IDIpIDwgMCkgYnJlYWtcblxuICAgIGMgPSBzdHIuY2hhckNvZGVBdChpKVxuICAgIGhpID0gYyA+PiA4XG4gICAgbG8gPSBjICUgMjU2XG4gICAgYnl0ZUFycmF5LnB1c2gobG8pXG4gICAgYnl0ZUFycmF5LnB1c2goaGkpXG4gIH1cblxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFRvQnl0ZXMgKHN0cikge1xuICByZXR1cm4gYmFzZTY0LnRvQnl0ZUFycmF5KGJhc2U2NGNsZWFuKHN0cikpXG59XG5cbmZ1bmN0aW9uIGJsaXRCdWZmZXIgKHNyYywgZHN0LCBvZmZzZXQsIGxlbmd0aCkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgaWYgKChpICsgb2Zmc2V0ID49IGRzdC5sZW5ndGgpIHx8IChpID49IHNyYy5sZW5ndGgpKSBicmVha1xuICAgIGRzdFtpICsgb2Zmc2V0XSA9IHNyY1tpXVxuICB9XG4gIHJldHVybiBpXG59XG5cbi8vIEFycmF5QnVmZmVyIG9yIFVpbnQ4QXJyYXkgb2JqZWN0cyBmcm9tIG90aGVyIGNvbnRleHRzIChpLmUuIGlmcmFtZXMpIGRvIG5vdCBwYXNzXG4vLyB0aGUgYGluc3RhbmNlb2ZgIGNoZWNrIGJ1dCB0aGV5IHNob3VsZCBiZSB0cmVhdGVkIGFzIG9mIHRoYXQgdHlwZS5cbi8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXIvaXNzdWVzLzE2NlxuZnVuY3Rpb24gaXNJbnN0YW5jZSAob2JqLCB0eXBlKSB7XG4gIHJldHVybiBvYmogaW5zdGFuY2VvZiB0eXBlIHx8XG4gICAgKG9iaiAhPSBudWxsICYmIG9iai5jb25zdHJ1Y3RvciAhPSBudWxsICYmIG9iai5jb25zdHJ1Y3Rvci5uYW1lICE9IG51bGwgJiZcbiAgICAgIG9iai5jb25zdHJ1Y3Rvci5uYW1lID09PSB0eXBlLm5hbWUpXG59XG5mdW5jdGlvbiBudW1iZXJJc05hTiAob2JqKSB7XG4gIC8vIEZvciBJRTExIHN1cHBvcnRcbiAgcmV0dXJuIG9iaiAhPT0gb2JqIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2VsZi1jb21wYXJlXG59XG4iLCIvKiFcbiAgQ29weXJpZ2h0IChjKSAyMDE4IEplZCBXYXRzb24uXG4gIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoTUlUKSwgc2VlXG4gIGh0dHA6Ly9qZWR3YXRzb24uZ2l0aHViLmlvL2NsYXNzbmFtZXNcbiovXG4vKiBnbG9iYWwgZGVmaW5lICovXG5cbihmdW5jdGlvbiAoKSB7XG5cdCd1c2Ugc3RyaWN0JztcblxuXHR2YXIgaGFzT3duID0ge30uaGFzT3duUHJvcGVydHk7XG5cblx0ZnVuY3Rpb24gY2xhc3NOYW1lcygpIHtcblx0XHR2YXIgY2xhc3NlcyA9IFtdO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBhcmcgPSBhcmd1bWVudHNbaV07XG5cdFx0XHRpZiAoIWFyZykgY29udGludWU7XG5cblx0XHRcdHZhciBhcmdUeXBlID0gdHlwZW9mIGFyZztcblxuXHRcdFx0aWYgKGFyZ1R5cGUgPT09ICdzdHJpbmcnIHx8IGFyZ1R5cGUgPT09ICdudW1iZXInKSB7XG5cdFx0XHRcdGNsYXNzZXMucHVzaChhcmcpO1xuXHRcdFx0fSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGFyZykpIHtcblx0XHRcdFx0aWYgKGFyZy5sZW5ndGgpIHtcblx0XHRcdFx0XHR2YXIgaW5uZXIgPSBjbGFzc05hbWVzLmFwcGx5KG51bGwsIGFyZyk7XG5cdFx0XHRcdFx0aWYgKGlubmVyKSB7XG5cdFx0XHRcdFx0XHRjbGFzc2VzLnB1c2goaW5uZXIpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIGlmIChhcmdUeXBlID09PSAnb2JqZWN0Jykge1xuXHRcdFx0XHRpZiAoYXJnLnRvU3RyaW5nID09PSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKSB7XG5cdFx0XHRcdFx0Zm9yICh2YXIga2V5IGluIGFyZykge1xuXHRcdFx0XHRcdFx0aWYgKGhhc093bi5jYWxsKGFyZywga2V5KSAmJiBhcmdba2V5XSkge1xuXHRcdFx0XHRcdFx0XHRjbGFzc2VzLnB1c2goa2V5KTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGFyZy50b1N0cmluZygpKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBjbGFzc2VzLmpvaW4oJyAnKTtcblx0fVxuXG5cdGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuXHRcdGNsYXNzTmFtZXMuZGVmYXVsdCA9IGNsYXNzTmFtZXM7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBjbGFzc05hbWVzO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGRlZmluZS5hbWQgPT09ICdvYmplY3QnICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyByZWdpc3RlciBhcyAnY2xhc3NuYW1lcycsIGNvbnNpc3RlbnQgd2l0aCBucG0gcGFja2FnZSBuYW1lXG5cdFx0ZGVmaW5lKCdjbGFzc25hbWVzJywgW10sIGZ1bmN0aW9uICgpIHtcblx0XHRcdHJldHVybiBjbGFzc05hbWVzO1xuXHRcdH0pO1xuXHR9IGVsc2Uge1xuXHRcdHdpbmRvdy5jbGFzc05hbWVzID0gY2xhc3NOYW1lcztcblx0fVxufSgpKTtcbiIsIlxyXG4vKipcclxuICogRXhwb3NlIGBFbWl0dGVyYC5cclxuICovXHJcblxyXG5pZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICBtb2R1bGUuZXhwb3J0cyA9IEVtaXR0ZXI7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBJbml0aWFsaXplIGEgbmV3IGBFbWl0dGVyYC5cclxuICpcclxuICogQGFwaSBwdWJsaWNcclxuICovXHJcblxyXG5mdW5jdGlvbiBFbWl0dGVyKG9iaikge1xyXG4gIGlmIChvYmopIHJldHVybiBtaXhpbihvYmopO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIE1peGluIHRoZSBlbWl0dGVyIHByb3BlcnRpZXMuXHJcbiAqXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcclxuICogQHJldHVybiB7T2JqZWN0fVxyXG4gKiBAYXBpIHByaXZhdGVcclxuICovXHJcblxyXG5mdW5jdGlvbiBtaXhpbihvYmopIHtcclxuICBmb3IgKHZhciBrZXkgaW4gRW1pdHRlci5wcm90b3R5cGUpIHtcclxuICAgIG9ialtrZXldID0gRW1pdHRlci5wcm90b3R5cGVba2V5XTtcclxuICB9XHJcbiAgcmV0dXJuIG9iajtcclxufVxyXG5cclxuLyoqXHJcbiAqIExpc3RlbiBvbiB0aGUgZ2l2ZW4gYGV2ZW50YCB3aXRoIGBmbmAuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxyXG4gKiBAcmV0dXJuIHtFbWl0dGVyfVxyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxuXHJcbkVtaXR0ZXIucHJvdG90eXBlLm9uID1cclxuRW1pdHRlci5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uKGV2ZW50LCBmbil7XHJcbiAgdGhpcy5fY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzIHx8IHt9O1xyXG4gICh0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdID0gdGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XSB8fCBbXSlcclxuICAgIC5wdXNoKGZuKTtcclxuICByZXR1cm4gdGhpcztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBBZGRzIGFuIGBldmVudGAgbGlzdGVuZXIgdGhhdCB3aWxsIGJlIGludm9rZWQgYSBzaW5nbGVcclxuICogdGltZSB0aGVuIGF1dG9tYXRpY2FsbHkgcmVtb3ZlZC5cclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXHJcbiAqIEByZXR1cm4ge0VtaXR0ZXJ9XHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5cclxuRW1pdHRlci5wcm90b3R5cGUub25jZSA9IGZ1bmN0aW9uKGV2ZW50LCBmbil7XHJcbiAgZnVuY3Rpb24gb24oKSB7XHJcbiAgICB0aGlzLm9mZihldmVudCwgb24pO1xyXG4gICAgZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuICB9XHJcblxyXG4gIG9uLmZuID0gZm47XHJcbiAgdGhpcy5vbihldmVudCwgb24pO1xyXG4gIHJldHVybiB0aGlzO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFJlbW92ZSB0aGUgZ2l2ZW4gY2FsbGJhY2sgZm9yIGBldmVudGAgb3IgYWxsXHJcbiAqIHJlZ2lzdGVyZWQgY2FsbGJhY2tzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcclxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cclxuICogQHJldHVybiB7RW1pdHRlcn1cclxuICogQGFwaSBwdWJsaWNcclxuICovXHJcblxyXG5FbWl0dGVyLnByb3RvdHlwZS5vZmYgPVxyXG5FbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9XHJcbkVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycyA9XHJcbkVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbihldmVudCwgZm4pe1xyXG4gIHRoaXMuX2NhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyB8fCB7fTtcclxuXHJcbiAgLy8gYWxsXHJcbiAgaWYgKDAgPT0gYXJndW1lbnRzLmxlbmd0aCkge1xyXG4gICAgdGhpcy5fY2FsbGJhY2tzID0ge307XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIC8vIHNwZWNpZmljIGV2ZW50XHJcbiAgdmFyIGNhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF07XHJcbiAgaWYgKCFjYWxsYmFja3MpIHJldHVybiB0aGlzO1xyXG5cclxuICAvLyByZW1vdmUgYWxsIGhhbmRsZXJzXHJcbiAgaWYgKDEgPT0gYXJndW1lbnRzLmxlbmd0aCkge1xyXG4gICAgZGVsZXRlIHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF07XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIC8vIHJlbW92ZSBzcGVjaWZpYyBoYW5kbGVyXHJcbiAgdmFyIGNiO1xyXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY2FsbGJhY2tzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICBjYiA9IGNhbGxiYWNrc1tpXTtcclxuICAgIGlmIChjYiA9PT0gZm4gfHwgY2IuZm4gPT09IGZuKSB7XHJcbiAgICAgIGNhbGxiYWNrcy5zcGxpY2UoaSwgMSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gUmVtb3ZlIGV2ZW50IHNwZWNpZmljIGFycmF5cyBmb3IgZXZlbnQgdHlwZXMgdGhhdCBub1xyXG4gIC8vIG9uZSBpcyBzdWJzY3JpYmVkIGZvciB0byBhdm9pZCBtZW1vcnkgbGVhay5cclxuICBpZiAoY2FsbGJhY2tzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgZGVsZXRlIHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF07XHJcbiAgfVxyXG5cclxuICByZXR1cm4gdGhpcztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBFbWl0IGBldmVudGAgd2l0aCB0aGUgZ2l2ZW4gYXJncy5cclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XHJcbiAqIEBwYXJhbSB7TWl4ZWR9IC4uLlxyXG4gKiBAcmV0dXJuIHtFbWl0dGVyfVxyXG4gKi9cclxuXHJcbkVtaXR0ZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbihldmVudCl7XHJcbiAgdGhpcy5fY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzIHx8IHt9O1xyXG5cclxuICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSlcclxuICAgICwgY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XTtcclxuXHJcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcclxuICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xyXG4gIH1cclxuXHJcbiAgaWYgKGNhbGxiYWNrcykge1xyXG4gICAgY2FsbGJhY2tzID0gY2FsbGJhY2tzLnNsaWNlKDApO1xyXG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNhbGxiYWNrcy5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xyXG4gICAgICBjYWxsYmFja3NbaV0uYXBwbHkodGhpcywgYXJncyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gdGhpcztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm4gYXJyYXkgb2YgY2FsbGJhY2tzIGZvciBgZXZlbnRgLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcclxuICogQHJldHVybiB7QXJyYXl9XHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5cclxuRW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJzID0gZnVuY3Rpb24oZXZlbnQpe1xyXG4gIHRoaXMuX2NhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyB8fCB7fTtcclxuICByZXR1cm4gdGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XSB8fCBbXTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBDaGVjayBpZiB0aGlzIGVtaXR0ZXIgaGFzIGBldmVudGAgaGFuZGxlcnMuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxyXG4gKiBAcmV0dXJuIHtCb29sZWFufVxyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxuXHJcbkVtaXR0ZXIucHJvdG90eXBlLmhhc0xpc3RlbmVycyA9IGZ1bmN0aW9uKGV2ZW50KXtcclxuICByZXR1cm4gISEgdGhpcy5saXN0ZW5lcnMoZXZlbnQpLmxlbmd0aDtcclxufTtcclxuIiwiLyogZXNsaW50LWVudiBicm93c2VyICovXG5cbi8qKlxuICogVGhpcyBpcyB0aGUgd2ViIGJyb3dzZXIgaW1wbGVtZW50YXRpb24gb2YgYGRlYnVnKClgLlxuICovXG5cbmV4cG9ydHMuZm9ybWF0QXJncyA9IGZvcm1hdEFyZ3M7XG5leHBvcnRzLnNhdmUgPSBzYXZlO1xuZXhwb3J0cy5sb2FkID0gbG9hZDtcbmV4cG9ydHMudXNlQ29sb3JzID0gdXNlQ29sb3JzO1xuZXhwb3J0cy5zdG9yYWdlID0gbG9jYWxzdG9yYWdlKCk7XG5leHBvcnRzLmRlc3Ryb3kgPSAoKCkgPT4ge1xuXHRsZXQgd2FybmVkID0gZmFsc2U7XG5cblx0cmV0dXJuICgpID0+IHtcblx0XHRpZiAoIXdhcm5lZCkge1xuXHRcdFx0d2FybmVkID0gdHJ1ZTtcblx0XHRcdGNvbnNvbGUud2FybignSW5zdGFuY2UgbWV0aG9kIGBkZWJ1Zy5kZXN0cm95KClgIGlzIGRlcHJlY2F0ZWQgYW5kIG5vIGxvbmdlciBkb2VzIGFueXRoaW5nLiBJdCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5leHQgbWFqb3IgdmVyc2lvbiBvZiBgZGVidWdgLicpO1xuXHRcdH1cblx0fTtcbn0pKCk7XG5cbi8qKlxuICogQ29sb3JzLlxuICovXG5cbmV4cG9ydHMuY29sb3JzID0gW1xuXHQnIzAwMDBDQycsXG5cdCcjMDAwMEZGJyxcblx0JyMwMDMzQ0MnLFxuXHQnIzAwMzNGRicsXG5cdCcjMDA2NkNDJyxcblx0JyMwMDY2RkYnLFxuXHQnIzAwOTlDQycsXG5cdCcjMDA5OUZGJyxcblx0JyMwMENDMDAnLFxuXHQnIzAwQ0MzMycsXG5cdCcjMDBDQzY2Jyxcblx0JyMwMENDOTknLFxuXHQnIzAwQ0NDQycsXG5cdCcjMDBDQ0ZGJyxcblx0JyMzMzAwQ0MnLFxuXHQnIzMzMDBGRicsXG5cdCcjMzMzM0NDJyxcblx0JyMzMzMzRkYnLFxuXHQnIzMzNjZDQycsXG5cdCcjMzM2NkZGJyxcblx0JyMzMzk5Q0MnLFxuXHQnIzMzOTlGRicsXG5cdCcjMzNDQzAwJyxcblx0JyMzM0NDMzMnLFxuXHQnIzMzQ0M2NicsXG5cdCcjMzNDQzk5Jyxcblx0JyMzM0NDQ0MnLFxuXHQnIzMzQ0NGRicsXG5cdCcjNjYwMENDJyxcblx0JyM2NjAwRkYnLFxuXHQnIzY2MzNDQycsXG5cdCcjNjYzM0ZGJyxcblx0JyM2NkNDMDAnLFxuXHQnIzY2Q0MzMycsXG5cdCcjOTkwMENDJyxcblx0JyM5OTAwRkYnLFxuXHQnIzk5MzNDQycsXG5cdCcjOTkzM0ZGJyxcblx0JyM5OUNDMDAnLFxuXHQnIzk5Q0MzMycsXG5cdCcjQ0MwMDAwJyxcblx0JyNDQzAwMzMnLFxuXHQnI0NDMDA2NicsXG5cdCcjQ0MwMDk5Jyxcblx0JyNDQzAwQ0MnLFxuXHQnI0NDMDBGRicsXG5cdCcjQ0MzMzAwJyxcblx0JyNDQzMzMzMnLFxuXHQnI0NDMzM2NicsXG5cdCcjQ0MzMzk5Jyxcblx0JyNDQzMzQ0MnLFxuXHQnI0NDMzNGRicsXG5cdCcjQ0M2NjAwJyxcblx0JyNDQzY2MzMnLFxuXHQnI0NDOTkwMCcsXG5cdCcjQ0M5OTMzJyxcblx0JyNDQ0NDMDAnLFxuXHQnI0NDQ0MzMycsXG5cdCcjRkYwMDAwJyxcblx0JyNGRjAwMzMnLFxuXHQnI0ZGMDA2NicsXG5cdCcjRkYwMDk5Jyxcblx0JyNGRjAwQ0MnLFxuXHQnI0ZGMDBGRicsXG5cdCcjRkYzMzAwJyxcblx0JyNGRjMzMzMnLFxuXHQnI0ZGMzM2NicsXG5cdCcjRkYzMzk5Jyxcblx0JyNGRjMzQ0MnLFxuXHQnI0ZGMzNGRicsXG5cdCcjRkY2NjAwJyxcblx0JyNGRjY2MzMnLFxuXHQnI0ZGOTkwMCcsXG5cdCcjRkY5OTMzJyxcblx0JyNGRkNDMDAnLFxuXHQnI0ZGQ0MzMydcbl07XG5cbi8qKlxuICogQ3VycmVudGx5IG9ubHkgV2ViS2l0LWJhc2VkIFdlYiBJbnNwZWN0b3JzLCBGaXJlZm94ID49IHYzMSxcbiAqIGFuZCB0aGUgRmlyZWJ1ZyBleHRlbnNpb24gKGFueSBGaXJlZm94IHZlcnNpb24pIGFyZSBrbm93blxuICogdG8gc3VwcG9ydCBcIiVjXCIgQ1NTIGN1c3RvbWl6YXRpb25zLlxuICpcbiAqIFRPRE86IGFkZCBhIGBsb2NhbFN0b3JhZ2VgIHZhcmlhYmxlIHRvIGV4cGxpY2l0bHkgZW5hYmxlL2Rpc2FibGUgY29sb3JzXG4gKi9cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbXBsZXhpdHlcbmZ1bmN0aW9uIHVzZUNvbG9ycygpIHtcblx0Ly8gTkI6IEluIGFuIEVsZWN0cm9uIHByZWxvYWQgc2NyaXB0LCBkb2N1bWVudCB3aWxsIGJlIGRlZmluZWQgYnV0IG5vdCBmdWxseVxuXHQvLyBpbml0aWFsaXplZC4gU2luY2Ugd2Uga25vdyB3ZSdyZSBpbiBDaHJvbWUsIHdlJ2xsIGp1c3QgZGV0ZWN0IHRoaXMgY2FzZVxuXHQvLyBleHBsaWNpdGx5XG5cdGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cucHJvY2VzcyAmJiAod2luZG93LnByb2Nlc3MudHlwZSA9PT0gJ3JlbmRlcmVyJyB8fCB3aW5kb3cucHJvY2Vzcy5fX253anMpKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHQvLyBJbnRlcm5ldCBFeHBsb3JlciBhbmQgRWRnZSBkbyBub3Qgc3VwcG9ydCBjb2xvcnMuXG5cdGlmICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvKGVkZ2V8dHJpZGVudClcXC8oXFxkKykvKSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdC8vIElzIHdlYmtpdD8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMTY0NTk2MDYvMzc2NzczXG5cdC8vIGRvY3VtZW50IGlzIHVuZGVmaW5lZCBpbiByZWFjdC1uYXRpdmU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC1uYXRpdmUvcHVsbC8xNjMyXG5cdHJldHVybiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5XZWJraXRBcHBlYXJhbmNlKSB8fFxuXHRcdC8vIElzIGZpcmVidWc/IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzM5ODEyMC8zNzY3NzNcblx0XHQodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmNvbnNvbGUgJiYgKHdpbmRvdy5jb25zb2xlLmZpcmVidWcgfHwgKHdpbmRvdy5jb25zb2xlLmV4Y2VwdGlvbiAmJiB3aW5kb3cuY29uc29sZS50YWJsZSkpKSB8fFxuXHRcdC8vIElzIGZpcmVmb3ggPj0gdjMxP1xuXHRcdC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvVG9vbHMvV2ViX0NvbnNvbGUjU3R5bGluZ19tZXNzYWdlc1xuXHRcdCh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvZmlyZWZveFxcLyhcXGQrKS8pICYmIHBhcnNlSW50KFJlZ0V4cC4kMSwgMTApID49IDMxKSB8fFxuXHRcdC8vIERvdWJsZSBjaGVjayB3ZWJraXQgaW4gdXNlckFnZW50IGp1c3QgaW4gY2FzZSB3ZSBhcmUgaW4gYSB3b3JrZXJcblx0XHQodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goL2FwcGxld2Via2l0XFwvKFxcZCspLykpO1xufVxuXG4vKipcbiAqIENvbG9yaXplIGxvZyBhcmd1bWVudHMgaWYgZW5hYmxlZC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGZvcm1hdEFyZ3MoYXJncykge1xuXHRhcmdzWzBdID0gKHRoaXMudXNlQ29sb3JzID8gJyVjJyA6ICcnKSArXG5cdFx0dGhpcy5uYW1lc3BhY2UgK1xuXHRcdCh0aGlzLnVzZUNvbG9ycyA/ICcgJWMnIDogJyAnKSArXG5cdFx0YXJnc1swXSArXG5cdFx0KHRoaXMudXNlQ29sb3JzID8gJyVjICcgOiAnICcpICtcblx0XHQnKycgKyBtb2R1bGUuZXhwb3J0cy5odW1hbml6ZSh0aGlzLmRpZmYpO1xuXG5cdGlmICghdGhpcy51c2VDb2xvcnMpIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHRjb25zdCBjID0gJ2NvbG9yOiAnICsgdGhpcy5jb2xvcjtcblx0YXJncy5zcGxpY2UoMSwgMCwgYywgJ2NvbG9yOiBpbmhlcml0Jyk7XG5cblx0Ly8gVGhlIGZpbmFsIFwiJWNcIiBpcyBzb21ld2hhdCB0cmlja3ksIGJlY2F1c2UgdGhlcmUgY291bGQgYmUgb3RoZXJcblx0Ly8gYXJndW1lbnRzIHBhc3NlZCBlaXRoZXIgYmVmb3JlIG9yIGFmdGVyIHRoZSAlYywgc28gd2UgbmVlZCB0b1xuXHQvLyBmaWd1cmUgb3V0IHRoZSBjb3JyZWN0IGluZGV4IHRvIGluc2VydCB0aGUgQ1NTIGludG9cblx0bGV0IGluZGV4ID0gMDtcblx0bGV0IGxhc3RDID0gMDtcblx0YXJnc1swXS5yZXBsYWNlKC8lW2EtekEtWiVdL2csIG1hdGNoID0+IHtcblx0XHRpZiAobWF0Y2ggPT09ICclJScpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0aW5kZXgrKztcblx0XHRpZiAobWF0Y2ggPT09ICclYycpIHtcblx0XHRcdC8vIFdlIG9ubHkgYXJlIGludGVyZXN0ZWQgaW4gdGhlICpsYXN0KiAlY1xuXHRcdFx0Ly8gKHRoZSB1c2VyIG1heSBoYXZlIHByb3ZpZGVkIHRoZWlyIG93bilcblx0XHRcdGxhc3RDID0gaW5kZXg7XG5cdFx0fVxuXHR9KTtcblxuXHRhcmdzLnNwbGljZShsYXN0QywgMCwgYyk7XG59XG5cbi8qKlxuICogSW52b2tlcyBgY29uc29sZS5kZWJ1ZygpYCB3aGVuIGF2YWlsYWJsZS5cbiAqIE5vLW9wIHdoZW4gYGNvbnNvbGUuZGVidWdgIGlzIG5vdCBhIFwiZnVuY3Rpb25cIi5cbiAqIElmIGBjb25zb2xlLmRlYnVnYCBpcyBub3QgYXZhaWxhYmxlLCBmYWxscyBiYWNrXG4gKiB0byBgY29uc29sZS5sb2dgLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cbmV4cG9ydHMubG9nID0gY29uc29sZS5kZWJ1ZyB8fCBjb25zb2xlLmxvZyB8fCAoKCkgPT4ge30pO1xuXG4vKipcbiAqIFNhdmUgYG5hbWVzcGFjZXNgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gc2F2ZShuYW1lc3BhY2VzKSB7XG5cdHRyeSB7XG5cdFx0aWYgKG5hbWVzcGFjZXMpIHtcblx0XHRcdGV4cG9ydHMuc3RvcmFnZS5zZXRJdGVtKCdkZWJ1ZycsIG5hbWVzcGFjZXMpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRleHBvcnRzLnN0b3JhZ2UucmVtb3ZlSXRlbSgnZGVidWcnKTtcblx0XHR9XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0Ly8gU3dhbGxvd1xuXHRcdC8vIFhYWCAoQFFpeC0pIHNob3VsZCB3ZSBiZSBsb2dnaW5nIHRoZXNlP1xuXHR9XG59XG5cbi8qKlxuICogTG9hZCBgbmFtZXNwYWNlc2AuXG4gKlxuICogQHJldHVybiB7U3RyaW5nfSByZXR1cm5zIHRoZSBwcmV2aW91c2x5IHBlcnNpc3RlZCBkZWJ1ZyBtb2Rlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGxvYWQoKSB7XG5cdGxldCByO1xuXHR0cnkge1xuXHRcdHIgPSBleHBvcnRzLnN0b3JhZ2UuZ2V0SXRlbSgnZGVidWcnKTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHQvLyBTd2FsbG93XG5cdFx0Ly8gWFhYIChAUWl4LSkgc2hvdWxkIHdlIGJlIGxvZ2dpbmcgdGhlc2U/XG5cdH1cblxuXHQvLyBJZiBkZWJ1ZyBpc24ndCBzZXQgaW4gTFMsIGFuZCB3ZSdyZSBpbiBFbGVjdHJvbiwgdHJ5IHRvIGxvYWQgJERFQlVHXG5cdGlmICghciAmJiB0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgJ2VudicgaW4gcHJvY2Vzcykge1xuXHRcdHIgPSBwcm9jZXNzLmVudi5ERUJVRztcblx0fVxuXG5cdHJldHVybiByO1xufVxuXG4vKipcbiAqIExvY2Fsc3RvcmFnZSBhdHRlbXB0cyB0byByZXR1cm4gdGhlIGxvY2Fsc3RvcmFnZS5cbiAqXG4gKiBUaGlzIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIHNhZmFyaSB0aHJvd3NcbiAqIHdoZW4gYSB1c2VyIGRpc2FibGVzIGNvb2tpZXMvbG9jYWxzdG9yYWdlXG4gKiBhbmQgeW91IGF0dGVtcHQgdG8gYWNjZXNzIGl0LlxuICpcbiAqIEByZXR1cm4ge0xvY2FsU3RvcmFnZX1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGxvY2Fsc3RvcmFnZSgpIHtcblx0dHJ5IHtcblx0XHQvLyBUVk1MS2l0IChBcHBsZSBUViBKUyBSdW50aW1lKSBkb2VzIG5vdCBoYXZlIGEgd2luZG93IG9iamVjdCwganVzdCBsb2NhbFN0b3JhZ2UgaW4gdGhlIGdsb2JhbCBjb250ZXh0XG5cdFx0Ly8gVGhlIEJyb3dzZXIgYWxzbyBoYXMgbG9jYWxTdG9yYWdlIGluIHRoZSBnbG9iYWwgY29udGV4dC5cblx0XHRyZXR1cm4gbG9jYWxTdG9yYWdlO1xuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdC8vIFN3YWxsb3dcblx0XHQvLyBYWFggKEBRaXgtKSBzaG91bGQgd2UgYmUgbG9nZ2luZyB0aGVzZT9cblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY29tbW9uJykoZXhwb3J0cyk7XG5cbmNvbnN0IHtmb3JtYXR0ZXJzfSA9IG1vZHVsZS5leHBvcnRzO1xuXG4vKipcbiAqIE1hcCAlaiB0byBgSlNPTi5zdHJpbmdpZnkoKWAsIHNpbmNlIG5vIFdlYiBJbnNwZWN0b3JzIGRvIHRoYXQgYnkgZGVmYXVsdC5cbiAqL1xuXG5mb3JtYXR0ZXJzLmogPSBmdW5jdGlvbiAodikge1xuXHR0cnkge1xuXHRcdHJldHVybiBKU09OLnN0cmluZ2lmeSh2KTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRyZXR1cm4gJ1tVbmV4cGVjdGVkSlNPTlBhcnNlRXJyb3JdOiAnICsgZXJyb3IubWVzc2FnZTtcblx0fVxufTtcbiIsIlxuLyoqXG4gKiBUaGlzIGlzIHRoZSBjb21tb24gbG9naWMgZm9yIGJvdGggdGhlIE5vZGUuanMgYW5kIHdlYiBicm93c2VyXG4gKiBpbXBsZW1lbnRhdGlvbnMgb2YgYGRlYnVnKClgLlxuICovXG5cbmZ1bmN0aW9uIHNldHVwKGVudikge1xuXHRjcmVhdGVEZWJ1Zy5kZWJ1ZyA9IGNyZWF0ZURlYnVnO1xuXHRjcmVhdGVEZWJ1Zy5kZWZhdWx0ID0gY3JlYXRlRGVidWc7XG5cdGNyZWF0ZURlYnVnLmNvZXJjZSA9IGNvZXJjZTtcblx0Y3JlYXRlRGVidWcuZGlzYWJsZSA9IGRpc2FibGU7XG5cdGNyZWF0ZURlYnVnLmVuYWJsZSA9IGVuYWJsZTtcblx0Y3JlYXRlRGVidWcuZW5hYmxlZCA9IGVuYWJsZWQ7XG5cdGNyZWF0ZURlYnVnLmh1bWFuaXplID0gcmVxdWlyZSgnbXMnKTtcblx0Y3JlYXRlRGVidWcuZGVzdHJveSA9IGRlc3Ryb3k7XG5cblx0T2JqZWN0LmtleXMoZW52KS5mb3JFYWNoKGtleSA9PiB7XG5cdFx0Y3JlYXRlRGVidWdba2V5XSA9IGVudltrZXldO1xuXHR9KTtcblxuXHQvKipcblx0KiBUaGUgY3VycmVudGx5IGFjdGl2ZSBkZWJ1ZyBtb2RlIG5hbWVzLCBhbmQgbmFtZXMgdG8gc2tpcC5cblx0Ki9cblxuXHRjcmVhdGVEZWJ1Zy5uYW1lcyA9IFtdO1xuXHRjcmVhdGVEZWJ1Zy5za2lwcyA9IFtdO1xuXG5cdC8qKlxuXHQqIE1hcCBvZiBzcGVjaWFsIFwiJW5cIiBoYW5kbGluZyBmdW5jdGlvbnMsIGZvciB0aGUgZGVidWcgXCJmb3JtYXRcIiBhcmd1bWVudC5cblx0KlxuXHQqIFZhbGlkIGtleSBuYW1lcyBhcmUgYSBzaW5nbGUsIGxvd2VyIG9yIHVwcGVyLWNhc2UgbGV0dGVyLCBpLmUuIFwiblwiIGFuZCBcIk5cIi5cblx0Ki9cblx0Y3JlYXRlRGVidWcuZm9ybWF0dGVycyA9IHt9O1xuXG5cdC8qKlxuXHQqIFNlbGVjdHMgYSBjb2xvciBmb3IgYSBkZWJ1ZyBuYW1lc3BhY2Vcblx0KiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlIFRoZSBuYW1lc3BhY2Ugc3RyaW5nIGZvciB0aGUgZm9yIHRoZSBkZWJ1ZyBpbnN0YW5jZSB0byBiZSBjb2xvcmVkXG5cdCogQHJldHVybiB7TnVtYmVyfFN0cmluZ30gQW4gQU5TSSBjb2xvciBjb2RlIGZvciB0aGUgZ2l2ZW4gbmFtZXNwYWNlXG5cdCogQGFwaSBwcml2YXRlXG5cdCovXG5cdGZ1bmN0aW9uIHNlbGVjdENvbG9yKG5hbWVzcGFjZSkge1xuXHRcdGxldCBoYXNoID0gMDtcblxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgbmFtZXNwYWNlLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRoYXNoID0gKChoYXNoIDw8IDUpIC0gaGFzaCkgKyBuYW1lc3BhY2UuY2hhckNvZGVBdChpKTtcblx0XHRcdGhhc2ggfD0gMDsgLy8gQ29udmVydCB0byAzMmJpdCBpbnRlZ2VyXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNyZWF0ZURlYnVnLmNvbG9yc1tNYXRoLmFicyhoYXNoKSAlIGNyZWF0ZURlYnVnLmNvbG9ycy5sZW5ndGhdO1xuXHR9XG5cdGNyZWF0ZURlYnVnLnNlbGVjdENvbG9yID0gc2VsZWN0Q29sb3I7XG5cblx0LyoqXG5cdCogQ3JlYXRlIGEgZGVidWdnZXIgd2l0aCB0aGUgZ2l2ZW4gYG5hbWVzcGFjZWAuXG5cdCpcblx0KiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlXG5cdCogQHJldHVybiB7RnVuY3Rpb259XG5cdCogQGFwaSBwdWJsaWNcblx0Ki9cblx0ZnVuY3Rpb24gY3JlYXRlRGVidWcobmFtZXNwYWNlKSB7XG5cdFx0bGV0IHByZXZUaW1lO1xuXHRcdGxldCBlbmFibGVPdmVycmlkZSA9IG51bGw7XG5cdFx0bGV0IG5hbWVzcGFjZXNDYWNoZTtcblx0XHRsZXQgZW5hYmxlZENhY2hlO1xuXG5cdFx0ZnVuY3Rpb24gZGVidWcoLi4uYXJncykge1xuXHRcdFx0Ly8gRGlzYWJsZWQ/XG5cdFx0XHRpZiAoIWRlYnVnLmVuYWJsZWQpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBzZWxmID0gZGVidWc7XG5cblx0XHRcdC8vIFNldCBgZGlmZmAgdGltZXN0YW1wXG5cdFx0XHRjb25zdCBjdXJyID0gTnVtYmVyKG5ldyBEYXRlKCkpO1xuXHRcdFx0Y29uc3QgbXMgPSBjdXJyIC0gKHByZXZUaW1lIHx8IGN1cnIpO1xuXHRcdFx0c2VsZi5kaWZmID0gbXM7XG5cdFx0XHRzZWxmLnByZXYgPSBwcmV2VGltZTtcblx0XHRcdHNlbGYuY3VyciA9IGN1cnI7XG5cdFx0XHRwcmV2VGltZSA9IGN1cnI7XG5cblx0XHRcdGFyZ3NbMF0gPSBjcmVhdGVEZWJ1Zy5jb2VyY2UoYXJnc1swXSk7XG5cblx0XHRcdGlmICh0eXBlb2YgYXJnc1swXSAhPT0gJ3N0cmluZycpIHtcblx0XHRcdFx0Ly8gQW55dGhpbmcgZWxzZSBsZXQncyBpbnNwZWN0IHdpdGggJU9cblx0XHRcdFx0YXJncy51bnNoaWZ0KCclTycpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBcHBseSBhbnkgYGZvcm1hdHRlcnNgIHRyYW5zZm9ybWF0aW9uc1xuXHRcdFx0bGV0IGluZGV4ID0gMDtcblx0XHRcdGFyZ3NbMF0gPSBhcmdzWzBdLnJlcGxhY2UoLyUoW2EtekEtWiVdKS9nLCAobWF0Y2gsIGZvcm1hdCkgPT4ge1xuXHRcdFx0XHQvLyBJZiB3ZSBlbmNvdW50ZXIgYW4gZXNjYXBlZCAlIHRoZW4gZG9uJ3QgaW5jcmVhc2UgdGhlIGFycmF5IGluZGV4XG5cdFx0XHRcdGlmIChtYXRjaCA9PT0gJyUlJykge1xuXHRcdFx0XHRcdHJldHVybiAnJSc7XG5cdFx0XHRcdH1cblx0XHRcdFx0aW5kZXgrKztcblx0XHRcdFx0Y29uc3QgZm9ybWF0dGVyID0gY3JlYXRlRGVidWcuZm9ybWF0dGVyc1tmb3JtYXRdO1xuXHRcdFx0XHRpZiAodHlwZW9mIGZvcm1hdHRlciA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0XHRcdGNvbnN0IHZhbCA9IGFyZ3NbaW5kZXhdO1xuXHRcdFx0XHRcdG1hdGNoID0gZm9ybWF0dGVyLmNhbGwoc2VsZiwgdmFsKTtcblxuXHRcdFx0XHRcdC8vIE5vdyB3ZSBuZWVkIHRvIHJlbW92ZSBgYXJnc1tpbmRleF1gIHNpbmNlIGl0J3MgaW5saW5lZCBpbiB0aGUgYGZvcm1hdGBcblx0XHRcdFx0XHRhcmdzLnNwbGljZShpbmRleCwgMSk7XG5cdFx0XHRcdFx0aW5kZXgtLTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gbWF0Y2g7XG5cdFx0XHR9KTtcblxuXHRcdFx0Ly8gQXBwbHkgZW52LXNwZWNpZmljIGZvcm1hdHRpbmcgKGNvbG9ycywgZXRjLilcblx0XHRcdGNyZWF0ZURlYnVnLmZvcm1hdEFyZ3MuY2FsbChzZWxmLCBhcmdzKTtcblxuXHRcdFx0Y29uc3QgbG9nRm4gPSBzZWxmLmxvZyB8fCBjcmVhdGVEZWJ1Zy5sb2c7XG5cdFx0XHRsb2dGbi5hcHBseShzZWxmLCBhcmdzKTtcblx0XHR9XG5cblx0XHRkZWJ1Zy5uYW1lc3BhY2UgPSBuYW1lc3BhY2U7XG5cdFx0ZGVidWcudXNlQ29sb3JzID0gY3JlYXRlRGVidWcudXNlQ29sb3JzKCk7XG5cdFx0ZGVidWcuY29sb3IgPSBjcmVhdGVEZWJ1Zy5zZWxlY3RDb2xvcihuYW1lc3BhY2UpO1xuXHRcdGRlYnVnLmV4dGVuZCA9IGV4dGVuZDtcblx0XHRkZWJ1Zy5kZXN0cm95ID0gY3JlYXRlRGVidWcuZGVzdHJveTsgLy8gWFhYIFRlbXBvcmFyeS4gV2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHJlbGVhc2UuXG5cblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZGVidWcsICdlbmFibGVkJywge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG5cdFx0XHRnZXQ6ICgpID0+IHtcblx0XHRcdFx0aWYgKGVuYWJsZU92ZXJyaWRlICE9PSBudWxsKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGVuYWJsZU92ZXJyaWRlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChuYW1lc3BhY2VzQ2FjaGUgIT09IGNyZWF0ZURlYnVnLm5hbWVzcGFjZXMpIHtcblx0XHRcdFx0XHRuYW1lc3BhY2VzQ2FjaGUgPSBjcmVhdGVEZWJ1Zy5uYW1lc3BhY2VzO1xuXHRcdFx0XHRcdGVuYWJsZWRDYWNoZSA9IGNyZWF0ZURlYnVnLmVuYWJsZWQobmFtZXNwYWNlKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBlbmFibGVkQ2FjaGU7XG5cdFx0XHR9LFxuXHRcdFx0c2V0OiB2ID0+IHtcblx0XHRcdFx0ZW5hYmxlT3ZlcnJpZGUgPSB2O1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0Ly8gRW52LXNwZWNpZmljIGluaXRpYWxpemF0aW9uIGxvZ2ljIGZvciBkZWJ1ZyBpbnN0YW5jZXNcblx0XHRpZiAodHlwZW9mIGNyZWF0ZURlYnVnLmluaXQgPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdGNyZWF0ZURlYnVnLmluaXQoZGVidWcpO1xuXHRcdH1cblxuXHRcdHJldHVybiBkZWJ1Zztcblx0fVxuXG5cdGZ1bmN0aW9uIGV4dGVuZChuYW1lc3BhY2UsIGRlbGltaXRlcikge1xuXHRcdGNvbnN0IG5ld0RlYnVnID0gY3JlYXRlRGVidWcodGhpcy5uYW1lc3BhY2UgKyAodHlwZW9mIGRlbGltaXRlciA9PT0gJ3VuZGVmaW5lZCcgPyAnOicgOiBkZWxpbWl0ZXIpICsgbmFtZXNwYWNlKTtcblx0XHRuZXdEZWJ1Zy5sb2cgPSB0aGlzLmxvZztcblx0XHRyZXR1cm4gbmV3RGVidWc7XG5cdH1cblxuXHQvKipcblx0KiBFbmFibGVzIGEgZGVidWcgbW9kZSBieSBuYW1lc3BhY2VzLiBUaGlzIGNhbiBpbmNsdWRlIG1vZGVzXG5cdCogc2VwYXJhdGVkIGJ5IGEgY29sb24gYW5kIHdpbGRjYXJkcy5cblx0KlxuXHQqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VzXG5cdCogQGFwaSBwdWJsaWNcblx0Ki9cblx0ZnVuY3Rpb24gZW5hYmxlKG5hbWVzcGFjZXMpIHtcblx0XHRjcmVhdGVEZWJ1Zy5zYXZlKG5hbWVzcGFjZXMpO1xuXHRcdGNyZWF0ZURlYnVnLm5hbWVzcGFjZXMgPSBuYW1lc3BhY2VzO1xuXG5cdFx0Y3JlYXRlRGVidWcubmFtZXMgPSBbXTtcblx0XHRjcmVhdGVEZWJ1Zy5za2lwcyA9IFtdO1xuXG5cdFx0bGV0IGk7XG5cdFx0Y29uc3Qgc3BsaXQgPSAodHlwZW9mIG5hbWVzcGFjZXMgPT09ICdzdHJpbmcnID8gbmFtZXNwYWNlcyA6ICcnKS5zcGxpdCgvW1xccyxdKy8pO1xuXHRcdGNvbnN0IGxlbiA9IHNwbGl0Lmxlbmd0aDtcblxuXHRcdGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuXHRcdFx0aWYgKCFzcGxpdFtpXSkge1xuXHRcdFx0XHQvLyBpZ25vcmUgZW1wdHkgc3RyaW5nc1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0bmFtZXNwYWNlcyA9IHNwbGl0W2ldLnJlcGxhY2UoL1xcKi9nLCAnLio/Jyk7XG5cblx0XHRcdGlmIChuYW1lc3BhY2VzWzBdID09PSAnLScpIHtcblx0XHRcdFx0Y3JlYXRlRGVidWcuc2tpcHMucHVzaChuZXcgUmVnRXhwKCdeJyArIG5hbWVzcGFjZXMuc3Vic3RyKDEpICsgJyQnKSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjcmVhdGVEZWJ1Zy5uYW1lcy5wdXNoKG5ldyBSZWdFeHAoJ14nICsgbmFtZXNwYWNlcyArICckJykpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQqIERpc2FibGUgZGVidWcgb3V0cHV0LlxuXHQqXG5cdCogQHJldHVybiB7U3RyaW5nfSBuYW1lc3BhY2VzXG5cdCogQGFwaSBwdWJsaWNcblx0Ki9cblx0ZnVuY3Rpb24gZGlzYWJsZSgpIHtcblx0XHRjb25zdCBuYW1lc3BhY2VzID0gW1xuXHRcdFx0Li4uY3JlYXRlRGVidWcubmFtZXMubWFwKHRvTmFtZXNwYWNlKSxcblx0XHRcdC4uLmNyZWF0ZURlYnVnLnNraXBzLm1hcCh0b05hbWVzcGFjZSkubWFwKG5hbWVzcGFjZSA9PiAnLScgKyBuYW1lc3BhY2UpXG5cdFx0XS5qb2luKCcsJyk7XG5cdFx0Y3JlYXRlRGVidWcuZW5hYmxlKCcnKTtcblx0XHRyZXR1cm4gbmFtZXNwYWNlcztcblx0fVxuXG5cdC8qKlxuXHQqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gbW9kZSBuYW1lIGlzIGVuYWJsZWQsIGZhbHNlIG90aGVyd2lzZS5cblx0KlxuXHQqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG5cdCogQHJldHVybiB7Qm9vbGVhbn1cblx0KiBAYXBpIHB1YmxpY1xuXHQqL1xuXHRmdW5jdGlvbiBlbmFibGVkKG5hbWUpIHtcblx0XHRpZiAobmFtZVtuYW1lLmxlbmd0aCAtIDFdID09PSAnKicpIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdGxldCBpO1xuXHRcdGxldCBsZW47XG5cblx0XHRmb3IgKGkgPSAwLCBsZW4gPSBjcmVhdGVEZWJ1Zy5za2lwcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuXHRcdFx0aWYgKGNyZWF0ZURlYnVnLnNraXBzW2ldLnRlc3QobmFtZSkpIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGZvciAoaSA9IDAsIGxlbiA9IGNyZWF0ZURlYnVnLm5hbWVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHRpZiAoY3JlYXRlRGVidWcubmFtZXNbaV0udGVzdChuYW1lKSkge1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHQvKipcblx0KiBDb252ZXJ0IHJlZ2V4cCB0byBuYW1lc3BhY2Vcblx0KlxuXHQqIEBwYXJhbSB7UmVnRXhwfSByZWd4ZXBcblx0KiBAcmV0dXJuIHtTdHJpbmd9IG5hbWVzcGFjZVxuXHQqIEBhcGkgcHJpdmF0ZVxuXHQqL1xuXHRmdW5jdGlvbiB0b05hbWVzcGFjZShyZWdleHApIHtcblx0XHRyZXR1cm4gcmVnZXhwLnRvU3RyaW5nKClcblx0XHRcdC5zdWJzdHJpbmcoMiwgcmVnZXhwLnRvU3RyaW5nKCkubGVuZ3RoIC0gMilcblx0XHRcdC5yZXBsYWNlKC9cXC5cXCpcXD8kLywgJyonKTtcblx0fVxuXG5cdC8qKlxuXHQqIENvZXJjZSBgdmFsYC5cblx0KlxuXHQqIEBwYXJhbSB7TWl4ZWR9IHZhbFxuXHQqIEByZXR1cm4ge01peGVkfVxuXHQqIEBhcGkgcHJpdmF0ZVxuXHQqL1xuXHRmdW5jdGlvbiBjb2VyY2UodmFsKSB7XG5cdFx0aWYgKHZhbCBpbnN0YW5jZW9mIEVycm9yKSB7XG5cdFx0XHRyZXR1cm4gdmFsLnN0YWNrIHx8IHZhbC5tZXNzYWdlO1xuXHRcdH1cblx0XHRyZXR1cm4gdmFsO1xuXHR9XG5cblx0LyoqXG5cdCogWFhYIERPIE5PVCBVU0UuIFRoaXMgaXMgYSB0ZW1wb3Jhcnkgc3R1YiBmdW5jdGlvbi5cblx0KiBYWFggSXQgV0lMTCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHJlbGVhc2UuXG5cdCovXG5cdGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG5cdFx0Y29uc29sZS53YXJuKCdJbnN0YW5jZSBtZXRob2QgYGRlYnVnLmRlc3Ryb3koKWAgaXMgZGVwcmVjYXRlZCBhbmQgbm8gbG9uZ2VyIGRvZXMgYW55dGhpbmcuIEl0IHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciB2ZXJzaW9uIG9mIGBkZWJ1Z2AuJyk7XG5cdH1cblxuXHRjcmVhdGVEZWJ1Zy5lbmFibGUoY3JlYXRlRGVidWcubG9hZCgpKTtcblxuXHRyZXR1cm4gY3JlYXRlRGVidWc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0dXA7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGRyYWdEcm9wXG5cbnZhciBmbGF0dGVuID0gcmVxdWlyZSgnZmxhdHRlbicpXG52YXIgcGFyYWxsZWwgPSByZXF1aXJlKCdydW4tcGFyYWxsZWwnKVxuXG5mdW5jdGlvbiBkcmFnRHJvcCAoZWxlbSwgbGlzdGVuZXJzKSB7XG4gIGlmICh0eXBlb2YgZWxlbSA9PT0gJ3N0cmluZycpIHtcbiAgICB2YXIgc2VsZWN0b3IgPSBlbGVtXG4gICAgZWxlbSA9IHdpbmRvdy5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKGVsZW0pXG4gICAgaWYgKCFlbGVtKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1wiJyArIHNlbGVjdG9yICsgJ1wiIGRvZXMgbm90IG1hdGNoIGFueSBIVE1MIGVsZW1lbnRzJylcbiAgICB9XG4gIH1cblxuICBpZiAoIWVsZW0pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1wiJyArIGVsZW0gKyAnXCIgaXMgbm90IGEgdmFsaWQgSFRNTCBlbGVtZW50JylcbiAgfVxuXG4gIGlmICh0eXBlb2YgbGlzdGVuZXJzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgbGlzdGVuZXJzID0geyBvbkRyb3A6IGxpc3RlbmVycyB9XG4gIH1cblxuICB2YXIgdGltZW91dFxuXG4gIGVsZW0uYWRkRXZlbnRMaXN0ZW5lcignZHJhZ2VudGVyJywgb25EcmFnRW50ZXIsIGZhbHNlKVxuICBlbGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdvdmVyJywgb25EcmFnT3ZlciwgZmFsc2UpXG4gIGVsZW0uYWRkRXZlbnRMaXN0ZW5lcignZHJhZ2xlYXZlJywgb25EcmFnTGVhdmUsIGZhbHNlKVxuICBlbGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2Ryb3AnLCBvbkRyb3AsIGZhbHNlKVxuXG4gIC8vIEZ1bmN0aW9uIHRvIHJlbW92ZSBkcmFnLWRyb3AgbGlzdGVuZXJzXG4gIHJldHVybiBmdW5jdGlvbiByZW1vdmUgKCkge1xuICAgIHJlbW92ZURyYWdDbGFzcygpXG4gICAgZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyKCdkcmFnZW50ZXInLCBvbkRyYWdFbnRlciwgZmFsc2UpXG4gICAgZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyKCdkcmFnb3ZlcicsIG9uRHJhZ092ZXIsIGZhbHNlKVxuICAgIGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lcignZHJhZ2xlYXZlJywgb25EcmFnTGVhdmUsIGZhbHNlKVxuICAgIGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lcignZHJvcCcsIG9uRHJvcCwgZmFsc2UpXG4gIH1cblxuICBmdW5jdGlvbiBvbkRyYWdFbnRlciAoZSkge1xuICAgIGlmIChsaXN0ZW5lcnMub25EcmFnRW50ZXIpIHtcbiAgICAgIGxpc3RlbmVycy5vbkRyYWdFbnRlcihlKVxuICAgIH1cblxuICAgIC8vIFByZXZlbnQgZXZlbnRcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICBmdW5jdGlvbiBvbkRyYWdPdmVyIChlKSB7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKVxuICAgIGUucHJldmVudERlZmF1bHQoKVxuXG4gICAgaWYgKGxpc3RlbmVycy5vbkRyYWdPdmVyKSB7XG4gICAgICBsaXN0ZW5lcnMub25EcmFnT3ZlcihlKVxuICAgIH1cblxuICAgIGlmIChlLmRhdGFUcmFuc2Zlci5pdGVtcykge1xuICAgICAgLy8gT25seSBhZGQgXCJkcmFnXCIgY2xhc3Mgd2hlbiBgaXRlbXNgIGNvbnRhaW5zIGl0ZW1zIHRoYXQgYXJlIGFibGUgdG8gYmVcbiAgICAgIC8vIGhhbmRsZWQgYnkgdGhlIHJlZ2lzdGVyZWQgbGlzdGVuZXJzIChmaWxlcyB2cy4gdGV4dClcbiAgICAgIHZhciBpdGVtcyA9IEFycmF5LmZyb20oZS5kYXRhVHJhbnNmZXIuaXRlbXMpXG4gICAgICB2YXIgZmlsZUl0ZW1zID0gaXRlbXMuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7IHJldHVybiBpdGVtLmtpbmQgPT09ICdmaWxlJyB9KVxuICAgICAgdmFyIHRleHRJdGVtcyA9IGl0ZW1zLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkgeyByZXR1cm4gaXRlbS5raW5kID09PSAnc3RyaW5nJyB9KVxuXG4gICAgICBpZiAoZmlsZUl0ZW1zLmxlbmd0aCA9PT0gMCAmJiAhbGlzdGVuZXJzLm9uRHJvcFRleHQpIHJldHVyblxuICAgICAgaWYgKHRleHRJdGVtcy5sZW5ndGggPT09IDAgJiYgIWxpc3RlbmVycy5vbkRyb3ApIHJldHVyblxuICAgICAgaWYgKGZpbGVJdGVtcy5sZW5ndGggPT09IDAgJiYgdGV4dEl0ZW1zLmxlbmd0aCA9PT0gMCkgcmV0dXJuXG4gICAgfVxuXG4gICAgZWxlbS5jbGFzc0xpc3QuYWRkKCdkcmFnJylcbiAgICBjbGVhclRpbWVvdXQodGltZW91dClcblxuICAgIGUuZGF0YVRyYW5zZmVyLmRyb3BFZmZlY3QgPSAnY29weSdcblxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgZnVuY3Rpb24gb25EcmFnTGVhdmUgKGUpIHtcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpXG5cbiAgICBpZiAobGlzdGVuZXJzLm9uRHJhZ0xlYXZlKSB7XG4gICAgICBsaXN0ZW5lcnMub25EcmFnTGVhdmUoZSlcbiAgICB9XG5cbiAgICBjbGVhclRpbWVvdXQodGltZW91dClcbiAgICB0aW1lb3V0ID0gc2V0VGltZW91dChyZW1vdmVEcmFnQ2xhc3MsIDUwKVxuXG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICBmdW5jdGlvbiBvbkRyb3AgKGUpIHtcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpXG5cbiAgICBpZiAobGlzdGVuZXJzLm9uRHJhZ0xlYXZlKSB7XG4gICAgICBsaXN0ZW5lcnMub25EcmFnTGVhdmUoZSlcbiAgICB9XG5cbiAgICBjbGVhclRpbWVvdXQodGltZW91dClcbiAgICByZW1vdmVEcmFnQ2xhc3MoKVxuXG4gICAgdmFyIHBvcyA9IHtcbiAgICAgIHg6IGUuY2xpZW50WCxcbiAgICAgIHk6IGUuY2xpZW50WVxuICAgIH1cblxuICAgIC8vIHRleHQgZHJvcCBzdXBwb3J0XG4gICAgdmFyIHRleHQgPSBlLmRhdGFUcmFuc2Zlci5nZXREYXRhKCd0ZXh0JylcbiAgICBpZiAodGV4dCAmJiBsaXN0ZW5lcnMub25Ecm9wVGV4dCkge1xuICAgICAgbGlzdGVuZXJzLm9uRHJvcFRleHQodGV4dCwgcG9zKVxuICAgIH1cblxuICAgIC8vIEZpbGUgZHJvcCBzdXBwb3J0LiBUaGUgYGRhdGFUcmFuc2Zlci5pdGVtc2AgQVBJIHN1cHBvcnRzIGRpcmVjdG9yaWVzLCBzbyB3ZVxuICAgIC8vIHVzZSBpdCBpbnN0ZWFkIG9mIGBkYXRhVHJhbnNmZXIuZmlsZXNgLCBldmVuIHRob3VnaCBpdCdzIG11Y2ggbW9yZVxuICAgIC8vIGNvbXBsaWNhdGVkIHRvIHVzZS5cbiAgICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvZHJhZy1kcm9wL2lzc3Vlcy8zOVxuICAgIGlmIChsaXN0ZW5lcnMub25Ecm9wICYmIGUuZGF0YVRyYW5zZmVyLml0ZW1zKSB7XG4gICAgICB2YXIgZmlsZUxpc3QgPSBlLmRhdGFUcmFuc2Zlci5maWxlc1xuXG4gICAgICAvLyBIYW5kbGUgZGlyZWN0b3JpZXMgaW4gQ2hyb21lIHVzaW5nIHRoZSBwcm9wcmlldGFyeSBGaWxlU3lzdGVtIEFQSVxuICAgICAgdmFyIGl0ZW1zID0gQXJyYXkuZnJvbShlLmRhdGFUcmFuc2Zlci5pdGVtcykuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIHJldHVybiBpdGVtLmtpbmQgPT09ICdmaWxlJ1xuICAgICAgfSlcblxuICAgICAgaWYgKGl0ZW1zLmxlbmd0aCA9PT0gMCkgcmV0dXJuXG5cbiAgICAgIHBhcmFsbGVsKGl0ZW1zLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGNiKSB7XG4gICAgICAgICAgcHJvY2Vzc0VudHJ5KGl0ZW0ud2Via2l0R2V0QXNFbnRyeSgpLCBjYilcbiAgICAgICAgfVxuICAgICAgfSksIGZ1bmN0aW9uIChlcnIsIHJlc3VsdHMpIHtcbiAgICAgICAgLy8gVGhpcyBjYXRjaGVzIHBlcm1pc3Npb24gZXJyb3JzIHdpdGggZmlsZTovLyBpbiBDaHJvbWUuIFRoaXMgc2hvdWxkIG5ldmVyXG4gICAgICAgIC8vIHRocm93IGluIHByb2R1Y3Rpb24gY29kZSwgc28gdGhlIHVzZXIgZG9lcyBub3QgbmVlZCB0byB1c2UgdHJ5LWNhdGNoLlxuICAgICAgICBpZiAoZXJyKSB0aHJvdyBlcnJcblxuICAgICAgICB2YXIgZW50cmllcyA9IGZsYXR0ZW4ocmVzdWx0cylcblxuICAgICAgICB2YXIgZmlsZXMgPSBlbnRyaWVzLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgIHJldHVybiBpdGVtLmlzRmlsZVxuICAgICAgICB9KVxuXG4gICAgICAgIHZhciBkaXJlY3RvcmllcyA9IGVudHJpZXMuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgcmV0dXJuIGl0ZW0uaXNEaXJlY3RvcnlcbiAgICAgICAgfSlcblxuICAgICAgICBsaXN0ZW5lcnMub25Ecm9wKGZpbGVzLCBwb3MsIGZpbGVMaXN0LCBkaXJlY3RvcmllcylcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmVEcmFnQ2xhc3MgKCkge1xuICAgIGVsZW0uY2xhc3NMaXN0LnJlbW92ZSgnZHJhZycpXG4gIH1cbn1cblxuZnVuY3Rpb24gcHJvY2Vzc0VudHJ5IChlbnRyeSwgY2IpIHtcbiAgdmFyIGVudHJpZXMgPSBbXVxuXG4gIGlmIChlbnRyeS5pc0ZpbGUpIHtcbiAgICBlbnRyeS5maWxlKGZ1bmN0aW9uIChmaWxlKSB7XG4gICAgICBmaWxlLmZ1bGxQYXRoID0gZW50cnkuZnVsbFBhdGggLy8gcHJlc2VydmUgcGF0aGluZyBmb3IgY29uc3VtZXJcbiAgICAgIGZpbGUuaXNGaWxlID0gdHJ1ZVxuICAgICAgZmlsZS5pc0RpcmVjdG9yeSA9IGZhbHNlXG4gICAgICBjYihudWxsLCBmaWxlKVxuICAgIH0sIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgIGNiKGVycilcbiAgICB9KVxuICB9IGVsc2UgaWYgKGVudHJ5LmlzRGlyZWN0b3J5KSB7XG4gICAgdmFyIHJlYWRlciA9IGVudHJ5LmNyZWF0ZVJlYWRlcigpXG4gICAgcmVhZEVudHJpZXMoKVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhZEVudHJpZXMgKCkge1xuICAgIHJlYWRlci5yZWFkRW50cmllcyhmdW5jdGlvbiAoZW50cmllc18pIHtcbiAgICAgIGlmIChlbnRyaWVzXy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGVudHJpZXMgPSBlbnRyaWVzLmNvbmNhdChBcnJheS5mcm9tKGVudHJpZXNfKSlcbiAgICAgICAgcmVhZEVudHJpZXMoKSAvLyBjb250aW51ZSByZWFkaW5nIGVudHJpZXMgdW50aWwgYHJlYWRFbnRyaWVzYCByZXR1cm5zIG5vIG1vcmVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRvbmVFbnRyaWVzKClcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgZnVuY3Rpb24gZG9uZUVudHJpZXMgKCkge1xuICAgIHBhcmFsbGVsKGVudHJpZXMubWFwKGZ1bmN0aW9uIChlbnRyeSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChjYikge1xuICAgICAgICBwcm9jZXNzRW50cnkoZW50cnksIGNiKVxuICAgICAgfVxuICAgIH0pLCBmdW5jdGlvbiAoZXJyLCByZXN1bHRzKSB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIGNiKGVycilcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdHMucHVzaCh7XG4gICAgICAgICAgZnVsbFBhdGg6IGVudHJ5LmZ1bGxQYXRoLFxuICAgICAgICAgIG5hbWU6IGVudHJ5Lm5hbWUsXG4gICAgICAgICAgaXNGaWxlOiBmYWxzZSxcbiAgICAgICAgICBpc0RpcmVjdG9yeTogdHJ1ZVxuICAgICAgICB9KVxuICAgICAgICBjYihudWxsLCByZXN1bHRzKVxuICAgICAgfVxuICAgIH0pXG4gIH1cbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5FUlJPUl9QQUNLRVQgPSBleHBvcnRzLlBBQ0tFVF9UWVBFU19SRVZFUlNFID0gZXhwb3J0cy5QQUNLRVRfVFlQRVMgPSB2b2lkIDA7XG5jb25zdCBQQUNLRVRfVFlQRVMgPSBPYmplY3QuY3JlYXRlKG51bGwpOyAvLyBubyBNYXAgPSBubyBwb2x5ZmlsbFxuZXhwb3J0cy5QQUNLRVRfVFlQRVMgPSBQQUNLRVRfVFlQRVM7XG5QQUNLRVRfVFlQRVNbXCJvcGVuXCJdID0gXCIwXCI7XG5QQUNLRVRfVFlQRVNbXCJjbG9zZVwiXSA9IFwiMVwiO1xuUEFDS0VUX1RZUEVTW1wicGluZ1wiXSA9IFwiMlwiO1xuUEFDS0VUX1RZUEVTW1wicG9uZ1wiXSA9IFwiM1wiO1xuUEFDS0VUX1RZUEVTW1wibWVzc2FnZVwiXSA9IFwiNFwiO1xuUEFDS0VUX1RZUEVTW1widXBncmFkZVwiXSA9IFwiNVwiO1xuUEFDS0VUX1RZUEVTW1wibm9vcFwiXSA9IFwiNlwiO1xuY29uc3QgUEFDS0VUX1RZUEVTX1JFVkVSU0UgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuZXhwb3J0cy5QQUNLRVRfVFlQRVNfUkVWRVJTRSA9IFBBQ0tFVF9UWVBFU19SRVZFUlNFO1xuT2JqZWN0LmtleXMoUEFDS0VUX1RZUEVTKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgUEFDS0VUX1RZUEVTX1JFVkVSU0VbUEFDS0VUX1RZUEVTW2tleV1dID0ga2V5O1xufSk7XG5jb25zdCBFUlJPUl9QQUNLRVQgPSB7IHR5cGU6IFwiZXJyb3JcIiwgZGF0YTogXCJwYXJzZXIgZXJyb3JcIiB9O1xuZXhwb3J0cy5FUlJPUl9QQUNLRVQgPSBFUlJPUl9QQUNLRVQ7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGNvbW1vbnNfanNfMSA9IHJlcXVpcmUoXCIuL2NvbW1vbnMuanNcIik7XG5jb25zdCBiYXNlNjRfYXJyYXlidWZmZXJfMSA9IHJlcXVpcmUoXCJiYXNlNjQtYXJyYXlidWZmZXJcIik7XG5jb25zdCB3aXRoTmF0aXZlQXJyYXlCdWZmZXIgPSB0eXBlb2YgQXJyYXlCdWZmZXIgPT09IFwiZnVuY3Rpb25cIjtcbmNvbnN0IGRlY29kZVBhY2tldCA9IChlbmNvZGVkUGFja2V0LCBiaW5hcnlUeXBlKSA9PiB7XG4gICAgaWYgKHR5cGVvZiBlbmNvZGVkUGFja2V0ICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiBcIm1lc3NhZ2VcIixcbiAgICAgICAgICAgIGRhdGE6IG1hcEJpbmFyeShlbmNvZGVkUGFja2V0LCBiaW5hcnlUeXBlKVxuICAgICAgICB9O1xuICAgIH1cbiAgICBjb25zdCB0eXBlID0gZW5jb2RlZFBhY2tldC5jaGFyQXQoMCk7XG4gICAgaWYgKHR5cGUgPT09IFwiYlwiKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiBcIm1lc3NhZ2VcIixcbiAgICAgICAgICAgIGRhdGE6IGRlY29kZUJhc2U2NFBhY2tldChlbmNvZGVkUGFja2V0LnN1YnN0cmluZygxKSwgYmluYXJ5VHlwZSlcbiAgICAgICAgfTtcbiAgICB9XG4gICAgY29uc3QgcGFja2V0VHlwZSA9IGNvbW1vbnNfanNfMS5QQUNLRVRfVFlQRVNfUkVWRVJTRVt0eXBlXTtcbiAgICBpZiAoIXBhY2tldFR5cGUpIHtcbiAgICAgICAgcmV0dXJuIGNvbW1vbnNfanNfMS5FUlJPUl9QQUNLRVQ7XG4gICAgfVxuICAgIHJldHVybiBlbmNvZGVkUGFja2V0Lmxlbmd0aCA+IDFcbiAgICAgICAgPyB7XG4gICAgICAgICAgICB0eXBlOiBjb21tb25zX2pzXzEuUEFDS0VUX1RZUEVTX1JFVkVSU0VbdHlwZV0sXG4gICAgICAgICAgICBkYXRhOiBlbmNvZGVkUGFja2V0LnN1YnN0cmluZygxKVxuICAgICAgICB9XG4gICAgICAgIDoge1xuICAgICAgICAgICAgdHlwZTogY29tbW9uc19qc18xLlBBQ0tFVF9UWVBFU19SRVZFUlNFW3R5cGVdXG4gICAgICAgIH07XG59O1xuY29uc3QgZGVjb2RlQmFzZTY0UGFja2V0ID0gKGRhdGEsIGJpbmFyeVR5cGUpID0+IHtcbiAgICBpZiAod2l0aE5hdGl2ZUFycmF5QnVmZmVyKSB7XG4gICAgICAgIGNvbnN0IGRlY29kZWQgPSAoMCwgYmFzZTY0X2FycmF5YnVmZmVyXzEuZGVjb2RlKShkYXRhKTtcbiAgICAgICAgcmV0dXJuIG1hcEJpbmFyeShkZWNvZGVkLCBiaW5hcnlUeXBlKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiB7IGJhc2U2NDogdHJ1ZSwgZGF0YSB9OyAvLyBmYWxsYmFjayBmb3Igb2xkIGJyb3dzZXJzXG4gICAgfVxufTtcbmNvbnN0IG1hcEJpbmFyeSA9IChkYXRhLCBiaW5hcnlUeXBlKSA9PiB7XG4gICAgc3dpdGNoIChiaW5hcnlUeXBlKSB7XG4gICAgICAgIGNhc2UgXCJibG9iXCI6XG4gICAgICAgICAgICByZXR1cm4gZGF0YSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyID8gbmV3IEJsb2IoW2RhdGFdKSA6IGRhdGE7XG4gICAgICAgIGNhc2UgXCJhcnJheWJ1ZmZlclwiOlxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIGRhdGE7IC8vIGFzc3VtaW5nIHRoZSBkYXRhIGlzIGFscmVhZHkgYW4gQXJyYXlCdWZmZXJcbiAgICB9XG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gZGVjb2RlUGFja2V0O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBjb21tb25zX2pzXzEgPSByZXF1aXJlKFwiLi9jb21tb25zLmpzXCIpO1xuY29uc3Qgd2l0aE5hdGl2ZUJsb2IgPSB0eXBlb2YgQmxvYiA9PT0gXCJmdW5jdGlvblwiIHx8XG4gICAgKHR5cGVvZiBCbG9iICE9PSBcInVuZGVmaW5lZFwiICYmXG4gICAgICAgIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChCbG9iKSA9PT0gXCJbb2JqZWN0IEJsb2JDb25zdHJ1Y3Rvcl1cIik7XG5jb25zdCB3aXRoTmF0aXZlQXJyYXlCdWZmZXIgPSB0eXBlb2YgQXJyYXlCdWZmZXIgPT09IFwiZnVuY3Rpb25cIjtcbi8vIEFycmF5QnVmZmVyLmlzVmlldyBtZXRob2QgaXMgbm90IGRlZmluZWQgaW4gSUUxMFxuY29uc3QgaXNWaWV3ID0gb2JqID0+IHtcbiAgICByZXR1cm4gdHlwZW9mIEFycmF5QnVmZmVyLmlzVmlldyA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgID8gQXJyYXlCdWZmZXIuaXNWaWV3KG9iailcbiAgICAgICAgOiBvYmogJiYgb2JqLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyO1xufTtcbmNvbnN0IGVuY29kZVBhY2tldCA9ICh7IHR5cGUsIGRhdGEgfSwgc3VwcG9ydHNCaW5hcnksIGNhbGxiYWNrKSA9PiB7XG4gICAgaWYgKHdpdGhOYXRpdmVCbG9iICYmIGRhdGEgaW5zdGFuY2VvZiBCbG9iKSB7XG4gICAgICAgIGlmIChzdXBwb3J0c0JpbmFyeSkge1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGVuY29kZUJsb2JBc0Jhc2U2NChkYXRhLCBjYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAod2l0aE5hdGl2ZUFycmF5QnVmZmVyICYmXG4gICAgICAgIChkYXRhIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIgfHwgaXNWaWV3KGRhdGEpKSkge1xuICAgICAgICBpZiAoc3VwcG9ydHNCaW5hcnkpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBlbmNvZGVCbG9iQXNCYXNlNjQobmV3IEJsb2IoW2RhdGFdKSwgY2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIHBsYWluIHN0cmluZ1xuICAgIHJldHVybiBjYWxsYmFjayhjb21tb25zX2pzXzEuUEFDS0VUX1RZUEVTW3R5cGVdICsgKGRhdGEgfHwgXCJcIikpO1xufTtcbmNvbnN0IGVuY29kZUJsb2JBc0Jhc2U2NCA9IChkYXRhLCBjYWxsYmFjaykgPT4ge1xuICAgIGNvbnN0IGZpbGVSZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICAgIGZpbGVSZWFkZXIub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBjb25zdCBjb250ZW50ID0gZmlsZVJlYWRlci5yZXN1bHQuc3BsaXQoXCIsXCIpWzFdO1xuICAgICAgICBjYWxsYmFjayhcImJcIiArIGNvbnRlbnQpO1xuICAgIH07XG4gICAgcmV0dXJuIGZpbGVSZWFkZXIucmVhZEFzRGF0YVVSTChkYXRhKTtcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBlbmNvZGVQYWNrZXQ7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGVjb2RlUGF5bG9hZCA9IGV4cG9ydHMuZGVjb2RlUGFja2V0ID0gZXhwb3J0cy5lbmNvZGVQYXlsb2FkID0gZXhwb3J0cy5lbmNvZGVQYWNrZXQgPSBleHBvcnRzLnByb3RvY29sID0gdm9pZCAwO1xuY29uc3QgZW5jb2RlUGFja2V0X2pzXzEgPSByZXF1aXJlKFwiLi9lbmNvZGVQYWNrZXQuanNcIik7XG5leHBvcnRzLmVuY29kZVBhY2tldCA9IGVuY29kZVBhY2tldF9qc18xLmRlZmF1bHQ7XG5jb25zdCBkZWNvZGVQYWNrZXRfanNfMSA9IHJlcXVpcmUoXCIuL2RlY29kZVBhY2tldC5qc1wiKTtcbmV4cG9ydHMuZGVjb2RlUGFja2V0ID0gZGVjb2RlUGFja2V0X2pzXzEuZGVmYXVsdDtcbmNvbnN0IFNFUEFSQVRPUiA9IFN0cmluZy5mcm9tQ2hhckNvZGUoMzApOyAvLyBzZWUgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRGVsaW1pdGVyI0FTQ0lJX2RlbGltaXRlZF90ZXh0XG5jb25zdCBlbmNvZGVQYXlsb2FkID0gKHBhY2tldHMsIGNhbGxiYWNrKSA9PiB7XG4gICAgLy8gc29tZSBwYWNrZXRzIG1heSBiZSBhZGRlZCB0byB0aGUgYXJyYXkgd2hpbGUgZW5jb2RpbmcsIHNvIHRoZSBpbml0aWFsIGxlbmd0aCBtdXN0IGJlIHNhdmVkXG4gICAgY29uc3QgbGVuZ3RoID0gcGFja2V0cy5sZW5ndGg7XG4gICAgY29uc3QgZW5jb2RlZFBhY2tldHMgPSBuZXcgQXJyYXkobGVuZ3RoKTtcbiAgICBsZXQgY291bnQgPSAwO1xuICAgIHBhY2tldHMuZm9yRWFjaCgocGFja2V0LCBpKSA9PiB7XG4gICAgICAgIC8vIGZvcmNlIGJhc2U2NCBlbmNvZGluZyBmb3IgYmluYXJ5IHBhY2tldHNcbiAgICAgICAgKDAsIGVuY29kZVBhY2tldF9qc18xLmRlZmF1bHQpKHBhY2tldCwgZmFsc2UsIGVuY29kZWRQYWNrZXQgPT4ge1xuICAgICAgICAgICAgZW5jb2RlZFBhY2tldHNbaV0gPSBlbmNvZGVkUGFja2V0O1xuICAgICAgICAgICAgaWYgKCsrY291bnQgPT09IGxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVuY29kZWRQYWNrZXRzLmpvaW4oU0VQQVJBVE9SKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xufTtcbmV4cG9ydHMuZW5jb2RlUGF5bG9hZCA9IGVuY29kZVBheWxvYWQ7XG5jb25zdCBkZWNvZGVQYXlsb2FkID0gKGVuY29kZWRQYXlsb2FkLCBiaW5hcnlUeXBlKSA9PiB7XG4gICAgY29uc3QgZW5jb2RlZFBhY2tldHMgPSBlbmNvZGVkUGF5bG9hZC5zcGxpdChTRVBBUkFUT1IpO1xuICAgIGNvbnN0IHBhY2tldHMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVuY29kZWRQYWNrZXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGRlY29kZWRQYWNrZXQgPSAoMCwgZGVjb2RlUGFja2V0X2pzXzEuZGVmYXVsdCkoZW5jb2RlZFBhY2tldHNbaV0sIGJpbmFyeVR5cGUpO1xuICAgICAgICBwYWNrZXRzLnB1c2goZGVjb2RlZFBhY2tldCk7XG4gICAgICAgIGlmIChkZWNvZGVkUGFja2V0LnR5cGUgPT09IFwiZXJyb3JcIikge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHBhY2tldHM7XG59O1xuZXhwb3J0cy5kZWNvZGVQYXlsb2FkID0gZGVjb2RlUGF5bG9hZDtcbmV4cG9ydHMucHJvdG9jb2wgPSA0O1xuIiwiIWZ1bmN0aW9uKGUsdCl7XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHMmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBtb2R1bGU/dChleHBvcnRzKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFwiZXhpZnJcIixbXCJleHBvcnRzXCJdLHQpOnQoKGU9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbFRoaXM/Z2xvYmFsVGhpczplfHxzZWxmKS5leGlmcj17fSl9KHRoaXMsKGZ1bmN0aW9uKGUpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHQoZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfWZ1bmN0aW9uIG4oZSx0KXtmb3IodmFyIG49MDtuPHQubGVuZ3RoO24rKyl7dmFyIHI9dFtuXTtyLmVudW1lcmFibGU9ci5lbnVtZXJhYmxlfHwhMSxyLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiByJiYoci53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsci5rZXkscil9fWZ1bmN0aW9uIHIoZSx0LHIpe3JldHVybiB0JiZuKGUucHJvdG90eXBlLHQpLHImJm4oZSxyKSxlfWZ1bmN0aW9uIGkoZSx0LG4pe3JldHVybiB0IGluIGU/T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsdCx7dmFsdWU6bixlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMH0pOmVbdF09bixlfWZ1bmN0aW9uIGEoZSx0KXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB0JiZudWxsIT09dCl0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7ZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZSh0JiZ0LnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOmUsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pO3ZhciBuPVtcInByb3RvdHlwZVwiLFwiX19wcm90b19fXCIsXCJjYWxsZXJcIixcImFyZ3VtZW50c1wiLFwibGVuZ3RoXCIsXCJuYW1lXCJdO09iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHQpLmZvckVhY2goKGZ1bmN0aW9uKHIpey0xPT09bi5pbmRleE9mKHIpJiZlW3JdIT09dFtyXSYmKGVbcl09dFtyXSl9KSksdCYmdShlLHQpfWZ1bmN0aW9uIHMoZSl7cmV0dXJuKHM9T2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5nZXRQcm90b3R5cGVPZjpmdW5jdGlvbihlKXtyZXR1cm4gZS5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZihlKX0pKGUpfWZ1bmN0aW9uIHUoZSx0KXtyZXR1cm4odT1PYmplY3Quc2V0UHJvdG90eXBlT2Z8fGZ1bmN0aW9uKGUsdCl7cmV0dXJuIGUuX19wcm90b19fPXQsZX0pKGUsdCl9ZnVuY3Rpb24gbygpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLFtdLChmdW5jdGlvbigpe30pKSksITB9Y2F0Y2goZSl7cmV0dXJuITF9fWZ1bmN0aW9uIGYoZSx0LG4pe3JldHVybihmPW8oKT9SZWZsZWN0LmNvbnN0cnVjdDpmdW5jdGlvbihlLHQsbil7dmFyIHI9W251bGxdO3IucHVzaC5hcHBseShyLHQpO3ZhciBpPW5ldyhGdW5jdGlvbi5iaW5kLmFwcGx5KGUscikpO3JldHVybiBuJiZ1KGksbi5wcm90b3R5cGUpLGl9KS5hcHBseShudWxsLGFyZ3VtZW50cyl9ZnVuY3Rpb24gYyhlKXt2YXIgdD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBNYXA/bmV3IE1hcDp2b2lkIDA7cmV0dXJuKGM9ZnVuY3Rpb24oZSl7aWYobnVsbD09PWV8fChuPWUsLTE9PT1GdW5jdGlvbi50b1N0cmluZy5jYWxsKG4pLmluZGV4T2YoXCJbbmF0aXZlIGNvZGVdXCIpKSlyZXR1cm4gZTt2YXIgbjtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBlKXRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTtpZih2b2lkIDAhPT10KXtpZih0LmhhcyhlKSlyZXR1cm4gdC5nZXQoZSk7dC5zZXQoZSxyKX1mdW5jdGlvbiByKCl7cmV0dXJuIGYoZSxhcmd1bWVudHMscyh0aGlzKS5jb25zdHJ1Y3Rvcil9cmV0dXJuIHIucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoZS5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTpyLGVudW1lcmFibGU6ITEsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLHUocixlKX0pKGUpfWZ1bmN0aW9uIGgoZSl7aWYodm9pZCAwPT09ZSl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7cmV0dXJuIGV9ZnVuY3Rpb24gbChlLHQpe3JldHVybiF0fHxcIm9iamVjdFwiIT10eXBlb2YgdCYmXCJmdW5jdGlvblwiIT10eXBlb2YgdD9oKGUpOnR9ZnVuY3Rpb24gZChlKXt2YXIgdD1vKCk7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIG4scj1zKGUpO2lmKHQpe3ZhciBpPXModGhpcykuY29uc3RydWN0b3I7bj1SZWZsZWN0LmNvbnN0cnVjdChyLGFyZ3VtZW50cyxpKX1lbHNlIG49ci5hcHBseSh0aGlzLGFyZ3VtZW50cyk7cmV0dXJuIGwodGhpcyxuKX19ZnVuY3Rpb24gdihlLHQsbil7cmV0dXJuKHY9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFJlZmxlY3QmJlJlZmxlY3QuZ2V0P1JlZmxlY3QuZ2V0OmZ1bmN0aW9uKGUsdCxuKXt2YXIgcj1mdW5jdGlvbihlLHQpe2Zvcig7IU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLHQpJiZudWxsIT09KGU9cyhlKSk7KTtyZXR1cm4gZX0oZSx0KTtpZihyKXt2YXIgaT1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHIsdCk7cmV0dXJuIGkuZ2V0P2kuZ2V0LmNhbGwobik6aS52YWx1ZX19KShlLHQsbnx8ZSl9dmFyIHA9T2JqZWN0LnZhbHVlc3x8ZnVuY3Rpb24oZSl7dmFyIHQ9W107Zm9yKHZhciBuIGluIGUpdC5wdXNoKGVbbl0pO3JldHVybiB0fSx5PU9iamVjdC5lbnRyaWVzfHxmdW5jdGlvbihlKXt2YXIgdD1bXTtmb3IodmFyIG4gaW4gZSl0LnB1c2goW24sZVtuXV0pO3JldHVybiB0fSxnPU9iamVjdC5hc3NpZ258fGZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1hcmd1bWVudHMubGVuZ3RoLG49bmV3IEFycmF5KHQ+MT90LTE6MCkscj0xO3I8dDtyKyspbltyLTFdPWFyZ3VtZW50c1tyXTtyZXR1cm4gbi5mb3JFYWNoKChmdW5jdGlvbih0KXtmb3IodmFyIG4gaW4gdCllW25dPXRbbl19KSksZX0saz1PYmplY3QuZnJvbUVudHJpZXN8fGZ1bmN0aW9uKGUpe3ZhciB0PXt9O3JldHVybiBtKGUpLmZvckVhY2goKGZ1bmN0aW9uKGUpe3ZhciBuPWVbMF0scj1lWzFdO3Rbbl09cn0pKSx0fSxtPUFycmF5LmZyb218fGZ1bmN0aW9uKGUpe2lmKGUgaW5zdGFuY2VvZiBQKXt2YXIgdD1bXTtyZXR1cm4gZS5mb3JFYWNoKChmdW5jdGlvbihlLG4pe3JldHVybiB0LnB1c2goW24sZV0pfSkpLHR9cmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGUpfTtmdW5jdGlvbiBiKGUpe3JldHVybi0xIT09dGhpcy5pbmRleE9mKGUpfUFycmF5LnByb3RvdHlwZS5pbmNsdWRlc3x8KEFycmF5LnByb3RvdHlwZS5pbmNsdWRlcz1iKSxTdHJpbmcucHJvdG90eXBlLmluY2x1ZGVzfHwoU3RyaW5nLnByb3RvdHlwZS5pbmNsdWRlcz1iKSxTdHJpbmcucHJvdG90eXBlLnN0YXJ0c1dpdGh8fChTdHJpbmcucHJvdG90eXBlLnN0YXJ0c1dpdGg9ZnVuY3Rpb24oZSl7dmFyIHQ9YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOjA7cmV0dXJuIHRoaXMuc3Vic3RyaW5nKHQsdCtlLmxlbmd0aCk9PT1lfSksU3RyaW5nLnByb3RvdHlwZS5lbmRzV2l0aHx8KFN0cmluZy5wcm90b3R5cGUuZW5kc1dpdGg9ZnVuY3Rpb24oZSl7dmFyIHQ9YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOnRoaXMubGVuZ3RoO3JldHVybiB0aGlzLnN1YnN0cmluZyh0LWUubGVuZ3RoLHQpPT09ZX0pO3ZhciBBPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmP3NlbGY6Z2xvYmFsLHc9QS5mZXRjaHx8ZnVuY3Rpb24oZSl7dmFyIHQ9YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOnt9O3JldHVybiBuZXcgUHJvbWlzZSgoZnVuY3Rpb24obixyKXt2YXIgaT1uZXcgWE1MSHR0cFJlcXVlc3Q7aWYoaS5vcGVuKFwiZ2V0XCIsZSwhMCksaS5yZXNwb25zZVR5cGU9XCJhcnJheWJ1ZmZlclwiLGkub25lcnJvcj1yLHQuaGVhZGVycylmb3IodmFyIGEgaW4gdC5oZWFkZXJzKWkuc2V0UmVxdWVzdEhlYWRlcihhLHQuaGVhZGVyc1thXSk7aS5vbmxvYWQ9ZnVuY3Rpb24oKXtuKHtvazppLnN0YXR1cz49MjAwJiZpLnN0YXR1czwzMDAsc3RhdHVzOmkuc3RhdHVzLGFycmF5QnVmZmVyOmZ1bmN0aW9uKCl7cmV0dXJuIFByb21pc2UucmVzb2x2ZShpLnJlc3BvbnNlKX19KX0saS5zZW5kKG51bGwpfSkpfSxPPWZ1bmN0aW9uKGUpe3ZhciB0PVtdO2lmKE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHQse3NpemU6e2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmxlbmd0aH19LGhhczp7dmFsdWU6ZnVuY3Rpb24oZSl7cmV0dXJuLTEhPT10aGlzLmluZGV4T2YoZSl9fSxhZGQ6e3ZhbHVlOmZ1bmN0aW9uKGUpe3RoaXMuaGFzKGUpfHx0aGlzLnB1c2goZSl9fSxkZWxldGU6e3ZhbHVlOmZ1bmN0aW9uKGUpe2lmKHRoaXMuaGFzKGUpKXt2YXIgdD10aGlzLmluZGV4T2YoZSk7dGhpcy5zcGxpY2UodCwxKX19fX0pLEFycmF5LmlzQXJyYXkoZSkpZm9yKHZhciBuPTA7bjxlLmxlbmd0aDtuKyspdC5hZGQoZVtuXSk7cmV0dXJuIHR9LFM9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBQKGUpfSxQPXZvaWQgMCE9PUEuTWFwJiZ2b2lkIDAhPT1BLk1hcC5wcm90b3R5cGUua2V5cz9BLk1hcDpmdW5jdGlvbigpe2Z1bmN0aW9uIGUobil7aWYodCh0aGlzLGUpLHRoaXMuY2xlYXIoKSxuKWZvcih2YXIgcj0wO3I8bi5sZW5ndGg7cisrKXRoaXMuc2V0KG5bcl1bMF0sbltyXVsxXSl9cmV0dXJuIHIoZSxbe2tleTpcImNsZWFyXCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLl9tYXA9e30sdGhpcy5fa2V5cz1bXX19LHtrZXk6XCJzaXplXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2tleXMubGVuZ3RofX0se2tleTpcImdldFwiLHZhbHVlOmZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLl9tYXBbXCJtYXBfXCIrZV19fSx7a2V5Olwic2V0XCIsdmFsdWU6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcy5fbWFwW1wibWFwX1wiK2VdPXQsdGhpcy5fa2V5cy5pbmRleE9mKGUpPDAmJnRoaXMuX2tleXMucHVzaChlKSx0aGlzfX0se2tleTpcImhhc1wiLHZhbHVlOmZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLl9rZXlzLmluZGV4T2YoZSk+PTB9fSx7a2V5OlwiZGVsZXRlXCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5fa2V5cy5pbmRleE9mKGUpO3JldHVybiEodDwwKSYmKGRlbGV0ZSB0aGlzLl9tYXBbXCJtYXBfXCIrZV0sdGhpcy5fa2V5cy5zcGxpY2UodCwxKSwhMCl9fSx7a2V5Olwia2V5c1wiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2tleXMuc2xpY2UoMCl9fSx7a2V5OlwidmFsdWVzXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3JldHVybiB0aGlzLl9rZXlzLm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuIGUuZ2V0KHQpfSkpfX0se2tleTpcImVudHJpZXNcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXM7cmV0dXJuIHRoaXMuX2tleXMubWFwKChmdW5jdGlvbih0KXtyZXR1cm5bdCxlLmdldCh0KV19KSl9fSx7a2V5OlwiZm9yRWFjaFwiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuPTA7bjx0aGlzLl9rZXlzLmxlbmd0aDtuKyspZS5jYWxsKHQsdGhpcy5fbWFwW1wibWFwX1wiK3RoaXMuX2tleXNbbl1dLHRoaXMuX2tleXNbbl0sdGhpcyl9fV0pLGV9KCksVT1cInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZj9zZWxmOmdsb2JhbCx4PVwidW5kZWZpbmVkXCIhPXR5cGVvZiBuYXZpZ2F0b3IsQz14JiZcInVuZGVmaW5lZFwiPT10eXBlb2YgSFRNTEltYWdlRWxlbWVudCxCPSEoXCJ1bmRlZmluZWRcIj09dHlwZW9mIGdsb2JhbHx8XCJ1bmRlZmluZWRcIj09dHlwZW9mIHByb2Nlc3N8fCFwcm9jZXNzLnZlcnNpb25zfHwhcHJvY2Vzcy52ZXJzaW9ucy5ub2RlKSxqPVUuQnVmZmVyLF89ISFqO3ZhciBWPWZ1bmN0aW9uKGUpe3JldHVybiB2b2lkIDAhPT1lfTtmdW5jdGlvbiBJKGUpe3JldHVybiB2b2lkIDA9PT1lfHwoZSBpbnN0YW5jZW9mIFA/MD09PWUuc2l6ZTowPT09cChlKS5maWx0ZXIoVikubGVuZ3RoKX1mdW5jdGlvbiBMKGUpe3ZhciB0PW5ldyBFcnJvcihlKTt0aHJvdyBkZWxldGUgdC5zdGFjayx0fWZ1bmN0aW9uIFQoZSl7dmFyIHQ9ZnVuY3Rpb24oZSl7dmFyIHQ9MDtyZXR1cm4gZS5pZmQwLmVuYWJsZWQmJih0Kz0xMDI0KSxlLmV4aWYuZW5hYmxlZCYmKHQrPTIwNDgpLGUubWFrZXJOb3RlJiYodCs9MjA0OCksZS51c2VyQ29tbWVudCYmKHQrPTEwMjQpLGUuZ3BzLmVuYWJsZWQmJih0Kz01MTIpLGUuaW50ZXJvcC5lbmFibGVkJiYodCs9MTAwKSxlLmlmZDEuZW5hYmxlZCYmKHQrPTEwMjQpLHQrMjA0OH0oZSk7cmV0dXJuIGUuamZpZi5lbmFibGVkJiYodCs9NTApLGUueG1wLmVuYWJsZWQmJih0Kz0yZTQpLGUuaXB0Yy5lbmFibGVkJiYodCs9MTRlMyksZS5pY2MuZW5hYmxlZCYmKHQrPTZlMyksdH12YXIgej1mdW5jdGlvbihlKXtyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLGUpfSxGPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBUZXh0RGVjb2Rlcj9uZXcgVGV4dERlY29kZXIoXCJ1dGYtOFwiKTp2b2lkIDA7ZnVuY3Rpb24gRShlKXtyZXR1cm4gRj9GLmRlY29kZShlKTpfP0J1ZmZlci5mcm9tKGUpLnRvU3RyaW5nKFwidXRmOFwiKTpkZWNvZGVVUklDb21wb25lbnQoZXNjYXBlKHooZSkpKX12YXIgRD1mdW5jdGlvbigpe2Z1bmN0aW9uIGUobil7dmFyIHI9YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOjAsaT1hcmd1bWVudHMubGVuZ3RoPjI/YXJndW1lbnRzWzJdOnZvaWQgMCxhPWFyZ3VtZW50cy5sZW5ndGg+Mz9hcmd1bWVudHNbM106dm9pZCAwO2lmKHQodGhpcyxlKSxcImJvb2xlYW5cIj09dHlwZW9mIGEmJih0aGlzLmxlPWEpLEFycmF5LmlzQXJyYXkobikmJihuPW5ldyBVaW50OEFycmF5KG4pKSwwPT09bil0aGlzLmJ5dGVPZmZzZXQ9MCx0aGlzLmJ5dGVMZW5ndGg9MDtlbHNlIGlmKG4gaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcil7dm9pZCAwPT09aSYmKGk9bi5ieXRlTGVuZ3RoLXIpO3ZhciBzPW5ldyBEYXRhVmlldyhuLHIsaSk7dGhpcy5fc3dhcERhdGFWaWV3KHMpfWVsc2UgaWYobiBpbnN0YW5jZW9mIFVpbnQ4QXJyYXl8fG4gaW5zdGFuY2VvZiBEYXRhVmlld3x8biBpbnN0YW5jZW9mIGUpe3ZvaWQgMD09PWkmJihpPW4uYnl0ZUxlbmd0aC1yKSwocis9bi5ieXRlT2Zmc2V0KStpPm4uYnl0ZU9mZnNldCtuLmJ5dGVMZW5ndGgmJkwoXCJDcmVhdGluZyB2aWV3IG91dHNpZGUgb2YgYXZhaWxhYmxlIG1lbW9yeSBpbiBBcnJheUJ1ZmZlclwiKTt2YXIgdT1uZXcgRGF0YVZpZXcobi5idWZmZXIscixpKTt0aGlzLl9zd2FwRGF0YVZpZXcodSl9ZWxzZSBpZihcIm51bWJlclwiPT10eXBlb2Ygbil7dmFyIG89bmV3IERhdGFWaWV3KG5ldyBBcnJheUJ1ZmZlcihuKSk7dGhpcy5fc3dhcERhdGFWaWV3KG8pfWVsc2UgTChcIkludmFsaWQgaW5wdXQgYXJndW1lbnQgZm9yIEJ1ZmZlclZpZXc6IFwiK24pfXJldHVybiByKGUsW3trZXk6XCJfc3dhcEFycmF5QnVmZmVyXCIsdmFsdWU6ZnVuY3Rpb24oZSl7dGhpcy5fc3dhcERhdGFWaWV3KG5ldyBEYXRhVmlldyhlKSl9fSx7a2V5OlwiX3N3YXBCdWZmZXJcIix2YWx1ZTpmdW5jdGlvbihlKXt0aGlzLl9zd2FwRGF0YVZpZXcobmV3IERhdGFWaWV3KGUuYnVmZmVyLGUuYnl0ZU9mZnNldCxlLmJ5dGVMZW5ndGgpKX19LHtrZXk6XCJfc3dhcERhdGFWaWV3XCIsdmFsdWU6ZnVuY3Rpb24oZSl7dGhpcy5kYXRhVmlldz1lLHRoaXMuYnVmZmVyPWUuYnVmZmVyLHRoaXMuYnl0ZU9mZnNldD1lLmJ5dGVPZmZzZXQsdGhpcy5ieXRlTGVuZ3RoPWUuYnl0ZUxlbmd0aH19LHtrZXk6XCJfbGVuZ3RoVG9FbmRcIix2YWx1ZTpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5ieXRlTGVuZ3RoLWV9fSx7a2V5Olwic2V0XCIsdmFsdWU6ZnVuY3Rpb24odCxuKXt2YXIgcj1hcmd1bWVudHMubGVuZ3RoPjImJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06ZTt0IGluc3RhbmNlb2YgRGF0YVZpZXd8fHQgaW5zdGFuY2VvZiBlP3Q9bmV3IFVpbnQ4QXJyYXkodC5idWZmZXIsdC5ieXRlT2Zmc2V0LHQuYnl0ZUxlbmd0aCk6dCBpbnN0YW5jZW9mIEFycmF5QnVmZmVyJiYodD1uZXcgVWludDhBcnJheSh0KSksdCBpbnN0YW5jZW9mIFVpbnQ4QXJyYXl8fEwoXCJCdWZmZXJWaWV3LnNldCgpOiBJbnZhbGlkIGRhdGEgYXJndW1lbnQuXCIpO3ZhciBpPXRoaXMudG9VaW50OCgpO3JldHVybiBpLnNldCh0LG4pLG5ldyByKHRoaXMsbix0LmJ5dGVMZW5ndGgpfX0se2tleTpcInN1YmFycmF5XCIsdmFsdWU6ZnVuY3Rpb24odCxuKXtyZXR1cm4gbmV3IGUodGhpcyx0LG49bnx8dGhpcy5fbGVuZ3RoVG9FbmQodCkpfX0se2tleTpcInRvVWludDhcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiBuZXcgVWludDhBcnJheSh0aGlzLmJ1ZmZlcix0aGlzLmJ5dGVPZmZzZXQsdGhpcy5ieXRlTGVuZ3RoKX19LHtrZXk6XCJnZXRVaW50OEFycmF5XCIsdmFsdWU6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gbmV3IFVpbnQ4QXJyYXkodGhpcy5idWZmZXIsdGhpcy5ieXRlT2Zmc2V0K2UsdCl9fSx7a2V5OlwiZ2V0U3RyaW5nXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06MCx0PWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTp0aGlzLmJ5dGVMZW5ndGgsbj10aGlzLmdldFVpbnQ4QXJyYXkoZSx0KTtyZXR1cm4gRShuKX19LHtrZXk6XCJnZXRMYXRpbjFTdHJpbmdcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTowLHQ9YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOnRoaXMuYnl0ZUxlbmd0aCxuPXRoaXMuZ2V0VWludDhBcnJheShlLHQpO3JldHVybiB6KG4pfX0se2tleTpcImdldFVuaWNvZGVTdHJpbmdcIix2YWx1ZTpmdW5jdGlvbigpe2Zvcih2YXIgZT1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06MCx0PWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTp0aGlzLmJ5dGVMZW5ndGgsbj1bXSxyPTA7cjx0JiZlK3I8dGhpcy5ieXRlTGVuZ3RoO3IrPTIpbi5wdXNoKHRoaXMuZ2V0VWludDE2KGUrcikpO3JldHVybiB6KG4pfX0se2tleTpcImdldEludDhcIix2YWx1ZTpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5kYXRhVmlldy5nZXRJbnQ4KGUpfX0se2tleTpcImdldFVpbnQ4XCIsdmFsdWU6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuZGF0YVZpZXcuZ2V0VWludDgoZSl9fSx7a2V5OlwiZ2V0SW50MTZcIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06dGhpcy5sZTtyZXR1cm4gdGhpcy5kYXRhVmlldy5nZXRJbnQxNihlLHQpfX0se2tleTpcImdldEludDMyXCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOnRoaXMubGU7cmV0dXJuIHRoaXMuZGF0YVZpZXcuZ2V0SW50MzIoZSx0KX19LHtrZXk6XCJnZXRVaW50MTZcIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06dGhpcy5sZTtyZXR1cm4gdGhpcy5kYXRhVmlldy5nZXRVaW50MTYoZSx0KX19LHtrZXk6XCJnZXRVaW50MzJcIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06dGhpcy5sZTtyZXR1cm4gdGhpcy5kYXRhVmlldy5nZXRVaW50MzIoZSx0KX19LHtrZXk6XCJnZXRGbG9hdDMyXCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOnRoaXMubGU7cmV0dXJuIHRoaXMuZGF0YVZpZXcuZ2V0RmxvYXQzMihlLHQpfX0se2tleTpcImdldEZsb2F0NjRcIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06dGhpcy5sZTtyZXR1cm4gdGhpcy5kYXRhVmlldy5nZXRGbG9hdDY0KGUsdCl9fSx7a2V5OlwiZ2V0RmxvYXRcIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06dGhpcy5sZTtyZXR1cm4gdGhpcy5kYXRhVmlldy5nZXRGbG9hdDMyKGUsdCl9fSx7a2V5OlwiZ2V0RG91YmxlXCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOnRoaXMubGU7cmV0dXJuIHRoaXMuZGF0YVZpZXcuZ2V0RmxvYXQ2NChlLHQpfX0se2tleTpcImdldFVpbnRCeXRlc1wiLHZhbHVlOmZ1bmN0aW9uKGUsdCxuKXtzd2l0Y2godCl7Y2FzZSAxOnJldHVybiB0aGlzLmdldFVpbnQ4KGUsbik7Y2FzZSAyOnJldHVybiB0aGlzLmdldFVpbnQxNihlLG4pO2Nhc2UgNDpyZXR1cm4gdGhpcy5nZXRVaW50MzIoZSxuKTtjYXNlIDg6cmV0dXJuIHRoaXMuZ2V0VWludDY0JiZ0aGlzLmdldFVpbnQ2NChlLG4pfX19LHtrZXk6XCJnZXRVaW50XCIsdmFsdWU6ZnVuY3Rpb24oZSx0LG4pe3N3aXRjaCh0KXtjYXNlIDg6cmV0dXJuIHRoaXMuZ2V0VWludDgoZSxuKTtjYXNlIDE2OnJldHVybiB0aGlzLmdldFVpbnQxNihlLG4pO2Nhc2UgMzI6cmV0dXJuIHRoaXMuZ2V0VWludDMyKGUsbik7Y2FzZSA2NDpyZXR1cm4gdGhpcy5nZXRVaW50NjQmJnRoaXMuZ2V0VWludDY0KGUsbil9fX0se2tleTpcInRvU3RyaW5nXCIsdmFsdWU6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuZGF0YVZpZXcudG9TdHJpbmcoZSx0aGlzLmNvbnN0cnVjdG9yLm5hbWUpfX0se2tleTpcImVuc3VyZUNodW5rXCIsdmFsdWU6ZnVuY3Rpb24oKXt9fV0sW3trZXk6XCJmcm9tXCIsdmFsdWU6ZnVuY3Rpb24odCxuKXtyZXR1cm4gdCBpbnN0YW5jZW9mIHRoaXMmJnQubGU9PT1uP3Q6bmV3IGUodCx2b2lkIDAsdm9pZCAwLG4pfX1dKSxlfSgpO2Z1bmN0aW9uIFIoZSx0KXtMKFwiXCIuY29uY2F0KGUsXCIgJ1wiKS5jb25jYXQodCxcIicgd2FzIG5vdCBsb2FkZWQsIHRyeSB1c2luZyBmdWxsIGJ1aWxkIG9mIGV4aWZyLlwiKSl9dmFyIE49ZnVuY3Rpb24oZSl7YShpLGUpO3ZhciBuPWQoaSk7ZnVuY3Rpb24gaShlKXt2YXIgcjtyZXR1cm4gdCh0aGlzLGkpLChyPW4uY2FsbCh0aGlzKSkua2luZD1lLHJ9cmV0dXJuIHIoaSxbe2tleTpcImdldFwiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMuaGFzKGUpfHxSKHRoaXMua2luZCxlKSx0JiYoZSBpbiB0fHxmdW5jdGlvbihlLHQpe0woXCJVbmtub3duIFwiLmNvbmNhdChlLFwiICdcIikuY29uY2F0KHQsXCInLlwiKSl9KHRoaXMua2luZCxlKSx0W2VdLmVuYWJsZWR8fFIodGhpcy5raW5kLGUpKSx2KHMoaS5wcm90b3R5cGUpLFwiZ2V0XCIsdGhpcykuY2FsbCh0aGlzLGUpfX0se2tleTpcImtleUxpc3RcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiBtKHRoaXMua2V5cygpKX19XSksaX0oYyhQKSksTT1uZXcgTihcImZpbGUgcGFyc2VyXCIpLFc9bmV3IE4oXCJzZWdtZW50IHBhcnNlclwiKSxLPW5ldyBOKFwiZmlsZSByZWFkZXJcIik7ZnVuY3Rpb24gSChlKXtyZXR1cm4gZnVuY3Rpb24oKXtmb3IodmFyIHQ9W10sbj0wO248YXJndW1lbnRzLmxlbmd0aDtuKyspdFtuXT1hcmd1bWVudHNbbl07dHJ5e3JldHVybiBQcm9taXNlLnJlc29sdmUoZS5hcHBseSh0aGlzLHQpKX1jYXRjaChlKXtyZXR1cm4gUHJvbWlzZS5yZWplY3QoZSl9fX1mdW5jdGlvbiBYKGUsdCxuKXtyZXR1cm4gbj90P3QoZSk6ZTooZSYmZS50aGVufHwoZT1Qcm9taXNlLnJlc29sdmUoZSkpLHQ/ZS50aGVuKHQpOmUpfXZhciBZPUgoKGZ1bmN0aW9uKGUpe3JldHVybiBuZXcgUHJvbWlzZSgoZnVuY3Rpb24odCxuKXt2YXIgcj1uZXcgRmlsZVJlYWRlcjtyLm9ubG9hZGVuZD1mdW5jdGlvbigpe3JldHVybiB0KHIucmVzdWx0fHxuZXcgQXJyYXlCdWZmZXIpfSxyLm9uZXJyb3I9bixyLnJlYWRBc0FycmF5QnVmZmVyKGUpfSkpfSkpLEc9SCgoZnVuY3Rpb24oZSl7cmV0dXJuIHcoZSkudGhlbigoZnVuY3Rpb24oZSl7cmV0dXJuIGUuYXJyYXlCdWZmZXIoKX0pKX0pKSxKPUgoKGZ1bmN0aW9uKGUsdCl7cmV0dXJuIFgodChlKSwoZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBEKGUpfSkpfSkpLHE9SCgoZnVuY3Rpb24oZSx0LG4pe3ZhciByPW5ldyhLLmdldChuKSkoZSx0KTtyZXR1cm4gWChyLnJlYWQoKSwoZnVuY3Rpb24oKXtyZXR1cm4gcn0pKX0pKSxRPUgoKGZ1bmN0aW9uKGUsdCxuLHIpe3JldHVybiBLLmhhcyhuKT9xKGUsdCxuKTpyP0ooZSxyKTooTChcIlBhcnNlciBcIi5jb25jYXQobixcIiBpcyBub3QgbG9hZGVkXCIpKSxYKCkpfSkpLFo9XCJJbnZhbGlkIGlucHV0IGFyZ3VtZW50XCI7ZnVuY3Rpb24gJChlLHQpe3JldHVybihuPWUpLnN0YXJ0c1dpdGgoXCJkYXRhOlwiKXx8bi5sZW5ndGg+MWU0P3EoZSx0LFwiYmFzZTY0XCIpOng/UShlLHQsXCJ1cmxcIixHKTpCP3EoZSx0LFwiZnNcIik6dm9pZCBMKFopO3ZhciBufXZhciBlZT1mdW5jdGlvbihlKXthKGksZSk7dmFyIG49ZChpKTtmdW5jdGlvbiBpKCl7cmV0dXJuIHQodGhpcyxpKSxuLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1yZXR1cm4gcihpLFt7a2V5OlwidGFnS2V5c1wiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmFsbEtleXN8fCh0aGlzLmFsbEtleXM9bSh0aGlzLmtleXMoKSkpLHRoaXMuYWxsS2V5c319LHtrZXk6XCJ0YWdWYWx1ZXNcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5hbGxWYWx1ZXN8fCh0aGlzLmFsbFZhbHVlcz1tKHRoaXMudmFsdWVzKCkpKSx0aGlzLmFsbFZhbHVlc319XSksaX0oYyhQKSk7ZnVuY3Rpb24gdGUoZSx0LG4pe3ZhciByPW5ldyBlZSxpPW47QXJyYXkuaXNBcnJheShpKXx8KFwiZnVuY3Rpb25cIj09dHlwZW9mIGkuZW50cmllcyYmKGk9aS5lbnRyaWVzKCkpLGk9bShpKSk7Zm9yKHZhciBhPTA7YTxpLmxlbmd0aDthKyspe3ZhciBzPWlbYV0sdT1zWzBdLG89c1sxXTtyLnNldCh1LG8pfWlmKEFycmF5LmlzQXJyYXkodCkpe3ZhciBmPXQ7QXJyYXkuaXNBcnJheShmKXx8KFwiZnVuY3Rpb25cIj09dHlwZW9mIGYuZW50cmllcyYmKGY9Zi5lbnRyaWVzKCkpLGY9bShmKSk7Zm9yKHZhciBjPTA7YzxmLmxlbmd0aDtjKyspe3ZhciBoPWZbY107ZS5zZXQoaCxyKX19ZWxzZSBlLnNldCh0LHIpO3JldHVybiByfWZ1bmN0aW9uIG5lKGUsdCxuKXt2YXIgcixpPWUuZ2V0KHQpLGE9bjtBcnJheS5pc0FycmF5KGEpfHwoXCJmdW5jdGlvblwiPT10eXBlb2YgYS5lbnRyaWVzJiYoYT1hLmVudHJpZXMoKSksYT1tKGEpKTtmb3IodmFyIHM9MDtzPGEubGVuZ3RoO3MrKylyPWFbc10saS5zZXQoclswXSxyWzFdKX12YXIgcmU9UygpLGllPVMoKSxhZT1TKCksc2U9Mzc1MDAsdWU9Mzc1MTAsb2U9MzM3MjMsZmU9MzQ2NzUsY2U9MzQ2NjUsaGU9MzQ4NTMsbGU9NDA5NjUsZGU9W1wiY2h1bmtlZFwiLFwiZmlyc3RDaHVua1NpemVcIixcImZpcnN0Q2h1bmtTaXplTm9kZVwiLFwiZmlyc3RDaHVua1NpemVCcm93c2VyXCIsXCJjaHVua1NpemVcIixcImNodW5rTGltaXRcIl0sdmU9W1wiamZpZlwiLFwieG1wXCIsXCJpY2NcIixcImlwdGNcIixcImloZHJcIl0scGU9W1widGlmZlwiXS5jb25jYXQodmUpLHllPVtcImlmZDBcIixcImlmZDFcIixcImV4aWZcIixcImdwc1wiLFwiaW50ZXJvcFwiXSxnZT1bXS5jb25jYXQocGUseWUpLGtlPVtcIm1ha2VyTm90ZVwiLFwidXNlckNvbW1lbnRcIl0sbWU9W1widHJhbnNsYXRlS2V5c1wiLFwidHJhbnNsYXRlVmFsdWVzXCIsXCJyZXZpdmVWYWx1ZXNcIixcIm11bHRpU2VnbWVudFwiXSxiZT1bXS5jb25jYXQobWUsW1wic2FuaXRpemVcIixcIm1lcmdlT3V0cHV0XCIsXCJzaWxlbnRFcnJvcnNcIl0pLEFlPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSgpe3QodGhpcyxlKX1yZXR1cm4gcihlLFt7a2V5OlwidHJhbnNsYXRlXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudHJhbnNsYXRlS2V5c3x8dGhpcy50cmFuc2xhdGVWYWx1ZXN8fHRoaXMucmV2aXZlVmFsdWVzfX1dKSxlfSgpLHdlPWZ1bmN0aW9uKGUpe2EocyxlKTt2YXIgbj1kKHMpO2Z1bmN0aW9uIHMoZSxyLGEsdSl7dmFyIG87aWYodCh0aGlzLHMpLGkoaChvPW4uY2FsbCh0aGlzKSksXCJlbmFibGVkXCIsITEpLGkoaChvKSxcInNraXBcIixPKCkpLGkoaChvKSxcInBpY2tcIixPKCkpLGkoaChvKSxcImRlcHNcIixPKCkpLGkoaChvKSxcInRyYW5zbGF0ZUtleXNcIiwhMSksaShoKG8pLFwidHJhbnNsYXRlVmFsdWVzXCIsITEpLGkoaChvKSxcInJldml2ZVZhbHVlc1wiLCExKSxvLmtleT1lLG8uZW5hYmxlZD1yLG8ucGFyc2U9by5lbmFibGVkLG8uYXBwbHlJbmhlcml0YWJsZXModSksby5jYW5CZUZpbHRlcmVkPXllLmluY2x1ZGVzKGUpLG8uY2FuQmVGaWx0ZXJlZCYmKG8uZGljdD1yZS5nZXQoZSkpLHZvaWQgMCE9PWEpaWYoQXJyYXkuaXNBcnJheShhKSlvLnBhcnNlPW8uZW5hYmxlZD0hMCxvLmNhbkJlRmlsdGVyZWQmJmEubGVuZ3RoPjAmJm8udHJhbnNsYXRlVGFnU2V0KGEsby5waWNrKTtlbHNlIGlmKFwib2JqZWN0XCI9PXR5cGVvZiBhKXtpZihvLmVuYWJsZWQ9ITAsby5wYXJzZT0hMSE9PWEucGFyc2Usby5jYW5CZUZpbHRlcmVkKXt2YXIgZj1hLnBpY2ssYz1hLnNraXA7ZiYmZi5sZW5ndGg+MCYmby50cmFuc2xhdGVUYWdTZXQoZixvLnBpY2spLGMmJmMubGVuZ3RoPjAmJm8udHJhbnNsYXRlVGFnU2V0KGMsby5za2lwKX1vLmFwcGx5SW5oZXJpdGFibGVzKGEpfWVsc2UhMD09PWF8fCExPT09YT9vLnBhcnNlPW8uZW5hYmxlZD1hOkwoXCJJbnZhbGlkIG9wdGlvbnMgYXJndW1lbnQ6IFwiLmNvbmNhdChhKSk7cmV0dXJuIG99cmV0dXJuIHIocyxbe2tleTpcIm5lZWRlZFwiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmVuYWJsZWR8fHRoaXMuZGVwcy5zaXplPjB9fSx7a2V5OlwiYXBwbHlJbmhlcml0YWJsZXNcIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdCxuLHI9bWU7QXJyYXkuaXNBcnJheShyKXx8KFwiZnVuY3Rpb25cIj09dHlwZW9mIHIuZW50cmllcyYmKHI9ci5lbnRyaWVzKCkpLHI9bShyKSk7Zm9yKHZhciBpPTA7aTxyLmxlbmd0aDtpKyspdm9pZCAwIT09KG49ZVt0PXJbaV1dKSYmKHRoaXNbdF09bil9fSx7a2V5OlwidHJhbnNsYXRlVGFnU2V0XCIsdmFsdWU6ZnVuY3Rpb24oZSx0KXtpZih0aGlzLmRpY3Qpe3ZhciBuLHIsaT10aGlzLmRpY3QsYT1pLnRhZ0tleXMscz1pLnRhZ1ZhbHVlcyx1PWU7QXJyYXkuaXNBcnJheSh1KXx8KFwiZnVuY3Rpb25cIj09dHlwZW9mIHUuZW50cmllcyYmKHU9dS5lbnRyaWVzKCkpLHU9bSh1KSk7Zm9yKHZhciBvPTA7bzx1Lmxlbmd0aDtvKyspXCJzdHJpbmdcIj09dHlwZW9mKG49dVtvXSk/KC0xPT09KHI9cy5pbmRleE9mKG4pKSYmKHI9YS5pbmRleE9mKE51bWJlcihuKSkpLC0xIT09ciYmdC5hZGQoTnVtYmVyKGFbcl0pKSk6dC5hZGQobil9ZWxzZXt2YXIgZj1lO0FycmF5LmlzQXJyYXkoZil8fChcImZ1bmN0aW9uXCI9PXR5cGVvZiBmLmVudHJpZXMmJihmPWYuZW50cmllcygpKSxmPW0oZikpO2Zvcih2YXIgYz0wO2M8Zi5sZW5ndGg7YysrKXt2YXIgaD1mW2NdO3QuYWRkKGgpfX19fSx7a2V5OlwiZmluYWxpemVGaWx0ZXJzXCIsdmFsdWU6ZnVuY3Rpb24oKXshdGhpcy5lbmFibGVkJiZ0aGlzLmRlcHMuc2l6ZT4wPyh0aGlzLmVuYWJsZWQ9ITAsQ2UodGhpcy5waWNrLHRoaXMuZGVwcykpOnRoaXMuZW5hYmxlZCYmdGhpcy5waWNrLnNpemU+MCYmQ2UodGhpcy5waWNrLHRoaXMuZGVwcyl9fV0pLHN9KEFlKSxPZT17amZpZjohMSx0aWZmOiEwLHhtcDohMSxpY2M6ITEsaXB0YzohMSxpZmQwOiEwLGlmZDE6ITEsZXhpZjohMCxncHM6ITAsaW50ZXJvcDohMSxpaGRyOnZvaWQgMCxtYWtlck5vdGU6ITEsdXNlckNvbW1lbnQ6ITEsbXVsdGlTZWdtZW50OiExLHNraXA6W10scGljazpbXSx0cmFuc2xhdGVLZXlzOiEwLHRyYW5zbGF0ZVZhbHVlczohMCxyZXZpdmVWYWx1ZXM6ITAsc2FuaXRpemU6ITAsbWVyZ2VPdXRwdXQ6ITAsc2lsZW50RXJyb3JzOiEwLGNodW5rZWQ6ITAsZmlyc3RDaHVua1NpemU6dm9pZCAwLGZpcnN0Q2h1bmtTaXplTm9kZTo1MTIsZmlyc3RDaHVua1NpemVCcm93c2VyOjY1NTM2LGNodW5rU2l6ZTo2NTUzNixjaHVua0xpbWl0OjV9LFNlPVMoKSxQZT1mdW5jdGlvbihlKXthKGksZSk7dmFyIG49ZChpKTtmdW5jdGlvbiBpKGUpe3ZhciByO3JldHVybiB0KHRoaXMsaSkscj1uLmNhbGwodGhpcyksITA9PT1lP3Iuc2V0dXBGcm9tVHJ1ZSgpOnZvaWQgMD09PWU/ci5zZXR1cEZyb21VbmRlZmluZWQoKTpBcnJheS5pc0FycmF5KGUpP3Iuc2V0dXBGcm9tQXJyYXkoZSk6XCJvYmplY3RcIj09dHlwZW9mIGU/ci5zZXR1cEZyb21PYmplY3QoZSk6TChcIkludmFsaWQgb3B0aW9ucyBhcmd1bWVudCBcIi5jb25jYXQoZSkpLHZvaWQgMD09PXIuZmlyc3RDaHVua1NpemUmJihyLmZpcnN0Q2h1bmtTaXplPXg/ci5maXJzdENodW5rU2l6ZUJyb3dzZXI6ci5maXJzdENodW5rU2l6ZU5vZGUpLHIubWVyZ2VPdXRwdXQmJihyLmlmZDEuZW5hYmxlZD0hMSksci5maWx0ZXJOZXN0ZWRTZWdtZW50VGFncygpLHIudHJhdmVyc2VUaWZmRGVwZW5kZW5jeVRyZWUoKSxyLmNoZWNrTG9hZGVkUGx1Z2lucygpLHJ9cmV0dXJuIHIoaSxbe2tleTpcInNldHVwRnJvbVVuZGVmaW5lZFwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGUsdD1kZTtBcnJheS5pc0FycmF5KHQpfHwoXCJmdW5jdGlvblwiPT10eXBlb2YgdC5lbnRyaWVzJiYodD10LmVudHJpZXMoKSksdD1tKHQpKTtmb3IodmFyIG49MDtuPHQubGVuZ3RoO24rKyl0aGlzW2U9dFtuXV09T2VbZV07dmFyIHI9YmU7QXJyYXkuaXNBcnJheShyKXx8KFwiZnVuY3Rpb25cIj09dHlwZW9mIHIuZW50cmllcyYmKHI9ci5lbnRyaWVzKCkpLHI9bShyKSk7Zm9yKHZhciBpPTA7aTxyLmxlbmd0aDtpKyspdGhpc1tlPXJbaV1dPU9lW2VdO3ZhciBhPWtlO0FycmF5LmlzQXJyYXkoYSl8fChcImZ1bmN0aW9uXCI9PXR5cGVvZiBhLmVudHJpZXMmJihhPWEuZW50cmllcygpKSxhPW0oYSkpO2Zvcih2YXIgcz0wO3M8YS5sZW5ndGg7cysrKXRoaXNbZT1hW3NdXT1PZVtlXTt2YXIgdT1nZTtBcnJheS5pc0FycmF5KHUpfHwoXCJmdW5jdGlvblwiPT10eXBlb2YgdS5lbnRyaWVzJiYodT11LmVudHJpZXMoKSksdT1tKHUpKTtmb3IodmFyIG89MDtvPHUubGVuZ3RoO28rKyl0aGlzW2U9dVtvXV09bmV3IHdlKGUsT2VbZV0sdm9pZCAwLHRoaXMpfX0se2tleTpcInNldHVwRnJvbVRydWVcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlLHQ9ZGU7QXJyYXkuaXNBcnJheSh0KXx8KFwiZnVuY3Rpb25cIj09dHlwZW9mIHQuZW50cmllcyYmKHQ9dC5lbnRyaWVzKCkpLHQ9bSh0KSk7Zm9yKHZhciBuPTA7bjx0Lmxlbmd0aDtuKyspdGhpc1tlPXRbbl1dPU9lW2VdO3ZhciByPWJlO0FycmF5LmlzQXJyYXkocil8fChcImZ1bmN0aW9uXCI9PXR5cGVvZiByLmVudHJpZXMmJihyPXIuZW50cmllcygpKSxyPW0ocikpO2Zvcih2YXIgaT0wO2k8ci5sZW5ndGg7aSsrKXRoaXNbZT1yW2ldXT1PZVtlXTt2YXIgYT1rZTtBcnJheS5pc0FycmF5KGEpfHwoXCJmdW5jdGlvblwiPT10eXBlb2YgYS5lbnRyaWVzJiYoYT1hLmVudHJpZXMoKSksYT1tKGEpKTtmb3IodmFyIHM9MDtzPGEubGVuZ3RoO3MrKyl0aGlzW2U9YVtzXV09ITA7dmFyIHU9Z2U7QXJyYXkuaXNBcnJheSh1KXx8KFwiZnVuY3Rpb25cIj09dHlwZW9mIHUuZW50cmllcyYmKHU9dS5lbnRyaWVzKCkpLHU9bSh1KSk7Zm9yKHZhciBvPTA7bzx1Lmxlbmd0aDtvKyspdGhpc1tlPXVbb11dPW5ldyB3ZShlLCEwLHZvaWQgMCx0aGlzKX19LHtrZXk6XCJzZXR1cEZyb21BcnJheVwiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0LG49ZGU7QXJyYXkuaXNBcnJheShuKXx8KFwiZnVuY3Rpb25cIj09dHlwZW9mIG4uZW50cmllcyYmKG49bi5lbnRyaWVzKCkpLG49bShuKSk7Zm9yKHZhciByPTA7cjxuLmxlbmd0aDtyKyspdGhpc1t0PW5bcl1dPU9lW3RdO3ZhciBpPWJlO0FycmF5LmlzQXJyYXkoaSl8fChcImZ1bmN0aW9uXCI9PXR5cGVvZiBpLmVudHJpZXMmJihpPWkuZW50cmllcygpKSxpPW0oaSkpO2Zvcih2YXIgYT0wO2E8aS5sZW5ndGg7YSsrKXRoaXNbdD1pW2FdXT1PZVt0XTt2YXIgcz1rZTtBcnJheS5pc0FycmF5KHMpfHwoXCJmdW5jdGlvblwiPT10eXBlb2Ygcy5lbnRyaWVzJiYocz1zLmVudHJpZXMoKSkscz1tKHMpKTtmb3IodmFyIHU9MDt1PHMubGVuZ3RoO3UrKyl0aGlzW3Q9c1t1XV09T2VbdF07dmFyIG89Z2U7QXJyYXkuaXNBcnJheShvKXx8KFwiZnVuY3Rpb25cIj09dHlwZW9mIG8uZW50cmllcyYmKG89by5lbnRyaWVzKCkpLG89bShvKSk7Zm9yKHZhciBmPTA7ZjxvLmxlbmd0aDtmKyspdGhpc1t0PW9bZl1dPW5ldyB3ZSh0LCExLHZvaWQgMCx0aGlzKTt0aGlzLnNldHVwR2xvYmFsRmlsdGVycyhlLHZvaWQgMCx5ZSl9fSx7a2V5Olwic2V0dXBGcm9tT2JqZWN0XCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ7eWUuaWZkMD15ZS5pZmQwfHx5ZS5pbWFnZSx5ZS5pZmQxPXllLmlmZDF8fHllLnRodW1ibmFpbCxnKHRoaXMsZSk7dmFyIG49ZGU7QXJyYXkuaXNBcnJheShuKXx8KFwiZnVuY3Rpb25cIj09dHlwZW9mIG4uZW50cmllcyYmKG49bi5lbnRyaWVzKCkpLG49bShuKSk7Zm9yKHZhciByPTA7cjxuLmxlbmd0aDtyKyspdGhpc1t0PW5bcl1dPXhlKGVbdF0sT2VbdF0pO3ZhciBpPWJlO0FycmF5LmlzQXJyYXkoaSl8fChcImZ1bmN0aW9uXCI9PXR5cGVvZiBpLmVudHJpZXMmJihpPWkuZW50cmllcygpKSxpPW0oaSkpO2Zvcih2YXIgYT0wO2E8aS5sZW5ndGg7YSsrKXRoaXNbdD1pW2FdXT14ZShlW3RdLE9lW3RdKTt2YXIgcz1rZTtBcnJheS5pc0FycmF5KHMpfHwoXCJmdW5jdGlvblwiPT10eXBlb2Ygcy5lbnRyaWVzJiYocz1zLmVudHJpZXMoKSkscz1tKHMpKTtmb3IodmFyIHU9MDt1PHMubGVuZ3RoO3UrKyl0aGlzW3Q9c1t1XV09eGUoZVt0XSxPZVt0XSk7dmFyIG89cGU7QXJyYXkuaXNBcnJheShvKXx8KFwiZnVuY3Rpb25cIj09dHlwZW9mIG8uZW50cmllcyYmKG89by5lbnRyaWVzKCkpLG89bShvKSk7Zm9yKHZhciBmPTA7ZjxvLmxlbmd0aDtmKyspdGhpc1t0PW9bZl1dPW5ldyB3ZSh0LE9lW3RdLGVbdF0sdGhpcyk7dmFyIGM9eWU7QXJyYXkuaXNBcnJheShjKXx8KFwiZnVuY3Rpb25cIj09dHlwZW9mIGMuZW50cmllcyYmKGM9Yy5lbnRyaWVzKCkpLGM9bShjKSk7Zm9yKHZhciBoPTA7aDxjLmxlbmd0aDtoKyspdGhpc1t0PWNbaF1dPW5ldyB3ZSh0LE9lW3RdLGVbdF0sdGhpcy50aWZmKTt0aGlzLnNldHVwR2xvYmFsRmlsdGVycyhlLnBpY2ssZS5za2lwLHllLGdlKSwhMD09PWUudGlmZj90aGlzLmJhdGNoRW5hYmxlV2l0aEJvb2woeWUsITApOiExPT09ZS50aWZmP3RoaXMuYmF0Y2hFbmFibGVXaXRoVXNlclZhbHVlKHllLGUpOkFycmF5LmlzQXJyYXkoZS50aWZmKT90aGlzLnNldHVwR2xvYmFsRmlsdGVycyhlLnRpZmYsdm9pZCAwLHllKTpcIm9iamVjdFwiPT10eXBlb2YgZS50aWZmJiZ0aGlzLnNldHVwR2xvYmFsRmlsdGVycyhlLnRpZmYucGljayxlLnRpZmYuc2tpcCx5ZSl9fSx7a2V5OlwiYmF0Y2hFbmFibGVXaXRoQm9vbFwiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7dmFyIG49ZTtBcnJheS5pc0FycmF5KG4pfHwoXCJmdW5jdGlvblwiPT10eXBlb2Ygbi5lbnRyaWVzJiYobj1uLmVudHJpZXMoKSksbj1tKG4pKTtmb3IodmFyIHI9MDtyPG4ubGVuZ3RoO3IrKyl7dGhpc1tuW3JdXS5lbmFibGVkPXR9fX0se2tleTpcImJhdGNoRW5hYmxlV2l0aFVzZXJWYWx1ZVwiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7dmFyIG49ZTtBcnJheS5pc0FycmF5KG4pfHwoXCJmdW5jdGlvblwiPT10eXBlb2Ygbi5lbnRyaWVzJiYobj1uLmVudHJpZXMoKSksbj1tKG4pKTtmb3IodmFyIHI9MDtyPG4ubGVuZ3RoO3IrKyl7dmFyIGk9bltyXSxhPXRbaV07dGhpc1tpXS5lbmFibGVkPSExIT09YSYmdm9pZCAwIT09YX19fSx7a2V5Olwic2V0dXBHbG9iYWxGaWx0ZXJzXCIsdmFsdWU6ZnVuY3Rpb24oZSx0LG4pe3ZhciByPWFyZ3VtZW50cy5sZW5ndGg+MyYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpuO2lmKGUmJmUubGVuZ3RoKXt2YXIgaT1yO0FycmF5LmlzQXJyYXkoaSl8fChcImZ1bmN0aW9uXCI9PXR5cGVvZiBpLmVudHJpZXMmJihpPWkuZW50cmllcygpKSxpPW0oaSkpO2Zvcih2YXIgYT0wO2E8aS5sZW5ndGg7YSsrKXt2YXIgcz1pW2FdO3RoaXNbc10uZW5hYmxlZD0hMX12YXIgdT1VZShlLG4pLG89dTtBcnJheS5pc0FycmF5KG8pfHwoXCJmdW5jdGlvblwiPT10eXBlb2Ygby5lbnRyaWVzJiYobz1vLmVudHJpZXMoKSksbz1tKG8pKTtmb3IodmFyIGY9MDtmPG8ubGVuZ3RoO2YrKyl7dmFyIGM9b1tmXSxoPWNbMF0sbD1jWzFdO0NlKHRoaXNbaF0ucGljayxsKSx0aGlzW2hdLmVuYWJsZWQ9ITB9fWVsc2UgaWYodCYmdC5sZW5ndGgpe3ZhciBkPVVlKHQsbiksdj1kO0FycmF5LmlzQXJyYXkodil8fChcImZ1bmN0aW9uXCI9PXR5cGVvZiB2LmVudHJpZXMmJih2PXYuZW50cmllcygpKSx2PW0odikpO2Zvcih2YXIgcD0wO3A8di5sZW5ndGg7cCsrKXt2YXIgeT12W3BdLGc9eVswXSxrPXlbMV07Q2UodGhpc1tnXS5za2lwLGspfX19fSx7a2V5OlwiZmlsdGVyTmVzdGVkU2VnbWVudFRhZ3NcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXMuaWZkMCx0PXRoaXMuZXhpZixuPXRoaXMueG1wLHI9dGhpcy5pcHRjLGk9dGhpcy5pY2M7dGhpcy5tYWtlck5vdGU/dC5kZXBzLmFkZChzZSk6dC5za2lwLmFkZChzZSksdGhpcy51c2VyQ29tbWVudD90LmRlcHMuYWRkKHVlKTp0LnNraXAuYWRkKHVlKSxuLmVuYWJsZWR8fGUuc2tpcC5hZGQoNzAwKSxyLmVuYWJsZWR8fGUuc2tpcC5hZGQob2UpLGkuZW5hYmxlZHx8ZS5za2lwLmFkZChmZSl9fSx7a2V5OlwidHJhdmVyc2VUaWZmRGVwZW5kZW5jeVRyZWVcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXMsdD10aGlzLmlmZDAsbj10aGlzLmV4aWYscj10aGlzLmdwczt0aGlzLmludGVyb3AubmVlZGVkJiYobi5kZXBzLmFkZChsZSksdC5kZXBzLmFkZChsZSkpLG4ubmVlZGVkJiZ0LmRlcHMuYWRkKGNlKSxyLm5lZWRlZCYmdC5kZXBzLmFkZChoZSksdGhpcy50aWZmLmVuYWJsZWQ9eWUuc29tZSgoZnVuY3Rpb24odCl7cmV0dXJuITA9PT1lW3RdLmVuYWJsZWR9KSl8fHRoaXMubWFrZXJOb3RlfHx0aGlzLnVzZXJDb21tZW50O3ZhciBpPXllO0FycmF5LmlzQXJyYXkoaSl8fChcImZ1bmN0aW9uXCI9PXR5cGVvZiBpLmVudHJpZXMmJihpPWkuZW50cmllcygpKSxpPW0oaSkpO2Zvcih2YXIgYT0wO2E8aS5sZW5ndGg7YSsrKXt0aGlzW2lbYV1dLmZpbmFsaXplRmlsdGVycygpfX19LHtrZXk6XCJvbmx5VGlmZlwiLGdldDpmdW5jdGlvbigpe3ZhciBlPXRoaXM7cmV0dXJuIXZlLm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuIGVbdF0uZW5hYmxlZH0pKS5zb21lKChmdW5jdGlvbihlKXtyZXR1cm4hMD09PWV9KSkmJnRoaXMudGlmZi5lbmFibGVkfX0se2tleTpcImNoZWNrTG9hZGVkUGx1Z2luc1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9cGU7QXJyYXkuaXNBcnJheShlKXx8KFwiZnVuY3Rpb25cIj09dHlwZW9mIGUuZW50cmllcyYmKGU9ZS5lbnRyaWVzKCkpLGU9bShlKSk7Zm9yKHZhciB0PTA7dDxlLmxlbmd0aDt0Kyspe3ZhciBuPWVbdF07dGhpc1tuXS5lbmFibGVkJiYhVy5oYXMobikmJlIoXCJzZWdtZW50IHBhcnNlclwiLG4pfX19XSxbe2tleTpcInVzZUNhY2hlZFwiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PVNlLmdldChlKTtyZXR1cm4gdm9pZCAwIT09dHx8KHQ9bmV3IHRoaXMoZSksU2Uuc2V0KGUsdCkpLHR9fV0pLGl9KEFlKTtmdW5jdGlvbiBVZShlLHQpe3ZhciBuLHIsaSxhPVtdLHM9dDtBcnJheS5pc0FycmF5KHMpfHwoXCJmdW5jdGlvblwiPT10eXBlb2Ygcy5lbnRyaWVzJiYocz1zLmVudHJpZXMoKSkscz1tKHMpKTtmb3IodmFyIHU9MDt1PHMubGVuZ3RoO3UrKyl7cj1zW3VdLG49W107dmFyIG89cmUuZ2V0KHIpO0FycmF5LmlzQXJyYXkobyl8fChcImZ1bmN0aW9uXCI9PXR5cGVvZiBvLmVudHJpZXMmJihvPW8uZW50cmllcygpKSxvPW0obykpO2Zvcih2YXIgZj0wO2Y8by5sZW5ndGg7ZisrKWk9b1tmXSwoZS5pbmNsdWRlcyhpWzBdKXx8ZS5pbmNsdWRlcyhpWzFdKSkmJm4ucHVzaChpWzBdKTtuLmxlbmd0aCYmYS5wdXNoKFtyLG5dKX1yZXR1cm4gYX1mdW5jdGlvbiB4ZShlLHQpe3JldHVybiB2b2lkIDAhPT1lP2U6dm9pZCAwIT09dD90OnZvaWQgMH1mdW5jdGlvbiBDZShlLHQpe3ZhciBuPXQ7QXJyYXkuaXNBcnJheShuKXx8KFwiZnVuY3Rpb25cIj09dHlwZW9mIG4uZW50cmllcyYmKG49bi5lbnRyaWVzKCkpLG49bShuKSk7Zm9yKHZhciByPTA7cjxuLmxlbmd0aDtyKyspe3ZhciBpPW5bcl07ZS5hZGQoaSl9fWZ1bmN0aW9uIEJlKGUsdCxuKXtyZXR1cm4gbj90P3QoZSk6ZTooZSYmZS50aGVufHwoZT1Qcm9taXNlLnJlc29sdmUoZSkpLHQ/ZS50aGVuKHQpOmUpfWZ1bmN0aW9uIGplKCl7fWZ1bmN0aW9uIF9lKGUsdCl7aWYoIXQpcmV0dXJuIGUmJmUudGhlbj9lLnRoZW4oamUpOlByb21pc2UucmVzb2x2ZSgpfWZ1bmN0aW9uIFZlKGUsdCl7dmFyIG49ZSgpO3JldHVybiBuJiZuLnRoZW4/bi50aGVuKHQpOnQobil9aShQZSxcImRlZmF1bHRcIixPZSk7dmFyIEllPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShuKXt0KHRoaXMsZSksaSh0aGlzLFwicGFyc2Vyc1wiLHt9KSx0aGlzLm9wdGlvbnM9UGUudXNlQ2FjaGVkKG4pfXJldHVybiByKGUsW3trZXk6XCJzZXR1cFwiLHZhbHVlOmZ1bmN0aW9uKCl7aWYoIXRoaXMuZmlsZVBhcnNlcil7dmFyIGU9dGhpcy5maWxlLHQ9ZS5nZXRVaW50MTYoMCksbj1NO0FycmF5LmlzQXJyYXkobil8fChcImZ1bmN0aW9uXCI9PXR5cGVvZiBuLmVudHJpZXMmJihuPW4uZW50cmllcygpKSxuPW0obikpO2Zvcih2YXIgcj0wO3I8bi5sZW5ndGg7cisrKXt2YXIgaT1uW3JdLGE9aVswXSxzPWlbMV07aWYocy5jYW5IYW5kbGUoZSx0KSlyZXR1cm4gdGhpcy5maWxlUGFyc2VyPW5ldyBzKHRoaXMub3B0aW9ucyx0aGlzLmZpbGUsdGhpcy5wYXJzZXJzKSxlW2FdPSEwfUwoXCJVbmtub3duIGZpbGUgZm9ybWF0XCIpfX19LHtrZXk6XCJyZWFkXCIsdmFsdWU6ZnVuY3Rpb24oZSl7dHJ5e3ZhciB0PXRoaXM7cmV0dXJuIEJlKGZ1bmN0aW9uKGUsdCl7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIGU/JChlLHQpOngmJiFDJiZlIGluc3RhbmNlb2YgSFRNTEltYWdlRWxlbWVudD8kKGUuc3JjLHQpOmUgaW5zdGFuY2VvZiBVaW50OEFycmF5fHxlIGluc3RhbmNlb2YgQXJyYXlCdWZmZXJ8fGUgaW5zdGFuY2VvZiBEYXRhVmlldz9uZXcgRChlKTp4JiZlIGluc3RhbmNlb2YgQmxvYj9RKGUsdCxcImJsb2JcIixZKTp2b2lkIEwoWil9KGUsdC5vcHRpb25zKSwoZnVuY3Rpb24oZSl7dC5maWxlPWV9KSl9Y2F0Y2goZSl7cmV0dXJuIFByb21pc2UucmVqZWN0KGUpfX19LHtrZXk6XCJwYXJzZVwiLHZhbHVlOmZ1bmN0aW9uKCl7dHJ5e3ZhciBlPXRoaXM7ZS5zZXR1cCgpO3ZhciB0PXt9LG49W107cmV0dXJuIFZlKChmdW5jdGlvbigpe3JldHVybiBlLm9wdGlvbnMuc2lsZW50RXJyb3JzP0JlKGUuZG9QYXJzZSh0LG4pLmNhdGNoKChmdW5jdGlvbihlKXtyZXR1cm4gbi5wdXNoKGUpfSkpLChmdW5jdGlvbigpe24ucHVzaC5hcHBseShuLGUuZmlsZVBhcnNlci5lcnJvcnMpfSkpOl9lKGUuZG9QYXJzZSh0LG4pKX0pLChmdW5jdGlvbigpe3JldHVybiBlLmZpbGUuY2xvc2UmJmUuZmlsZS5jbG9zZSgpLGUub3B0aW9ucy5zaWxlbnRFcnJvcnMmJm4ubGVuZ3RoPjAmJih0LmVycm9ycz1uKSxJKHI9dCk/dm9pZCAwOnI7dmFyIHJ9KSl9Y2F0Y2goZSl7cmV0dXJuIFByb21pc2UucmVqZWN0KGUpfX19LHtrZXk6XCJkb1BhcnNlXCIsdmFsdWU6ZnVuY3Rpb24oZSx0KXt0cnl7dmFyIG49dGhpcztyZXR1cm4gQmUobi5maWxlUGFyc2VyLnBhcnNlKCksKGZ1bmN0aW9uKCl7dmFyIHIsaT1wKG4ucGFyc2VycykubWFwKChyPWZ1bmN0aW9uKHQpe3JldHVybiBCZSh0LnBhcnNlKCksKGZ1bmN0aW9uKG4pe3QuYXNzaWduVG9PdXRwdXQoZSxuKX0pKX0sZnVuY3Rpb24oKXtmb3IodmFyIGU9W10sdD0wO3Q8YXJndW1lbnRzLmxlbmd0aDt0KyspZVt0XT1hcmd1bWVudHNbdF07dHJ5e3JldHVybiBQcm9taXNlLnJlc29sdmUoci5hcHBseSh0aGlzLGUpKX1jYXRjaChlKXtyZXR1cm4gUHJvbWlzZS5yZWplY3QoZSl9fSkpO2lmKG4ub3B0aW9ucy5zaWxlbnRFcnJvcnMpe3ZhciBhPWZ1bmN0aW9uKGUpe3JldHVybiB0LnB1c2goZSl9O2k9aS5tYXAoKGZ1bmN0aW9uKGUpe3JldHVybiBlLmNhdGNoKGEpfSkpfXJldHVybiBfZShQcm9taXNlLmFsbChpKSl9KSl9Y2F0Y2goZSl7cmV0dXJuIFByb21pc2UucmVqZWN0KGUpfX19LHtrZXk6XCJleHRyYWN0VGh1bWJuYWlsXCIsdmFsdWU6ZnVuY3Rpb24oKXt0cnl7dmFyIGU9dGhpcztlLnNldHVwKCk7dmFyIHQsbj1lLm9wdGlvbnMscj1lLmZpbGUsaT1XLmdldChcInRpZmZcIixuKTtyZXR1cm4gVmUoKGZ1bmN0aW9uKCl7aWYoIXIudGlmZilyZXR1cm4gZnVuY3Rpb24oZSl7dmFyIHQ9ZSgpO2lmKHQmJnQudGhlbilyZXR1cm4gdC50aGVuKGplKX0oKGZ1bmN0aW9uKCl7aWYoci5qcGVnKXJldHVybiBCZShlLmZpbGVQYXJzZXIuZ2V0T3JGaW5kU2VnbWVudChcInRpZmZcIiksKGZ1bmN0aW9uKGUpe3Q9ZX0pKX0pKTt0PXtzdGFydDowLHR5cGU6XCJ0aWZmXCJ9fSksKGZ1bmN0aW9uKCl7aWYodm9pZCAwIT09dClyZXR1cm4gQmUoZS5maWxlUGFyc2VyLmVuc3VyZVNlZ21lbnRDaHVuayh0KSwoZnVuY3Rpb24odCl7cmV0dXJuIEJlKChlLnBhcnNlcnMudGlmZj1uZXcgaSh0LG4scikpLmV4dHJhY3RUaHVtYm5haWwoKSwoZnVuY3Rpb24oZSl7cmV0dXJuIHIuY2xvc2UmJnIuY2xvc2UoKSxlfSkpfSkpfSkpfWNhdGNoKGUpe3JldHVybiBQcm9taXNlLnJlamVjdChlKX19fV0pLGV9KCk7dmFyIExlLFRlPShMZT1mdW5jdGlvbihlLHQpe3ZhciBuLHIsaSxhPW5ldyBJZSh0KTtyZXR1cm4gbj1hLnJlYWQoZSkscj1mdW5jdGlvbigpe3JldHVybiBhLnBhcnNlKCl9LGk/cj9yKG4pOm46KG4mJm4udGhlbnx8KG49UHJvbWlzZS5yZXNvbHZlKG4pKSxyP24udGhlbihyKTpuKX0sZnVuY3Rpb24oKXtmb3IodmFyIGU9W10sdD0wO3Q8YXJndW1lbnRzLmxlbmd0aDt0KyspZVt0XT1hcmd1bWVudHNbdF07dHJ5e3JldHVybiBQcm9taXNlLnJlc29sdmUoTGUuYXBwbHkodGhpcyxlKSl9Y2F0Y2goZSl7cmV0dXJuIFByb21pc2UucmVqZWN0KGUpfX0pLHplPU9iamVjdC5mcmVlemUoe19fcHJvdG9fXzpudWxsLHBhcnNlOlRlLEV4aWZyOkllLGZpbGVQYXJzZXJzOk0sc2VnbWVudFBhcnNlcnM6VyxmaWxlUmVhZGVyczpLLHRhZ0tleXM6cmUsdGFnVmFsdWVzOmllLHRhZ1Jldml2ZXJzOmFlLGNyZWF0ZURpY3Rpb25hcnk6dGUsZXh0ZW5kRGljdGlvbmFyeTpuZSxmZXRjaFVybEFzQXJyYXlCdWZmZXI6RyxyZWFkQmxvYkFzQXJyYXlCdWZmZXI6WSxjaHVua2VkUHJvcHM6ZGUsb3RoZXJTZWdtZW50czp2ZSxzZWdtZW50czpwZSx0aWZmQmxvY2tzOnllLHNlZ21lbnRzQW5kQmxvY2tzOmdlLHRpZmZFeHRyYWN0YWJsZXM6a2UsaW5oZXJpdGFibGVzOm1lLGFsbEZvcm1hdHRlcnM6YmUsT3B0aW9uczpQZX0pO2Z1bmN0aW9uIEZlKCl7fXZhciBFZT1mdW5jdGlvbigpe2Z1bmN0aW9uIGUobixyLGEpe3ZhciBzPXRoaXM7dCh0aGlzLGUpLGkodGhpcyxcImVycm9yc1wiLFtdKSxpKHRoaXMsXCJlbnN1cmVTZWdtZW50Q2h1bmtcIixmdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24oKXtmb3IodmFyIHQ9W10sbj0wO248YXJndW1lbnRzLmxlbmd0aDtuKyspdFtuXT1hcmd1bWVudHNbbl07dHJ5e3JldHVybiBQcm9taXNlLnJlc29sdmUoZS5hcHBseSh0aGlzLHQpKX1jYXRjaChlKXtyZXR1cm4gUHJvbWlzZS5yZWplY3QoZSl9fX0oKGZ1bmN0aW9uKGUpe3ZhciB0LG4scixpPWUuc3RhcnQsYT1lLnNpemV8fDY1NTM2O3JldHVybiB0PWZ1bmN0aW9uKCl7aWYocy5maWxlLmNodW5rZWQpcmV0dXJuIGZ1bmN0aW9uKGUpe3ZhciB0PWUoKTtpZih0JiZ0LnRoZW4pcmV0dXJuIHQudGhlbihGZSl9KChmdW5jdGlvbigpe2lmKCFzLmZpbGUuYXZhaWxhYmxlKGksYSkpcmV0dXJuIGZ1bmN0aW9uKGUpe2lmKGUmJmUudGhlbilyZXR1cm4gZS50aGVuKEZlKX0oZnVuY3Rpb24oZSx0KXt0cnl7dmFyIG49ZSgpfWNhdGNoKGUpe3JldHVybiB0KGUpfXJldHVybiBuJiZuLnRoZW4/bi50aGVuKHZvaWQgMCx0KTpufSgoZnVuY3Rpb24oKXtyZXR1cm4gdD1zLmZpbGUucmVhZENodW5rKGksYSksbj1mdW5jdGlvbih0KXtlLmNodW5rPXR9LHI/bj9uKHQpOnQ6KHQmJnQudGhlbnx8KHQ9UHJvbWlzZS5yZXNvbHZlKHQpKSxuP3QudGhlbihuKTp0KTt2YXIgdCxuLHJ9KSwoZnVuY3Rpb24odCl7TChcIkNvdWxkbid0IHJlYWQgc2VnbWVudDogXCIuY29uY2F0KEpTT04uc3RyaW5naWZ5KGUpLFwiLiBcIikuY29uY2F0KHQubWVzc2FnZSkpfSkpKTtlLmNodW5rPXMuZmlsZS5zdWJhcnJheShpLGEpfSkpO3MuZmlsZS5ieXRlTGVuZ3RoPmkrYT9lLmNodW5rPXMuZmlsZS5zdWJhcnJheShpLGEpOnZvaWQgMD09PWUuc2l6ZT9lLmNodW5rPXMuZmlsZS5zdWJhcnJheShpKTpMKFwiU2VnbWVudCB1bnJlYWNoYWJsZTogXCIrSlNPTi5zdHJpbmdpZnkoZSkpfSxuPWZ1bmN0aW9uKCl7cmV0dXJuIGUuY2h1bmt9LChyPXQoKSkmJnIudGhlbj9yLnRoZW4obik6bihyKX0pKSksdGhpcy5leHRlbmRPcHRpb25zJiZ0aGlzLmV4dGVuZE9wdGlvbnMobiksdGhpcy5vcHRpb25zPW4sdGhpcy5maWxlPXIsdGhpcy5wYXJzZXJzPWF9cmV0dXJuIHIoZSxbe2tleTpcImluamVjdFNlZ21lbnRcIix2YWx1ZTpmdW5jdGlvbihlLHQpe3RoaXMub3B0aW9uc1tlXS5lbmFibGVkJiZ0aGlzLmNyZWF0ZVBhcnNlcihlLHQpfX0se2tleTpcImNyZWF0ZVBhcnNlclwiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7dmFyIG49bmV3KFcuZ2V0KGUpKSh0LHRoaXMub3B0aW9ucyx0aGlzLmZpbGUpO3JldHVybiB0aGlzLnBhcnNlcnNbZV09bn19LHtrZXk6XCJjcmVhdGVQYXJzZXJzXCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9ZTtBcnJheS5pc0FycmF5KHQpfHwoXCJmdW5jdGlvblwiPT10eXBlb2YgdC5lbnRyaWVzJiYodD10LmVudHJpZXMoKSksdD1tKHQpKTtmb3IodmFyIG49MDtuPHQubGVuZ3RoO24rKyl7dmFyIHI9dFtuXSxpPXIudHlwZSxhPXIuY2h1bmsscz10aGlzLm9wdGlvbnNbaV07aWYocyYmcy5lbmFibGVkKXt2YXIgdT10aGlzLnBhcnNlcnNbaV07dSYmdS5hcHBlbmR8fHV8fHRoaXMuY3JlYXRlUGFyc2VyKGksYSl9fX19LHtrZXk6XCJyZWFkU2VnbWVudHNcIix2YWx1ZTpmdW5jdGlvbihlKXt0cnl7dmFyIHQ9ZS5tYXAodGhpcy5lbnN1cmVTZWdtZW50Q2h1bmspO3JldHVybiBmdW5jdGlvbihlLHQpe2lmKCF0KXJldHVybiBlJiZlLnRoZW4/ZS50aGVuKEZlKTpQcm9taXNlLnJlc29sdmUoKX0oUHJvbWlzZS5hbGwodCkpfWNhdGNoKGUpe3JldHVybiBQcm9taXNlLnJlamVjdChlKX19fV0pLGV9KCksRGU9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKG4pe3ZhciByPXRoaXMsYT1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06e30scz1hcmd1bWVudHMubGVuZ3RoPjI/YXJndW1lbnRzWzJdOnZvaWQgMDt0KHRoaXMsZSksaSh0aGlzLFwiZXJyb3JzXCIsW10pLGkodGhpcyxcInJhd1wiLFMoKSksaSh0aGlzLFwiaGFuZGxlRXJyb3JcIiwoZnVuY3Rpb24oZSl7aWYoIXIub3B0aW9ucy5zaWxlbnRFcnJvcnMpdGhyb3cgZTtyLmVycm9ycy5wdXNoKGUubWVzc2FnZSl9KSksdGhpcy5jaHVuaz10aGlzLm5vcm1hbGl6ZUlucHV0KG4pLHRoaXMuZmlsZT1zLHRoaXMudHlwZT10aGlzLmNvbnN0cnVjdG9yLnR5cGUsdGhpcy5nbG9iYWxPcHRpb25zPXRoaXMub3B0aW9ucz1hLHRoaXMubG9jYWxPcHRpb25zPWFbdGhpcy50eXBlXSx0aGlzLmNhblRyYW5zbGF0ZT10aGlzLmxvY2FsT3B0aW9ucyYmdGhpcy5sb2NhbE9wdGlvbnMudHJhbnNsYXRlfXJldHVybiByKGUsW3trZXk6XCJub3JtYWxpemVJbnB1dFwiLHZhbHVlOmZ1bmN0aW9uKGUpe3JldHVybiBlIGluc3RhbmNlb2YgRD9lOm5ldyBEKGUpfX0se2tleTpcInRyYW5zbGF0ZVwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5jYW5UcmFuc2xhdGUmJih0aGlzLnRyYW5zbGF0ZWQ9dGhpcy50cmFuc2xhdGVCbG9jayh0aGlzLnJhdyx0aGlzLnR5cGUpKX19LHtrZXk6XCJvdXRwdXRcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50cmFuc2xhdGVkP3RoaXMudHJhbnNsYXRlZDp0aGlzLnJhdz9rKHRoaXMucmF3KTp2b2lkIDB9fSx7a2V5OlwidHJhbnNsYXRlQmxvY2tcIix2YWx1ZTpmdW5jdGlvbihlLHQpe3ZhciBuPWFlLmdldCh0KSxyPWllLmdldCh0KSxpPXJlLmdldCh0KSxhPXRoaXMub3B0aW9uc1t0XSxzPWEucmV2aXZlVmFsdWVzJiYhIW4sdT1hLnRyYW5zbGF0ZVZhbHVlcyYmISFyLG89YS50cmFuc2xhdGVLZXlzJiYhIWksZj17fSxjPWU7QXJyYXkuaXNBcnJheShjKXx8KFwiZnVuY3Rpb25cIj09dHlwZW9mIGMuZW50cmllcyYmKGM9Yy5lbnRyaWVzKCkpLGM9bShjKSk7Zm9yKHZhciBoPTA7aDxjLmxlbmd0aDtoKyspe3ZhciBsPWNbaF0sZD1sWzBdLHY9bFsxXTtzJiZuLmhhcyhkKT92PW4uZ2V0KGQpKHYpOnUmJnIuaGFzKGQpJiYodj10aGlzLnRyYW5zbGF0ZVZhbHVlKHYsci5nZXQoZCkpKSxvJiZpLmhhcyhkKSYmKGQ9aS5nZXQoZCl8fGQpLGZbZF09dn1yZXR1cm4gZn19LHtrZXk6XCJ0cmFuc2xhdGVWYWx1ZVwiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRbZV18fHQuREVGQVVMVHx8ZX19LHtrZXk6XCJhc3NpZ25Ub091dHB1dFwiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7dGhpcy5hc3NpZ25PYmplY3RUb091dHB1dChlLHRoaXMuY29uc3RydWN0b3IudHlwZSx0KX19LHtrZXk6XCJhc3NpZ25PYmplY3RUb091dHB1dFwiLHZhbHVlOmZ1bmN0aW9uKGUsdCxuKXtpZih0aGlzLmdsb2JhbE9wdGlvbnMubWVyZ2VPdXRwdXQpcmV0dXJuIGcoZSxuKTtlW3RdP2coZVt0XSxuKTplW3RdPW59fV0sW3trZXk6XCJmaW5kUG9zaXRpb25cIix2YWx1ZTpmdW5jdGlvbihlLHQpe3ZhciBuPWUuZ2V0VWludDE2KHQrMikrMixyPVwiZnVuY3Rpb25cIj09dHlwZW9mIHRoaXMuaGVhZGVyTGVuZ3RoP3RoaXMuaGVhZGVyTGVuZ3RoKGUsdCxuKTp0aGlzLmhlYWRlckxlbmd0aCxpPXQrcixhPW4tcjtyZXR1cm57b2Zmc2V0OnQsbGVuZ3RoOm4saGVhZGVyTGVuZ3RoOnIsc3RhcnQ6aSxzaXplOmEsZW5kOmkrYX19fSx7a2V5OlwicGFyc2VcIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06e30sbj1uZXcgUGUoaSh7fSx0aGlzLnR5cGUsdCkpLHI9bmV3IHRoaXMoZSxuKTtyZXR1cm4gci5wYXJzZSgpfX1dKSxlfSgpO2Z1bmN0aW9uIFJlKGUsdCxuKXtyZXR1cm4gbj90P3QoZSk6ZTooZSYmZS50aGVufHwoZT1Qcm9taXNlLnJlc29sdmUoZSkpLHQ/ZS50aGVuKHQpOmUpfWkoRGUsXCJoZWFkZXJMZW5ndGhcIiw0KSxpKERlLFwidHlwZVwiLHZvaWQgMCksaShEZSxcIm11bHRpU2VnbWVudFwiLCExKSxpKERlLFwiY2FuSGFuZGxlXCIsKGZ1bmN0aW9uKCl7cmV0dXJuITF9KSk7ZnVuY3Rpb24gTmUoKXt9ZnVuY3Rpb24gTWUoZSx0KXtpZighdClyZXR1cm4gZSYmZS50aGVuP2UudGhlbihOZSk6UHJvbWlzZS5yZXNvbHZlKCl9ZnVuY3Rpb24gV2UoZSl7dmFyIHQ9ZSgpO2lmKHQmJnQudGhlbilyZXR1cm4gdC50aGVuKE5lKX1mdW5jdGlvbiBLZShlLHQpe3ZhciBuPWUoKTtyZXR1cm4gbiYmbi50aGVuP24udGhlbih0KTp0KG4pfWZ1bmN0aW9uIEhlKGUsdCxuKXtpZighZS5zKXtpZihuIGluc3RhbmNlb2YgWGUpe2lmKCFuLnMpcmV0dXJuIHZvaWQobi5vPUhlLmJpbmQobnVsbCxlLHQpKTsxJnQmJih0PW4ucyksbj1uLnZ9aWYobiYmbi50aGVuKXJldHVybiB2b2lkIG4udGhlbihIZS5iaW5kKG51bGwsZSx0KSxIZS5iaW5kKG51bGwsZSwyKSk7ZS5zPXQsZS52PW47dmFyIHI9ZS5vO3ImJnIoZSl9fXZhciBYZT1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoKXt9cmV0dXJuIGUucHJvdG90eXBlLnRoZW49ZnVuY3Rpb24odCxuKXt2YXIgcj1uZXcgZSxpPXRoaXMucztpZihpKXt2YXIgYT0xJmk/dDpuO2lmKGEpe3RyeXtIZShyLDEsYSh0aGlzLnYpKX1jYXRjaChlKXtIZShyLDIsZSl9cmV0dXJuIHJ9cmV0dXJuIHRoaXN9cmV0dXJuIHRoaXMubz1mdW5jdGlvbihlKXt0cnl7dmFyIGk9ZS52OzEmZS5zP0hlKHIsMSx0P3QoaSk6aSk6bj9IZShyLDEsbihpKSk6SGUociwyLGkpfWNhdGNoKGUpe0hlKHIsMixlKX19LHJ9LGV9KCk7ZnVuY3Rpb24gWWUoZSl7cmV0dXJuIGUgaW5zdGFuY2VvZiBYZSYmMSZlLnN9ZnVuY3Rpb24gR2UoZSx0LG4pe2Zvcih2YXIgcjs7KXt2YXIgaT1lKCk7aWYoWWUoaSkmJihpPWkudiksIWkpcmV0dXJuIGE7aWYoaS50aGVuKXtyPTA7YnJlYWt9dmFyIGE9bigpO2lmKGEmJmEudGhlbil7aWYoIVllKGEpKXtyPTE7YnJlYWt9YT1hLnN9aWYodCl7dmFyIHM9dCgpO2lmKHMmJnMudGhlbiYmIVllKHMpKXtyPTI7YnJlYWt9fX12YXIgdT1uZXcgWGUsbz1IZS5iaW5kKG51bGwsdSwyKTtyZXR1cm4oMD09PXI/aS50aGVuKGMpOjE9PT1yP2EudGhlbihmKTpzLnRoZW4oaCkpLnRoZW4odm9pZCAwLG8pLHU7ZnVuY3Rpb24gZihyKXthPXI7ZG97aWYodCYmKHM9dCgpKSYmcy50aGVuJiYhWWUocykpcmV0dXJuIHZvaWQgcy50aGVuKGgpLnRoZW4odm9pZCAwLG8pO2lmKCEoaT1lKCkpfHxZZShpKSYmIWkudilyZXR1cm4gdm9pZCBIZSh1LDEsYSk7aWYoaS50aGVuKXJldHVybiB2b2lkIGkudGhlbihjKS50aGVuKHZvaWQgMCxvKTtZZShhPW4oKSkmJihhPWEudil9d2hpbGUoIWF8fCFhLnRoZW4pO2EudGhlbihmKS50aGVuKHZvaWQgMCxvKX1mdW5jdGlvbiBjKGUpe2U/KGE9bigpKSYmYS50aGVuP2EudGhlbihmKS50aGVuKHZvaWQgMCxvKTpmKGEpOkhlKHUsMSxhKX1mdW5jdGlvbiBoKCl7KGk9ZSgpKT9pLnRoZW4/aS50aGVuKGMpLnRoZW4odm9pZCAwLG8pOmMoaSk6SGUodSwxLGEpfX1mdW5jdGlvbiBKZShlKXtyZXR1cm4gMTkyPT09ZXx8MTk0PT09ZXx8MTk2PT09ZXx8MjE5PT09ZXx8MjIxPT09ZXx8MjE4PT09ZXx8MjU0PT09ZX1mdW5jdGlvbiBxZShlKXtyZXR1cm4gZT49MjI0JiZlPD0yMzl9ZnVuY3Rpb24gUWUoZSx0LG4pe3ZhciByPVc7QXJyYXkuaXNBcnJheShyKXx8KFwiZnVuY3Rpb25cIj09dHlwZW9mIHIuZW50cmllcyYmKHI9ci5lbnRyaWVzKCkpLHI9bShyKSk7Zm9yKHZhciBpPTA7aTxyLmxlbmd0aDtpKyspe3ZhciBhPXJbaV0scz1hWzBdO2lmKGFbMV0uY2FuSGFuZGxlKGUsdCxuKSlyZXR1cm4gc319dmFyIFplPWZ1bmN0aW9uKGUpe2EocyxlKTt2YXIgbj1kKHMpO2Z1bmN0aW9uIHMoKXt2YXIgZTt0KHRoaXMscyk7Zm9yKHZhciByPWFyZ3VtZW50cy5sZW5ndGgsYT1uZXcgQXJyYXkociksdT0wO3U8cjt1KyspYVt1XT1hcmd1bWVudHNbdV07cmV0dXJuIGkoaChlPW4uY2FsbC5hcHBseShuLFt0aGlzXS5jb25jYXQoYSkpKSxcImFwcFNlZ21lbnRzXCIsW10pLGkoaChlKSxcImpwZWdTZWdtZW50c1wiLFtdKSxpKGgoZSksXCJ1bmtub3duU2VnbWVudHNcIixbXSksZX1yZXR1cm4gcihzLFt7a2V5OlwicGFyc2VcIix2YWx1ZTpmdW5jdGlvbigpe3RyeXt2YXIgZT10aGlzO3JldHVybiBSZShlLmZpbmRBcHBTZWdtZW50cygpLChmdW5jdGlvbigpe3JldHVybiBSZShlLnJlYWRTZWdtZW50cyhlLmFwcFNlZ21lbnRzKSwoZnVuY3Rpb24oKXtlLm1lcmdlTXVsdGlTZWdtZW50cygpLGUuY3JlYXRlUGFyc2VycyhlLm1lcmdlZEFwcFNlZ21lbnRzfHxlLmFwcFNlZ21lbnRzKX0pKX0pKX1jYXRjaChlKXtyZXR1cm4gUHJvbWlzZS5yZWplY3QoZSl9fX0se2tleTpcInNldHVwU2VnbWVudEZpbmRlckFyZ3NcIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzOyEwPT09ZT8odGhpcy5maW5kQWxsPSEwLHRoaXMud2FudGVkPU8oVy5rZXlMaXN0KCkpKTooZT12b2lkIDA9PT1lP1cua2V5TGlzdCgpLmZpbHRlcigoZnVuY3Rpb24oZSl7cmV0dXJuIHQub3B0aW9uc1tlXS5lbmFibGVkfSkpOmUuZmlsdGVyKChmdW5jdGlvbihlKXtyZXR1cm4gdC5vcHRpb25zW2VdLmVuYWJsZWQmJlcuaGFzKGUpfSkpLHRoaXMuZmluZEFsbD0hMSx0aGlzLnJlbWFpbmluZz1PKGUpLHRoaXMud2FudGVkPU8oZSkpLHRoaXMudW5maW5pc2hlZE11bHRpU2VnbWVudD0hMX19LHtrZXk6XCJmaW5kQXBwU2VnbWVudHNcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTowLHQ9YXJndW1lbnRzLmxlbmd0aD4xP2FyZ3VtZW50c1sxXTp2b2lkIDA7dHJ5e3ZhciBuPXRoaXM7bi5zZXR1cFNlZ21lbnRGaW5kZXJBcmdzKHQpO3ZhciByPW4uZmlsZSxpPW4uZmluZEFsbCxhPW4ud2FudGVkLHM9bi5yZW1haW5pbmc7cmV0dXJuIEtlKChmdW5jdGlvbigpe2lmKCFpJiZuLmZpbGUuY2h1bmtlZClyZXR1cm4gaT1tKGEpLnNvbWUoKGZ1bmN0aW9uKGUpe3ZhciB0PVcuZ2V0KGUpLHI9bi5vcHRpb25zW2VdO3JldHVybiB0Lm11bHRpU2VnbWVudCYmci5tdWx0aVNlZ21lbnR9KSksV2UoKGZ1bmN0aW9uKCl7aWYoaSlyZXR1cm4gTWUobi5maWxlLnJlYWRXaG9sZSgpKX0pKX0pLChmdW5jdGlvbigpe3ZhciB0PSExO2lmKGU9bi5maW5kQXBwU2VnbWVudHNJblJhbmdlKGUsci5ieXRlTGVuZ3RoKSwhbi5vcHRpb25zLm9ubHlUaWZmKXJldHVybiBmdW5jdGlvbigpe2lmKHIuY2h1bmtlZCl7dmFyIGk9ITE7cmV0dXJuIEdlKChmdW5jdGlvbigpe3JldHVybiF0JiZzLnNpemU+MCYmIWkmJighIXIuY2FuUmVhZE5leHRDaHVua3x8ISFuLnVuZmluaXNoZWRNdWx0aVNlZ21lbnQpfSksdm9pZCAwLChmdW5jdGlvbigpe3ZhciBhPXIubmV4dENodW5rT2Zmc2V0LHM9bi5hcHBTZWdtZW50cy5zb21lKChmdW5jdGlvbihlKXtyZXR1cm4hbi5maWxlLmF2YWlsYWJsZShlLm9mZnNldHx8ZS5zdGFydCxlLmxlbmd0aHx8ZS5zaXplKX0pKTtyZXR1cm4gS2UoKGZ1bmN0aW9uKCl7cmV0dXJuIGU+YSYmIXM/UmUoci5yZWFkTmV4dENodW5rKGUpLChmdW5jdGlvbihlKXtpPSFlfSkpOlJlKHIucmVhZE5leHRDaHVuayhhKSwoZnVuY3Rpb24oZSl7aT0hZX0pKX0pLChmdW5jdGlvbigpe3ZvaWQgMD09PShlPW4uZmluZEFwcFNlZ21lbnRzSW5SYW5nZShlLHIuYnl0ZUxlbmd0aCkpJiYodD0hMCl9KSl9KSl9fSgpfSkpfWNhdGNoKGUpe3JldHVybiBQcm9taXNlLnJlamVjdChlKX19fSx7a2V5OlwiZmluZEFwcFNlZ21lbnRzSW5SYW5nZVwiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7dC09Mjtmb3IodmFyIG4scixpLGEscyx1LG89dGhpcy5maWxlLGY9dGhpcy5maW5kQWxsLGM9dGhpcy53YW50ZWQsaD10aGlzLnJlbWFpbmluZyxsPXRoaXMub3B0aW9ucztlPHQ7ZSsrKWlmKDI1NT09PW8uZ2V0VWludDgoZSkpaWYocWUobj1vLmdldFVpbnQ4KGUrMSkpKXtpZihyPW8uZ2V0VWludDE2KGUrMiksKGk9UWUobyxlLHIpKSYmYy5oYXMoaSkmJihzPShhPVcuZ2V0KGkpKS5maW5kUG9zaXRpb24obyxlKSx1PWxbaV0scy50eXBlPWksdGhpcy5hcHBTZWdtZW50cy5wdXNoKHMpLCFmJiYoYS5tdWx0aVNlZ21lbnQmJnUubXVsdGlTZWdtZW50Pyh0aGlzLnVuZmluaXNoZWRNdWx0aVNlZ21lbnQ9cy5jaHVua051bWJlcjxzLmNodW5rQ291bnQsdGhpcy51bmZpbmlzaGVkTXVsdGlTZWdtZW50fHxoLmRlbGV0ZShpKSk6aC5kZWxldGUoaSksMD09PWguc2l6ZSkpKWJyZWFrO2wucmVjb3JkVW5rbm93blNlZ21lbnRzJiYoKHM9RGUuZmluZFBvc2l0aW9uKG8sZSkpLm1hcmtlcj1uLHRoaXMudW5rbm93blNlZ21lbnRzLnB1c2gocykpLGUrPXIrMX1lbHNlIGlmKEplKG4pKXtpZihyPW8uZ2V0VWludDE2KGUrMiksMjE4PT09biYmITEhPT1sLnN0b3BBZnRlclNvcylyZXR1cm47bC5yZWNvcmRKcGVnU2VnbWVudHMmJnRoaXMuanBlZ1NlZ21lbnRzLnB1c2goe29mZnNldDplLGxlbmd0aDpyLG1hcmtlcjpufSksZSs9cisxfXJldHVybiBlfX0se2tleTpcIm1lcmdlTXVsdGlTZWdtZW50c1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcztpZih0aGlzLmFwcFNlZ21lbnRzLnNvbWUoKGZ1bmN0aW9uKGUpe3JldHVybiBlLm11bHRpU2VnbWVudH0pKSl7dmFyIHQ9ZnVuY3Rpb24oZSx0KXtmb3IodmFyIG4scixpLGE9UygpLHM9MDtzPGUubGVuZ3RoO3MrKylyPShuPWVbc10pW3RdLGEuaGFzKHIpP2k9YS5nZXQocik6YS5zZXQocixpPVtdKSxpLnB1c2gobik7cmV0dXJuIG0oYSl9KHRoaXMuYXBwU2VnbWVudHMsXCJ0eXBlXCIpO3RoaXMubWVyZ2VkQXBwU2VnbWVudHM9dC5tYXAoKGZ1bmN0aW9uKHQpe3ZhciBuPXRbMF0scj10WzFdLGk9Vy5nZXQobixlLm9wdGlvbnMpO3JldHVybiBpLmhhbmRsZU11bHRpU2VnbWVudHM/e3R5cGU6bixjaHVuazppLmhhbmRsZU11bHRpU2VnbWVudHMocil9OnJbMF19KSl9fX0se2tleTpcImdldFNlZ21lbnRcIix2YWx1ZTpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5hcHBTZWdtZW50cy5maW5kKChmdW5jdGlvbih0KXtyZXR1cm4gdC50eXBlPT09ZX0pKX19LHtrZXk6XCJnZXRPckZpbmRTZWdtZW50XCIsdmFsdWU6ZnVuY3Rpb24oZSl7dHJ5e3ZhciB0PXRoaXMsbj10LmdldFNlZ21lbnQoZSk7cmV0dXJuIEtlKChmdW5jdGlvbigpe2lmKHZvaWQgMD09PW4pcmV0dXJuIFJlKHQuZmluZEFwcFNlZ21lbnRzKDAsW2VdKSwoZnVuY3Rpb24oKXtuPXQuZ2V0U2VnbWVudChlKX0pKX0pLChmdW5jdGlvbigpe3JldHVybiBufSkpfWNhdGNoKGUpe3JldHVybiBQcm9taXNlLnJlamVjdChlKX19fV0sW3trZXk6XCJjYW5IYW5kbGVcIix2YWx1ZTpmdW5jdGlvbihlLHQpe3JldHVybiA2NTQ5Nj09PXR9fV0pLHN9KEVlKTtmdW5jdGlvbiAkZSgpe31pKFplLFwidHlwZVwiLFwianBlZ1wiKSxNLnNldChcImpwZWdcIixaZSk7ZnVuY3Rpb24gZXQoZSx0KXtpZighdClyZXR1cm4gZSYmZS50aGVuP2UudGhlbigkZSk6UHJvbWlzZS5yZXNvbHZlKCl9ZnVuY3Rpb24gdHQoZSx0KXt2YXIgbj1lKCk7cmV0dXJuIG4mJm4udGhlbj9uLnRoZW4odCk6dChuKX12YXIgbnQ9W3ZvaWQgMCwxLDEsMiw0LDgsMSwxLDIsNCw4LDQsOCw0XTt2YXIgcnQ9ZnVuY3Rpb24oZSl7YShpLGUpO3ZhciBuPWQoaSk7ZnVuY3Rpb24gaSgpe3JldHVybiB0KHRoaXMsaSksbi5hcHBseSh0aGlzLGFyZ3VtZW50cyl9cmV0dXJuIHIoaSxbe2tleTpcInBhcnNlXCIsdmFsdWU6ZnVuY3Rpb24oKXt0cnl7dmFyIGU9dGhpcztlLnBhcnNlSGVhZGVyKCk7dmFyIHQ9ZS5vcHRpb25zO3JldHVybiB0dCgoZnVuY3Rpb24oKXtpZih0LmlmZDAuZW5hYmxlZClyZXR1cm4gZXQoZS5wYXJzZUlmZDBCbG9jaygpKX0pLChmdW5jdGlvbigpe3JldHVybiB0dCgoZnVuY3Rpb24oKXtpZih0LmV4aWYuZW5hYmxlZClyZXR1cm4gZXQoZS5zYWZlUGFyc2UoXCJwYXJzZUV4aWZCbG9ja1wiKSl9KSwoZnVuY3Rpb24oKXtyZXR1cm4gdHQoKGZ1bmN0aW9uKCl7aWYodC5ncHMuZW5hYmxlZClyZXR1cm4gZXQoZS5zYWZlUGFyc2UoXCJwYXJzZUdwc0Jsb2NrXCIpKX0pLChmdW5jdGlvbigpe3JldHVybiB0dCgoZnVuY3Rpb24oKXtpZih0LmludGVyb3AuZW5hYmxlZClyZXR1cm4gZXQoZS5zYWZlUGFyc2UoXCJwYXJzZUludGVyb3BCbG9ja1wiKSl9KSwoZnVuY3Rpb24oKXtyZXR1cm4gdHQoKGZ1bmN0aW9uKCl7aWYodC5pZmQxLmVuYWJsZWQpcmV0dXJuIGV0KGUuc2FmZVBhcnNlKFwicGFyc2VUaHVtYm5haWxCbG9ja1wiKSl9KSwoZnVuY3Rpb24oKXtyZXR1cm4gZS5jcmVhdGVPdXRwdXQoKX0pKX0pKX0pKX0pKX0pKX1jYXRjaChlKXtyZXR1cm4gUHJvbWlzZS5yZWplY3QoZSl9fX0se2tleTpcInNhZmVQYXJzZVwiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXNbZV0oKTtyZXR1cm4gdm9pZCAwIT09dC5jYXRjaCYmKHQ9dC5jYXRjaCh0aGlzLmhhbmRsZUVycm9yKSksdH19LHtrZXk6XCJmaW5kSWZkME9mZnNldFwiLHZhbHVlOmZ1bmN0aW9uKCl7dm9pZCAwPT09dGhpcy5pZmQwT2Zmc2V0JiYodGhpcy5pZmQwT2Zmc2V0PXRoaXMuY2h1bmsuZ2V0VWludDMyKDQpKX19LHtrZXk6XCJmaW5kSWZkMU9mZnNldFwiLHZhbHVlOmZ1bmN0aW9uKCl7aWYodm9pZCAwPT09dGhpcy5pZmQxT2Zmc2V0KXt0aGlzLmZpbmRJZmQwT2Zmc2V0KCk7dmFyIGU9dGhpcy5jaHVuay5nZXRVaW50MTYodGhpcy5pZmQwT2Zmc2V0KSx0PXRoaXMuaWZkME9mZnNldCsyKzEyKmU7dGhpcy5pZmQxT2Zmc2V0PXRoaXMuY2h1bmsuZ2V0VWludDMyKHQpfX19LHtrZXk6XCJwYXJzZUJsb2NrXCIsdmFsdWU6ZnVuY3Rpb24oZSx0KXt2YXIgbj1TKCk7cmV0dXJuIHRoaXNbdF09bix0aGlzLnBhcnNlVGFncyhlLHQsbiksbn19LHtrZXk6XCJwYXJzZUlmZDBCbG9ja1wiLHZhbHVlOmZ1bmN0aW9uKCl7dHJ5e3ZhciBlPXRoaXM7aWYoZS5pZmQwKXJldHVybjt2YXIgdD1lLmZpbGU7cmV0dXJuIGUuZmluZElmZDBPZmZzZXQoKSxlLmlmZDBPZmZzZXQ8OCYmTChcIk1hbGZvcm1lZCBFWElGIGRhdGFcIiksIXQuY2h1bmtlZCYmZS5pZmQwT2Zmc2V0PnQuYnl0ZUxlbmd0aCYmTChcIklGRDAgb2Zmc2V0IHBvaW50cyB0byBvdXRzaWRlIG9mIGZpbGUuXFxudGhpcy5pZmQwT2Zmc2V0OiBcIi5jb25jYXQoZS5pZmQwT2Zmc2V0LFwiLCBmaWxlLmJ5dGVMZW5ndGg6IFwiKS5jb25jYXQodC5ieXRlTGVuZ3RoKSksdHQoKGZ1bmN0aW9uKCl7aWYodC50aWZmKXJldHVybiBldCh0LmVuc3VyZUNodW5rKGUuaWZkME9mZnNldCxUKGUub3B0aW9ucykpKX0pLChmdW5jdGlvbigpe3ZhciB0PWUucGFyc2VCbG9jayhlLmlmZDBPZmZzZXQsXCJpZmQwXCIpO2lmKDAhPT10LnNpemUpcmV0dXJuIGUuZXhpZk9mZnNldD10LmdldChjZSksZS5pbnRlcm9wT2Zmc2V0PXQuZ2V0KGxlKSxlLmdwc09mZnNldD10LmdldChoZSksZS54bXA9dC5nZXQoNzAwKSxlLmlwdGM9dC5nZXQob2UpLGUuaWNjPXQuZ2V0KGZlKSxlLm9wdGlvbnMuc2FuaXRpemUmJih0LmRlbGV0ZShjZSksdC5kZWxldGUobGUpLHQuZGVsZXRlKGhlKSx0LmRlbGV0ZSg3MDApLHQuZGVsZXRlKG9lKSx0LmRlbGV0ZShmZSkpLHR9KSl9Y2F0Y2goZSl7cmV0dXJuIFByb21pc2UucmVqZWN0KGUpfX19LHtrZXk6XCJwYXJzZUV4aWZCbG9ja1wiLHZhbHVlOmZ1bmN0aW9uKCl7dHJ5e3ZhciBlPXRoaXM7aWYoZS5leGlmKXJldHVybjtyZXR1cm4gdHQoKGZ1bmN0aW9uKCl7aWYoIWUuaWZkMClyZXR1cm4gZXQoZS5wYXJzZUlmZDBCbG9jaygpKX0pLChmdW5jdGlvbigpe2lmKHZvaWQgMCE9PWUuZXhpZk9mZnNldClyZXR1cm4gdHQoKGZ1bmN0aW9uKCl7aWYoZS5maWxlLnRpZmYpcmV0dXJuIGV0KGUuZmlsZS5lbnN1cmVDaHVuayhlLmV4aWZPZmZzZXQsVChlLm9wdGlvbnMpKSl9KSwoZnVuY3Rpb24oKXt2YXIgdD1lLnBhcnNlQmxvY2soZS5leGlmT2Zmc2V0LFwiZXhpZlwiKTtyZXR1cm4gZS5pbnRlcm9wT2Zmc2V0fHwoZS5pbnRlcm9wT2Zmc2V0PXQuZ2V0KGxlKSksZS5tYWtlck5vdGU9dC5nZXQoc2UpLGUudXNlckNvbW1lbnQ9dC5nZXQodWUpLGUub3B0aW9ucy5zYW5pdGl6ZSYmKHQuZGVsZXRlKGxlKSx0LmRlbGV0ZShzZSksdC5kZWxldGUodWUpKSxlLnVucGFjayh0LDQxNzI4KSxlLnVucGFjayh0LDQxNzI5KSx0fSkpfSkpfWNhdGNoKGUpe3JldHVybiBQcm9taXNlLnJlamVjdChlKX19fSx7a2V5OlwidW5wYWNrXCIsdmFsdWU6ZnVuY3Rpb24oZSx0KXt2YXIgbj1lLmdldCh0KTtuJiYxPT09bi5sZW5ndGgmJmUuc2V0KHQsblswXSl9fSx7a2V5OlwicGFyc2VHcHNCbG9ja1wiLHZhbHVlOmZ1bmN0aW9uKCl7dHJ5e3ZhciBlPXRoaXM7aWYoZS5ncHMpcmV0dXJuO3JldHVybiB0dCgoZnVuY3Rpb24oKXtpZighZS5pZmQwKXJldHVybiBldChlLnBhcnNlSWZkMEJsb2NrKCkpfSksKGZ1bmN0aW9uKCl7aWYodm9pZCAwIT09ZS5ncHNPZmZzZXQpe3ZhciB0PWUucGFyc2VCbG9jayhlLmdwc09mZnNldCxcImdwc1wiKTtyZXR1cm4gdCYmdC5oYXMoMikmJnQuaGFzKDQpJiYodC5zZXQoXCJsYXRpdHVkZVwiLGl0LmFwcGx5KHZvaWQgMCx0LmdldCgyKS5jb25jYXQoW3QuZ2V0KDEpXSkpKSx0LnNldChcImxvbmdpdHVkZVwiLGl0LmFwcGx5KHZvaWQgMCx0LmdldCg0KS5jb25jYXQoW3QuZ2V0KDMpXSkpKSksdH19KSl9Y2F0Y2goZSl7cmV0dXJuIFByb21pc2UucmVqZWN0KGUpfX19LHtrZXk6XCJwYXJzZUludGVyb3BCbG9ja1wiLHZhbHVlOmZ1bmN0aW9uKCl7dHJ5e3ZhciBlPXRoaXM7aWYoZS5pbnRlcm9wKXJldHVybjtyZXR1cm4gdHQoKGZ1bmN0aW9uKCl7aWYoIWUuaWZkMClyZXR1cm4gZXQoZS5wYXJzZUlmZDBCbG9jaygpKX0pLChmdW5jdGlvbigpe3JldHVybiB0dCgoZnVuY3Rpb24oKXtpZih2b2lkIDA9PT1lLmludGVyb3BPZmZzZXQmJiFlLmV4aWYpcmV0dXJuIGV0KGUucGFyc2VFeGlmQmxvY2soKSl9KSwoZnVuY3Rpb24oKXtpZih2b2lkIDAhPT1lLmludGVyb3BPZmZzZXQpcmV0dXJuIGUucGFyc2VCbG9jayhlLmludGVyb3BPZmZzZXQsXCJpbnRlcm9wXCIpfSkpfSkpfWNhdGNoKGUpe3JldHVybiBQcm9taXNlLnJlamVjdChlKX19fSx7a2V5OlwicGFyc2VUaHVtYm5haWxCbG9ja1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0mJmFyZ3VtZW50c1swXTt0cnl7dmFyIHQ9dGhpcztpZih0LmlmZDF8fHQuaWZkMVBhcnNlZClyZXR1cm47aWYodC5vcHRpb25zLm1lcmdlT3V0cHV0JiYhZSlyZXR1cm47cmV0dXJuIHQuZmluZElmZDFPZmZzZXQoKSx0LmlmZDFPZmZzZXQ+MCYmKHQucGFyc2VCbG9jayh0LmlmZDFPZmZzZXQsXCJpZmQxXCIpLHQuaWZkMVBhcnNlZD0hMCksdC5pZmQxfWNhdGNoKGUpe3JldHVybiBQcm9taXNlLnJlamVjdChlKX19fSx7a2V5OlwiZXh0cmFjdFRodW1ibmFpbFwiLHZhbHVlOmZ1bmN0aW9uKCl7dHJ5e3ZhciBlPXRoaXM7cmV0dXJuIGUuaGVhZGVyUGFyc2VkfHxlLnBhcnNlSGVhZGVyKCksdHQoKGZ1bmN0aW9uKCl7aWYoIWUuaWZkMVBhcnNlZClyZXR1cm4gZXQoZS5wYXJzZVRodW1ibmFpbEJsb2NrKCEwKSl9KSwoZnVuY3Rpb24oKXtpZih2b2lkIDAhPT1lLmlmZDEpe3ZhciB0PWUuaWZkMS5nZXQoNTEzKSxuPWUuaWZkMS5nZXQoNTE0KTtyZXR1cm4gZS5jaHVuay5nZXRVaW50OEFycmF5KHQsbil9fSkpfWNhdGNoKGUpe3JldHVybiBQcm9taXNlLnJlamVjdChlKX19fSx7a2V5OlwiaW1hZ2VcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5pZmQwfX0se2tleTpcInRodW1ibmFpbFwiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmlmZDF9fSx7a2V5OlwiY3JlYXRlT3V0cHV0XCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZSx0LG4scj17fSxpPXllO0FycmF5LmlzQXJyYXkoaSl8fChcImZ1bmN0aW9uXCI9PXR5cGVvZiBpLmVudHJpZXMmJihpPWkuZW50cmllcygpKSxpPW0oaSkpO2Zvcih2YXIgYT0wO2E8aS5sZW5ndGg7YSsrKWlmKCFJKGU9dGhpc1t0PWlbYV1dKSlpZihuPXRoaXMuY2FuVHJhbnNsYXRlP3RoaXMudHJhbnNsYXRlQmxvY2soZSx0KTprKGUpLHRoaXMub3B0aW9ucy5tZXJnZU91dHB1dCl7aWYoXCJpZmQxXCI9PT10KWNvbnRpbnVlO2cocixuKX1lbHNlIHJbdF09bjtyZXR1cm4gdGhpcy5tYWtlck5vdGUmJihyLm1ha2VyTm90ZT10aGlzLm1ha2VyTm90ZSksdGhpcy51c2VyQ29tbWVudCYmKHIudXNlckNvbW1lbnQ9dGhpcy51c2VyQ29tbWVudCkscn19LHtrZXk6XCJhc3NpZ25Ub091dHB1dFwiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7aWYodGhpcy5nbG9iYWxPcHRpb25zLm1lcmdlT3V0cHV0KWcoZSx0KTtlbHNle3ZhciBuPXkodCk7QXJyYXkuaXNBcnJheShuKXx8KFwiZnVuY3Rpb25cIj09dHlwZW9mIG4uZW50cmllcyYmKG49bi5lbnRyaWVzKCkpLG49bShuKSk7Zm9yKHZhciByPTA7cjxuLmxlbmd0aDtyKyspe3ZhciBpPW5bcl0sYT1pWzBdLHM9aVsxXTt0aGlzLmFzc2lnbk9iamVjdFRvT3V0cHV0KGUsYSxzKX19fX1dLFt7a2V5OlwiY2FuSGFuZGxlXCIsdmFsdWU6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gMjI1PT09ZS5nZXRVaW50OCh0KzEpJiYxMTY1NTE5MjA2PT09ZS5nZXRVaW50MzIodCs0KSYmMD09PWUuZ2V0VWludDE2KHQrOCl9fV0pLGl9KGZ1bmN0aW9uKGUpe2EoaSxlKTt2YXIgbj1kKGkpO2Z1bmN0aW9uIGkoKXtyZXR1cm4gdCh0aGlzLGkpLG4uYXBwbHkodGhpcyxhcmd1bWVudHMpfXJldHVybiByKGksW3trZXk6XCJwYXJzZUhlYWRlclwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5jaHVuay5nZXRVaW50MTYoKTsxODc2MT09PWU/dGhpcy5sZT0hMDoxOTc4OT09PWUmJih0aGlzLmxlPSExKSx0aGlzLmNodW5rLmxlPXRoaXMubGUsdGhpcy5oZWFkZXJQYXJzZWQ9ITB9fSx7a2V5OlwicGFyc2VUYWdzXCIsdmFsdWU6ZnVuY3Rpb24oZSx0KXt2YXIgbj1hcmd1bWVudHMubGVuZ3RoPjImJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06UygpLHI9dGhpcy5vcHRpb25zW3RdLGk9ci5waWNrLGE9ci5za2lwLHM9KGk9TyhpKSkuc2l6ZT4wLHU9MD09PWEuc2l6ZSxvPXRoaXMuY2h1bmsuZ2V0VWludDE2KGUpO2UrPTI7Zm9yKHZhciBmPTA7ZjxvO2YrKyl7dmFyIGM9dGhpcy5jaHVuay5nZXRVaW50MTYoZSk7aWYocyl7aWYoaS5oYXMoYykmJihuLnNldChjLHRoaXMucGFyc2VUYWcoZSxjLHQpKSxpLmRlbGV0ZShjKSwwPT09aS5zaXplKSlicmVha31lbHNlIXUmJmEuaGFzKGMpfHxuLnNldChjLHRoaXMucGFyc2VUYWcoZSxjLHQpKTtlKz0xMn1yZXR1cm4gbn19LHtrZXk6XCJwYXJzZVRhZ1wiLHZhbHVlOmZ1bmN0aW9uKGUsdCxuKXt2YXIgcixpPXRoaXMuY2h1bmssYT1pLmdldFVpbnQxNihlKzIpLHM9aS5nZXRVaW50MzIoZSs0KSx1PW50W2FdO2lmKHUqczw9ND9lKz04OmU9aS5nZXRVaW50MzIoZSs4KSwoYTwxfHxhPjEzKSYmTChcIkludmFsaWQgVElGRiB2YWx1ZSB0eXBlLiBibG9jazogXCIuY29uY2F0KG4udG9VcHBlckNhc2UoKSxcIiwgdGFnOiBcIikuY29uY2F0KHQudG9TdHJpbmcoMTYpLFwiLCB0eXBlOiBcIikuY29uY2F0KGEsXCIsIG9mZnNldCBcIikuY29uY2F0KGUpKSxlPmkuYnl0ZUxlbmd0aCYmTChcIkludmFsaWQgVElGRiB2YWx1ZSBvZmZzZXQuIGJsb2NrOiBcIi5jb25jYXQobi50b1VwcGVyQ2FzZSgpLFwiLCB0YWc6IFwiKS5jb25jYXQodC50b1N0cmluZygxNiksXCIsIHR5cGU6IFwiKS5jb25jYXQoYSxcIiwgb2Zmc2V0IFwiKS5jb25jYXQoZSxcIiBpcyBvdXRzaWRlIG9mIGNodW5rIHNpemUgXCIpLmNvbmNhdChpLmJ5dGVMZW5ndGgpKSwxPT09YSlyZXR1cm4gaS5nZXRVaW50OEFycmF5KGUscyk7aWYoMj09PWEpcmV0dXJuXCJcIj09PShyPWZ1bmN0aW9uKGUpe2Zvcig7ZS5lbmRzV2l0aChcIlxcMFwiKTspZT1lLnNsaWNlKDAsLTEpO3JldHVybiBlfShyPWkuZ2V0U3RyaW5nKGUscykpLnRyaW0oKSk/dm9pZCAwOnI7aWYoNz09PWEpcmV0dXJuIGkuZ2V0VWludDhBcnJheShlLHMpO2lmKDE9PT1zKXJldHVybiB0aGlzLnBhcnNlVGFnVmFsdWUoYSxlKTtmb3IodmFyIG89bmV3KGZ1bmN0aW9uKGUpe3N3aXRjaChlKXtjYXNlIDE6cmV0dXJuIFVpbnQ4QXJyYXk7Y2FzZSAzOnJldHVybiBVaW50MTZBcnJheTtjYXNlIDQ6cmV0dXJuIFVpbnQzMkFycmF5O2Nhc2UgNTpyZXR1cm4gQXJyYXk7Y2FzZSA2OnJldHVybiBJbnQ4QXJyYXk7Y2FzZSA4OnJldHVybiBJbnQxNkFycmF5O2Nhc2UgOTpyZXR1cm4gSW50MzJBcnJheTtjYXNlIDEwOnJldHVybiBBcnJheTtjYXNlIDExOnJldHVybiBGbG9hdDMyQXJyYXk7Y2FzZSAxMjpyZXR1cm4gRmxvYXQ2NEFycmF5O2RlZmF1bHQ6cmV0dXJuIEFycmF5fX0oYSkpKHMpLGY9dSxjPTA7YzxzO2MrKylvW2NdPXRoaXMucGFyc2VUYWdWYWx1ZShhLGUpLGUrPWY7cmV0dXJuIG99fSx7a2V5OlwicGFyc2VUYWdWYWx1ZVwiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7dmFyIG49dGhpcy5jaHVuaztzd2l0Y2goZSl7Y2FzZSAxOnJldHVybiBuLmdldFVpbnQ4KHQpO2Nhc2UgMzpyZXR1cm4gbi5nZXRVaW50MTYodCk7Y2FzZSA0OnJldHVybiBuLmdldFVpbnQzMih0KTtjYXNlIDU6cmV0dXJuIG4uZ2V0VWludDMyKHQpL24uZ2V0VWludDMyKHQrNCk7Y2FzZSA2OnJldHVybiBuLmdldEludDgodCk7Y2FzZSA4OnJldHVybiBuLmdldEludDE2KHQpO2Nhc2UgOTpyZXR1cm4gbi5nZXRJbnQzMih0KTtjYXNlIDEwOnJldHVybiBuLmdldEludDMyKHQpL24uZ2V0SW50MzIodCs0KTtjYXNlIDExOnJldHVybiBuLmdldEZsb2F0KHQpO2Nhc2UgMTI6cmV0dXJuIG4uZ2V0RG91YmxlKHQpO2Nhc2UgMTM6cmV0dXJuIG4uZ2V0VWludDMyKHQpO2RlZmF1bHQ6TChcIkludmFsaWQgdGlmZiB0eXBlIFwiLmNvbmNhdChlKSl9fX1dKSxpfShEZSkpO2Z1bmN0aW9uIGl0KGUsdCxuLHIpe3ZhciBpPWUrdC82MCtuLzM2MDA7cmV0dXJuXCJTXCIhPT1yJiZcIldcIiE9PXJ8fChpKj0tMSksaX1pKHJ0LFwidHlwZVwiLFwidGlmZlwiKSxpKHJ0LFwiaGVhZGVyTGVuZ3RoXCIsMTApLFcuc2V0KFwidGlmZlwiLHJ0KTt2YXIgYXQ9T2JqZWN0LmZyZWV6ZSh7X19wcm90b19fOm51bGwsZGVmYXVsdDp6ZSxFeGlmcjpJZSxmaWxlUGFyc2VyczpNLHNlZ21lbnRQYXJzZXJzOlcsZmlsZVJlYWRlcnM6Syx0YWdLZXlzOnJlLHRhZ1ZhbHVlczppZSx0YWdSZXZpdmVyczphZSxjcmVhdGVEaWN0aW9uYXJ5OnRlLGV4dGVuZERpY3Rpb25hcnk6bmUsZmV0Y2hVcmxBc0FycmF5QnVmZmVyOkcscmVhZEJsb2JBc0FycmF5QnVmZmVyOlksY2h1bmtlZFByb3BzOmRlLG90aGVyU2VnbWVudHM6dmUsc2VnbWVudHM6cGUsdGlmZkJsb2Nrczp5ZSxzZWdtZW50c0FuZEJsb2NrczpnZSx0aWZmRXh0cmFjdGFibGVzOmtlLGluaGVyaXRhYmxlczptZSxhbGxGb3JtYXR0ZXJzOmJlLE9wdGlvbnM6UGUscGFyc2U6VGV9KTtmdW5jdGlvbiBzdChlLHQsbil7cmV0dXJuIG4/dD90KGUpOmU6KGUmJmUudGhlbnx8KGU9UHJvbWlzZS5yZXNvbHZlKGUpKSx0P2UudGhlbih0KTplKX1mdW5jdGlvbiB1dChlKXtyZXR1cm4gZnVuY3Rpb24oKXtmb3IodmFyIHQ9W10sbj0wO248YXJndW1lbnRzLmxlbmd0aDtuKyspdFtuXT1hcmd1bWVudHNbbl07dHJ5e3JldHVybiBQcm9taXNlLnJlc29sdmUoZS5hcHBseSh0aGlzLHQpKX1jYXRjaChlKXtyZXR1cm4gUHJvbWlzZS5yZWplY3QoZSl9fX12YXIgb3Q9dXQoKGZ1bmN0aW9uKGUpe3ZhciB0PW5ldyBJZSh2dCk7cmV0dXJuIHN0KHQucmVhZChlKSwoZnVuY3Rpb24oKXtyZXR1cm4gc3QodC5wYXJzZSgpLChmdW5jdGlvbihlKXtpZihlJiZlLmlmZDApcmV0dXJuIGUuaWZkMFsyNzRdfSkpfSkpfSkpLGZ0PXV0KChmdW5jdGlvbihlKXt2YXIgdD1uZXcgSWUoZHQpO3JldHVybiBzdCh0LnJlYWQoZSksKGZ1bmN0aW9uKCl7cmV0dXJuIHN0KHQucGFyc2UoKSwoZnVuY3Rpb24oZSl7aWYoZSYmZS5ncHMpe3ZhciB0PWUuZ3BzO3JldHVybntsYXRpdHVkZTp0LmxhdGl0dWRlLGxvbmdpdHVkZTp0LmxvbmdpdHVkZX19fSkpfSkpfSkpLGN0PXV0KChmdW5jdGlvbihlKXtyZXR1cm4gc3QodGhpcy50aHVtYm5haWwoZSksKGZ1bmN0aW9uKGUpe2lmKHZvaWQgMCE9PWUpe3ZhciB0PW5ldyBCbG9iKFtlXSk7cmV0dXJuIFVSTC5jcmVhdGVPYmplY3RVUkwodCl9fSkpfSkpLGh0PXV0KChmdW5jdGlvbihlKXt2YXIgdD1uZXcgSWUocHQpO3JldHVybiBzdCh0LnJlYWQoZSksKGZ1bmN0aW9uKCl7cmV0dXJuIHN0KHQuZXh0cmFjdFRodW1ibmFpbCgpLChmdW5jdGlvbihlKXtyZXR1cm4gZSYmXz9qLmZyb20oZSk6ZX0pKX0pKX0pKSxsdD17aWZkMDohMSxpZmQxOiExLGV4aWY6ITEsZ3BzOiExLGludGVyb3A6ITEsc2FuaXRpemU6ITEscmV2aXZlVmFsdWVzOiEwLHRyYW5zbGF0ZUtleXM6ITEsdHJhbnNsYXRlVmFsdWVzOiExLG1lcmdlT3V0cHV0OiExfSxkdD1nKHt9LGx0LHtmaXJzdENodW5rU2l6ZTo0ZTQsZ3BzOlsxLDIsMyw0XX0pLHZ0PWcoe30sbHQse2ZpcnN0Q2h1bmtTaXplOjRlNCxpZmQwOlsyNzRdfSkscHQ9Zyh7fSxsdCx7dGlmZjohMSxpZmQxOiEwLG1lcmdlT3V0cHV0OiExfSkseXQ9T2JqZWN0LmZyZWV6ZSh7MTp7ZGltZW5zaW9uU3dhcHBlZDohMSxzY2FsZVg6MSxzY2FsZVk6MSxkZWc6MCxyYWQ6MH0sMjp7ZGltZW5zaW9uU3dhcHBlZDohMSxzY2FsZVg6LTEsc2NhbGVZOjEsZGVnOjAscmFkOjB9LDM6e2RpbWVuc2lvblN3YXBwZWQ6ITEsc2NhbGVYOjEsc2NhbGVZOjEsZGVnOjE4MCxyYWQ6MTgwKk1hdGguUEkvMTgwfSw0OntkaW1lbnNpb25Td2FwcGVkOiExLHNjYWxlWDotMSxzY2FsZVk6MSxkZWc6MTgwLHJhZDoxODAqTWF0aC5QSS8xODB9LDU6e2RpbWVuc2lvblN3YXBwZWQ6ITAsc2NhbGVYOjEsc2NhbGVZOi0xLGRlZzo5MCxyYWQ6OTAqTWF0aC5QSS8xODB9LDY6e2RpbWVuc2lvblN3YXBwZWQ6ITAsc2NhbGVYOjEsc2NhbGVZOjEsZGVnOjkwLHJhZDo5MCpNYXRoLlBJLzE4MH0sNzp7ZGltZW5zaW9uU3dhcHBlZDohMCxzY2FsZVg6MSxzY2FsZVk6LTEsZGVnOjI3MCxyYWQ6MjcwKk1hdGguUEkvMTgwfSw4OntkaW1lbnNpb25Td2FwcGVkOiEwLHNjYWxlWDoxLHNjYWxlWToxLGRlZzoyNzAscmFkOjI3MCpNYXRoLlBJLzE4MH19KTtpZihlLnJvdGF0ZUNhbnZhcz0hMCxlLnJvdGF0ZUNzcz0hMCxcIm9iamVjdFwiPT10eXBlb2YgbmF2aWdhdG9yKXt2YXIgZ3Q9bmF2aWdhdG9yLnVzZXJBZ2VudDtpZihndC5pbmNsdWRlcyhcImlQYWRcIil8fGd0LmluY2x1ZGVzKFwiaVBob25lXCIpKXt2YXIga3Q9Z3QubWF0Y2goL09TIChcXGQrKV8oXFxkKykvKTtpZihrdCl7dmFyIG10PWt0WzFdLGJ0PWt0WzJdLEF0PU51bWJlcihtdCkrLjEqTnVtYmVyKGJ0KTtlLnJvdGF0ZUNhbnZhcz1BdDwxMy40LGUucm90YXRlQ3NzPSExfX1lbHNlIGlmKGd0LmluY2x1ZGVzKFwiT1MgWCAxMFwiKSl7dmFyIHd0PWd0Lm1hdGNoKC9PUyBYIDEwW18uXShcXGQrKS8pWzFdO2Uucm90YXRlQ2FudmFzPWUucm90YXRlQ3NzPU51bWJlcih3dCk8MTV9aWYoZ3QuaW5jbHVkZXMoXCJDaHJvbWUvXCIpKXt2YXIgT3Q9Z3QubWF0Y2goL0Nocm9tZVxcLyhcXGQrKS8pWzFdO2Uucm90YXRlQ2FudmFzPWUucm90YXRlQ3NzPU51bWJlcihPdCk8ODF9ZWxzZSBpZihndC5pbmNsdWRlcyhcIkZpcmVmb3gvXCIpKXt2YXIgU3Q9Z3QubWF0Y2goL0ZpcmVmb3hcXC8oXFxkKykvKVsxXTtlLnJvdGF0ZUNhbnZhcz1lLnJvdGF0ZUNzcz1OdW1iZXIoU3QpPDc3fX1mdW5jdGlvbiBQdCgpe312YXIgVXQ9ZnVuY3Rpb24oZSl7YSh1LGUpO3ZhciBuPWQodSk7ZnVuY3Rpb24gdSgpe3ZhciBlO3QodGhpcyx1KTtmb3IodmFyIHI9YXJndW1lbnRzLmxlbmd0aCxhPW5ldyBBcnJheShyKSxzPTA7czxyO3MrKylhW3NdPWFyZ3VtZW50c1tzXTtyZXR1cm4gaShoKGU9bi5jYWxsLmFwcGx5KG4sW3RoaXNdLmNvbmNhdChhKSkpLFwicmFuZ2VzXCIsbmV3IHh0KSwwIT09ZS5ieXRlTGVuZ3RoJiZlLnJhbmdlcy5hZGQoMCxlLmJ5dGVMZW5ndGgpLGV9cmV0dXJuIHIodSxbe2tleTpcIl90cnlFeHRlbmRcIix2YWx1ZTpmdW5jdGlvbihlLHQsbil7aWYoMD09PWUmJjA9PT10aGlzLmJ5dGVMZW5ndGgmJm4pe3ZhciByPW5ldyBEYXRhVmlldyhuLmJ1ZmZlcnx8bixuLmJ5dGVPZmZzZXQsbi5ieXRlTGVuZ3RoKTt0aGlzLl9zd2FwRGF0YVZpZXcocil9ZWxzZXt2YXIgaT1lK3Q7aWYoaT50aGlzLmJ5dGVMZW5ndGgpe3ZhciBhPXRoaXMuX2V4dGVuZChpKS5kYXRhVmlldzt0aGlzLl9zd2FwRGF0YVZpZXcoYSl9fX19LHtrZXk6XCJfZXh0ZW5kXCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ7dD1fP2ouYWxsb2NVbnNhZmUoZSk6bmV3IFVpbnQ4QXJyYXkoZSk7dmFyIG49bmV3IERhdGFWaWV3KHQuYnVmZmVyLHQuYnl0ZU9mZnNldCx0LmJ5dGVMZW5ndGgpO3JldHVybiB0LnNldChuZXcgVWludDhBcnJheSh0aGlzLmJ1ZmZlcix0aGlzLmJ5dGVPZmZzZXQsdGhpcy5ieXRlTGVuZ3RoKSwwKSx7dWludFZpZXc6dCxkYXRhVmlldzpufX19LHtrZXk6XCJzdWJhcnJheVwiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7dmFyIG49YXJndW1lbnRzLmxlbmd0aD4yJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0mJmFyZ3VtZW50c1syXTtyZXR1cm4gdD10fHx0aGlzLl9sZW5ndGhUb0VuZChlKSxuJiZ0aGlzLl90cnlFeHRlbmQoZSx0KSx0aGlzLnJhbmdlcy5hZGQoZSx0KSx2KHModS5wcm90b3R5cGUpLFwic3ViYXJyYXlcIix0aGlzKS5jYWxsKHRoaXMsZSx0KX19LHtrZXk6XCJzZXRcIix2YWx1ZTpmdW5jdGlvbihlLHQpe3ZhciBuPWFyZ3VtZW50cy5sZW5ndGg+MiYmdm9pZCAwIT09YXJndW1lbnRzWzJdJiZhcmd1bWVudHNbMl07biYmdGhpcy5fdHJ5RXh0ZW5kKHQsZS5ieXRlTGVuZ3RoLGUpO3ZhciByPXYocyh1LnByb3RvdHlwZSksXCJzZXRcIix0aGlzKS5jYWxsKHRoaXMsZSx0KTtyZXR1cm4gdGhpcy5yYW5nZXMuYWRkKHQsci5ieXRlTGVuZ3RoKSxyfX0se2tleTpcImVuc3VyZUNodW5rXCIsdmFsdWU6ZnVuY3Rpb24oZSx0KXt0cnl7dmFyIG49dGhpcztpZighbi5jaHVua2VkKXJldHVybjtpZihuLnJhbmdlcy5hdmFpbGFibGUoZSx0KSlyZXR1cm47cmV0dXJuIGZ1bmN0aW9uKGUsdCl7aWYoIXQpcmV0dXJuIGUmJmUudGhlbj9lLnRoZW4oUHQpOlByb21pc2UucmVzb2x2ZSgpfShuLnJlYWRDaHVuayhlLHQpKX1jYXRjaChlKXtyZXR1cm4gUHJvbWlzZS5yZWplY3QoZSl9fX0se2tleTpcImF2YWlsYWJsZVwiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMucmFuZ2VzLmF2YWlsYWJsZShlLHQpfX1dKSx1fShEKSx4dD1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoKXt0KHRoaXMsZSksaSh0aGlzLFwibGlzdFwiLFtdKX1yZXR1cm4gcihlLFt7a2V5OlwibGVuZ3RoXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubGlzdC5sZW5ndGh9fSx7a2V5OlwiYWRkXCIsdmFsdWU6ZnVuY3Rpb24oZSx0KXt2YXIgbj1lK3Qscj10aGlzLmxpc3QuZmlsdGVyKChmdW5jdGlvbih0KXtyZXR1cm4gQ3QoZSx0Lm9mZnNldCxuKXx8Q3QoZSx0LmVuZCxuKX0pKTtpZihyLmxlbmd0aD4wKXtlPU1hdGgubWluLmFwcGx5KE1hdGgsW2VdLmNvbmNhdChyLm1hcCgoZnVuY3Rpb24oZSl7cmV0dXJuIGUub2Zmc2V0fSkpKSksdD0obj1NYXRoLm1heC5hcHBseShNYXRoLFtuXS5jb25jYXQoci5tYXAoKGZ1bmN0aW9uKGUpe3JldHVybiBlLmVuZH0pKSkpKS1lO3ZhciBpPXIuc2hpZnQoKTtpLm9mZnNldD1lLGkubGVuZ3RoPXQsaS5lbmQ9bix0aGlzLmxpc3Q9dGhpcy5saXN0LmZpbHRlcigoZnVuY3Rpb24oZSl7cmV0dXJuIXIuaW5jbHVkZXMoZSl9KSl9ZWxzZSB0aGlzLmxpc3QucHVzaCh7b2Zmc2V0OmUsbGVuZ3RoOnQsZW5kOm59KX19LHtrZXk6XCJhdmFpbGFibGVcIix2YWx1ZTpmdW5jdGlvbihlLHQpe3ZhciBuPWUrdDtyZXR1cm4gdGhpcy5saXN0LnNvbWUoKGZ1bmN0aW9uKHQpe3JldHVybiB0Lm9mZnNldDw9ZSYmbjw9dC5lbmR9KSl9fV0pLGV9KCk7ZnVuY3Rpb24gQ3QoZSx0LG4pe3JldHVybiBlPD10JiZ0PD1ufWZ1bmN0aW9uIEJ0KCl7fWZ1bmN0aW9uIGp0KGUsdCl7aWYoIXQpcmV0dXJuIGUmJmUudGhlbj9lLnRoZW4oQnQpOlByb21pc2UucmVzb2x2ZSgpfWZ1bmN0aW9uIF90KGUsdCxuKXtyZXR1cm4gbj90P3QoZSk6ZTooZSYmZS50aGVufHwoZT1Qcm9taXNlLnJlc29sdmUoZSkpLHQ/ZS50aGVuKHQpOmUpfXZhciBWdD1mdW5jdGlvbihlKXthKGksZSk7dmFyIG49ZChpKTtmdW5jdGlvbiBpKCl7cmV0dXJuIHQodGhpcyxpKSxuLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1yZXR1cm4gcihpLFt7a2V5OlwicmVhZFdob2xlXCIsdmFsdWU6ZnVuY3Rpb24oKXt0cnl7dmFyIGU9dGhpcztyZXR1cm4gZS5jaHVua2VkPSExLF90KFkoZS5pbnB1dCksKGZ1bmN0aW9uKHQpe2UuX3N3YXBBcnJheUJ1ZmZlcih0KX0pKX1jYXRjaChlKXtyZXR1cm4gUHJvbWlzZS5yZWplY3QoZSl9fX0se2tleTpcInJlYWRDaHVua2VkXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jaHVua2VkPSEwLHRoaXMuc2l6ZT10aGlzLmlucHV0LnNpemUsdihzKGkucHJvdG90eXBlKSxcInJlYWRDaHVua2VkXCIsdGhpcykuY2FsbCh0aGlzKX19LHtrZXk6XCJfcmVhZENodW5rXCIsdmFsdWU6ZnVuY3Rpb24oZSx0KXt0cnl7dmFyIG49dGhpcyxyPXQ/ZSt0OnZvaWQgMCxpPW4uaW5wdXQuc2xpY2UoZSxyKTtyZXR1cm4gX3QoWShpKSwoZnVuY3Rpb24odCl7cmV0dXJuIG4uc2V0KHQsZSwhMCl9KSl9Y2F0Y2goZSl7cmV0dXJuIFByb21pc2UucmVqZWN0KGUpfX19XSksaX0oZnVuY3Rpb24oZSl7YShzLGUpO3ZhciBuPWQocyk7ZnVuY3Rpb24gcyhlLHIpe3ZhciBhO3JldHVybiB0KHRoaXMscyksaShoKGE9bi5jYWxsKHRoaXMsMCkpLFwiY2h1bmtzUmVhZFwiLDApLGEuaW5wdXQ9ZSxhLm9wdGlvbnM9cixhfXJldHVybiByKHMsW3trZXk6XCJyZWFkV2hvbGVcIix2YWx1ZTpmdW5jdGlvbigpe3RyeXt2YXIgZT10aGlzO3JldHVybiBlLmNodW5rZWQ9ITEsanQoZS5yZWFkQ2h1bmsoZS5uZXh0Q2h1bmtPZmZzZXQpKX1jYXRjaChlKXtyZXR1cm4gUHJvbWlzZS5yZWplY3QoZSl9fX0se2tleTpcInJlYWRDaHVua2VkXCIsdmFsdWU6ZnVuY3Rpb24oKXt0cnl7dmFyIGU9dGhpcztyZXR1cm4gZS5jaHVua2VkPSEwLGp0KGUucmVhZENodW5rKDAsZS5vcHRpb25zLmZpcnN0Q2h1bmtTaXplKSl9Y2F0Y2goZSl7cmV0dXJuIFByb21pc2UucmVqZWN0KGUpfX19LHtrZXk6XCJyZWFkTmV4dENodW5rXCIsdmFsdWU6ZnVuY3Rpb24oZSl7dHJ5e3ZhciB0PXRoaXM7aWYodm9pZCAwPT09ZSYmKGU9dC5uZXh0Q2h1bmtPZmZzZXQpLHQuZnVsbHlSZWFkKXJldHVybiB0LmNodW5rc1JlYWQrKywhMTt2YXIgbj10Lm9wdGlvbnMuY2h1bmtTaXplO3JldHVybiByPXQucmVhZENodW5rKGUsbiksaT1mdW5jdGlvbihlKXtyZXR1cm4hIWUmJmUuYnl0ZUxlbmd0aD09PW59LGE/aT9pKHIpOnI6KHImJnIudGhlbnx8KHI9UHJvbWlzZS5yZXNvbHZlKHIpKSxpP3IudGhlbihpKTpyKX1jYXRjaChlKXtyZXR1cm4gUHJvbWlzZS5yZWplY3QoZSl9dmFyIHIsaSxhfX0se2tleTpcInJlYWRDaHVua1wiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7dHJ5e3ZhciBuPXRoaXM7aWYobi5jaHVua3NSZWFkKyssMD09PSh0PW4uc2FmZVdyYXBBZGRyZXNzKGUsdCkpKXJldHVybjtyZXR1cm4gbi5fcmVhZENodW5rKGUsdCl9Y2F0Y2goZSl7cmV0dXJuIFByb21pc2UucmVqZWN0KGUpfX19LHtrZXk6XCJzYWZlV3JhcEFkZHJlc3NcIix2YWx1ZTpmdW5jdGlvbihlLHQpe3JldHVybiB2b2lkIDAhPT10aGlzLnNpemUmJmUrdD50aGlzLnNpemU/TWF0aC5tYXgoMCx0aGlzLnNpemUtZSk6dH19LHtrZXk6XCJuZXh0Q2h1bmtPZmZzZXRcIixnZXQ6ZnVuY3Rpb24oKXtpZigwIT09dGhpcy5yYW5nZXMubGlzdC5sZW5ndGgpcmV0dXJuIHRoaXMucmFuZ2VzLmxpc3RbMF0ubGVuZ3RofX0se2tleTpcImNhblJlYWROZXh0Q2h1bmtcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jaHVua3NSZWFkPHRoaXMub3B0aW9ucy5jaHVua0xpbWl0fX0se2tleTpcImZ1bGx5UmVhZFwiLGdldDpmdW5jdGlvbigpe3JldHVybiB2b2lkIDAhPT10aGlzLnNpemUmJnRoaXMubmV4dENodW5rT2Zmc2V0PT09dGhpcy5zaXplfX0se2tleTpcInJlYWRcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLm9wdGlvbnMuY2h1bmtlZD90aGlzLnJlYWRDaHVua2VkKCk6dGhpcy5yZWFkV2hvbGUoKX19LHtrZXk6XCJjbG9zZVwiLHZhbHVlOmZ1bmN0aW9uKCl7fX1dKSxzfShVdCkpO0suc2V0KFwiYmxvYlwiLFZ0KSxlLkV4aWZyPUllLGUuT3B0aW9ucz1QZSxlLmFsbEZvcm1hdHRlcnM9YmUsZS5jaHVua2VkUHJvcHM9ZGUsZS5jcmVhdGVEaWN0aW9uYXJ5PXRlLGUuZGVmYXVsdD1hdCxlLmRpc2FibGVBbGxPcHRpb25zPWx0LGUuZXh0ZW5kRGljdGlvbmFyeT1uZSxlLmZldGNoVXJsQXNBcnJheUJ1ZmZlcj1HLGUuZmlsZVBhcnNlcnM9TSxlLmZpbGVSZWFkZXJzPUssZS5ncHM9ZnQsZS5ncHNPbmx5T3B0aW9ucz1kdCxlLmluaGVyaXRhYmxlcz1tZSxlLm9yaWVudGF0aW9uPW90LGUub3JpZW50YXRpb25Pbmx5T3B0aW9ucz12dCxlLm90aGVyU2VnbWVudHM9dmUsZS5wYXJzZT1UZSxlLnJlYWRCbG9iQXNBcnJheUJ1ZmZlcj1ZLGUucm90YXRpb249ZnVuY3Rpb24odCl7cmV0dXJuIHN0KG90KHQpLChmdW5jdGlvbih0KXtyZXR1cm4gZyh7Y2FudmFzOmUucm90YXRlQ2FudmFzLGNzczplLnJvdGF0ZUNzc30seXRbdF0pfSkpfSxlLnJvdGF0aW9ucz15dCxlLnNlZ21lbnRQYXJzZXJzPVcsZS5zZWdtZW50cz1wZSxlLnNlZ21lbnRzQW5kQmxvY2tzPWdlLGUudGFnS2V5cz1yZSxlLnRhZ1Jldml2ZXJzPWFlLGUudGFnVmFsdWVzPWllLGUudGh1bWJuYWlsPWh0LGUudGh1bWJuYWlsT25seU9wdGlvbnM9cHQsZS50aHVtYm5haWxVcmw9Y3QsZS50aWZmQmxvY2tzPXllLGUudGlmZkV4dHJhY3RhYmxlcz1rZSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KX0pKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZmxhdHRlbihsaXN0LCBkZXB0aCkge1xuICBkZXB0aCA9ICh0eXBlb2YgZGVwdGggPT0gJ251bWJlcicpID8gZGVwdGggOiBJbmZpbml0eTtcblxuICBpZiAoIWRlcHRoKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkobGlzdCkpIHtcbiAgICAgIHJldHVybiBsaXN0Lm1hcChmdW5jdGlvbihpKSB7IHJldHVybiBpOyB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGxpc3Q7XG4gIH1cblxuICByZXR1cm4gX2ZsYXR0ZW4obGlzdCwgMSk7XG5cbiAgZnVuY3Rpb24gX2ZsYXR0ZW4obGlzdCwgZCkge1xuICAgIHJldHVybiBsaXN0LnJlZHVjZShmdW5jdGlvbiAoYWNjLCBpdGVtKSB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShpdGVtKSAmJiBkIDwgZGVwdGgpIHtcbiAgICAgICAgcmV0dXJuIGFjYy5jb25jYXQoX2ZsYXR0ZW4oaXRlbSwgZCArIDEpKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gYWNjLmNvbmNhdChpdGVtKTtcbiAgICAgIH1cbiAgICB9LCBbXSk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSBnZXRGb3JtRGF0YTtcbmV4cG9ydHMuZ2V0RmllbGREYXRhID0gZ2V0RmllbGREYXRhO1xudmFyIE5PREVfTElTVF9DTEFTU0VTID0ge1xuICAnW29iamVjdCBIVE1MQ29sbGVjdGlvbl0nOiB0cnVlLFxuICAnW29iamVjdCBOb2RlTGlzdF0nOiB0cnVlLFxuICAnW29iamVjdCBSYWRpb05vZGVMaXN0XSc6IHRydWVcblxuICAvLyAudHlwZSB2YWx1ZXMgZm9yIGVsZW1lbnRzIHdoaWNoIGNhbiBhcHBlYXIgaW4gLmVsZW1lbnRzIGFuZCBzaG91bGQgYmUgaWdub3JlZFxufTt2YXIgSUdOT1JFRF9FTEVNRU5UX1RZUEVTID0ge1xuICAnYnV0dG9uJzogdHJ1ZSxcbiAgJ2ZpZWxkc2V0JzogdHJ1ZSxcbiAgJ3Jlc2V0JzogdHJ1ZSxcbiAgJ3N1Ym1pdCc6IHRydWVcbn07XG5cbnZhciBDSEVDS0VEX0lOUFVUX1RZUEVTID0ge1xuICAnY2hlY2tib3gnOiB0cnVlLFxuICAncmFkaW8nOiB0cnVlXG59O1xuXG52YXIgVFJJTV9SRSA9IC9eXFxzK3xcXHMrJC9nO1xuXG52YXIgc2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG4vKipcbiAqIEBwYXJhbSB7SFRNTEZvcm1FbGVtZW50fSBmb3JtXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7T2JqZWN0LjxzdHJpbmcsKHN0cmluZ3xBcnJheS48c3RyaW5nPik+fSBhbiBvYmplY3QgY29udGFpbmluZ1xuICogICBzdWJtaXR0YWJsZSB2YWx1ZShzKSBoZWxkIGluIHRoZSBmb3JtJ3MgLmVsZW1lbnRzIGNvbGxlY3Rpb24sIHdpdGhcbiAqICAgcHJvcGVydGllcyBuYW1lZCBhcyBwZXIgZWxlbWVudCBuYW1lcyBvciBpZHMuXG4gKi9cblxuZnVuY3Rpb24gZ2V0Rm9ybURhdGEoZm9ybSkge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogeyB0cmltOiBmYWxzZSB9O1xuXG4gIGlmICghZm9ybSkge1xuICAgIHRocm93IG5ldyBFcnJvcignQSBmb3JtIGlzIHJlcXVpcmVkIGJ5IGdldEZvcm1EYXRhLCB3YXMgZ2l2ZW4gZm9ybT0nICsgZm9ybSk7XG4gIH1cblxuICB2YXIgZGF0YSA9IHt9O1xuICB2YXIgZWxlbWVudE5hbWUgPSB2b2lkIDA7XG4gIHZhciBlbGVtZW50TmFtZXMgPSBbXTtcbiAgdmFyIGVsZW1lbnROYW1lTG9va3VwID0ge307XG5cbiAgLy8gR2V0IHVuaXF1ZSBzdWJtaXR0YWJsZSBlbGVtZW50IG5hbWVzIGZvciB0aGUgZm9ybVxuICBmb3IgKHZhciBpID0gMCwgbCA9IGZvcm0uZWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgdmFyIGVsZW1lbnQgPSBmb3JtLmVsZW1lbnRzW2ldO1xuICAgIGlmIChJR05PUkVEX0VMRU1FTlRfVFlQRVNbZWxlbWVudC50eXBlXSB8fCBlbGVtZW50LmRpc2FibGVkKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgZWxlbWVudE5hbWUgPSBlbGVtZW50Lm5hbWUgfHwgZWxlbWVudC5pZDtcbiAgICBpZiAoZWxlbWVudE5hbWUgJiYgIWVsZW1lbnROYW1lTG9va3VwW2VsZW1lbnROYW1lXSkge1xuICAgICAgZWxlbWVudE5hbWVzLnB1c2goZWxlbWVudE5hbWUpO1xuICAgICAgZWxlbWVudE5hbWVMb29rdXBbZWxlbWVudE5hbWVdID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICAvLyBFeHRyYWN0IGVsZW1lbnQgZGF0YSBuYW1lLWJ5LW5hbWUgZm9yIGNvbnNpc3RlbnQgaGFuZGxpbmcgb2Ygc3BlY2lhbCBjYXNlc1xuICAvLyBhcm91bmQgZWxlbWVudHMgd2hpY2ggY29udGFpbiBtdWx0aXBsZSBpbnB1dHMuXG4gIGZvciAodmFyIF9pID0gMCwgX2wgPSBlbGVtZW50TmFtZXMubGVuZ3RoOyBfaSA8IF9sOyBfaSsrKSB7XG4gICAgZWxlbWVudE5hbWUgPSBlbGVtZW50TmFtZXNbX2ldO1xuICAgIHZhciB2YWx1ZSA9IGdldEZpZWxkRGF0YShmb3JtLCBlbGVtZW50TmFtZSwgb3B0aW9ucyk7XG4gICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgIGRhdGFbZWxlbWVudE5hbWVdID0gdmFsdWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogQHBhcmFtIHtIVE1MRm9ybUVsZW1lbnR9IGZvcm1cbiAqIEBwYXJhbSB7c3RyaW5nfSBmaWVsZE5hbWVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHsoc3RyaW5nfEFycmF5LjxzdHJpbmc+KX0gc3VibWl0dGFibGUgdmFsdWUocykgaW4gdGhlIGZvcm0gZm9yIGFcbiAqICAgbmFtZWQgZWxlbWVudCBmcm9tIGl0cyAuZWxlbWVudHMgY29sbGVjdGlvbiwgb3IgbnVsbCBpZiB0aGVyZSB3YXMgbm9cbiAqICAgZWxlbWVudCB3aXRoIHRoYXQgbmFtZSBvciB0aGUgZWxlbWVudCBoYWQgbm8gc3VibWl0dGFibGUgdmFsdWUocykuXG4gKi9cbmZ1bmN0aW9uIGdldEZpZWxkRGF0YShmb3JtLCBmaWVsZE5hbWUpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHsgdHJpbTogZmFsc2UgfTtcblxuICBpZiAoIWZvcm0pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0EgZm9ybSBpcyByZXF1aXJlZCBieSBnZXRGaWVsZERhdGEsIHdhcyBnaXZlbiBmb3JtPScgKyBmb3JtKTtcbiAgfVxuICBpZiAoIWZpZWxkTmFtZSAmJiB0b1N0cmluZy5jYWxsKGZpZWxkTmFtZSkgIT09ICdbb2JqZWN0IFN0cmluZ10nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdBIGZpZWxkIG5hbWUgaXMgcmVxdWlyZWQgYnkgZ2V0RmllbGREYXRhLCB3YXMgZ2l2ZW4gZmllbGROYW1lPScgKyBmaWVsZE5hbWUpO1xuICB9XG5cbiAgdmFyIGVsZW1lbnQgPSBmb3JtLmVsZW1lbnRzW2ZpZWxkTmFtZV07XG4gIGlmICghZWxlbWVudCB8fCBlbGVtZW50LmRpc2FibGVkKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBpZiAoIU5PREVfTElTVF9DTEFTU0VTW3RvU3RyaW5nLmNhbGwoZWxlbWVudCldKSB7XG4gICAgcmV0dXJuIGdldEZvcm1FbGVtZW50VmFsdWUoZWxlbWVudCwgb3B0aW9ucy50cmltKTtcbiAgfVxuXG4gIC8vIERlYWwgd2l0aCBtdWx0aXBsZSBmb3JtIGNvbnRyb2xzIHdoaWNoIGhhdmUgdGhlIHNhbWUgbmFtZVxuICB2YXIgZGF0YSA9IFtdO1xuICB2YXIgYWxsUmFkaW9zID0gdHJ1ZTtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBlbGVtZW50Lmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGlmIChlbGVtZW50W2ldLmRpc2FibGVkKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKGFsbFJhZGlvcyAmJiBlbGVtZW50W2ldLnR5cGUgIT09ICdyYWRpbycpIHtcbiAgICAgIGFsbFJhZGlvcyA9IGZhbHNlO1xuICAgIH1cbiAgICB2YXIgdmFsdWUgPSBnZXRGb3JtRWxlbWVudFZhbHVlKGVsZW1lbnRbaV0sIG9wdGlvbnMudHJpbSk7XG4gICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgIGRhdGEgPSBkYXRhLmNvbmNhdCh2YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgLy8gU3BlY2lhbCBjYXNlIGZvciBhbiBlbGVtZW50IHdpdGggbXVsdGlwbGUgc2FtZS1uYW1lZCBpbnB1dHMgd2hpY2ggd2VyZSBhbGxcbiAgLy8gcmFkaW8gYnV0dG9uczogaWYgdGhlcmUgd2FzIGEgc2VsZWN0ZWQgdmFsdWUsIG9ubHkgcmV0dXJuIHRoZSB2YWx1ZS5cbiAgaWYgKGFsbFJhZGlvcyAmJiBkYXRhLmxlbmd0aCA9PT0gMSkge1xuICAgIHJldHVybiBkYXRhWzBdO1xuICB9XG5cbiAgcmV0dXJuIGRhdGEubGVuZ3RoID4gMCA/IGRhdGEgOiBudWxsO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnQgYSBmb3JtIGVsZW1lbnQuXG4gKiBAcGFyYW0ge2Jvb2xlYW19IHRyaW0gc2hvdWxkIHZhbHVlcyBmb3IgdGV4dCBlbnRyeSBpbnB1dHMgYmUgdHJpbW1lZD9cbiAqIEByZXR1cm4geyhzdHJpbmd8QXJyYXkuPHN0cmluZz58RmlsZXxBcnJheS48RmlsZT4pfSB0aGUgZWxlbWVudCdzIHN1Ym1pdHRhYmxlXG4gKiAgIHZhbHVlKHMpLCBvciBudWxsIGlmIGl0IGhhZCBub25lLlxuICovXG5mdW5jdGlvbiBnZXRGb3JtRWxlbWVudFZhbHVlKGVsZW1lbnQsIHRyaW0pIHtcbiAgdmFyIHZhbHVlID0gbnVsbDtcbiAgdmFyIHR5cGUgPSBlbGVtZW50LnR5cGU7XG5cblxuICBpZiAodHlwZSA9PT0gJ3NlbGVjdC1vbmUnKSB7XG4gICAgaWYgKGVsZW1lbnQub3B0aW9ucy5sZW5ndGgpIHtcbiAgICAgIHZhbHVlID0gZWxlbWVudC5vcHRpb25zW2VsZW1lbnQuc2VsZWN0ZWRJbmRleF0udmFsdWU7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIGlmICh0eXBlID09PSAnc2VsZWN0LW11bHRpcGxlJykge1xuICAgIHZhbHVlID0gW107XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBlbGVtZW50Lm9wdGlvbnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBpZiAoZWxlbWVudC5vcHRpb25zW2ldLnNlbGVjdGVkKSB7XG4gICAgICAgIHZhbHVlLnB1c2goZWxlbWVudC5vcHRpb25zW2ldLnZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdmFsdWUgPSBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICAvLyBJZiBhIGZpbGUgaW5wdXQgZG9lc24ndCBoYXZlIGEgZmlsZXMgYXR0cmlidXRlLCBmYWxsIHRocm91Z2ggdG8gdXNpbmcgaXRzXG4gIC8vIHZhbHVlIGF0dHJpYnV0ZS5cbiAgaWYgKHR5cGUgPT09ICdmaWxlJyAmJiAnZmlsZXMnIGluIGVsZW1lbnQpIHtcbiAgICBpZiAoZWxlbWVudC5tdWx0aXBsZSkge1xuICAgICAgdmFsdWUgPSBzbGljZS5jYWxsKGVsZW1lbnQuZmlsZXMpO1xuICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICB2YWx1ZSA9IG51bGw7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFNob3VsZCBiZSBudWxsIGlmIG5vdCBwcmVzZW50LCBhY2NvcmRpbmcgdG8gdGhlIHNwZWNcbiAgICAgIHZhbHVlID0gZWxlbWVudC5maWxlc1swXTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgaWYgKCFDSEVDS0VEX0lOUFVUX1RZUEVTW3R5cGVdKSB7XG4gICAgdmFsdWUgPSB0cmltID8gZWxlbWVudC52YWx1ZS5yZXBsYWNlKFRSSU1fUkUsICcnKSA6IGVsZW1lbnQudmFsdWU7XG4gIH0gZWxzZSBpZiAoZWxlbWVudC5jaGVja2VkKSB7XG4gICAgdmFsdWUgPSBlbGVtZW50LnZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIHZhbHVlO1xufVxuXG4vLyBGb3IgVU1EIGJ1aWxkIGFjY2VzcyB0byBnZXRGaWVsZERhdGFcbmdldEZvcm1EYXRhLmdldEZpZWxkRGF0YSA9IGdldEZpZWxkRGF0YTsiLCJcbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKlxuICogTG9naWMgYm9ycm93ZWQgZnJvbSBNb2Rlcm5penI6XG4gKlxuICogICAtIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL2ZlYXR1cmUtZGV0ZWN0cy9jb3JzLmpzXG4gKi9cblxudHJ5IHtcbiAgbW9kdWxlLmV4cG9ydHMgPSB0eXBlb2YgWE1MSHR0cFJlcXVlc3QgIT09ICd1bmRlZmluZWQnICYmXG4gICAgJ3dpdGhDcmVkZW50aWFscycgaW4gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG59IGNhdGNoIChlcnIpIHtcbiAgLy8gaWYgWE1MSHR0cCBzdXBwb3J0IGlzIGRpc2FibGVkIGluIElFIHRoZW4gaXQgd2lsbCB0aHJvd1xuICAvLyB3aGVuIHRyeWluZyB0byBjcmVhdGVcbiAgbW9kdWxlLmV4cG9ydHMgPSBmYWxzZTtcbn1cbiIsIi8qISBpZWVlNzU0LiBCU0QtMy1DbGF1c2UgTGljZW5zZS4gRmVyb3NzIEFib3VraGFkaWplaCA8aHR0cHM6Ly9mZXJvc3Mub3JnL29wZW5zb3VyY2U+ICovXG5leHBvcnRzLnJlYWQgPSBmdW5jdGlvbiAoYnVmZmVyLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbVxuICB2YXIgZUxlbiA9IChuQnl0ZXMgKiA4KSAtIG1MZW4gLSAxXG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxXG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMVxuICB2YXIgbkJpdHMgPSAtN1xuICB2YXIgaSA9IGlzTEUgPyAobkJ5dGVzIC0gMSkgOiAwXG4gIHZhciBkID0gaXNMRSA/IC0xIDogMVxuICB2YXIgcyA9IGJ1ZmZlcltvZmZzZXQgKyBpXVxuXG4gIGkgKz0gZFxuXG4gIGUgPSBzICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpXG4gIHMgPj49ICgtbkJpdHMpXG4gIG5CaXRzICs9IGVMZW5cbiAgZm9yICg7IG5CaXRzID4gMDsgZSA9IChlICogMjU2KSArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fVxuXG4gIG0gPSBlICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpXG4gIGUgPj49ICgtbkJpdHMpXG4gIG5CaXRzICs9IG1MZW5cbiAgZm9yICg7IG5CaXRzID4gMDsgbSA9IChtICogMjU2KSArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fVxuXG4gIGlmIChlID09PSAwKSB7XG4gICAgZSA9IDEgLSBlQmlhc1xuICB9IGVsc2UgaWYgKGUgPT09IGVNYXgpIHtcbiAgICByZXR1cm4gbSA/IE5hTiA6ICgocyA/IC0xIDogMSkgKiBJbmZpbml0eSlcbiAgfSBlbHNlIHtcbiAgICBtID0gbSArIE1hdGgucG93KDIsIG1MZW4pXG4gICAgZSA9IGUgLSBlQmlhc1xuICB9XG4gIHJldHVybiAocyA/IC0xIDogMSkgKiBtICogTWF0aC5wb3coMiwgZSAtIG1MZW4pXG59XG5cbmV4cG9ydHMud3JpdGUgPSBmdW5jdGlvbiAoYnVmZmVyLCB2YWx1ZSwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG0sIGNcbiAgdmFyIGVMZW4gPSAobkJ5dGVzICogOCkgLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIHJ0ID0gKG1MZW4gPT09IDIzID8gTWF0aC5wb3coMiwgLTI0KSAtIE1hdGgucG93KDIsIC03NykgOiAwKVxuICB2YXIgaSA9IGlzTEUgPyAwIDogKG5CeXRlcyAtIDEpXG4gIHZhciBkID0gaXNMRSA/IDEgOiAtMVxuICB2YXIgcyA9IHZhbHVlIDwgMCB8fCAodmFsdWUgPT09IDAgJiYgMSAvIHZhbHVlIDwgMCkgPyAxIDogMFxuXG4gIHZhbHVlID0gTWF0aC5hYnModmFsdWUpXG5cbiAgaWYgKGlzTmFOKHZhbHVlKSB8fCB2YWx1ZSA9PT0gSW5maW5pdHkpIHtcbiAgICBtID0gaXNOYU4odmFsdWUpID8gMSA6IDBcbiAgICBlID0gZU1heFxuICB9IGVsc2Uge1xuICAgIGUgPSBNYXRoLmZsb29yKE1hdGgubG9nKHZhbHVlKSAvIE1hdGguTE4yKVxuICAgIGlmICh2YWx1ZSAqIChjID0gTWF0aC5wb3coMiwgLWUpKSA8IDEpIHtcbiAgICAgIGUtLVxuICAgICAgYyAqPSAyXG4gICAgfVxuICAgIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgdmFsdWUgKz0gcnQgLyBjXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlICs9IHJ0ICogTWF0aC5wb3coMiwgMSAtIGVCaWFzKVxuICAgIH1cbiAgICBpZiAodmFsdWUgKiBjID49IDIpIHtcbiAgICAgIGUrK1xuICAgICAgYyAvPSAyXG4gICAgfVxuXG4gICAgaWYgKGUgKyBlQmlhcyA+PSBlTWF4KSB7XG4gICAgICBtID0gMFxuICAgICAgZSA9IGVNYXhcbiAgICB9IGVsc2UgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBtID0gKCh2YWx1ZSAqIGMpIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKVxuICAgICAgZSA9IGUgKyBlQmlhc1xuICAgIH0gZWxzZSB7XG4gICAgICBtID0gdmFsdWUgKiBNYXRoLnBvdygyLCBlQmlhcyAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSAwXG4gICAgfVxuICB9XG5cbiAgZm9yICg7IG1MZW4gPj0gODsgYnVmZmVyW29mZnNldCArIGldID0gbSAmIDB4ZmYsIGkgKz0gZCwgbSAvPSAyNTYsIG1MZW4gLT0gOCkge31cblxuICBlID0gKGUgPDwgbUxlbikgfCBtXG4gIGVMZW4gKz0gbUxlblxuICBmb3IgKDsgZUxlbiA+IDA7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IGUgJiAweGZmLCBpICs9IGQsIGUgLz0gMjU2LCBlTGVuIC09IDgpIHt9XG5cbiAgYnVmZmVyW29mZnNldCArIGkgLSBkXSB8PSBzICogMTI4XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzU2hhbGxvd0VxdWFsIChhLCBiKSB7XG4gIGlmIChhID09PSBiKSByZXR1cm4gdHJ1ZVxuICBmb3IgKHZhciBpIGluIGEpIGlmICghKGkgaW4gYikpIHJldHVybiBmYWxzZVxuICBmb3IgKHZhciBpIGluIGIpIGlmIChhW2ldICE9PSBiW2ldKSByZXR1cm4gZmFsc2VcbiAgcmV0dXJuIHRydWVcbn1cbiIsIi8qXG4gKiAgYmFzZTY0LmpzXG4gKlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBCU0QgMy1DbGF1c2UgTGljZW5zZS5cbiAqICAgIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9CU0QtMy1DbGF1c2VcbiAqXG4gKiAgUmVmZXJlbmNlczpcbiAqICAgIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQmFzZTY0XG4gKi9cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICA/IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShnbG9iYWwpXG4gICAgICAgIDogdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kXG4gICAgICAgID8gZGVmaW5lKGZhY3RvcnkpIDogZmFjdG9yeShnbG9iYWwpXG59KChcbiAgICB0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgPyBzZWxmXG4gICAgICAgIDogdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3dcbiAgICAgICAgOiB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbFxuOiB0aGlzXG4pLCBmdW5jdGlvbihnbG9iYWwpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgLy8gZXhpc3RpbmcgdmVyc2lvbiBmb3Igbm9Db25mbGljdCgpXG4gICAgZ2xvYmFsID0gZ2xvYmFsIHx8IHt9O1xuICAgIHZhciBfQmFzZTY0ID0gZ2xvYmFsLkJhc2U2NDtcbiAgICB2YXIgdmVyc2lvbiA9IFwiMi42LjRcIjtcbiAgICAvLyBjb25zdGFudHNcbiAgICB2YXIgYjY0Y2hhcnNcbiAgICAgICAgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLyc7XG4gICAgdmFyIGI2NHRhYiA9IGZ1bmN0aW9uKGJpbikge1xuICAgICAgICB2YXIgdCA9IHt9O1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGJpbi5sZW5ndGg7IGkgPCBsOyBpKyspIHRbYmluLmNoYXJBdChpKV0gPSBpO1xuICAgICAgICByZXR1cm4gdDtcbiAgICB9KGI2NGNoYXJzKTtcbiAgICB2YXIgZnJvbUNoYXJDb2RlID0gU3RyaW5nLmZyb21DaGFyQ29kZTtcbiAgICAvLyBlbmNvZGVyIHN0dWZmXG4gICAgdmFyIGNiX3V0b2IgPSBmdW5jdGlvbihjKSB7XG4gICAgICAgIGlmIChjLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgICAgIHZhciBjYyA9IGMuY2hhckNvZGVBdCgwKTtcbiAgICAgICAgICAgIHJldHVybiBjYyA8IDB4ODAgPyBjXG4gICAgICAgICAgICAgICAgOiBjYyA8IDB4ODAwID8gKGZyb21DaGFyQ29kZSgweGMwIHwgKGNjID4+PiA2KSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBmcm9tQ2hhckNvZGUoMHg4MCB8IChjYyAmIDB4M2YpKSlcbiAgICAgICAgICAgICAgICA6IChmcm9tQ2hhckNvZGUoMHhlMCB8ICgoY2MgPj4+IDEyKSAmIDB4MGYpKVxuICAgICAgICAgICAgICAgICAgICArIGZyb21DaGFyQ29kZSgweDgwIHwgKChjYyA+Pj4gIDYpICYgMHgzZikpXG4gICAgICAgICAgICAgICAgICAgICsgZnJvbUNoYXJDb2RlKDB4ODAgfCAoIGNjICAgICAgICAgJiAweDNmKSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIGNjID0gMHgxMDAwMFxuICAgICAgICAgICAgICAgICsgKGMuY2hhckNvZGVBdCgwKSAtIDB4RDgwMCkgKiAweDQwMFxuICAgICAgICAgICAgICAgICsgKGMuY2hhckNvZGVBdCgxKSAtIDB4REMwMCk7XG4gICAgICAgICAgICByZXR1cm4gKGZyb21DaGFyQ29kZSgweGYwIHwgKChjYyA+Pj4gMTgpICYgMHgwNykpXG4gICAgICAgICAgICAgICAgICAgICsgZnJvbUNoYXJDb2RlKDB4ODAgfCAoKGNjID4+PiAxMikgJiAweDNmKSlcbiAgICAgICAgICAgICAgICAgICAgKyBmcm9tQ2hhckNvZGUoMHg4MCB8ICgoY2MgPj4+ICA2KSAmIDB4M2YpKVxuICAgICAgICAgICAgICAgICAgICArIGZyb21DaGFyQ29kZSgweDgwIHwgKCBjYyAgICAgICAgICYgMHgzZikpKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgdmFyIHJlX3V0b2IgPSAvW1xcdUQ4MDAtXFx1REJGRl1bXFx1REMwMC1cXHVERkZGRl18W15cXHgwMC1cXHg3Rl0vZztcbiAgICB2YXIgdXRvYiA9IGZ1bmN0aW9uKHUpIHtcbiAgICAgICAgcmV0dXJuIHUucmVwbGFjZShyZV91dG9iLCBjYl91dG9iKTtcbiAgICB9O1xuICAgIHZhciBjYl9lbmNvZGUgPSBmdW5jdGlvbihjY2MpIHtcbiAgICAgICAgdmFyIHBhZGxlbiA9IFswLCAyLCAxXVtjY2MubGVuZ3RoICUgM10sXG4gICAgICAgIG9yZCA9IGNjYy5jaGFyQ29kZUF0KDApIDw8IDE2XG4gICAgICAgICAgICB8ICgoY2NjLmxlbmd0aCA+IDEgPyBjY2MuY2hhckNvZGVBdCgxKSA6IDApIDw8IDgpXG4gICAgICAgICAgICB8ICgoY2NjLmxlbmd0aCA+IDIgPyBjY2MuY2hhckNvZGVBdCgyKSA6IDApKSxcbiAgICAgICAgY2hhcnMgPSBbXG4gICAgICAgICAgICBiNjRjaGFycy5jaGFyQXQoIG9yZCA+Pj4gMTgpLFxuICAgICAgICAgICAgYjY0Y2hhcnMuY2hhckF0KChvcmQgPj4+IDEyKSAmIDYzKSxcbiAgICAgICAgICAgIHBhZGxlbiA+PSAyID8gJz0nIDogYjY0Y2hhcnMuY2hhckF0KChvcmQgPj4+IDYpICYgNjMpLFxuICAgICAgICAgICAgcGFkbGVuID49IDEgPyAnPScgOiBiNjRjaGFycy5jaGFyQXQob3JkICYgNjMpXG4gICAgICAgIF07XG4gICAgICAgIHJldHVybiBjaGFycy5qb2luKCcnKTtcbiAgICB9O1xuICAgIHZhciBidG9hID0gZ2xvYmFsLmJ0b2EgJiYgdHlwZW9mIGdsb2JhbC5idG9hID09ICdmdW5jdGlvbidcbiAgICAgICAgPyBmdW5jdGlvbihiKXsgcmV0dXJuIGdsb2JhbC5idG9hKGIpIH0gOiBmdW5jdGlvbihiKSB7XG4gICAgICAgIGlmIChiLm1hdGNoKC9bXlxceDAwLVxceEZGXS8pKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcbiAgICAgICAgICAgICdUaGUgc3RyaW5nIGNvbnRhaW5zIGludmFsaWQgY2hhcmFjdGVycy4nXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiBiLnJlcGxhY2UoL1tcXHNcXFNdezEsM30vZywgY2JfZW5jb2RlKTtcbiAgICB9O1xuICAgIHZhciBfZW5jb2RlID0gZnVuY3Rpb24odSkge1xuICAgICAgICByZXR1cm4gYnRvYSh1dG9iKFN0cmluZyh1KSkpO1xuICAgIH07XG4gICAgdmFyIG1rVXJpU2FmZSA9IGZ1bmN0aW9uIChiNjQpIHtcbiAgICAgICAgcmV0dXJuIGI2NC5yZXBsYWNlKC9bK1xcL10vZywgZnVuY3Rpb24obTApIHtcbiAgICAgICAgICAgIHJldHVybiBtMCA9PSAnKycgPyAnLScgOiAnXyc7XG4gICAgICAgIH0pLnJlcGxhY2UoLz0vZywgJycpO1xuICAgIH07XG4gICAgdmFyIGVuY29kZSA9IGZ1bmN0aW9uKHUsIHVyaXNhZmUpIHtcbiAgICAgICAgcmV0dXJuIHVyaXNhZmUgPyBta1VyaVNhZmUoX2VuY29kZSh1KSkgOiBfZW5jb2RlKHUpO1xuICAgIH07XG4gICAgdmFyIGVuY29kZVVSSSA9IGZ1bmN0aW9uKHUpIHsgcmV0dXJuIGVuY29kZSh1LCB0cnVlKSB9O1xuICAgIHZhciBmcm9tVWludDhBcnJheTtcbiAgICBpZiAoZ2xvYmFsLlVpbnQ4QXJyYXkpIGZyb21VaW50OEFycmF5ID0gZnVuY3Rpb24oYSwgdXJpc2FmZSkge1xuICAgICAgICAvLyByZXR1cm4gYnRvYShmcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgYSkpO1xuICAgICAgICB2YXIgYjY0ID0gJyc7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gYS5sZW5ndGg7IGkgPCBsOyBpICs9IDMpIHtcbiAgICAgICAgICAgIHZhciBhMCA9IGFbaV0sIGExID0gYVtpKzFdLCBhMiA9IGFbaSsyXTtcbiAgICAgICAgICAgIHZhciBvcmQgPSBhMCA8PCAxNiB8IGExIDw8IDggfCBhMjtcbiAgICAgICAgICAgIGI2NCArPSAgICBiNjRjaGFycy5jaGFyQXQoIG9yZCA+Pj4gMTgpXG4gICAgICAgICAgICAgICAgKyAgICAgYjY0Y2hhcnMuY2hhckF0KChvcmQgPj4+IDEyKSAmIDYzKVxuICAgICAgICAgICAgICAgICsgKCB0eXBlb2YgYTEgIT0gJ3VuZGVmaW5lZCdcbiAgICAgICAgICAgICAgICAgICAgPyBiNjRjaGFycy5jaGFyQXQoKG9yZCA+Pj4gIDYpICYgNjMpIDogJz0nKVxuICAgICAgICAgICAgICAgICsgKCB0eXBlb2YgYTIgIT0gJ3VuZGVmaW5lZCdcbiAgICAgICAgICAgICAgICAgICAgPyBiNjRjaGFycy5jaGFyQXQoIG9yZCAgICAgICAgICYgNjMpIDogJz0nKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdXJpc2FmZSA/IG1rVXJpU2FmZShiNjQpIDogYjY0O1xuICAgIH07XG4gICAgLy8gZGVjb2RlciBzdHVmZlxuICAgIHZhciByZV9idG91ID0gL1tcXHhDMC1cXHhERl1bXFx4ODAtXFx4QkZdfFtcXHhFMC1cXHhFRl1bXFx4ODAtXFx4QkZdezJ9fFtcXHhGMC1cXHhGN11bXFx4ODAtXFx4QkZdezN9L2c7XG4gICAgdmFyIGNiX2J0b3UgPSBmdW5jdGlvbihjY2NjKSB7XG4gICAgICAgIHN3aXRjaChjY2NjLmxlbmd0aCkge1xuICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICB2YXIgY3AgPSAoKDB4MDcgJiBjY2NjLmNoYXJDb2RlQXQoMCkpIDw8IDE4KVxuICAgICAgICAgICAgICAgIHwgICAgKCgweDNmICYgY2NjYy5jaGFyQ29kZUF0KDEpKSA8PCAxMilcbiAgICAgICAgICAgICAgICB8ICAgICgoMHgzZiAmIGNjY2MuY2hhckNvZGVBdCgyKSkgPDwgIDYpXG4gICAgICAgICAgICAgICAgfCAgICAgKDB4M2YgJiBjY2NjLmNoYXJDb2RlQXQoMykpLFxuICAgICAgICAgICAgb2Zmc2V0ID0gY3AgLSAweDEwMDAwO1xuICAgICAgICAgICAgcmV0dXJuIChmcm9tQ2hhckNvZGUoKG9mZnNldCAgPj4+IDEwKSArIDB4RDgwMClcbiAgICAgICAgICAgICAgICAgICAgKyBmcm9tQ2hhckNvZGUoKG9mZnNldCAmIDB4M0ZGKSArIDB4REMwMCkpO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICByZXR1cm4gZnJvbUNoYXJDb2RlKFxuICAgICAgICAgICAgICAgICgoMHgwZiAmIGNjY2MuY2hhckNvZGVBdCgwKSkgPDwgMTIpXG4gICAgICAgICAgICAgICAgICAgIHwgKCgweDNmICYgY2NjYy5jaGFyQ29kZUF0KDEpKSA8PCA2KVxuICAgICAgICAgICAgICAgICAgICB8ICAoMHgzZiAmIGNjY2MuY2hhckNvZGVBdCgyKSlcbiAgICAgICAgICAgICk7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gIGZyb21DaGFyQ29kZShcbiAgICAgICAgICAgICAgICAoKDB4MWYgJiBjY2NjLmNoYXJDb2RlQXQoMCkpIDw8IDYpXG4gICAgICAgICAgICAgICAgICAgIHwgICgweDNmICYgY2NjYy5jaGFyQ29kZUF0KDEpKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgdmFyIGJ0b3UgPSBmdW5jdGlvbihiKSB7XG4gICAgICAgIHJldHVybiBiLnJlcGxhY2UocmVfYnRvdSwgY2JfYnRvdSk7XG4gICAgfTtcbiAgICB2YXIgY2JfZGVjb2RlID0gZnVuY3Rpb24oY2NjYykge1xuICAgICAgICB2YXIgbGVuID0gY2NjYy5sZW5ndGgsXG4gICAgICAgIHBhZGxlbiA9IGxlbiAlIDQsXG4gICAgICAgIG4gPSAobGVuID4gMCA/IGI2NHRhYltjY2NjLmNoYXJBdCgwKV0gPDwgMTggOiAwKVxuICAgICAgICAgICAgfCAobGVuID4gMSA/IGI2NHRhYltjY2NjLmNoYXJBdCgxKV0gPDwgMTIgOiAwKVxuICAgICAgICAgICAgfCAobGVuID4gMiA/IGI2NHRhYltjY2NjLmNoYXJBdCgyKV0gPDwgIDYgOiAwKVxuICAgICAgICAgICAgfCAobGVuID4gMyA/IGI2NHRhYltjY2NjLmNoYXJBdCgzKV0gICAgICAgOiAwKSxcbiAgICAgICAgY2hhcnMgPSBbXG4gICAgICAgICAgICBmcm9tQ2hhckNvZGUoIG4gPj4+IDE2KSxcbiAgICAgICAgICAgIGZyb21DaGFyQ29kZSgobiA+Pj4gIDgpICYgMHhmZiksXG4gICAgICAgICAgICBmcm9tQ2hhckNvZGUoIG4gICAgICAgICAmIDB4ZmYpXG4gICAgICAgIF07XG4gICAgICAgIGNoYXJzLmxlbmd0aCAtPSBbMCwgMCwgMiwgMV1bcGFkbGVuXTtcbiAgICAgICAgcmV0dXJuIGNoYXJzLmpvaW4oJycpO1xuICAgIH07XG4gICAgdmFyIF9hdG9iID0gZ2xvYmFsLmF0b2IgJiYgdHlwZW9mIGdsb2JhbC5hdG9iID09ICdmdW5jdGlvbidcbiAgICAgICAgPyBmdW5jdGlvbihhKXsgcmV0dXJuIGdsb2JhbC5hdG9iKGEpIH0gOiBmdW5jdGlvbihhKXtcbiAgICAgICAgcmV0dXJuIGEucmVwbGFjZSgvXFxTezEsNH0vZywgY2JfZGVjb2RlKTtcbiAgICB9O1xuICAgIHZhciBhdG9iID0gZnVuY3Rpb24oYSkge1xuICAgICAgICByZXR1cm4gX2F0b2IoU3RyaW5nKGEpLnJlcGxhY2UoL1teQS1aYS16MC05XFwrXFwvXS9nLCAnJykpO1xuICAgIH07XG4gICAgdmFyIF9kZWNvZGUgPSBmdW5jdGlvbihhKSB7IHJldHVybiBidG91KF9hdG9iKGEpKSB9O1xuICAgIHZhciBfZnJvbVVSSSA9IGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgcmV0dXJuIFN0cmluZyhhKS5yZXBsYWNlKC9bLV9dL2csIGZ1bmN0aW9uKG0wKSB7XG4gICAgICAgICAgICByZXR1cm4gbTAgPT0gJy0nID8gJysnIDogJy8nXG4gICAgICAgIH0pLnJlcGxhY2UoL1teQS1aYS16MC05XFwrXFwvXS9nLCAnJyk7XG4gICAgfTtcbiAgICB2YXIgZGVjb2RlID0gZnVuY3Rpb24oYSl7XG4gICAgICAgIHJldHVybiBfZGVjb2RlKF9mcm9tVVJJKGEpKTtcbiAgICB9O1xuICAgIHZhciB0b1VpbnQ4QXJyYXk7XG4gICAgaWYgKGdsb2JhbC5VaW50OEFycmF5KSB0b1VpbnQ4QXJyYXkgPSBmdW5jdGlvbihhKSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LmZyb20oYXRvYihfZnJvbVVSSShhKSksIGZ1bmN0aW9uKGMpIHtcbiAgICAgICAgICAgIHJldHVybiBjLmNoYXJDb2RlQXQoMCk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgdmFyIG5vQ29uZmxpY3QgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIEJhc2U2NCA9IGdsb2JhbC5CYXNlNjQ7XG4gICAgICAgIGdsb2JhbC5CYXNlNjQgPSBfQmFzZTY0O1xuICAgICAgICByZXR1cm4gQmFzZTY0O1xuICAgIH07XG4gICAgLy8gZXhwb3J0IEJhc2U2NFxuICAgIGdsb2JhbC5CYXNlNjQgPSB7XG4gICAgICAgIFZFUlNJT046IHZlcnNpb24sXG4gICAgICAgIGF0b2I6IGF0b2IsXG4gICAgICAgIGJ0b2E6IGJ0b2EsXG4gICAgICAgIGZyb21CYXNlNjQ6IGRlY29kZSxcbiAgICAgICAgdG9CYXNlNjQ6IGVuY29kZSxcbiAgICAgICAgdXRvYjogdXRvYixcbiAgICAgICAgZW5jb2RlOiBlbmNvZGUsXG4gICAgICAgIGVuY29kZVVSSTogZW5jb2RlVVJJLFxuICAgICAgICBidG91OiBidG91LFxuICAgICAgICBkZWNvZGU6IGRlY29kZSxcbiAgICAgICAgbm9Db25mbGljdDogbm9Db25mbGljdCxcbiAgICAgICAgZnJvbVVpbnQ4QXJyYXk6IGZyb21VaW50OEFycmF5LFxuICAgICAgICB0b1VpbnQ4QXJyYXk6IHRvVWludDhBcnJheVxuICAgIH07XG4gICAgLy8gaWYgRVM1IGlzIGF2YWlsYWJsZSwgbWFrZSBCYXNlNjQuZXh0ZW5kU3RyaW5nKCkgYXZhaWxhYmxlXG4gICAgaWYgKHR5cGVvZiBPYmplY3QuZGVmaW5lUHJvcGVydHkgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdmFyIG5vRW51bSA9IGZ1bmN0aW9uKHYpe1xuICAgICAgICAgICAgcmV0dXJuIHt2YWx1ZTp2LGVudW1lcmFibGU6ZmFsc2Usd3JpdGFibGU6dHJ1ZSxjb25maWd1cmFibGU6dHJ1ZX07XG4gICAgICAgIH07XG4gICAgICAgIGdsb2JhbC5CYXNlNjQuZXh0ZW5kU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFxuICAgICAgICAgICAgICAgIFN0cmluZy5wcm90b3R5cGUsICdmcm9tQmFzZTY0Jywgbm9FbnVtKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRlY29kZSh0aGlzKVxuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShcbiAgICAgICAgICAgICAgICBTdHJpbmcucHJvdG90eXBlLCAndG9CYXNlNjQnLCBub0VudW0oZnVuY3Rpb24gKHVyaXNhZmUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVuY29kZSh0aGlzLCB1cmlzYWZlKVxuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShcbiAgICAgICAgICAgICAgICBTdHJpbmcucHJvdG90eXBlLCAndG9CYXNlNjRVUkknLCBub0VudW0oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZW5jb2RlKHRoaXMsIHRydWUpXG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICAvL1xuICAgIC8vIGV4cG9ydCBCYXNlNjQgdG8gdGhlIG5hbWVzcGFjZVxuICAgIC8vXG4gICAgaWYgKGdsb2JhbFsnTWV0ZW9yJ10pIHsgLy8gTWV0ZW9yLmpzXG4gICAgICAgIEJhc2U2NCA9IGdsb2JhbC5CYXNlNjQ7XG4gICAgfVxuICAgIC8vIG1vZHVsZS5leHBvcnRzIGFuZCBBTUQgYXJlIG11dHVhbGx5IGV4Y2x1c2l2ZS5cbiAgICAvLyBtb2R1bGUuZXhwb3J0cyBoYXMgcHJlY2VkZW5jZS5cbiAgICBpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMuQmFzZTY0ID0gZ2xvYmFsLkJhc2U2NDtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgICAgIC8vIEFNRC4gUmVnaXN0ZXIgYXMgYW4gYW5vbnltb3VzIG1vZHVsZS5cbiAgICAgICAgZGVmaW5lKFtdLCBmdW5jdGlvbigpeyByZXR1cm4gZ2xvYmFsLkJhc2U2NCB9KTtcbiAgICB9XG4gICAgLy8gdGhhdCdzIGl0IVxuICAgIHJldHVybiB7QmFzZTY0OiBnbG9iYWwuQmFzZTY0fVxufSkpO1xuIiwiLyoqXG4gKiBsb2Rhc2ggKEN1c3RvbSBCdWlsZCkgPGh0dHBzOi8vbG9kYXNoLmNvbS8+XG4gKiBCdWlsZDogYGxvZGFzaCBtb2R1bGFyaXplIGV4cG9ydHM9XCJucG1cIiAtbyAuL2BcbiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzIDxodHRwczovL2pxdWVyeS5vcmcvPlxuICogUmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UgPGh0dHBzOi8vbG9kYXNoLmNvbS9saWNlbnNlPlxuICogQmFzZWQgb24gVW5kZXJzY29yZS5qcyAxLjguMyA8aHR0cDovL3VuZGVyc2NvcmVqcy5vcmcvTElDRU5TRT5cbiAqIENvcHlyaWdodCBKZXJlbXkgQXNoa2VuYXMsIERvY3VtZW50Q2xvdWQgYW5kIEludmVzdGlnYXRpdmUgUmVwb3J0ZXJzICYgRWRpdG9yc1xuICovXG5cbi8qKiBVc2VkIGFzIHRoZSBgVHlwZUVycm9yYCBtZXNzYWdlIGZvciBcIkZ1bmN0aW9uc1wiIG1ldGhvZHMuICovXG52YXIgRlVOQ19FUlJPUl9URVhUID0gJ0V4cGVjdGVkIGEgZnVuY3Rpb24nO1xuXG4vKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBOQU4gPSAwIC8gMDtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIHN5bWJvbFRhZyA9ICdbb2JqZWN0IFN5bWJvbF0nO1xuXG4vKiogVXNlZCB0byBtYXRjaCBsZWFkaW5nIGFuZCB0cmFpbGluZyB3aGl0ZXNwYWNlLiAqL1xudmFyIHJlVHJpbSA9IC9eXFxzK3xcXHMrJC9nO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgYmFkIHNpZ25lZCBoZXhhZGVjaW1hbCBzdHJpbmcgdmFsdWVzLiAqL1xudmFyIHJlSXNCYWRIZXggPSAvXlstK10weFswLTlhLWZdKyQvaTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGJpbmFyeSBzdHJpbmcgdmFsdWVzLiAqL1xudmFyIHJlSXNCaW5hcnkgPSAvXjBiWzAxXSskL2k7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBvY3RhbCBzdHJpbmcgdmFsdWVzLiAqL1xudmFyIHJlSXNPY3RhbCA9IC9eMG9bMC03XSskL2k7XG5cbi8qKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB3aXRob3V0IGEgZGVwZW5kZW5jeSBvbiBgcm9vdGAuICovXG52YXIgZnJlZVBhcnNlSW50ID0gcGFyc2VJbnQ7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsICYmIGdsb2JhbC5PYmplY3QgPT09IE9iamVjdCAmJiBnbG9iYWw7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG52YXIgZnJlZVNlbGYgPSB0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmICYmIHNlbGYuT2JqZWN0ID09PSBPYmplY3QgJiYgc2VsZjtcblxuLyoqIFVzZWQgYXMgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QuICovXG52YXIgcm9vdCA9IGZyZWVHbG9iYWwgfHwgZnJlZVNlbGYgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVNYXggPSBNYXRoLm1heCxcbiAgICBuYXRpdmVNaW4gPSBNYXRoLm1pbjtcblxuLyoqXG4gKiBHZXRzIHRoZSB0aW1lc3RhbXAgb2YgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdGhhdCBoYXZlIGVsYXBzZWQgc2luY2VcbiAqIHRoZSBVbml4IGVwb2NoICgxIEphbnVhcnkgMTk3MCAwMDowMDowMCBVVEMpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMi40LjBcbiAqIEBjYXRlZ29yeSBEYXRlXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSB0aW1lc3RhbXAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uZGVmZXIoZnVuY3Rpb24oc3RhbXApIHtcbiAqICAgY29uc29sZS5sb2coXy5ub3coKSAtIHN0YW1wKTtcbiAqIH0sIF8ubm93KCkpO1xuICogLy8gPT4gTG9ncyB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBpdCB0b29rIGZvciB0aGUgZGVmZXJyZWQgaW52b2NhdGlvbi5cbiAqL1xudmFyIG5vdyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gcm9vdC5EYXRlLm5vdygpO1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgZGVib3VuY2VkIGZ1bmN0aW9uIHRoYXQgZGVsYXlzIGludm9raW5nIGBmdW5jYCB1bnRpbCBhZnRlciBgd2FpdGBcbiAqIG1pbGxpc2Vjb25kcyBoYXZlIGVsYXBzZWQgc2luY2UgdGhlIGxhc3QgdGltZSB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uIHdhc1xuICogaW52b2tlZC4gVGhlIGRlYm91bmNlZCBmdW5jdGlvbiBjb21lcyB3aXRoIGEgYGNhbmNlbGAgbWV0aG9kIHRvIGNhbmNlbFxuICogZGVsYXllZCBgZnVuY2AgaW52b2NhdGlvbnMgYW5kIGEgYGZsdXNoYCBtZXRob2QgdG8gaW1tZWRpYXRlbHkgaW52b2tlIHRoZW0uXG4gKiBQcm92aWRlIGBvcHRpb25zYCB0byBpbmRpY2F0ZSB3aGV0aGVyIGBmdW5jYCBzaG91bGQgYmUgaW52b2tlZCBvbiB0aGVcbiAqIGxlYWRpbmcgYW5kL29yIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIGB3YWl0YCB0aW1lb3V0LiBUaGUgYGZ1bmNgIGlzIGludm9rZWRcbiAqIHdpdGggdGhlIGxhc3QgYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24uIFN1YnNlcXVlbnRcbiAqIGNhbGxzIHRvIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gcmV0dXJuIHRoZSByZXN1bHQgb2YgdGhlIGxhc3QgYGZ1bmNgXG4gKiBpbnZvY2F0aW9uLlxuICpcbiAqICoqTm90ZToqKiBJZiBgbGVhZGluZ2AgYW5kIGB0cmFpbGluZ2Agb3B0aW9ucyBhcmUgYHRydWVgLCBgZnVuY2AgaXNcbiAqIGludm9rZWQgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQgb25seSBpZiB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uXG4gKiBpcyBpbnZva2VkIG1vcmUgdGhhbiBvbmNlIGR1cmluZyB0aGUgYHdhaXRgIHRpbWVvdXQuXG4gKlxuICogSWYgYHdhaXRgIGlzIGAwYCBhbmQgYGxlYWRpbmdgIGlzIGBmYWxzZWAsIGBmdW5jYCBpbnZvY2F0aW9uIGlzIGRlZmVycmVkXG4gKiB1bnRpbCB0byB0aGUgbmV4dCB0aWNrLCBzaW1pbGFyIHRvIGBzZXRUaW1lb3V0YCB3aXRoIGEgdGltZW91dCBvZiBgMGAuXG4gKlxuICogU2VlIFtEYXZpZCBDb3JiYWNobydzIGFydGljbGVdKGh0dHBzOi8vY3NzLXRyaWNrcy5jb20vZGVib3VuY2luZy10aHJvdHRsaW5nLWV4cGxhaW5lZC1leGFtcGxlcy8pXG4gKiBmb3IgZGV0YWlscyBvdmVyIHRoZSBkaWZmZXJlbmNlcyBiZXR3ZWVuIGBfLmRlYm91bmNlYCBhbmQgYF8udGhyb3R0bGVgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVib3VuY2UuXG4gKiBAcGFyYW0ge251bWJlcn0gW3dhaXQ9MF0gVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVsYXkuXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIG9iamVjdC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMubGVhZGluZz1mYWxzZV1cbiAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSBsZWFkaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMubWF4V2FpdF1cbiAqICBUaGUgbWF4aW11bSB0aW1lIGBmdW5jYCBpcyBhbGxvd2VkIHRvIGJlIGRlbGF5ZWQgYmVmb3JlIGl0J3MgaW52b2tlZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMudHJhaWxpbmc9dHJ1ZV1cbiAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZGVib3VuY2VkIGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqXG4gKiAvLyBBdm9pZCBjb3N0bHkgY2FsY3VsYXRpb25zIHdoaWxlIHRoZSB3aW5kb3cgc2l6ZSBpcyBpbiBmbHV4LlxuICogalF1ZXJ5KHdpbmRvdykub24oJ3Jlc2l6ZScsIF8uZGVib3VuY2UoY2FsY3VsYXRlTGF5b3V0LCAxNTApKTtcbiAqXG4gKiAvLyBJbnZva2UgYHNlbmRNYWlsYCB3aGVuIGNsaWNrZWQsIGRlYm91bmNpbmcgc3Vic2VxdWVudCBjYWxscy5cbiAqIGpRdWVyeShlbGVtZW50KS5vbignY2xpY2snLCBfLmRlYm91bmNlKHNlbmRNYWlsLCAzMDAsIHtcbiAqICAgJ2xlYWRpbmcnOiB0cnVlLFxuICogICAndHJhaWxpbmcnOiBmYWxzZVxuICogfSkpO1xuICpcbiAqIC8vIEVuc3VyZSBgYmF0Y2hMb2dgIGlzIGludm9rZWQgb25jZSBhZnRlciAxIHNlY29uZCBvZiBkZWJvdW5jZWQgY2FsbHMuXG4gKiB2YXIgZGVib3VuY2VkID0gXy5kZWJvdW5jZShiYXRjaExvZywgMjUwLCB7ICdtYXhXYWl0JzogMTAwMCB9KTtcbiAqIHZhciBzb3VyY2UgPSBuZXcgRXZlbnRTb3VyY2UoJy9zdHJlYW0nKTtcbiAqIGpRdWVyeShzb3VyY2UpLm9uKCdtZXNzYWdlJywgZGVib3VuY2VkKTtcbiAqXG4gKiAvLyBDYW5jZWwgdGhlIHRyYWlsaW5nIGRlYm91bmNlZCBpbnZvY2F0aW9uLlxuICogalF1ZXJ5KHdpbmRvdykub24oJ3BvcHN0YXRlJywgZGVib3VuY2VkLmNhbmNlbCk7XG4gKi9cbmZ1bmN0aW9uIGRlYm91bmNlKGZ1bmMsIHdhaXQsIG9wdGlvbnMpIHtcbiAgdmFyIGxhc3RBcmdzLFxuICAgICAgbGFzdFRoaXMsXG4gICAgICBtYXhXYWl0LFxuICAgICAgcmVzdWx0LFxuICAgICAgdGltZXJJZCxcbiAgICAgIGxhc3RDYWxsVGltZSxcbiAgICAgIGxhc3RJbnZva2VUaW1lID0gMCxcbiAgICAgIGxlYWRpbmcgPSBmYWxzZSxcbiAgICAgIG1heGluZyA9IGZhbHNlLFxuICAgICAgdHJhaWxpbmcgPSB0cnVlO1xuXG4gIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICB9XG4gIHdhaXQgPSB0b051bWJlcih3YWl0KSB8fCAwO1xuICBpZiAoaXNPYmplY3Qob3B0aW9ucykpIHtcbiAgICBsZWFkaW5nID0gISFvcHRpb25zLmxlYWRpbmc7XG4gICAgbWF4aW5nID0gJ21heFdhaXQnIGluIG9wdGlvbnM7XG4gICAgbWF4V2FpdCA9IG1heGluZyA/IG5hdGl2ZU1heCh0b051bWJlcihvcHRpb25zLm1heFdhaXQpIHx8IDAsIHdhaXQpIDogbWF4V2FpdDtcbiAgICB0cmFpbGluZyA9ICd0cmFpbGluZycgaW4gb3B0aW9ucyA/ICEhb3B0aW9ucy50cmFpbGluZyA6IHRyYWlsaW5nO1xuICB9XG5cbiAgZnVuY3Rpb24gaW52b2tlRnVuYyh0aW1lKSB7XG4gICAgdmFyIGFyZ3MgPSBsYXN0QXJncyxcbiAgICAgICAgdGhpc0FyZyA9IGxhc3RUaGlzO1xuXG4gICAgbGFzdEFyZ3MgPSBsYXN0VGhpcyA9IHVuZGVmaW5lZDtcbiAgICBsYXN0SW52b2tlVGltZSA9IHRpbWU7XG4gICAgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gbGVhZGluZ0VkZ2UodGltZSkge1xuICAgIC8vIFJlc2V0IGFueSBgbWF4V2FpdGAgdGltZXIuXG4gICAgbGFzdEludm9rZVRpbWUgPSB0aW1lO1xuICAgIC8vIFN0YXJ0IHRoZSB0aW1lciBmb3IgdGhlIHRyYWlsaW5nIGVkZ2UuXG4gICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCB3YWl0KTtcbiAgICAvLyBJbnZva2UgdGhlIGxlYWRpbmcgZWRnZS5cbiAgICByZXR1cm4gbGVhZGluZyA/IGludm9rZUZ1bmModGltZSkgOiByZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiByZW1haW5pbmdXYWl0KHRpbWUpIHtcbiAgICB2YXIgdGltZVNpbmNlTGFzdENhbGwgPSB0aW1lIC0gbGFzdENhbGxUaW1lLFxuICAgICAgICB0aW1lU2luY2VMYXN0SW52b2tlID0gdGltZSAtIGxhc3RJbnZva2VUaW1lLFxuICAgICAgICByZXN1bHQgPSB3YWl0IC0gdGltZVNpbmNlTGFzdENhbGw7XG5cbiAgICByZXR1cm4gbWF4aW5nID8gbmF0aXZlTWluKHJlc3VsdCwgbWF4V2FpdCAtIHRpbWVTaW5jZUxhc3RJbnZva2UpIDogcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gc2hvdWxkSW52b2tlKHRpbWUpIHtcbiAgICB2YXIgdGltZVNpbmNlTGFzdENhbGwgPSB0aW1lIC0gbGFzdENhbGxUaW1lLFxuICAgICAgICB0aW1lU2luY2VMYXN0SW52b2tlID0gdGltZSAtIGxhc3RJbnZva2VUaW1lO1xuXG4gICAgLy8gRWl0aGVyIHRoaXMgaXMgdGhlIGZpcnN0IGNhbGwsIGFjdGl2aXR5IGhhcyBzdG9wcGVkIGFuZCB3ZSdyZSBhdCB0aGVcbiAgICAvLyB0cmFpbGluZyBlZGdlLCB0aGUgc3lzdGVtIHRpbWUgaGFzIGdvbmUgYmFja3dhcmRzIGFuZCB3ZSdyZSB0cmVhdGluZ1xuICAgIC8vIGl0IGFzIHRoZSB0cmFpbGluZyBlZGdlLCBvciB3ZSd2ZSBoaXQgdGhlIGBtYXhXYWl0YCBsaW1pdC5cbiAgICByZXR1cm4gKGxhc3RDYWxsVGltZSA9PT0gdW5kZWZpbmVkIHx8ICh0aW1lU2luY2VMYXN0Q2FsbCA+PSB3YWl0KSB8fFxuICAgICAgKHRpbWVTaW5jZUxhc3RDYWxsIDwgMCkgfHwgKG1heGluZyAmJiB0aW1lU2luY2VMYXN0SW52b2tlID49IG1heFdhaXQpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRpbWVyRXhwaXJlZCgpIHtcbiAgICB2YXIgdGltZSA9IG5vdygpO1xuICAgIGlmIChzaG91bGRJbnZva2UodGltZSkpIHtcbiAgICAgIHJldHVybiB0cmFpbGluZ0VkZ2UodGltZSk7XG4gICAgfVxuICAgIC8vIFJlc3RhcnQgdGhlIHRpbWVyLlxuICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgcmVtYWluaW5nV2FpdCh0aW1lKSk7XG4gIH1cblxuICBmdW5jdGlvbiB0cmFpbGluZ0VkZ2UodGltZSkge1xuICAgIHRpbWVySWQgPSB1bmRlZmluZWQ7XG5cbiAgICAvLyBPbmx5IGludm9rZSBpZiB3ZSBoYXZlIGBsYXN0QXJnc2Agd2hpY2ggbWVhbnMgYGZ1bmNgIGhhcyBiZWVuXG4gICAgLy8gZGVib3VuY2VkIGF0IGxlYXN0IG9uY2UuXG4gICAgaWYgKHRyYWlsaW5nICYmIGxhc3RBcmdzKSB7XG4gICAgICByZXR1cm4gaW52b2tlRnVuYyh0aW1lKTtcbiAgICB9XG4gICAgbGFzdEFyZ3MgPSBsYXN0VGhpcyA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gY2FuY2VsKCkge1xuICAgIGlmICh0aW1lcklkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lcklkKTtcbiAgICB9XG4gICAgbGFzdEludm9rZVRpbWUgPSAwO1xuICAgIGxhc3RBcmdzID0gbGFzdENhbGxUaW1lID0gbGFzdFRoaXMgPSB0aW1lcklkID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgZnVuY3Rpb24gZmx1c2goKSB7XG4gICAgcmV0dXJuIHRpbWVySWQgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IHRyYWlsaW5nRWRnZShub3coKSk7XG4gIH1cblxuICBmdW5jdGlvbiBkZWJvdW5jZWQoKSB7XG4gICAgdmFyIHRpbWUgPSBub3coKSxcbiAgICAgICAgaXNJbnZva2luZyA9IHNob3VsZEludm9rZSh0aW1lKTtcblxuICAgIGxhc3RBcmdzID0gYXJndW1lbnRzO1xuICAgIGxhc3RUaGlzID0gdGhpcztcbiAgICBsYXN0Q2FsbFRpbWUgPSB0aW1lO1xuXG4gICAgaWYgKGlzSW52b2tpbmcpIHtcbiAgICAgIGlmICh0aW1lcklkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGxlYWRpbmdFZGdlKGxhc3RDYWxsVGltZSk7XG4gICAgICB9XG4gICAgICBpZiAobWF4aW5nKSB7XG4gICAgICAgIC8vIEhhbmRsZSBpbnZvY2F0aW9ucyBpbiBhIHRpZ2h0IGxvb3AuXG4gICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgICAgIHJldHVybiBpbnZva2VGdW5jKGxhc3RDYWxsVGltZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0aW1lcklkID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgZGVib3VuY2VkLmNhbmNlbCA9IGNhbmNlbDtcbiAgZGVib3VuY2VkLmZsdXNoID0gZmx1c2g7XG4gIHJldHVybiBkZWJvdW5jZWQ7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgdGhlXG4gKiBbbGFuZ3VhZ2UgdHlwZV0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMpXG4gKiBvZiBgT2JqZWN0YC4gKGUuZy4gYXJyYXlzLCBmdW5jdGlvbnMsIG9iamVjdHMsIHJlZ2V4ZXMsIGBuZXcgTnVtYmVyKDApYCwgYW5kIGBuZXcgU3RyaW5nKCcnKWApXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3Qoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KF8ubm9vcCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gISF2YWx1ZSAmJiAodHlwZSA9PSAnb2JqZWN0JyB8fCB0eXBlID09ICdmdW5jdGlvbicpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLiBBIHZhbHVlIGlzIG9iamVjdC1saWtlIGlmIGl0J3Mgbm90IGBudWxsYFxuICogYW5kIGhhcyBhIGB0eXBlb2ZgIHJlc3VsdCBvZiBcIm9iamVjdFwiLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gIHJldHVybiAhIXZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jztcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFN5bWJvbGAgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHN5bWJvbCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzU3ltYm9sKFN5bWJvbC5pdGVyYXRvcik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1N5bWJvbCgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N5bWJvbCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdzeW1ib2wnIHx8XG4gICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgb2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT0gc3ltYm9sVGFnKTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgbnVtYmVyLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbnVtYmVyLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRvTnVtYmVyKDMuMik7XG4gKiAvLyA9PiAzLjJcbiAqXG4gKiBfLnRvTnVtYmVyKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gNWUtMzI0XG4gKlxuICogXy50b051bWJlcihJbmZpbml0eSk7XG4gKiAvLyA9PiBJbmZpbml0eVxuICpcbiAqIF8udG9OdW1iZXIoJzMuMicpO1xuICogLy8gPT4gMy4yXG4gKi9cbmZ1bmN0aW9uIHRvTnVtYmVyKHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgaWYgKGlzU3ltYm9sKHZhbHVlKSkge1xuICAgIHJldHVybiBOQU47XG4gIH1cbiAgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHZhciBvdGhlciA9IHR5cGVvZiB2YWx1ZS52YWx1ZU9mID09ICdmdW5jdGlvbicgPyB2YWx1ZS52YWx1ZU9mKCkgOiB2YWx1ZTtcbiAgICB2YWx1ZSA9IGlzT2JqZWN0KG90aGVyKSA/IChvdGhlciArICcnKSA6IG90aGVyO1xuICB9XG4gIGlmICh0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IDAgPyB2YWx1ZSA6ICt2YWx1ZTtcbiAgfVxuICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UocmVUcmltLCAnJyk7XG4gIHZhciBpc0JpbmFyeSA9IHJlSXNCaW5hcnkudGVzdCh2YWx1ZSk7XG4gIHJldHVybiAoaXNCaW5hcnkgfHwgcmVJc09jdGFsLnRlc3QodmFsdWUpKVxuICAgID8gZnJlZVBhcnNlSW50KHZhbHVlLnNsaWNlKDIpLCBpc0JpbmFyeSA/IDIgOiA4KVxuICAgIDogKHJlSXNCYWRIZXgudGVzdCh2YWx1ZSkgPyBOQU4gOiArdmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRlYm91bmNlO1xuIiwiLyoqXG4gKiBsb2Rhc2ggKEN1c3RvbSBCdWlsZCkgPGh0dHBzOi8vbG9kYXNoLmNvbS8+XG4gKiBCdWlsZDogYGxvZGFzaCBtb2R1bGFyaXplIGV4cG9ydHM9XCJucG1cIiAtbyAuL2BcbiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzIDxodHRwczovL2pxdWVyeS5vcmcvPlxuICogUmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UgPGh0dHBzOi8vbG9kYXNoLmNvbS9saWNlbnNlPlxuICogQmFzZWQgb24gVW5kZXJzY29yZS5qcyAxLjguMyA8aHR0cDovL3VuZGVyc2NvcmVqcy5vcmcvTElDRU5TRT5cbiAqIENvcHlyaWdodCBKZXJlbXkgQXNoa2VuYXMsIERvY3VtZW50Q2xvdWQgYW5kIEludmVzdGlnYXRpdmUgUmVwb3J0ZXJzICYgRWRpdG9yc1xuICovXG5cbi8qKiBVc2VkIGFzIHRoZSBgVHlwZUVycm9yYCBtZXNzYWdlIGZvciBcIkZ1bmN0aW9uc1wiIG1ldGhvZHMuICovXG52YXIgRlVOQ19FUlJPUl9URVhUID0gJ0V4cGVjdGVkIGEgZnVuY3Rpb24nO1xuXG4vKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBOQU4gPSAwIC8gMDtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIHN5bWJvbFRhZyA9ICdbb2JqZWN0IFN5bWJvbF0nO1xuXG4vKiogVXNlZCB0byBtYXRjaCBsZWFkaW5nIGFuZCB0cmFpbGluZyB3aGl0ZXNwYWNlLiAqL1xudmFyIHJlVHJpbSA9IC9eXFxzK3xcXHMrJC9nO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgYmFkIHNpZ25lZCBoZXhhZGVjaW1hbCBzdHJpbmcgdmFsdWVzLiAqL1xudmFyIHJlSXNCYWRIZXggPSAvXlstK10weFswLTlhLWZdKyQvaTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGJpbmFyeSBzdHJpbmcgdmFsdWVzLiAqL1xudmFyIHJlSXNCaW5hcnkgPSAvXjBiWzAxXSskL2k7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBvY3RhbCBzdHJpbmcgdmFsdWVzLiAqL1xudmFyIHJlSXNPY3RhbCA9IC9eMG9bMC03XSskL2k7XG5cbi8qKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB3aXRob3V0IGEgZGVwZW5kZW5jeSBvbiBgcm9vdGAuICovXG52YXIgZnJlZVBhcnNlSW50ID0gcGFyc2VJbnQ7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsICYmIGdsb2JhbC5PYmplY3QgPT09IE9iamVjdCAmJiBnbG9iYWw7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG52YXIgZnJlZVNlbGYgPSB0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmICYmIHNlbGYuT2JqZWN0ID09PSBPYmplY3QgJiYgc2VsZjtcblxuLyoqIFVzZWQgYXMgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QuICovXG52YXIgcm9vdCA9IGZyZWVHbG9iYWwgfHwgZnJlZVNlbGYgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVNYXggPSBNYXRoLm1heCxcbiAgICBuYXRpdmVNaW4gPSBNYXRoLm1pbjtcblxuLyoqXG4gKiBHZXRzIHRoZSB0aW1lc3RhbXAgb2YgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdGhhdCBoYXZlIGVsYXBzZWQgc2luY2VcbiAqIHRoZSBVbml4IGVwb2NoICgxIEphbnVhcnkgMTk3MCAwMDowMDowMCBVVEMpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMi40LjBcbiAqIEBjYXRlZ29yeSBEYXRlXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSB0aW1lc3RhbXAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uZGVmZXIoZnVuY3Rpb24oc3RhbXApIHtcbiAqICAgY29uc29sZS5sb2coXy5ub3coKSAtIHN0YW1wKTtcbiAqIH0sIF8ubm93KCkpO1xuICogLy8gPT4gTG9ncyB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBpdCB0b29rIGZvciB0aGUgZGVmZXJyZWQgaW52b2NhdGlvbi5cbiAqL1xudmFyIG5vdyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gcm9vdC5EYXRlLm5vdygpO1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgZGVib3VuY2VkIGZ1bmN0aW9uIHRoYXQgZGVsYXlzIGludm9raW5nIGBmdW5jYCB1bnRpbCBhZnRlciBgd2FpdGBcbiAqIG1pbGxpc2Vjb25kcyBoYXZlIGVsYXBzZWQgc2luY2UgdGhlIGxhc3QgdGltZSB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uIHdhc1xuICogaW52b2tlZC4gVGhlIGRlYm91bmNlZCBmdW5jdGlvbiBjb21lcyB3aXRoIGEgYGNhbmNlbGAgbWV0aG9kIHRvIGNhbmNlbFxuICogZGVsYXllZCBgZnVuY2AgaW52b2NhdGlvbnMgYW5kIGEgYGZsdXNoYCBtZXRob2QgdG8gaW1tZWRpYXRlbHkgaW52b2tlIHRoZW0uXG4gKiBQcm92aWRlIGBvcHRpb25zYCB0byBpbmRpY2F0ZSB3aGV0aGVyIGBmdW5jYCBzaG91bGQgYmUgaW52b2tlZCBvbiB0aGVcbiAqIGxlYWRpbmcgYW5kL29yIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIGB3YWl0YCB0aW1lb3V0LiBUaGUgYGZ1bmNgIGlzIGludm9rZWRcbiAqIHdpdGggdGhlIGxhc3QgYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24uIFN1YnNlcXVlbnRcbiAqIGNhbGxzIHRvIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gcmV0dXJuIHRoZSByZXN1bHQgb2YgdGhlIGxhc3QgYGZ1bmNgXG4gKiBpbnZvY2F0aW9uLlxuICpcbiAqICoqTm90ZToqKiBJZiBgbGVhZGluZ2AgYW5kIGB0cmFpbGluZ2Agb3B0aW9ucyBhcmUgYHRydWVgLCBgZnVuY2AgaXNcbiAqIGludm9rZWQgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQgb25seSBpZiB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uXG4gKiBpcyBpbnZva2VkIG1vcmUgdGhhbiBvbmNlIGR1cmluZyB0aGUgYHdhaXRgIHRpbWVvdXQuXG4gKlxuICogSWYgYHdhaXRgIGlzIGAwYCBhbmQgYGxlYWRpbmdgIGlzIGBmYWxzZWAsIGBmdW5jYCBpbnZvY2F0aW9uIGlzIGRlZmVycmVkXG4gKiB1bnRpbCB0byB0aGUgbmV4dCB0aWNrLCBzaW1pbGFyIHRvIGBzZXRUaW1lb3V0YCB3aXRoIGEgdGltZW91dCBvZiBgMGAuXG4gKlxuICogU2VlIFtEYXZpZCBDb3JiYWNobydzIGFydGljbGVdKGh0dHBzOi8vY3NzLXRyaWNrcy5jb20vZGVib3VuY2luZy10aHJvdHRsaW5nLWV4cGxhaW5lZC1leGFtcGxlcy8pXG4gKiBmb3IgZGV0YWlscyBvdmVyIHRoZSBkaWZmZXJlbmNlcyBiZXR3ZWVuIGBfLmRlYm91bmNlYCBhbmQgYF8udGhyb3R0bGVgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVib3VuY2UuXG4gKiBAcGFyYW0ge251bWJlcn0gW3dhaXQ9MF0gVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVsYXkuXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIG9iamVjdC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMubGVhZGluZz1mYWxzZV1cbiAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSBsZWFkaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMubWF4V2FpdF1cbiAqICBUaGUgbWF4aW11bSB0aW1lIGBmdW5jYCBpcyBhbGxvd2VkIHRvIGJlIGRlbGF5ZWQgYmVmb3JlIGl0J3MgaW52b2tlZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMudHJhaWxpbmc9dHJ1ZV1cbiAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZGVib3VuY2VkIGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqXG4gKiAvLyBBdm9pZCBjb3N0bHkgY2FsY3VsYXRpb25zIHdoaWxlIHRoZSB3aW5kb3cgc2l6ZSBpcyBpbiBmbHV4LlxuICogalF1ZXJ5KHdpbmRvdykub24oJ3Jlc2l6ZScsIF8uZGVib3VuY2UoY2FsY3VsYXRlTGF5b3V0LCAxNTApKTtcbiAqXG4gKiAvLyBJbnZva2UgYHNlbmRNYWlsYCB3aGVuIGNsaWNrZWQsIGRlYm91bmNpbmcgc3Vic2VxdWVudCBjYWxscy5cbiAqIGpRdWVyeShlbGVtZW50KS5vbignY2xpY2snLCBfLmRlYm91bmNlKHNlbmRNYWlsLCAzMDAsIHtcbiAqICAgJ2xlYWRpbmcnOiB0cnVlLFxuICogICAndHJhaWxpbmcnOiBmYWxzZVxuICogfSkpO1xuICpcbiAqIC8vIEVuc3VyZSBgYmF0Y2hMb2dgIGlzIGludm9rZWQgb25jZSBhZnRlciAxIHNlY29uZCBvZiBkZWJvdW5jZWQgY2FsbHMuXG4gKiB2YXIgZGVib3VuY2VkID0gXy5kZWJvdW5jZShiYXRjaExvZywgMjUwLCB7ICdtYXhXYWl0JzogMTAwMCB9KTtcbiAqIHZhciBzb3VyY2UgPSBuZXcgRXZlbnRTb3VyY2UoJy9zdHJlYW0nKTtcbiAqIGpRdWVyeShzb3VyY2UpLm9uKCdtZXNzYWdlJywgZGVib3VuY2VkKTtcbiAqXG4gKiAvLyBDYW5jZWwgdGhlIHRyYWlsaW5nIGRlYm91bmNlZCBpbnZvY2F0aW9uLlxuICogalF1ZXJ5KHdpbmRvdykub24oJ3BvcHN0YXRlJywgZGVib3VuY2VkLmNhbmNlbCk7XG4gKi9cbmZ1bmN0aW9uIGRlYm91bmNlKGZ1bmMsIHdhaXQsIG9wdGlvbnMpIHtcbiAgdmFyIGxhc3RBcmdzLFxuICAgICAgbGFzdFRoaXMsXG4gICAgICBtYXhXYWl0LFxuICAgICAgcmVzdWx0LFxuICAgICAgdGltZXJJZCxcbiAgICAgIGxhc3RDYWxsVGltZSxcbiAgICAgIGxhc3RJbnZva2VUaW1lID0gMCxcbiAgICAgIGxlYWRpbmcgPSBmYWxzZSxcbiAgICAgIG1heGluZyA9IGZhbHNlLFxuICAgICAgdHJhaWxpbmcgPSB0cnVlO1xuXG4gIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICB9XG4gIHdhaXQgPSB0b051bWJlcih3YWl0KSB8fCAwO1xuICBpZiAoaXNPYmplY3Qob3B0aW9ucykpIHtcbiAgICBsZWFkaW5nID0gISFvcHRpb25zLmxlYWRpbmc7XG4gICAgbWF4aW5nID0gJ21heFdhaXQnIGluIG9wdGlvbnM7XG4gICAgbWF4V2FpdCA9IG1heGluZyA/IG5hdGl2ZU1heCh0b051bWJlcihvcHRpb25zLm1heFdhaXQpIHx8IDAsIHdhaXQpIDogbWF4V2FpdDtcbiAgICB0cmFpbGluZyA9ICd0cmFpbGluZycgaW4gb3B0aW9ucyA/ICEhb3B0aW9ucy50cmFpbGluZyA6IHRyYWlsaW5nO1xuICB9XG5cbiAgZnVuY3Rpb24gaW52b2tlRnVuYyh0aW1lKSB7XG4gICAgdmFyIGFyZ3MgPSBsYXN0QXJncyxcbiAgICAgICAgdGhpc0FyZyA9IGxhc3RUaGlzO1xuXG4gICAgbGFzdEFyZ3MgPSBsYXN0VGhpcyA9IHVuZGVmaW5lZDtcbiAgICBsYXN0SW52b2tlVGltZSA9IHRpbWU7XG4gICAgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gbGVhZGluZ0VkZ2UodGltZSkge1xuICAgIC8vIFJlc2V0IGFueSBgbWF4V2FpdGAgdGltZXIuXG4gICAgbGFzdEludm9rZVRpbWUgPSB0aW1lO1xuICAgIC8vIFN0YXJ0IHRoZSB0aW1lciBmb3IgdGhlIHRyYWlsaW5nIGVkZ2UuXG4gICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCB3YWl0KTtcbiAgICAvLyBJbnZva2UgdGhlIGxlYWRpbmcgZWRnZS5cbiAgICByZXR1cm4gbGVhZGluZyA/IGludm9rZUZ1bmModGltZSkgOiByZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiByZW1haW5pbmdXYWl0KHRpbWUpIHtcbiAgICB2YXIgdGltZVNpbmNlTGFzdENhbGwgPSB0aW1lIC0gbGFzdENhbGxUaW1lLFxuICAgICAgICB0aW1lU2luY2VMYXN0SW52b2tlID0gdGltZSAtIGxhc3RJbnZva2VUaW1lLFxuICAgICAgICByZXN1bHQgPSB3YWl0IC0gdGltZVNpbmNlTGFzdENhbGw7XG5cbiAgICByZXR1cm4gbWF4aW5nID8gbmF0aXZlTWluKHJlc3VsdCwgbWF4V2FpdCAtIHRpbWVTaW5jZUxhc3RJbnZva2UpIDogcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gc2hvdWxkSW52b2tlKHRpbWUpIHtcbiAgICB2YXIgdGltZVNpbmNlTGFzdENhbGwgPSB0aW1lIC0gbGFzdENhbGxUaW1lLFxuICAgICAgICB0aW1lU2luY2VMYXN0SW52b2tlID0gdGltZSAtIGxhc3RJbnZva2VUaW1lO1xuXG4gICAgLy8gRWl0aGVyIHRoaXMgaXMgdGhlIGZpcnN0IGNhbGwsIGFjdGl2aXR5IGhhcyBzdG9wcGVkIGFuZCB3ZSdyZSBhdCB0aGVcbiAgICAvLyB0cmFpbGluZyBlZGdlLCB0aGUgc3lzdGVtIHRpbWUgaGFzIGdvbmUgYmFja3dhcmRzIGFuZCB3ZSdyZSB0cmVhdGluZ1xuICAgIC8vIGl0IGFzIHRoZSB0cmFpbGluZyBlZGdlLCBvciB3ZSd2ZSBoaXQgdGhlIGBtYXhXYWl0YCBsaW1pdC5cbiAgICByZXR1cm4gKGxhc3RDYWxsVGltZSA9PT0gdW5kZWZpbmVkIHx8ICh0aW1lU2luY2VMYXN0Q2FsbCA+PSB3YWl0KSB8fFxuICAgICAgKHRpbWVTaW5jZUxhc3RDYWxsIDwgMCkgfHwgKG1heGluZyAmJiB0aW1lU2luY2VMYXN0SW52b2tlID49IG1heFdhaXQpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRpbWVyRXhwaXJlZCgpIHtcbiAgICB2YXIgdGltZSA9IG5vdygpO1xuICAgIGlmIChzaG91bGRJbnZva2UodGltZSkpIHtcbiAgICAgIHJldHVybiB0cmFpbGluZ0VkZ2UodGltZSk7XG4gICAgfVxuICAgIC8vIFJlc3RhcnQgdGhlIHRpbWVyLlxuICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgcmVtYWluaW5nV2FpdCh0aW1lKSk7XG4gIH1cblxuICBmdW5jdGlvbiB0cmFpbGluZ0VkZ2UodGltZSkge1xuICAgIHRpbWVySWQgPSB1bmRlZmluZWQ7XG5cbiAgICAvLyBPbmx5IGludm9rZSBpZiB3ZSBoYXZlIGBsYXN0QXJnc2Agd2hpY2ggbWVhbnMgYGZ1bmNgIGhhcyBiZWVuXG4gICAgLy8gZGVib3VuY2VkIGF0IGxlYXN0IG9uY2UuXG4gICAgaWYgKHRyYWlsaW5nICYmIGxhc3RBcmdzKSB7XG4gICAgICByZXR1cm4gaW52b2tlRnVuYyh0aW1lKTtcbiAgICB9XG4gICAgbGFzdEFyZ3MgPSBsYXN0VGhpcyA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gY2FuY2VsKCkge1xuICAgIGlmICh0aW1lcklkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lcklkKTtcbiAgICB9XG4gICAgbGFzdEludm9rZVRpbWUgPSAwO1xuICAgIGxhc3RBcmdzID0gbGFzdENhbGxUaW1lID0gbGFzdFRoaXMgPSB0aW1lcklkID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgZnVuY3Rpb24gZmx1c2goKSB7XG4gICAgcmV0dXJuIHRpbWVySWQgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IHRyYWlsaW5nRWRnZShub3coKSk7XG4gIH1cblxuICBmdW5jdGlvbiBkZWJvdW5jZWQoKSB7XG4gICAgdmFyIHRpbWUgPSBub3coKSxcbiAgICAgICAgaXNJbnZva2luZyA9IHNob3VsZEludm9rZSh0aW1lKTtcblxuICAgIGxhc3RBcmdzID0gYXJndW1lbnRzO1xuICAgIGxhc3RUaGlzID0gdGhpcztcbiAgICBsYXN0Q2FsbFRpbWUgPSB0aW1lO1xuXG4gICAgaWYgKGlzSW52b2tpbmcpIHtcbiAgICAgIGlmICh0aW1lcklkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGxlYWRpbmdFZGdlKGxhc3RDYWxsVGltZSk7XG4gICAgICB9XG4gICAgICBpZiAobWF4aW5nKSB7XG4gICAgICAgIC8vIEhhbmRsZSBpbnZvY2F0aW9ucyBpbiBhIHRpZ2h0IGxvb3AuXG4gICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgICAgIHJldHVybiBpbnZva2VGdW5jKGxhc3RDYWxsVGltZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0aW1lcklkID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgZGVib3VuY2VkLmNhbmNlbCA9IGNhbmNlbDtcbiAgZGVib3VuY2VkLmZsdXNoID0gZmx1c2g7XG4gIHJldHVybiBkZWJvdW5jZWQ7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIHRocm90dGxlZCBmdW5jdGlvbiB0aGF0IG9ubHkgaW52b2tlcyBgZnVuY2AgYXQgbW9zdCBvbmNlIHBlclxuICogZXZlcnkgYHdhaXRgIG1pbGxpc2Vjb25kcy4gVGhlIHRocm90dGxlZCBmdW5jdGlvbiBjb21lcyB3aXRoIGEgYGNhbmNlbGBcbiAqIG1ldGhvZCB0byBjYW5jZWwgZGVsYXllZCBgZnVuY2AgaW52b2NhdGlvbnMgYW5kIGEgYGZsdXNoYCBtZXRob2QgdG9cbiAqIGltbWVkaWF0ZWx5IGludm9rZSB0aGVtLiBQcm92aWRlIGBvcHRpb25zYCB0byBpbmRpY2F0ZSB3aGV0aGVyIGBmdW5jYFxuICogc2hvdWxkIGJlIGludm9rZWQgb24gdGhlIGxlYWRpbmcgYW5kL29yIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIGB3YWl0YFxuICogdGltZW91dC4gVGhlIGBmdW5jYCBpcyBpbnZva2VkIHdpdGggdGhlIGxhc3QgYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZVxuICogdGhyb3R0bGVkIGZ1bmN0aW9uLiBTdWJzZXF1ZW50IGNhbGxzIHRvIHRoZSB0aHJvdHRsZWQgZnVuY3Rpb24gcmV0dXJuIHRoZVxuICogcmVzdWx0IG9mIHRoZSBsYXN0IGBmdW5jYCBpbnZvY2F0aW9uLlxuICpcbiAqICoqTm90ZToqKiBJZiBgbGVhZGluZ2AgYW5kIGB0cmFpbGluZ2Agb3B0aW9ucyBhcmUgYHRydWVgLCBgZnVuY2AgaXNcbiAqIGludm9rZWQgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQgb25seSBpZiB0aGUgdGhyb3R0bGVkIGZ1bmN0aW9uXG4gKiBpcyBpbnZva2VkIG1vcmUgdGhhbiBvbmNlIGR1cmluZyB0aGUgYHdhaXRgIHRpbWVvdXQuXG4gKlxuICogSWYgYHdhaXRgIGlzIGAwYCBhbmQgYGxlYWRpbmdgIGlzIGBmYWxzZWAsIGBmdW5jYCBpbnZvY2F0aW9uIGlzIGRlZmVycmVkXG4gKiB1bnRpbCB0byB0aGUgbmV4dCB0aWNrLCBzaW1pbGFyIHRvIGBzZXRUaW1lb3V0YCB3aXRoIGEgdGltZW91dCBvZiBgMGAuXG4gKlxuICogU2VlIFtEYXZpZCBDb3JiYWNobydzIGFydGljbGVdKGh0dHBzOi8vY3NzLXRyaWNrcy5jb20vZGVib3VuY2luZy10aHJvdHRsaW5nLWV4cGxhaW5lZC1leGFtcGxlcy8pXG4gKiBmb3IgZGV0YWlscyBvdmVyIHRoZSBkaWZmZXJlbmNlcyBiZXR3ZWVuIGBfLnRocm90dGxlYCBhbmQgYF8uZGVib3VuY2VgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gdGhyb3R0bGUuXG4gKiBAcGFyYW0ge251bWJlcn0gW3dhaXQ9MF0gVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gdGhyb3R0bGUgaW52b2NhdGlvbnMgdG8uXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIG9iamVjdC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMubGVhZGluZz10cnVlXVxuICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIGxlYWRpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMudHJhaWxpbmc9dHJ1ZV1cbiAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgdGhyb3R0bGVkIGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqXG4gKiAvLyBBdm9pZCBleGNlc3NpdmVseSB1cGRhdGluZyB0aGUgcG9zaXRpb24gd2hpbGUgc2Nyb2xsaW5nLlxuICogalF1ZXJ5KHdpbmRvdykub24oJ3Njcm9sbCcsIF8udGhyb3R0bGUodXBkYXRlUG9zaXRpb24sIDEwMCkpO1xuICpcbiAqIC8vIEludm9rZSBgcmVuZXdUb2tlbmAgd2hlbiB0aGUgY2xpY2sgZXZlbnQgaXMgZmlyZWQsIGJ1dCBub3QgbW9yZSB0aGFuIG9uY2UgZXZlcnkgNSBtaW51dGVzLlxuICogdmFyIHRocm90dGxlZCA9IF8udGhyb3R0bGUocmVuZXdUb2tlbiwgMzAwMDAwLCB7ICd0cmFpbGluZyc6IGZhbHNlIH0pO1xuICogalF1ZXJ5KGVsZW1lbnQpLm9uKCdjbGljaycsIHRocm90dGxlZCk7XG4gKlxuICogLy8gQ2FuY2VsIHRoZSB0cmFpbGluZyB0aHJvdHRsZWQgaW52b2NhdGlvbi5cbiAqIGpRdWVyeSh3aW5kb3cpLm9uKCdwb3BzdGF0ZScsIHRocm90dGxlZC5jYW5jZWwpO1xuICovXG5mdW5jdGlvbiB0aHJvdHRsZShmdW5jLCB3YWl0LCBvcHRpb25zKSB7XG4gIHZhciBsZWFkaW5nID0gdHJ1ZSxcbiAgICAgIHRyYWlsaW5nID0gdHJ1ZTtcblxuICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgfVxuICBpZiAoaXNPYmplY3Qob3B0aW9ucykpIHtcbiAgICBsZWFkaW5nID0gJ2xlYWRpbmcnIGluIG9wdGlvbnMgPyAhIW9wdGlvbnMubGVhZGluZyA6IGxlYWRpbmc7XG4gICAgdHJhaWxpbmcgPSAndHJhaWxpbmcnIGluIG9wdGlvbnMgPyAhIW9wdGlvbnMudHJhaWxpbmcgOiB0cmFpbGluZztcbiAgfVxuICByZXR1cm4gZGVib3VuY2UoZnVuYywgd2FpdCwge1xuICAgICdsZWFkaW5nJzogbGVhZGluZyxcbiAgICAnbWF4V2FpdCc6IHdhaXQsXG4gICAgJ3RyYWlsaW5nJzogdHJhaWxpbmdcbiAgfSk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgdGhlXG4gKiBbbGFuZ3VhZ2UgdHlwZV0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMpXG4gKiBvZiBgT2JqZWN0YC4gKGUuZy4gYXJyYXlzLCBmdW5jdGlvbnMsIG9iamVjdHMsIHJlZ2V4ZXMsIGBuZXcgTnVtYmVyKDApYCwgYW5kIGBuZXcgU3RyaW5nKCcnKWApXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3Qoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KF8ubm9vcCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gISF2YWx1ZSAmJiAodHlwZSA9PSAnb2JqZWN0JyB8fCB0eXBlID09ICdmdW5jdGlvbicpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLiBBIHZhbHVlIGlzIG9iamVjdC1saWtlIGlmIGl0J3Mgbm90IGBudWxsYFxuICogYW5kIGhhcyBhIGB0eXBlb2ZgIHJlc3VsdCBvZiBcIm9iamVjdFwiLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gIHJldHVybiAhIXZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jztcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFN5bWJvbGAgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHN5bWJvbCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzU3ltYm9sKFN5bWJvbC5pdGVyYXRvcik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1N5bWJvbCgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N5bWJvbCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdzeW1ib2wnIHx8XG4gICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgb2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT0gc3ltYm9sVGFnKTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgbnVtYmVyLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbnVtYmVyLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRvTnVtYmVyKDMuMik7XG4gKiAvLyA9PiAzLjJcbiAqXG4gKiBfLnRvTnVtYmVyKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gNWUtMzI0XG4gKlxuICogXy50b051bWJlcihJbmZpbml0eSk7XG4gKiAvLyA9PiBJbmZpbml0eVxuICpcbiAqIF8udG9OdW1iZXIoJzMuMicpO1xuICogLy8gPT4gMy4yXG4gKi9cbmZ1bmN0aW9uIHRvTnVtYmVyKHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgaWYgKGlzU3ltYm9sKHZhbHVlKSkge1xuICAgIHJldHVybiBOQU47XG4gIH1cbiAgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHZhciBvdGhlciA9IHR5cGVvZiB2YWx1ZS52YWx1ZU9mID09ICdmdW5jdGlvbicgPyB2YWx1ZS52YWx1ZU9mKCkgOiB2YWx1ZTtcbiAgICB2YWx1ZSA9IGlzT2JqZWN0KG90aGVyKSA/IChvdGhlciArICcnKSA6IG90aGVyO1xuICB9XG4gIGlmICh0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IDAgPyB2YWx1ZSA6ICt2YWx1ZTtcbiAgfVxuICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UocmVUcmltLCAnJyk7XG4gIHZhciBpc0JpbmFyeSA9IHJlSXNCaW5hcnkudGVzdCh2YWx1ZSk7XG4gIHJldHVybiAoaXNCaW5hcnkgfHwgcmVJc09jdGFsLnRlc3QodmFsdWUpKVxuICAgID8gZnJlZVBhcnNlSW50KHZhbHVlLnNsaWNlKDIpLCBpc0JpbmFyeSA/IDIgOiA4KVxuICAgIDogKHJlSXNCYWRIZXgudGVzdCh2YWx1ZSkgPyBOQU4gOiArdmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRocm90dGxlO1xuIiwiLyoqXG4gKiBtYXJrZWQgLSBhIG1hcmtkb3duIHBhcnNlclxuICogQ29weXJpZ2h0IChjKSAyMDExLTIwMTgsIENocmlzdG9waGVyIEplZmZyZXkuIChNSVQgTGljZW5zZWQpXG4gKiBodHRwczovL2dpdGh1Yi5jb20vbWFya2VkanMvbWFya2VkXG4gKi9cblxuOyhmdW5jdGlvbihyb290KSB7XG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQmxvY2stTGV2ZWwgR3JhbW1hclxuICovXG5cbnZhciBibG9jayA9IHtcbiAgbmV3bGluZTogL15cXG4rLyxcbiAgY29kZTogL14oIHs0fVteXFxuXStcXG4qKSsvLFxuICBmZW5jZXM6IC9eIHswLDN9KGB7Myx9fH57Myx9KShbXmB+XFxuXSopXFxuKD86fChbXFxzXFxTXSo/KVxcbikoPzogezAsM31cXDFbfmBdKiAqKD86XFxuK3wkKXwkKS8sXG4gIGhyOiAvXiB7MCwzfSgoPzotICopezMsfXwoPzpfICopezMsfXwoPzpcXCogKil7Myx9KSg/Olxcbit8JCkvLFxuICBoZWFkaW5nOiAvXiB7MCwzfSgjezEsNn0pICsoW15cXG5dKj8pKD86ICsjKyk/ICooPzpcXG4rfCQpLyxcbiAgYmxvY2txdW90ZTogL14oIHswLDN9PiA/KHBhcmFncmFwaHxbXlxcbl0qKSg/OlxcbnwkKSkrLyxcbiAgbGlzdDogL14oIHswLDN9KShidWxsKSBbXFxzXFxTXSs/KD86aHJ8ZGVmfFxcbnsyLH0oPyEgKSg/IVxcMWJ1bGwgKVxcbip8XFxzKiQpLyxcbiAgaHRtbDogJ14gezAsM30oPzonIC8vIG9wdGlvbmFsIGluZGVudGF0aW9uXG4gICAgKyAnPChzY3JpcHR8cHJlfHN0eWxlKVtcXFxccz5dW1xcXFxzXFxcXFNdKj8oPzo8L1xcXFwxPlteXFxcXG5dKlxcXFxuK3wkKScgLy8gKDEpXG4gICAgKyAnfGNvbW1lbnRbXlxcXFxuXSooXFxcXG4rfCQpJyAvLyAoMilcbiAgICArICd8PFxcXFw/W1xcXFxzXFxcXFNdKj9cXFxcPz5cXFxcbionIC8vICgzKVxuICAgICsgJ3w8IVtBLVpdW1xcXFxzXFxcXFNdKj8+XFxcXG4qJyAvLyAoNClcbiAgICArICd8PCFcXFxcW0NEQVRBXFxcXFtbXFxcXHNcXFxcU10qP1xcXFxdXFxcXF0+XFxcXG4qJyAvLyAoNSlcbiAgICArICd8PC8/KHRhZykoPzogK3xcXFxcbnwvPz4pW1xcXFxzXFxcXFNdKj8oPzpcXFxcbnsyLH18JCknIC8vICg2KVxuICAgICsgJ3w8KD8hc2NyaXB0fHByZXxzdHlsZSkoW2Etel1bXFxcXHctXSopKD86YXR0cmlidXRlKSo/ICovPz4oPz1bIFxcXFx0XSooPzpcXFxcbnwkKSlbXFxcXHNcXFxcU10qPyg/OlxcXFxuezIsfXwkKScgLy8gKDcpIG9wZW4gdGFnXG4gICAgKyAnfDwvKD8hc2NyaXB0fHByZXxzdHlsZSlbYS16XVtcXFxcdy1dKlxcXFxzKj4oPz1bIFxcXFx0XSooPzpcXFxcbnwkKSlbXFxcXHNcXFxcU10qPyg/OlxcXFxuezIsfXwkKScgLy8gKDcpIGNsb3NpbmcgdGFnXG4gICAgKyAnKScsXG4gIGRlZjogL14gezAsM31cXFsobGFiZWwpXFxdOiAqXFxuPyAqPD8oW15cXHM+XSspPj8oPzooPzogK1xcbj8gKnwgKlxcbiAqKSh0aXRsZSkpPyAqKD86XFxuK3wkKS8sXG4gIG5wdGFibGU6IG5vb3AsXG4gIHRhYmxlOiBub29wLFxuICBsaGVhZGluZzogL14oW15cXG5dKylcXG4gezAsM30oPSt8LSspICooPzpcXG4rfCQpLyxcbiAgLy8gcmVnZXggdGVtcGxhdGUsIHBsYWNlaG9sZGVycyB3aWxsIGJlIHJlcGxhY2VkIGFjY29yZGluZyB0byBkaWZmZXJlbnQgcGFyYWdyYXBoXG4gIC8vIGludGVycnVwdGlvbiBydWxlcyBvZiBjb21tb25tYXJrIGFuZCB0aGUgb3JpZ2luYWwgbWFya2Rvd24gc3BlYzpcbiAgX3BhcmFncmFwaDogL14oW15cXG5dKyg/Olxcbig/IWhyfGhlYWRpbmd8bGhlYWRpbmd8YmxvY2txdW90ZXxmZW5jZXN8bGlzdHxodG1sKVteXFxuXSspKikvLFxuICB0ZXh0OiAvXlteXFxuXSsvXG59O1xuXG5ibG9jay5fbGFiZWwgPSAvKD8hXFxzKlxcXSkoPzpcXFxcW1xcW1xcXV18W15cXFtcXF1dKSsvO1xuYmxvY2suX3RpdGxlID0gLyg/OlwiKD86XFxcXFwiP3xbXlwiXFxcXF0pKlwifCdbXidcXG5dKig/OlxcblteJ1xcbl0rKSpcXG4/J3xcXChbXigpXSpcXCkpLztcbmJsb2NrLmRlZiA9IGVkaXQoYmxvY2suZGVmKVxuICAucmVwbGFjZSgnbGFiZWwnLCBibG9jay5fbGFiZWwpXG4gIC5yZXBsYWNlKCd0aXRsZScsIGJsb2NrLl90aXRsZSlcbiAgLmdldFJlZ2V4KCk7XG5cbmJsb2NrLmJ1bGxldCA9IC8oPzpbKistXXxcXGR7MSw5fVxcLikvO1xuYmxvY2suaXRlbSA9IC9eKCAqKShidWxsKSA/W15cXG5dKig/Olxcbig/IVxcMWJ1bGwgPylbXlxcbl0qKSovO1xuYmxvY2suaXRlbSA9IGVkaXQoYmxvY2suaXRlbSwgJ2dtJylcbiAgLnJlcGxhY2UoL2J1bGwvZywgYmxvY2suYnVsbGV0KVxuICAuZ2V0UmVnZXgoKTtcblxuYmxvY2subGlzdCA9IGVkaXQoYmxvY2subGlzdClcbiAgLnJlcGxhY2UoL2J1bGwvZywgYmxvY2suYnVsbGV0KVxuICAucmVwbGFjZSgnaHInLCAnXFxcXG4rKD89XFxcXDE/KD86KD86LSAqKXszLH18KD86XyAqKXszLH18KD86XFxcXCogKil7Myx9KSg/OlxcXFxuK3wkKSknKVxuICAucmVwbGFjZSgnZGVmJywgJ1xcXFxuKyg/PScgKyBibG9jay5kZWYuc291cmNlICsgJyknKVxuICAuZ2V0UmVnZXgoKTtcblxuYmxvY2suX3RhZyA9ICdhZGRyZXNzfGFydGljbGV8YXNpZGV8YmFzZXxiYXNlZm9udHxibG9ja3F1b3RlfGJvZHl8Y2FwdGlvbidcbiAgKyAnfGNlbnRlcnxjb2x8Y29sZ3JvdXB8ZGR8ZGV0YWlsc3xkaWFsb2d8ZGlyfGRpdnxkbHxkdHxmaWVsZHNldHxmaWdjYXB0aW9uJ1xuICArICd8ZmlndXJlfGZvb3Rlcnxmb3JtfGZyYW1lfGZyYW1lc2V0fGhbMS02XXxoZWFkfGhlYWRlcnxocnxodG1sfGlmcmFtZSdcbiAgKyAnfGxlZ2VuZHxsaXxsaW5rfG1haW58bWVudXxtZW51aXRlbXxtZXRhfG5hdnxub2ZyYW1lc3xvbHxvcHRncm91cHxvcHRpb24nXG4gICsgJ3xwfHBhcmFtfHNlY3Rpb258c291cmNlfHN1bW1hcnl8dGFibGV8dGJvZHl8dGR8dGZvb3R8dGh8dGhlYWR8dGl0bGV8dHInXG4gICsgJ3x0cmFja3x1bCc7XG5ibG9jay5fY29tbWVudCA9IC88IS0tKD8hLT8+KVtcXHNcXFNdKj8tLT4vO1xuYmxvY2suaHRtbCA9IGVkaXQoYmxvY2suaHRtbCwgJ2knKVxuICAucmVwbGFjZSgnY29tbWVudCcsIGJsb2NrLl9jb21tZW50KVxuICAucmVwbGFjZSgndGFnJywgYmxvY2suX3RhZylcbiAgLnJlcGxhY2UoJ2F0dHJpYnV0ZScsIC8gK1thLXpBLVo6X11bXFx3LjotXSooPzogKj0gKlwiW15cIlxcbl0qXCJ8ICo9IConW14nXFxuXSonfCAqPSAqW15cXHNcIic9PD5gXSspPy8pXG4gIC5nZXRSZWdleCgpO1xuXG5ibG9jay5wYXJhZ3JhcGggPSBlZGl0KGJsb2NrLl9wYXJhZ3JhcGgpXG4gIC5yZXBsYWNlKCdocicsIGJsb2NrLmhyKVxuICAucmVwbGFjZSgnaGVhZGluZycsICcgezAsM30jezEsNn0gKycpXG4gIC5yZXBsYWNlKCd8bGhlYWRpbmcnLCAnJykgLy8gc2V0ZXggaGVhZGluZ3MgZG9uJ3QgaW50ZXJydXB0IGNvbW1vbm1hcmsgcGFyYWdyYXBoc1xuICAucmVwbGFjZSgnYmxvY2txdW90ZScsICcgezAsM30+JylcbiAgLnJlcGxhY2UoJ2ZlbmNlcycsICcgezAsM30oPzpgezMsfXx+ezMsfSlbXmBcXFxcbl0qXFxcXG4nKVxuICAucmVwbGFjZSgnbGlzdCcsICcgezAsM30oPzpbKistXXwxWy4pXSkgJykgLy8gb25seSBsaXN0cyBzdGFydGluZyBmcm9tIDEgY2FuIGludGVycnVwdFxuICAucmVwbGFjZSgnaHRtbCcsICc8Lz8oPzp0YWcpKD86ICt8XFxcXG58Lz8+KXw8KD86c2NyaXB0fHByZXxzdHlsZXwhLS0pJylcbiAgLnJlcGxhY2UoJ3RhZycsIGJsb2NrLl90YWcpIC8vIHBhcnMgY2FuIGJlIGludGVycnVwdGVkIGJ5IHR5cGUgKDYpIGh0bWwgYmxvY2tzXG4gIC5nZXRSZWdleCgpO1xuXG5ibG9jay5ibG9ja3F1b3RlID0gZWRpdChibG9jay5ibG9ja3F1b3RlKVxuICAucmVwbGFjZSgncGFyYWdyYXBoJywgYmxvY2sucGFyYWdyYXBoKVxuICAuZ2V0UmVnZXgoKTtcblxuLyoqXG4gKiBOb3JtYWwgQmxvY2sgR3JhbW1hclxuICovXG5cbmJsb2NrLm5vcm1hbCA9IG1lcmdlKHt9LCBibG9jayk7XG5cbi8qKlxuICogR0ZNIEJsb2NrIEdyYW1tYXJcbiAqL1xuXG5ibG9jay5nZm0gPSBtZXJnZSh7fSwgYmxvY2subm9ybWFsLCB7XG4gIG5wdGFibGU6IC9eICooW158XFxuIF0uKlxcfC4qKVxcbiAqKFstOl0rICpcXHxbLXwgOl0qKSg/OlxcbigoPzouKltePlxcbiBdLiooPzpcXG58JCkpKilcXG4qfCQpLyxcbiAgdGFibGU6IC9eICpcXHwoLispXFxuICpcXHw/KCAqWy06XStbLXwgOl0qKSg/OlxcbigoPzogKltePlxcbiBdLiooPzpcXG58JCkpKilcXG4qfCQpL1xufSk7XG5cbi8qKlxuICogUGVkYW50aWMgZ3JhbW1hciAob3JpZ2luYWwgSm9obiBHcnViZXIncyBsb29zZSBtYXJrZG93biBzcGVjaWZpY2F0aW9uKVxuICovXG5cbmJsb2NrLnBlZGFudGljID0gbWVyZ2Uoe30sIGJsb2NrLm5vcm1hbCwge1xuICBodG1sOiBlZGl0KFxuICAgICdeICooPzpjb21tZW50ICooPzpcXFxcbnxcXFxccyokKSdcbiAgICArICd8PCh0YWcpW1xcXFxzXFxcXFNdKz88L1xcXFwxPiAqKD86XFxcXG57Mix9fFxcXFxzKiQpJyAvLyBjbG9zZWQgdGFnXG4gICAgKyAnfDx0YWcoPzpcIlteXCJdKlwifFxcJ1teXFwnXSpcXCd8XFxcXHNbXlxcJ1wiLz5cXFxcc10qKSo/Lz8+ICooPzpcXFxcbnsyLH18XFxcXHMqJCkpJylcbiAgICAucmVwbGFjZSgnY29tbWVudCcsIGJsb2NrLl9jb21tZW50KVxuICAgIC5yZXBsYWNlKC90YWcvZywgJyg/ISg/OidcbiAgICAgICsgJ2F8ZW18c3Ryb25nfHNtYWxsfHN8Y2l0ZXxxfGRmbnxhYmJyfGRhdGF8dGltZXxjb2RlfHZhcnxzYW1wfGtiZHxzdWInXG4gICAgICArICd8c3VwfGl8Ynx1fG1hcmt8cnVieXxydHxycHxiZGl8YmRvfHNwYW58YnJ8d2JyfGluc3xkZWx8aW1nKSdcbiAgICAgICsgJ1xcXFxiKVxcXFx3Kyg/ITp8W15cXFxcd1xcXFxzQF0qQClcXFxcYicpXG4gICAgLmdldFJlZ2V4KCksXG4gIGRlZjogL14gKlxcWyhbXlxcXV0rKVxcXTogKjw/KFteXFxzPl0rKT4/KD86ICsoW1wiKF1bXlxcbl0rW1wiKV0pKT8gKig/Olxcbit8JCkvLFxuICBoZWFkaW5nOiAvXiAqKCN7MSw2fSkgKihbXlxcbl0rPykgKig/OiMrICopPyg/Olxcbit8JCkvLFxuICBmZW5jZXM6IG5vb3AsIC8vIGZlbmNlcyBub3Qgc3VwcG9ydGVkXG4gIHBhcmFncmFwaDogZWRpdChibG9jay5ub3JtYWwuX3BhcmFncmFwaClcbiAgICAucmVwbGFjZSgnaHInLCBibG9jay5ocilcbiAgICAucmVwbGFjZSgnaGVhZGluZycsICcgKiN7MSw2fSAqW15cXG5dJylcbiAgICAucmVwbGFjZSgnbGhlYWRpbmcnLCBibG9jay5saGVhZGluZylcbiAgICAucmVwbGFjZSgnYmxvY2txdW90ZScsICcgezAsM30+JylcbiAgICAucmVwbGFjZSgnfGZlbmNlcycsICcnKVxuICAgIC5yZXBsYWNlKCd8bGlzdCcsICcnKVxuICAgIC5yZXBsYWNlKCd8aHRtbCcsICcnKVxuICAgIC5nZXRSZWdleCgpXG59KTtcblxuLyoqXG4gKiBCbG9jayBMZXhlclxuICovXG5cbmZ1bmN0aW9uIExleGVyKG9wdGlvbnMpIHtcbiAgdGhpcy50b2tlbnMgPSBbXTtcbiAgdGhpcy50b2tlbnMubGlua3MgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zIHx8IG1hcmtlZC5kZWZhdWx0cztcbiAgdGhpcy5ydWxlcyA9IGJsb2NrLm5vcm1hbDtcblxuICBpZiAodGhpcy5vcHRpb25zLnBlZGFudGljKSB7XG4gICAgdGhpcy5ydWxlcyA9IGJsb2NrLnBlZGFudGljO1xuICB9IGVsc2UgaWYgKHRoaXMub3B0aW9ucy5nZm0pIHtcbiAgICB0aGlzLnJ1bGVzID0gYmxvY2suZ2ZtO1xuICB9XG59XG5cbi8qKlxuICogRXhwb3NlIEJsb2NrIFJ1bGVzXG4gKi9cblxuTGV4ZXIucnVsZXMgPSBibG9jaztcblxuLyoqXG4gKiBTdGF0aWMgTGV4IE1ldGhvZFxuICovXG5cbkxleGVyLmxleCA9IGZ1bmN0aW9uKHNyYywgb3B0aW9ucykge1xuICB2YXIgbGV4ZXIgPSBuZXcgTGV4ZXIob3B0aW9ucyk7XG4gIHJldHVybiBsZXhlci5sZXgoc3JjKTtcbn07XG5cbi8qKlxuICogUHJlcHJvY2Vzc2luZ1xuICovXG5cbkxleGVyLnByb3RvdHlwZS5sZXggPSBmdW5jdGlvbihzcmMpIHtcbiAgc3JjID0gc3JjXG4gICAgLnJlcGxhY2UoL1xcclxcbnxcXHIvZywgJ1xcbicpXG4gICAgLnJlcGxhY2UoL1xcdC9nLCAnICAgICcpXG4gICAgLnJlcGxhY2UoL1xcdTAwYTAvZywgJyAnKVxuICAgIC5yZXBsYWNlKC9cXHUyNDI0L2csICdcXG4nKTtcblxuICByZXR1cm4gdGhpcy50b2tlbihzcmMsIHRydWUpO1xufTtcblxuLyoqXG4gKiBMZXhpbmdcbiAqL1xuXG5MZXhlci5wcm90b3R5cGUudG9rZW4gPSBmdW5jdGlvbihzcmMsIHRvcCkge1xuICBzcmMgPSBzcmMucmVwbGFjZSgvXiArJC9nbSwgJycpO1xuICB2YXIgbmV4dCxcbiAgICAgIGxvb3NlLFxuICAgICAgY2FwLFxuICAgICAgYnVsbCxcbiAgICAgIGIsXG4gICAgICBpdGVtLFxuICAgICAgbGlzdFN0YXJ0LFxuICAgICAgbGlzdEl0ZW1zLFxuICAgICAgdCxcbiAgICAgIHNwYWNlLFxuICAgICAgaSxcbiAgICAgIHRhZyxcbiAgICAgIGwsXG4gICAgICBpc29yZGVyZWQsXG4gICAgICBpc3Rhc2ssXG4gICAgICBpc2NoZWNrZWQ7XG5cbiAgd2hpbGUgKHNyYykge1xuICAgIC8vIG5ld2xpbmVcbiAgICBpZiAoY2FwID0gdGhpcy5ydWxlcy5uZXdsaW5lLmV4ZWMoc3JjKSkge1xuICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTtcbiAgICAgIGlmIChjYXBbMF0ubGVuZ3RoID4gMSkge1xuICAgICAgICB0aGlzLnRva2Vucy5wdXNoKHtcbiAgICAgICAgICB0eXBlOiAnc3BhY2UnXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGNvZGVcbiAgICBpZiAoY2FwID0gdGhpcy5ydWxlcy5jb2RlLmV4ZWMoc3JjKSkge1xuICAgICAgdmFyIGxhc3RUb2tlbiA9IHRoaXMudG9rZW5zW3RoaXMudG9rZW5zLmxlbmd0aCAtIDFdO1xuICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTtcbiAgICAgIC8vIEFuIGluZGVudGVkIGNvZGUgYmxvY2sgY2Fubm90IGludGVycnVwdCBhIHBhcmFncmFwaC5cbiAgICAgIGlmIChsYXN0VG9rZW4gJiYgbGFzdFRva2VuLnR5cGUgPT09ICdwYXJhZ3JhcGgnKSB7XG4gICAgICAgIGxhc3RUb2tlbi50ZXh0ICs9ICdcXG4nICsgY2FwWzBdLnRyaW1SaWdodCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FwID0gY2FwWzBdLnJlcGxhY2UoL14gezR9L2dtLCAnJyk7XG4gICAgICAgIHRoaXMudG9rZW5zLnB1c2goe1xuICAgICAgICAgIHR5cGU6ICdjb2RlJyxcbiAgICAgICAgICBjb2RlQmxvY2tTdHlsZTogJ2luZGVudGVkJyxcbiAgICAgICAgICB0ZXh0OiAhdGhpcy5vcHRpb25zLnBlZGFudGljXG4gICAgICAgICAgICA/IHJ0cmltKGNhcCwgJ1xcbicpXG4gICAgICAgICAgICA6IGNhcFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIGZlbmNlc1xuICAgIGlmIChjYXAgPSB0aGlzLnJ1bGVzLmZlbmNlcy5leGVjKHNyYykpIHtcbiAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcoY2FwWzBdLmxlbmd0aCk7XG4gICAgICB0aGlzLnRva2Vucy5wdXNoKHtcbiAgICAgICAgdHlwZTogJ2NvZGUnLFxuICAgICAgICBsYW5nOiBjYXBbMl0gPyBjYXBbMl0udHJpbSgpIDogY2FwWzJdLFxuICAgICAgICB0ZXh0OiBjYXBbM10gfHwgJydcbiAgICAgIH0pO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gaGVhZGluZ1xuICAgIGlmIChjYXAgPSB0aGlzLnJ1bGVzLmhlYWRpbmcuZXhlYyhzcmMpKSB7XG4gICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKGNhcFswXS5sZW5ndGgpO1xuICAgICAgdGhpcy50b2tlbnMucHVzaCh7XG4gICAgICAgIHR5cGU6ICdoZWFkaW5nJyxcbiAgICAgICAgZGVwdGg6IGNhcFsxXS5sZW5ndGgsXG4gICAgICAgIHRleHQ6IGNhcFsyXVxuICAgICAgfSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyB0YWJsZSBubyBsZWFkaW5nIHBpcGUgKGdmbSlcbiAgICBpZiAoY2FwID0gdGhpcy5ydWxlcy5ucHRhYmxlLmV4ZWMoc3JjKSkge1xuICAgICAgaXRlbSA9IHtcbiAgICAgICAgdHlwZTogJ3RhYmxlJyxcbiAgICAgICAgaGVhZGVyOiBzcGxpdENlbGxzKGNhcFsxXS5yZXBsYWNlKC9eICp8ICpcXHwgKiQvZywgJycpKSxcbiAgICAgICAgYWxpZ246IGNhcFsyXS5yZXBsYWNlKC9eICp8XFx8ICokL2csICcnKS5zcGxpdCgvICpcXHwgKi8pLFxuICAgICAgICBjZWxsczogY2FwWzNdID8gY2FwWzNdLnJlcGxhY2UoL1xcbiQvLCAnJykuc3BsaXQoJ1xcbicpIDogW11cbiAgICAgIH07XG5cbiAgICAgIGlmIChpdGVtLmhlYWRlci5sZW5ndGggPT09IGl0ZW0uYWxpZ24ubGVuZ3RoKSB7XG4gICAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcoY2FwWzBdLmxlbmd0aCk7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGl0ZW0uYWxpZ24ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAoL14gKi0rOiAqJC8udGVzdChpdGVtLmFsaWduW2ldKSkge1xuICAgICAgICAgICAgaXRlbS5hbGlnbltpXSA9ICdyaWdodCc7XG4gICAgICAgICAgfSBlbHNlIGlmICgvXiAqOi0rOiAqJC8udGVzdChpdGVtLmFsaWduW2ldKSkge1xuICAgICAgICAgICAgaXRlbS5hbGlnbltpXSA9ICdjZW50ZXInO1xuICAgICAgICAgIH0gZWxzZSBpZiAoL14gKjotKyAqJC8udGVzdChpdGVtLmFsaWduW2ldKSkge1xuICAgICAgICAgICAgaXRlbS5hbGlnbltpXSA9ICdsZWZ0JztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaXRlbS5hbGlnbltpXSA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGl0ZW0uY2VsbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpdGVtLmNlbGxzW2ldID0gc3BsaXRDZWxscyhpdGVtLmNlbGxzW2ldLCBpdGVtLmhlYWRlci5sZW5ndGgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy50b2tlbnMucHVzaChpdGVtKTtcblxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBoclxuICAgIGlmIChjYXAgPSB0aGlzLnJ1bGVzLmhyLmV4ZWMoc3JjKSkge1xuICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTtcbiAgICAgIHRoaXMudG9rZW5zLnB1c2goe1xuICAgICAgICB0eXBlOiAnaHInXG4gICAgICB9KTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIGJsb2NrcXVvdGVcbiAgICBpZiAoY2FwID0gdGhpcy5ydWxlcy5ibG9ja3F1b3RlLmV4ZWMoc3JjKSkge1xuICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTtcblxuICAgICAgdGhpcy50b2tlbnMucHVzaCh7XG4gICAgICAgIHR5cGU6ICdibG9ja3F1b3RlX3N0YXJ0J1xuICAgICAgfSk7XG5cbiAgICAgIGNhcCA9IGNhcFswXS5yZXBsYWNlKC9eICo+ID8vZ20sICcnKTtcblxuICAgICAgLy8gUGFzcyBgdG9wYCB0byBrZWVwIHRoZSBjdXJyZW50XG4gICAgICAvLyBcInRvcGxldmVsXCIgc3RhdGUuIFRoaXMgaXMgZXhhY3RseVxuICAgICAgLy8gaG93IG1hcmtkb3duLnBsIHdvcmtzLlxuICAgICAgdGhpcy50b2tlbihjYXAsIHRvcCk7XG5cbiAgICAgIHRoaXMudG9rZW5zLnB1c2goe1xuICAgICAgICB0eXBlOiAnYmxvY2txdW90ZV9lbmQnXG4gICAgICB9KTtcblxuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gbGlzdFxuICAgIGlmIChjYXAgPSB0aGlzLnJ1bGVzLmxpc3QuZXhlYyhzcmMpKSB7XG4gICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKGNhcFswXS5sZW5ndGgpO1xuICAgICAgYnVsbCA9IGNhcFsyXTtcbiAgICAgIGlzb3JkZXJlZCA9IGJ1bGwubGVuZ3RoID4gMTtcblxuICAgICAgbGlzdFN0YXJ0ID0ge1xuICAgICAgICB0eXBlOiAnbGlzdF9zdGFydCcsXG4gICAgICAgIG9yZGVyZWQ6IGlzb3JkZXJlZCxcbiAgICAgICAgc3RhcnQ6IGlzb3JkZXJlZCA/ICtidWxsIDogJycsXG4gICAgICAgIGxvb3NlOiBmYWxzZVxuICAgICAgfTtcblxuICAgICAgdGhpcy50b2tlbnMucHVzaChsaXN0U3RhcnQpO1xuXG4gICAgICAvLyBHZXQgZWFjaCB0b3AtbGV2ZWwgaXRlbS5cbiAgICAgIGNhcCA9IGNhcFswXS5tYXRjaCh0aGlzLnJ1bGVzLml0ZW0pO1xuXG4gICAgICBsaXN0SXRlbXMgPSBbXTtcbiAgICAgIG5leHQgPSBmYWxzZTtcbiAgICAgIGwgPSBjYXAubGVuZ3RoO1xuICAgICAgaSA9IDA7XG5cbiAgICAgIGZvciAoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGl0ZW0gPSBjYXBbaV07XG5cbiAgICAgICAgLy8gUmVtb3ZlIHRoZSBsaXN0IGl0ZW0ncyBidWxsZXRcbiAgICAgICAgLy8gc28gaXQgaXMgc2VlbiBhcyB0aGUgbmV4dCB0b2tlbi5cbiAgICAgICAgc3BhY2UgPSBpdGVtLmxlbmd0aDtcbiAgICAgICAgaXRlbSA9IGl0ZW0ucmVwbGFjZSgvXiAqKFsqKy1dfFxcZCtcXC4pICovLCAnJyk7XG5cbiAgICAgICAgLy8gT3V0ZGVudCB3aGF0ZXZlciB0aGVcbiAgICAgICAgLy8gbGlzdCBpdGVtIGNvbnRhaW5zLiBIYWNreS5cbiAgICAgICAgaWYgKH5pdGVtLmluZGV4T2YoJ1xcbiAnKSkge1xuICAgICAgICAgIHNwYWNlIC09IGl0ZW0ubGVuZ3RoO1xuICAgICAgICAgIGl0ZW0gPSAhdGhpcy5vcHRpb25zLnBlZGFudGljXG4gICAgICAgICAgICA/IGl0ZW0ucmVwbGFjZShuZXcgUmVnRXhwKCdeIHsxLCcgKyBzcGFjZSArICd9JywgJ2dtJyksICcnKVxuICAgICAgICAgICAgOiBpdGVtLnJlcGxhY2UoL14gezEsNH0vZ20sICcnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIERldGVybWluZSB3aGV0aGVyIHRoZSBuZXh0IGxpc3QgaXRlbSBiZWxvbmdzIGhlcmUuXG4gICAgICAgIC8vIEJhY2twZWRhbCBpZiBpdCBkb2VzIG5vdCBiZWxvbmcgaW4gdGhpcyBsaXN0LlxuICAgICAgICBpZiAoaSAhPT0gbCAtIDEpIHtcbiAgICAgICAgICBiID0gYmxvY2suYnVsbGV0LmV4ZWMoY2FwW2kgKyAxXSlbMF07XG4gICAgICAgICAgaWYgKGJ1bGwubGVuZ3RoID4gMSA/IGIubGVuZ3RoID09PSAxXG4gICAgICAgICAgICA6IChiLmxlbmd0aCA+IDEgfHwgKHRoaXMub3B0aW9ucy5zbWFydExpc3RzICYmIGIgIT09IGJ1bGwpKSkge1xuICAgICAgICAgICAgc3JjID0gY2FwLnNsaWNlKGkgKyAxKS5qb2luKCdcXG4nKSArIHNyYztcbiAgICAgICAgICAgIGkgPSBsIC0gMTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBEZXRlcm1pbmUgd2hldGhlciBpdGVtIGlzIGxvb3NlIG9yIG5vdC5cbiAgICAgICAgLy8gVXNlOiAvKF58XFxuKSg/ISApW15cXG5dK1xcblxcbig/IVxccyokKS9cbiAgICAgICAgLy8gZm9yIGRpc2NvdW50IGJlaGF2aW9yLlxuICAgICAgICBsb29zZSA9IG5leHQgfHwgL1xcblxcbig/IVxccyokKS8udGVzdChpdGVtKTtcbiAgICAgICAgaWYgKGkgIT09IGwgLSAxKSB7XG4gICAgICAgICAgbmV4dCA9IGl0ZW0uY2hhckF0KGl0ZW0ubGVuZ3RoIC0gMSkgPT09ICdcXG4nO1xuICAgICAgICAgIGlmICghbG9vc2UpIGxvb3NlID0gbmV4dDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsb29zZSkge1xuICAgICAgICAgIGxpc3RTdGFydC5sb29zZSA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDaGVjayBmb3IgdGFzayBsaXN0IGl0ZW1zXG4gICAgICAgIGlzdGFzayA9IC9eXFxbWyB4WF1cXF0gLy50ZXN0KGl0ZW0pO1xuICAgICAgICBpc2NoZWNrZWQgPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmIChpc3Rhc2spIHtcbiAgICAgICAgICBpc2NoZWNrZWQgPSBpdGVtWzFdICE9PSAnICc7XG4gICAgICAgICAgaXRlbSA9IGl0ZW0ucmVwbGFjZSgvXlxcW1sgeFhdXFxdICsvLCAnJyk7XG4gICAgICAgIH1cblxuICAgICAgICB0ID0ge1xuICAgICAgICAgIHR5cGU6ICdsaXN0X2l0ZW1fc3RhcnQnLFxuICAgICAgICAgIHRhc2s6IGlzdGFzayxcbiAgICAgICAgICBjaGVja2VkOiBpc2NoZWNrZWQsXG4gICAgICAgICAgbG9vc2U6IGxvb3NlXG4gICAgICAgIH07XG5cbiAgICAgICAgbGlzdEl0ZW1zLnB1c2godCk7XG4gICAgICAgIHRoaXMudG9rZW5zLnB1c2godCk7XG5cbiAgICAgICAgLy8gUmVjdXJzZS5cbiAgICAgICAgdGhpcy50b2tlbihpdGVtLCBmYWxzZSk7XG5cbiAgICAgICAgdGhpcy50b2tlbnMucHVzaCh7XG4gICAgICAgICAgdHlwZTogJ2xpc3RfaXRlbV9lbmQnXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAobGlzdFN0YXJ0Lmxvb3NlKSB7XG4gICAgICAgIGwgPSBsaXN0SXRlbXMubGVuZ3RoO1xuICAgICAgICBpID0gMDtcbiAgICAgICAgZm9yICg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICBsaXN0SXRlbXNbaV0ubG9vc2UgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMudG9rZW5zLnB1c2goe1xuICAgICAgICB0eXBlOiAnbGlzdF9lbmQnXG4gICAgICB9KTtcblxuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gaHRtbFxuICAgIGlmIChjYXAgPSB0aGlzLnJ1bGVzLmh0bWwuZXhlYyhzcmMpKSB7XG4gICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKGNhcFswXS5sZW5ndGgpO1xuICAgICAgdGhpcy50b2tlbnMucHVzaCh7XG4gICAgICAgIHR5cGU6IHRoaXMub3B0aW9ucy5zYW5pdGl6ZVxuICAgICAgICAgID8gJ3BhcmFncmFwaCdcbiAgICAgICAgICA6ICdodG1sJyxcbiAgICAgICAgcHJlOiAhdGhpcy5vcHRpb25zLnNhbml0aXplclxuICAgICAgICAgICYmIChjYXBbMV0gPT09ICdwcmUnIHx8IGNhcFsxXSA9PT0gJ3NjcmlwdCcgfHwgY2FwWzFdID09PSAnc3R5bGUnKSxcbiAgICAgICAgdGV4dDogdGhpcy5vcHRpb25zLnNhbml0aXplID8gKHRoaXMub3B0aW9ucy5zYW5pdGl6ZXIgPyB0aGlzLm9wdGlvbnMuc2FuaXRpemVyKGNhcFswXSkgOiBlc2NhcGUoY2FwWzBdKSkgOiBjYXBbMF1cbiAgICAgIH0pO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gZGVmXG4gICAgaWYgKHRvcCAmJiAoY2FwID0gdGhpcy5ydWxlcy5kZWYuZXhlYyhzcmMpKSkge1xuICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTtcbiAgICAgIGlmIChjYXBbM10pIGNhcFszXSA9IGNhcFszXS5zdWJzdHJpbmcoMSwgY2FwWzNdLmxlbmd0aCAtIDEpO1xuICAgICAgdGFnID0gY2FwWzFdLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvXFxzKy9nLCAnICcpO1xuICAgICAgaWYgKCF0aGlzLnRva2Vucy5saW5rc1t0YWddKSB7XG4gICAgICAgIHRoaXMudG9rZW5zLmxpbmtzW3RhZ10gPSB7XG4gICAgICAgICAgaHJlZjogY2FwWzJdLFxuICAgICAgICAgIHRpdGxlOiBjYXBbM11cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIHRhYmxlIChnZm0pXG4gICAgaWYgKGNhcCA9IHRoaXMucnVsZXMudGFibGUuZXhlYyhzcmMpKSB7XG4gICAgICBpdGVtID0ge1xuICAgICAgICB0eXBlOiAndGFibGUnLFxuICAgICAgICBoZWFkZXI6IHNwbGl0Q2VsbHMoY2FwWzFdLnJlcGxhY2UoL14gKnwgKlxcfCAqJC9nLCAnJykpLFxuICAgICAgICBhbGlnbjogY2FwWzJdLnJlcGxhY2UoL14gKnxcXHwgKiQvZywgJycpLnNwbGl0KC8gKlxcfCAqLyksXG4gICAgICAgIGNlbGxzOiBjYXBbM10gPyBjYXBbM10ucmVwbGFjZSgvXFxuJC8sICcnKS5zcGxpdCgnXFxuJykgOiBbXVxuICAgICAgfTtcblxuICAgICAgaWYgKGl0ZW0uaGVhZGVyLmxlbmd0aCA9PT0gaXRlbS5hbGlnbi5sZW5ndGgpIHtcbiAgICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgaXRlbS5hbGlnbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmICgvXiAqLSs6ICokLy50ZXN0KGl0ZW0uYWxpZ25baV0pKSB7XG4gICAgICAgICAgICBpdGVtLmFsaWduW2ldID0gJ3JpZ2h0JztcbiAgICAgICAgICB9IGVsc2UgaWYgKC9eICo6LSs6ICokLy50ZXN0KGl0ZW0uYWxpZ25baV0pKSB7XG4gICAgICAgICAgICBpdGVtLmFsaWduW2ldID0gJ2NlbnRlcic7XG4gICAgICAgICAgfSBlbHNlIGlmICgvXiAqOi0rICokLy50ZXN0KGl0ZW0uYWxpZ25baV0pKSB7XG4gICAgICAgICAgICBpdGVtLmFsaWduW2ldID0gJ2xlZnQnO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpdGVtLmFsaWduW2ldID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgaXRlbS5jZWxscy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGl0ZW0uY2VsbHNbaV0gPSBzcGxpdENlbGxzKFxuICAgICAgICAgICAgaXRlbS5jZWxsc1tpXS5yZXBsYWNlKC9eICpcXHwgKnwgKlxcfCAqJC9nLCAnJyksXG4gICAgICAgICAgICBpdGVtLmhlYWRlci5sZW5ndGgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy50b2tlbnMucHVzaChpdGVtKTtcblxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBsaGVhZGluZ1xuICAgIGlmIChjYXAgPSB0aGlzLnJ1bGVzLmxoZWFkaW5nLmV4ZWMoc3JjKSkge1xuICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTtcbiAgICAgIHRoaXMudG9rZW5zLnB1c2goe1xuICAgICAgICB0eXBlOiAnaGVhZGluZycsXG4gICAgICAgIGRlcHRoOiBjYXBbMl0uY2hhckF0KDApID09PSAnPScgPyAxIDogMixcbiAgICAgICAgdGV4dDogY2FwWzFdXG4gICAgICB9KTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIHRvcC1sZXZlbCBwYXJhZ3JhcGhcbiAgICBpZiAodG9wICYmIChjYXAgPSB0aGlzLnJ1bGVzLnBhcmFncmFwaC5leGVjKHNyYykpKSB7XG4gICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKGNhcFswXS5sZW5ndGgpO1xuICAgICAgdGhpcy50b2tlbnMucHVzaCh7XG4gICAgICAgIHR5cGU6ICdwYXJhZ3JhcGgnLFxuICAgICAgICB0ZXh0OiBjYXBbMV0uY2hhckF0KGNhcFsxXS5sZW5ndGggLSAxKSA9PT0gJ1xcbidcbiAgICAgICAgICA/IGNhcFsxXS5zbGljZSgwLCAtMSlcbiAgICAgICAgICA6IGNhcFsxXVxuICAgICAgfSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyB0ZXh0XG4gICAgaWYgKGNhcCA9IHRoaXMucnVsZXMudGV4dC5leGVjKHNyYykpIHtcbiAgICAgIC8vIFRvcC1sZXZlbCBzaG91bGQgbmV2ZXIgcmVhY2ggaGVyZS5cbiAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcoY2FwWzBdLmxlbmd0aCk7XG4gICAgICB0aGlzLnRva2Vucy5wdXNoKHtcbiAgICAgICAgdHlwZTogJ3RleHQnLFxuICAgICAgICB0ZXh0OiBjYXBbMF1cbiAgICAgIH0pO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKHNyYykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbmZpbml0ZSBsb29wIG9uIGJ5dGU6ICcgKyBzcmMuY2hhckNvZGVBdCgwKSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXMudG9rZW5zO1xufTtcblxuLyoqXG4gKiBJbmxpbmUtTGV2ZWwgR3JhbW1hclxuICovXG5cbnZhciBpbmxpbmUgPSB7XG4gIGVzY2FwZTogL15cXFxcKFshXCIjJCUmJygpKissXFwtLi86Ozw9Pj9AXFxbXFxdXFxcXF5fYHt8fX5dKS8sXG4gIGF1dG9saW5rOiAvXjwoc2NoZW1lOlteXFxzXFx4MDAtXFx4MWY8Pl0qfGVtYWlsKT4vLFxuICB1cmw6IG5vb3AsXG4gIHRhZzogJ15jb21tZW50J1xuICAgICsgJ3xePC9bYS16QS1aXVtcXFxcdzotXSpcXFxccyo+JyAvLyBzZWxmLWNsb3NpbmcgdGFnXG4gICAgKyAnfF48W2EtekEtWl1bXFxcXHctXSooPzphdHRyaWJ1dGUpKj9cXFxccyovPz4nIC8vIG9wZW4gdGFnXG4gICAgKyAnfF48XFxcXD9bXFxcXHNcXFxcU10qP1xcXFw/PicgLy8gcHJvY2Vzc2luZyBpbnN0cnVjdGlvbiwgZS5nLiA8P3BocCA/PlxuICAgICsgJ3xePCFbYS16QS1aXStcXFxcc1tcXFxcc1xcXFxTXSo/PicgLy8gZGVjbGFyYXRpb24sIGUuZy4gPCFET0NUWVBFIGh0bWw+XG4gICAgKyAnfF48IVxcXFxbQ0RBVEFcXFxcW1tcXFxcc1xcXFxTXSo/XFxcXF1cXFxcXT4nLCAvLyBDREFUQSBzZWN0aW9uXG4gIGxpbms6IC9eIT9cXFsobGFiZWwpXFxdXFwoXFxzKihocmVmKSg/OlxccysodGl0bGUpKT9cXHMqXFwpLyxcbiAgcmVmbGluazogL14hP1xcWyhsYWJlbClcXF1cXFsoPyFcXHMqXFxdKSgoPzpcXFxcW1xcW1xcXV0/fFteXFxbXFxdXFxcXF0pKylcXF0vLFxuICBub2xpbms6IC9eIT9cXFsoPyFcXHMqXFxdKSgoPzpcXFtbXlxcW1xcXV0qXFxdfFxcXFxbXFxbXFxdXXxbXlxcW1xcXV0pKilcXF0oPzpcXFtcXF0pPy8sXG4gIHN0cm9uZzogL15fXyhbXlxcc19dKV9fKD8hXyl8XlxcKlxcKihbXlxccypdKVxcKlxcKig/IVxcKil8Xl9fKFteXFxzXVtcXHNcXFNdKj9bXlxcc10pX18oPyFfKXxeXFwqXFwqKFteXFxzXVtcXHNcXFNdKj9bXlxcc10pXFwqXFwqKD8hXFwqKS8sXG4gIGVtOiAvXl8oW15cXHNfXSlfKD8hXyl8XlxcKihbXlxccyo8XFxbXSlcXCooPyFcXCopfF5fKFteXFxzPF1bXFxzXFxTXSo/W15cXHNfXSlfKD8hX3xbXlxcc3B1bmN0dWF0aW9uXSl8Xl8oW15cXHNfPF1bXFxzXFxTXSo/W15cXHNdKV8oPyFffFteXFxzcHVuY3R1YXRpb25dKXxeXFwqKFteXFxzPFwiXVtcXHNcXFNdKj9bXlxcc1xcKl0pXFwqKD8hXFwqfFteXFxzcHVuY3R1YXRpb25dKXxeXFwqKFteXFxzKlwiPFxcW11bXFxzXFxTXSo/W15cXHNdKVxcKig/IVxcKikvLFxuICBjb2RlOiAvXihgKykoW15gXXxbXmBdW1xcc1xcU10qP1teYF0pXFwxKD8hYCkvLFxuICBicjogL14oIHsyLH18XFxcXClcXG4oPyFcXHMqJCkvLFxuICBkZWw6IG5vb3AsXG4gIHRleHQ6IC9eKGArfFteYF0pKD86W1xcc1xcU10qPyg/Oig/PVtcXFxcPCFcXFtgKl18XFxiX3wkKXxbXiBdKD89IHsyLH1cXG4pKXwoPz0gezIsfVxcbikpL1xufTtcblxuLy8gbGlzdCBvZiBwdW5jdHVhdGlvbiBtYXJrcyBmcm9tIGNvbW1vbiBtYXJrIHNwZWNcbi8vIHdpdGhvdXQgYCBhbmQgXSB0byB3b3JrYXJvdW5kIFJ1bGUgMTcgKGlubGluZSBjb2RlIGJsb2Nrcy9saW5rcylcbmlubGluZS5fcHVuY3R1YXRpb24gPSAnIVwiIyQlJlxcJygpKissXFxcXC0uLzo7PD0+P0BcXFxcW15fe3x9fic7XG5pbmxpbmUuZW0gPSBlZGl0KGlubGluZS5lbSkucmVwbGFjZSgvcHVuY3R1YXRpb24vZywgaW5saW5lLl9wdW5jdHVhdGlvbikuZ2V0UmVnZXgoKTtcblxuaW5saW5lLl9lc2NhcGVzID0gL1xcXFwoWyFcIiMkJSYnKCkqKyxcXC0uLzo7PD0+P0BcXFtcXF1cXFxcXl9ge3x9fl0pL2c7XG5cbmlubGluZS5fc2NoZW1lID0gL1thLXpBLVpdW2EtekEtWjAtOSsuLV17MSwzMX0vO1xuaW5saW5lLl9lbWFpbCA9IC9bYS16QS1aMC05LiEjJCUmJyorLz0/Xl9ge3x9fi1dKyhAKVthLXpBLVowLTldKD86W2EtekEtWjAtOS1dezAsNjF9W2EtekEtWjAtOV0pPyg/OlxcLlthLXpBLVowLTldKD86W2EtekEtWjAtOS1dezAsNjF9W2EtekEtWjAtOV0pPykrKD8hWy1fXSkvO1xuaW5saW5lLmF1dG9saW5rID0gZWRpdChpbmxpbmUuYXV0b2xpbmspXG4gIC5yZXBsYWNlKCdzY2hlbWUnLCBpbmxpbmUuX3NjaGVtZSlcbiAgLnJlcGxhY2UoJ2VtYWlsJywgaW5saW5lLl9lbWFpbClcbiAgLmdldFJlZ2V4KCk7XG5cbmlubGluZS5fYXR0cmlidXRlID0gL1xccytbYS16QS1aOl9dW1xcdy46LV0qKD86XFxzKj1cXHMqXCJbXlwiXSpcInxcXHMqPVxccyonW14nXSonfFxccyo9XFxzKlteXFxzXCInPTw+YF0rKT8vO1xuXG5pbmxpbmUudGFnID0gZWRpdChpbmxpbmUudGFnKVxuICAucmVwbGFjZSgnY29tbWVudCcsIGJsb2NrLl9jb21tZW50KVxuICAucmVwbGFjZSgnYXR0cmlidXRlJywgaW5saW5lLl9hdHRyaWJ1dGUpXG4gIC5nZXRSZWdleCgpO1xuXG5pbmxpbmUuX2xhYmVsID0gLyg/OlxcW1teXFxbXFxdXSpcXF18XFxcXC58YFteYF0qYHxbXlxcW1xcXVxcXFxgXSkqPy87XG5pbmxpbmUuX2hyZWYgPSAvPCg/OlxcXFxbPD5dP3xbXlxcczw+XFxcXF0pKj58W15cXHNcXHgwMC1cXHgxZl0qLztcbmlubGluZS5fdGl0bGUgPSAvXCIoPzpcXFxcXCI/fFteXCJcXFxcXSkqXCJ8Jyg/OlxcXFwnP3xbXidcXFxcXSkqJ3xcXCgoPzpcXFxcXFwpP3xbXilcXFxcXSkqXFwpLztcblxuaW5saW5lLmxpbmsgPSBlZGl0KGlubGluZS5saW5rKVxuICAucmVwbGFjZSgnbGFiZWwnLCBpbmxpbmUuX2xhYmVsKVxuICAucmVwbGFjZSgnaHJlZicsIGlubGluZS5faHJlZilcbiAgLnJlcGxhY2UoJ3RpdGxlJywgaW5saW5lLl90aXRsZSlcbiAgLmdldFJlZ2V4KCk7XG5cbmlubGluZS5yZWZsaW5rID0gZWRpdChpbmxpbmUucmVmbGluaylcbiAgLnJlcGxhY2UoJ2xhYmVsJywgaW5saW5lLl9sYWJlbClcbiAgLmdldFJlZ2V4KCk7XG5cbi8qKlxuICogTm9ybWFsIElubGluZSBHcmFtbWFyXG4gKi9cblxuaW5saW5lLm5vcm1hbCA9IG1lcmdlKHt9LCBpbmxpbmUpO1xuXG4vKipcbiAqIFBlZGFudGljIElubGluZSBHcmFtbWFyXG4gKi9cblxuaW5saW5lLnBlZGFudGljID0gbWVyZ2Uoe30sIGlubGluZS5ub3JtYWwsIHtcbiAgc3Ryb25nOiAvXl9fKD89XFxTKShbXFxzXFxTXSo/XFxTKV9fKD8hXyl8XlxcKlxcKig/PVxcUykoW1xcc1xcU10qP1xcUylcXCpcXCooPyFcXCopLyxcbiAgZW06IC9eXyg/PVxcUykoW1xcc1xcU10qP1xcUylfKD8hXyl8XlxcKig/PVxcUykoW1xcc1xcU10qP1xcUylcXCooPyFcXCopLyxcbiAgbGluazogZWRpdCgvXiE/XFxbKGxhYmVsKVxcXVxcKCguKj8pXFwpLylcbiAgICAucmVwbGFjZSgnbGFiZWwnLCBpbmxpbmUuX2xhYmVsKVxuICAgIC5nZXRSZWdleCgpLFxuICByZWZsaW5rOiBlZGl0KC9eIT9cXFsobGFiZWwpXFxdXFxzKlxcWyhbXlxcXV0qKVxcXS8pXG4gICAgLnJlcGxhY2UoJ2xhYmVsJywgaW5saW5lLl9sYWJlbClcbiAgICAuZ2V0UmVnZXgoKVxufSk7XG5cbi8qKlxuICogR0ZNIElubGluZSBHcmFtbWFyXG4gKi9cblxuaW5saW5lLmdmbSA9IG1lcmdlKHt9LCBpbmxpbmUubm9ybWFsLCB7XG4gIGVzY2FwZTogZWRpdChpbmxpbmUuZXNjYXBlKS5yZXBsYWNlKCddKScsICd+fF0pJykuZ2V0UmVnZXgoKSxcbiAgX2V4dGVuZGVkX2VtYWlsOiAvW0EtWmEtejAtOS5fKy1dKyhAKVthLXpBLVowLTktX10rKD86XFwuW2EtekEtWjAtOS1fXSpbYS16QS1aMC05XSkrKD8hWy1fXSkvLFxuICB1cmw6IC9eKCg/OmZ0cHxodHRwcz8pOlxcL1xcL3x3d3dcXC4pKD86W2EtekEtWjAtOVxcLV0rXFwuPykrW15cXHM8XSp8XmVtYWlsLyxcbiAgX2JhY2twZWRhbDogLyg/OltePyEuLDo7Kl9+KCkmXSt8XFwoW14pXSpcXCl8Jig/IVthLXpBLVowLTldKzskKXxbPyEuLDo7Kl9+KV0rKD8hJCkpKy8sXG4gIGRlbDogL15+Kyg/PVxcUykoW1xcc1xcU10qP1xcUyl+Ky8sXG4gIHRleHQ6IC9eKGArfFteYF0pKD86W1xcc1xcU10qPyg/Oig/PVtcXFxcPCFcXFtgKn5dfFxcYl98aHR0cHM/OlxcL1xcL3xmdHA6XFwvXFwvfHd3d1xcLnwkKXxbXiBdKD89IHsyLH1cXG4pfFteYS16QS1aMC05LiEjJCUmJyorXFwvPT9fYHtcXHx9fi1dKD89W2EtekEtWjAtOS4hIyQlJicqK1xcLz0/X2B7XFx8fX4tXStAKSl8KD89IHsyLH1cXG58W2EtekEtWjAtOS4hIyQlJicqK1xcLz0/X2B7XFx8fX4tXStAKSkvXG59KTtcblxuaW5saW5lLmdmbS51cmwgPSBlZGl0KGlubGluZS5nZm0udXJsLCAnaScpXG4gIC5yZXBsYWNlKCdlbWFpbCcsIGlubGluZS5nZm0uX2V4dGVuZGVkX2VtYWlsKVxuICAuZ2V0UmVnZXgoKTtcbi8qKlxuICogR0ZNICsgTGluZSBCcmVha3MgSW5saW5lIEdyYW1tYXJcbiAqL1xuXG5pbmxpbmUuYnJlYWtzID0gbWVyZ2Uoe30sIGlubGluZS5nZm0sIHtcbiAgYnI6IGVkaXQoaW5saW5lLmJyKS5yZXBsYWNlKCd7Mix9JywgJyonKS5nZXRSZWdleCgpLFxuICB0ZXh0OiBlZGl0KGlubGluZS5nZm0udGV4dClcbiAgICAucmVwbGFjZSgnXFxcXGJfJywgJ1xcXFxiX3wgezIsfVxcXFxuJylcbiAgICAucmVwbGFjZSgvXFx7MixcXH0vZywgJyonKVxuICAgIC5nZXRSZWdleCgpXG59KTtcblxuLyoqXG4gKiBJbmxpbmUgTGV4ZXIgJiBDb21waWxlclxuICovXG5cbmZ1bmN0aW9uIElubGluZUxleGVyKGxpbmtzLCBvcHRpb25zKSB7XG4gIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgfHwgbWFya2VkLmRlZmF1bHRzO1xuICB0aGlzLmxpbmtzID0gbGlua3M7XG4gIHRoaXMucnVsZXMgPSBpbmxpbmUubm9ybWFsO1xuICB0aGlzLnJlbmRlcmVyID0gdGhpcy5vcHRpb25zLnJlbmRlcmVyIHx8IG5ldyBSZW5kZXJlcigpO1xuICB0aGlzLnJlbmRlcmVyLm9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG5cbiAgaWYgKCF0aGlzLmxpbmtzKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdUb2tlbnMgYXJyYXkgcmVxdWlyZXMgYSBgbGlua3NgIHByb3BlcnR5LicpO1xuICB9XG5cbiAgaWYgKHRoaXMub3B0aW9ucy5wZWRhbnRpYykge1xuICAgIHRoaXMucnVsZXMgPSBpbmxpbmUucGVkYW50aWM7XG4gIH0gZWxzZSBpZiAodGhpcy5vcHRpb25zLmdmbSkge1xuICAgIGlmICh0aGlzLm9wdGlvbnMuYnJlYWtzKSB7XG4gICAgICB0aGlzLnJ1bGVzID0gaW5saW5lLmJyZWFrcztcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5ydWxlcyA9IGlubGluZS5nZm07XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogRXhwb3NlIElubGluZSBSdWxlc1xuICovXG5cbklubGluZUxleGVyLnJ1bGVzID0gaW5saW5lO1xuXG4vKipcbiAqIFN0YXRpYyBMZXhpbmcvQ29tcGlsaW5nIE1ldGhvZFxuICovXG5cbklubGluZUxleGVyLm91dHB1dCA9IGZ1bmN0aW9uKHNyYywgbGlua3MsIG9wdGlvbnMpIHtcbiAgdmFyIGlubGluZSA9IG5ldyBJbmxpbmVMZXhlcihsaW5rcywgb3B0aW9ucyk7XG4gIHJldHVybiBpbmxpbmUub3V0cHV0KHNyYyk7XG59O1xuXG4vKipcbiAqIExleGluZy9Db21waWxpbmdcbiAqL1xuXG5JbmxpbmVMZXhlci5wcm90b3R5cGUub3V0cHV0ID0gZnVuY3Rpb24oc3JjKSB7XG4gIHZhciBvdXQgPSAnJyxcbiAgICAgIGxpbmssXG4gICAgICB0ZXh0LFxuICAgICAgaHJlZixcbiAgICAgIHRpdGxlLFxuICAgICAgY2FwLFxuICAgICAgcHJldkNhcFplcm87XG5cbiAgd2hpbGUgKHNyYykge1xuICAgIC8vIGVzY2FwZVxuICAgIGlmIChjYXAgPSB0aGlzLnJ1bGVzLmVzY2FwZS5leGVjKHNyYykpIHtcbiAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcoY2FwWzBdLmxlbmd0aCk7XG4gICAgICBvdXQgKz0gZXNjYXBlKGNhcFsxXSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyB0YWdcbiAgICBpZiAoY2FwID0gdGhpcy5ydWxlcy50YWcuZXhlYyhzcmMpKSB7XG4gICAgICBpZiAoIXRoaXMuaW5MaW5rICYmIC9ePGEgL2kudGVzdChjYXBbMF0pKSB7XG4gICAgICAgIHRoaXMuaW5MaW5rID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5pbkxpbmsgJiYgL148XFwvYT4vaS50ZXN0KGNhcFswXSkpIHtcbiAgICAgICAgdGhpcy5pbkxpbmsgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmICghdGhpcy5pblJhd0Jsb2NrICYmIC9ePChwcmV8Y29kZXxrYmR8c2NyaXB0KShcXHN8PikvaS50ZXN0KGNhcFswXSkpIHtcbiAgICAgICAgdGhpcy5pblJhd0Jsb2NrID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5pblJhd0Jsb2NrICYmIC9ePFxcLyhwcmV8Y29kZXxrYmR8c2NyaXB0KShcXHN8PikvaS50ZXN0KGNhcFswXSkpIHtcbiAgICAgICAgdGhpcy5pblJhd0Jsb2NrID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcoY2FwWzBdLmxlbmd0aCk7XG4gICAgICBvdXQgKz0gdGhpcy5vcHRpb25zLnNhbml0aXplXG4gICAgICAgID8gdGhpcy5vcHRpb25zLnNhbml0aXplclxuICAgICAgICAgID8gdGhpcy5vcHRpb25zLnNhbml0aXplcihjYXBbMF0pXG4gICAgICAgICAgOiBlc2NhcGUoY2FwWzBdKVxuICAgICAgICA6IGNhcFswXTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIGxpbmtcbiAgICBpZiAoY2FwID0gdGhpcy5ydWxlcy5saW5rLmV4ZWMoc3JjKSkge1xuICAgICAgdmFyIGxhc3RQYXJlbkluZGV4ID0gZmluZENsb3NpbmdCcmFja2V0KGNhcFsyXSwgJygpJyk7XG4gICAgICBpZiAobGFzdFBhcmVuSW5kZXggPiAtMSkge1xuICAgICAgICB2YXIgbGlua0xlbiA9IDQgKyBjYXBbMV0ubGVuZ3RoICsgbGFzdFBhcmVuSW5kZXg7XG4gICAgICAgIGNhcFsyXSA9IGNhcFsyXS5zdWJzdHJpbmcoMCwgbGFzdFBhcmVuSW5kZXgpO1xuICAgICAgICBjYXBbMF0gPSBjYXBbMF0uc3Vic3RyaW5nKDAsIGxpbmtMZW4pLnRyaW0oKTtcbiAgICAgICAgY2FwWzNdID0gJyc7XG4gICAgICB9XG4gICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKGNhcFswXS5sZW5ndGgpO1xuICAgICAgdGhpcy5pbkxpbmsgPSB0cnVlO1xuICAgICAgaHJlZiA9IGNhcFsyXTtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMucGVkYW50aWMpIHtcbiAgICAgICAgbGluayA9IC9eKFteJ1wiXSpbXlxcc10pXFxzKyhbJ1wiXSkoLiopXFwyLy5leGVjKGhyZWYpO1xuXG4gICAgICAgIGlmIChsaW5rKSB7XG4gICAgICAgICAgaHJlZiA9IGxpbmtbMV07XG4gICAgICAgICAgdGl0bGUgPSBsaW5rWzNdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRpdGxlID0gJyc7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRpdGxlID0gY2FwWzNdID8gY2FwWzNdLnNsaWNlKDEsIC0xKSA6ICcnO1xuICAgICAgfVxuICAgICAgaHJlZiA9IGhyZWYudHJpbSgpLnJlcGxhY2UoL148KFtcXHNcXFNdKik+JC8sICckMScpO1xuICAgICAgb3V0ICs9IHRoaXMub3V0cHV0TGluayhjYXAsIHtcbiAgICAgICAgaHJlZjogSW5saW5lTGV4ZXIuZXNjYXBlcyhocmVmKSxcbiAgICAgICAgdGl0bGU6IElubGluZUxleGVyLmVzY2FwZXModGl0bGUpXG4gICAgICB9KTtcbiAgICAgIHRoaXMuaW5MaW5rID0gZmFsc2U7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyByZWZsaW5rLCBub2xpbmtcbiAgICBpZiAoKGNhcCA9IHRoaXMucnVsZXMucmVmbGluay5leGVjKHNyYykpXG4gICAgICAgIHx8IChjYXAgPSB0aGlzLnJ1bGVzLm5vbGluay5leGVjKHNyYykpKSB7XG4gICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKGNhcFswXS5sZW5ndGgpO1xuICAgICAgbGluayA9IChjYXBbMl0gfHwgY2FwWzFdKS5yZXBsYWNlKC9cXHMrL2csICcgJyk7XG4gICAgICBsaW5rID0gdGhpcy5saW5rc1tsaW5rLnRvTG93ZXJDYXNlKCldO1xuICAgICAgaWYgKCFsaW5rIHx8ICFsaW5rLmhyZWYpIHtcbiAgICAgICAgb3V0ICs9IGNhcFswXS5jaGFyQXQoMCk7XG4gICAgICAgIHNyYyA9IGNhcFswXS5zdWJzdHJpbmcoMSkgKyBzcmM7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgdGhpcy5pbkxpbmsgPSB0cnVlO1xuICAgICAgb3V0ICs9IHRoaXMub3V0cHV0TGluayhjYXAsIGxpbmspO1xuICAgICAgdGhpcy5pbkxpbmsgPSBmYWxzZTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIHN0cm9uZ1xuICAgIGlmIChjYXAgPSB0aGlzLnJ1bGVzLnN0cm9uZy5leGVjKHNyYykpIHtcbiAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcoY2FwWzBdLmxlbmd0aCk7XG4gICAgICBvdXQgKz0gdGhpcy5yZW5kZXJlci5zdHJvbmcodGhpcy5vdXRwdXQoY2FwWzRdIHx8IGNhcFszXSB8fCBjYXBbMl0gfHwgY2FwWzFdKSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyBlbVxuICAgIGlmIChjYXAgPSB0aGlzLnJ1bGVzLmVtLmV4ZWMoc3JjKSkge1xuICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTtcbiAgICAgIG91dCArPSB0aGlzLnJlbmRlcmVyLmVtKHRoaXMub3V0cHV0KGNhcFs2XSB8fCBjYXBbNV0gfHwgY2FwWzRdIHx8IGNhcFszXSB8fCBjYXBbMl0gfHwgY2FwWzFdKSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyBjb2RlXG4gICAgaWYgKGNhcCA9IHRoaXMucnVsZXMuY29kZS5leGVjKHNyYykpIHtcbiAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcoY2FwWzBdLmxlbmd0aCk7XG4gICAgICBvdXQgKz0gdGhpcy5yZW5kZXJlci5jb2Rlc3Bhbihlc2NhcGUoY2FwWzJdLnRyaW0oKSwgdHJ1ZSkpO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gYnJcbiAgICBpZiAoY2FwID0gdGhpcy5ydWxlcy5ici5leGVjKHNyYykpIHtcbiAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcoY2FwWzBdLmxlbmd0aCk7XG4gICAgICBvdXQgKz0gdGhpcy5yZW5kZXJlci5icigpO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gZGVsIChnZm0pXG4gICAgaWYgKGNhcCA9IHRoaXMucnVsZXMuZGVsLmV4ZWMoc3JjKSkge1xuICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTtcbiAgICAgIG91dCArPSB0aGlzLnJlbmRlcmVyLmRlbCh0aGlzLm91dHB1dChjYXBbMV0pKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIGF1dG9saW5rXG4gICAgaWYgKGNhcCA9IHRoaXMucnVsZXMuYXV0b2xpbmsuZXhlYyhzcmMpKSB7XG4gICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKGNhcFswXS5sZW5ndGgpO1xuICAgICAgaWYgKGNhcFsyXSA9PT0gJ0AnKSB7XG4gICAgICAgIHRleHQgPSBlc2NhcGUodGhpcy5tYW5nbGUoY2FwWzFdKSk7XG4gICAgICAgIGhyZWYgPSAnbWFpbHRvOicgKyB0ZXh0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGV4dCA9IGVzY2FwZShjYXBbMV0pO1xuICAgICAgICBocmVmID0gdGV4dDtcbiAgICAgIH1cbiAgICAgIG91dCArPSB0aGlzLnJlbmRlcmVyLmxpbmsoaHJlZiwgbnVsbCwgdGV4dCk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyB1cmwgKGdmbSlcbiAgICBpZiAoIXRoaXMuaW5MaW5rICYmIChjYXAgPSB0aGlzLnJ1bGVzLnVybC5leGVjKHNyYykpKSB7XG4gICAgICBpZiAoY2FwWzJdID09PSAnQCcpIHtcbiAgICAgICAgdGV4dCA9IGVzY2FwZShjYXBbMF0pO1xuICAgICAgICBocmVmID0gJ21haWx0bzonICsgdGV4dDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGRvIGV4dGVuZGVkIGF1dG9saW5rIHBhdGggdmFsaWRhdGlvblxuICAgICAgICBkbyB7XG4gICAgICAgICAgcHJldkNhcFplcm8gPSBjYXBbMF07XG4gICAgICAgICAgY2FwWzBdID0gdGhpcy5ydWxlcy5fYmFja3BlZGFsLmV4ZWMoY2FwWzBdKVswXTtcbiAgICAgICAgfSB3aGlsZSAocHJldkNhcFplcm8gIT09IGNhcFswXSk7XG4gICAgICAgIHRleHQgPSBlc2NhcGUoY2FwWzBdKTtcbiAgICAgICAgaWYgKGNhcFsxXSA9PT0gJ3d3dy4nKSB7XG4gICAgICAgICAgaHJlZiA9ICdodHRwOi8vJyArIHRleHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaHJlZiA9IHRleHQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcoY2FwWzBdLmxlbmd0aCk7XG4gICAgICBvdXQgKz0gdGhpcy5yZW5kZXJlci5saW5rKGhyZWYsIG51bGwsIHRleHQpO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gdGV4dFxuICAgIGlmIChjYXAgPSB0aGlzLnJ1bGVzLnRleHQuZXhlYyhzcmMpKSB7XG4gICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKGNhcFswXS5sZW5ndGgpO1xuICAgICAgaWYgKHRoaXMuaW5SYXdCbG9jaykge1xuICAgICAgICBvdXQgKz0gdGhpcy5yZW5kZXJlci50ZXh0KHRoaXMub3B0aW9ucy5zYW5pdGl6ZSA/ICh0aGlzLm9wdGlvbnMuc2FuaXRpemVyID8gdGhpcy5vcHRpb25zLnNhbml0aXplcihjYXBbMF0pIDogZXNjYXBlKGNhcFswXSkpIDogY2FwWzBdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG91dCArPSB0aGlzLnJlbmRlcmVyLnRleHQoZXNjYXBlKHRoaXMuc21hcnR5cGFudHMoY2FwWzBdKSkpO1xuICAgICAgfVxuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKHNyYykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbmZpbml0ZSBsb29wIG9uIGJ5dGU6ICcgKyBzcmMuY2hhckNvZGVBdCgwKSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG91dDtcbn07XG5cbklubGluZUxleGVyLmVzY2FwZXMgPSBmdW5jdGlvbih0ZXh0KSB7XG4gIHJldHVybiB0ZXh0ID8gdGV4dC5yZXBsYWNlKElubGluZUxleGVyLnJ1bGVzLl9lc2NhcGVzLCAnJDEnKSA6IHRleHQ7XG59O1xuXG4vKipcbiAqIENvbXBpbGUgTGlua1xuICovXG5cbklubGluZUxleGVyLnByb3RvdHlwZS5vdXRwdXRMaW5rID0gZnVuY3Rpb24oY2FwLCBsaW5rKSB7XG4gIHZhciBocmVmID0gbGluay5ocmVmLFxuICAgICAgdGl0bGUgPSBsaW5rLnRpdGxlID8gZXNjYXBlKGxpbmsudGl0bGUpIDogbnVsbDtcblxuICByZXR1cm4gY2FwWzBdLmNoYXJBdCgwKSAhPT0gJyEnXG4gICAgPyB0aGlzLnJlbmRlcmVyLmxpbmsoaHJlZiwgdGl0bGUsIHRoaXMub3V0cHV0KGNhcFsxXSkpXG4gICAgOiB0aGlzLnJlbmRlcmVyLmltYWdlKGhyZWYsIHRpdGxlLCBlc2NhcGUoY2FwWzFdKSk7XG59O1xuXG4vKipcbiAqIFNtYXJ0eXBhbnRzIFRyYW5zZm9ybWF0aW9uc1xuICovXG5cbklubGluZUxleGVyLnByb3RvdHlwZS5zbWFydHlwYW50cyA9IGZ1bmN0aW9uKHRleHQpIHtcbiAgaWYgKCF0aGlzLm9wdGlvbnMuc21hcnR5cGFudHMpIHJldHVybiB0ZXh0O1xuICByZXR1cm4gdGV4dFxuICAgIC8vIGVtLWRhc2hlc1xuICAgIC5yZXBsYWNlKC8tLS0vZywgJ1xcdTIwMTQnKVxuICAgIC8vIGVuLWRhc2hlc1xuICAgIC5yZXBsYWNlKC8tLS9nLCAnXFx1MjAxMycpXG4gICAgLy8gb3BlbmluZyBzaW5nbGVzXG4gICAgLnJlcGxhY2UoLyhefFstXFx1MjAxNC8oXFxbe1wiXFxzXSknL2csICckMVxcdTIwMTgnKVxuICAgIC8vIGNsb3Npbmcgc2luZ2xlcyAmIGFwb3N0cm9waGVzXG4gICAgLnJlcGxhY2UoLycvZywgJ1xcdTIwMTknKVxuICAgIC8vIG9wZW5pbmcgZG91Ymxlc1xuICAgIC5yZXBsYWNlKC8oXnxbLVxcdTIwMTQvKFxcW3tcXHUyMDE4XFxzXSlcIi9nLCAnJDFcXHUyMDFjJylcbiAgICAvLyBjbG9zaW5nIGRvdWJsZXNcbiAgICAucmVwbGFjZSgvXCIvZywgJ1xcdTIwMWQnKVxuICAgIC8vIGVsbGlwc2VzXG4gICAgLnJlcGxhY2UoL1xcLnszfS9nLCAnXFx1MjAyNicpO1xufTtcblxuLyoqXG4gKiBNYW5nbGUgTGlua3NcbiAqL1xuXG5JbmxpbmVMZXhlci5wcm90b3R5cGUubWFuZ2xlID0gZnVuY3Rpb24odGV4dCkge1xuICBpZiAoIXRoaXMub3B0aW9ucy5tYW5nbGUpIHJldHVybiB0ZXh0O1xuICB2YXIgb3V0ID0gJycsXG4gICAgICBsID0gdGV4dC5sZW5ndGgsXG4gICAgICBpID0gMCxcbiAgICAgIGNoO1xuXG4gIGZvciAoOyBpIDwgbDsgaSsrKSB7XG4gICAgY2ggPSB0ZXh0LmNoYXJDb2RlQXQoaSk7XG4gICAgaWYgKE1hdGgucmFuZG9tKCkgPiAwLjUpIHtcbiAgICAgIGNoID0gJ3gnICsgY2gudG9TdHJpbmcoMTYpO1xuICAgIH1cbiAgICBvdXQgKz0gJyYjJyArIGNoICsgJzsnO1xuICB9XG5cbiAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogUmVuZGVyZXJcbiAqL1xuXG5mdW5jdGlvbiBSZW5kZXJlcihvcHRpb25zKSB7XG4gIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgfHwgbWFya2VkLmRlZmF1bHRzO1xufVxuXG5SZW5kZXJlci5wcm90b3R5cGUuY29kZSA9IGZ1bmN0aW9uKGNvZGUsIGluZm9zdHJpbmcsIGVzY2FwZWQpIHtcbiAgdmFyIGxhbmcgPSAoaW5mb3N0cmluZyB8fCAnJykubWF0Y2goL1xcUyovKVswXTtcbiAgaWYgKHRoaXMub3B0aW9ucy5oaWdobGlnaHQpIHtcbiAgICB2YXIgb3V0ID0gdGhpcy5vcHRpb25zLmhpZ2hsaWdodChjb2RlLCBsYW5nKTtcbiAgICBpZiAob3V0ICE9IG51bGwgJiYgb3V0ICE9PSBjb2RlKSB7XG4gICAgICBlc2NhcGVkID0gdHJ1ZTtcbiAgICAgIGNvZGUgPSBvdXQ7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFsYW5nKSB7XG4gICAgcmV0dXJuICc8cHJlPjxjb2RlPidcbiAgICAgICsgKGVzY2FwZWQgPyBjb2RlIDogZXNjYXBlKGNvZGUsIHRydWUpKVxuICAgICAgKyAnPC9jb2RlPjwvcHJlPic7XG4gIH1cblxuICByZXR1cm4gJzxwcmU+PGNvZGUgY2xhc3M9XCInXG4gICAgKyB0aGlzLm9wdGlvbnMubGFuZ1ByZWZpeFxuICAgICsgZXNjYXBlKGxhbmcsIHRydWUpXG4gICAgKyAnXCI+J1xuICAgICsgKGVzY2FwZWQgPyBjb2RlIDogZXNjYXBlKGNvZGUsIHRydWUpKVxuICAgICsgJzwvY29kZT48L3ByZT5cXG4nO1xufTtcblxuUmVuZGVyZXIucHJvdG90eXBlLmJsb2NrcXVvdGUgPSBmdW5jdGlvbihxdW90ZSkge1xuICByZXR1cm4gJzxibG9ja3F1b3RlPlxcbicgKyBxdW90ZSArICc8L2Jsb2NrcXVvdGU+XFxuJztcbn07XG5cblJlbmRlcmVyLnByb3RvdHlwZS5odG1sID0gZnVuY3Rpb24oaHRtbCkge1xuICByZXR1cm4gaHRtbDtcbn07XG5cblJlbmRlcmVyLnByb3RvdHlwZS5oZWFkaW5nID0gZnVuY3Rpb24odGV4dCwgbGV2ZWwsIHJhdywgc2x1Z2dlcikge1xuICBpZiAodGhpcy5vcHRpb25zLmhlYWRlcklkcykge1xuICAgIHJldHVybiAnPGgnXG4gICAgICArIGxldmVsXG4gICAgICArICcgaWQ9XCInXG4gICAgICArIHRoaXMub3B0aW9ucy5oZWFkZXJQcmVmaXhcbiAgICAgICsgc2x1Z2dlci5zbHVnKHJhdylcbiAgICAgICsgJ1wiPidcbiAgICAgICsgdGV4dFxuICAgICAgKyAnPC9oJ1xuICAgICAgKyBsZXZlbFxuICAgICAgKyAnPlxcbic7XG4gIH1cbiAgLy8gaWdub3JlIElEc1xuICByZXR1cm4gJzxoJyArIGxldmVsICsgJz4nICsgdGV4dCArICc8L2gnICsgbGV2ZWwgKyAnPlxcbic7XG59O1xuXG5SZW5kZXJlci5wcm90b3R5cGUuaHIgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMub3B0aW9ucy54aHRtbCA/ICc8aHIvPlxcbicgOiAnPGhyPlxcbic7XG59O1xuXG5SZW5kZXJlci5wcm90b3R5cGUubGlzdCA9IGZ1bmN0aW9uKGJvZHksIG9yZGVyZWQsIHN0YXJ0KSB7XG4gIHZhciB0eXBlID0gb3JkZXJlZCA/ICdvbCcgOiAndWwnLFxuICAgICAgc3RhcnRhdHQgPSAob3JkZXJlZCAmJiBzdGFydCAhPT0gMSkgPyAoJyBzdGFydD1cIicgKyBzdGFydCArICdcIicpIDogJyc7XG4gIHJldHVybiAnPCcgKyB0eXBlICsgc3RhcnRhdHQgKyAnPlxcbicgKyBib2R5ICsgJzwvJyArIHR5cGUgKyAnPlxcbic7XG59O1xuXG5SZW5kZXJlci5wcm90b3R5cGUubGlzdGl0ZW0gPSBmdW5jdGlvbih0ZXh0KSB7XG4gIHJldHVybiAnPGxpPicgKyB0ZXh0ICsgJzwvbGk+XFxuJztcbn07XG5cblJlbmRlcmVyLnByb3RvdHlwZS5jaGVja2JveCA9IGZ1bmN0aW9uKGNoZWNrZWQpIHtcbiAgcmV0dXJuICc8aW5wdXQgJ1xuICAgICsgKGNoZWNrZWQgPyAnY2hlY2tlZD1cIlwiICcgOiAnJylcbiAgICArICdkaXNhYmxlZD1cIlwiIHR5cGU9XCJjaGVja2JveFwiJ1xuICAgICsgKHRoaXMub3B0aW9ucy54aHRtbCA/ICcgLycgOiAnJylcbiAgICArICc+ICc7XG59O1xuXG5SZW5kZXJlci5wcm90b3R5cGUucGFyYWdyYXBoID0gZnVuY3Rpb24odGV4dCkge1xuICByZXR1cm4gJzxwPicgKyB0ZXh0ICsgJzwvcD5cXG4nO1xufTtcblxuUmVuZGVyZXIucHJvdG90eXBlLnRhYmxlID0gZnVuY3Rpb24oaGVhZGVyLCBib2R5KSB7XG4gIGlmIChib2R5KSBib2R5ID0gJzx0Ym9keT4nICsgYm9keSArICc8L3Rib2R5Pic7XG5cbiAgcmV0dXJuICc8dGFibGU+XFxuJ1xuICAgICsgJzx0aGVhZD5cXG4nXG4gICAgKyBoZWFkZXJcbiAgICArICc8L3RoZWFkPlxcbidcbiAgICArIGJvZHlcbiAgICArICc8L3RhYmxlPlxcbic7XG59O1xuXG5SZW5kZXJlci5wcm90b3R5cGUudGFibGVyb3cgPSBmdW5jdGlvbihjb250ZW50KSB7XG4gIHJldHVybiAnPHRyPlxcbicgKyBjb250ZW50ICsgJzwvdHI+XFxuJztcbn07XG5cblJlbmRlcmVyLnByb3RvdHlwZS50YWJsZWNlbGwgPSBmdW5jdGlvbihjb250ZW50LCBmbGFncykge1xuICB2YXIgdHlwZSA9IGZsYWdzLmhlYWRlciA/ICd0aCcgOiAndGQnO1xuICB2YXIgdGFnID0gZmxhZ3MuYWxpZ25cbiAgICA/ICc8JyArIHR5cGUgKyAnIGFsaWduPVwiJyArIGZsYWdzLmFsaWduICsgJ1wiPidcbiAgICA6ICc8JyArIHR5cGUgKyAnPic7XG4gIHJldHVybiB0YWcgKyBjb250ZW50ICsgJzwvJyArIHR5cGUgKyAnPlxcbic7XG59O1xuXG4vLyBzcGFuIGxldmVsIHJlbmRlcmVyXG5SZW5kZXJlci5wcm90b3R5cGUuc3Ryb25nID0gZnVuY3Rpb24odGV4dCkge1xuICByZXR1cm4gJzxzdHJvbmc+JyArIHRleHQgKyAnPC9zdHJvbmc+Jztcbn07XG5cblJlbmRlcmVyLnByb3RvdHlwZS5lbSA9IGZ1bmN0aW9uKHRleHQpIHtcbiAgcmV0dXJuICc8ZW0+JyArIHRleHQgKyAnPC9lbT4nO1xufTtcblxuUmVuZGVyZXIucHJvdG90eXBlLmNvZGVzcGFuID0gZnVuY3Rpb24odGV4dCkge1xuICByZXR1cm4gJzxjb2RlPicgKyB0ZXh0ICsgJzwvY29kZT4nO1xufTtcblxuUmVuZGVyZXIucHJvdG90eXBlLmJyID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLm9wdGlvbnMueGh0bWwgPyAnPGJyLz4nIDogJzxicj4nO1xufTtcblxuUmVuZGVyZXIucHJvdG90eXBlLmRlbCA9IGZ1bmN0aW9uKHRleHQpIHtcbiAgcmV0dXJuICc8ZGVsPicgKyB0ZXh0ICsgJzwvZGVsPic7XG59O1xuXG5SZW5kZXJlci5wcm90b3R5cGUubGluayA9IGZ1bmN0aW9uKGhyZWYsIHRpdGxlLCB0ZXh0KSB7XG4gIGhyZWYgPSBjbGVhblVybCh0aGlzLm9wdGlvbnMuc2FuaXRpemUsIHRoaXMub3B0aW9ucy5iYXNlVXJsLCBocmVmKTtcbiAgaWYgKGhyZWYgPT09IG51bGwpIHtcbiAgICByZXR1cm4gdGV4dDtcbiAgfVxuICB2YXIgb3V0ID0gJzxhIGhyZWY9XCInICsgZXNjYXBlKGhyZWYpICsgJ1wiJztcbiAgaWYgKHRpdGxlKSB7XG4gICAgb3V0ICs9ICcgdGl0bGU9XCInICsgdGl0bGUgKyAnXCInO1xuICB9XG4gIG91dCArPSAnPicgKyB0ZXh0ICsgJzwvYT4nO1xuICByZXR1cm4gb3V0O1xufTtcblxuUmVuZGVyZXIucHJvdG90eXBlLmltYWdlID0gZnVuY3Rpb24oaHJlZiwgdGl0bGUsIHRleHQpIHtcbiAgaHJlZiA9IGNsZWFuVXJsKHRoaXMub3B0aW9ucy5zYW5pdGl6ZSwgdGhpcy5vcHRpb25zLmJhc2VVcmwsIGhyZWYpO1xuICBpZiAoaHJlZiA9PT0gbnVsbCkge1xuICAgIHJldHVybiB0ZXh0O1xuICB9XG5cbiAgdmFyIG91dCA9ICc8aW1nIHNyYz1cIicgKyBocmVmICsgJ1wiIGFsdD1cIicgKyB0ZXh0ICsgJ1wiJztcbiAgaWYgKHRpdGxlKSB7XG4gICAgb3V0ICs9ICcgdGl0bGU9XCInICsgdGl0bGUgKyAnXCInO1xuICB9XG4gIG91dCArPSB0aGlzLm9wdGlvbnMueGh0bWwgPyAnLz4nIDogJz4nO1xuICByZXR1cm4gb3V0O1xufTtcblxuUmVuZGVyZXIucHJvdG90eXBlLnRleHQgPSBmdW5jdGlvbih0ZXh0KSB7XG4gIHJldHVybiB0ZXh0O1xufTtcblxuLyoqXG4gKiBUZXh0UmVuZGVyZXJcbiAqIHJldHVybnMgb25seSB0aGUgdGV4dHVhbCBwYXJ0IG9mIHRoZSB0b2tlblxuICovXG5cbmZ1bmN0aW9uIFRleHRSZW5kZXJlcigpIHt9XG5cbi8vIG5vIG5lZWQgZm9yIGJsb2NrIGxldmVsIHJlbmRlcmVyc1xuXG5UZXh0UmVuZGVyZXIucHJvdG90eXBlLnN0cm9uZyA9XG5UZXh0UmVuZGVyZXIucHJvdG90eXBlLmVtID1cblRleHRSZW5kZXJlci5wcm90b3R5cGUuY29kZXNwYW4gPVxuVGV4dFJlbmRlcmVyLnByb3RvdHlwZS5kZWwgPVxuVGV4dFJlbmRlcmVyLnByb3RvdHlwZS50ZXh0ID0gZnVuY3Rpb24odGV4dCkge1xuICByZXR1cm4gdGV4dDtcbn07XG5cblRleHRSZW5kZXJlci5wcm90b3R5cGUubGluayA9XG5UZXh0UmVuZGVyZXIucHJvdG90eXBlLmltYWdlID0gZnVuY3Rpb24oaHJlZiwgdGl0bGUsIHRleHQpIHtcbiAgcmV0dXJuICcnICsgdGV4dDtcbn07XG5cblRleHRSZW5kZXJlci5wcm90b3R5cGUuYnIgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuICcnO1xufTtcblxuLyoqXG4gKiBQYXJzaW5nICYgQ29tcGlsaW5nXG4gKi9cblxuZnVuY3Rpb24gUGFyc2VyKG9wdGlvbnMpIHtcbiAgdGhpcy50b2tlbnMgPSBbXTtcbiAgdGhpcy50b2tlbiA9IG51bGw7XG4gIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgfHwgbWFya2VkLmRlZmF1bHRzO1xuICB0aGlzLm9wdGlvbnMucmVuZGVyZXIgPSB0aGlzLm9wdGlvbnMucmVuZGVyZXIgfHwgbmV3IFJlbmRlcmVyKCk7XG4gIHRoaXMucmVuZGVyZXIgPSB0aGlzLm9wdGlvbnMucmVuZGVyZXI7XG4gIHRoaXMucmVuZGVyZXIub3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgdGhpcy5zbHVnZ2VyID0gbmV3IFNsdWdnZXIoKTtcbn1cblxuLyoqXG4gKiBTdGF0aWMgUGFyc2UgTWV0aG9kXG4gKi9cblxuUGFyc2VyLnBhcnNlID0gZnVuY3Rpb24oc3JjLCBvcHRpb25zKSB7XG4gIHZhciBwYXJzZXIgPSBuZXcgUGFyc2VyKG9wdGlvbnMpO1xuICByZXR1cm4gcGFyc2VyLnBhcnNlKHNyYyk7XG59O1xuXG4vKipcbiAqIFBhcnNlIExvb3BcbiAqL1xuXG5QYXJzZXIucHJvdG90eXBlLnBhcnNlID0gZnVuY3Rpb24oc3JjKSB7XG4gIHRoaXMuaW5saW5lID0gbmV3IElubGluZUxleGVyKHNyYy5saW5rcywgdGhpcy5vcHRpb25zKTtcbiAgLy8gdXNlIGFuIElubGluZUxleGVyIHdpdGggYSBUZXh0UmVuZGVyZXIgdG8gZXh0cmFjdCBwdXJlIHRleHRcbiAgdGhpcy5pbmxpbmVUZXh0ID0gbmV3IElubGluZUxleGVyKFxuICAgIHNyYy5saW5rcyxcbiAgICBtZXJnZSh7fSwgdGhpcy5vcHRpb25zLCB7IHJlbmRlcmVyOiBuZXcgVGV4dFJlbmRlcmVyKCkgfSlcbiAgKTtcbiAgdGhpcy50b2tlbnMgPSBzcmMucmV2ZXJzZSgpO1xuXG4gIHZhciBvdXQgPSAnJztcbiAgd2hpbGUgKHRoaXMubmV4dCgpKSB7XG4gICAgb3V0ICs9IHRoaXMudG9rKCk7XG4gIH1cblxuICByZXR1cm4gb3V0O1xufTtcblxuLyoqXG4gKiBOZXh0IFRva2VuXG4gKi9cblxuUGFyc2VyLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMudG9rZW4gPSB0aGlzLnRva2Vucy5wb3AoKTtcbiAgcmV0dXJuIHRoaXMudG9rZW47XG59O1xuXG4vKipcbiAqIFByZXZpZXcgTmV4dCBUb2tlblxuICovXG5cblBhcnNlci5wcm90b3R5cGUucGVlayA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy50b2tlbnNbdGhpcy50b2tlbnMubGVuZ3RoIC0gMV0gfHwgMDtcbn07XG5cbi8qKlxuICogUGFyc2UgVGV4dCBUb2tlbnNcbiAqL1xuXG5QYXJzZXIucHJvdG90eXBlLnBhcnNlVGV4dCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgYm9keSA9IHRoaXMudG9rZW4udGV4dDtcblxuICB3aGlsZSAodGhpcy5wZWVrKCkudHlwZSA9PT0gJ3RleHQnKSB7XG4gICAgYm9keSArPSAnXFxuJyArIHRoaXMubmV4dCgpLnRleHQ7XG4gIH1cblxuICByZXR1cm4gdGhpcy5pbmxpbmUub3V0cHV0KGJvZHkpO1xufTtcblxuLyoqXG4gKiBQYXJzZSBDdXJyZW50IFRva2VuXG4gKi9cblxuUGFyc2VyLnByb3RvdHlwZS50b2sgPSBmdW5jdGlvbigpIHtcbiAgc3dpdGNoICh0aGlzLnRva2VuLnR5cGUpIHtcbiAgICBjYXNlICdzcGFjZSc6IHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgY2FzZSAnaHInOiB7XG4gICAgICByZXR1cm4gdGhpcy5yZW5kZXJlci5ocigpO1xuICAgIH1cbiAgICBjYXNlICdoZWFkaW5nJzoge1xuICAgICAgcmV0dXJuIHRoaXMucmVuZGVyZXIuaGVhZGluZyhcbiAgICAgICAgdGhpcy5pbmxpbmUub3V0cHV0KHRoaXMudG9rZW4udGV4dCksXG4gICAgICAgIHRoaXMudG9rZW4uZGVwdGgsXG4gICAgICAgIHVuZXNjYXBlKHRoaXMuaW5saW5lVGV4dC5vdXRwdXQodGhpcy50b2tlbi50ZXh0KSksXG4gICAgICAgIHRoaXMuc2x1Z2dlcik7XG4gICAgfVxuICAgIGNhc2UgJ2NvZGUnOiB7XG4gICAgICByZXR1cm4gdGhpcy5yZW5kZXJlci5jb2RlKHRoaXMudG9rZW4udGV4dCxcbiAgICAgICAgdGhpcy50b2tlbi5sYW5nLFxuICAgICAgICB0aGlzLnRva2VuLmVzY2FwZWQpO1xuICAgIH1cbiAgICBjYXNlICd0YWJsZSc6IHtcbiAgICAgIHZhciBoZWFkZXIgPSAnJyxcbiAgICAgICAgICBib2R5ID0gJycsXG4gICAgICAgICAgaSxcbiAgICAgICAgICByb3csXG4gICAgICAgICAgY2VsbCxcbiAgICAgICAgICBqO1xuXG4gICAgICAvLyBoZWFkZXJcbiAgICAgIGNlbGwgPSAnJztcbiAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLnRva2VuLmhlYWRlci5sZW5ndGg7IGkrKykge1xuICAgICAgICBjZWxsICs9IHRoaXMucmVuZGVyZXIudGFibGVjZWxsKFxuICAgICAgICAgIHRoaXMuaW5saW5lLm91dHB1dCh0aGlzLnRva2VuLmhlYWRlcltpXSksXG4gICAgICAgICAgeyBoZWFkZXI6IHRydWUsIGFsaWduOiB0aGlzLnRva2VuLmFsaWduW2ldIH1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGhlYWRlciArPSB0aGlzLnJlbmRlcmVyLnRhYmxlcm93KGNlbGwpO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy50b2tlbi5jZWxscy5sZW5ndGg7IGkrKykge1xuICAgICAgICByb3cgPSB0aGlzLnRva2VuLmNlbGxzW2ldO1xuXG4gICAgICAgIGNlbGwgPSAnJztcbiAgICAgICAgZm9yIChqID0gMDsgaiA8IHJvdy5sZW5ndGg7IGorKykge1xuICAgICAgICAgIGNlbGwgKz0gdGhpcy5yZW5kZXJlci50YWJsZWNlbGwoXG4gICAgICAgICAgICB0aGlzLmlubGluZS5vdXRwdXQocm93W2pdKSxcbiAgICAgICAgICAgIHsgaGVhZGVyOiBmYWxzZSwgYWxpZ246IHRoaXMudG9rZW4uYWxpZ25bal0gfVxuICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBib2R5ICs9IHRoaXMucmVuZGVyZXIudGFibGVyb3coY2VsbCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5yZW5kZXJlci50YWJsZShoZWFkZXIsIGJvZHkpO1xuICAgIH1cbiAgICBjYXNlICdibG9ja3F1b3RlX3N0YXJ0Jzoge1xuICAgICAgYm9keSA9ICcnO1xuXG4gICAgICB3aGlsZSAodGhpcy5uZXh0KCkudHlwZSAhPT0gJ2Jsb2NrcXVvdGVfZW5kJykge1xuICAgICAgICBib2R5ICs9IHRoaXMudG9rKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnJlbmRlcmVyLmJsb2NrcXVvdGUoYm9keSk7XG4gICAgfVxuICAgIGNhc2UgJ2xpc3Rfc3RhcnQnOiB7XG4gICAgICBib2R5ID0gJyc7XG4gICAgICB2YXIgb3JkZXJlZCA9IHRoaXMudG9rZW4ub3JkZXJlZCxcbiAgICAgICAgICBzdGFydCA9IHRoaXMudG9rZW4uc3RhcnQ7XG5cbiAgICAgIHdoaWxlICh0aGlzLm5leHQoKS50eXBlICE9PSAnbGlzdF9lbmQnKSB7XG4gICAgICAgIGJvZHkgKz0gdGhpcy50b2soKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMucmVuZGVyZXIubGlzdChib2R5LCBvcmRlcmVkLCBzdGFydCk7XG4gICAgfVxuICAgIGNhc2UgJ2xpc3RfaXRlbV9zdGFydCc6IHtcbiAgICAgIGJvZHkgPSAnJztcbiAgICAgIHZhciBsb29zZSA9IHRoaXMudG9rZW4ubG9vc2U7XG4gICAgICB2YXIgY2hlY2tlZCA9IHRoaXMudG9rZW4uY2hlY2tlZDtcbiAgICAgIHZhciB0YXNrID0gdGhpcy50b2tlbi50YXNrO1xuXG4gICAgICBpZiAodGhpcy50b2tlbi50YXNrKSB7XG4gICAgICAgIGJvZHkgKz0gdGhpcy5yZW5kZXJlci5jaGVja2JveChjaGVja2VkKTtcbiAgICAgIH1cblxuICAgICAgd2hpbGUgKHRoaXMubmV4dCgpLnR5cGUgIT09ICdsaXN0X2l0ZW1fZW5kJykge1xuICAgICAgICBib2R5ICs9ICFsb29zZSAmJiB0aGlzLnRva2VuLnR5cGUgPT09ICd0ZXh0J1xuICAgICAgICAgID8gdGhpcy5wYXJzZVRleHQoKVxuICAgICAgICAgIDogdGhpcy50b2soKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLnJlbmRlcmVyLmxpc3RpdGVtKGJvZHksIHRhc2ssIGNoZWNrZWQpO1xuICAgIH1cbiAgICBjYXNlICdodG1sJzoge1xuICAgICAgLy8gVE9ETyBwYXJzZSBpbmxpbmUgY29udGVudCBpZiBwYXJhbWV0ZXIgbWFya2Rvd249MVxuICAgICAgcmV0dXJuIHRoaXMucmVuZGVyZXIuaHRtbCh0aGlzLnRva2VuLnRleHQpO1xuICAgIH1cbiAgICBjYXNlICdwYXJhZ3JhcGgnOiB7XG4gICAgICByZXR1cm4gdGhpcy5yZW5kZXJlci5wYXJhZ3JhcGgodGhpcy5pbmxpbmUub3V0cHV0KHRoaXMudG9rZW4udGV4dCkpO1xuICAgIH1cbiAgICBjYXNlICd0ZXh0Jzoge1xuICAgICAgcmV0dXJuIHRoaXMucmVuZGVyZXIucGFyYWdyYXBoKHRoaXMucGFyc2VUZXh0KCkpO1xuICAgIH1cbiAgICBkZWZhdWx0OiB7XG4gICAgICB2YXIgZXJyTXNnID0gJ1Rva2VuIHdpdGggXCInICsgdGhpcy50b2tlbi50eXBlICsgJ1wiIHR5cGUgd2FzIG5vdCBmb3VuZC4nO1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5zaWxlbnQpIHtcbiAgICAgICAgY29uc29sZS5sb2coZXJyTXNnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJNc2cpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBTbHVnZ2VyIGdlbmVyYXRlcyBoZWFkZXIgaWRcbiAqL1xuXG5mdW5jdGlvbiBTbHVnZ2VyKCkge1xuICB0aGlzLnNlZW4gPSB7fTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0IHN0cmluZyB0byB1bmlxdWUgaWRcbiAqL1xuXG5TbHVnZ2VyLnByb3RvdHlwZS5zbHVnID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgdmFyIHNsdWcgPSB2YWx1ZVxuICAgIC50b0xvd2VyQ2FzZSgpXG4gICAgLnRyaW0oKVxuICAgIC5yZXBsYWNlKC9bXFx1MjAwMC1cXHUyMDZGXFx1MkUwMC1cXHUyRTdGXFxcXCchXCIjJCUmKCkqKywuLzo7PD0+P0BbXFxdXmB7fH1+XS9nLCAnJylcbiAgICAucmVwbGFjZSgvXFxzL2csICctJyk7XG5cbiAgaWYgKHRoaXMuc2Vlbi5oYXNPd25Qcm9wZXJ0eShzbHVnKSkge1xuICAgIHZhciBvcmlnaW5hbFNsdWcgPSBzbHVnO1xuICAgIGRvIHtcbiAgICAgIHRoaXMuc2VlbltvcmlnaW5hbFNsdWddKys7XG4gICAgICBzbHVnID0gb3JpZ2luYWxTbHVnICsgJy0nICsgdGhpcy5zZWVuW29yaWdpbmFsU2x1Z107XG4gICAgfSB3aGlsZSAodGhpcy5zZWVuLmhhc093blByb3BlcnR5KHNsdWcpKTtcbiAgfVxuICB0aGlzLnNlZW5bc2x1Z10gPSAwO1xuXG4gIHJldHVybiBzbHVnO1xufTtcblxuLyoqXG4gKiBIZWxwZXJzXG4gKi9cblxuZnVuY3Rpb24gZXNjYXBlKGh0bWwsIGVuY29kZSkge1xuICBpZiAoZW5jb2RlKSB7XG4gICAgaWYgKGVzY2FwZS5lc2NhcGVUZXN0LnRlc3QoaHRtbCkpIHtcbiAgICAgIHJldHVybiBodG1sLnJlcGxhY2UoZXNjYXBlLmVzY2FwZVJlcGxhY2UsIGZ1bmN0aW9uKGNoKSB7IHJldHVybiBlc2NhcGUucmVwbGFjZW1lbnRzW2NoXTsgfSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChlc2NhcGUuZXNjYXBlVGVzdE5vRW5jb2RlLnRlc3QoaHRtbCkpIHtcbiAgICAgIHJldHVybiBodG1sLnJlcGxhY2UoZXNjYXBlLmVzY2FwZVJlcGxhY2VOb0VuY29kZSwgZnVuY3Rpb24oY2gpIHsgcmV0dXJuIGVzY2FwZS5yZXBsYWNlbWVudHNbY2hdOyB9KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gaHRtbDtcbn1cblxuZXNjYXBlLmVzY2FwZVRlc3QgPSAvWyY8PlwiJ10vO1xuZXNjYXBlLmVzY2FwZVJlcGxhY2UgPSAvWyY8PlwiJ10vZztcbmVzY2FwZS5yZXBsYWNlbWVudHMgPSB7XG4gICcmJzogJyZhbXA7JyxcbiAgJzwnOiAnJmx0OycsXG4gICc+JzogJyZndDsnLFxuICAnXCInOiAnJnF1b3Q7JyxcbiAgXCInXCI6ICcmIzM5Oydcbn07XG5cbmVzY2FwZS5lc2NhcGVUZXN0Tm9FbmNvZGUgPSAvWzw+XCInXXwmKD8hIz9cXHcrOykvO1xuZXNjYXBlLmVzY2FwZVJlcGxhY2VOb0VuY29kZSA9IC9bPD5cIiddfCYoPyEjP1xcdys7KS9nO1xuXG5mdW5jdGlvbiB1bmVzY2FwZShodG1sKSB7XG4gIC8vIGV4cGxpY2l0bHkgbWF0Y2ggZGVjaW1hbCwgaGV4LCBhbmQgbmFtZWQgSFRNTCBlbnRpdGllc1xuICByZXR1cm4gaHRtbC5yZXBsYWNlKC8mKCMoPzpcXGQrKXwoPzojeFswLTlBLUZhLWZdKyl8KD86XFx3KykpOz8vaWcsIGZ1bmN0aW9uKF8sIG4pIHtcbiAgICBuID0gbi50b0xvd2VyQ2FzZSgpO1xuICAgIGlmIChuID09PSAnY29sb24nKSByZXR1cm4gJzonO1xuICAgIGlmIChuLmNoYXJBdCgwKSA9PT0gJyMnKSB7XG4gICAgICByZXR1cm4gbi5jaGFyQXQoMSkgPT09ICd4J1xuICAgICAgICA/IFN0cmluZy5mcm9tQ2hhckNvZGUocGFyc2VJbnQobi5zdWJzdHJpbmcoMiksIDE2KSlcbiAgICAgICAgOiBTdHJpbmcuZnJvbUNoYXJDb2RlKCtuLnN1YnN0cmluZygxKSk7XG4gICAgfVxuICAgIHJldHVybiAnJztcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGVkaXQocmVnZXgsIG9wdCkge1xuICByZWdleCA9IHJlZ2V4LnNvdXJjZSB8fCByZWdleDtcbiAgb3B0ID0gb3B0IHx8ICcnO1xuICByZXR1cm4ge1xuICAgIHJlcGxhY2U6IGZ1bmN0aW9uKG5hbWUsIHZhbCkge1xuICAgICAgdmFsID0gdmFsLnNvdXJjZSB8fCB2YWw7XG4gICAgICB2YWwgPSB2YWwucmVwbGFjZSgvKF58W15cXFtdKVxcXi9nLCAnJDEnKTtcbiAgICAgIHJlZ2V4ID0gcmVnZXgucmVwbGFjZShuYW1lLCB2YWwpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBnZXRSZWdleDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gbmV3IFJlZ0V4cChyZWdleCwgb3B0KTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNsZWFuVXJsKHNhbml0aXplLCBiYXNlLCBocmVmKSB7XG4gIGlmIChzYW5pdGl6ZSkge1xuICAgIHRyeSB7XG4gICAgICB2YXIgcHJvdCA9IGRlY29kZVVSSUNvbXBvbmVudCh1bmVzY2FwZShocmVmKSlcbiAgICAgICAgLnJlcGxhY2UoL1teXFx3Ol0vZywgJycpXG4gICAgICAgIC50b0xvd2VyQ2FzZSgpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAocHJvdC5pbmRleE9mKCdqYXZhc2NyaXB0OicpID09PSAwIHx8IHByb3QuaW5kZXhPZigndmJzY3JpcHQ6JykgPT09IDAgfHwgcHJvdC5pbmRleE9mKCdkYXRhOicpID09PSAwKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cbiAgaWYgKGJhc2UgJiYgIW9yaWdpbkluZGVwZW5kZW50VXJsLnRlc3QoaHJlZikpIHtcbiAgICBocmVmID0gcmVzb2x2ZVVybChiYXNlLCBocmVmKTtcbiAgfVxuICB0cnkge1xuICAgIGhyZWYgPSBlbmNvZGVVUkkoaHJlZikucmVwbGFjZSgvJTI1L2csICclJyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gaHJlZjtcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZVVybChiYXNlLCBocmVmKSB7XG4gIGlmICghYmFzZVVybHNbJyAnICsgYmFzZV0pIHtcbiAgICAvLyB3ZSBjYW4gaWdub3JlIGV2ZXJ5dGhpbmcgaW4gYmFzZSBhZnRlciB0aGUgbGFzdCBzbGFzaCBvZiBpdHMgcGF0aCBjb21wb25lbnQsXG4gICAgLy8gYnV0IHdlIG1pZ2h0IG5lZWQgdG8gYWRkIF90aGF0X1xuICAgIC8vIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMzOTg2I3NlY3Rpb24tM1xuICAgIGlmICgvXlteOl0rOlxcLypbXi9dKiQvLnRlc3QoYmFzZSkpIHtcbiAgICAgIGJhc2VVcmxzWycgJyArIGJhc2VdID0gYmFzZSArICcvJztcbiAgICB9IGVsc2Uge1xuICAgICAgYmFzZVVybHNbJyAnICsgYmFzZV0gPSBydHJpbShiYXNlLCAnLycsIHRydWUpO1xuICAgIH1cbiAgfVxuICBiYXNlID0gYmFzZVVybHNbJyAnICsgYmFzZV07XG5cbiAgaWYgKGhyZWYuc2xpY2UoMCwgMikgPT09ICcvLycpIHtcbiAgICByZXR1cm4gYmFzZS5yZXBsYWNlKC86W1xcc1xcU10qLywgJzonKSArIGhyZWY7XG4gIH0gZWxzZSBpZiAoaHJlZi5jaGFyQXQoMCkgPT09ICcvJykge1xuICAgIHJldHVybiBiYXNlLnJlcGxhY2UoLyg6XFwvKlteL10qKVtcXHNcXFNdKi8sICckMScpICsgaHJlZjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYmFzZSArIGhyZWY7XG4gIH1cbn1cbnZhciBiYXNlVXJscyA9IHt9O1xudmFyIG9yaWdpbkluZGVwZW5kZW50VXJsID0gL14kfF5bYS16XVthLXowLTkrLi1dKjp8Xls/I10vaTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5ub29wLmV4ZWMgPSBub29wO1xuXG5mdW5jdGlvbiBtZXJnZShvYmopIHtcbiAgdmFyIGkgPSAxLFxuICAgICAgdGFyZ2V0LFxuICAgICAga2V5O1xuXG4gIGZvciAoOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdGFyZ2V0ID0gYXJndW1lbnRzW2ldO1xuICAgIGZvciAoa2V5IGluIHRhcmdldCkge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0YXJnZXQsIGtleSkpIHtcbiAgICAgICAgb2JqW2tleV0gPSB0YXJnZXRba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5mdW5jdGlvbiBzcGxpdENlbGxzKHRhYmxlUm93LCBjb3VudCkge1xuICAvLyBlbnN1cmUgdGhhdCBldmVyeSBjZWxsLWRlbGltaXRpbmcgcGlwZSBoYXMgYSBzcGFjZVxuICAvLyBiZWZvcmUgaXQgdG8gZGlzdGluZ3Vpc2ggaXQgZnJvbSBhbiBlc2NhcGVkIHBpcGVcbiAgdmFyIHJvdyA9IHRhYmxlUm93LnJlcGxhY2UoL1xcfC9nLCBmdW5jdGlvbihtYXRjaCwgb2Zmc2V0LCBzdHIpIHtcbiAgICAgICAgdmFyIGVzY2FwZWQgPSBmYWxzZSxcbiAgICAgICAgICAgIGN1cnIgPSBvZmZzZXQ7XG4gICAgICAgIHdoaWxlICgtLWN1cnIgPj0gMCAmJiBzdHJbY3Vycl0gPT09ICdcXFxcJykgZXNjYXBlZCA9ICFlc2NhcGVkO1xuICAgICAgICBpZiAoZXNjYXBlZCkge1xuICAgICAgICAgIC8vIG9kZCBudW1iZXIgb2Ygc2xhc2hlcyBtZWFucyB8IGlzIGVzY2FwZWRcbiAgICAgICAgICAvLyBzbyB3ZSBsZWF2ZSBpdCBhbG9uZVxuICAgICAgICAgIHJldHVybiAnfCc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gYWRkIHNwYWNlIGJlZm9yZSB1bmVzY2FwZWQgfFxuICAgICAgICAgIHJldHVybiAnIHwnO1xuICAgICAgICB9XG4gICAgICB9KSxcbiAgICAgIGNlbGxzID0gcm93LnNwbGl0KC8gXFx8LyksXG4gICAgICBpID0gMDtcblxuICBpZiAoY2VsbHMubGVuZ3RoID4gY291bnQpIHtcbiAgICBjZWxscy5zcGxpY2UoY291bnQpO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChjZWxscy5sZW5ndGggPCBjb3VudCkgY2VsbHMucHVzaCgnJyk7XG4gIH1cblxuICBmb3IgKDsgaSA8IGNlbGxzLmxlbmd0aDsgaSsrKSB7XG4gICAgLy8gbGVhZGluZyBvciB0cmFpbGluZyB3aGl0ZXNwYWNlIGlzIGlnbm9yZWQgcGVyIHRoZSBnZm0gc3BlY1xuICAgIGNlbGxzW2ldID0gY2VsbHNbaV0udHJpbSgpLnJlcGxhY2UoL1xcXFxcXHwvZywgJ3wnKTtcbiAgfVxuICByZXR1cm4gY2VsbHM7XG59XG5cbi8vIFJlbW92ZSB0cmFpbGluZyAnYydzLiBFcXVpdmFsZW50IHRvIHN0ci5yZXBsYWNlKC9jKiQvLCAnJykuXG4vLyAvYyokLyBpcyB2dWxuZXJhYmxlIHRvIFJFRE9TLlxuLy8gaW52ZXJ0OiBSZW1vdmUgc3VmZml4IG9mIG5vbi1jIGNoYXJzIGluc3RlYWQuIERlZmF1bHQgZmFsc2V5LlxuZnVuY3Rpb24gcnRyaW0oc3RyLCBjLCBpbnZlcnQpIHtcbiAgaWYgKHN0ci5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICAvLyBMZW5ndGggb2Ygc3VmZml4IG1hdGNoaW5nIHRoZSBpbnZlcnQgY29uZGl0aW9uLlxuICB2YXIgc3VmZkxlbiA9IDA7XG5cbiAgLy8gU3RlcCBsZWZ0IHVudGlsIHdlIGZhaWwgdG8gbWF0Y2ggdGhlIGludmVydCBjb25kaXRpb24uXG4gIHdoaWxlIChzdWZmTGVuIDwgc3RyLmxlbmd0aCkge1xuICAgIHZhciBjdXJyQ2hhciA9IHN0ci5jaGFyQXQoc3RyLmxlbmd0aCAtIHN1ZmZMZW4gLSAxKTtcbiAgICBpZiAoY3VyckNoYXIgPT09IGMgJiYgIWludmVydCkge1xuICAgICAgc3VmZkxlbisrO1xuICAgIH0gZWxzZSBpZiAoY3VyckNoYXIgIT09IGMgJiYgaW52ZXJ0KSB7XG4gICAgICBzdWZmTGVuKys7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzdHIuc3Vic3RyKDAsIHN0ci5sZW5ndGggLSBzdWZmTGVuKTtcbn1cblxuZnVuY3Rpb24gZmluZENsb3NpbmdCcmFja2V0KHN0ciwgYikge1xuICBpZiAoc3RyLmluZGV4T2YoYlsxXSkgPT09IC0xKSB7XG4gICAgcmV0dXJuIC0xO1xuICB9XG4gIHZhciBsZXZlbCA9IDA7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0cltpXSA9PT0gJ1xcXFwnKSB7XG4gICAgICBpKys7XG4gICAgfSBlbHNlIGlmIChzdHJbaV0gPT09IGJbMF0pIHtcbiAgICAgIGxldmVsKys7XG4gICAgfSBlbHNlIGlmIChzdHJbaV0gPT09IGJbMV0pIHtcbiAgICAgIGxldmVsLS07XG4gICAgICBpZiAobGV2ZWwgPCAwKSB7XG4gICAgICAgIHJldHVybiBpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gLTE7XG59XG5cbmZ1bmN0aW9uIGNoZWNrU2FuaXRpemVEZXByZWNhdGlvbihvcHQpIHtcbiAgaWYgKG9wdCAmJiBvcHQuc2FuaXRpemUgJiYgIW9wdC5zaWxlbnQpIHtcbiAgICBjb25zb2xlLndhcm4oJ21hcmtlZCgpOiBzYW5pdGl6ZSBhbmQgc2FuaXRpemVyIHBhcmFtZXRlcnMgYXJlIGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiAwLjcuMCwgc2hvdWxkIG5vdCBiZSB1c2VkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIGZ1dHVyZS4gUmVhZCBtb3JlIGhlcmU6IGh0dHBzOi8vbWFya2VkLmpzLm9yZy8jL1VTSU5HX0FEVkFOQ0VELm1kI29wdGlvbnMnKTtcbiAgfVxufVxuXG4vKipcbiAqIE1hcmtlZFxuICovXG5cbmZ1bmN0aW9uIG1hcmtlZChzcmMsIG9wdCwgY2FsbGJhY2spIHtcbiAgLy8gdGhyb3cgZXJyb3IgaW4gY2FzZSBvZiBub24gc3RyaW5nIGlucHV0XG4gIGlmICh0eXBlb2Ygc3JjID09PSAndW5kZWZpbmVkJyB8fCBzcmMgPT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ21hcmtlZCgpOiBpbnB1dCBwYXJhbWV0ZXIgaXMgdW5kZWZpbmVkIG9yIG51bGwnKTtcbiAgfVxuICBpZiAodHlwZW9mIHNyYyAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ21hcmtlZCgpOiBpbnB1dCBwYXJhbWV0ZXIgaXMgb2YgdHlwZSAnXG4gICAgICArIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChzcmMpICsgJywgc3RyaW5nIGV4cGVjdGVkJyk7XG4gIH1cblxuICBpZiAoY2FsbGJhY2sgfHwgdHlwZW9mIG9wdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGlmICghY2FsbGJhY2spIHtcbiAgICAgIGNhbGxiYWNrID0gb3B0O1xuICAgICAgb3B0ID0gbnVsbDtcbiAgICB9XG5cbiAgICBvcHQgPSBtZXJnZSh7fSwgbWFya2VkLmRlZmF1bHRzLCBvcHQgfHwge30pO1xuICAgIGNoZWNrU2FuaXRpemVEZXByZWNhdGlvbihvcHQpO1xuXG4gICAgdmFyIGhpZ2hsaWdodCA9IG9wdC5oaWdobGlnaHQsXG4gICAgICAgIHRva2VucyxcbiAgICAgICAgcGVuZGluZyxcbiAgICAgICAgaSA9IDA7XG5cbiAgICB0cnkge1xuICAgICAgdG9rZW5zID0gTGV4ZXIubGV4KHNyYywgb3B0KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soZSk7XG4gICAgfVxuXG4gICAgcGVuZGluZyA9IHRva2Vucy5sZW5ndGg7XG5cbiAgICB2YXIgZG9uZSA9IGZ1bmN0aW9uKGVycikge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICBvcHQuaGlnaGxpZ2h0ID0gaGlnaGxpZ2h0O1xuICAgICAgICByZXR1cm4gY2FsbGJhY2soZXJyKTtcbiAgICAgIH1cblxuICAgICAgdmFyIG91dDtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgb3V0ID0gUGFyc2VyLnBhcnNlKHRva2Vucywgb3B0KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgZXJyID0gZTtcbiAgICAgIH1cblxuICAgICAgb3B0LmhpZ2hsaWdodCA9IGhpZ2hsaWdodDtcblxuICAgICAgcmV0dXJuIGVyclxuICAgICAgICA/IGNhbGxiYWNrKGVycilcbiAgICAgICAgOiBjYWxsYmFjayhudWxsLCBvdXQpO1xuICAgIH07XG5cbiAgICBpZiAoIWhpZ2hsaWdodCB8fCBoaWdobGlnaHQubGVuZ3RoIDwgMykge1xuICAgICAgcmV0dXJuIGRvbmUoKTtcbiAgICB9XG5cbiAgICBkZWxldGUgb3B0LmhpZ2hsaWdodDtcblxuICAgIGlmICghcGVuZGluZykgcmV0dXJuIGRvbmUoKTtcblxuICAgIGZvciAoOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAoZnVuY3Rpb24odG9rZW4pIHtcbiAgICAgICAgaWYgKHRva2VuLnR5cGUgIT09ICdjb2RlJykge1xuICAgICAgICAgIHJldHVybiAtLXBlbmRpbmcgfHwgZG9uZSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBoaWdobGlnaHQodG9rZW4udGV4dCwgdG9rZW4ubGFuZywgZnVuY3Rpb24oZXJyLCBjb2RlKSB7XG4gICAgICAgICAgaWYgKGVycikgcmV0dXJuIGRvbmUoZXJyKTtcbiAgICAgICAgICBpZiAoY29kZSA9PSBudWxsIHx8IGNvZGUgPT09IHRva2VuLnRleHQpIHtcbiAgICAgICAgICAgIHJldHVybiAtLXBlbmRpbmcgfHwgZG9uZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0b2tlbi50ZXh0ID0gY29kZTtcbiAgICAgICAgICB0b2tlbi5lc2NhcGVkID0gdHJ1ZTtcbiAgICAgICAgICAtLXBlbmRpbmcgfHwgZG9uZSgpO1xuICAgICAgICB9KTtcbiAgICAgIH0pKHRva2Vuc1tpXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuO1xuICB9XG4gIHRyeSB7XG4gICAgaWYgKG9wdCkgb3B0ID0gbWVyZ2Uoe30sIG1hcmtlZC5kZWZhdWx0cywgb3B0KTtcbiAgICBjaGVja1Nhbml0aXplRGVwcmVjYXRpb24ob3B0KTtcbiAgICByZXR1cm4gUGFyc2VyLnBhcnNlKExleGVyLmxleChzcmMsIG9wdCksIG9wdCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBlLm1lc3NhZ2UgKz0gJ1xcblBsZWFzZSByZXBvcnQgdGhpcyB0byBodHRwczovL2dpdGh1Yi5jb20vbWFya2VkanMvbWFya2VkLic7XG4gICAgaWYgKChvcHQgfHwgbWFya2VkLmRlZmF1bHRzKS5zaWxlbnQpIHtcbiAgICAgIHJldHVybiAnPHA+QW4gZXJyb3Igb2NjdXJyZWQ6PC9wPjxwcmU+J1xuICAgICAgICArIGVzY2FwZShlLm1lc3NhZ2UgKyAnJywgdHJ1ZSlcbiAgICAgICAgKyAnPC9wcmU+JztcbiAgICB9XG4gICAgdGhyb3cgZTtcbiAgfVxufVxuXG4vKipcbiAqIE9wdGlvbnNcbiAqL1xuXG5tYXJrZWQub3B0aW9ucyA9XG5tYXJrZWQuc2V0T3B0aW9ucyA9IGZ1bmN0aW9uKG9wdCkge1xuICBtZXJnZShtYXJrZWQuZGVmYXVsdHMsIG9wdCk7XG4gIHJldHVybiBtYXJrZWQ7XG59O1xuXG5tYXJrZWQuZ2V0RGVmYXVsdHMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICBiYXNlVXJsOiBudWxsLFxuICAgIGJyZWFrczogZmFsc2UsXG4gICAgZ2ZtOiB0cnVlLFxuICAgIGhlYWRlcklkczogdHJ1ZSxcbiAgICBoZWFkZXJQcmVmaXg6ICcnLFxuICAgIGhpZ2hsaWdodDogbnVsbCxcbiAgICBsYW5nUHJlZml4OiAnbGFuZ3VhZ2UtJyxcbiAgICBtYW5nbGU6IHRydWUsXG4gICAgcGVkYW50aWM6IGZhbHNlLFxuICAgIHJlbmRlcmVyOiBuZXcgUmVuZGVyZXIoKSxcbiAgICBzYW5pdGl6ZTogZmFsc2UsXG4gICAgc2FuaXRpemVyOiBudWxsLFxuICAgIHNpbGVudDogZmFsc2UsXG4gICAgc21hcnRMaXN0czogZmFsc2UsXG4gICAgc21hcnR5cGFudHM6IGZhbHNlLFxuICAgIHhodG1sOiBmYWxzZVxuICB9O1xufTtcblxubWFya2VkLmRlZmF1bHRzID0gbWFya2VkLmdldERlZmF1bHRzKCk7XG5cbi8qKlxuICogRXhwb3NlXG4gKi9cblxubWFya2VkLlBhcnNlciA9IFBhcnNlcjtcbm1hcmtlZC5wYXJzZXIgPSBQYXJzZXIucGFyc2U7XG5cbm1hcmtlZC5SZW5kZXJlciA9IFJlbmRlcmVyO1xubWFya2VkLlRleHRSZW5kZXJlciA9IFRleHRSZW5kZXJlcjtcblxubWFya2VkLkxleGVyID0gTGV4ZXI7XG5tYXJrZWQubGV4ZXIgPSBMZXhlci5sZXg7XG5cbm1hcmtlZC5JbmxpbmVMZXhlciA9IElubGluZUxleGVyO1xubWFya2VkLmlubGluZUxleGVyID0gSW5saW5lTGV4ZXIub3V0cHV0O1xuXG5tYXJrZWQuU2x1Z2dlciA9IFNsdWdnZXI7XG5cbm1hcmtlZC5wYXJzZSA9IG1hcmtlZDtcblxuaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jykge1xuICBtb2R1bGUuZXhwb3J0cyA9IG1hcmtlZDtcbn0gZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gIGRlZmluZShmdW5jdGlvbigpIHsgcmV0dXJuIG1hcmtlZDsgfSk7XG59IGVsc2Uge1xuICByb290Lm1hcmtlZCA9IG1hcmtlZDtcbn1cbn0pKHRoaXMgfHwgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogZ2xvYmFsKSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBzYWZlSXNOYU4gPSBOdW1iZXIuaXNOYU4gfHxcbiAgICBmdW5jdGlvbiBwb255ZmlsbCh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyAmJiB2YWx1ZSAhPT0gdmFsdWU7XG4gICAgfTtcbmZ1bmN0aW9uIGlzRXF1YWwoZmlyc3QsIHNlY29uZCkge1xuICAgIGlmIChmaXJzdCA9PT0gc2Vjb25kKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoc2FmZUlzTmFOKGZpcnN0KSAmJiBzYWZlSXNOYU4oc2Vjb25kKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gYXJlSW5wdXRzRXF1YWwobmV3SW5wdXRzLCBsYXN0SW5wdXRzKSB7XG4gICAgaWYgKG5ld0lucHV0cy5sZW5ndGggIT09IGxhc3RJbnB1dHMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuZXdJbnB1dHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKCFpc0VxdWFsKG5ld0lucHV0c1tpXSwgbGFzdElucHV0c1tpXSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gbWVtb2l6ZU9uZShyZXN1bHRGbiwgaXNFcXVhbCkge1xuICAgIGlmIChpc0VxdWFsID09PSB2b2lkIDApIHsgaXNFcXVhbCA9IGFyZUlucHV0c0VxdWFsOyB9XG4gICAgdmFyIGxhc3RUaGlzO1xuICAgIHZhciBsYXN0QXJncyA9IFtdO1xuICAgIHZhciBsYXN0UmVzdWx0O1xuICAgIHZhciBjYWxsZWRPbmNlID0gZmFsc2U7XG4gICAgZnVuY3Rpb24gbWVtb2l6ZWQoKSB7XG4gICAgICAgIHZhciBuZXdBcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBuZXdBcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNhbGxlZE9uY2UgJiYgbGFzdFRoaXMgPT09IHRoaXMgJiYgaXNFcXVhbChuZXdBcmdzLCBsYXN0QXJncykpIHtcbiAgICAgICAgICAgIHJldHVybiBsYXN0UmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIGxhc3RSZXN1bHQgPSByZXN1bHRGbi5hcHBseSh0aGlzLCBuZXdBcmdzKTtcbiAgICAgICAgY2FsbGVkT25jZSA9IHRydWU7XG4gICAgICAgIGxhc3RUaGlzID0gdGhpcztcbiAgICAgICAgbGFzdEFyZ3MgPSBuZXdBcmdzO1xuICAgICAgICByZXR1cm4gbGFzdFJlc3VsdDtcbiAgICB9XG4gICAgcmV0dXJuIG1lbW9pemVkO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1lbW9pemVPbmU7XG4iLCJ2YXIgd2lsZGNhcmQgPSByZXF1aXJlKCd3aWxkY2FyZCcpO1xudmFyIHJlTWltZVBhcnRTcGxpdCA9IC9bXFwvXFwrXFwuXS87XG5cbi8qKlxuICAjIG1pbWUtbWF0Y2hcblxuICBBIHNpbXBsZSBmdW5jdGlvbiB0byBjaGVja2VyIHdoZXRoZXIgYSB0YXJnZXQgbWltZSB0eXBlIG1hdGNoZXMgYSBtaW1lLXR5cGVcbiAgcGF0dGVybiAoZS5nLiBpbWFnZS9qcGVnIG1hdGNoZXMgaW1hZ2UvanBlZyBPUiBpbWFnZS8qKS5cblxuICAjIyBFeGFtcGxlIFVzYWdlXG5cbiAgPDw8IGV4YW1wbGUuanNcblxuKiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHRhcmdldCwgcGF0dGVybikge1xuICBmdW5jdGlvbiB0ZXN0KHBhdHRlcm4pIHtcbiAgICB2YXIgcmVzdWx0ID0gd2lsZGNhcmQocGF0dGVybiwgdGFyZ2V0LCByZU1pbWVQYXJ0U3BsaXQpO1xuXG4gICAgLy8gZW5zdXJlIHRoYXQgd2UgaGF2ZSBhIHZhbGlkIG1pbWUgdHlwZSAoc2hvdWxkIGhhdmUgdHdvIHBhcnRzKVxuICAgIHJldHVybiByZXN1bHQgJiYgcmVzdWx0Lmxlbmd0aCA+PSAyO1xuICB9XG5cbiAgcmV0dXJuIHBhdHRlcm4gPyB0ZXN0KHBhdHRlcm4uc3BsaXQoJzsnKVswXSkgOiB0ZXN0O1xufTtcbiIsIi8qIGpzaGludCBub2RlOiB0cnVlICovXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICAjIHdpbGRjYXJkXG5cbiAgVmVyeSBzaW1wbGUgd2lsZGNhcmQgbWF0Y2hpbmcsIHdoaWNoIGlzIGRlc2lnbmVkIHRvIHByb3ZpZGUgdGhlIHNhbWVcbiAgZnVuY3Rpb25hbGl0eSB0aGF0IGlzIGZvdW5kIGluIHRoZVxuICBbZXZlXShodHRwczovL2dpdGh1Yi5jb20vYWRvYmUtd2VicGxhdGZvcm0vZXZlKSBldmVudGluZyBsaWJyYXJ5LlxuXG4gICMjIFVzYWdlXG5cbiAgSXQgd29ya3Mgd2l0aCBzdHJpbmdzOlxuXG4gIDw8PCBleGFtcGxlcy9zdHJpbmdzLmpzXG5cbiAgQXJyYXlzOlxuXG4gIDw8PCBleGFtcGxlcy9hcnJheXMuanNcblxuICBPYmplY3RzIChtYXRjaGluZyBhZ2FpbnN0IGtleXMpOlxuXG4gIDw8PCBleGFtcGxlcy9vYmplY3RzLmpzXG5cbiAgV2hpbGUgdGhlIGxpYnJhcnkgd29ya3MgaW4gTm9kZSwgaWYgeW91IGFyZSBhcmUgbG9va2luZyBmb3IgZmlsZS1iYXNlZFxuICB3aWxkY2FyZCBtYXRjaGluZyB0aGVuIHlvdSBzaG91bGQgaGF2ZSBhIGxvb2sgYXQ6XG5cbiAgPGh0dHBzOi8vZ2l0aHViLmNvbS9pc2FhY3Mvbm9kZS1nbG9iPlxuKiovXG5cbmZ1bmN0aW9uIFdpbGRjYXJkTWF0Y2hlcih0ZXh0LCBzZXBhcmF0b3IpIHtcbiAgdGhpcy50ZXh0ID0gdGV4dCA9IHRleHQgfHwgJyc7XG4gIHRoaXMuaGFzV2lsZCA9IH50ZXh0LmluZGV4T2YoJyonKTtcbiAgdGhpcy5zZXBhcmF0b3IgPSBzZXBhcmF0b3I7XG4gIHRoaXMucGFydHMgPSB0ZXh0LnNwbGl0KHNlcGFyYXRvcik7XG59XG5cbldpbGRjYXJkTWF0Y2hlci5wcm90b3R5cGUubWF0Y2ggPSBmdW5jdGlvbihpbnB1dCkge1xuICB2YXIgbWF0Y2hlcyA9IHRydWU7XG4gIHZhciBwYXJ0cyA9IHRoaXMucGFydHM7XG4gIHZhciBpaTtcbiAgdmFyIHBhcnRzQ291bnQgPSBwYXJ0cy5sZW5ndGg7XG4gIHZhciB0ZXN0UGFydHM7XG5cbiAgaWYgKHR5cGVvZiBpbnB1dCA9PSAnc3RyaW5nJyB8fCBpbnB1dCBpbnN0YW5jZW9mIFN0cmluZykge1xuICAgIGlmICghdGhpcy5oYXNXaWxkICYmIHRoaXMudGV4dCAhPSBpbnB1dCkge1xuICAgICAgbWF0Y2hlcyA9IGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICB0ZXN0UGFydHMgPSAoaW5wdXQgfHwgJycpLnNwbGl0KHRoaXMuc2VwYXJhdG9yKTtcbiAgICAgIGZvciAoaWkgPSAwOyBtYXRjaGVzICYmIGlpIDwgcGFydHNDb3VudDsgaWkrKykge1xuICAgICAgICBpZiAocGFydHNbaWldID09PSAnKicpICB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH0gZWxzZSBpZiAoaWkgPCB0ZXN0UGFydHMubGVuZ3RoKSB7XG4gICAgICAgICAgbWF0Y2hlcyA9IHBhcnRzW2lpXSA9PT0gdGVzdFBhcnRzW2lpXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBtYXRjaGVzID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gSWYgbWF0Y2hlcywgdGhlbiByZXR1cm4gdGhlIGNvbXBvbmVudCBwYXJ0c1xuICAgICAgbWF0Y2hlcyA9IG1hdGNoZXMgJiYgdGVzdFBhcnRzO1xuICAgIH1cbiAgfVxuICBlbHNlIGlmICh0eXBlb2YgaW5wdXQuc3BsaWNlID09ICdmdW5jdGlvbicpIHtcbiAgICBtYXRjaGVzID0gW107XG5cbiAgICBmb3IgKGlpID0gaW5wdXQubGVuZ3RoOyBpaS0tOyApIHtcbiAgICAgIGlmICh0aGlzLm1hdGNoKGlucHV0W2lpXSkpIHtcbiAgICAgICAgbWF0Y2hlc1ttYXRjaGVzLmxlbmd0aF0gPSBpbnB1dFtpaV07XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGVsc2UgaWYgKHR5cGVvZiBpbnB1dCA9PSAnb2JqZWN0Jykge1xuICAgIG1hdGNoZXMgPSB7fTtcblxuICAgIGZvciAodmFyIGtleSBpbiBpbnB1dCkge1xuICAgICAgaWYgKHRoaXMubWF0Y2goa2V5KSkge1xuICAgICAgICBtYXRjaGVzW2tleV0gPSBpbnB1dFtrZXldO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBtYXRjaGVzO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih0ZXh0LCB0ZXN0LCBzZXBhcmF0b3IpIHtcbiAgdmFyIG1hdGNoZXIgPSBuZXcgV2lsZGNhcmRNYXRjaGVyKHRleHQsIHNlcGFyYXRvciB8fCAvW1xcL1xcLl0vKTtcbiAgaWYgKHR5cGVvZiB0ZXN0ICE9ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIG1hdGNoZXIubWF0Y2godGVzdCk7XG4gIH1cblxuICByZXR1cm4gbWF0Y2hlcjtcbn07XG4iLCIvKipcbiAqIEhlbHBlcnMuXG4gKi9cblxudmFyIHMgPSAxMDAwO1xudmFyIG0gPSBzICogNjA7XG52YXIgaCA9IG0gKiA2MDtcbnZhciBkID0gaCAqIDI0O1xudmFyIHcgPSBkICogNztcbnZhciB5ID0gZCAqIDM2NS4yNTtcblxuLyoqXG4gKiBQYXJzZSBvciBmb3JtYXQgdGhlIGdpdmVuIGB2YWxgLlxuICpcbiAqIE9wdGlvbnM6XG4gKlxuICogIC0gYGxvbmdgIHZlcmJvc2UgZm9ybWF0dGluZyBbZmFsc2VdXG4gKlxuICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfSB2YWxcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAqIEB0aHJvd3Mge0Vycm9yfSB0aHJvdyBhbiBlcnJvciBpZiB2YWwgaXMgbm90IGEgbm9uLWVtcHR5IHN0cmluZyBvciBhIG51bWJlclxuICogQHJldHVybiB7U3RyaW5nfE51bWJlcn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih2YWwsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbDtcbiAgaWYgKHR5cGUgPT09ICdzdHJpbmcnICYmIHZhbC5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIHBhcnNlKHZhbCk7XG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gJ251bWJlcicgJiYgaXNGaW5pdGUodmFsKSkge1xuICAgIHJldHVybiBvcHRpb25zLmxvbmcgPyBmbXRMb25nKHZhbCkgOiBmbXRTaG9ydCh2YWwpO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcihcbiAgICAndmFsIGlzIG5vdCBhIG5vbi1lbXB0eSBzdHJpbmcgb3IgYSB2YWxpZCBudW1iZXIuIHZhbD0nICtcbiAgICAgIEpTT04uc3RyaW5naWZ5KHZhbClcbiAgKTtcbn07XG5cbi8qKlxuICogUGFyc2UgdGhlIGdpdmVuIGBzdHJgIGFuZCByZXR1cm4gbWlsbGlzZWNvbmRzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHBhcnNlKHN0cikge1xuICBzdHIgPSBTdHJpbmcoc3RyKTtcbiAgaWYgKHN0ci5sZW5ndGggPiAxMDApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG1hdGNoID0gL14oLT8oPzpcXGQrKT9cXC4/XFxkKykgKihtaWxsaXNlY29uZHM/fG1zZWNzP3xtc3xzZWNvbmRzP3xzZWNzP3xzfG1pbnV0ZXM/fG1pbnM/fG18aG91cnM/fGhycz98aHxkYXlzP3xkfHdlZWtzP3x3fHllYXJzP3x5cnM/fHkpPyQvaS5leGVjKFxuICAgIHN0clxuICApO1xuICBpZiAoIW1hdGNoKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBuID0gcGFyc2VGbG9hdChtYXRjaFsxXSk7XG4gIHZhciB0eXBlID0gKG1hdGNoWzJdIHx8ICdtcycpLnRvTG93ZXJDYXNlKCk7XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ3llYXJzJzpcbiAgICBjYXNlICd5ZWFyJzpcbiAgICBjYXNlICd5cnMnOlxuICAgIGNhc2UgJ3lyJzpcbiAgICBjYXNlICd5JzpcbiAgICAgIHJldHVybiBuICogeTtcbiAgICBjYXNlICd3ZWVrcyc6XG4gICAgY2FzZSAnd2Vlayc6XG4gICAgY2FzZSAndyc6XG4gICAgICByZXR1cm4gbiAqIHc7XG4gICAgY2FzZSAnZGF5cyc6XG4gICAgY2FzZSAnZGF5JzpcbiAgICBjYXNlICdkJzpcbiAgICAgIHJldHVybiBuICogZDtcbiAgICBjYXNlICdob3Vycyc6XG4gICAgY2FzZSAnaG91cic6XG4gICAgY2FzZSAnaHJzJzpcbiAgICBjYXNlICdocic6XG4gICAgY2FzZSAnaCc6XG4gICAgICByZXR1cm4gbiAqIGg7XG4gICAgY2FzZSAnbWludXRlcyc6XG4gICAgY2FzZSAnbWludXRlJzpcbiAgICBjYXNlICdtaW5zJzpcbiAgICBjYXNlICdtaW4nOlxuICAgIGNhc2UgJ20nOlxuICAgICAgcmV0dXJuIG4gKiBtO1xuICAgIGNhc2UgJ3NlY29uZHMnOlxuICAgIGNhc2UgJ3NlY29uZCc6XG4gICAgY2FzZSAnc2Vjcyc6XG4gICAgY2FzZSAnc2VjJzpcbiAgICBjYXNlICdzJzpcbiAgICAgIHJldHVybiBuICogcztcbiAgICBjYXNlICdtaWxsaXNlY29uZHMnOlxuICAgIGNhc2UgJ21pbGxpc2Vjb25kJzpcbiAgICBjYXNlICdtc2Vjcyc6XG4gICAgY2FzZSAnbXNlYyc6XG4gICAgY2FzZSAnbXMnOlxuICAgICAgcmV0dXJuIG47XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cblxuLyoqXG4gKiBTaG9ydCBmb3JtYXQgZm9yIGBtc2AuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1zXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBmbXRTaG9ydChtcykge1xuICB2YXIgbXNBYnMgPSBNYXRoLmFicyhtcyk7XG4gIGlmIChtc0FicyA+PSBkKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBkKSArICdkJztcbiAgfVxuICBpZiAobXNBYnMgPj0gaCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gaCkgKyAnaCc7XG4gIH1cbiAgaWYgKG1zQWJzID49IG0pIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIG0pICsgJ20nO1xuICB9XG4gIGlmIChtc0FicyA+PSBzKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBzKSArICdzJztcbiAgfVxuICByZXR1cm4gbXMgKyAnbXMnO1xufVxuXG4vKipcbiAqIExvbmcgZm9ybWF0IGZvciBgbXNgLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBtc1xuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZm10TG9uZyhtcykge1xuICB2YXIgbXNBYnMgPSBNYXRoLmFicyhtcyk7XG4gIGlmIChtc0FicyA+PSBkKSB7XG4gICAgcmV0dXJuIHBsdXJhbChtcywgbXNBYnMsIGQsICdkYXknKTtcbiAgfVxuICBpZiAobXNBYnMgPj0gaCkge1xuICAgIHJldHVybiBwbHVyYWwobXMsIG1zQWJzLCBoLCAnaG91cicpO1xuICB9XG4gIGlmIChtc0FicyA+PSBtKSB7XG4gICAgcmV0dXJuIHBsdXJhbChtcywgbXNBYnMsIG0sICdtaW51dGUnKTtcbiAgfVxuICBpZiAobXNBYnMgPj0gcykge1xuICAgIHJldHVybiBwbHVyYWwobXMsIG1zQWJzLCBzLCAnc2Vjb25kJyk7XG4gIH1cbiAgcmV0dXJuIG1zICsgJyBtcyc7XG59XG5cbi8qKlxuICogUGx1cmFsaXphdGlvbiBoZWxwZXIuXG4gKi9cblxuZnVuY3Rpb24gcGx1cmFsKG1zLCBtc0FicywgbiwgbmFtZSkge1xuICB2YXIgaXNQbHVyYWwgPSBtc0FicyA+PSBuICogMS41O1xuICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIG4pICsgJyAnICsgbmFtZSArIChpc1BsdXJhbCA/ICdzJyA6ICcnKTtcbn1cbiIsIi8qKlxuKiBDcmVhdGUgYW4gZXZlbnQgZW1pdHRlciB3aXRoIG5hbWVzcGFjZXNcbiogQG5hbWUgY3JlYXRlTmFtZXNwYWNlRW1pdHRlclxuKiBAZXhhbXBsZVxuKiB2YXIgZW1pdHRlciA9IHJlcXVpcmUoJy4vaW5kZXgnKSgpXG4qXG4qIGVtaXR0ZXIub24oJyonLCBmdW5jdGlvbiAoKSB7XG4qICAgY29uc29sZS5sb2coJ2FsbCBldmVudHMgZW1pdHRlZCcsIHRoaXMuZXZlbnQpXG4qIH0pXG4qXG4qIGVtaXR0ZXIub24oJ2V4YW1wbGUnLCBmdW5jdGlvbiAoKSB7XG4qICAgY29uc29sZS5sb2coJ2V4YW1wbGUgZXZlbnQgZW1pdHRlZCcpXG4qIH0pXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjcmVhdGVOYW1lc3BhY2VFbWl0dGVyICgpIHtcbiAgdmFyIGVtaXR0ZXIgPSB7fVxuICB2YXIgX2ZucyA9IGVtaXR0ZXIuX2ZucyA9IHt9XG5cbiAgLyoqXG4gICogRW1pdCBhbiBldmVudC4gT3B0aW9uYWxseSBuYW1lc3BhY2UgdGhlIGV2ZW50LiBIYW5kbGVycyBhcmUgZmlyZWQgaW4gdGhlIG9yZGVyIGluIHdoaWNoIHRoZXkgd2VyZSBhZGRlZCB3aXRoIGV4YWN0IG1hdGNoZXMgdGFraW5nIHByZWNlZGVuY2UuIFNlcGFyYXRlIHRoZSBuYW1lc3BhY2UgYW5kIGV2ZW50IHdpdGggYSBgOmBcbiAgKiBAbmFtZSBlbWl0XG4gICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50IOKAkyB0aGUgbmFtZSBvZiB0aGUgZXZlbnQsIHdpdGggb3B0aW9uYWwgbmFtZXNwYWNlXG4gICogQHBhcmFtIHsuLi4qfSBkYXRhIOKAkyB1cCB0byA2IGFyZ3VtZW50cyB0aGF0IGFyZSBwYXNzZWQgdG8gdGhlIGV2ZW50IGxpc3RlbmVyXG4gICogQGV4YW1wbGVcbiAgKiBlbWl0dGVyLmVtaXQoJ2V4YW1wbGUnKVxuICAqIGVtaXR0ZXIuZW1pdCgnZGVtbzp0ZXN0JylcbiAgKiBlbWl0dGVyLmVtaXQoJ2RhdGEnLCB7IGV4YW1wbGU6IHRydWV9LCAnYSBzdHJpbmcnLCAxKVxuICAqL1xuICBlbWl0dGVyLmVtaXQgPSBmdW5jdGlvbiBlbWl0IChldmVudCwgYXJnMSwgYXJnMiwgYXJnMywgYXJnNCwgYXJnNSwgYXJnNikge1xuICAgIHZhciB0b0VtaXQgPSBnZXRMaXN0ZW5lcnMoZXZlbnQpXG5cbiAgICBpZiAodG9FbWl0Lmxlbmd0aCkge1xuICAgICAgZW1pdEFsbChldmVudCwgdG9FbWl0LCBbYXJnMSwgYXJnMiwgYXJnMywgYXJnNCwgYXJnNSwgYXJnNl0pXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICogQ3JlYXRlIGVuIGV2ZW50IGxpc3RlbmVyLlxuICAqIEBuYW1lIG9uXG4gICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XG4gICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAgKiBAZXhhbXBsZVxuICAqIGVtaXR0ZXIub24oJ2V4YW1wbGUnLCBmdW5jdGlvbiAoKSB7fSlcbiAgKiBlbWl0dGVyLm9uKCdkZW1vJywgZnVuY3Rpb24gKCkge30pXG4gICovXG4gIGVtaXR0ZXIub24gPSBmdW5jdGlvbiBvbiAoZXZlbnQsIGZuKSB7XG4gICAgaWYgKCFfZm5zW2V2ZW50XSkge1xuICAgICAgX2Zuc1tldmVudF0gPSBbXVxuICAgIH1cblxuICAgIF9mbnNbZXZlbnRdLnB1c2goZm4pXG4gIH1cblxuICAvKipcbiAgKiBDcmVhdGUgZW4gZXZlbnQgbGlzdGVuZXIgdGhhdCBmaXJlcyBvbmNlLlxuICAqIEBuYW1lIG9uY2VcbiAgKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcbiAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICAqIEBleGFtcGxlXG4gICogZW1pdHRlci5vbmNlKCdleGFtcGxlJywgZnVuY3Rpb24gKCkge30pXG4gICogZW1pdHRlci5vbmNlKCdkZW1vJywgZnVuY3Rpb24gKCkge30pXG4gICovXG4gIGVtaXR0ZXIub25jZSA9IGZ1bmN0aW9uIG9uY2UgKGV2ZW50LCBmbikge1xuICAgIGZ1bmN0aW9uIG9uZSAoKSB7XG4gICAgICBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG4gICAgICBlbWl0dGVyLm9mZihldmVudCwgb25lKVxuICAgIH1cbiAgICB0aGlzLm9uKGV2ZW50LCBvbmUpXG4gIH1cblxuICAvKipcbiAgKiBTdG9wIGxpc3RlbmluZyB0byBhbiBldmVudC4gU3RvcCBhbGwgbGlzdGVuZXJzIG9uIGFuIGV2ZW50IGJ5IG9ubHkgcGFzc2luZyB0aGUgZXZlbnQgbmFtZS4gU3RvcCBhIHNpbmdsZSBsaXN0ZW5lciBieSBwYXNzaW5nIHRoYXQgZXZlbnQgaGFuZGxlciBhcyBhIGNhbGxiYWNrLlxuICAqIFlvdSBtdXN0IGJlIGV4cGxpY2l0IGFib3V0IHdoYXQgd2lsbCBiZSB1bnN1YnNjcmliZWQ6IGBlbWl0dGVyLm9mZignZGVtbycpYCB3aWxsIHVuc3Vic2NyaWJlIGFuIGBlbWl0dGVyLm9uKCdkZW1vJylgIGxpc3RlbmVyLFxuICAqIGBlbWl0dGVyLm9mZignZGVtbzpleGFtcGxlJylgIHdpbGwgdW5zdWJzY3JpYmUgYW4gYGVtaXR0ZXIub24oJ2RlbW86ZXhhbXBsZScpYCBsaXN0ZW5lclxuICAqIEBuYW1lIG9mZlxuICAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxuICAqIEBwYXJhbSB7RnVuY3Rpb259IFtmbl0g4oCTIHRoZSBzcGVjaWZpYyBoYW5kbGVyXG4gICogQGV4YW1wbGVcbiAgKiBlbWl0dGVyLm9mZignZXhhbXBsZScpXG4gICogZW1pdHRlci5vZmYoJ2RlbW8nLCBmdW5jdGlvbiAoKSB7fSlcbiAgKi9cbiAgZW1pdHRlci5vZmYgPSBmdW5jdGlvbiBvZmYgKGV2ZW50LCBmbikge1xuICAgIHZhciBrZWVwID0gW11cblxuICAgIGlmIChldmVudCAmJiBmbikge1xuICAgICAgdmFyIGZucyA9IHRoaXMuX2Zuc1tldmVudF1cbiAgICAgIHZhciBpID0gMFxuICAgICAgdmFyIGwgPSBmbnMgPyBmbnMubGVuZ3RoIDogMFxuXG4gICAgICBmb3IgKGk7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgaWYgKGZuc1tpXSAhPT0gZm4pIHtcbiAgICAgICAgICBrZWVwLnB1c2goZm5zW2ldKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAga2VlcC5sZW5ndGggPyB0aGlzLl9mbnNbZXZlbnRdID0ga2VlcCA6IGRlbGV0ZSB0aGlzLl9mbnNbZXZlbnRdXG4gIH1cblxuICBmdW5jdGlvbiBnZXRMaXN0ZW5lcnMgKGUpIHtcbiAgICB2YXIgb3V0ID0gX2Zuc1tlXSA/IF9mbnNbZV0gOiBbXVxuICAgIHZhciBpZHggPSBlLmluZGV4T2YoJzonKVxuICAgIHZhciBhcmdzID0gKGlkeCA9PT0gLTEpID8gW2VdIDogW2Uuc3Vic3RyaW5nKDAsIGlkeCksIGUuc3Vic3RyaW5nKGlkeCArIDEpXVxuXG4gICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhfZm5zKVxuICAgIHZhciBpID0gMFxuICAgIHZhciBsID0ga2V5cy5sZW5ndGhcblxuICAgIGZvciAoaTsgaSA8IGw7IGkrKykge1xuICAgICAgdmFyIGtleSA9IGtleXNbaV1cbiAgICAgIGlmIChrZXkgPT09ICcqJykge1xuICAgICAgICBvdXQgPSBvdXQuY29uY2F0KF9mbnNba2V5XSlcbiAgICAgIH1cblxuICAgICAgaWYgKGFyZ3MubGVuZ3RoID09PSAyICYmIGFyZ3NbMF0gPT09IGtleSkge1xuICAgICAgICBvdXQgPSBvdXQuY29uY2F0KF9mbnNba2V5XSlcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gb3V0XG4gIH1cblxuICBmdW5jdGlvbiBlbWl0QWxsIChlLCBmbnMsIGFyZ3MpIHtcbiAgICB2YXIgaSA9IDBcbiAgICB2YXIgbCA9IGZucy5sZW5ndGhcblxuICAgIGZvciAoaTsgaSA8IGw7IGkrKykge1xuICAgICAgaWYgKCFmbnNbaV0pIGJyZWFrXG4gICAgICBmbnNbaV0uZXZlbnQgPSBlXG4gICAgICBmbnNbaV0uYXBwbHkoZm5zW2ldLCBhcmdzKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBlbWl0dGVyXG59XG4iLCJsZXQgeyB1cmxBbHBoYWJldCB9ID0gcmVxdWlyZSgnLi91cmwtYWxwaGFiZXQvaW5kZXguY2pzJylcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIGlmIChcbiAgICB0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIG5hdmlnYXRvci5wcm9kdWN0ID09PSAnUmVhY3ROYXRpdmUnICYmXG4gICAgdHlwZW9mIGNyeXB0byA9PT0gJ3VuZGVmaW5lZCdcbiAgKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ1JlYWN0IE5hdGl2ZSBkb2VzIG5vdCBoYXZlIGEgYnVpbHQtaW4gc2VjdXJlIHJhbmRvbSBnZW5lcmF0b3IuICcgK1xuICAgICAgICAnSWYgeW91IGRvbuKAmXQgbmVlZCB1bnByZWRpY3RhYmxlIElEcyB1c2UgYG5hbm9pZC9ub24tc2VjdXJlYC4gJyArXG4gICAgICAgICdGb3Igc2VjdXJlIElEcywgaW1wb3J0IGByZWFjdC1uYXRpdmUtZ2V0LXJhbmRvbS12YWx1ZXNgICcgK1xuICAgICAgICAnYmVmb3JlIE5hbm8gSUQuJ1xuICAgIClcbiAgfVxuICBpZiAodHlwZW9mIG1zQ3J5cHRvICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgY3J5cHRvID09PSAndW5kZWZpbmVkJykge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdJbXBvcnQgZmlsZSB3aXRoIGBpZiAoIXdpbmRvdy5jcnlwdG8pIHdpbmRvdy5jcnlwdG8gPSB3aW5kb3cubXNDcnlwdG9gJyArXG4gICAgICAgICcgYmVmb3JlIGltcG9ydGluZyBOYW5vIElEIHRvIGZpeCBJRSAxMSBzdXBwb3J0J1xuICAgIClcbiAgfVxuICBpZiAodHlwZW9mIGNyeXB0byA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnWW91ciBicm93c2VyIGRvZXMgbm90IGhhdmUgc2VjdXJlIHJhbmRvbSBnZW5lcmF0b3IuICcgK1xuICAgICAgICAnSWYgeW91IGRvbuKAmXQgbmVlZCB1bnByZWRpY3RhYmxlIElEcywgeW91IGNhbiB1c2UgbmFub2lkL25vbi1zZWN1cmUuJ1xuICAgIClcbiAgfVxufVxubGV0IHJhbmRvbSA9IGJ5dGVzID0+IGNyeXB0by5nZXRSYW5kb21WYWx1ZXMobmV3IFVpbnQ4QXJyYXkoYnl0ZXMpKVxubGV0IGN1c3RvbVJhbmRvbSA9IChhbHBoYWJldCwgc2l6ZSwgZ2V0UmFuZG9tKSA9PiB7XG4gIGxldCBtYXNrID0gKDIgPDwgKE1hdGgubG9nKGFscGhhYmV0Lmxlbmd0aCAtIDEpIC8gTWF0aC5MTjIpKSAtIDFcbiAgbGV0IHN0ZXAgPSAtfigoMS42ICogbWFzayAqIHNpemUpIC8gYWxwaGFiZXQubGVuZ3RoKVxuICByZXR1cm4gKCkgPT4ge1xuICAgIGxldCBpZCA9ICcnXG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgIGxldCBieXRlcyA9IGdldFJhbmRvbShzdGVwKVxuICAgICAgbGV0IGogPSBzdGVwXG4gICAgICB3aGlsZSAoai0tKSB7XG4gICAgICAgIGlkICs9IGFscGhhYmV0W2J5dGVzW2pdICYgbWFza10gfHwgJydcbiAgICAgICAgaWYgKGlkLmxlbmd0aCA9PT0gc2l6ZSkgcmV0dXJuIGlkXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5sZXQgY3VzdG9tQWxwaGFiZXQgPSAoYWxwaGFiZXQsIHNpemUpID0+IGN1c3RvbVJhbmRvbShhbHBoYWJldCwgc2l6ZSwgcmFuZG9tKVxubGV0IG5hbm9pZCA9IChzaXplID0gMjEpID0+IHtcbiAgbGV0IGlkID0gJydcbiAgbGV0IGJ5dGVzID0gY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhuZXcgVWludDhBcnJheShzaXplKSlcbiAgd2hpbGUgKHNpemUtLSkge1xuICAgIGxldCBieXRlID0gYnl0ZXNbc2l6ZV0gJiA2M1xuICAgIGlmIChieXRlIDwgMzYpIHtcbiAgICAgIGlkICs9IGJ5dGUudG9TdHJpbmcoMzYpXG4gICAgfSBlbHNlIGlmIChieXRlIDwgNjIpIHtcbiAgICAgIGlkICs9IChieXRlIC0gMjYpLnRvU3RyaW5nKDM2KS50b1VwcGVyQ2FzZSgpXG4gICAgfSBlbHNlIGlmIChieXRlIDwgNjMpIHtcbiAgICAgIGlkICs9ICdfJ1xuICAgIH0gZWxzZSB7XG4gICAgICBpZCArPSAnLSdcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGlkXG59XG5tb2R1bGUuZXhwb3J0cyA9IHsgbmFub2lkLCBjdXN0b21BbHBoYWJldCwgY3VzdG9tUmFuZG9tLCB1cmxBbHBoYWJldCwgcmFuZG9tIH1cbiIsImxldCB1cmxBbHBoYWJldCA9XG4gICd1c2VhbmRvbS0yNlQxOTgzNDBQWDc1cHhKQUNLVkVSWU1JTkRCVVNIV09MRl9HUVpiZmdoamtscXZ3eXpyaWN0J1xubW9kdWxlLmV4cG9ydHMgPSB7IHVybEFscGhhYmV0IH1cbiIsIi8qKlxuICogQ29tcGlsZXMgYSBxdWVyeXN0cmluZ1xuICogUmV0dXJucyBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZXhwb3J0cy5lbmNvZGUgPSBmdW5jdGlvbiAob2JqKSB7XG4gIHZhciBzdHIgPSAnJztcblxuICBmb3IgKHZhciBpIGluIG9iaikge1xuICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoaSkpIHtcbiAgICAgIGlmIChzdHIubGVuZ3RoKSBzdHIgKz0gJyYnO1xuICAgICAgc3RyICs9IGVuY29kZVVSSUNvbXBvbmVudChpKSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudChvYmpbaV0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzdHI7XG59O1xuXG4vKipcbiAqIFBhcnNlcyBhIHNpbXBsZSBxdWVyeXN0cmluZyBpbnRvIGFuIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBxc1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZXhwb3J0cy5kZWNvZGUgPSBmdW5jdGlvbihxcyl7XG4gIHZhciBxcnkgPSB7fTtcbiAgdmFyIHBhaXJzID0gcXMuc3BsaXQoJyYnKTtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBwYWlycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICB2YXIgcGFpciA9IHBhaXJzW2ldLnNwbGl0KCc9Jyk7XG4gICAgcXJ5W2RlY29kZVVSSUNvbXBvbmVudChwYWlyWzBdKV0gPSBkZWNvZGVVUklDb21wb25lbnQocGFpclsxXSk7XG4gIH1cbiAgcmV0dXJuIHFyeTtcbn07XG4iLCIvKipcbiAqIFBhcnNlcyBhbiBVUklcbiAqXG4gKiBAYXV0aG9yIFN0ZXZlbiBMZXZpdGhhbiA8c3RldmVubGV2aXRoYW4uY29tPiAoTUlUIGxpY2Vuc2UpXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG52YXIgcmUgPSAvXig/Oig/IVteOkBdKzpbXjpAXFwvXSpAKShodHRwfGh0dHBzfHdzfHdzcyk6XFwvXFwvKT8oKD86KChbXjpAXSopKD86OihbXjpAXSopKT8pP0ApPygoPzpbYS1mMC05XXswLDR9Oil7Miw3fVthLWYwLTldezAsNH18W146XFwvPyNdKikoPzo6KFxcZCopKT8pKCgoXFwvKD86W14/I10oPyFbXj8jXFwvXSpcXC5bXj8jXFwvLl0rKD86Wz8jXXwkKSkpKlxcLz8pPyhbXj8jXFwvXSopKSg/OlxcPyhbXiNdKikpPyg/OiMoLiopKT8pLztcblxudmFyIHBhcnRzID0gW1xuICAgICdzb3VyY2UnLCAncHJvdG9jb2wnLCAnYXV0aG9yaXR5JywgJ3VzZXJJbmZvJywgJ3VzZXInLCAncGFzc3dvcmQnLCAnaG9zdCcsICdwb3J0JywgJ3JlbGF0aXZlJywgJ3BhdGgnLCAnZGlyZWN0b3J5JywgJ2ZpbGUnLCAncXVlcnknLCAnYW5jaG9yJ1xuXTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwYXJzZXVyaShzdHIpIHtcbiAgICB2YXIgc3JjID0gc3RyLFxuICAgICAgICBiID0gc3RyLmluZGV4T2YoJ1snKSxcbiAgICAgICAgZSA9IHN0ci5pbmRleE9mKCddJyk7XG5cbiAgICBpZiAoYiAhPSAtMSAmJiBlICE9IC0xKSB7XG4gICAgICAgIHN0ciA9IHN0ci5zdWJzdHJpbmcoMCwgYikgKyBzdHIuc3Vic3RyaW5nKGIsIGUpLnJlcGxhY2UoLzovZywgJzsnKSArIHN0ci5zdWJzdHJpbmcoZSwgc3RyLmxlbmd0aCk7XG4gICAgfVxuXG4gICAgdmFyIG0gPSByZS5leGVjKHN0ciB8fCAnJyksXG4gICAgICAgIHVyaSA9IHt9LFxuICAgICAgICBpID0gMTQ7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIHVyaVtwYXJ0c1tpXV0gPSBtW2ldIHx8ICcnO1xuICAgIH1cblxuICAgIGlmIChiICE9IC0xICYmIGUgIT0gLTEpIHtcbiAgICAgICAgdXJpLnNvdXJjZSA9IHNyYztcbiAgICAgICAgdXJpLmhvc3QgPSB1cmkuaG9zdC5zdWJzdHJpbmcoMSwgdXJpLmhvc3QubGVuZ3RoIC0gMSkucmVwbGFjZSgvOy9nLCAnOicpO1xuICAgICAgICB1cmkuYXV0aG9yaXR5ID0gdXJpLmF1dGhvcml0eS5yZXBsYWNlKCdbJywgJycpLnJlcGxhY2UoJ10nLCAnJykucmVwbGFjZSgvOy9nLCAnOicpO1xuICAgICAgICB1cmkuaXB2NnVyaSA9IHRydWU7XG4gICAgfVxuXG4gICAgdXJpLnBhdGhOYW1lcyA9IHBhdGhOYW1lcyh1cmksIHVyaVsncGF0aCddKTtcbiAgICB1cmkucXVlcnlLZXkgPSBxdWVyeUtleSh1cmksIHVyaVsncXVlcnknXSk7XG5cbiAgICByZXR1cm4gdXJpO1xufTtcblxuZnVuY3Rpb24gcGF0aE5hbWVzKG9iaiwgcGF0aCkge1xuICAgIHZhciByZWd4ID0gL1xcL3syLDl9L2csXG4gICAgICAgIG5hbWVzID0gcGF0aC5yZXBsYWNlKHJlZ3gsIFwiL1wiKS5zcGxpdChcIi9cIik7XG5cbiAgICBpZiAocGF0aC5zdWJzdHIoMCwgMSkgPT0gJy8nIHx8IHBhdGgubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIG5hbWVzLnNwbGljZSgwLCAxKTtcbiAgICB9XG4gICAgaWYgKHBhdGguc3Vic3RyKHBhdGgubGVuZ3RoIC0gMSwgMSkgPT0gJy8nKSB7XG4gICAgICAgIG5hbWVzLnNwbGljZShuYW1lcy5sZW5ndGggLSAxLCAxKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmFtZXM7XG59XG5cbmZ1bmN0aW9uIHF1ZXJ5S2V5KHVyaSwgcXVlcnkpIHtcbiAgICB2YXIgZGF0YSA9IHt9O1xuXG4gICAgcXVlcnkucmVwbGFjZSgvKD86XnwmKShbXiY9XSopPT8oW14mXSopL2csIGZ1bmN0aW9uICgkMCwgJDEsICQyKSB7XG4gICAgICAgIGlmICgkMSkge1xuICAgICAgICAgICAgZGF0YVskMV0gPSAkMjtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGRhdGE7XG59XG4iLCJ2YXIgbixsLHUsdCxpLHIsbyxmLGU9e30sYz1bXSxzPS9hY2l0fGV4KD86c3xnfG58cHwkKXxycGh8Z3JpZHxvd3N8bW5jfG50d3xpbmVbY2hdfHpvb3xeb3JkfGl0ZXJhL2k7ZnVuY3Rpb24gYShuLGwpe2Zvcih2YXIgdSBpbiBsKW5bdV09bFt1XTtyZXR1cm4gbn1mdW5jdGlvbiB2KG4pe3ZhciBsPW4ucGFyZW50Tm9kZTtsJiZsLnJlbW92ZUNoaWxkKG4pfWZ1bmN0aW9uIGgobCx1LHQpe3ZhciBpLHIsbyxmPXt9O2ZvcihvIGluIHUpXCJrZXlcIj09bz9pPXVbb106XCJyZWZcIj09bz9yPXVbb106ZltvXT11W29dO2lmKGFyZ3VtZW50cy5sZW5ndGg+MiYmKGYuY2hpbGRyZW49YXJndW1lbnRzLmxlbmd0aD4zP24uY2FsbChhcmd1bWVudHMsMik6dCksXCJmdW5jdGlvblwiPT10eXBlb2YgbCYmbnVsbCE9bC5kZWZhdWx0UHJvcHMpZm9yKG8gaW4gbC5kZWZhdWx0UHJvcHMpdm9pZCAwPT09ZltvXSYmKGZbb109bC5kZWZhdWx0UHJvcHNbb10pO3JldHVybiBwKGwsZixpLHIsbnVsbCl9ZnVuY3Rpb24gcChuLHQsaSxyLG8pe3ZhciBmPXt0eXBlOm4scHJvcHM6dCxrZXk6aSxyZWY6cixfX2s6bnVsbCxfXzpudWxsLF9fYjowLF9fZTpudWxsLF9fZDp2b2lkIDAsX19jOm51bGwsX19oOm51bGwsY29uc3RydWN0b3I6dm9pZCAwLF9fdjpudWxsPT1vPysrdTpvfTtyZXR1cm4gbnVsbD09byYmbnVsbCE9bC52bm9kZSYmbC52bm9kZShmKSxmfWZ1bmN0aW9uIHkobil7cmV0dXJuIG4uY2hpbGRyZW59ZnVuY3Rpb24gZChuLGwpe3RoaXMucHJvcHM9bix0aGlzLmNvbnRleHQ9bH1mdW5jdGlvbiBfKG4sbCl7aWYobnVsbD09bClyZXR1cm4gbi5fXz9fKG4uX18sbi5fXy5fX2suaW5kZXhPZihuKSsxKTpudWxsO2Zvcih2YXIgdTtsPG4uX19rLmxlbmd0aDtsKyspaWYobnVsbCE9KHU9bi5fX2tbbF0pJiZudWxsIT11Ll9fZSlyZXR1cm4gdS5fX2U7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2Ygbi50eXBlP18obik6bnVsbH1mdW5jdGlvbiBrKG4pe3ZhciBsLHU7aWYobnVsbCE9KG49bi5fXykmJm51bGwhPW4uX19jKXtmb3Iobi5fX2U9bi5fX2MuYmFzZT1udWxsLGw9MDtsPG4uX19rLmxlbmd0aDtsKyspaWYobnVsbCE9KHU9bi5fX2tbbF0pJiZudWxsIT11Ll9fZSl7bi5fX2U9bi5fX2MuYmFzZT11Ll9fZTticmVha31yZXR1cm4gayhuKX19ZnVuY3Rpb24geChuKXsoIW4uX19kJiYobi5fX2Q9ITApJiZpLnB1c2gobikmJiFiLl9fcisrfHxvIT09bC5kZWJvdW5jZVJlbmRlcmluZykmJigobz1sLmRlYm91bmNlUmVuZGVyaW5nKXx8cikoYil9ZnVuY3Rpb24gYigpe2Zvcih2YXIgbjtiLl9fcj1pLmxlbmd0aDspbj1pLnNvcnQoZnVuY3Rpb24obixsKXtyZXR1cm4gbi5fX3YuX19iLWwuX192Ll9fYn0pLGk9W10sbi5zb21lKGZ1bmN0aW9uKG4pe3ZhciBsLHUsdCxpLHIsbztuLl9fZCYmKHI9KGk9KGw9bikuX192KS5fX2UsKG89bC5fX1ApJiYodT1bXSwodD1hKHt9LGkpKS5fX3Y9aS5fX3YrMSxJKG8saSx0LGwuX19uLHZvaWQgMCE9PW8ub3duZXJTVkdFbGVtZW50LG51bGwhPWkuX19oP1tyXTpudWxsLHUsbnVsbD09cj9fKGkpOnIsaS5fX2gpLFQodSxpKSxpLl9fZSE9ciYmayhpKSkpfSl9ZnVuY3Rpb24gbShuLGwsdSx0LGkscixvLGYscyxhKXt2YXIgdixoLGQsayx4LGIsbSxBPXQmJnQuX19rfHxjLFA9QS5sZW5ndGg7Zm9yKHUuX19rPVtdLHY9MDt2PGwubGVuZ3RoO3YrKylpZihudWxsIT0oaz11Ll9fa1t2XT1udWxsPT0oaz1sW3ZdKXx8XCJib29sZWFuXCI9PXR5cGVvZiBrP251bGw6XCJzdHJpbmdcIj09dHlwZW9mIGt8fFwibnVtYmVyXCI9PXR5cGVvZiBrfHxcImJpZ2ludFwiPT10eXBlb2Ygaz9wKG51bGwsayxudWxsLG51bGwsayk6QXJyYXkuaXNBcnJheShrKT9wKHkse2NoaWxkcmVuOmt9LG51bGwsbnVsbCxudWxsKTprLl9fYj4wP3Aoay50eXBlLGsucHJvcHMsay5rZXksbnVsbCxrLl9fdik6aykpe2lmKGsuX189dSxrLl9fYj11Ll9fYisxLG51bGw9PT0oZD1BW3ZdKXx8ZCYmay5rZXk9PWQua2V5JiZrLnR5cGU9PT1kLnR5cGUpQVt2XT12b2lkIDA7ZWxzZSBmb3IoaD0wO2g8UDtoKyspe2lmKChkPUFbaF0pJiZrLmtleT09ZC5rZXkmJmsudHlwZT09PWQudHlwZSl7QVtoXT12b2lkIDA7YnJlYWt9ZD1udWxsfUkobixrLGQ9ZHx8ZSxpLHIsbyxmLHMsYSkseD1rLl9fZSwoaD1rLnJlZikmJmQucmVmIT1oJiYobXx8KG09W10pLGQucmVmJiZtLnB1c2goZC5yZWYsbnVsbCxrKSxtLnB1c2goaCxrLl9fY3x8eCxrKSksbnVsbCE9eD8obnVsbD09YiYmKGI9eCksXCJmdW5jdGlvblwiPT10eXBlb2Ygay50eXBlJiZrLl9faz09PWQuX19rP2suX19kPXM9ZyhrLHMsbik6cz13KG4sayxkLEEseCxzKSxcImZ1bmN0aW9uXCI9PXR5cGVvZiB1LnR5cGUmJih1Ll9fZD1zKSk6cyYmZC5fX2U9PXMmJnMucGFyZW50Tm9kZSE9biYmKHM9XyhkKSl9Zm9yKHUuX19lPWIsdj1QO3YtLTspbnVsbCE9QVt2XSYmKFwiZnVuY3Rpb25cIj09dHlwZW9mIHUudHlwZSYmbnVsbCE9QVt2XS5fX2UmJkFbdl0uX19lPT11Ll9fZCYmKHUuX19kPV8odCx2KzEpKSxMKEFbdl0sQVt2XSkpO2lmKG0pZm9yKHY9MDt2PG0ubGVuZ3RoO3YrKyl6KG1bdl0sbVsrK3ZdLG1bKyt2XSl9ZnVuY3Rpb24gZyhuLGwsdSl7Zm9yKHZhciB0LGk9bi5fX2sscj0wO2kmJnI8aS5sZW5ndGg7cisrKSh0PWlbcl0pJiYodC5fXz1uLGw9XCJmdW5jdGlvblwiPT10eXBlb2YgdC50eXBlP2codCxsLHUpOncodSx0LHQsaSx0Ll9fZSxsKSk7cmV0dXJuIGx9ZnVuY3Rpb24gdyhuLGwsdSx0LGkscil7dmFyIG8sZixlO2lmKHZvaWQgMCE9PWwuX19kKW89bC5fX2QsbC5fX2Q9dm9pZCAwO2Vsc2UgaWYobnVsbD09dXx8aSE9cnx8bnVsbD09aS5wYXJlbnROb2RlKW46aWYobnVsbD09cnx8ci5wYXJlbnROb2RlIT09biluLmFwcGVuZENoaWxkKGkpLG89bnVsbDtlbHNle2ZvcihmPXIsZT0wOyhmPWYubmV4dFNpYmxpbmcpJiZlPHQubGVuZ3RoO2UrPTIpaWYoZj09aSlicmVhayBuO24uaW5zZXJ0QmVmb3JlKGksciksbz1yfXJldHVybiB2b2lkIDAhPT1vP286aS5uZXh0U2libGluZ31mdW5jdGlvbiBBKG4sbCx1LHQsaSl7dmFyIHI7Zm9yKHIgaW4gdSlcImNoaWxkcmVuXCI9PT1yfHxcImtleVwiPT09cnx8ciBpbiBsfHxDKG4scixudWxsLHVbcl0sdCk7Zm9yKHIgaW4gbClpJiZcImZ1bmN0aW9uXCIhPXR5cGVvZiBsW3JdfHxcImNoaWxkcmVuXCI9PT1yfHxcImtleVwiPT09cnx8XCJ2YWx1ZVwiPT09cnx8XCJjaGVja2VkXCI9PT1yfHx1W3JdPT09bFtyXXx8QyhuLHIsbFtyXSx1W3JdLHQpfWZ1bmN0aW9uIFAobixsLHUpe1wiLVwiPT09bFswXT9uLnNldFByb3BlcnR5KGwsdSk6bltsXT1udWxsPT11P1wiXCI6XCJudW1iZXJcIiE9dHlwZW9mIHV8fHMudGVzdChsKT91OnUrXCJweFwifWZ1bmN0aW9uIEMobixsLHUsdCxpKXt2YXIgcjtuOmlmKFwic3R5bGVcIj09PWwpaWYoXCJzdHJpbmdcIj09dHlwZW9mIHUpbi5zdHlsZS5jc3NUZXh0PXU7ZWxzZXtpZihcInN0cmluZ1wiPT10eXBlb2YgdCYmKG4uc3R5bGUuY3NzVGV4dD10PVwiXCIpLHQpZm9yKGwgaW4gdCl1JiZsIGluIHV8fFAobi5zdHlsZSxsLFwiXCIpO2lmKHUpZm9yKGwgaW4gdSl0JiZ1W2xdPT09dFtsXXx8UChuLnN0eWxlLGwsdVtsXSl9ZWxzZSBpZihcIm9cIj09PWxbMF0mJlwiblwiPT09bFsxXSlyPWwhPT0obD1sLnJlcGxhY2UoL0NhcHR1cmUkLyxcIlwiKSksbD1sLnRvTG93ZXJDYXNlKClpbiBuP2wudG9Mb3dlckNhc2UoKS5zbGljZSgyKTpsLnNsaWNlKDIpLG4ubHx8KG4ubD17fSksbi5sW2wrcl09dSx1P3R8fG4uYWRkRXZlbnRMaXN0ZW5lcihsLHI/SDokLHIpOm4ucmVtb3ZlRXZlbnRMaXN0ZW5lcihsLHI/SDokLHIpO2Vsc2UgaWYoXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiIT09bCl7aWYoaSlsPWwucmVwbGFjZSgveGxpbmtbSDpoXS8sXCJoXCIpLnJlcGxhY2UoL3NOYW1lJC8sXCJzXCIpO2Vsc2UgaWYoXCJocmVmXCIhPT1sJiZcImxpc3RcIiE9PWwmJlwiZm9ybVwiIT09bCYmXCJ0YWJJbmRleFwiIT09bCYmXCJkb3dubG9hZFwiIT09bCYmbCBpbiBuKXRyeXtuW2xdPW51bGw9PXU/XCJcIjp1O2JyZWFrIG59Y2F0Y2gobil7fVwiZnVuY3Rpb25cIj09dHlwZW9mIHV8fChudWxsIT11JiYoITEhPT11fHxcImFcIj09PWxbMF0mJlwiclwiPT09bFsxXSk/bi5zZXRBdHRyaWJ1dGUobCx1KTpuLnJlbW92ZUF0dHJpYnV0ZShsKSl9fWZ1bmN0aW9uICQobil7dGhpcy5sW24udHlwZSshMV0obC5ldmVudD9sLmV2ZW50KG4pOm4pfWZ1bmN0aW9uIEgobil7dGhpcy5sW24udHlwZSshMF0obC5ldmVudD9sLmV2ZW50KG4pOm4pfWZ1bmN0aW9uIEkobix1LHQsaSxyLG8sZixlLGMpe3ZhciBzLHYsaCxwLF8sayx4LGIsZyx3LEEsUD11LnR5cGU7aWYodm9pZCAwIT09dS5jb25zdHJ1Y3RvcilyZXR1cm4gbnVsbDtudWxsIT10Ll9faCYmKGM9dC5fX2gsZT11Ll9fZT10Ll9fZSx1Ll9faD1udWxsLG89W2VdKSwocz1sLl9fYikmJnModSk7dHJ5e246aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUCl7aWYoYj11LnByb3BzLGc9KHM9UC5jb250ZXh0VHlwZSkmJmlbcy5fX2NdLHc9cz9nP2cucHJvcHMudmFsdWU6cy5fXzppLHQuX19jP3g9KHY9dS5fX2M9dC5fX2MpLl9fPXYuX19FOihcInByb3RvdHlwZVwiaW4gUCYmUC5wcm90b3R5cGUucmVuZGVyP3UuX19jPXY9bmV3IFAoYix3KToodS5fX2M9dj1uZXcgZChiLHcpLHYuY29uc3RydWN0b3I9UCx2LnJlbmRlcj1NKSxnJiZnLnN1Yih2KSx2LnByb3BzPWIsdi5zdGF0ZXx8KHYuc3RhdGU9e30pLHYuY29udGV4dD13LHYuX19uPWksaD12Ll9fZD0hMCx2Ll9faD1bXSksbnVsbD09di5fX3MmJih2Ll9fcz12LnN0YXRlKSxudWxsIT1QLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyYmKHYuX19zPT12LnN0YXRlJiYodi5fX3M9YSh7fSx2Ll9fcykpLGEodi5fX3MsUC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMoYix2Ll9fcykpKSxwPXYucHJvcHMsXz12LnN0YXRlLGgpbnVsbD09UC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMmJm51bGwhPXYuY29tcG9uZW50V2lsbE1vdW50JiZ2LmNvbXBvbmVudFdpbGxNb3VudCgpLG51bGwhPXYuY29tcG9uZW50RGlkTW91bnQmJnYuX19oLnB1c2godi5jb21wb25lbnREaWRNb3VudCk7ZWxzZXtpZihudWxsPT1QLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyYmYiE9PXAmJm51bGwhPXYuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmdi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGIsdyksIXYuX19lJiZudWxsIT12LnNob3VsZENvbXBvbmVudFVwZGF0ZSYmITE9PT12LnNob3VsZENvbXBvbmVudFVwZGF0ZShiLHYuX19zLHcpfHx1Ll9fdj09PXQuX192KXt2LnByb3BzPWIsdi5zdGF0ZT12Ll9fcyx1Ll9fdiE9PXQuX192JiYodi5fX2Q9ITEpLHYuX192PXUsdS5fX2U9dC5fX2UsdS5fX2s9dC5fX2ssdS5fX2suZm9yRWFjaChmdW5jdGlvbihuKXtuJiYobi5fXz11KX0pLHYuX19oLmxlbmd0aCYmZi5wdXNoKHYpO2JyZWFrIG59bnVsbCE9di5jb21wb25lbnRXaWxsVXBkYXRlJiZ2LmNvbXBvbmVudFdpbGxVcGRhdGUoYix2Ll9fcyx3KSxudWxsIT12LmNvbXBvbmVudERpZFVwZGF0ZSYmdi5fX2gucHVzaChmdW5jdGlvbigpe3YuY29tcG9uZW50RGlkVXBkYXRlKHAsXyxrKX0pfXYuY29udGV4dD13LHYucHJvcHM9Yix2LnN0YXRlPXYuX19zLChzPWwuX19yKSYmcyh1KSx2Ll9fZD0hMSx2Ll9fdj11LHYuX19QPW4scz12LnJlbmRlcih2LnByb3BzLHYuc3RhdGUsdi5jb250ZXh0KSx2LnN0YXRlPXYuX19zLG51bGwhPXYuZ2V0Q2hpbGRDb250ZXh0JiYoaT1hKGEoe30saSksdi5nZXRDaGlsZENvbnRleHQoKSkpLGh8fG51bGw9PXYuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fChrPXYuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUocCxfKSksQT1udWxsIT1zJiZzLnR5cGU9PT15JiZudWxsPT1zLmtleT9zLnByb3BzLmNoaWxkcmVuOnMsbShuLEFycmF5LmlzQXJyYXkoQSk/QTpbQV0sdSx0LGkscixvLGYsZSxjKSx2LmJhc2U9dS5fX2UsdS5fX2g9bnVsbCx2Ll9faC5sZW5ndGgmJmYucHVzaCh2KSx4JiYodi5fX0U9di5fXz1udWxsKSx2Ll9fZT0hMX1lbHNlIG51bGw9PW8mJnUuX192PT09dC5fX3Y/KHUuX19rPXQuX19rLHUuX19lPXQuX19lKTp1Ll9fZT1qKHQuX19lLHUsdCxpLHIsbyxmLGMpOyhzPWwuZGlmZmVkKSYmcyh1KX1jYXRjaChuKXt1Ll9fdj1udWxsLChjfHxudWxsIT1vKSYmKHUuX19lPWUsdS5fX2g9ISFjLG9bby5pbmRleE9mKGUpXT1udWxsKSxsLl9fZShuLHUsdCl9fWZ1bmN0aW9uIFQobix1KXtsLl9fYyYmbC5fX2ModSxuKSxuLnNvbWUoZnVuY3Rpb24odSl7dHJ5e249dS5fX2gsdS5fX2g9W10sbi5zb21lKGZ1bmN0aW9uKG4pe24uY2FsbCh1KX0pfWNhdGNoKG4pe2wuX19lKG4sdS5fX3YpfX0pfWZ1bmN0aW9uIGoobCx1LHQsaSxyLG8sZixjKXt2YXIgcyxhLGgscD10LnByb3BzLHk9dS5wcm9wcyxkPXUudHlwZSxrPTA7aWYoXCJzdmdcIj09PWQmJihyPSEwKSxudWxsIT1vKWZvcig7azxvLmxlbmd0aDtrKyspaWYoKHM9b1trXSkmJihzPT09bHx8KGQ/cy5sb2NhbE5hbWU9PWQ6Mz09cy5ub2RlVHlwZSkpKXtsPXMsb1trXT1udWxsO2JyZWFrfWlmKG51bGw9PWwpe2lmKG51bGw9PT1kKXJldHVybiBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh5KTtsPXI/ZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixkKTpkb2N1bWVudC5jcmVhdGVFbGVtZW50KGQseS5pcyYmeSksbz1udWxsLGM9ITF9aWYobnVsbD09PWQpcD09PXl8fGMmJmwuZGF0YT09PXl8fChsLmRhdGE9eSk7ZWxzZXtpZihvPW8mJm4uY2FsbChsLmNoaWxkTm9kZXMpLGE9KHA9dC5wcm9wc3x8ZSkuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwsaD15LmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLCFjKXtpZihudWxsIT1vKWZvcihwPXt9LGs9MDtrPGwuYXR0cmlidXRlcy5sZW5ndGg7aysrKXBbbC5hdHRyaWJ1dGVzW2tdLm5hbWVdPWwuYXR0cmlidXRlc1trXS52YWx1ZTsoaHx8YSkmJihoJiYoYSYmaC5fX2h0bWw9PWEuX19odG1sfHxoLl9faHRtbD09PWwuaW5uZXJIVE1MKXx8KGwuaW5uZXJIVE1MPWgmJmguX19odG1sfHxcIlwiKSl9aWYoQShsLHkscCxyLGMpLGgpdS5fX2s9W107ZWxzZSBpZihrPXUucHJvcHMuY2hpbGRyZW4sbShsLEFycmF5LmlzQXJyYXkoayk/azpba10sdSx0LGksciYmXCJmb3JlaWduT2JqZWN0XCIhPT1kLG8sZixvP29bMF06dC5fX2smJl8odCwwKSxjKSxudWxsIT1vKWZvcihrPW8ubGVuZ3RoO2stLTspbnVsbCE9b1trXSYmdihvW2tdKTtjfHwoXCJ2YWx1ZVwiaW4geSYmdm9pZCAwIT09KGs9eS52YWx1ZSkmJihrIT09bC52YWx1ZXx8XCJwcm9ncmVzc1wiPT09ZCYmIWspJiZDKGwsXCJ2YWx1ZVwiLGsscC52YWx1ZSwhMSksXCJjaGVja2VkXCJpbiB5JiZ2b2lkIDAhPT0oaz15LmNoZWNrZWQpJiZrIT09bC5jaGVja2VkJiZDKGwsXCJjaGVja2VkXCIsayxwLmNoZWNrZWQsITEpKX1yZXR1cm4gbH1mdW5jdGlvbiB6KG4sdSx0KXt0cnl7XCJmdW5jdGlvblwiPT10eXBlb2Ygbj9uKHUpOm4uY3VycmVudD11fWNhdGNoKG4pe2wuX19lKG4sdCl9fWZ1bmN0aW9uIEwobix1LHQpe3ZhciBpLHI7aWYobC51bm1vdW50JiZsLnVubW91bnQobiksKGk9bi5yZWYpJiYoaS5jdXJyZW50JiZpLmN1cnJlbnQhPT1uLl9fZXx8eihpLG51bGwsdSkpLG51bGwhPShpPW4uX19jKSl7aWYoaS5jb21wb25lbnRXaWxsVW5tb3VudCl0cnl7aS5jb21wb25lbnRXaWxsVW5tb3VudCgpfWNhdGNoKG4pe2wuX19lKG4sdSl9aS5iYXNlPWkuX19QPW51bGx9aWYoaT1uLl9faylmb3Iocj0wO3I8aS5sZW5ndGg7cisrKWlbcl0mJkwoaVtyXSx1LFwiZnVuY3Rpb25cIiE9dHlwZW9mIG4udHlwZSk7dHx8bnVsbD09bi5fX2V8fHYobi5fX2UpLG4uX19lPW4uX19kPXZvaWQgMH1mdW5jdGlvbiBNKG4sbCx1KXtyZXR1cm4gdGhpcy5jb25zdHJ1Y3RvcihuLHUpfWZ1bmN0aW9uIE4odSx0LGkpe3ZhciByLG8sZjtsLl9fJiZsLl9fKHUsdCksbz0ocj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBpKT9udWxsOmkmJmkuX19rfHx0Ll9fayxmPVtdLEkodCx1PSghciYmaXx8dCkuX19rPWgoeSxudWxsLFt1XSksb3x8ZSxlLHZvaWQgMCE9PXQub3duZXJTVkdFbGVtZW50LCFyJiZpP1tpXTpvP251bGw6dC5maXJzdENoaWxkP24uY2FsbCh0LmNoaWxkTm9kZXMpOm51bGwsZiwhciYmaT9pOm8/by5fX2U6dC5maXJzdENoaWxkLHIpLFQoZix1KX1uPWMuc2xpY2UsbD17X19lOmZ1bmN0aW9uKG4sbCl7Zm9yKHZhciB1LHQsaTtsPWwuX187KWlmKCh1PWwuX19jKSYmIXUuX18pdHJ5e2lmKCh0PXUuY29uc3RydWN0b3IpJiZudWxsIT10LmdldERlcml2ZWRTdGF0ZUZyb21FcnJvciYmKHUuc2V0U3RhdGUodC5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IobikpLGk9dS5fX2QpLG51bGwhPXUuY29tcG9uZW50RGlkQ2F0Y2gmJih1LmNvbXBvbmVudERpZENhdGNoKG4pLGk9dS5fX2QpLGkpcmV0dXJuIHUuX19FPXV9Y2F0Y2gobCl7bj1sfXRocm93IG59fSx1PTAsdD1mdW5jdGlvbihuKXtyZXR1cm4gbnVsbCE9biYmdm9pZCAwPT09bi5jb25zdHJ1Y3Rvcn0sZC5wcm90b3R5cGUuc2V0U3RhdGU9ZnVuY3Rpb24obixsKXt2YXIgdTt1PW51bGwhPXRoaXMuX19zJiZ0aGlzLl9fcyE9PXRoaXMuc3RhdGU/dGhpcy5fX3M6dGhpcy5fX3M9YSh7fSx0aGlzLnN0YXRlKSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBuJiYobj1uKGEoe30sdSksdGhpcy5wcm9wcykpLG4mJmEodSxuKSxudWxsIT1uJiZ0aGlzLl9fdiYmKGwmJnRoaXMuX19oLnB1c2gobCkseCh0aGlzKSl9LGQucHJvdG90eXBlLmZvcmNlVXBkYXRlPWZ1bmN0aW9uKG4pe3RoaXMuX192JiYodGhpcy5fX2U9ITAsbiYmdGhpcy5fX2gucHVzaChuKSx4KHRoaXMpKX0sZC5wcm90b3R5cGUucmVuZGVyPXksaT1bXSxyPVwiZnVuY3Rpb25cIj09dHlwZW9mIFByb21pc2U/UHJvbWlzZS5wcm90b3R5cGUudGhlbi5iaW5kKFByb21pc2UucmVzb2x2ZSgpKTpzZXRUaW1lb3V0LGIuX19yPTAsZj0wLGV4cG9ydHMucmVuZGVyPU4sZXhwb3J0cy5oeWRyYXRlPWZ1bmN0aW9uIG4obCx1KXtOKGwsdSxuKX0sZXhwb3J0cy5jcmVhdGVFbGVtZW50PWgsZXhwb3J0cy5oPWgsZXhwb3J0cy5GcmFnbWVudD15LGV4cG9ydHMuY3JlYXRlUmVmPWZ1bmN0aW9uKCl7cmV0dXJue2N1cnJlbnQ6bnVsbH19LGV4cG9ydHMuaXNWYWxpZEVsZW1lbnQ9dCxleHBvcnRzLkNvbXBvbmVudD1kLGV4cG9ydHMuY2xvbmVFbGVtZW50PWZ1bmN0aW9uKGwsdSx0KXt2YXIgaSxyLG8sZj1hKHt9LGwucHJvcHMpO2ZvcihvIGluIHUpXCJrZXlcIj09bz9pPXVbb106XCJyZWZcIj09bz9yPXVbb106ZltvXT11W29dO3JldHVybiBhcmd1bWVudHMubGVuZ3RoPjImJihmLmNoaWxkcmVuPWFyZ3VtZW50cy5sZW5ndGg+Mz9uLmNhbGwoYXJndW1lbnRzLDIpOnQpLHAobC50eXBlLGYsaXx8bC5rZXkscnx8bC5yZWYsbnVsbCl9LGV4cG9ydHMuY3JlYXRlQ29udGV4dD1mdW5jdGlvbihuLGwpe3ZhciB1PXtfX2M6bD1cIl9fY0NcIitmKyssX186bixDb25zdW1lcjpmdW5jdGlvbihuLGwpe3JldHVybiBuLmNoaWxkcmVuKGwpfSxQcm92aWRlcjpmdW5jdGlvbihuKXt2YXIgdSx0O3JldHVybiB0aGlzLmdldENoaWxkQ29udGV4dHx8KHU9W10sKHQ9e30pW2xdPXRoaXMsdGhpcy5nZXRDaGlsZENvbnRleHQ9ZnVuY3Rpb24oKXtyZXR1cm4gdH0sdGhpcy5zaG91bGRDb21wb25lbnRVcGRhdGU9ZnVuY3Rpb24obil7dGhpcy5wcm9wcy52YWx1ZSE9PW4udmFsdWUmJnUuc29tZSh4KX0sdGhpcy5zdWI9ZnVuY3Rpb24obil7dS5wdXNoKG4pO3ZhciBsPW4uY29tcG9uZW50V2lsbFVubW91bnQ7bi5jb21wb25lbnRXaWxsVW5tb3VudD1mdW5jdGlvbigpe3Uuc3BsaWNlKHUuaW5kZXhPZihuKSwxKSxsJiZsLmNhbGwobil9fSksbi5jaGlsZHJlbn19O3JldHVybiB1LlByb3ZpZGVyLl9fPXUuQ29uc3VtZXIuY29udGV4dFR5cGU9dX0sZXhwb3J0cy50b0NoaWxkQXJyYXk9ZnVuY3Rpb24gbihsLHUpe3JldHVybiB1PXV8fFtdLG51bGw9PWx8fFwiYm9vbGVhblwiPT10eXBlb2YgbHx8KEFycmF5LmlzQXJyYXkobCk/bC5zb21lKGZ1bmN0aW9uKGwpe24obCx1KX0pOnUucHVzaChsKSksdX0sZXhwb3J0cy5vcHRpb25zPWw7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcmVhY3QuanMubWFwXG4iLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBub29wO1xuXG5wcm9jZXNzLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBbXSB9XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eVxuICAsIHVuZGVmO1xuXG4vKipcbiAqIERlY29kZSBhIFVSSSBlbmNvZGVkIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gaW5wdXQgVGhlIFVSSSBlbmNvZGVkIHN0cmluZy5cbiAqIEByZXR1cm5zIHtTdHJpbmd8TnVsbH0gVGhlIGRlY29kZWQgc3RyaW5nLlxuICogQGFwaSBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGRlY29kZShpbnB1dCkge1xuICB0cnkge1xuICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoaW5wdXQucmVwbGFjZSgvXFwrL2csICcgJykpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cblxuLyoqXG4gKiBBdHRlbXB0cyB0byBlbmNvZGUgYSBnaXZlbiBpbnB1dC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gaW5wdXQgVGhlIHN0cmluZyB0aGF0IG5lZWRzIHRvIGJlIGVuY29kZWQuXG4gKiBAcmV0dXJucyB7U3RyaW5nfE51bGx9IFRoZSBlbmNvZGVkIHN0cmluZy5cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBlbmNvZGUoaW5wdXQpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KGlucHV0KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG59XG5cbi8qKlxuICogU2ltcGxlIHF1ZXJ5IHN0cmluZyBwYXJzZXIuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHF1ZXJ5IFRoZSBxdWVyeSBzdHJpbmcgdGhhdCBuZWVkcyB0byBiZSBwYXJzZWQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fVxuICogQGFwaSBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gcXVlcnlzdHJpbmcocXVlcnkpIHtcbiAgdmFyIHBhcnNlciA9IC8oW149PyMmXSspPT8oW14mXSopL2dcbiAgICAsIHJlc3VsdCA9IHt9XG4gICAgLCBwYXJ0O1xuXG4gIHdoaWxlIChwYXJ0ID0gcGFyc2VyLmV4ZWMocXVlcnkpKSB7XG4gICAgdmFyIGtleSA9IGRlY29kZShwYXJ0WzFdKVxuICAgICAgLCB2YWx1ZSA9IGRlY29kZShwYXJ0WzJdKTtcblxuICAgIC8vXG4gICAgLy8gUHJldmVudCBvdmVycmlkaW5nIG9mIGV4aXN0aW5nIHByb3BlcnRpZXMuIFRoaXMgZW5zdXJlcyB0aGF0IGJ1aWxkLWluXG4gICAgLy8gbWV0aG9kcyBsaWtlIGB0b1N0cmluZ2Agb3IgX19wcm90b19fIGFyZSBub3Qgb3ZlcnJpZGVuIGJ5IG1hbGljaW91c1xuICAgIC8vIHF1ZXJ5c3RyaW5ncy5cbiAgICAvL1xuICAgIC8vIEluIHRoZSBjYXNlIGlmIGZhaWxlZCBkZWNvZGluZywgd2Ugd2FudCB0byBvbWl0IHRoZSBrZXkvdmFsdWUgcGFpcnNcbiAgICAvLyBmcm9tIHRoZSByZXN1bHQuXG4gICAgLy9cbiAgICBpZiAoa2V5ID09PSBudWxsIHx8IHZhbHVlID09PSBudWxsIHx8IGtleSBpbiByZXN1bHQpIGNvbnRpbnVlO1xuICAgIHJlc3VsdFtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIFRyYW5zZm9ybSBhIHF1ZXJ5IHN0cmluZyB0byBhbiBvYmplY3QuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iaiBPYmplY3QgdGhhdCBzaG91bGQgYmUgdHJhbnNmb3JtZWQuXG4gKiBAcGFyYW0ge1N0cmluZ30gcHJlZml4IE9wdGlvbmFsIHByZWZpeC5cbiAqIEByZXR1cm5zIHtTdHJpbmd9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5mdW5jdGlvbiBxdWVyeXN0cmluZ2lmeShvYmosIHByZWZpeCkge1xuICBwcmVmaXggPSBwcmVmaXggfHwgJyc7XG5cbiAgdmFyIHBhaXJzID0gW11cbiAgICAsIHZhbHVlXG4gICAgLCBrZXk7XG5cbiAgLy9cbiAgLy8gT3B0aW9uYWxseSBwcmVmaXggd2l0aCBhICc/JyBpZiBuZWVkZWRcbiAgLy9cbiAgaWYgKCdzdHJpbmcnICE9PSB0eXBlb2YgcHJlZml4KSBwcmVmaXggPSAnPyc7XG5cbiAgZm9yIChrZXkgaW4gb2JqKSB7XG4gICAgaWYgKGhhcy5jYWxsKG9iaiwga2V5KSkge1xuICAgICAgdmFsdWUgPSBvYmpba2V5XTtcblxuICAgICAgLy9cbiAgICAgIC8vIEVkZ2UgY2FzZXMgd2hlcmUgd2UgYWN0dWFsbHkgd2FudCB0byBlbmNvZGUgdGhlIHZhbHVlIHRvIGFuIGVtcHR5XG4gICAgICAvLyBzdHJpbmcgaW5zdGVhZCBvZiB0aGUgc3RyaW5naWZpZWQgdmFsdWUuXG4gICAgICAvL1xuICAgICAgaWYgKCF2YWx1ZSAmJiAodmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmIHx8IGlzTmFOKHZhbHVlKSkpIHtcbiAgICAgICAgdmFsdWUgPSAnJztcbiAgICAgIH1cblxuICAgICAga2V5ID0gZW5jb2RlKGtleSk7XG4gICAgICB2YWx1ZSA9IGVuY29kZSh2YWx1ZSk7XG5cbiAgICAgIC8vXG4gICAgICAvLyBJZiB3ZSBmYWlsZWQgdG8gZW5jb2RlIHRoZSBzdHJpbmdzLCB3ZSBzaG91bGQgYmFpbCBvdXQgYXMgd2UgZG9uJ3RcbiAgICAgIC8vIHdhbnQgdG8gYWRkIGludmFsaWQgc3RyaW5ncyB0byB0aGUgcXVlcnkuXG4gICAgICAvL1xuICAgICAgaWYgKGtleSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gbnVsbCkgY29udGludWU7XG4gICAgICBwYWlycy5wdXNoKGtleSArJz0nKyB2YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHBhaXJzLmxlbmd0aCA/IHByZWZpeCArIHBhaXJzLmpvaW4oJyYnKSA6ICcnO1xufVxuXG4vL1xuLy8gRXhwb3NlIHRoZSBtb2R1bGUuXG4vL1xuZXhwb3J0cy5zdHJpbmdpZnkgPSBxdWVyeXN0cmluZ2lmeTtcbmV4cG9ydHMucGFyc2UgPSBxdWVyeXN0cmluZztcbiIsIi8qISBxdWV1ZS1taWNyb3Rhc2suIE1JVCBMaWNlbnNlLiBGZXJvc3MgQWJvdWtoYWRpamVoIDxodHRwczovL2Zlcm9zcy5vcmcvb3BlbnNvdXJjZT4gKi9cbmxldCBwcm9taXNlXG5cbm1vZHVsZS5leHBvcnRzID0gdHlwZW9mIHF1ZXVlTWljcm90YXNrID09PSAnZnVuY3Rpb24nXG4gID8gcXVldWVNaWNyb3Rhc2suYmluZCh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IGdsb2JhbClcbiAgLy8gcmV1c2UgcmVzb2x2ZWQgcHJvbWlzZSwgYW5kIGFsbG9jYXRlIGl0IGxhemlseVxuICA6IGNiID0+IChwcm9taXNlIHx8IChwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKCkpKVxuICAgIC50aGVuKGNiKVxuICAgIC5jYXRjaChlcnIgPT4gc2V0VGltZW91dCgoKSA9PiB7IHRocm93IGVyciB9LCAwKSlcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDaGVjayBpZiB3ZSdyZSByZXF1aXJlZCB0byBhZGQgYSBwb3J0IG51bWJlci5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZGVmYXVsdC1wb3J0XG4gKiBAcGFyYW0ge051bWJlcnxTdHJpbmd9IHBvcnQgUG9ydCBudW1iZXIgd2UgbmVlZCB0byBjaGVja1xuICogQHBhcmFtIHtTdHJpbmd9IHByb3RvY29sIFByb3RvY29sIHdlIG5lZWQgdG8gY2hlY2sgYWdhaW5zdC5cbiAqIEByZXR1cm5zIHtCb29sZWFufSBJcyBpdCBhIGRlZmF1bHQgcG9ydCBmb3IgdGhlIGdpdmVuIHByb3RvY29sXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiByZXF1aXJlZChwb3J0LCBwcm90b2NvbCkge1xuICBwcm90b2NvbCA9IHByb3RvY29sLnNwbGl0KCc6JylbMF07XG4gIHBvcnQgPSArcG9ydDtcblxuICBpZiAoIXBvcnQpIHJldHVybiBmYWxzZTtcblxuICBzd2l0Y2ggKHByb3RvY29sKSB7XG4gICAgY2FzZSAnaHR0cCc6XG4gICAgY2FzZSAnd3MnOlxuICAgIHJldHVybiBwb3J0ICE9PSA4MDtcblxuICAgIGNhc2UgJ2h0dHBzJzpcbiAgICBjYXNlICd3c3MnOlxuICAgIHJldHVybiBwb3J0ICE9PSA0NDM7XG5cbiAgICBjYXNlICdmdHAnOlxuICAgIHJldHVybiBwb3J0ICE9PSAyMTtcblxuICAgIGNhc2UgJ2dvcGhlcic6XG4gICAgcmV0dXJuIHBvcnQgIT09IDcwO1xuXG4gICAgY2FzZSAnZmlsZSc6XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHBvcnQgIT09IDA7XG59O1xuIiwiLyohIHJ1bi1wYXJhbGxlbC4gTUlUIExpY2Vuc2UuIEZlcm9zcyBBYm91a2hhZGlqZWggPGh0dHBzOi8vZmVyb3NzLm9yZy9vcGVuc291cmNlPiAqL1xubW9kdWxlLmV4cG9ydHMgPSBydW5QYXJhbGxlbFxuXG5jb25zdCBxdWV1ZU1pY3JvdGFzayA9IHJlcXVpcmUoJ3F1ZXVlLW1pY3JvdGFzaycpXG5cbmZ1bmN0aW9uIHJ1blBhcmFsbGVsICh0YXNrcywgY2IpIHtcbiAgbGV0IHJlc3VsdHMsIHBlbmRpbmcsIGtleXNcbiAgbGV0IGlzU3luYyA9IHRydWVcblxuICBpZiAoQXJyYXkuaXNBcnJheSh0YXNrcykpIHtcbiAgICByZXN1bHRzID0gW11cbiAgICBwZW5kaW5nID0gdGFza3MubGVuZ3RoXG4gIH0gZWxzZSB7XG4gICAga2V5cyA9IE9iamVjdC5rZXlzKHRhc2tzKVxuICAgIHJlc3VsdHMgPSB7fVxuICAgIHBlbmRpbmcgPSBrZXlzLmxlbmd0aFxuICB9XG5cbiAgZnVuY3Rpb24gZG9uZSAoZXJyKSB7XG4gICAgZnVuY3Rpb24gZW5kICgpIHtcbiAgICAgIGlmIChjYikgY2IoZXJyLCByZXN1bHRzKVxuICAgICAgY2IgPSBudWxsXG4gICAgfVxuICAgIGlmIChpc1N5bmMpIHF1ZXVlTWljcm90YXNrKGVuZClcbiAgICBlbHNlIGVuZCgpXG4gIH1cblxuICBmdW5jdGlvbiBlYWNoIChpLCBlcnIsIHJlc3VsdCkge1xuICAgIHJlc3VsdHNbaV0gPSByZXN1bHRcbiAgICBpZiAoLS1wZW5kaW5nID09PSAwIHx8IGVycikge1xuICAgICAgZG9uZShlcnIpXG4gICAgfVxuICB9XG5cbiAgaWYgKCFwZW5kaW5nKSB7XG4gICAgLy8gZW1wdHlcbiAgICBkb25lKG51bGwpXG4gIH0gZWxzZSBpZiAoa2V5cykge1xuICAgIC8vIG9iamVjdFxuICAgIGtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICB0YXNrc1trZXldKGZ1bmN0aW9uIChlcnIsIHJlc3VsdCkgeyBlYWNoKGtleSwgZXJyLCByZXN1bHQpIH0pXG4gICAgfSlcbiAgfSBlbHNlIHtcbiAgICAvLyBhcnJheVxuICAgIHRhc2tzLmZvckVhY2goZnVuY3Rpb24gKHRhc2ssIGkpIHtcbiAgICAgIHRhc2soZnVuY3Rpb24gKGVyciwgcmVzdWx0KSB7IGVhY2goaSwgZXJyLCByZXN1bHQpIH0pXG4gICAgfSlcbiAgfVxuXG4gIGlzU3luYyA9IGZhbHNlXG59XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuY29ubmVjdCA9IGV4cG9ydHMuaW8gPSBleHBvcnRzLlNvY2tldCA9IGV4cG9ydHMuTWFuYWdlciA9IGV4cG9ydHMucHJvdG9jb2wgPSB2b2lkIDA7XG5jb25zdCB1cmxfanNfMSA9IHJlcXVpcmUoXCIuL3VybC5qc1wiKTtcbmNvbnN0IG1hbmFnZXJfanNfMSA9IHJlcXVpcmUoXCIuL21hbmFnZXIuanNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJNYW5hZ2VyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtYW5hZ2VyX2pzXzEuTWFuYWdlcjsgfSB9KTtcbmNvbnN0IHNvY2tldF9qc18xID0gcmVxdWlyZShcIi4vc29ja2V0LmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiU29ja2V0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzb2NrZXRfanNfMS5Tb2NrZXQ7IH0gfSk7XG5jb25zdCBkZWJ1Z18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJkZWJ1Z1wiKSk7IC8vIGRlYnVnKClcbmNvbnN0IGRlYnVnID0gZGVidWdfMS5kZWZhdWx0KFwic29ja2V0LmlvLWNsaWVudFwiKTsgLy8gZGVidWcoKVxuLyoqXG4gKiBNYW5hZ2VycyBjYWNoZS5cbiAqL1xuY29uc3QgY2FjaGUgPSB7fTtcbmZ1bmN0aW9uIGxvb2t1cCh1cmksIG9wdHMpIHtcbiAgICBpZiAodHlwZW9mIHVyaSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICBvcHRzID0gdXJpO1xuICAgICAgICB1cmkgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIG9wdHMgPSBvcHRzIHx8IHt9O1xuICAgIGNvbnN0IHBhcnNlZCA9IHVybF9qc18xLnVybCh1cmksIG9wdHMucGF0aCB8fCBcIi9zb2NrZXQuaW9cIik7XG4gICAgY29uc3Qgc291cmNlID0gcGFyc2VkLnNvdXJjZTtcbiAgICBjb25zdCBpZCA9IHBhcnNlZC5pZDtcbiAgICBjb25zdCBwYXRoID0gcGFyc2VkLnBhdGg7XG4gICAgY29uc3Qgc2FtZU5hbWVzcGFjZSA9IGNhY2hlW2lkXSAmJiBwYXRoIGluIGNhY2hlW2lkXVtcIm5zcHNcIl07XG4gICAgY29uc3QgbmV3Q29ubmVjdGlvbiA9IG9wdHMuZm9yY2VOZXcgfHxcbiAgICAgICAgb3B0c1tcImZvcmNlIG5ldyBjb25uZWN0aW9uXCJdIHx8XG4gICAgICAgIGZhbHNlID09PSBvcHRzLm11bHRpcGxleCB8fFxuICAgICAgICBzYW1lTmFtZXNwYWNlO1xuICAgIGxldCBpbztcbiAgICBpZiAobmV3Q29ubmVjdGlvbikge1xuICAgICAgICBkZWJ1ZyhcImlnbm9yaW5nIHNvY2tldCBjYWNoZSBmb3IgJXNcIiwgc291cmNlKTtcbiAgICAgICAgaW8gPSBuZXcgbWFuYWdlcl9qc18xLk1hbmFnZXIoc291cmNlLCBvcHRzKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGlmICghY2FjaGVbaWRdKSB7XG4gICAgICAgICAgICBkZWJ1ZyhcIm5ldyBpbyBpbnN0YW5jZSBmb3IgJXNcIiwgc291cmNlKTtcbiAgICAgICAgICAgIGNhY2hlW2lkXSA9IG5ldyBtYW5hZ2VyX2pzXzEuTWFuYWdlcihzb3VyY2UsIG9wdHMpO1xuICAgICAgICB9XG4gICAgICAgIGlvID0gY2FjaGVbaWRdO1xuICAgIH1cbiAgICBpZiAocGFyc2VkLnF1ZXJ5ICYmICFvcHRzLnF1ZXJ5KSB7XG4gICAgICAgIG9wdHMucXVlcnkgPSBwYXJzZWQucXVlcnlLZXk7XG4gICAgfVxuICAgIHJldHVybiBpby5zb2NrZXQocGFyc2VkLnBhdGgsIG9wdHMpO1xufVxuZXhwb3J0cy5pbyA9IGxvb2t1cDtcbmV4cG9ydHMuY29ubmVjdCA9IGxvb2t1cDtcbmV4cG9ydHMuZGVmYXVsdCA9IGxvb2t1cDtcbi8vIHNvIHRoYXQgXCJsb29rdXBcIiBjYW4gYmUgdXNlZCBib3RoIGFzIGEgZnVuY3Rpb24gKGUuZy4gYGlvKC4uLilgKSBhbmQgYXMgYVxuLy8gbmFtZXNwYWNlIChlLmcuIGBpby5jb25uZWN0KC4uLilgKSwgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHlcbk9iamVjdC5hc3NpZ24obG9va3VwLCB7XG4gICAgTWFuYWdlcjogbWFuYWdlcl9qc18xLk1hbmFnZXIsXG4gICAgU29ja2V0OiBzb2NrZXRfanNfMS5Tb2NrZXQsXG4gICAgaW86IGxvb2t1cCxcbiAgICBjb25uZWN0OiBsb29rdXAsXG59KTtcbi8qKlxuICogUHJvdG9jb2wgdmVyc2lvbi5cbiAqXG4gKiBAcHVibGljXG4gKi9cbnZhciBzb2NrZXRfaW9fcGFyc2VyXzEgPSByZXF1aXJlKFwic29ja2V0LmlvLXBhcnNlclwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInByb3RvY29sXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzb2NrZXRfaW9fcGFyc2VyXzEucHJvdG9jb2w7IH0gfSk7XG5cbm1vZHVsZS5leHBvcnRzID0gbG9va3VwO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfSk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19zZXRNb2R1bGVEZWZhdWx0KSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCB2KSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xufSkgOiBmdW5jdGlvbihvLCB2KSB7XG4gICAgb1tcImRlZmF1bHRcIl0gPSB2O1xufSk7XG52YXIgX19pbXBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydFN0YXIpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoayAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwgayk7XG4gICAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufTtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTWFuYWdlciA9IHZvaWQgMDtcbmNvbnN0IGVuZ2luZV9pb19jbGllbnRfMSA9IHJlcXVpcmUoXCJlbmdpbmUuaW8tY2xpZW50XCIpO1xuY29uc3Qgc29ja2V0X2pzXzEgPSByZXF1aXJlKFwiLi9zb2NrZXQuanNcIik7XG5jb25zdCBwYXJzZXIgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcInNvY2tldC5pby1wYXJzZXJcIikpO1xuY29uc3Qgb25fanNfMSA9IHJlcXVpcmUoXCIuL29uLmpzXCIpO1xuY29uc3QgYmFja28yXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImJhY2tvMlwiKSk7XG5jb25zdCBjb21wb25lbnRfZW1pdHRlcl8xID0gcmVxdWlyZShcIkBzb2NrZXQuaW8vY29tcG9uZW50LWVtaXR0ZXJcIik7XG5jb25zdCBkZWJ1Z18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJkZWJ1Z1wiKSk7IC8vIGRlYnVnKClcbmNvbnN0IGRlYnVnID0gZGVidWdfMS5kZWZhdWx0KFwic29ja2V0LmlvLWNsaWVudDptYW5hZ2VyXCIpOyAvLyBkZWJ1ZygpXG5jbGFzcyBNYW5hZ2VyIGV4dGVuZHMgY29tcG9uZW50X2VtaXR0ZXJfMS5FbWl0dGVyIHtcbiAgICBjb25zdHJ1Y3Rvcih1cmksIG9wdHMpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLm5zcHMgPSB7fTtcbiAgICAgICAgdGhpcy5zdWJzID0gW107XG4gICAgICAgIGlmICh1cmkgJiYgXCJvYmplY3RcIiA9PT0gdHlwZW9mIHVyaSkge1xuICAgICAgICAgICAgb3B0cyA9IHVyaTtcbiAgICAgICAgICAgIHVyaSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBvcHRzID0gb3B0cyB8fCB7fTtcbiAgICAgICAgb3B0cy5wYXRoID0gb3B0cy5wYXRoIHx8IFwiL3NvY2tldC5pb1wiO1xuICAgICAgICB0aGlzLm9wdHMgPSBvcHRzO1xuICAgICAgICBlbmdpbmVfaW9fY2xpZW50XzEuaW5zdGFsbFRpbWVyRnVuY3Rpb25zKHRoaXMsIG9wdHMpO1xuICAgICAgICB0aGlzLnJlY29ubmVjdGlvbihvcHRzLnJlY29ubmVjdGlvbiAhPT0gZmFsc2UpO1xuICAgICAgICB0aGlzLnJlY29ubmVjdGlvbkF0dGVtcHRzKG9wdHMucmVjb25uZWN0aW9uQXR0ZW1wdHMgfHwgSW5maW5pdHkpO1xuICAgICAgICB0aGlzLnJlY29ubmVjdGlvbkRlbGF5KG9wdHMucmVjb25uZWN0aW9uRGVsYXkgfHwgMTAwMCk7XG4gICAgICAgIHRoaXMucmVjb25uZWN0aW9uRGVsYXlNYXgob3B0cy5yZWNvbm5lY3Rpb25EZWxheU1heCB8fCA1MDAwKTtcbiAgICAgICAgdGhpcy5yYW5kb21pemF0aW9uRmFjdG9yKChfYSA9IG9wdHMucmFuZG9taXphdGlvbkZhY3RvcikgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogMC41KTtcbiAgICAgICAgdGhpcy5iYWNrb2ZmID0gbmV3IGJhY2tvMl8xLmRlZmF1bHQoe1xuICAgICAgICAgICAgbWluOiB0aGlzLnJlY29ubmVjdGlvbkRlbGF5KCksXG4gICAgICAgICAgICBtYXg6IHRoaXMucmVjb25uZWN0aW9uRGVsYXlNYXgoKSxcbiAgICAgICAgICAgIGppdHRlcjogdGhpcy5yYW5kb21pemF0aW9uRmFjdG9yKCksXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnRpbWVvdXQobnVsbCA9PSBvcHRzLnRpbWVvdXQgPyAyMDAwMCA6IG9wdHMudGltZW91dCk7XG4gICAgICAgIHRoaXMuX3JlYWR5U3RhdGUgPSBcImNsb3NlZFwiO1xuICAgICAgICB0aGlzLnVyaSA9IHVyaTtcbiAgICAgICAgY29uc3QgX3BhcnNlciA9IG9wdHMucGFyc2VyIHx8IHBhcnNlcjtcbiAgICAgICAgdGhpcy5lbmNvZGVyID0gbmV3IF9wYXJzZXIuRW5jb2RlcigpO1xuICAgICAgICB0aGlzLmRlY29kZXIgPSBuZXcgX3BhcnNlci5EZWNvZGVyKCk7XG4gICAgICAgIHRoaXMuX2F1dG9Db25uZWN0ID0gb3B0cy5hdXRvQ29ubmVjdCAhPT0gZmFsc2U7XG4gICAgICAgIGlmICh0aGlzLl9hdXRvQ29ubmVjdClcbiAgICAgICAgICAgIHRoaXMub3BlbigpO1xuICAgIH1cbiAgICByZWNvbm5lY3Rpb24odikge1xuICAgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcmVjb25uZWN0aW9uO1xuICAgICAgICB0aGlzLl9yZWNvbm5lY3Rpb24gPSAhIXY7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICByZWNvbm5lY3Rpb25BdHRlbXB0cyh2KSB7XG4gICAgICAgIGlmICh2ID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcmVjb25uZWN0aW9uQXR0ZW1wdHM7XG4gICAgICAgIHRoaXMuX3JlY29ubmVjdGlvbkF0dGVtcHRzID0gdjtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHJlY29ubmVjdGlvbkRlbGF5KHYpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAodiA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3JlY29ubmVjdGlvbkRlbGF5O1xuICAgICAgICB0aGlzLl9yZWNvbm5lY3Rpb25EZWxheSA9IHY7XG4gICAgICAgIChfYSA9IHRoaXMuYmFja29mZikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnNldE1pbih2KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHJhbmRvbWl6YXRpb25GYWN0b3Iodikge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmICh2ID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcmFuZG9taXphdGlvbkZhY3RvcjtcbiAgICAgICAgdGhpcy5fcmFuZG9taXphdGlvbkZhY3RvciA9IHY7XG4gICAgICAgIChfYSA9IHRoaXMuYmFja29mZikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnNldEppdHRlcih2KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHJlY29ubmVjdGlvbkRlbGF5TWF4KHYpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAodiA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3JlY29ubmVjdGlvbkRlbGF5TWF4O1xuICAgICAgICB0aGlzLl9yZWNvbm5lY3Rpb25EZWxheU1heCA9IHY7XG4gICAgICAgIChfYSA9IHRoaXMuYmFja29mZikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnNldE1heCh2KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHRpbWVvdXQodikge1xuICAgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdGltZW91dDtcbiAgICAgICAgdGhpcy5fdGltZW91dCA9IHY7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTdGFydHMgdHJ5aW5nIHRvIHJlY29ubmVjdCBpZiByZWNvbm5lY3Rpb24gaXMgZW5hYmxlZCBhbmQgd2UgaGF2ZSBub3RcbiAgICAgKiBzdGFydGVkIHJlY29ubmVjdGluZyB5ZXRcbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgbWF5YmVSZWNvbm5lY3RPbk9wZW4oKSB7XG4gICAgICAgIC8vIE9ubHkgdHJ5IHRvIHJlY29ubmVjdCBpZiBpdCdzIHRoZSBmaXJzdCB0aW1lIHdlJ3JlIGNvbm5lY3RpbmdcbiAgICAgICAgaWYgKCF0aGlzLl9yZWNvbm5lY3RpbmcgJiZcbiAgICAgICAgICAgIHRoaXMuX3JlY29ubmVjdGlvbiAmJlxuICAgICAgICAgICAgdGhpcy5iYWNrb2ZmLmF0dGVtcHRzID09PSAwKSB7XG4gICAgICAgICAgICAvLyBrZWVwcyByZWNvbm5lY3Rpb24gZnJvbSBmaXJpbmcgdHdpY2UgZm9yIHRoZSBzYW1lIHJlY29ubmVjdGlvbiBsb29wXG4gICAgICAgICAgICB0aGlzLnJlY29ubmVjdCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGN1cnJlbnQgdHJhbnNwb3J0IGBzb2NrZXRgLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gLSBvcHRpb25hbCwgY2FsbGJhY2tcbiAgICAgKiBAcmV0dXJuIHNlbGZcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgb3Blbihmbikge1xuICAgICAgICBkZWJ1ZyhcInJlYWR5U3RhdGUgJXNcIiwgdGhpcy5fcmVhZHlTdGF0ZSk7XG4gICAgICAgIGlmICh+dGhpcy5fcmVhZHlTdGF0ZS5pbmRleE9mKFwib3BlblwiKSlcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICBkZWJ1ZyhcIm9wZW5pbmcgJXNcIiwgdGhpcy51cmkpO1xuICAgICAgICB0aGlzLmVuZ2luZSA9IG5ldyBlbmdpbmVfaW9fY2xpZW50XzEuU29ja2V0KHRoaXMudXJpLCB0aGlzLm9wdHMpO1xuICAgICAgICBjb25zdCBzb2NrZXQgPSB0aGlzLmVuZ2luZTtcbiAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgICAgIHRoaXMuX3JlYWR5U3RhdGUgPSBcIm9wZW5pbmdcIjtcbiAgICAgICAgdGhpcy5za2lwUmVjb25uZWN0ID0gZmFsc2U7XG4gICAgICAgIC8vIGVtaXQgYG9wZW5gXG4gICAgICAgIGNvbnN0IG9wZW5TdWJEZXN0cm95ID0gb25fanNfMS5vbihzb2NrZXQsIFwib3BlblwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzZWxmLm9ub3BlbigpO1xuICAgICAgICAgICAgZm4gJiYgZm4oKTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIGVtaXQgYGVycm9yYFxuICAgICAgICBjb25zdCBlcnJvclN1YiA9IG9uX2pzXzEub24oc29ja2V0LCBcImVycm9yXCIsIChlcnIpID0+IHtcbiAgICAgICAgICAgIGRlYnVnKFwiZXJyb3JcIik7XG4gICAgICAgICAgICBzZWxmLmNsZWFudXAoKTtcbiAgICAgICAgICAgIHNlbGYuX3JlYWR5U3RhdGUgPSBcImNsb3NlZFwiO1xuICAgICAgICAgICAgdGhpcy5lbWl0UmVzZXJ2ZWQoXCJlcnJvclwiLCBlcnIpO1xuICAgICAgICAgICAgaWYgKGZuKSB7XG4gICAgICAgICAgICAgICAgZm4oZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIE9ubHkgZG8gdGhpcyBpZiB0aGVyZSBpcyBubyBmbiB0byBoYW5kbGUgdGhlIGVycm9yXG4gICAgICAgICAgICAgICAgc2VsZi5tYXliZVJlY29ubmVjdE9uT3BlbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGZhbHNlICE9PSB0aGlzLl90aW1lb3V0KSB7XG4gICAgICAgICAgICBjb25zdCB0aW1lb3V0ID0gdGhpcy5fdGltZW91dDtcbiAgICAgICAgICAgIGRlYnVnKFwiY29ubmVjdCBhdHRlbXB0IHdpbGwgdGltZW91dCBhZnRlciAlZFwiLCB0aW1lb3V0KTtcbiAgICAgICAgICAgIGlmICh0aW1lb3V0ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgb3BlblN1YkRlc3Ryb3koKTsgLy8gcHJldmVudHMgYSByYWNlIGNvbmRpdGlvbiB3aXRoIHRoZSAnb3BlbicgZXZlbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHNldCB0aW1lclxuICAgICAgICAgICAgY29uc3QgdGltZXIgPSB0aGlzLnNldFRpbWVvdXRGbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgZGVidWcoXCJjb25uZWN0IGF0dGVtcHQgdGltZWQgb3V0IGFmdGVyICVkXCIsIHRpbWVvdXQpO1xuICAgICAgICAgICAgICAgIG9wZW5TdWJEZXN0cm95KCk7XG4gICAgICAgICAgICAgICAgc29ja2V0LmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgIHNvY2tldC5lbWl0KFwiZXJyb3JcIiwgbmV3IEVycm9yKFwidGltZW91dFwiKSk7XG4gICAgICAgICAgICB9LCB0aW1lb3V0KTtcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdHMuYXV0b1VucmVmKSB7XG4gICAgICAgICAgICAgICAgdGltZXIudW5yZWYoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc3Vicy5wdXNoKGZ1bmN0aW9uIHN1YkRlc3Ryb3koKSB7XG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3Vicy5wdXNoKG9wZW5TdWJEZXN0cm95KTtcbiAgICAgICAgdGhpcy5zdWJzLnB1c2goZXJyb3JTdWIpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWxpYXMgZm9yIG9wZW4oKVxuICAgICAqXG4gICAgICogQHJldHVybiBzZWxmXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIGNvbm5lY3QoZm4pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3Blbihmbik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxlZCB1cG9uIHRyYW5zcG9ydCBvcGVuLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBvbm9wZW4oKSB7XG4gICAgICAgIGRlYnVnKFwib3BlblwiKTtcbiAgICAgICAgLy8gY2xlYXIgb2xkIHN1YnNcbiAgICAgICAgdGhpcy5jbGVhbnVwKCk7XG4gICAgICAgIC8vIG1hcmsgYXMgb3BlblxuICAgICAgICB0aGlzLl9yZWFkeVN0YXRlID0gXCJvcGVuXCI7XG4gICAgICAgIHRoaXMuZW1pdFJlc2VydmVkKFwib3BlblwiKTtcbiAgICAgICAgLy8gYWRkIG5ldyBzdWJzXG4gICAgICAgIGNvbnN0IHNvY2tldCA9IHRoaXMuZW5naW5lO1xuICAgICAgICB0aGlzLnN1YnMucHVzaChvbl9qc18xLm9uKHNvY2tldCwgXCJwaW5nXCIsIHRoaXMub25waW5nLmJpbmQodGhpcykpLCBvbl9qc18xLm9uKHNvY2tldCwgXCJkYXRhXCIsIHRoaXMub25kYXRhLmJpbmQodGhpcykpLCBvbl9qc18xLm9uKHNvY2tldCwgXCJlcnJvclwiLCB0aGlzLm9uZXJyb3IuYmluZCh0aGlzKSksIG9uX2pzXzEub24oc29ja2V0LCBcImNsb3NlXCIsIHRoaXMub25jbG9zZS5iaW5kKHRoaXMpKSwgb25fanNfMS5vbih0aGlzLmRlY29kZXIsIFwiZGVjb2RlZFwiLCB0aGlzLm9uZGVjb2RlZC5iaW5kKHRoaXMpKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxlZCB1cG9uIGEgcGluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgb25waW5nKCkge1xuICAgICAgICB0aGlzLmVtaXRSZXNlcnZlZChcInBpbmdcIik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxlZCB3aXRoIGRhdGEuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIG9uZGF0YShkYXRhKSB7XG4gICAgICAgIHRoaXMuZGVjb2Rlci5hZGQoZGF0YSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxlZCB3aGVuIHBhcnNlciBmdWxseSBkZWNvZGVzIGEgcGFja2V0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBvbmRlY29kZWQocGFja2V0KSB7XG4gICAgICAgIHRoaXMuZW1pdFJlc2VydmVkKFwicGFja2V0XCIsIHBhY2tldCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxlZCB1cG9uIHNvY2tldCBlcnJvci5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgb25lcnJvcihlcnIpIHtcbiAgICAgICAgZGVidWcoXCJlcnJvclwiLCBlcnIpO1xuICAgICAgICB0aGlzLmVtaXRSZXNlcnZlZChcImVycm9yXCIsIGVycik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgc29ja2V0IGZvciB0aGUgZ2l2ZW4gYG5zcGAuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtTb2NrZXR9XG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIHNvY2tldChuc3AsIG9wdHMpIHtcbiAgICAgICAgbGV0IHNvY2tldCA9IHRoaXMubnNwc1tuc3BdO1xuICAgICAgICBpZiAoIXNvY2tldCkge1xuICAgICAgICAgICAgc29ja2V0ID0gbmV3IHNvY2tldF9qc18xLlNvY2tldCh0aGlzLCBuc3AsIG9wdHMpO1xuICAgICAgICAgICAgdGhpcy5uc3BzW25zcF0gPSBzb2NrZXQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNvY2tldDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHVwb24gYSBzb2NrZXQgY2xvc2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gc29ja2V0XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfZGVzdHJveShzb2NrZXQpIHtcbiAgICAgICAgY29uc3QgbnNwcyA9IE9iamVjdC5rZXlzKHRoaXMubnNwcyk7XG4gICAgICAgIGZvciAoY29uc3QgbnNwIG9mIG5zcHMpIHtcbiAgICAgICAgICAgIGNvbnN0IHNvY2tldCA9IHRoaXMubnNwc1tuc3BdO1xuICAgICAgICAgICAgaWYgKHNvY2tldC5hY3RpdmUpIHtcbiAgICAgICAgICAgICAgICBkZWJ1ZyhcInNvY2tldCAlcyBpcyBzdGlsbCBhY3RpdmUsIHNraXBwaW5nIGNsb3NlXCIsIG5zcCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2Nsb3NlKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdyaXRlcyBhIHBhY2tldC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBwYWNrZXRcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9wYWNrZXQocGFja2V0KSB7XG4gICAgICAgIGRlYnVnKFwid3JpdGluZyBwYWNrZXQgJWpcIiwgcGFja2V0KTtcbiAgICAgICAgY29uc3QgZW5jb2RlZFBhY2tldHMgPSB0aGlzLmVuY29kZXIuZW5jb2RlKHBhY2tldCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZW5jb2RlZFBhY2tldHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMuZW5naW5lLndyaXRlKGVuY29kZWRQYWNrZXRzW2ldLCBwYWNrZXQub3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2xlYW4gdXAgdHJhbnNwb3J0IHN1YnNjcmlwdGlvbnMgYW5kIHBhY2tldCBidWZmZXIuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGNsZWFudXAoKSB7XG4gICAgICAgIGRlYnVnKFwiY2xlYW51cFwiKTtcbiAgICAgICAgdGhpcy5zdWJzLmZvckVhY2goKHN1YkRlc3Ryb3kpID0+IHN1YkRlc3Ryb3koKSk7XG4gICAgICAgIHRoaXMuc3Vicy5sZW5ndGggPSAwO1xuICAgICAgICB0aGlzLmRlY29kZXIuZGVzdHJveSgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDbG9zZSB0aGUgY3VycmVudCBzb2NrZXQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9jbG9zZSgpIHtcbiAgICAgICAgZGVidWcoXCJkaXNjb25uZWN0XCIpO1xuICAgICAgICB0aGlzLnNraXBSZWNvbm5lY3QgPSB0cnVlO1xuICAgICAgICB0aGlzLl9yZWNvbm5lY3RpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5vbmNsb3NlKFwiZm9yY2VkIGNsb3NlXCIpO1xuICAgICAgICBpZiAodGhpcy5lbmdpbmUpXG4gICAgICAgICAgICB0aGlzLmVuZ2luZS5jbG9zZSgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBbGlhcyBmb3IgY2xvc2UoKVxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBkaXNjb25uZWN0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xvc2UoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHVwb24gZW5naW5lIGNsb3NlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBvbmNsb3NlKHJlYXNvbikge1xuICAgICAgICBkZWJ1ZyhcImNsb3NlZCBkdWUgdG8gJXNcIiwgcmVhc29uKTtcbiAgICAgICAgdGhpcy5jbGVhbnVwKCk7XG4gICAgICAgIHRoaXMuYmFja29mZi5yZXNldCgpO1xuICAgICAgICB0aGlzLl9yZWFkeVN0YXRlID0gXCJjbG9zZWRcIjtcbiAgICAgICAgdGhpcy5lbWl0UmVzZXJ2ZWQoXCJjbG9zZVwiLCByZWFzb24pO1xuICAgICAgICBpZiAodGhpcy5fcmVjb25uZWN0aW9uICYmICF0aGlzLnNraXBSZWNvbm5lY3QpIHtcbiAgICAgICAgICAgIHRoaXMucmVjb25uZWN0KCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQXR0ZW1wdCBhIHJlY29ubmVjdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgcmVjb25uZWN0KCkge1xuICAgICAgICBpZiAodGhpcy5fcmVjb25uZWN0aW5nIHx8IHRoaXMuc2tpcFJlY29ubmVjdClcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICAgICAgaWYgKHRoaXMuYmFja29mZi5hdHRlbXB0cyA+PSB0aGlzLl9yZWNvbm5lY3Rpb25BdHRlbXB0cykge1xuICAgICAgICAgICAgZGVidWcoXCJyZWNvbm5lY3QgZmFpbGVkXCIpO1xuICAgICAgICAgICAgdGhpcy5iYWNrb2ZmLnJlc2V0KCk7XG4gICAgICAgICAgICB0aGlzLmVtaXRSZXNlcnZlZChcInJlY29ubmVjdF9mYWlsZWRcIik7XG4gICAgICAgICAgICB0aGlzLl9yZWNvbm5lY3RpbmcgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGRlbGF5ID0gdGhpcy5iYWNrb2ZmLmR1cmF0aW9uKCk7XG4gICAgICAgICAgICBkZWJ1ZyhcIndpbGwgd2FpdCAlZG1zIGJlZm9yZSByZWNvbm5lY3QgYXR0ZW1wdFwiLCBkZWxheSk7XG4gICAgICAgICAgICB0aGlzLl9yZWNvbm5lY3RpbmcgPSB0cnVlO1xuICAgICAgICAgICAgY29uc3QgdGltZXIgPSB0aGlzLnNldFRpbWVvdXRGbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHNlbGYuc2tpcFJlY29ubmVjdClcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIGRlYnVnKFwiYXR0ZW1wdGluZyByZWNvbm5lY3RcIik7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0UmVzZXJ2ZWQoXCJyZWNvbm5lY3RfYXR0ZW1wdFwiLCBzZWxmLmJhY2tvZmYuYXR0ZW1wdHMpO1xuICAgICAgICAgICAgICAgIC8vIGNoZWNrIGFnYWluIGZvciB0aGUgY2FzZSBzb2NrZXQgY2xvc2VkIGluIGFib3ZlIGV2ZW50c1xuICAgICAgICAgICAgICAgIGlmIChzZWxmLnNraXBSZWNvbm5lY3QpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICBzZWxmLm9wZW4oKGVycikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWJ1ZyhcInJlY29ubmVjdCBhdHRlbXB0IGVycm9yXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fcmVjb25uZWN0aW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnJlY29ubmVjdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0UmVzZXJ2ZWQoXCJyZWNvbm5lY3RfZXJyb3JcIiwgZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlYnVnKFwicmVjb25uZWN0IHN1Y2Nlc3NcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLm9ucmVjb25uZWN0KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sIGRlbGF5KTtcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdHMuYXV0b1VucmVmKSB7XG4gICAgICAgICAgICAgICAgdGltZXIudW5yZWYoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc3Vicy5wdXNoKGZ1bmN0aW9uIHN1YkRlc3Ryb3koKSB7XG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxlZCB1cG9uIHN1Y2Nlc3NmdWwgcmVjb25uZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBvbnJlY29ubmVjdCgpIHtcbiAgICAgICAgY29uc3QgYXR0ZW1wdCA9IHRoaXMuYmFja29mZi5hdHRlbXB0cztcbiAgICAgICAgdGhpcy5fcmVjb25uZWN0aW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuYmFja29mZi5yZXNldCgpO1xuICAgICAgICB0aGlzLmVtaXRSZXNlcnZlZChcInJlY29ubmVjdFwiLCBhdHRlbXB0KTtcbiAgICB9XG59XG5leHBvcnRzLk1hbmFnZXIgPSBNYW5hZ2VyO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLm9uID0gdm9pZCAwO1xuZnVuY3Rpb24gb24ob2JqLCBldiwgZm4pIHtcbiAgICBvYmoub24oZXYsIGZuKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gc3ViRGVzdHJveSgpIHtcbiAgICAgICAgb2JqLm9mZihldiwgZm4pO1xuICAgIH07XG59XG5leHBvcnRzLm9uID0gb247XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU29ja2V0ID0gdm9pZCAwO1xuY29uc3Qgc29ja2V0X2lvX3BhcnNlcl8xID0gcmVxdWlyZShcInNvY2tldC5pby1wYXJzZXJcIik7XG5jb25zdCBvbl9qc18xID0gcmVxdWlyZShcIi4vb24uanNcIik7XG5jb25zdCBjb21wb25lbnRfZW1pdHRlcl8xID0gcmVxdWlyZShcIkBzb2NrZXQuaW8vY29tcG9uZW50LWVtaXR0ZXJcIik7XG5jb25zdCBkZWJ1Z18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJkZWJ1Z1wiKSk7IC8vIGRlYnVnKClcbmNvbnN0IGRlYnVnID0gZGVidWdfMS5kZWZhdWx0KFwic29ja2V0LmlvLWNsaWVudDpzb2NrZXRcIik7IC8vIGRlYnVnKClcbi8qKlxuICogSW50ZXJuYWwgZXZlbnRzLlxuICogVGhlc2UgZXZlbnRzIGNhbid0IGJlIGVtaXR0ZWQgYnkgdGhlIHVzZXIuXG4gKi9cbmNvbnN0IFJFU0VSVkVEX0VWRU5UUyA9IE9iamVjdC5mcmVlemUoe1xuICAgIGNvbm5lY3Q6IDEsXG4gICAgY29ubmVjdF9lcnJvcjogMSxcbiAgICBkaXNjb25uZWN0OiAxLFxuICAgIGRpc2Nvbm5lY3Rpbmc6IDEsXG4gICAgLy8gRXZlbnRFbWl0dGVyIHJlc2VydmVkIGV2ZW50czogaHR0cHM6Ly9ub2RlanMub3JnL2FwaS9ldmVudHMuaHRtbCNldmVudHNfZXZlbnRfbmV3bGlzdGVuZXJcbiAgICBuZXdMaXN0ZW5lcjogMSxcbiAgICByZW1vdmVMaXN0ZW5lcjogMSxcbn0pO1xuY2xhc3MgU29ja2V0IGV4dGVuZHMgY29tcG9uZW50X2VtaXR0ZXJfMS5FbWl0dGVyIHtcbiAgICAvKipcbiAgICAgKiBgU29ja2V0YCBjb25zdHJ1Y3Rvci5cbiAgICAgKlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihpbywgbnNwLCBvcHRzKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuY29ubmVjdGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZGlzY29ubmVjdGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5yZWNlaXZlQnVmZmVyID0gW107XG4gICAgICAgIHRoaXMuc2VuZEJ1ZmZlciA9IFtdO1xuICAgICAgICB0aGlzLmlkcyA9IDA7XG4gICAgICAgIHRoaXMuYWNrcyA9IHt9O1xuICAgICAgICB0aGlzLmZsYWdzID0ge307XG4gICAgICAgIHRoaXMuaW8gPSBpbztcbiAgICAgICAgdGhpcy5uc3AgPSBuc3A7XG4gICAgICAgIGlmIChvcHRzICYmIG9wdHMuYXV0aCkge1xuICAgICAgICAgICAgdGhpcy5hdXRoID0gb3B0cy5hdXRoO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmlvLl9hdXRvQ29ubmVjdClcbiAgICAgICAgICAgIHRoaXMub3BlbigpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTdWJzY3JpYmUgdG8gb3BlbiwgY2xvc2UgYW5kIHBhY2tldCBldmVudHNcbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgc3ViRXZlbnRzKCkge1xuICAgICAgICBpZiAodGhpcy5zdWJzKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjb25zdCBpbyA9IHRoaXMuaW87XG4gICAgICAgIHRoaXMuc3VicyA9IFtcbiAgICAgICAgICAgIG9uX2pzXzEub24oaW8sIFwib3BlblwiLCB0aGlzLm9ub3Blbi5iaW5kKHRoaXMpKSxcbiAgICAgICAgICAgIG9uX2pzXzEub24oaW8sIFwicGFja2V0XCIsIHRoaXMub25wYWNrZXQuYmluZCh0aGlzKSksXG4gICAgICAgICAgICBvbl9qc18xLm9uKGlvLCBcImVycm9yXCIsIHRoaXMub25lcnJvci5iaW5kKHRoaXMpKSxcbiAgICAgICAgICAgIG9uX2pzXzEub24oaW8sIFwiY2xvc2VcIiwgdGhpcy5vbmNsb3NlLmJpbmQodGhpcykpLFxuICAgICAgICBdO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHRoZSBTb2NrZXQgd2lsbCB0cnkgdG8gcmVjb25uZWN0IHdoZW4gaXRzIE1hbmFnZXIgY29ubmVjdHMgb3IgcmVjb25uZWN0c1xuICAgICAqL1xuICAgIGdldCBhY3RpdmUoKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuc3VicztcbiAgICB9XG4gICAgLyoqXG4gICAgICogXCJPcGVuc1wiIHRoZSBzb2NrZXQuXG4gICAgICpcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgY29ubmVjdCgpIHtcbiAgICAgICAgaWYgKHRoaXMuY29ubmVjdGVkKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIHRoaXMuc3ViRXZlbnRzKCk7XG4gICAgICAgIGlmICghdGhpcy5pb1tcIl9yZWNvbm5lY3RpbmdcIl0pXG4gICAgICAgICAgICB0aGlzLmlvLm9wZW4oKTsgLy8gZW5zdXJlIG9wZW5cbiAgICAgICAgaWYgKFwib3BlblwiID09PSB0aGlzLmlvLl9yZWFkeVN0YXRlKVxuICAgICAgICAgICAgdGhpcy5vbm9wZW4oKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFsaWFzIGZvciBjb25uZWN0KClcbiAgICAgKi9cbiAgICBvcGVuKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb25uZWN0KCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNlbmRzIGEgYG1lc3NhZ2VgIGV2ZW50LlxuICAgICAqXG4gICAgICogQHJldHVybiBzZWxmXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIHNlbmQoLi4uYXJncykge1xuICAgICAgICBhcmdzLnVuc2hpZnQoXCJtZXNzYWdlXCIpO1xuICAgICAgICB0aGlzLmVtaXQuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBPdmVycmlkZSBgZW1pdGAuXG4gICAgICogSWYgdGhlIGV2ZW50IGlzIGluIGBldmVudHNgLCBpdCdzIGVtaXR0ZWQgbm9ybWFsbHkuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHNlbGZcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgZW1pdChldiwgLi4uYXJncykge1xuICAgICAgICBpZiAoUkVTRVJWRURfRVZFTlRTLmhhc093blByb3BlcnR5KGV2KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdcIicgKyBldiArICdcIiBpcyBhIHJlc2VydmVkIGV2ZW50IG5hbWUnKTtcbiAgICAgICAgfVxuICAgICAgICBhcmdzLnVuc2hpZnQoZXYpO1xuICAgICAgICBjb25zdCBwYWNrZXQgPSB7XG4gICAgICAgICAgICB0eXBlOiBzb2NrZXRfaW9fcGFyc2VyXzEuUGFja2V0VHlwZS5FVkVOVCxcbiAgICAgICAgICAgIGRhdGE6IGFyZ3MsXG4gICAgICAgIH07XG4gICAgICAgIHBhY2tldC5vcHRpb25zID0ge307XG4gICAgICAgIHBhY2tldC5vcHRpb25zLmNvbXByZXNzID0gdGhpcy5mbGFncy5jb21wcmVzcyAhPT0gZmFsc2U7XG4gICAgICAgIC8vIGV2ZW50IGFjayBjYWxsYmFja1xuICAgICAgICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgYXJnc1thcmdzLmxlbmd0aCAtIDFdKSB7XG4gICAgICAgICAgICBjb25zdCBpZCA9IHRoaXMuaWRzKys7XG4gICAgICAgICAgICBkZWJ1ZyhcImVtaXR0aW5nIHBhY2tldCB3aXRoIGFjayBpZCAlZFwiLCBpZCk7XG4gICAgICAgICAgICBjb25zdCBhY2sgPSBhcmdzLnBvcCgpO1xuICAgICAgICAgICAgdGhpcy5fcmVnaXN0ZXJBY2tDYWxsYmFjayhpZCwgYWNrKTtcbiAgICAgICAgICAgIHBhY2tldC5pZCA9IGlkO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGlzVHJhbnNwb3J0V3JpdGFibGUgPSB0aGlzLmlvLmVuZ2luZSAmJlxuICAgICAgICAgICAgdGhpcy5pby5lbmdpbmUudHJhbnNwb3J0ICYmXG4gICAgICAgICAgICB0aGlzLmlvLmVuZ2luZS50cmFuc3BvcnQud3JpdGFibGU7XG4gICAgICAgIGNvbnN0IGRpc2NhcmRQYWNrZXQgPSB0aGlzLmZsYWdzLnZvbGF0aWxlICYmICghaXNUcmFuc3BvcnRXcml0YWJsZSB8fCAhdGhpcy5jb25uZWN0ZWQpO1xuICAgICAgICBpZiAoZGlzY2FyZFBhY2tldCkge1xuICAgICAgICAgICAgZGVidWcoXCJkaXNjYXJkIHBhY2tldCBhcyB0aGUgdHJhbnNwb3J0IGlzIG5vdCBjdXJyZW50bHkgd3JpdGFibGVcIik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5jb25uZWN0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMucGFja2V0KHBhY2tldCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNlbmRCdWZmZXIucHVzaChwYWNrZXQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZmxhZ3MgPSB7fTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX3JlZ2lzdGVyQWNrQ2FsbGJhY2soaWQsIGFjaykge1xuICAgICAgICBjb25zdCB0aW1lb3V0ID0gdGhpcy5mbGFncy50aW1lb3V0O1xuICAgICAgICBpZiAodGltZW91dCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmFja3NbaWRdID0gYWNrO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgY29uc3QgdGltZXIgPSB0aGlzLmlvLnNldFRpbWVvdXRGbigoKSA9PiB7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5hY2tzW2lkXTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zZW5kQnVmZmVyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc2VuZEJ1ZmZlcltpXS5pZCA9PT0gaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVidWcoXCJyZW1vdmluZyBwYWNrZXQgd2l0aCBhY2sgaWQgJWQgZnJvbSB0aGUgYnVmZmVyXCIsIGlkKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZW5kQnVmZmVyLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWJ1ZyhcImV2ZW50IHdpdGggYWNrIGlkICVkIGhhcyB0aW1lZCBvdXQgYWZ0ZXIgJWQgbXNcIiwgaWQsIHRpbWVvdXQpO1xuICAgICAgICAgICAgYWNrLmNhbGwodGhpcywgbmV3IEVycm9yKFwib3BlcmF0aW9uIGhhcyB0aW1lZCBvdXRcIikpO1xuICAgICAgICB9LCB0aW1lb3V0KTtcbiAgICAgICAgdGhpcy5hY2tzW2lkXSA9ICguLi5hcmdzKSA9PiB7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICB0aGlzLmlvLmNsZWFyVGltZW91dEZuKHRpbWVyKTtcbiAgICAgICAgICAgIGFjay5hcHBseSh0aGlzLCBbbnVsbCwgLi4uYXJnc10pO1xuICAgICAgICB9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZW5kcyBhIHBhY2tldC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBwYWNrZXRcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHBhY2tldChwYWNrZXQpIHtcbiAgICAgICAgcGFja2V0Lm5zcCA9IHRoaXMubnNwO1xuICAgICAgICB0aGlzLmlvLl9wYWNrZXQocGFja2V0KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHVwb24gZW5naW5lIGBvcGVuYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgb25vcGVuKCkge1xuICAgICAgICBkZWJ1ZyhcInRyYW5zcG9ydCBpcyBvcGVuIC0gY29ubmVjdGluZ1wiKTtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmF1dGggPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICB0aGlzLmF1dGgoKGRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnBhY2tldCh7IHR5cGU6IHNvY2tldF9pb19wYXJzZXJfMS5QYWNrZXRUeXBlLkNPTk5FQ1QsIGRhdGEgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucGFja2V0KHsgdHlwZTogc29ja2V0X2lvX3BhcnNlcl8xLlBhY2tldFR5cGUuQ09OTkVDVCwgZGF0YTogdGhpcy5hdXRoIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxlZCB1cG9uIGVuZ2luZSBvciBtYW5hZ2VyIGBlcnJvcmAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZXJyXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBvbmVycm9yKGVycikge1xuICAgICAgICBpZiAoIXRoaXMuY29ubmVjdGVkKSB7XG4gICAgICAgICAgICB0aGlzLmVtaXRSZXNlcnZlZChcImNvbm5lY3RfZXJyb3JcIiwgZXJyKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgdXBvbiBlbmdpbmUgYGNsb3NlYC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSByZWFzb25cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIG9uY2xvc2UocmVhc29uKSB7XG4gICAgICAgIGRlYnVnKFwiY2xvc2UgKCVzKVwiLCByZWFzb24pO1xuICAgICAgICB0aGlzLmNvbm5lY3RlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmRpc2Nvbm5lY3RlZCA9IHRydWU7XG4gICAgICAgIGRlbGV0ZSB0aGlzLmlkO1xuICAgICAgICB0aGlzLmVtaXRSZXNlcnZlZChcImRpc2Nvbm5lY3RcIiwgcmVhc29uKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHdpdGggc29ja2V0IHBhY2tldC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBwYWNrZXRcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIG9ucGFja2V0KHBhY2tldCkge1xuICAgICAgICBjb25zdCBzYW1lTmFtZXNwYWNlID0gcGFja2V0Lm5zcCA9PT0gdGhpcy5uc3A7XG4gICAgICAgIGlmICghc2FtZU5hbWVzcGFjZSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgc3dpdGNoIChwYWNrZXQudHlwZSkge1xuICAgICAgICAgICAgY2FzZSBzb2NrZXRfaW9fcGFyc2VyXzEuUGFja2V0VHlwZS5DT05ORUNUOlxuICAgICAgICAgICAgICAgIGlmIChwYWNrZXQuZGF0YSAmJiBwYWNrZXQuZGF0YS5zaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaWQgPSBwYWNrZXQuZGF0YS5zaWQ7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMub25jb25uZWN0KGlkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdFJlc2VydmVkKFwiY29ubmVjdF9lcnJvclwiLCBuZXcgRXJyb3IoXCJJdCBzZWVtcyB5b3UgYXJlIHRyeWluZyB0byByZWFjaCBhIFNvY2tldC5JTyBzZXJ2ZXIgaW4gdjIueCB3aXRoIGEgdjMueCBjbGllbnQsIGJ1dCB0aGV5IGFyZSBub3QgY29tcGF0aWJsZSAobW9yZSBpbmZvcm1hdGlvbiBoZXJlOiBodHRwczovL3NvY2tldC5pby9kb2NzL3YzL21pZ3JhdGluZy1mcm9tLTIteC10by0zLTAvKVwiKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBzb2NrZXRfaW9fcGFyc2VyXzEuUGFja2V0VHlwZS5FVkVOVDpcbiAgICAgICAgICAgICAgICB0aGlzLm9uZXZlbnQocGFja2V0KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2Ugc29ja2V0X2lvX3BhcnNlcl8xLlBhY2tldFR5cGUuQklOQVJZX0VWRU5UOlxuICAgICAgICAgICAgICAgIHRoaXMub25ldmVudChwYWNrZXQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBzb2NrZXRfaW9fcGFyc2VyXzEuUGFja2V0VHlwZS5BQ0s6XG4gICAgICAgICAgICAgICAgdGhpcy5vbmFjayhwYWNrZXQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBzb2NrZXRfaW9fcGFyc2VyXzEuUGFja2V0VHlwZS5CSU5BUllfQUNLOlxuICAgICAgICAgICAgICAgIHRoaXMub25hY2socGFja2V0KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2Ugc29ja2V0X2lvX3BhcnNlcl8xLlBhY2tldFR5cGUuRElTQ09OTkVDVDpcbiAgICAgICAgICAgICAgICB0aGlzLm9uZGlzY29ubmVjdCgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBzb2NrZXRfaW9fcGFyc2VyXzEuUGFja2V0VHlwZS5DT05ORUNUX0VSUk9SOlxuICAgICAgICAgICAgICAgIHRoaXMuZGVzdHJveSgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGVyciA9IG5ldyBFcnJvcihwYWNrZXQuZGF0YS5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICAgICAgZXJyLmRhdGEgPSBwYWNrZXQuZGF0YS5kYXRhO1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdFJlc2VydmVkKFwiY29ubmVjdF9lcnJvclwiLCBlcnIpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxlZCB1cG9uIGEgc2VydmVyIGV2ZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIHBhY2tldFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgb25ldmVudChwYWNrZXQpIHtcbiAgICAgICAgY29uc3QgYXJncyA9IHBhY2tldC5kYXRhIHx8IFtdO1xuICAgICAgICBkZWJ1ZyhcImVtaXR0aW5nIGV2ZW50ICVqXCIsIGFyZ3MpO1xuICAgICAgICBpZiAobnVsbCAhPSBwYWNrZXQuaWQpIHtcbiAgICAgICAgICAgIGRlYnVnKFwiYXR0YWNoaW5nIGFjayBjYWxsYmFjayB0byBldmVudFwiKTtcbiAgICAgICAgICAgIGFyZ3MucHVzaCh0aGlzLmFjayhwYWNrZXQuaWQpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5jb25uZWN0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZW1pdEV2ZW50KGFyZ3MpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5yZWNlaXZlQnVmZmVyLnB1c2goT2JqZWN0LmZyZWV6ZShhcmdzKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZW1pdEV2ZW50KGFyZ3MpIHtcbiAgICAgICAgaWYgKHRoaXMuX2FueUxpc3RlbmVycyAmJiB0aGlzLl9hbnlMaXN0ZW5lcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zdCBsaXN0ZW5lcnMgPSB0aGlzLl9hbnlMaXN0ZW5lcnMuc2xpY2UoKTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgbGlzdGVuZXIgb2YgbGlzdGVuZXJzKSB7XG4gICAgICAgICAgICAgICAgbGlzdGVuZXIuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc3VwZXIuZW1pdC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUHJvZHVjZXMgYW4gYWNrIGNhbGxiYWNrIHRvIGVtaXQgd2l0aCBhbiBldmVudC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgYWNrKGlkKSB7XG4gICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgICAgICBsZXQgc2VudCA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICAgICAgICAgIC8vIHByZXZlbnQgZG91YmxlIGNhbGxiYWNrc1xuICAgICAgICAgICAgaWYgKHNlbnQpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgc2VudCA9IHRydWU7XG4gICAgICAgICAgICBkZWJ1ZyhcInNlbmRpbmcgYWNrICVqXCIsIGFyZ3MpO1xuICAgICAgICAgICAgc2VsZi5wYWNrZXQoe1xuICAgICAgICAgICAgICAgIHR5cGU6IHNvY2tldF9pb19wYXJzZXJfMS5QYWNrZXRUeXBlLkFDSyxcbiAgICAgICAgICAgICAgICBpZDogaWQsXG4gICAgICAgICAgICAgICAgZGF0YTogYXJncyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgdXBvbiBhIHNlcnZlciBhY2tub3dsZWdlbWVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBwYWNrZXRcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIG9uYWNrKHBhY2tldCkge1xuICAgICAgICBjb25zdCBhY2sgPSB0aGlzLmFja3NbcGFja2V0LmlkXTtcbiAgICAgICAgaWYgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGFjaykge1xuICAgICAgICAgICAgZGVidWcoXCJjYWxsaW5nIGFjayAlcyB3aXRoICVqXCIsIHBhY2tldC5pZCwgcGFja2V0LmRhdGEpO1xuICAgICAgICAgICAgYWNrLmFwcGx5KHRoaXMsIHBhY2tldC5kYXRhKTtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmFja3NbcGFja2V0LmlkXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGRlYnVnKFwiYmFkIGFjayAlc1wiLCBwYWNrZXQuaWQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxlZCB1cG9uIHNlcnZlciBjb25uZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBvbmNvbm5lY3QoaWQpIHtcbiAgICAgICAgZGVidWcoXCJzb2NrZXQgY29ubmVjdGVkIHdpdGggaWQgJXNcIiwgaWQpO1xuICAgICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICAgIHRoaXMuY29ubmVjdGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5kaXNjb25uZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5lbWl0QnVmZmVyZWQoKTtcbiAgICAgICAgdGhpcy5lbWl0UmVzZXJ2ZWQoXCJjb25uZWN0XCIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBFbWl0IGJ1ZmZlcmVkIGV2ZW50cyAocmVjZWl2ZWQgYW5kIGVtaXR0ZWQpLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBlbWl0QnVmZmVyZWQoKSB7XG4gICAgICAgIHRoaXMucmVjZWl2ZUJ1ZmZlci5mb3JFYWNoKChhcmdzKSA9PiB0aGlzLmVtaXRFdmVudChhcmdzKSk7XG4gICAgICAgIHRoaXMucmVjZWl2ZUJ1ZmZlciA9IFtdO1xuICAgICAgICB0aGlzLnNlbmRCdWZmZXIuZm9yRWFjaCgocGFja2V0KSA9PiB0aGlzLnBhY2tldChwYWNrZXQpKTtcbiAgICAgICAgdGhpcy5zZW5kQnVmZmVyID0gW107XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxlZCB1cG9uIHNlcnZlciBkaXNjb25uZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBvbmRpc2Nvbm5lY3QoKSB7XG4gICAgICAgIGRlYnVnKFwic2VydmVyIGRpc2Nvbm5lY3QgKCVzKVwiLCB0aGlzLm5zcCk7XG4gICAgICAgIHRoaXMuZGVzdHJveSgpO1xuICAgICAgICB0aGlzLm9uY2xvc2UoXCJpbyBzZXJ2ZXIgZGlzY29ubmVjdFwiKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHVwb24gZm9yY2VkIGNsaWVudC9zZXJ2ZXIgc2lkZSBkaXNjb25uZWN0aW9ucyxcbiAgICAgKiB0aGlzIG1ldGhvZCBlbnN1cmVzIHRoZSBtYW5hZ2VyIHN0b3BzIHRyYWNraW5nIHVzIGFuZFxuICAgICAqIHRoYXQgcmVjb25uZWN0aW9ucyBkb24ndCBnZXQgdHJpZ2dlcmVkIGZvciB0aGlzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBkZXN0cm95KCkge1xuICAgICAgICBpZiAodGhpcy5zdWJzKSB7XG4gICAgICAgICAgICAvLyBjbGVhbiBzdWJzY3JpcHRpb25zIHRvIGF2b2lkIHJlY29ubmVjdGlvbnNcbiAgICAgICAgICAgIHRoaXMuc3Vicy5mb3JFYWNoKChzdWJEZXN0cm95KSA9PiBzdWJEZXN0cm95KCkpO1xuICAgICAgICAgICAgdGhpcy5zdWJzID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaW9bXCJfZGVzdHJveVwiXSh0aGlzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGlzY29ubmVjdHMgdGhlIHNvY2tldCBtYW51YWxseS5cbiAgICAgKlxuICAgICAqIEByZXR1cm4gc2VsZlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBkaXNjb25uZWN0KCkge1xuICAgICAgICBpZiAodGhpcy5jb25uZWN0ZWQpIHtcbiAgICAgICAgICAgIGRlYnVnKFwicGVyZm9ybWluZyBkaXNjb25uZWN0ICglcylcIiwgdGhpcy5uc3ApO1xuICAgICAgICAgICAgdGhpcy5wYWNrZXQoeyB0eXBlOiBzb2NrZXRfaW9fcGFyc2VyXzEuUGFja2V0VHlwZS5ESVNDT05ORUNUIH0pO1xuICAgICAgICB9XG4gICAgICAgIC8vIHJlbW92ZSBzb2NrZXQgZnJvbSBwb29sXG4gICAgICAgIHRoaXMuZGVzdHJveSgpO1xuICAgICAgICBpZiAodGhpcy5jb25uZWN0ZWQpIHtcbiAgICAgICAgICAgIC8vIGZpcmUgZXZlbnRzXG4gICAgICAgICAgICB0aGlzLm9uY2xvc2UoXCJpbyBjbGllbnQgZGlzY29ubmVjdFwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWxpYXMgZm9yIGRpc2Nvbm5lY3QoKVxuICAgICAqXG4gICAgICogQHJldHVybiBzZWxmXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIGNsb3NlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kaXNjb25uZWN0KCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGNvbXByZXNzIGZsYWcuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29tcHJlc3MgLSBpZiBgdHJ1ZWAsIGNvbXByZXNzZXMgdGhlIHNlbmRpbmcgZGF0YVxuICAgICAqIEByZXR1cm4gc2VsZlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBjb21wcmVzcyhjb21wcmVzcykge1xuICAgICAgICB0aGlzLmZsYWdzLmNvbXByZXNzID0gY29tcHJlc3M7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIGEgbW9kaWZpZXIgZm9yIGEgc3Vic2VxdWVudCBldmVudCBlbWlzc2lvbiB0aGF0IHRoZSBldmVudCBtZXNzYWdlIHdpbGwgYmUgZHJvcHBlZCB3aGVuIHRoaXMgc29ja2V0IGlzIG5vdFxuICAgICAqIHJlYWR5IHRvIHNlbmQgbWVzc2FnZXMuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBzZWxmXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIGdldCB2b2xhdGlsZSgpIHtcbiAgICAgICAgdGhpcy5mbGFncy52b2xhdGlsZSA9IHRydWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIGEgbW9kaWZpZXIgZm9yIGEgc3Vic2VxdWVudCBldmVudCBlbWlzc2lvbiB0aGF0IHRoZSBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCB3aXRoIGFuIGVycm9yIHdoZW4gdGhlXG4gICAgICogZ2l2ZW4gbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBoYXZlIGVsYXBzZWQgd2l0aG91dCBhbiBhY2tub3dsZWRnZW1lbnQgZnJvbSB0aGUgc2VydmVyOlxuICAgICAqXG4gICAgICogYGBgXG4gICAgICogc29ja2V0LnRpbWVvdXQoNTAwMCkuZW1pdChcIm15LWV2ZW50XCIsIChlcnIpID0+IHtcbiAgICAgKiAgIGlmIChlcnIpIHtcbiAgICAgKiAgICAgLy8gdGhlIHNlcnZlciBkaWQgbm90IGFja25vd2xlZGdlIHRoZSBldmVudCBpbiB0aGUgZ2l2ZW4gZGVsYXlcbiAgICAgKiAgIH1cbiAgICAgKiB9KTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHNlbGZcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgdGltZW91dCh0aW1lb3V0KSB7XG4gICAgICAgIHRoaXMuZmxhZ3MudGltZW91dCA9IHRpbWVvdXQ7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGRzIGEgbGlzdGVuZXIgdGhhdCB3aWxsIGJlIGZpcmVkIHdoZW4gYW55IGV2ZW50IGlzIGVtaXR0ZWQuIFRoZSBldmVudCBuYW1lIGlzIHBhc3NlZCBhcyB0aGUgZmlyc3QgYXJndW1lbnQgdG8gdGhlXG4gICAgICogY2FsbGJhY2suXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbGlzdGVuZXJcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgb25BbnkobGlzdGVuZXIpIHtcbiAgICAgICAgdGhpcy5fYW55TGlzdGVuZXJzID0gdGhpcy5fYW55TGlzdGVuZXJzIHx8IFtdO1xuICAgICAgICB0aGlzLl9hbnlMaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGRzIGEgbGlzdGVuZXIgdGhhdCB3aWxsIGJlIGZpcmVkIHdoZW4gYW55IGV2ZW50IGlzIGVtaXR0ZWQuIFRoZSBldmVudCBuYW1lIGlzIHBhc3NlZCBhcyB0aGUgZmlyc3QgYXJndW1lbnQgdG8gdGhlXG4gICAgICogY2FsbGJhY2suIFRoZSBsaXN0ZW5lciBpcyBhZGRlZCB0byB0aGUgYmVnaW5uaW5nIG9mIHRoZSBsaXN0ZW5lcnMgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbGlzdGVuZXJcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgcHJlcGVuZEFueShsaXN0ZW5lcikge1xuICAgICAgICB0aGlzLl9hbnlMaXN0ZW5lcnMgPSB0aGlzLl9hbnlMaXN0ZW5lcnMgfHwgW107XG4gICAgICAgIHRoaXMuX2FueUxpc3RlbmVycy51bnNoaWZ0KGxpc3RlbmVyKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgdGhlIGxpc3RlbmVyIHRoYXQgd2lsbCBiZSBmaXJlZCB3aGVuIGFueSBldmVudCBpcyBlbWl0dGVkLlxuICAgICAqXG4gICAgICogQHBhcmFtIGxpc3RlbmVyXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIG9mZkFueShsaXN0ZW5lcikge1xuICAgICAgICBpZiAoIXRoaXMuX2FueUxpc3RlbmVycykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxpc3RlbmVyKSB7XG4gICAgICAgICAgICBjb25zdCBsaXN0ZW5lcnMgPSB0aGlzLl9hbnlMaXN0ZW5lcnM7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChsaXN0ZW5lciA9PT0gbGlzdGVuZXJzW2ldKSB7XG4gICAgICAgICAgICAgICAgICAgIGxpc3RlbmVycy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2FueUxpc3RlbmVycyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFuIGFycmF5IG9mIGxpc3RlbmVycyB0aGF0IGFyZSBsaXN0ZW5pbmcgZm9yIGFueSBldmVudCB0aGF0IGlzIHNwZWNpZmllZC4gVGhpcyBhcnJheSBjYW4gYmUgbWFuaXB1bGF0ZWQsXG4gICAgICogZS5nLiB0byByZW1vdmUgbGlzdGVuZXJzLlxuICAgICAqXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIGxpc3RlbmVyc0FueSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FueUxpc3RlbmVycyB8fCBbXTtcbiAgICB9XG59XG5leHBvcnRzLlNvY2tldCA9IFNvY2tldDtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy51cmwgPSB2b2lkIDA7XG5jb25zdCBwYXJzZXVyaV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJwYXJzZXVyaVwiKSk7XG5jb25zdCBkZWJ1Z18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJkZWJ1Z1wiKSk7IC8vIGRlYnVnKClcbmNvbnN0IGRlYnVnID0gZGVidWdfMS5kZWZhdWx0KFwic29ja2V0LmlvLWNsaWVudDp1cmxcIik7IC8vIGRlYnVnKClcbi8qKlxuICogVVJMIHBhcnNlci5cbiAqXG4gKiBAcGFyYW0gdXJpIC0gdXJsXG4gKiBAcGFyYW0gcGF0aCAtIHRoZSByZXF1ZXN0IHBhdGggb2YgdGhlIGNvbm5lY3Rpb25cbiAqIEBwYXJhbSBsb2MgLSBBbiBvYmplY3QgbWVhbnQgdG8gbWltaWMgd2luZG93LmxvY2F0aW9uLlxuICogICAgICAgIERlZmF1bHRzIHRvIHdpbmRvdy5sb2NhdGlvbi5cbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gdXJsKHVyaSwgcGF0aCA9IFwiXCIsIGxvYykge1xuICAgIGxldCBvYmogPSB1cmk7XG4gICAgLy8gZGVmYXVsdCB0byB3aW5kb3cubG9jYXRpb25cbiAgICBsb2MgPSBsb2MgfHwgKHR5cGVvZiBsb2NhdGlvbiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBsb2NhdGlvbik7XG4gICAgaWYgKG51bGwgPT0gdXJpKVxuICAgICAgICB1cmkgPSBsb2MucHJvdG9jb2wgKyBcIi8vXCIgKyBsb2MuaG9zdDtcbiAgICAvLyByZWxhdGl2ZSBwYXRoIHN1cHBvcnRcbiAgICBpZiAodHlwZW9mIHVyaSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICBpZiAoXCIvXCIgPT09IHVyaS5jaGFyQXQoMCkpIHtcbiAgICAgICAgICAgIGlmIChcIi9cIiA9PT0gdXJpLmNoYXJBdCgxKSkge1xuICAgICAgICAgICAgICAgIHVyaSA9IGxvYy5wcm90b2NvbCArIHVyaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHVyaSA9IGxvYy5ob3N0ICsgdXJpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghL14oaHR0cHM/fHdzcz8pOlxcL1xcLy8udGVzdCh1cmkpKSB7XG4gICAgICAgICAgICBkZWJ1ZyhcInByb3RvY29sLWxlc3MgdXJsICVzXCIsIHVyaSk7XG4gICAgICAgICAgICBpZiAoXCJ1bmRlZmluZWRcIiAhPT0gdHlwZW9mIGxvYykge1xuICAgICAgICAgICAgICAgIHVyaSA9IGxvYy5wcm90b2NvbCArIFwiLy9cIiArIHVyaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHVyaSA9IFwiaHR0cHM6Ly9cIiArIHVyaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBwYXJzZVxuICAgICAgICBkZWJ1ZyhcInBhcnNlICVzXCIsIHVyaSk7XG4gICAgICAgIG9iaiA9IHBhcnNldXJpXzEuZGVmYXVsdCh1cmkpO1xuICAgIH1cbiAgICAvLyBtYWtlIHN1cmUgd2UgdHJlYXQgYGxvY2FsaG9zdDo4MGAgYW5kIGBsb2NhbGhvc3RgIGVxdWFsbHlcbiAgICBpZiAoIW9iai5wb3J0KSB7XG4gICAgICAgIGlmICgvXihodHRwfHdzKSQvLnRlc3Qob2JqLnByb3RvY29sKSkge1xuICAgICAgICAgICAgb2JqLnBvcnQgPSBcIjgwXCI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoL14oaHR0cHx3cylzJC8udGVzdChvYmoucHJvdG9jb2wpKSB7XG4gICAgICAgICAgICBvYmoucG9ydCA9IFwiNDQzXCI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgb2JqLnBhdGggPSBvYmoucGF0aCB8fCBcIi9cIjtcbiAgICBjb25zdCBpcHY2ID0gb2JqLmhvc3QuaW5kZXhPZihcIjpcIikgIT09IC0xO1xuICAgIGNvbnN0IGhvc3QgPSBpcHY2ID8gXCJbXCIgKyBvYmouaG9zdCArIFwiXVwiIDogb2JqLmhvc3Q7XG4gICAgLy8gZGVmaW5lIHVuaXF1ZSBpZFxuICAgIG9iai5pZCA9IG9iai5wcm90b2NvbCArIFwiOi8vXCIgKyBob3N0ICsgXCI6XCIgKyBvYmoucG9ydCArIHBhdGg7XG4gICAgLy8gZGVmaW5lIGhyZWZcbiAgICBvYmouaHJlZiA9XG4gICAgICAgIG9iai5wcm90b2NvbCArXG4gICAgICAgICAgICBcIjovL1wiICtcbiAgICAgICAgICAgIGhvc3QgK1xuICAgICAgICAgICAgKGxvYyAmJiBsb2MucG9ydCA9PT0gb2JqLnBvcnQgPyBcIlwiIDogXCI6XCIgKyBvYmoucG9ydCk7XG4gICAgcmV0dXJuIG9iajtcbn1cbmV4cG9ydHMudXJsID0gdXJsO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRlZmF1bHQgPSAoKCkgPT4ge1xuICAgIGlmICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICByZXR1cm4gc2VsZjtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICByZXR1cm4gd2luZG93O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcbiAgICB9XG59KSgpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmluc3RhbGxUaW1lckZ1bmN0aW9ucyA9IGV4cG9ydHMudHJhbnNwb3J0cyA9IGV4cG9ydHMuVHJhbnNwb3J0ID0gZXhwb3J0cy5wcm90b2NvbCA9IGV4cG9ydHMuU29ja2V0ID0gdm9pZCAwO1xuY29uc3Qgc29ja2V0X2pzXzEgPSByZXF1aXJlKFwiLi9zb2NrZXQuanNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJTb2NrZXRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNvY2tldF9qc18xLlNvY2tldDsgfSB9KTtcbmV4cG9ydHMucHJvdG9jb2wgPSBzb2NrZXRfanNfMS5Tb2NrZXQucHJvdG9jb2w7XG52YXIgdHJhbnNwb3J0X2pzXzEgPSByZXF1aXJlKFwiLi90cmFuc3BvcnQuanNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJUcmFuc3BvcnRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRyYW5zcG9ydF9qc18xLlRyYW5zcG9ydDsgfSB9KTtcbnZhciBpbmRleF9qc18xID0gcmVxdWlyZShcIi4vdHJhbnNwb3J0cy9pbmRleC5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInRyYW5zcG9ydHNcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGluZGV4X2pzXzEudHJhbnNwb3J0czsgfSB9KTtcbnZhciB1dGlsX2pzXzEgPSByZXF1aXJlKFwiLi91dGlsLmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiaW5zdGFsbFRpbWVyRnVuY3Rpb25zXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB1dGlsX2pzXzEuaW5zdGFsbFRpbWVyRnVuY3Rpb25zOyB9IH0pO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlNvY2tldCA9IHZvaWQgMDtcbmNvbnN0IGluZGV4X2pzXzEgPSByZXF1aXJlKFwiLi90cmFuc3BvcnRzL2luZGV4LmpzXCIpO1xuY29uc3QgdXRpbF9qc18xID0gcmVxdWlyZShcIi4vdXRpbC5qc1wiKTtcbmNvbnN0IHBhcnNlcXNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwicGFyc2Vxc1wiKSk7XG5jb25zdCBwYXJzZXVyaV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJwYXJzZXVyaVwiKSk7XG5jb25zdCBkZWJ1Z18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJkZWJ1Z1wiKSk7IC8vIGRlYnVnKClcbmNvbnN0IGNvbXBvbmVudF9lbWl0dGVyXzEgPSByZXF1aXJlKFwiQHNvY2tldC5pby9jb21wb25lbnQtZW1pdHRlclwiKTtcbmNvbnN0IGVuZ2luZV9pb19wYXJzZXJfMSA9IHJlcXVpcmUoXCJlbmdpbmUuaW8tcGFyc2VyXCIpO1xuY29uc3QgZGVidWcgPSAoMCwgZGVidWdfMS5kZWZhdWx0KShcImVuZ2luZS5pby1jbGllbnQ6c29ja2V0XCIpOyAvLyBkZWJ1ZygpXG5jbGFzcyBTb2NrZXQgZXh0ZW5kcyBjb21wb25lbnRfZW1pdHRlcl8xLkVtaXR0ZXIge1xuICAgIC8qKlxuICAgICAqIFNvY2tldCBjb25zdHJ1Y3Rvci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfE9iamVjdH0gdXJpIG9yIG9wdGlvbnNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdGlvbnNcbiAgICAgKiBAYXBpIHB1YmxpY1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHVyaSwgb3B0cyA9IHt9KSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIGlmICh1cmkgJiYgXCJvYmplY3RcIiA9PT0gdHlwZW9mIHVyaSkge1xuICAgICAgICAgICAgb3B0cyA9IHVyaTtcbiAgICAgICAgICAgIHVyaSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHVyaSkge1xuICAgICAgICAgICAgdXJpID0gKDAsIHBhcnNldXJpXzEuZGVmYXVsdCkodXJpKTtcbiAgICAgICAgICAgIG9wdHMuaG9zdG5hbWUgPSB1cmkuaG9zdDtcbiAgICAgICAgICAgIG9wdHMuc2VjdXJlID0gdXJpLnByb3RvY29sID09PSBcImh0dHBzXCIgfHwgdXJpLnByb3RvY29sID09PSBcIndzc1wiO1xuICAgICAgICAgICAgb3B0cy5wb3J0ID0gdXJpLnBvcnQ7XG4gICAgICAgICAgICBpZiAodXJpLnF1ZXJ5KVxuICAgICAgICAgICAgICAgIG9wdHMucXVlcnkgPSB1cmkucXVlcnk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAob3B0cy5ob3N0KSB7XG4gICAgICAgICAgICBvcHRzLmhvc3RuYW1lID0gKDAsIHBhcnNldXJpXzEuZGVmYXVsdCkob3B0cy5ob3N0KS5ob3N0O1xuICAgICAgICB9XG4gICAgICAgICgwLCB1dGlsX2pzXzEuaW5zdGFsbFRpbWVyRnVuY3Rpb25zKSh0aGlzLCBvcHRzKTtcbiAgICAgICAgdGhpcy5zZWN1cmUgPVxuICAgICAgICAgICAgbnVsbCAhPSBvcHRzLnNlY3VyZVxuICAgICAgICAgICAgICAgID8gb3B0cy5zZWN1cmVcbiAgICAgICAgICAgICAgICA6IHR5cGVvZiBsb2NhdGlvbiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBcImh0dHBzOlwiID09PSBsb2NhdGlvbi5wcm90b2NvbDtcbiAgICAgICAgaWYgKG9wdHMuaG9zdG5hbWUgJiYgIW9wdHMucG9ydCkge1xuICAgICAgICAgICAgLy8gaWYgbm8gcG9ydCBpcyBzcGVjaWZpZWQgbWFudWFsbHksIHVzZSB0aGUgcHJvdG9jb2wgZGVmYXVsdFxuICAgICAgICAgICAgb3B0cy5wb3J0ID0gdGhpcy5zZWN1cmUgPyBcIjQ0M1wiIDogXCI4MFwiO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaG9zdG5hbWUgPVxuICAgICAgICAgICAgb3B0cy5ob3N0bmFtZSB8fFxuICAgICAgICAgICAgICAgICh0eXBlb2YgbG9jYXRpb24gIT09IFwidW5kZWZpbmVkXCIgPyBsb2NhdGlvbi5ob3N0bmFtZSA6IFwibG9jYWxob3N0XCIpO1xuICAgICAgICB0aGlzLnBvcnQgPVxuICAgICAgICAgICAgb3B0cy5wb3J0IHx8XG4gICAgICAgICAgICAgICAgKHR5cGVvZiBsb2NhdGlvbiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBsb2NhdGlvbi5wb3J0XG4gICAgICAgICAgICAgICAgICAgID8gbG9jYXRpb24ucG9ydFxuICAgICAgICAgICAgICAgICAgICA6IHRoaXMuc2VjdXJlXG4gICAgICAgICAgICAgICAgICAgICAgICA/IFwiNDQzXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIDogXCI4MFwiKTtcbiAgICAgICAgdGhpcy50cmFuc3BvcnRzID0gb3B0cy50cmFuc3BvcnRzIHx8IFtcInBvbGxpbmdcIiwgXCJ3ZWJzb2NrZXRcIl07XG4gICAgICAgIHRoaXMucmVhZHlTdGF0ZSA9IFwiXCI7XG4gICAgICAgIHRoaXMud3JpdGVCdWZmZXIgPSBbXTtcbiAgICAgICAgdGhpcy5wcmV2QnVmZmVyTGVuID0gMDtcbiAgICAgICAgdGhpcy5vcHRzID0gT2JqZWN0LmFzc2lnbih7XG4gICAgICAgICAgICBwYXRoOiBcIi9lbmdpbmUuaW9cIixcbiAgICAgICAgICAgIGFnZW50OiBmYWxzZSxcbiAgICAgICAgICAgIHdpdGhDcmVkZW50aWFsczogZmFsc2UsXG4gICAgICAgICAgICB1cGdyYWRlOiB0cnVlLFxuICAgICAgICAgICAgdGltZXN0YW1wUGFyYW06IFwidFwiLFxuICAgICAgICAgICAgcmVtZW1iZXJVcGdyYWRlOiBmYWxzZSxcbiAgICAgICAgICAgIHJlamVjdFVuYXV0aG9yaXplZDogdHJ1ZSxcbiAgICAgICAgICAgIHBlck1lc3NhZ2VEZWZsYXRlOiB7XG4gICAgICAgICAgICAgICAgdGhyZXNob2xkOiAxMDI0XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdHJhbnNwb3J0T3B0aW9uczoge30sXG4gICAgICAgICAgICBjbG9zZU9uQmVmb3JldW5sb2FkOiB0cnVlXG4gICAgICAgIH0sIG9wdHMpO1xuICAgICAgICB0aGlzLm9wdHMucGF0aCA9IHRoaXMub3B0cy5wYXRoLnJlcGxhY2UoL1xcLyQvLCBcIlwiKSArIFwiL1wiO1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMub3B0cy5xdWVyeSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgdGhpcy5vcHRzLnF1ZXJ5ID0gcGFyc2Vxc18xLmRlZmF1bHQuZGVjb2RlKHRoaXMub3B0cy5xdWVyeSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gc2V0IG9uIGhhbmRzaGFrZVxuICAgICAgICB0aGlzLmlkID0gbnVsbDtcbiAgICAgICAgdGhpcy51cGdyYWRlcyA9IG51bGw7XG4gICAgICAgIHRoaXMucGluZ0ludGVydmFsID0gbnVsbDtcbiAgICAgICAgdGhpcy5waW5nVGltZW91dCA9IG51bGw7XG4gICAgICAgIC8vIHNldCBvbiBoZWFydGJlYXRcbiAgICAgICAgdGhpcy5waW5nVGltZW91dFRpbWVyID0gbnVsbDtcbiAgICAgICAgaWYgKHR5cGVvZiBhZGRFdmVudExpc3RlbmVyID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdHMuY2xvc2VPbkJlZm9yZXVubG9hZCkge1xuICAgICAgICAgICAgICAgIC8vIEZpcmVmb3ggY2xvc2VzIHRoZSBjb25uZWN0aW9uIHdoZW4gdGhlIFwiYmVmb3JldW5sb2FkXCIgZXZlbnQgaXMgZW1pdHRlZCBidXQgbm90IENocm9tZS4gVGhpcyBldmVudCBsaXN0ZW5lclxuICAgICAgICAgICAgICAgIC8vIGVuc3VyZXMgZXZlcnkgYnJvd3NlciBiZWhhdmVzIHRoZSBzYW1lIChubyBcImRpc2Nvbm5lY3RcIiBldmVudCBhdCB0aGUgU29ja2V0LklPIGxldmVsIHdoZW4gdGhlIHBhZ2UgaXNcbiAgICAgICAgICAgICAgICAvLyBjbG9zZWQvcmVsb2FkZWQpXG4gICAgICAgICAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcihcImJlZm9yZXVubG9hZFwiLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnRyYW5zcG9ydCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2lsZW50bHkgY2xvc2UgdGhlIHRyYW5zcG9ydFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50cmFuc3BvcnQucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRyYW5zcG9ydC5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSwgZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuaG9zdG5hbWUgIT09IFwibG9jYWxob3N0XCIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9mZmxpbmVFdmVudExpc3RlbmVyID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9uQ2xvc2UoXCJ0cmFuc3BvcnQgY2xvc2VcIik7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBhZGRFdmVudExpc3RlbmVyKFwib2ZmbGluZVwiLCB0aGlzLm9mZmxpbmVFdmVudExpc3RlbmVyLCBmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vcGVuKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgdHJhbnNwb3J0IG9mIHRoZSBnaXZlbiB0eXBlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHRyYW5zcG9ydCBuYW1lXG4gICAgICogQHJldHVybiB7VHJhbnNwb3J0fVxuICAgICAqIEBhcGkgcHJpdmF0ZVxuICAgICAqL1xuICAgIGNyZWF0ZVRyYW5zcG9ydChuYW1lKSB7XG4gICAgICAgIGRlYnVnKCdjcmVhdGluZyB0cmFuc3BvcnQgXCIlc1wiJywgbmFtZSk7XG4gICAgICAgIGNvbnN0IHF1ZXJ5ID0gY2xvbmUodGhpcy5vcHRzLnF1ZXJ5KTtcbiAgICAgICAgLy8gYXBwZW5kIGVuZ2luZS5pbyBwcm90b2NvbCBpZGVudGlmaWVyXG4gICAgICAgIHF1ZXJ5LkVJTyA9IGVuZ2luZV9pb19wYXJzZXJfMS5wcm90b2NvbDtcbiAgICAgICAgLy8gdHJhbnNwb3J0IG5hbWVcbiAgICAgICAgcXVlcnkudHJhbnNwb3J0ID0gbmFtZTtcbiAgICAgICAgLy8gc2Vzc2lvbiBpZCBpZiB3ZSBhbHJlYWR5IGhhdmUgb25lXG4gICAgICAgIGlmICh0aGlzLmlkKVxuICAgICAgICAgICAgcXVlcnkuc2lkID0gdGhpcy5pZDtcbiAgICAgICAgY29uc3Qgb3B0cyA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMub3B0cy50cmFuc3BvcnRPcHRpb25zW25hbWVdLCB0aGlzLm9wdHMsIHtcbiAgICAgICAgICAgIHF1ZXJ5LFxuICAgICAgICAgICAgc29ja2V0OiB0aGlzLFxuICAgICAgICAgICAgaG9zdG5hbWU6IHRoaXMuaG9zdG5hbWUsXG4gICAgICAgICAgICBzZWN1cmU6IHRoaXMuc2VjdXJlLFxuICAgICAgICAgICAgcG9ydDogdGhpcy5wb3J0XG4gICAgICAgIH0pO1xuICAgICAgICBkZWJ1ZyhcIm9wdGlvbnM6ICVqXCIsIG9wdHMpO1xuICAgICAgICByZXR1cm4gbmV3IGluZGV4X2pzXzEudHJhbnNwb3J0c1tuYW1lXShvcHRzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgdHJhbnNwb3J0IHRvIHVzZSBhbmQgc3RhcnRzIHByb2JlLlxuICAgICAqXG4gICAgICogQGFwaSBwcml2YXRlXG4gICAgICovXG4gICAgb3BlbigpIHtcbiAgICAgICAgbGV0IHRyYW5zcG9ydDtcbiAgICAgICAgaWYgKHRoaXMub3B0cy5yZW1lbWJlclVwZ3JhZGUgJiZcbiAgICAgICAgICAgIFNvY2tldC5wcmlvcldlYnNvY2tldFN1Y2Nlc3MgJiZcbiAgICAgICAgICAgIHRoaXMudHJhbnNwb3J0cy5pbmRleE9mKFwid2Vic29ja2V0XCIpICE9PSAtMSkge1xuICAgICAgICAgICAgdHJhbnNwb3J0ID0gXCJ3ZWJzb2NrZXRcIjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICgwID09PSB0aGlzLnRyYW5zcG9ydHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAvLyBFbWl0IGVycm9yIG9uIG5leHQgdGljayBzbyBpdCBjYW4gYmUgbGlzdGVuZWQgdG9cbiAgICAgICAgICAgIHRoaXMuc2V0VGltZW91dEZuKCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXRSZXNlcnZlZChcImVycm9yXCIsIFwiTm8gdHJhbnNwb3J0cyBhdmFpbGFibGVcIik7XG4gICAgICAgICAgICB9LCAwKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRyYW5zcG9ydCA9IHRoaXMudHJhbnNwb3J0c1swXTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlYWR5U3RhdGUgPSBcIm9wZW5pbmdcIjtcbiAgICAgICAgLy8gUmV0cnkgd2l0aCB0aGUgbmV4dCB0cmFuc3BvcnQgaWYgdGhlIHRyYW5zcG9ydCBpcyBkaXNhYmxlZCAoanNvbnA6IGZhbHNlKVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdHJhbnNwb3J0ID0gdGhpcy5jcmVhdGVUcmFuc3BvcnQodHJhbnNwb3J0KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgZGVidWcoXCJlcnJvciB3aGlsZSBjcmVhdGluZyB0cmFuc3BvcnQ6ICVzXCIsIGUpO1xuICAgICAgICAgICAgdGhpcy50cmFuc3BvcnRzLnNoaWZ0KCk7XG4gICAgICAgICAgICB0aGlzLm9wZW4oKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0cmFuc3BvcnQub3BlbigpO1xuICAgICAgICB0aGlzLnNldFRyYW5zcG9ydCh0cmFuc3BvcnQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBjdXJyZW50IHRyYW5zcG9ydC4gRGlzYWJsZXMgdGhlIGV4aXN0aW5nIG9uZSAoaWYgYW55KS5cbiAgICAgKlxuICAgICAqIEBhcGkgcHJpdmF0ZVxuICAgICAqL1xuICAgIHNldFRyYW5zcG9ydCh0cmFuc3BvcnQpIHtcbiAgICAgICAgZGVidWcoXCJzZXR0aW5nIHRyYW5zcG9ydCAlc1wiLCB0cmFuc3BvcnQubmFtZSk7XG4gICAgICAgIGlmICh0aGlzLnRyYW5zcG9ydCkge1xuICAgICAgICAgICAgZGVidWcoXCJjbGVhcmluZyBleGlzdGluZyB0cmFuc3BvcnQgJXNcIiwgdGhpcy50cmFuc3BvcnQubmFtZSk7XG4gICAgICAgICAgICB0aGlzLnRyYW5zcG9ydC5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBzZXQgdXAgdHJhbnNwb3J0XG4gICAgICAgIHRoaXMudHJhbnNwb3J0ID0gdHJhbnNwb3J0O1xuICAgICAgICAvLyBzZXQgdXAgdHJhbnNwb3J0IGxpc3RlbmVyc1xuICAgICAgICB0cmFuc3BvcnRcbiAgICAgICAgICAgIC5vbihcImRyYWluXCIsIHRoaXMub25EcmFpbi5iaW5kKHRoaXMpKVxuICAgICAgICAgICAgLm9uKFwicGFja2V0XCIsIHRoaXMub25QYWNrZXQuYmluZCh0aGlzKSlcbiAgICAgICAgICAgIC5vbihcImVycm9yXCIsIHRoaXMub25FcnJvci5iaW5kKHRoaXMpKVxuICAgICAgICAgICAgLm9uKFwiY2xvc2VcIiwgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5vbkNsb3NlKFwidHJhbnNwb3J0IGNsb3NlXCIpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUHJvYmVzIGEgdHJhbnNwb3J0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHRyYW5zcG9ydCBuYW1lXG4gICAgICogQGFwaSBwcml2YXRlXG4gICAgICovXG4gICAgcHJvYmUobmFtZSkge1xuICAgICAgICBkZWJ1ZygncHJvYmluZyB0cmFuc3BvcnQgXCIlc1wiJywgbmFtZSk7XG4gICAgICAgIGxldCB0cmFuc3BvcnQgPSB0aGlzLmNyZWF0ZVRyYW5zcG9ydChuYW1lKTtcbiAgICAgICAgbGV0IGZhaWxlZCA9IGZhbHNlO1xuICAgICAgICBTb2NrZXQucHJpb3JXZWJzb2NrZXRTdWNjZXNzID0gZmFsc2U7XG4gICAgICAgIGNvbnN0IG9uVHJhbnNwb3J0T3BlbiA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmIChmYWlsZWQpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgZGVidWcoJ3Byb2JlIHRyYW5zcG9ydCBcIiVzXCIgb3BlbmVkJywgbmFtZSk7XG4gICAgICAgICAgICB0cmFuc3BvcnQuc2VuZChbeyB0eXBlOiBcInBpbmdcIiwgZGF0YTogXCJwcm9iZVwiIH1dKTtcbiAgICAgICAgICAgIHRyYW5zcG9ydC5vbmNlKFwicGFja2V0XCIsIG1zZyA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGZhaWxlZClcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIGlmIChcInBvbmdcIiA9PT0gbXNnLnR5cGUgJiYgXCJwcm9iZVwiID09PSBtc2cuZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICBkZWJ1ZygncHJvYmUgdHJhbnNwb3J0IFwiJXNcIiBwb25nJywgbmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXBncmFkaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0UmVzZXJ2ZWQoXCJ1cGdyYWRpbmdcIiwgdHJhbnNwb3J0KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0cmFuc3BvcnQpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIFNvY2tldC5wcmlvcldlYnNvY2tldFN1Y2Nlc3MgPSBcIndlYnNvY2tldFwiID09PSB0cmFuc3BvcnQubmFtZTtcbiAgICAgICAgICAgICAgICAgICAgZGVidWcoJ3BhdXNpbmcgY3VycmVudCB0cmFuc3BvcnQgXCIlc1wiJywgdGhpcy50cmFuc3BvcnQubmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudHJhbnNwb3J0LnBhdXNlKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmYWlsZWQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFwiY2xvc2VkXCIgPT09IHRoaXMucmVhZHlTdGF0ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWJ1ZyhcImNoYW5naW5nIHRyYW5zcG9ydCBhbmQgc2VuZGluZyB1cGdyYWRlIHBhY2tldFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFudXAoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0VHJhbnNwb3J0KHRyYW5zcG9ydCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc3BvcnQuc2VuZChbeyB0eXBlOiBcInVwZ3JhZGVcIiB9XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXRSZXNlcnZlZChcInVwZ3JhZGVcIiwgdHJhbnNwb3J0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zcG9ydCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZ3JhZGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5mbHVzaCgpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGRlYnVnKCdwcm9iZSB0cmFuc3BvcnQgXCIlc1wiIGZhaWxlZCcsIG5hbWUpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBlcnIgPSBuZXcgRXJyb3IoXCJwcm9iZSBlcnJvclwiKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgICAgICBlcnIudHJhbnNwb3J0ID0gdHJhbnNwb3J0Lm5hbWU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdFJlc2VydmVkKFwidXBncmFkZUVycm9yXCIsIGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIGZ1bmN0aW9uIGZyZWV6ZVRyYW5zcG9ydCgpIHtcbiAgICAgICAgICAgIGlmIChmYWlsZWQpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgLy8gQW55IGNhbGxiYWNrIGNhbGxlZCBieSB0cmFuc3BvcnQgc2hvdWxkIGJlIGlnbm9yZWQgc2luY2Ugbm93XG4gICAgICAgICAgICBmYWlsZWQgPSB0cnVlO1xuICAgICAgICAgICAgY2xlYW51cCgpO1xuICAgICAgICAgICAgdHJhbnNwb3J0LmNsb3NlKCk7XG4gICAgICAgICAgICB0cmFuc3BvcnQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIC8vIEhhbmRsZSBhbnkgZXJyb3IgdGhhdCBoYXBwZW5zIHdoaWxlIHByb2JpbmdcbiAgICAgICAgY29uc3Qgb25lcnJvciA9IGVyciA9PiB7XG4gICAgICAgICAgICBjb25zdCBlcnJvciA9IG5ldyBFcnJvcihcInByb2JlIGVycm9yOiBcIiArIGVycik7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICBlcnJvci50cmFuc3BvcnQgPSB0cmFuc3BvcnQubmFtZTtcbiAgICAgICAgICAgIGZyZWV6ZVRyYW5zcG9ydCgpO1xuICAgICAgICAgICAgZGVidWcoJ3Byb2JlIHRyYW5zcG9ydCBcIiVzXCIgZmFpbGVkIGJlY2F1c2Ugb2YgZXJyb3I6ICVzJywgbmFtZSwgZXJyKTtcbiAgICAgICAgICAgIHRoaXMuZW1pdFJlc2VydmVkKFwidXBncmFkZUVycm9yXCIsIGVycm9yKTtcbiAgICAgICAgfTtcbiAgICAgICAgZnVuY3Rpb24gb25UcmFuc3BvcnRDbG9zZSgpIHtcbiAgICAgICAgICAgIG9uZXJyb3IoXCJ0cmFuc3BvcnQgY2xvc2VkXCIpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFdoZW4gdGhlIHNvY2tldCBpcyBjbG9zZWQgd2hpbGUgd2UncmUgcHJvYmluZ1xuICAgICAgICBmdW5jdGlvbiBvbmNsb3NlKCkge1xuICAgICAgICAgICAgb25lcnJvcihcInNvY2tldCBjbG9zZWRcIik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gV2hlbiB0aGUgc29ja2V0IGlzIHVwZ3JhZGVkIHdoaWxlIHdlJ3JlIHByb2JpbmdcbiAgICAgICAgZnVuY3Rpb24gb251cGdyYWRlKHRvKSB7XG4gICAgICAgICAgICBpZiAodHJhbnNwb3J0ICYmIHRvLm5hbWUgIT09IHRyYW5zcG9ydC5uYW1lKSB7XG4gICAgICAgICAgICAgICAgZGVidWcoJ1wiJXNcIiB3b3JrcyAtIGFib3J0aW5nIFwiJXNcIicsIHRvLm5hbWUsIHRyYW5zcG9ydC5uYW1lKTtcbiAgICAgICAgICAgICAgICBmcmVlemVUcmFuc3BvcnQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBSZW1vdmUgYWxsIGxpc3RlbmVycyBvbiB0aGUgdHJhbnNwb3J0IGFuZCBvbiBzZWxmXG4gICAgICAgIGNvbnN0IGNsZWFudXAgPSAoKSA9PiB7XG4gICAgICAgICAgICB0cmFuc3BvcnQucmVtb3ZlTGlzdGVuZXIoXCJvcGVuXCIsIG9uVHJhbnNwb3J0T3Blbik7XG4gICAgICAgICAgICB0cmFuc3BvcnQucmVtb3ZlTGlzdGVuZXIoXCJlcnJvclwiLCBvbmVycm9yKTtcbiAgICAgICAgICAgIHRyYW5zcG9ydC5yZW1vdmVMaXN0ZW5lcihcImNsb3NlXCIsIG9uVHJhbnNwb3J0Q2xvc2UpO1xuICAgICAgICAgICAgdGhpcy5vZmYoXCJjbG9zZVwiLCBvbmNsb3NlKTtcbiAgICAgICAgICAgIHRoaXMub2ZmKFwidXBncmFkaW5nXCIsIG9udXBncmFkZSk7XG4gICAgICAgIH07XG4gICAgICAgIHRyYW5zcG9ydC5vbmNlKFwib3BlblwiLCBvblRyYW5zcG9ydE9wZW4pO1xuICAgICAgICB0cmFuc3BvcnQub25jZShcImVycm9yXCIsIG9uZXJyb3IpO1xuICAgICAgICB0cmFuc3BvcnQub25jZShcImNsb3NlXCIsIG9uVHJhbnNwb3J0Q2xvc2UpO1xuICAgICAgICB0aGlzLm9uY2UoXCJjbG9zZVwiLCBvbmNsb3NlKTtcbiAgICAgICAgdGhpcy5vbmNlKFwidXBncmFkaW5nXCIsIG9udXBncmFkZSk7XG4gICAgICAgIHRyYW5zcG9ydC5vcGVuKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxlZCB3aGVuIGNvbm5lY3Rpb24gaXMgZGVlbWVkIG9wZW4uXG4gICAgICpcbiAgICAgKiBAYXBpIHByaXZhdGVcbiAgICAgKi9cbiAgICBvbk9wZW4oKSB7XG4gICAgICAgIGRlYnVnKFwic29ja2V0IG9wZW5cIik7XG4gICAgICAgIHRoaXMucmVhZHlTdGF0ZSA9IFwib3BlblwiO1xuICAgICAgICBTb2NrZXQucHJpb3JXZWJzb2NrZXRTdWNjZXNzID0gXCJ3ZWJzb2NrZXRcIiA9PT0gdGhpcy50cmFuc3BvcnQubmFtZTtcbiAgICAgICAgdGhpcy5lbWl0UmVzZXJ2ZWQoXCJvcGVuXCIpO1xuICAgICAgICB0aGlzLmZsdXNoKCk7XG4gICAgICAgIC8vIHdlIGNoZWNrIGZvciBgcmVhZHlTdGF0ZWAgaW4gY2FzZSBhbiBgb3BlbmBcbiAgICAgICAgLy8gbGlzdGVuZXIgYWxyZWFkeSBjbG9zZWQgdGhlIHNvY2tldFxuICAgICAgICBpZiAoXCJvcGVuXCIgPT09IHRoaXMucmVhZHlTdGF0ZSAmJlxuICAgICAgICAgICAgdGhpcy5vcHRzLnVwZ3JhZGUgJiZcbiAgICAgICAgICAgIHRoaXMudHJhbnNwb3J0LnBhdXNlKSB7XG4gICAgICAgICAgICBkZWJ1ZyhcInN0YXJ0aW5nIHVwZ3JhZGUgcHJvYmVzXCIpO1xuICAgICAgICAgICAgbGV0IGkgPSAwO1xuICAgICAgICAgICAgY29uc3QgbCA9IHRoaXMudXBncmFkZXMubGVuZ3RoO1xuICAgICAgICAgICAgZm9yICg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgICAgICB0aGlzLnByb2JlKHRoaXMudXBncmFkZXNbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEhhbmRsZXMgYSBwYWNrZXQuXG4gICAgICpcbiAgICAgKiBAYXBpIHByaXZhdGVcbiAgICAgKi9cbiAgICBvblBhY2tldChwYWNrZXQpIHtcbiAgICAgICAgaWYgKFwib3BlbmluZ1wiID09PSB0aGlzLnJlYWR5U3RhdGUgfHxcbiAgICAgICAgICAgIFwib3BlblwiID09PSB0aGlzLnJlYWR5U3RhdGUgfHxcbiAgICAgICAgICAgIFwiY2xvc2luZ1wiID09PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICAgICAgICAgIGRlYnVnKCdzb2NrZXQgcmVjZWl2ZTogdHlwZSBcIiVzXCIsIGRhdGEgXCIlc1wiJywgcGFja2V0LnR5cGUsIHBhY2tldC5kYXRhKTtcbiAgICAgICAgICAgIHRoaXMuZW1pdFJlc2VydmVkKFwicGFja2V0XCIsIHBhY2tldCk7XG4gICAgICAgICAgICAvLyBTb2NrZXQgaXMgbGl2ZSAtIGFueSBwYWNrZXQgY291bnRzXG4gICAgICAgICAgICB0aGlzLmVtaXRSZXNlcnZlZChcImhlYXJ0YmVhdFwiKTtcbiAgICAgICAgICAgIHN3aXRjaCAocGFja2V0LnR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlIFwib3BlblwiOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLm9uSGFuZHNoYWtlKEpTT04ucGFyc2UocGFja2V0LmRhdGEpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcInBpbmdcIjpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXNldFBpbmdUaW1lb3V0KCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VuZFBhY2tldChcInBvbmdcIik7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdFJlc2VydmVkKFwicGluZ1wiKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0UmVzZXJ2ZWQoXCJwb25nXCIpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwiZXJyb3JcIjpcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZXJyID0gbmV3IEVycm9yKFwic2VydmVyIGVycm9yXCIpO1xuICAgICAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICAgICAgICAgIGVyci5jb2RlID0gcGFja2V0LmRhdGE7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMub25FcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwibWVzc2FnZVwiOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXRSZXNlcnZlZChcImRhdGFcIiwgcGFja2V0LmRhdGEpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXRSZXNlcnZlZChcIm1lc3NhZ2VcIiwgcGFja2V0LmRhdGEpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGRlYnVnKCdwYWNrZXQgcmVjZWl2ZWQgd2l0aCBzb2NrZXQgcmVhZHlTdGF0ZSBcIiVzXCInLCB0aGlzLnJlYWR5U3RhdGUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxlZCB1cG9uIGhhbmRzaGFrZSBjb21wbGV0aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGEgLSBoYW5kc2hha2Ugb2JqXG4gICAgICogQGFwaSBwcml2YXRlXG4gICAgICovXG4gICAgb25IYW5kc2hha2UoZGF0YSkge1xuICAgICAgICB0aGlzLmVtaXRSZXNlcnZlZChcImhhbmRzaGFrZVwiLCBkYXRhKTtcbiAgICAgICAgdGhpcy5pZCA9IGRhdGEuc2lkO1xuICAgICAgICB0aGlzLnRyYW5zcG9ydC5xdWVyeS5zaWQgPSBkYXRhLnNpZDtcbiAgICAgICAgdGhpcy51cGdyYWRlcyA9IHRoaXMuZmlsdGVyVXBncmFkZXMoZGF0YS51cGdyYWRlcyk7XG4gICAgICAgIHRoaXMucGluZ0ludGVydmFsID0gZGF0YS5waW5nSW50ZXJ2YWw7XG4gICAgICAgIHRoaXMucGluZ1RpbWVvdXQgPSBkYXRhLnBpbmdUaW1lb3V0O1xuICAgICAgICB0aGlzLm9uT3BlbigpO1xuICAgICAgICAvLyBJbiBjYXNlIG9wZW4gaGFuZGxlciBjbG9zZXMgc29ja2V0XG4gICAgICAgIGlmIChcImNsb3NlZFwiID09PSB0aGlzLnJlYWR5U3RhdGUpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHRoaXMucmVzZXRQaW5nVGltZW91dCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIGFuZCByZXNldHMgcGluZyB0aW1lb3V0IHRpbWVyIGJhc2VkIG9uIHNlcnZlciBwaW5ncy5cbiAgICAgKlxuICAgICAqIEBhcGkgcHJpdmF0ZVxuICAgICAqL1xuICAgIHJlc2V0UGluZ1RpbWVvdXQoKSB7XG4gICAgICAgIHRoaXMuY2xlYXJUaW1lb3V0Rm4odGhpcy5waW5nVGltZW91dFRpbWVyKTtcbiAgICAgICAgdGhpcy5waW5nVGltZW91dFRpbWVyID0gdGhpcy5zZXRUaW1lb3V0Rm4oKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5vbkNsb3NlKFwicGluZyB0aW1lb3V0XCIpO1xuICAgICAgICB9LCB0aGlzLnBpbmdJbnRlcnZhbCArIHRoaXMucGluZ1RpbWVvdXQpO1xuICAgICAgICBpZiAodGhpcy5vcHRzLmF1dG9VbnJlZikge1xuICAgICAgICAgICAgdGhpcy5waW5nVGltZW91dFRpbWVyLnVucmVmKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsbGVkIG9uIGBkcmFpbmAgZXZlbnRcbiAgICAgKlxuICAgICAqIEBhcGkgcHJpdmF0ZVxuICAgICAqL1xuICAgIG9uRHJhaW4oKSB7XG4gICAgICAgIHRoaXMud3JpdGVCdWZmZXIuc3BsaWNlKDAsIHRoaXMucHJldkJ1ZmZlckxlbik7XG4gICAgICAgIC8vIHNldHRpbmcgcHJldkJ1ZmZlckxlbiA9IDAgaXMgdmVyeSBpbXBvcnRhbnRcbiAgICAgICAgLy8gZm9yIGV4YW1wbGUsIHdoZW4gdXBncmFkaW5nLCB1cGdyYWRlIHBhY2tldCBpcyBzZW50IG92ZXIsXG4gICAgICAgIC8vIGFuZCBhIG5vbnplcm8gcHJldkJ1ZmZlckxlbiBjb3VsZCBjYXVzZSBwcm9ibGVtcyBvbiBgZHJhaW5gXG4gICAgICAgIHRoaXMucHJldkJ1ZmZlckxlbiA9IDA7XG4gICAgICAgIGlmICgwID09PSB0aGlzLndyaXRlQnVmZmVyLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5lbWl0UmVzZXJ2ZWQoXCJkcmFpblwiKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZmx1c2goKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBGbHVzaCB3cml0ZSBidWZmZXJzLlxuICAgICAqXG4gICAgICogQGFwaSBwcml2YXRlXG4gICAgICovXG4gICAgZmx1c2goKSB7XG4gICAgICAgIGlmIChcImNsb3NlZFwiICE9PSB0aGlzLnJlYWR5U3RhdGUgJiZcbiAgICAgICAgICAgIHRoaXMudHJhbnNwb3J0LndyaXRhYmxlICYmXG4gICAgICAgICAgICAhdGhpcy51cGdyYWRpbmcgJiZcbiAgICAgICAgICAgIHRoaXMud3JpdGVCdWZmZXIubGVuZ3RoKSB7XG4gICAgICAgICAgICBkZWJ1ZyhcImZsdXNoaW5nICVkIHBhY2tldHMgaW4gc29ja2V0XCIsIHRoaXMud3JpdGVCdWZmZXIubGVuZ3RoKTtcbiAgICAgICAgICAgIHRoaXMudHJhbnNwb3J0LnNlbmQodGhpcy53cml0ZUJ1ZmZlcik7XG4gICAgICAgICAgICAvLyBrZWVwIHRyYWNrIG9mIGN1cnJlbnQgbGVuZ3RoIG9mIHdyaXRlQnVmZmVyXG4gICAgICAgICAgICAvLyBzcGxpY2Ugd3JpdGVCdWZmZXIgYW5kIGNhbGxiYWNrQnVmZmVyIG9uIGBkcmFpbmBcbiAgICAgICAgICAgIHRoaXMucHJldkJ1ZmZlckxlbiA9IHRoaXMud3JpdGVCdWZmZXIubGVuZ3RoO1xuICAgICAgICAgICAgdGhpcy5lbWl0UmVzZXJ2ZWQoXCJmbHVzaFwiKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZW5kcyBhIG1lc3NhZ2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucy5cbiAgICAgKiBAcmV0dXJuIHtTb2NrZXR9IGZvciBjaGFpbmluZy5cbiAgICAgKiBAYXBpIHB1YmxpY1xuICAgICAqL1xuICAgIHdyaXRlKG1zZywgb3B0aW9ucywgZm4pIHtcbiAgICAgICAgdGhpcy5zZW5kUGFja2V0KFwibWVzc2FnZVwiLCBtc2csIG9wdGlvbnMsIGZuKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHNlbmQobXNnLCBvcHRpb25zLCBmbikge1xuICAgICAgICB0aGlzLnNlbmRQYWNrZXQoXCJtZXNzYWdlXCIsIG1zZywgb3B0aW9ucywgZm4pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2VuZHMgYSBwYWNrZXQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcGFja2V0IHR5cGUuXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGRhdGEuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgZnVuY3Rpb24uXG4gICAgICogQGFwaSBwcml2YXRlXG4gICAgICovXG4gICAgc2VuZFBhY2tldCh0eXBlLCBkYXRhLCBvcHRpb25zLCBmbikge1xuICAgICAgICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgZGF0YSkge1xuICAgICAgICAgICAgZm4gPSBkYXRhO1xuICAgICAgICAgICAgZGF0YSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2Ygb3B0aW9ucykge1xuICAgICAgICAgICAgZm4gPSBvcHRpb25zO1xuICAgICAgICAgICAgb3B0aW9ucyA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFwiY2xvc2luZ1wiID09PSB0aGlzLnJlYWR5U3RhdGUgfHwgXCJjbG9zZWRcIiA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICAgIG9wdGlvbnMuY29tcHJlc3MgPSBmYWxzZSAhPT0gb3B0aW9ucy5jb21wcmVzcztcbiAgICAgICAgY29uc3QgcGFja2V0ID0ge1xuICAgICAgICAgICAgdHlwZTogdHlwZSxcbiAgICAgICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgICAgICBvcHRpb25zOiBvcHRpb25zXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuZW1pdFJlc2VydmVkKFwicGFja2V0Q3JlYXRlXCIsIHBhY2tldCk7XG4gICAgICAgIHRoaXMud3JpdGVCdWZmZXIucHVzaChwYWNrZXQpO1xuICAgICAgICBpZiAoZm4pXG4gICAgICAgICAgICB0aGlzLm9uY2UoXCJmbHVzaFwiLCBmbik7XG4gICAgICAgIHRoaXMuZmx1c2goKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2xvc2VzIHRoZSBjb25uZWN0aW9uLlxuICAgICAqXG4gICAgICogQGFwaSBwdWJsaWNcbiAgICAgKi9cbiAgICBjbG9zZSgpIHtcbiAgICAgICAgY29uc3QgY2xvc2UgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLm9uQ2xvc2UoXCJmb3JjZWQgY2xvc2VcIik7XG4gICAgICAgICAgICBkZWJ1ZyhcInNvY2tldCBjbG9zaW5nIC0gdGVsbGluZyB0cmFuc3BvcnQgdG8gY2xvc2VcIik7XG4gICAgICAgICAgICB0aGlzLnRyYW5zcG9ydC5jbG9zZSgpO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBjbGVhbnVwQW5kQ2xvc2UgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLm9mZihcInVwZ3JhZGVcIiwgY2xlYW51cEFuZENsb3NlKTtcbiAgICAgICAgICAgIHRoaXMub2ZmKFwidXBncmFkZUVycm9yXCIsIGNsZWFudXBBbmRDbG9zZSk7XG4gICAgICAgICAgICBjbG9zZSgpO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCB3YWl0Rm9yVXBncmFkZSA9ICgpID0+IHtcbiAgICAgICAgICAgIC8vIHdhaXQgZm9yIHVwZ3JhZGUgdG8gZmluaXNoIHNpbmNlIHdlIGNhbid0IHNlbmQgcGFja2V0cyB3aGlsZSBwYXVzaW5nIGEgdHJhbnNwb3J0XG4gICAgICAgICAgICB0aGlzLm9uY2UoXCJ1cGdyYWRlXCIsIGNsZWFudXBBbmRDbG9zZSk7XG4gICAgICAgICAgICB0aGlzLm9uY2UoXCJ1cGdyYWRlRXJyb3JcIiwgY2xlYW51cEFuZENsb3NlKTtcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKFwib3BlbmluZ1wiID09PSB0aGlzLnJlYWR5U3RhdGUgfHwgXCJvcGVuXCIgPT09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgICAgICAgICAgdGhpcy5yZWFkeVN0YXRlID0gXCJjbG9zaW5nXCI7XG4gICAgICAgICAgICBpZiAodGhpcy53cml0ZUJ1ZmZlci5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9uY2UoXCJkcmFpblwiLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnVwZ3JhZGluZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2FpdEZvclVwZ3JhZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMudXBncmFkaW5nKSB7XG4gICAgICAgICAgICAgICAgd2FpdEZvclVwZ3JhZGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNsb3NlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxlZCB1cG9uIHRyYW5zcG9ydCBlcnJvclxuICAgICAqXG4gICAgICogQGFwaSBwcml2YXRlXG4gICAgICovXG4gICAgb25FcnJvcihlcnIpIHtcbiAgICAgICAgZGVidWcoXCJzb2NrZXQgZXJyb3IgJWpcIiwgZXJyKTtcbiAgICAgICAgU29ja2V0LnByaW9yV2Vic29ja2V0U3VjY2VzcyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmVtaXRSZXNlcnZlZChcImVycm9yXCIsIGVycik7XG4gICAgICAgIHRoaXMub25DbG9zZShcInRyYW5zcG9ydCBlcnJvclwiLCBlcnIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgdXBvbiB0cmFuc3BvcnQgY2xvc2UuXG4gICAgICpcbiAgICAgKiBAYXBpIHByaXZhdGVcbiAgICAgKi9cbiAgICBvbkNsb3NlKHJlYXNvbiwgZGVzYykge1xuICAgICAgICBpZiAoXCJvcGVuaW5nXCIgPT09IHRoaXMucmVhZHlTdGF0ZSB8fFxuICAgICAgICAgICAgXCJvcGVuXCIgPT09IHRoaXMucmVhZHlTdGF0ZSB8fFxuICAgICAgICAgICAgXCJjbG9zaW5nXCIgPT09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgICAgICAgICAgZGVidWcoJ3NvY2tldCBjbG9zZSB3aXRoIHJlYXNvbjogXCIlc1wiJywgcmVhc29uKTtcbiAgICAgICAgICAgIC8vIGNsZWFyIHRpbWVyc1xuICAgICAgICAgICAgdGhpcy5jbGVhclRpbWVvdXRGbih0aGlzLnBpbmdUaW1lb3V0VGltZXIpO1xuICAgICAgICAgICAgLy8gc3RvcCBldmVudCBmcm9tIGZpcmluZyBhZ2FpbiBmb3IgdHJhbnNwb3J0XG4gICAgICAgICAgICB0aGlzLnRyYW5zcG9ydC5yZW1vdmVBbGxMaXN0ZW5lcnMoXCJjbG9zZVwiKTtcbiAgICAgICAgICAgIC8vIGVuc3VyZSB0cmFuc3BvcnQgd29uJ3Qgc3RheSBvcGVuXG4gICAgICAgICAgICB0aGlzLnRyYW5zcG9ydC5jbG9zZSgpO1xuICAgICAgICAgICAgLy8gaWdub3JlIGZ1cnRoZXIgdHJhbnNwb3J0IGNvbW11bmljYXRpb25cbiAgICAgICAgICAgIHRoaXMudHJhbnNwb3J0LnJlbW92ZUFsbExpc3RlbmVycygpO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiByZW1vdmVFdmVudExpc3RlbmVyID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICByZW1vdmVFdmVudExpc3RlbmVyKFwib2ZmbGluZVwiLCB0aGlzLm9mZmxpbmVFdmVudExpc3RlbmVyLCBmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBzZXQgcmVhZHkgc3RhdGVcbiAgICAgICAgICAgIHRoaXMucmVhZHlTdGF0ZSA9IFwiY2xvc2VkXCI7XG4gICAgICAgICAgICAvLyBjbGVhciBzZXNzaW9uIGlkXG4gICAgICAgICAgICB0aGlzLmlkID0gbnVsbDtcbiAgICAgICAgICAgIC8vIGVtaXQgY2xvc2UgZXZlbnRcbiAgICAgICAgICAgIHRoaXMuZW1pdFJlc2VydmVkKFwiY2xvc2VcIiwgcmVhc29uLCBkZXNjKTtcbiAgICAgICAgICAgIC8vIGNsZWFuIGJ1ZmZlcnMgYWZ0ZXIsIHNvIHVzZXJzIGNhbiBzdGlsbFxuICAgICAgICAgICAgLy8gZ3JhYiB0aGUgYnVmZmVycyBvbiBgY2xvc2VgIGV2ZW50XG4gICAgICAgICAgICB0aGlzLndyaXRlQnVmZmVyID0gW107XG4gICAgICAgICAgICB0aGlzLnByZXZCdWZmZXJMZW4gPSAwO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEZpbHRlcnMgdXBncmFkZXMsIHJldHVybmluZyBvbmx5IHRob3NlIG1hdGNoaW5nIGNsaWVudCB0cmFuc3BvcnRzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtBcnJheX0gc2VydmVyIHVwZ3JhZGVzXG4gICAgICogQGFwaSBwcml2YXRlXG4gICAgICpcbiAgICAgKi9cbiAgICBmaWx0ZXJVcGdyYWRlcyh1cGdyYWRlcykge1xuICAgICAgICBjb25zdCBmaWx0ZXJlZFVwZ3JhZGVzID0gW107XG4gICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgY29uc3QgaiA9IHVwZ3JhZGVzLmxlbmd0aDtcbiAgICAgICAgZm9yICg7IGkgPCBqOyBpKyspIHtcbiAgICAgICAgICAgIGlmICh+dGhpcy50cmFuc3BvcnRzLmluZGV4T2YodXBncmFkZXNbaV0pKVxuICAgICAgICAgICAgICAgIGZpbHRlcmVkVXBncmFkZXMucHVzaCh1cGdyYWRlc1tpXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZpbHRlcmVkVXBncmFkZXM7XG4gICAgfVxufVxuZXhwb3J0cy5Tb2NrZXQgPSBTb2NrZXQ7XG5Tb2NrZXQucHJvdG9jb2wgPSBlbmdpbmVfaW9fcGFyc2VyXzEucHJvdG9jb2w7XG5mdW5jdGlvbiBjbG9uZShvYmopIHtcbiAgICBjb25zdCBvID0ge307XG4gICAgZm9yIChsZXQgaSBpbiBvYmopIHtcbiAgICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShpKSkge1xuICAgICAgICAgICAgb1tpXSA9IG9ialtpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbztcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5UcmFuc3BvcnQgPSB2b2lkIDA7XG5jb25zdCBlbmdpbmVfaW9fcGFyc2VyXzEgPSByZXF1aXJlKFwiZW5naW5lLmlvLXBhcnNlclwiKTtcbmNvbnN0IGNvbXBvbmVudF9lbWl0dGVyXzEgPSByZXF1aXJlKFwiQHNvY2tldC5pby9jb21wb25lbnQtZW1pdHRlclwiKTtcbmNvbnN0IHV0aWxfanNfMSA9IHJlcXVpcmUoXCIuL3V0aWwuanNcIik7XG5jb25zdCBkZWJ1Z18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJkZWJ1Z1wiKSk7IC8vIGRlYnVnKClcbmNvbnN0IGRlYnVnID0gKDAsIGRlYnVnXzEuZGVmYXVsdCkoXCJlbmdpbmUuaW8tY2xpZW50OnRyYW5zcG9ydFwiKTsgLy8gZGVidWcoKVxuY2xhc3MgVHJhbnNwb3J0IGV4dGVuZHMgY29tcG9uZW50X2VtaXR0ZXJfMS5FbWl0dGVyIHtcbiAgICAvKipcbiAgICAgKiBUcmFuc3BvcnQgYWJzdHJhY3QgY29uc3RydWN0b3IuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucy5cbiAgICAgKiBAYXBpIHByaXZhdGVcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMud3JpdGFibGUgPSBmYWxzZTtcbiAgICAgICAgKDAsIHV0aWxfanNfMS5pbnN0YWxsVGltZXJGdW5jdGlvbnMpKHRoaXMsIG9wdHMpO1xuICAgICAgICB0aGlzLm9wdHMgPSBvcHRzO1xuICAgICAgICB0aGlzLnF1ZXJ5ID0gb3B0cy5xdWVyeTtcbiAgICAgICAgdGhpcy5yZWFkeVN0YXRlID0gXCJcIjtcbiAgICAgICAgdGhpcy5zb2NrZXQgPSBvcHRzLnNvY2tldDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRW1pdHMgYW4gZXJyb3IuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gICAgICogQHJldHVybiB7VHJhbnNwb3J0fSBmb3IgY2hhaW5pbmdcbiAgICAgKiBAYXBpIHByb3RlY3RlZFxuICAgICAqL1xuICAgIG9uRXJyb3IobXNnLCBkZXNjKSB7XG4gICAgICAgIGNvbnN0IGVyciA9IG5ldyBFcnJvcihtc2cpO1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGVyci50eXBlID0gXCJUcmFuc3BvcnRFcnJvclwiO1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGVyci5kZXNjcmlwdGlvbiA9IGRlc2M7XG4gICAgICAgIHN1cGVyLmVtaXQoXCJlcnJvclwiLCBlcnIpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogT3BlbnMgdGhlIHRyYW5zcG9ydC5cbiAgICAgKlxuICAgICAqIEBhcGkgcHVibGljXG4gICAgICovXG4gICAgb3BlbigpIHtcbiAgICAgICAgaWYgKFwiY2xvc2VkXCIgPT09IHRoaXMucmVhZHlTdGF0ZSB8fCBcIlwiID09PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICAgICAgICAgIHRoaXMucmVhZHlTdGF0ZSA9IFwib3BlbmluZ1wiO1xuICAgICAgICAgICAgdGhpcy5kb09wZW4oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2xvc2VzIHRoZSB0cmFuc3BvcnQuXG4gICAgICpcbiAgICAgKiBAYXBpIHB1YmxpY1xuICAgICAqL1xuICAgIGNsb3NlKCkge1xuICAgICAgICBpZiAoXCJvcGVuaW5nXCIgPT09IHRoaXMucmVhZHlTdGF0ZSB8fCBcIm9wZW5cIiA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgICAgICAgICB0aGlzLmRvQ2xvc2UoKTtcbiAgICAgICAgICAgIHRoaXMub25DbG9zZSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZW5kcyBtdWx0aXBsZSBwYWNrZXRzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtBcnJheX0gcGFja2V0c1xuICAgICAqIEBhcGkgcHVibGljXG4gICAgICovXG4gICAgc2VuZChwYWNrZXRzKSB7XG4gICAgICAgIGlmIChcIm9wZW5cIiA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgICAgICAgICB0aGlzLndyaXRlKHBhY2tldHMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gdGhpcyBtaWdodCBoYXBwZW4gaWYgdGhlIHRyYW5zcG9ydCB3YXMgc2lsZW50bHkgY2xvc2VkIGluIHRoZSBiZWZvcmV1bmxvYWQgZXZlbnQgaGFuZGxlclxuICAgICAgICAgICAgZGVidWcoXCJ0cmFuc3BvcnQgaXMgbm90IG9wZW4sIGRpc2NhcmRpbmcgcGFja2V0c1wiKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgdXBvbiBvcGVuXG4gICAgICpcbiAgICAgKiBAYXBpIHByb3RlY3RlZFxuICAgICAqL1xuICAgIG9uT3BlbigpIHtcbiAgICAgICAgdGhpcy5yZWFkeVN0YXRlID0gXCJvcGVuXCI7XG4gICAgICAgIHRoaXMud3JpdGFibGUgPSB0cnVlO1xuICAgICAgICBzdXBlci5lbWl0KFwib3BlblwiKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHdpdGggZGF0YS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBkYXRhXG4gICAgICogQGFwaSBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBvbkRhdGEoZGF0YSkge1xuICAgICAgICBjb25zdCBwYWNrZXQgPSAoMCwgZW5naW5lX2lvX3BhcnNlcl8xLmRlY29kZVBhY2tldCkoZGF0YSwgdGhpcy5zb2NrZXQuYmluYXJ5VHlwZSk7XG4gICAgICAgIHRoaXMub25QYWNrZXQocGFja2V0KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHdpdGggYSBkZWNvZGVkIHBhY2tldC5cbiAgICAgKlxuICAgICAqIEBhcGkgcHJvdGVjdGVkXG4gICAgICovXG4gICAgb25QYWNrZXQocGFja2V0KSB7XG4gICAgICAgIHN1cGVyLmVtaXQoXCJwYWNrZXRcIiwgcGFja2V0KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHVwb24gY2xvc2UuXG4gICAgICpcbiAgICAgKiBAYXBpIHByb3RlY3RlZFxuICAgICAqL1xuICAgIG9uQ2xvc2UoKSB7XG4gICAgICAgIHRoaXMucmVhZHlTdGF0ZSA9IFwiY2xvc2VkXCI7XG4gICAgICAgIHN1cGVyLmVtaXQoXCJjbG9zZVwiKTtcbiAgICB9XG59XG5leHBvcnRzLlRyYW5zcG9ydCA9IFRyYW5zcG9ydDtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy50cmFuc3BvcnRzID0gdm9pZCAwO1xuY29uc3QgcG9sbGluZ194aHJfanNfMSA9IHJlcXVpcmUoXCIuL3BvbGxpbmcteGhyLmpzXCIpO1xuY29uc3Qgd2Vic29ja2V0X2pzXzEgPSByZXF1aXJlKFwiLi93ZWJzb2NrZXQuanNcIik7XG5leHBvcnRzLnRyYW5zcG9ydHMgPSB7XG4gICAgd2Vic29ja2V0OiB3ZWJzb2NrZXRfanNfMS5XUyxcbiAgICBwb2xsaW5nOiBwb2xsaW5nX3hocl9qc18xLlhIUlxufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuLyogZ2xvYmFsIGF0dGFjaEV2ZW50ICovXG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlJlcXVlc3QgPSBleHBvcnRzLlhIUiA9IHZvaWQgMDtcbmNvbnN0IHhtbGh0dHByZXF1ZXN0X2pzXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4veG1saHR0cHJlcXVlc3QuanNcIikpO1xuY29uc3QgZGVidWdfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiZGVidWdcIikpOyAvLyBkZWJ1ZygpXG5jb25zdCBnbG9iYWxUaGlzX2pzXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4uL2dsb2JhbFRoaXMuanNcIikpO1xuY29uc3QgdXRpbF9qc18xID0gcmVxdWlyZShcIi4uL3V0aWwuanNcIik7XG5jb25zdCBjb21wb25lbnRfZW1pdHRlcl8xID0gcmVxdWlyZShcIkBzb2NrZXQuaW8vY29tcG9uZW50LWVtaXR0ZXJcIik7XG5jb25zdCBwb2xsaW5nX2pzXzEgPSByZXF1aXJlKFwiLi9wb2xsaW5nLmpzXCIpO1xuY29uc3QgZGVidWcgPSAoMCwgZGVidWdfMS5kZWZhdWx0KShcImVuZ2luZS5pby1jbGllbnQ6cG9sbGluZy14aHJcIik7IC8vIGRlYnVnKClcbi8qKlxuICogRW1wdHkgZnVuY3Rpb25cbiAqL1xuZnVuY3Rpb24gZW1wdHkoKSB7IH1cbmNvbnN0IGhhc1hIUjIgPSAoZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IHhociA9IG5ldyB4bWxodHRwcmVxdWVzdF9qc18xLmRlZmF1bHQoe1xuICAgICAgICB4ZG9tYWluOiBmYWxzZVxuICAgIH0pO1xuICAgIHJldHVybiBudWxsICE9IHhoci5yZXNwb25zZVR5cGU7XG59KSgpO1xuY2xhc3MgWEhSIGV4dGVuZHMgcG9sbGluZ19qc18xLlBvbGxpbmcge1xuICAgIC8qKlxuICAgICAqIFhIUiBQb2xsaW5nIGNvbnN0cnVjdG9yLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdHNcbiAgICAgKiBAYXBpIHB1YmxpY1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIob3B0cyk7XG4gICAgICAgIGlmICh0eXBlb2YgbG9jYXRpb24gIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgIGNvbnN0IGlzU1NMID0gXCJodHRwczpcIiA9PT0gbG9jYXRpb24ucHJvdG9jb2w7XG4gICAgICAgICAgICBsZXQgcG9ydCA9IGxvY2F0aW9uLnBvcnQ7XG4gICAgICAgICAgICAvLyBzb21lIHVzZXIgYWdlbnRzIGhhdmUgZW1wdHkgYGxvY2F0aW9uLnBvcnRgXG4gICAgICAgICAgICBpZiAoIXBvcnQpIHtcbiAgICAgICAgICAgICAgICBwb3J0ID0gaXNTU0wgPyBcIjQ0M1wiIDogXCI4MFwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy54ZCA9XG4gICAgICAgICAgICAgICAgKHR5cGVvZiBsb2NhdGlvbiAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgICAgICAgICAgICAgICAgICBvcHRzLmhvc3RuYW1lICE9PSBsb2NhdGlvbi5ob3N0bmFtZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgcG9ydCAhPT0gb3B0cy5wb3J0O1xuICAgICAgICAgICAgdGhpcy54cyA9IG9wdHMuc2VjdXJlICE9PSBpc1NTTDtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICogWEhSIHN1cHBvcnRzIGJpbmFyeVxuICAgICAgICAgKi9cbiAgICAgICAgY29uc3QgZm9yY2VCYXNlNjQgPSBvcHRzICYmIG9wdHMuZm9yY2VCYXNlNjQ7XG4gICAgICAgIHRoaXMuc3VwcG9ydHNCaW5hcnkgPSBoYXNYSFIyICYmICFmb3JjZUJhc2U2NDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHJlcXVlc3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gbWV0aG9kXG4gICAgICogQGFwaSBwcml2YXRlXG4gICAgICovXG4gICAgcmVxdWVzdChvcHRzID0ge30pIHtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihvcHRzLCB7IHhkOiB0aGlzLnhkLCB4czogdGhpcy54cyB9LCB0aGlzLm9wdHMpO1xuICAgICAgICByZXR1cm4gbmV3IFJlcXVlc3QodGhpcy51cmkoKSwgb3B0cyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNlbmRzIGRhdGEuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZGF0YSB0byBzZW5kLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxlZCB1cG9uIGZsdXNoLlxuICAgICAqIEBhcGkgcHJpdmF0ZVxuICAgICAqL1xuICAgIGRvV3JpdGUoZGF0YSwgZm4pIHtcbiAgICAgICAgY29uc3QgcmVxID0gdGhpcy5yZXF1ZXN0KHtcbiAgICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICAgICAgICBkYXRhOiBkYXRhXG4gICAgICAgIH0pO1xuICAgICAgICByZXEub24oXCJzdWNjZXNzXCIsIGZuKTtcbiAgICAgICAgcmVxLm9uKFwiZXJyb3JcIiwgZXJyID0+IHtcbiAgICAgICAgICAgIHRoaXMub25FcnJvcihcInhociBwb3N0IGVycm9yXCIsIGVycik7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTdGFydHMgYSBwb2xsIGN5Y2xlLlxuICAgICAqXG4gICAgICogQGFwaSBwcml2YXRlXG4gICAgICovXG4gICAgZG9Qb2xsKCkge1xuICAgICAgICBkZWJ1ZyhcInhociBwb2xsXCIpO1xuICAgICAgICBjb25zdCByZXEgPSB0aGlzLnJlcXVlc3QoKTtcbiAgICAgICAgcmVxLm9uKFwiZGF0YVwiLCB0aGlzLm9uRGF0YS5iaW5kKHRoaXMpKTtcbiAgICAgICAgcmVxLm9uKFwiZXJyb3JcIiwgZXJyID0+IHtcbiAgICAgICAgICAgIHRoaXMub25FcnJvcihcInhociBwb2xsIGVycm9yXCIsIGVycik7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnBvbGxYaHIgPSByZXE7XG4gICAgfVxufVxuZXhwb3J0cy5YSFIgPSBYSFI7XG5jbGFzcyBSZXF1ZXN0IGV4dGVuZHMgY29tcG9uZW50X2VtaXR0ZXJfMS5FbWl0dGVyIHtcbiAgICAvKipcbiAgICAgKiBSZXF1ZXN0IGNvbnN0cnVjdG9yXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICAgICAqIEBhcGkgcHVibGljXG4gICAgICovXG4gICAgY29uc3RydWN0b3IodXJpLCBvcHRzKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgICgwLCB1dGlsX2pzXzEuaW5zdGFsbFRpbWVyRnVuY3Rpb25zKSh0aGlzLCBvcHRzKTtcbiAgICAgICAgdGhpcy5vcHRzID0gb3B0cztcbiAgICAgICAgdGhpcy5tZXRob2QgPSBvcHRzLm1ldGhvZCB8fCBcIkdFVFwiO1xuICAgICAgICB0aGlzLnVyaSA9IHVyaTtcbiAgICAgICAgdGhpcy5hc3luYyA9IGZhbHNlICE9PSBvcHRzLmFzeW5jO1xuICAgICAgICB0aGlzLmRhdGEgPSB1bmRlZmluZWQgIT09IG9wdHMuZGF0YSA/IG9wdHMuZGF0YSA6IG51bGw7XG4gICAgICAgIHRoaXMuY3JlYXRlKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgdGhlIFhIUiBvYmplY3QgYW5kIHNlbmRzIHRoZSByZXF1ZXN0LlxuICAgICAqXG4gICAgICogQGFwaSBwcml2YXRlXG4gICAgICovXG4gICAgY3JlYXRlKCkge1xuICAgICAgICBjb25zdCBvcHRzID0gKDAsIHV0aWxfanNfMS5waWNrKSh0aGlzLm9wdHMsIFwiYWdlbnRcIiwgXCJwZnhcIiwgXCJrZXlcIiwgXCJwYXNzcGhyYXNlXCIsIFwiY2VydFwiLCBcImNhXCIsIFwiY2lwaGVyc1wiLCBcInJlamVjdFVuYXV0aG9yaXplZFwiLCBcImF1dG9VbnJlZlwiKTtcbiAgICAgICAgb3B0cy54ZG9tYWluID0gISF0aGlzLm9wdHMueGQ7XG4gICAgICAgIG9wdHMueHNjaGVtZSA9ICEhdGhpcy5vcHRzLnhzO1xuICAgICAgICBjb25zdCB4aHIgPSAodGhpcy54aHIgPSBuZXcgeG1saHR0cHJlcXVlc3RfanNfMS5kZWZhdWx0KG9wdHMpKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGRlYnVnKFwieGhyIG9wZW4gJXM6ICVzXCIsIHRoaXMubWV0aG9kLCB0aGlzLnVyaSk7XG4gICAgICAgICAgICB4aHIub3Blbih0aGlzLm1ldGhvZCwgdGhpcy51cmksIHRoaXMuYXN5bmMpO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRzLmV4dHJhSGVhZGVycykge1xuICAgICAgICAgICAgICAgICAgICB4aHIuc2V0RGlzYWJsZUhlYWRlckNoZWNrICYmIHhoci5zZXREaXNhYmxlSGVhZGVyQ2hlY2sodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgaW4gdGhpcy5vcHRzLmV4dHJhSGVhZGVycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0cy5leHRyYUhlYWRlcnMuaGFzT3duUHJvcGVydHkoaSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihpLCB0aGlzLm9wdHMuZXh0cmFIZWFkZXJzW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7IH1cbiAgICAgICAgICAgIGlmIChcIlBPU1RcIiA9PT0gdGhpcy5tZXRob2QpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihcIkNvbnRlbnQtdHlwZVwiLCBcInRleHQvcGxhaW47Y2hhcnNldD1VVEYtOFwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHsgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihcIkFjY2VwdFwiLCBcIiovKlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7IH1cbiAgICAgICAgICAgIC8vIGllNiBjaGVja1xuICAgICAgICAgICAgaWYgKFwid2l0aENyZWRlbnRpYWxzXCIgaW4geGhyKSB7XG4gICAgICAgICAgICAgICAgeGhyLndpdGhDcmVkZW50aWFscyA9IHRoaXMub3B0cy53aXRoQ3JlZGVudGlhbHM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5vcHRzLnJlcXVlc3RUaW1lb3V0KSB7XG4gICAgICAgICAgICAgICAgeGhyLnRpbWVvdXQgPSB0aGlzLm9wdHMucmVxdWVzdFRpbWVvdXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICg0ICE9PSB4aHIucmVhZHlTdGF0ZSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIGlmICgyMDAgPT09IHhoci5zdGF0dXMgfHwgMTIyMyA9PT0geGhyLnN0YXR1cykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9uTG9hZCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gbWFrZSBzdXJlIHRoZSBgZXJyb3JgIGV2ZW50IGhhbmRsZXIgdGhhdCdzIHVzZXItc2V0XG4gICAgICAgICAgICAgICAgICAgIC8vIGRvZXMgbm90IHRocm93IGluIHRoZSBzYW1lIHRpY2sgYW5kIGdldHMgY2F1Z2h0IGhlcmVcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRUaW1lb3V0Rm4oKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkVycm9yKHR5cGVvZiB4aHIuc3RhdHVzID09PSBcIm51bWJlclwiID8geGhyLnN0YXR1cyA6IDApO1xuICAgICAgICAgICAgICAgICAgICB9LCAwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZGVidWcoXCJ4aHIgZGF0YSAlc1wiLCB0aGlzLmRhdGEpO1xuICAgICAgICAgICAgeGhyLnNlbmQodGhpcy5kYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgLy8gTmVlZCB0byBkZWZlciBzaW5jZSAuY3JlYXRlKCkgaXMgY2FsbGVkIGRpcmVjdGx5IGZyb20gdGhlIGNvbnN0cnVjdG9yXG4gICAgICAgICAgICAvLyBhbmQgdGh1cyB0aGUgJ2Vycm9yJyBldmVudCBjYW4gb25seSBiZSBvbmx5IGJvdW5kICphZnRlciogdGhpcyBleGNlcHRpb25cbiAgICAgICAgICAgIC8vIG9jY3Vycy4gIFRoZXJlZm9yZSwgYWxzbywgd2UgY2Fubm90IHRocm93IGhlcmUgYXQgYWxsLlxuICAgICAgICAgICAgdGhpcy5zZXRUaW1lb3V0Rm4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMub25FcnJvcihlKTtcbiAgICAgICAgICAgIH0sIDApO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgIHRoaXMuaW5kZXggPSBSZXF1ZXN0LnJlcXVlc3RzQ291bnQrKztcbiAgICAgICAgICAgIFJlcXVlc3QucmVxdWVzdHNbdGhpcy5pbmRleF0gPSB0aGlzO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxlZCB1cG9uIHN1Y2Nlc3NmdWwgcmVzcG9uc2UuXG4gICAgICpcbiAgICAgKiBAYXBpIHByaXZhdGVcbiAgICAgKi9cbiAgICBvblN1Y2Nlc3MoKSB7XG4gICAgICAgIHRoaXMuZW1pdChcInN1Y2Nlc3NcIik7XG4gICAgICAgIHRoaXMuY2xlYW51cCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgaWYgd2UgaGF2ZSBkYXRhLlxuICAgICAqXG4gICAgICogQGFwaSBwcml2YXRlXG4gICAgICovXG4gICAgb25EYXRhKGRhdGEpIHtcbiAgICAgICAgdGhpcy5lbWl0KFwiZGF0YVwiLCBkYXRhKTtcbiAgICAgICAgdGhpcy5vblN1Y2Nlc3MoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHVwb24gZXJyb3IuXG4gICAgICpcbiAgICAgKiBAYXBpIHByaXZhdGVcbiAgICAgKi9cbiAgICBvbkVycm9yKGVycikge1xuICAgICAgICB0aGlzLmVtaXQoXCJlcnJvclwiLCBlcnIpO1xuICAgICAgICB0aGlzLmNsZWFudXAodHJ1ZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENsZWFucyB1cCBob3VzZS5cbiAgICAgKlxuICAgICAqIEBhcGkgcHJpdmF0ZVxuICAgICAqL1xuICAgIGNsZWFudXAoZnJvbUVycm9yKSB7XG4gICAgICAgIGlmIChcInVuZGVmaW5lZFwiID09PSB0eXBlb2YgdGhpcy54aHIgfHwgbnVsbCA9PT0gdGhpcy54aHIpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBlbXB0eTtcbiAgICAgICAgaWYgKGZyb21FcnJvcikge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB0aGlzLnhoci5hYm9ydCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHsgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBSZXF1ZXN0LnJlcXVlc3RzW3RoaXMuaW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMueGhyID0gbnVsbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHVwb24gbG9hZC5cbiAgICAgKlxuICAgICAqIEBhcGkgcHJpdmF0ZVxuICAgICAqL1xuICAgIG9uTG9hZCgpIHtcbiAgICAgICAgY29uc3QgZGF0YSA9IHRoaXMueGhyLnJlc3BvbnNlVGV4dDtcbiAgICAgICAgaWYgKGRhdGEgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMub25EYXRhKGRhdGEpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFib3J0cyB0aGUgcmVxdWVzdC5cbiAgICAgKlxuICAgICAqIEBhcGkgcHVibGljXG4gICAgICovXG4gICAgYWJvcnQoKSB7XG4gICAgICAgIHRoaXMuY2xlYW51cCgpO1xuICAgIH1cbn1cbmV4cG9ydHMuUmVxdWVzdCA9IFJlcXVlc3Q7XG5SZXF1ZXN0LnJlcXVlc3RzQ291bnQgPSAwO1xuUmVxdWVzdC5yZXF1ZXN0cyA9IHt9O1xuLyoqXG4gKiBBYm9ydHMgcGVuZGluZyByZXF1ZXN0cyB3aGVuIHVubG9hZGluZyB0aGUgd2luZG93LiBUaGlzIGlzIG5lZWRlZCB0byBwcmV2ZW50XG4gKiBtZW1vcnkgbGVha3MgKGUuZy4gd2hlbiB1c2luZyBJRSkgYW5kIHRvIGVuc3VyZSB0aGF0IG5vIHNwdXJpb3VzIGVycm9yIGlzXG4gKiBlbWl0dGVkLlxuICovXG5pZiAodHlwZW9mIGRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGlmICh0eXBlb2YgYXR0YWNoRXZlbnQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGF0dGFjaEV2ZW50KFwib251bmxvYWRcIiwgdW5sb2FkSGFuZGxlcik7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBhZGRFdmVudExpc3RlbmVyID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgY29uc3QgdGVybWluYXRpb25FdmVudCA9IFwib25wYWdlaGlkZVwiIGluIGdsb2JhbFRoaXNfanNfMS5kZWZhdWx0ID8gXCJwYWdlaGlkZVwiIDogXCJ1bmxvYWRcIjtcbiAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcih0ZXJtaW5hdGlvbkV2ZW50LCB1bmxvYWRIYW5kbGVyLCBmYWxzZSk7XG4gICAgfVxufVxuZnVuY3Rpb24gdW5sb2FkSGFuZGxlcigpIHtcbiAgICBmb3IgKGxldCBpIGluIFJlcXVlc3QucmVxdWVzdHMpIHtcbiAgICAgICAgaWYgKFJlcXVlc3QucmVxdWVzdHMuaGFzT3duUHJvcGVydHkoaSkpIHtcbiAgICAgICAgICAgIFJlcXVlc3QucmVxdWVzdHNbaV0uYWJvcnQoKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Qb2xsaW5nID0gdm9pZCAwO1xuY29uc3QgdHJhbnNwb3J0X2pzXzEgPSByZXF1aXJlKFwiLi4vdHJhbnNwb3J0LmpzXCIpO1xuY29uc3QgZGVidWdfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiZGVidWdcIikpOyAvLyBkZWJ1ZygpXG5jb25zdCB5ZWFzdF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJ5ZWFzdFwiKSk7XG5jb25zdCBwYXJzZXFzXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcInBhcnNlcXNcIikpO1xuY29uc3QgZW5naW5lX2lvX3BhcnNlcl8xID0gcmVxdWlyZShcImVuZ2luZS5pby1wYXJzZXJcIik7XG5jb25zdCBkZWJ1ZyA9ICgwLCBkZWJ1Z18xLmRlZmF1bHQpKFwiZW5naW5lLmlvLWNsaWVudDpwb2xsaW5nXCIpOyAvLyBkZWJ1ZygpXG5jbGFzcyBQb2xsaW5nIGV4dGVuZHMgdHJhbnNwb3J0X2pzXzEuVHJhbnNwb3J0IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5wb2xsaW5nID0gZmFsc2U7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRyYW5zcG9ydCBuYW1lLlxuICAgICAqL1xuICAgIGdldCBuYW1lKCkge1xuICAgICAgICByZXR1cm4gXCJwb2xsaW5nXCI7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE9wZW5zIHRoZSBzb2NrZXQgKHRyaWdnZXJzIHBvbGxpbmcpLiBXZSB3cml0ZSBhIFBJTkcgbWVzc2FnZSB0byBkZXRlcm1pbmVcbiAgICAgKiB3aGVuIHRoZSB0cmFuc3BvcnQgaXMgb3Blbi5cbiAgICAgKlxuICAgICAqIEBhcGkgcHJpdmF0ZVxuICAgICAqL1xuICAgIGRvT3BlbigpIHtcbiAgICAgICAgdGhpcy5wb2xsKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFBhdXNlcyBwb2xsaW5nLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgdXBvbiBidWZmZXJzIGFyZSBmbHVzaGVkIGFuZCB0cmFuc3BvcnQgaXMgcGF1c2VkXG4gICAgICogQGFwaSBwcml2YXRlXG4gICAgICovXG4gICAgcGF1c2Uob25QYXVzZSkge1xuICAgICAgICB0aGlzLnJlYWR5U3RhdGUgPSBcInBhdXNpbmdcIjtcbiAgICAgICAgY29uc3QgcGF1c2UgPSAoKSA9PiB7XG4gICAgICAgICAgICBkZWJ1ZyhcInBhdXNlZFwiKTtcbiAgICAgICAgICAgIHRoaXMucmVhZHlTdGF0ZSA9IFwicGF1c2VkXCI7XG4gICAgICAgICAgICBvblBhdXNlKCk7XG4gICAgICAgIH07XG4gICAgICAgIGlmICh0aGlzLnBvbGxpbmcgfHwgIXRoaXMud3JpdGFibGUpIHtcbiAgICAgICAgICAgIGxldCB0b3RhbCA9IDA7XG4gICAgICAgICAgICBpZiAodGhpcy5wb2xsaW5nKSB7XG4gICAgICAgICAgICAgICAgZGVidWcoXCJ3ZSBhcmUgY3VycmVudGx5IHBvbGxpbmcgLSB3YWl0aW5nIHRvIHBhdXNlXCIpO1xuICAgICAgICAgICAgICAgIHRvdGFsKys7XG4gICAgICAgICAgICAgICAgdGhpcy5vbmNlKFwicG9sbENvbXBsZXRlXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVidWcoXCJwcmUtcGF1c2UgcG9sbGluZyBjb21wbGV0ZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgLS10b3RhbCB8fCBwYXVzZSgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF0aGlzLndyaXRhYmxlKSB7XG4gICAgICAgICAgICAgICAgZGVidWcoXCJ3ZSBhcmUgY3VycmVudGx5IHdyaXRpbmcgLSB3YWl0aW5nIHRvIHBhdXNlXCIpO1xuICAgICAgICAgICAgICAgIHRvdGFsKys7XG4gICAgICAgICAgICAgICAgdGhpcy5vbmNlKFwiZHJhaW5cIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBkZWJ1ZyhcInByZS1wYXVzZSB3cml0aW5nIGNvbXBsZXRlXCIpO1xuICAgICAgICAgICAgICAgICAgICAtLXRvdGFsIHx8IHBhdXNlKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBwYXVzZSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN0YXJ0cyBwb2xsaW5nIGN5Y2xlLlxuICAgICAqXG4gICAgICogQGFwaSBwdWJsaWNcbiAgICAgKi9cbiAgICBwb2xsKCkge1xuICAgICAgICBkZWJ1ZyhcInBvbGxpbmdcIik7XG4gICAgICAgIHRoaXMucG9sbGluZyA9IHRydWU7XG4gICAgICAgIHRoaXMuZG9Qb2xsKCk7XG4gICAgICAgIHRoaXMuZW1pdChcInBvbGxcIik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE92ZXJsb2FkcyBvbkRhdGEgdG8gZGV0ZWN0IHBheWxvYWRzLlxuICAgICAqXG4gICAgICogQGFwaSBwcml2YXRlXG4gICAgICovXG4gICAgb25EYXRhKGRhdGEpIHtcbiAgICAgICAgZGVidWcoXCJwb2xsaW5nIGdvdCBkYXRhICVzXCIsIGRhdGEpO1xuICAgICAgICBjb25zdCBjYWxsYmFjayA9IHBhY2tldCA9PiB7XG4gICAgICAgICAgICAvLyBpZiBpdHMgdGhlIGZpcnN0IG1lc3NhZ2Ugd2UgY29uc2lkZXIgdGhlIHRyYW5zcG9ydCBvcGVuXG4gICAgICAgICAgICBpZiAoXCJvcGVuaW5nXCIgPT09IHRoaXMucmVhZHlTdGF0ZSAmJiBwYWNrZXQudHlwZSA9PT0gXCJvcGVuXCIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9uT3BlbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gaWYgaXRzIGEgY2xvc2UgcGFja2V0LCB3ZSBjbG9zZSB0aGUgb25nb2luZyByZXF1ZXN0c1xuICAgICAgICAgICAgaWYgKFwiY2xvc2VcIiA9PT0gcGFja2V0LnR5cGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9uQ2xvc2UoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBvdGhlcndpc2UgYnlwYXNzIG9uRGF0YSBhbmQgaGFuZGxlIHRoZSBtZXNzYWdlXG4gICAgICAgICAgICB0aGlzLm9uUGFja2V0KHBhY2tldCk7XG4gICAgICAgIH07XG4gICAgICAgIC8vIGRlY29kZSBwYXlsb2FkXG4gICAgICAgICgwLCBlbmdpbmVfaW9fcGFyc2VyXzEuZGVjb2RlUGF5bG9hZCkoZGF0YSwgdGhpcy5zb2NrZXQuYmluYXJ5VHlwZSkuZm9yRWFjaChjYWxsYmFjayk7XG4gICAgICAgIC8vIGlmIGFuIGV2ZW50IGRpZCBub3QgdHJpZ2dlciBjbG9zaW5nXG4gICAgICAgIGlmIChcImNsb3NlZFwiICE9PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICAgICAgICAgIC8vIGlmIHdlIGdvdCBkYXRhIHdlJ3JlIG5vdCBwb2xsaW5nXG4gICAgICAgICAgICB0aGlzLnBvbGxpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuZW1pdChcInBvbGxDb21wbGV0ZVwiKTtcbiAgICAgICAgICAgIGlmIChcIm9wZW5cIiA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wb2xsKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBkZWJ1ZygnaWdub3JpbmcgcG9sbCAtIHRyYW5zcG9ydCBzdGF0ZSBcIiVzXCInLCB0aGlzLnJlYWR5U3RhdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEZvciBwb2xsaW5nLCBzZW5kIGEgY2xvc2UgcGFja2V0LlxuICAgICAqXG4gICAgICogQGFwaSBwcml2YXRlXG4gICAgICovXG4gICAgZG9DbG9zZSgpIHtcbiAgICAgICAgY29uc3QgY2xvc2UgPSAoKSA9PiB7XG4gICAgICAgICAgICBkZWJ1ZyhcIndyaXRpbmcgY2xvc2UgcGFja2V0XCIpO1xuICAgICAgICAgICAgdGhpcy53cml0ZShbeyB0eXBlOiBcImNsb3NlXCIgfV0pO1xuICAgICAgICB9O1xuICAgICAgICBpZiAoXCJvcGVuXCIgPT09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgICAgICAgICAgZGVidWcoXCJ0cmFuc3BvcnQgb3BlbiAtIGNsb3NpbmdcIik7XG4gICAgICAgICAgICBjbG9zZSgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gaW4gY2FzZSB3ZSdyZSB0cnlpbmcgdG8gY2xvc2Ugd2hpbGVcbiAgICAgICAgICAgIC8vIGhhbmRzaGFraW5nIGlzIGluIHByb2dyZXNzIChHSC0xNjQpXG4gICAgICAgICAgICBkZWJ1ZyhcInRyYW5zcG9ydCBub3Qgb3BlbiAtIGRlZmVycmluZyBjbG9zZVwiKTtcbiAgICAgICAgICAgIHRoaXMub25jZShcIm9wZW5cIiwgY2xvc2UpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdyaXRlcyBhIHBhY2tldHMgcGF5bG9hZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGRhdGEgcGFja2V0c1xuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGRyYWluIGNhbGxiYWNrXG4gICAgICogQGFwaSBwcml2YXRlXG4gICAgICovXG4gICAgd3JpdGUocGFja2V0cykge1xuICAgICAgICB0aGlzLndyaXRhYmxlID0gZmFsc2U7XG4gICAgICAgICgwLCBlbmdpbmVfaW9fcGFyc2VyXzEuZW5jb2RlUGF5bG9hZCkocGFja2V0cywgZGF0YSA9PiB7XG4gICAgICAgICAgICB0aGlzLmRvV3JpdGUoZGF0YSwgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMud3JpdGFibGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdChcImRyYWluXCIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZXMgdXJpIGZvciBjb25uZWN0aW9uLlxuICAgICAqXG4gICAgICogQGFwaSBwcml2YXRlXG4gICAgICovXG4gICAgdXJpKCkge1xuICAgICAgICBsZXQgcXVlcnkgPSB0aGlzLnF1ZXJ5IHx8IHt9O1xuICAgICAgICBjb25zdCBzY2hlbWEgPSB0aGlzLm9wdHMuc2VjdXJlID8gXCJodHRwc1wiIDogXCJodHRwXCI7XG4gICAgICAgIGxldCBwb3J0ID0gXCJcIjtcbiAgICAgICAgLy8gY2FjaGUgYnVzdGluZyBpcyBmb3JjZWRcbiAgICAgICAgaWYgKGZhbHNlICE9PSB0aGlzLm9wdHMudGltZXN0YW1wUmVxdWVzdHMpIHtcbiAgICAgICAgICAgIHF1ZXJ5W3RoaXMub3B0cy50aW1lc3RhbXBQYXJhbV0gPSAoMCwgeWVhc3RfMS5kZWZhdWx0KSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5zdXBwb3J0c0JpbmFyeSAmJiAhcXVlcnkuc2lkKSB7XG4gICAgICAgICAgICBxdWVyeS5iNjQgPSAxO1xuICAgICAgICB9XG4gICAgICAgIC8vIGF2b2lkIHBvcnQgaWYgZGVmYXVsdCBmb3Igc2NoZW1hXG4gICAgICAgIGlmICh0aGlzLm9wdHMucG9ydCAmJlxuICAgICAgICAgICAgKChcImh0dHBzXCIgPT09IHNjaGVtYSAmJiBOdW1iZXIodGhpcy5vcHRzLnBvcnQpICE9PSA0NDMpIHx8XG4gICAgICAgICAgICAgICAgKFwiaHR0cFwiID09PSBzY2hlbWEgJiYgTnVtYmVyKHRoaXMub3B0cy5wb3J0KSAhPT0gODApKSkge1xuICAgICAgICAgICAgcG9ydCA9IFwiOlwiICsgdGhpcy5vcHRzLnBvcnQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZW5jb2RlZFF1ZXJ5ID0gcGFyc2Vxc18xLmRlZmF1bHQuZW5jb2RlKHF1ZXJ5KTtcbiAgICAgICAgY29uc3QgaXB2NiA9IHRoaXMub3B0cy5ob3N0bmFtZS5pbmRleE9mKFwiOlwiKSAhPT0gLTE7XG4gICAgICAgIHJldHVybiAoc2NoZW1hICtcbiAgICAgICAgICAgIFwiOi8vXCIgK1xuICAgICAgICAgICAgKGlwdjYgPyBcIltcIiArIHRoaXMub3B0cy5ob3N0bmFtZSArIFwiXVwiIDogdGhpcy5vcHRzLmhvc3RuYW1lKSArXG4gICAgICAgICAgICBwb3J0ICtcbiAgICAgICAgICAgIHRoaXMub3B0cy5wYXRoICtcbiAgICAgICAgICAgIChlbmNvZGVkUXVlcnkubGVuZ3RoID8gXCI/XCIgKyBlbmNvZGVkUXVlcnkgOiBcIlwiKSk7XG4gICAgfVxufVxuZXhwb3J0cy5Qb2xsaW5nID0gUG9sbGluZztcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kZWZhdWx0QmluYXJ5VHlwZSA9IGV4cG9ydHMudXNpbmdCcm93c2VyV2ViU29ja2V0ID0gZXhwb3J0cy5XZWJTb2NrZXQgPSBleHBvcnRzLm5leHRUaWNrID0gdm9pZCAwO1xuY29uc3QgZ2xvYmFsVGhpc19qc18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuLi9nbG9iYWxUaGlzLmpzXCIpKTtcbmV4cG9ydHMubmV4dFRpY2sgPSAoKCkgPT4ge1xuICAgIGNvbnN0IGlzUHJvbWlzZUF2YWlsYWJsZSA9IHR5cGVvZiBQcm9taXNlID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFByb21pc2UucmVzb2x2ZSA9PT0gXCJmdW5jdGlvblwiO1xuICAgIGlmIChpc1Byb21pc2VBdmFpbGFibGUpIHtcbiAgICAgICAgcmV0dXJuIGNiID0+IFByb21pc2UucmVzb2x2ZSgpLnRoZW4oY2IpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIChjYiwgc2V0VGltZW91dEZuKSA9PiBzZXRUaW1lb3V0Rm4oY2IsIDApO1xuICAgIH1cbn0pKCk7XG5leHBvcnRzLldlYlNvY2tldCA9IGdsb2JhbFRoaXNfanNfMS5kZWZhdWx0LldlYlNvY2tldCB8fCBnbG9iYWxUaGlzX2pzXzEuZGVmYXVsdC5Nb3pXZWJTb2NrZXQ7XG5leHBvcnRzLnVzaW5nQnJvd3NlcldlYlNvY2tldCA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHRCaW5hcnlUeXBlID0gXCJhcnJheWJ1ZmZlclwiO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLldTID0gdm9pZCAwO1xuY29uc3QgdHJhbnNwb3J0X2pzXzEgPSByZXF1aXJlKFwiLi4vdHJhbnNwb3J0LmpzXCIpO1xuY29uc3QgcGFyc2Vxc18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJwYXJzZXFzXCIpKTtcbmNvbnN0IHllYXN0XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcInllYXN0XCIpKTtcbmNvbnN0IHV0aWxfanNfMSA9IHJlcXVpcmUoXCIuLi91dGlsLmpzXCIpO1xuY29uc3Qgd2Vic29ja2V0X2NvbnN0cnVjdG9yX2pzXzEgPSByZXF1aXJlKFwiLi93ZWJzb2NrZXQtY29uc3RydWN0b3IuanNcIik7XG5jb25zdCBkZWJ1Z18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJkZWJ1Z1wiKSk7IC8vIGRlYnVnKClcbmNvbnN0IGVuZ2luZV9pb19wYXJzZXJfMSA9IHJlcXVpcmUoXCJlbmdpbmUuaW8tcGFyc2VyXCIpO1xuY29uc3QgZGVidWcgPSAoMCwgZGVidWdfMS5kZWZhdWx0KShcImVuZ2luZS5pby1jbGllbnQ6d2Vic29ja2V0XCIpOyAvLyBkZWJ1ZygpXG4vLyBkZXRlY3QgUmVhY3ROYXRpdmUgZW52aXJvbm1lbnRcbmNvbnN0IGlzUmVhY3ROYXRpdmUgPSB0eXBlb2YgbmF2aWdhdG9yICE9PSBcInVuZGVmaW5lZFwiICYmXG4gICAgdHlwZW9mIG5hdmlnYXRvci5wcm9kdWN0ID09PSBcInN0cmluZ1wiICYmXG4gICAgbmF2aWdhdG9yLnByb2R1Y3QudG9Mb3dlckNhc2UoKSA9PT0gXCJyZWFjdG5hdGl2ZVwiO1xuY2xhc3MgV1MgZXh0ZW5kcyB0cmFuc3BvcnRfanNfMS5UcmFuc3BvcnQge1xuICAgIC8qKlxuICAgICAqIFdlYlNvY2tldCB0cmFuc3BvcnQgY29uc3RydWN0b3IuXG4gICAgICpcbiAgICAgKiBAYXBpIHtPYmplY3R9IGNvbm5lY3Rpb24gb3B0aW9uc1xuICAgICAqIEBhcGkgcHVibGljXG4gICAgICovXG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcihvcHRzKTtcbiAgICAgICAgdGhpcy5zdXBwb3J0c0JpbmFyeSA9ICFvcHRzLmZvcmNlQmFzZTY0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUcmFuc3BvcnQgbmFtZS5cbiAgICAgKlxuICAgICAqIEBhcGkgcHVibGljXG4gICAgICovXG4gICAgZ2V0IG5hbWUoKSB7XG4gICAgICAgIHJldHVybiBcIndlYnNvY2tldFwiO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBPcGVucyBzb2NrZXQuXG4gICAgICpcbiAgICAgKiBAYXBpIHByaXZhdGVcbiAgICAgKi9cbiAgICBkb09wZW4oKSB7XG4gICAgICAgIGlmICghdGhpcy5jaGVjaygpKSB7XG4gICAgICAgICAgICAvLyBsZXQgcHJvYmUgdGltZW91dFxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHVyaSA9IHRoaXMudXJpKCk7XG4gICAgICAgIGNvbnN0IHByb3RvY29scyA9IHRoaXMub3B0cy5wcm90b2NvbHM7XG4gICAgICAgIC8vIFJlYWN0IE5hdGl2ZSBvbmx5IHN1cHBvcnRzIHRoZSAnaGVhZGVycycgb3B0aW9uLCBhbmQgd2lsbCBwcmludCBhIHdhcm5pbmcgaWYgYW55dGhpbmcgZWxzZSBpcyBwYXNzZWRcbiAgICAgICAgY29uc3Qgb3B0cyA9IGlzUmVhY3ROYXRpdmVcbiAgICAgICAgICAgID8ge31cbiAgICAgICAgICAgIDogKDAsIHV0aWxfanNfMS5waWNrKSh0aGlzLm9wdHMsIFwiYWdlbnRcIiwgXCJwZXJNZXNzYWdlRGVmbGF0ZVwiLCBcInBmeFwiLCBcImtleVwiLCBcInBhc3NwaHJhc2VcIiwgXCJjZXJ0XCIsIFwiY2FcIiwgXCJjaXBoZXJzXCIsIFwicmVqZWN0VW5hdXRob3JpemVkXCIsIFwibG9jYWxBZGRyZXNzXCIsIFwicHJvdG9jb2xWZXJzaW9uXCIsIFwib3JpZ2luXCIsIFwibWF4UGF5bG9hZFwiLCBcImZhbWlseVwiLCBcImNoZWNrU2VydmVySWRlbnRpdHlcIik7XG4gICAgICAgIGlmICh0aGlzLm9wdHMuZXh0cmFIZWFkZXJzKSB7XG4gICAgICAgICAgICBvcHRzLmhlYWRlcnMgPSB0aGlzLm9wdHMuZXh0cmFIZWFkZXJzO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLndzID1cbiAgICAgICAgICAgICAgICB3ZWJzb2NrZXRfY29uc3RydWN0b3JfanNfMS51c2luZ0Jyb3dzZXJXZWJTb2NrZXQgJiYgIWlzUmVhY3ROYXRpdmVcbiAgICAgICAgICAgICAgICAgICAgPyBwcm90b2NvbHNcbiAgICAgICAgICAgICAgICAgICAgICAgID8gbmV3IHdlYnNvY2tldF9jb25zdHJ1Y3Rvcl9qc18xLldlYlNvY2tldCh1cmksIHByb3RvY29scylcbiAgICAgICAgICAgICAgICAgICAgICAgIDogbmV3IHdlYnNvY2tldF9jb25zdHJ1Y3Rvcl9qc18xLldlYlNvY2tldCh1cmkpXG4gICAgICAgICAgICAgICAgICAgIDogbmV3IHdlYnNvY2tldF9jb25zdHJ1Y3Rvcl9qc18xLldlYlNvY2tldCh1cmksIHByb3RvY29scywgb3B0cyk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZW1pdChcImVycm9yXCIsIGVycik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy53cy5iaW5hcnlUeXBlID0gdGhpcy5zb2NrZXQuYmluYXJ5VHlwZSB8fCB3ZWJzb2NrZXRfY29uc3RydWN0b3JfanNfMS5kZWZhdWx0QmluYXJ5VHlwZTtcbiAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVycygpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGRzIGV2ZW50IGxpc3RlbmVycyB0byB0aGUgc29ja2V0XG4gICAgICpcbiAgICAgKiBAYXBpIHByaXZhdGVcbiAgICAgKi9cbiAgICBhZGRFdmVudExpc3RlbmVycygpIHtcbiAgICAgICAgdGhpcy53cy5vbm9wZW4gPSAoKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5vcHRzLmF1dG9VbnJlZikge1xuICAgICAgICAgICAgICAgIHRoaXMud3MuX3NvY2tldC51bnJlZigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5vbk9wZW4oKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy53cy5vbmNsb3NlID0gdGhpcy5vbkNsb3NlLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMud3Mub25tZXNzYWdlID0gZXYgPT4gdGhpcy5vbkRhdGEoZXYuZGF0YSk7XG4gICAgICAgIHRoaXMud3Mub25lcnJvciA9IGUgPT4gdGhpcy5vbkVycm9yKFwid2Vic29ja2V0IGVycm9yXCIsIGUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBXcml0ZXMgZGF0YSB0byBzb2NrZXQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBvZiBwYWNrZXRzLlxuICAgICAqIEBhcGkgcHJpdmF0ZVxuICAgICAqL1xuICAgIHdyaXRlKHBhY2tldHMpIHtcbiAgICAgICAgdGhpcy53cml0YWJsZSA9IGZhbHNlO1xuICAgICAgICAvLyBlbmNvZGVQYWNrZXQgZWZmaWNpZW50IGFzIGl0IHVzZXMgV1MgZnJhbWluZ1xuICAgICAgICAvLyBubyBuZWVkIGZvciBlbmNvZGVQYXlsb2FkXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFja2V0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgcGFja2V0ID0gcGFja2V0c1tpXTtcbiAgICAgICAgICAgIGNvbnN0IGxhc3RQYWNrZXQgPSBpID09PSBwYWNrZXRzLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICAoMCwgZW5naW5lX2lvX3BhcnNlcl8xLmVuY29kZVBhY2tldCkocGFja2V0LCB0aGlzLnN1cHBvcnRzQmluYXJ5LCBkYXRhID0+IHtcbiAgICAgICAgICAgICAgICAvLyBhbHdheXMgY3JlYXRlIGEgbmV3IG9iamVjdCAoR0gtNDM3KVxuICAgICAgICAgICAgICAgIGNvbnN0IG9wdHMgPSB7fTtcbiAgICAgICAgICAgICAgICBpZiAoIXdlYnNvY2tldF9jb25zdHJ1Y3Rvcl9qc18xLnVzaW5nQnJvd3NlcldlYlNvY2tldCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocGFja2V0Lm9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdHMuY29tcHJlc3MgPSBwYWNrZXQub3B0aW9ucy5jb21wcmVzcztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRzLnBlck1lc3NhZ2VEZWZsYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBsZW4gPSBcInN0cmluZ1wiID09PSB0eXBlb2YgZGF0YSA/IEJ1ZmZlci5ieXRlTGVuZ3RoKGRhdGEpIDogZGF0YS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobGVuIDwgdGhpcy5vcHRzLnBlck1lc3NhZ2VEZWZsYXRlLnRocmVzaG9sZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdHMuY29tcHJlc3MgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBTb21ldGltZXMgdGhlIHdlYnNvY2tldCBoYXMgYWxyZWFkeSBiZWVuIGNsb3NlZCBidXQgdGhlIGJyb3dzZXIgZGlkbid0XG4gICAgICAgICAgICAgICAgLy8gaGF2ZSBhIGNoYW5jZSBvZiBpbmZvcm1pbmcgdXMgYWJvdXQgaXQgeWV0LCBpbiB0aGF0IGNhc2Ugc2VuZCB3aWxsXG4gICAgICAgICAgICAgICAgLy8gdGhyb3cgYW4gZXJyb3JcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBpZiAod2Vic29ja2V0X2NvbnN0cnVjdG9yX2pzXzEudXNpbmdCcm93c2VyV2ViU29ja2V0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUeXBlRXJyb3IgaXMgdGhyb3duIHdoZW4gcGFzc2luZyB0aGUgc2Vjb25kIGFyZ3VtZW50IG9uIFNhZmFyaVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy53cy5zZW5kKGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy53cy5zZW5kKGRhdGEsIG9wdHMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlYnVnKFwid2Vic29ja2V0IGNsb3NlZCBiZWZvcmUgb25jbG9zZSBldmVudFwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGxhc3RQYWNrZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gZmFrZSBkcmFpblxuICAgICAgICAgICAgICAgICAgICAvLyBkZWZlciB0byBuZXh0IHRpY2sgdG8gYWxsb3cgU29ja2V0IHRvIGNsZWFyIHdyaXRlQnVmZmVyXG4gICAgICAgICAgICAgICAgICAgICgwLCB3ZWJzb2NrZXRfY29uc3RydWN0b3JfanNfMS5uZXh0VGljaykoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy53cml0YWJsZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXQoXCJkcmFpblwiKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgdGhpcy5zZXRUaW1lb3V0Rm4pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENsb3NlcyBzb2NrZXQuXG4gICAgICpcbiAgICAgKiBAYXBpIHByaXZhdGVcbiAgICAgKi9cbiAgICBkb0Nsb3NlKCkge1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMud3MgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgIHRoaXMud3MuY2xvc2UoKTtcbiAgICAgICAgICAgIHRoaXMud3MgPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlcyB1cmkgZm9yIGNvbm5lY3Rpb24uXG4gICAgICpcbiAgICAgKiBAYXBpIHByaXZhdGVcbiAgICAgKi9cbiAgICB1cmkoKSB7XG4gICAgICAgIGxldCBxdWVyeSA9IHRoaXMucXVlcnkgfHwge307XG4gICAgICAgIGNvbnN0IHNjaGVtYSA9IHRoaXMub3B0cy5zZWN1cmUgPyBcIndzc1wiIDogXCJ3c1wiO1xuICAgICAgICBsZXQgcG9ydCA9IFwiXCI7XG4gICAgICAgIC8vIGF2b2lkIHBvcnQgaWYgZGVmYXVsdCBmb3Igc2NoZW1hXG4gICAgICAgIGlmICh0aGlzLm9wdHMucG9ydCAmJlxuICAgICAgICAgICAgKChcIndzc1wiID09PSBzY2hlbWEgJiYgTnVtYmVyKHRoaXMub3B0cy5wb3J0KSAhPT0gNDQzKSB8fFxuICAgICAgICAgICAgICAgIChcIndzXCIgPT09IHNjaGVtYSAmJiBOdW1iZXIodGhpcy5vcHRzLnBvcnQpICE9PSA4MCkpKSB7XG4gICAgICAgICAgICBwb3J0ID0gXCI6XCIgKyB0aGlzLm9wdHMucG9ydDtcbiAgICAgICAgfVxuICAgICAgICAvLyBhcHBlbmQgdGltZXN0YW1wIHRvIFVSSVxuICAgICAgICBpZiAodGhpcy5vcHRzLnRpbWVzdGFtcFJlcXVlc3RzKSB7XG4gICAgICAgICAgICBxdWVyeVt0aGlzLm9wdHMudGltZXN0YW1wUGFyYW1dID0gKDAsIHllYXN0XzEuZGVmYXVsdCkoKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBjb21tdW5pY2F0ZSBiaW5hcnkgc3VwcG9ydCBjYXBhYmlsaXRpZXNcbiAgICAgICAgaWYgKCF0aGlzLnN1cHBvcnRzQmluYXJ5KSB7XG4gICAgICAgICAgICBxdWVyeS5iNjQgPSAxO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGVuY29kZWRRdWVyeSA9IHBhcnNlcXNfMS5kZWZhdWx0LmVuY29kZShxdWVyeSk7XG4gICAgICAgIGNvbnN0IGlwdjYgPSB0aGlzLm9wdHMuaG9zdG5hbWUuaW5kZXhPZihcIjpcIikgIT09IC0xO1xuICAgICAgICByZXR1cm4gKHNjaGVtYSArXG4gICAgICAgICAgICBcIjovL1wiICtcbiAgICAgICAgICAgIChpcHY2ID8gXCJbXCIgKyB0aGlzLm9wdHMuaG9zdG5hbWUgKyBcIl1cIiA6IHRoaXMub3B0cy5ob3N0bmFtZSkgK1xuICAgICAgICAgICAgcG9ydCArXG4gICAgICAgICAgICB0aGlzLm9wdHMucGF0aCArXG4gICAgICAgICAgICAoZW5jb2RlZFF1ZXJ5Lmxlbmd0aCA/IFwiP1wiICsgZW5jb2RlZFF1ZXJ5IDogXCJcIikpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBGZWF0dXJlIGRldGVjdGlvbiBmb3IgV2ViU29ja2V0LlxuICAgICAqXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn0gd2hldGhlciB0aGlzIHRyYW5zcG9ydCBpcyBhdmFpbGFibGUuXG4gICAgICogQGFwaSBwdWJsaWNcbiAgICAgKi9cbiAgICBjaGVjaygpIHtcbiAgICAgICAgcmV0dXJuICghIXdlYnNvY2tldF9jb25zdHJ1Y3Rvcl9qc18xLldlYlNvY2tldCAmJlxuICAgICAgICAgICAgIShcIl9faW5pdGlhbGl6ZVwiIGluIHdlYnNvY2tldF9jb25zdHJ1Y3Rvcl9qc18xLldlYlNvY2tldCAmJiB0aGlzLm5hbWUgPT09IFdTLnByb3RvdHlwZS5uYW1lKSk7XG4gICAgfVxufVxuZXhwb3J0cy5XUyA9IFdTO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBicm93c2VyIHNoaW0gZm9yIHhtbGh0dHByZXF1ZXN0IG1vZHVsZVxudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgaGFzX2NvcnNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiaGFzLWNvcnNcIikpO1xuY29uc3QgZ2xvYmFsVGhpc19qc18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuLi9nbG9iYWxUaGlzLmpzXCIpKTtcbmZ1bmN0aW9uIGRlZmF1bHRfMShvcHRzKSB7XG4gICAgY29uc3QgeGRvbWFpbiA9IG9wdHMueGRvbWFpbjtcbiAgICAvLyBYTUxIdHRwUmVxdWVzdCBjYW4gYmUgZGlzYWJsZWQgb24gSUVcbiAgICB0cnkge1xuICAgICAgICBpZiAoXCJ1bmRlZmluZWRcIiAhPT0gdHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICYmICgheGRvbWFpbiB8fCBoYXNfY29yc18xLmRlZmF1bHQpKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2F0Y2ggKGUpIHsgfVxuICAgIGlmICgheGRvbWFpbikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBnbG9iYWxUaGlzX2pzXzEuZGVmYXVsdFtbXCJBY3RpdmVcIl0uY29uY2F0KFwiT2JqZWN0XCIpLmpvaW4oXCJYXCIpXShcIk1pY3Jvc29mdC5YTUxIVFRQXCIpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7IH1cbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBkZWZhdWx0XzE7XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaW5zdGFsbFRpbWVyRnVuY3Rpb25zID0gZXhwb3J0cy5waWNrID0gdm9pZCAwO1xuY29uc3QgZ2xvYmFsVGhpc19qc18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2dsb2JhbFRoaXMuanNcIikpO1xuZnVuY3Rpb24gcGljayhvYmosIC4uLmF0dHIpIHtcbiAgICByZXR1cm4gYXR0ci5yZWR1Y2UoKGFjYywgaykgPT4ge1xuICAgICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGspKSB7XG4gICAgICAgICAgICBhY2Nba10gPSBvYmpba107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCB7fSk7XG59XG5leHBvcnRzLnBpY2sgPSBwaWNrO1xuLy8gS2VlcCBhIHJlZmVyZW5jZSB0byB0aGUgcmVhbCB0aW1lb3V0IGZ1bmN0aW9ucyBzbyB0aGV5IGNhbiBiZSB1c2VkIHdoZW4gb3ZlcnJpZGRlblxuY29uc3QgTkFUSVZFX1NFVF9USU1FT1VUID0gc2V0VGltZW91dDtcbmNvbnN0IE5BVElWRV9DTEVBUl9USU1FT1VUID0gY2xlYXJUaW1lb3V0O1xuZnVuY3Rpb24gaW5zdGFsbFRpbWVyRnVuY3Rpb25zKG9iaiwgb3B0cykge1xuICAgIGlmIChvcHRzLnVzZU5hdGl2ZVRpbWVycykge1xuICAgICAgICBvYmouc2V0VGltZW91dEZuID0gTkFUSVZFX1NFVF9USU1FT1VULmJpbmQoZ2xvYmFsVGhpc19qc18xLmRlZmF1bHQpO1xuICAgICAgICBvYmouY2xlYXJUaW1lb3V0Rm4gPSBOQVRJVkVfQ0xFQVJfVElNRU9VVC5iaW5kKGdsb2JhbFRoaXNfanNfMS5kZWZhdWx0KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIG9iai5zZXRUaW1lb3V0Rm4gPSBzZXRUaW1lb3V0LmJpbmQoZ2xvYmFsVGhpc19qc18xLmRlZmF1bHQpO1xuICAgICAgICBvYmouY2xlYXJUaW1lb3V0Rm4gPSBjbGVhclRpbWVvdXQuYmluZChnbG9iYWxUaGlzX2pzXzEuZGVmYXVsdCk7XG4gICAgfVxufVxuZXhwb3J0cy5pbnN0YWxsVGltZXJGdW5jdGlvbnMgPSBpbnN0YWxsVGltZXJGdW5jdGlvbnM7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucmVjb25zdHJ1Y3RQYWNrZXQgPSBleHBvcnRzLmRlY29uc3RydWN0UGFja2V0ID0gdm9pZCAwO1xuY29uc3QgaXNfYmluYXJ5X2pzXzEgPSByZXF1aXJlKFwiLi9pcy1iaW5hcnkuanNcIik7XG4vKipcbiAqIFJlcGxhY2VzIGV2ZXJ5IEJ1ZmZlciB8IEFycmF5QnVmZmVyIHwgQmxvYiB8IEZpbGUgaW4gcGFja2V0IHdpdGggYSBudW1iZXJlZCBwbGFjZWhvbGRlci5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGFja2V0IC0gc29ja2V0LmlvIGV2ZW50IHBhY2tldFxuICogQHJldHVybiB7T2JqZWN0fSB3aXRoIGRlY29uc3RydWN0ZWQgcGFja2V0IGFuZCBsaXN0IG9mIGJ1ZmZlcnNcbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gZGVjb25zdHJ1Y3RQYWNrZXQocGFja2V0KSB7XG4gICAgY29uc3QgYnVmZmVycyA9IFtdO1xuICAgIGNvbnN0IHBhY2tldERhdGEgPSBwYWNrZXQuZGF0YTtcbiAgICBjb25zdCBwYWNrID0gcGFja2V0O1xuICAgIHBhY2suZGF0YSA9IF9kZWNvbnN0cnVjdFBhY2tldChwYWNrZXREYXRhLCBidWZmZXJzKTtcbiAgICBwYWNrLmF0dGFjaG1lbnRzID0gYnVmZmVycy5sZW5ndGg7IC8vIG51bWJlciBvZiBiaW5hcnkgJ2F0dGFjaG1lbnRzJ1xuICAgIHJldHVybiB7IHBhY2tldDogcGFjaywgYnVmZmVyczogYnVmZmVycyB9O1xufVxuZXhwb3J0cy5kZWNvbnN0cnVjdFBhY2tldCA9IGRlY29uc3RydWN0UGFja2V0O1xuZnVuY3Rpb24gX2RlY29uc3RydWN0UGFja2V0KGRhdGEsIGJ1ZmZlcnMpIHtcbiAgICBpZiAoIWRhdGEpXG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgIGlmIChpc19iaW5hcnlfanNfMS5pc0JpbmFyeShkYXRhKSkge1xuICAgICAgICBjb25zdCBwbGFjZWhvbGRlciA9IHsgX3BsYWNlaG9sZGVyOiB0cnVlLCBudW06IGJ1ZmZlcnMubGVuZ3RoIH07XG4gICAgICAgIGJ1ZmZlcnMucHVzaChkYXRhKTtcbiAgICAgICAgcmV0dXJuIHBsYWNlaG9sZGVyO1xuICAgIH1cbiAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KGRhdGEpKSB7XG4gICAgICAgIGNvbnN0IG5ld0RhdGEgPSBuZXcgQXJyYXkoZGF0YS5sZW5ndGgpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIG5ld0RhdGFbaV0gPSBfZGVjb25zdHJ1Y3RQYWNrZXQoZGF0YVtpXSwgYnVmZmVycyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ld0RhdGE7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBkYXRhID09PSBcIm9iamVjdFwiICYmICEoZGF0YSBpbnN0YW5jZW9mIERhdGUpKSB7XG4gICAgICAgIGNvbnN0IG5ld0RhdGEgPSB7fTtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gZGF0YSkge1xuICAgICAgICAgICAgaWYgKGRhdGEuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgICAgIG5ld0RhdGFba2V5XSA9IF9kZWNvbnN0cnVjdFBhY2tldChkYXRhW2tleV0sIGJ1ZmZlcnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXdEYXRhO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbn1cbi8qKlxuICogUmVjb25zdHJ1Y3RzIGEgYmluYXJ5IHBhY2tldCBmcm9tIGl0cyBwbGFjZWhvbGRlciBwYWNrZXQgYW5kIGJ1ZmZlcnNcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGFja2V0IC0gZXZlbnQgcGFja2V0IHdpdGggcGxhY2Vob2xkZXJzXG4gKiBAcGFyYW0ge0FycmF5fSBidWZmZXJzIC0gYmluYXJ5IGJ1ZmZlcnMgdG8gcHV0IGluIHBsYWNlaG9sZGVyIHBvc2l0aW9uc1xuICogQHJldHVybiB7T2JqZWN0fSByZWNvbnN0cnVjdGVkIHBhY2tldFxuICogQHB1YmxpY1xuICovXG5mdW5jdGlvbiByZWNvbnN0cnVjdFBhY2tldChwYWNrZXQsIGJ1ZmZlcnMpIHtcbiAgICBwYWNrZXQuZGF0YSA9IF9yZWNvbnN0cnVjdFBhY2tldChwYWNrZXQuZGF0YSwgYnVmZmVycyk7XG4gICAgcGFja2V0LmF0dGFjaG1lbnRzID0gdW5kZWZpbmVkOyAvLyBubyBsb25nZXIgdXNlZnVsXG4gICAgcmV0dXJuIHBhY2tldDtcbn1cbmV4cG9ydHMucmVjb25zdHJ1Y3RQYWNrZXQgPSByZWNvbnN0cnVjdFBhY2tldDtcbmZ1bmN0aW9uIF9yZWNvbnN0cnVjdFBhY2tldChkYXRhLCBidWZmZXJzKSB7XG4gICAgaWYgKCFkYXRhKVxuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICBpZiAoZGF0YSAmJiBkYXRhLl9wbGFjZWhvbGRlcikge1xuICAgICAgICByZXR1cm4gYnVmZmVyc1tkYXRhLm51bV07IC8vIGFwcHJvcHJpYXRlIGJ1ZmZlciAoc2hvdWxkIGJlIG5hdHVyYWwgb3JkZXIgYW55d2F5KVxuICAgIH1cbiAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KGRhdGEpKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgZGF0YVtpXSA9IF9yZWNvbnN0cnVjdFBhY2tldChkYXRhW2ldLCBidWZmZXJzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgZGF0YSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBkYXRhKSB7XG4gICAgICAgICAgICBpZiAoZGF0YS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICAgICAgZGF0YVtrZXldID0gX3JlY29uc3RydWN0UGFja2V0KGRhdGFba2V5XSwgYnVmZmVycyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGRhdGE7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRGVjb2RlciA9IGV4cG9ydHMuRW5jb2RlciA9IGV4cG9ydHMuUGFja2V0VHlwZSA9IGV4cG9ydHMucHJvdG9jb2wgPSB2b2lkIDA7XG5jb25zdCBjb21wb25lbnRfZW1pdHRlcl8xID0gcmVxdWlyZShcIkBzb2NrZXQuaW8vY29tcG9uZW50LWVtaXR0ZXJcIik7XG5jb25zdCBiaW5hcnlfanNfMSA9IHJlcXVpcmUoXCIuL2JpbmFyeS5qc1wiKTtcbmNvbnN0IGlzX2JpbmFyeV9qc18xID0gcmVxdWlyZShcIi4vaXMtYmluYXJ5LmpzXCIpO1xuY29uc3QgZGVidWdfMSA9IHJlcXVpcmUoXCJkZWJ1Z1wiKTsgLy8gZGVidWcoKVxuY29uc3QgZGVidWcgPSBkZWJ1Z18xLmRlZmF1bHQoXCJzb2NrZXQuaW8tcGFyc2VyXCIpOyAvLyBkZWJ1ZygpXG4vKipcbiAqIFByb3RvY29sIHZlcnNpb24uXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnRzLnByb3RvY29sID0gNTtcbnZhciBQYWNrZXRUeXBlO1xuKGZ1bmN0aW9uIChQYWNrZXRUeXBlKSB7XG4gICAgUGFja2V0VHlwZVtQYWNrZXRUeXBlW1wiQ09OTkVDVFwiXSA9IDBdID0gXCJDT05ORUNUXCI7XG4gICAgUGFja2V0VHlwZVtQYWNrZXRUeXBlW1wiRElTQ09OTkVDVFwiXSA9IDFdID0gXCJESVNDT05ORUNUXCI7XG4gICAgUGFja2V0VHlwZVtQYWNrZXRUeXBlW1wiRVZFTlRcIl0gPSAyXSA9IFwiRVZFTlRcIjtcbiAgICBQYWNrZXRUeXBlW1BhY2tldFR5cGVbXCJBQ0tcIl0gPSAzXSA9IFwiQUNLXCI7XG4gICAgUGFja2V0VHlwZVtQYWNrZXRUeXBlW1wiQ09OTkVDVF9FUlJPUlwiXSA9IDRdID0gXCJDT05ORUNUX0VSUk9SXCI7XG4gICAgUGFja2V0VHlwZVtQYWNrZXRUeXBlW1wiQklOQVJZX0VWRU5UXCJdID0gNV0gPSBcIkJJTkFSWV9FVkVOVFwiO1xuICAgIFBhY2tldFR5cGVbUGFja2V0VHlwZVtcIkJJTkFSWV9BQ0tcIl0gPSA2XSA9IFwiQklOQVJZX0FDS1wiO1xufSkoUGFja2V0VHlwZSA9IGV4cG9ydHMuUGFja2V0VHlwZSB8fCAoZXhwb3J0cy5QYWNrZXRUeXBlID0ge30pKTtcbi8qKlxuICogQSBzb2NrZXQuaW8gRW5jb2RlciBpbnN0YW5jZVxuICovXG5jbGFzcyBFbmNvZGVyIHtcbiAgICAvKipcbiAgICAgKiBFbmNvZGUgYSBwYWNrZXQgYXMgYSBzaW5nbGUgc3RyaW5nIGlmIG5vbi1iaW5hcnksIG9yIGFzIGFcbiAgICAgKiBidWZmZXIgc2VxdWVuY2UsIGRlcGVuZGluZyBvbiBwYWNrZXQgdHlwZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmogLSBwYWNrZXQgb2JqZWN0XG4gICAgICovXG4gICAgZW5jb2RlKG9iaikge1xuICAgICAgICBkZWJ1ZyhcImVuY29kaW5nIHBhY2tldCAlalwiLCBvYmopO1xuICAgICAgICBpZiAob2JqLnR5cGUgPT09IFBhY2tldFR5cGUuRVZFTlQgfHwgb2JqLnR5cGUgPT09IFBhY2tldFR5cGUuQUNLKSB7XG4gICAgICAgICAgICBpZiAoaXNfYmluYXJ5X2pzXzEuaGFzQmluYXJ5KG9iaikpIHtcbiAgICAgICAgICAgICAgICBvYmoudHlwZSA9XG4gICAgICAgICAgICAgICAgICAgIG9iai50eXBlID09PSBQYWNrZXRUeXBlLkVWRU5UXG4gICAgICAgICAgICAgICAgICAgICAgICA/IFBhY2tldFR5cGUuQklOQVJZX0VWRU5UXG4gICAgICAgICAgICAgICAgICAgICAgICA6IFBhY2tldFR5cGUuQklOQVJZX0FDSztcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lbmNvZGVBc0JpbmFyeShvYmopO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbdGhpcy5lbmNvZGVBc1N0cmluZyhvYmopXTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRW5jb2RlIHBhY2tldCBhcyBzdHJpbmcuXG4gICAgICovXG4gICAgZW5jb2RlQXNTdHJpbmcob2JqKSB7XG4gICAgICAgIC8vIGZpcnN0IGlzIHR5cGVcbiAgICAgICAgbGV0IHN0ciA9IFwiXCIgKyBvYmoudHlwZTtcbiAgICAgICAgLy8gYXR0YWNobWVudHMgaWYgd2UgaGF2ZSB0aGVtXG4gICAgICAgIGlmIChvYmoudHlwZSA9PT0gUGFja2V0VHlwZS5CSU5BUllfRVZFTlQgfHxcbiAgICAgICAgICAgIG9iai50eXBlID09PSBQYWNrZXRUeXBlLkJJTkFSWV9BQ0spIHtcbiAgICAgICAgICAgIHN0ciArPSBvYmouYXR0YWNobWVudHMgKyBcIi1cIjtcbiAgICAgICAgfVxuICAgICAgICAvLyBpZiB3ZSBoYXZlIGEgbmFtZXNwYWNlIG90aGVyIHRoYW4gYC9gXG4gICAgICAgIC8vIHdlIGFwcGVuZCBpdCBmb2xsb3dlZCBieSBhIGNvbW1hIGAsYFxuICAgICAgICBpZiAob2JqLm5zcCAmJiBcIi9cIiAhPT0gb2JqLm5zcCkge1xuICAgICAgICAgICAgc3RyICs9IG9iai5uc3AgKyBcIixcIjtcbiAgICAgICAgfVxuICAgICAgICAvLyBpbW1lZGlhdGVseSBmb2xsb3dlZCBieSB0aGUgaWRcbiAgICAgICAgaWYgKG51bGwgIT0gb2JqLmlkKSB7XG4gICAgICAgICAgICBzdHIgKz0gb2JqLmlkO1xuICAgICAgICB9XG4gICAgICAgIC8vIGpzb24gZGF0YVxuICAgICAgICBpZiAobnVsbCAhPSBvYmouZGF0YSkge1xuICAgICAgICAgICAgc3RyICs9IEpTT04uc3RyaW5naWZ5KG9iai5kYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBkZWJ1ZyhcImVuY29kZWQgJWogYXMgJXNcIiwgb2JqLCBzdHIpO1xuICAgICAgICByZXR1cm4gc3RyO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBFbmNvZGUgcGFja2V0IGFzICdidWZmZXIgc2VxdWVuY2UnIGJ5IHJlbW92aW5nIGJsb2JzLCBhbmRcbiAgICAgKiBkZWNvbnN0cnVjdGluZyBwYWNrZXQgaW50byBvYmplY3Qgd2l0aCBwbGFjZWhvbGRlcnMgYW5kXG4gICAgICogYSBsaXN0IG9mIGJ1ZmZlcnMuXG4gICAgICovXG4gICAgZW5jb2RlQXNCaW5hcnkob2JqKSB7XG4gICAgICAgIGNvbnN0IGRlY29uc3RydWN0aW9uID0gYmluYXJ5X2pzXzEuZGVjb25zdHJ1Y3RQYWNrZXQob2JqKTtcbiAgICAgICAgY29uc3QgcGFjayA9IHRoaXMuZW5jb2RlQXNTdHJpbmcoZGVjb25zdHJ1Y3Rpb24ucGFja2V0KTtcbiAgICAgICAgY29uc3QgYnVmZmVycyA9IGRlY29uc3RydWN0aW9uLmJ1ZmZlcnM7XG4gICAgICAgIGJ1ZmZlcnMudW5zaGlmdChwYWNrKTsgLy8gYWRkIHBhY2tldCBpbmZvIHRvIGJlZ2lubmluZyBvZiBkYXRhIGxpc3RcbiAgICAgICAgcmV0dXJuIGJ1ZmZlcnM7IC8vIHdyaXRlIGFsbCB0aGUgYnVmZmVyc1xuICAgIH1cbn1cbmV4cG9ydHMuRW5jb2RlciA9IEVuY29kZXI7XG4vKipcbiAqIEEgc29ja2V0LmlvIERlY29kZXIgaW5zdGFuY2VcbiAqXG4gKiBAcmV0dXJuIHtPYmplY3R9IGRlY29kZXJcbiAqL1xuY2xhc3MgRGVjb2RlciBleHRlbmRzIGNvbXBvbmVudF9lbWl0dGVyXzEuRW1pdHRlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERlY29kZXMgYW4gZW5jb2RlZCBwYWNrZXQgc3RyaW5nIGludG8gcGFja2V0IEpTT04uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gb2JqIC0gZW5jb2RlZCBwYWNrZXRcbiAgICAgKi9cbiAgICBhZGQob2JqKSB7XG4gICAgICAgIGxldCBwYWNrZXQ7XG4gICAgICAgIGlmICh0eXBlb2Ygb2JqID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBwYWNrZXQgPSB0aGlzLmRlY29kZVN0cmluZyhvYmopO1xuICAgICAgICAgICAgaWYgKHBhY2tldC50eXBlID09PSBQYWNrZXRUeXBlLkJJTkFSWV9FVkVOVCB8fFxuICAgICAgICAgICAgICAgIHBhY2tldC50eXBlID09PSBQYWNrZXRUeXBlLkJJTkFSWV9BQ0spIHtcbiAgICAgICAgICAgICAgICAvLyBiaW5hcnkgcGFja2V0J3MganNvblxuICAgICAgICAgICAgICAgIHRoaXMucmVjb25zdHJ1Y3RvciA9IG5ldyBCaW5hcnlSZWNvbnN0cnVjdG9yKHBhY2tldCk7XG4gICAgICAgICAgICAgICAgLy8gbm8gYXR0YWNobWVudHMsIGxhYmVsZWQgYmluYXJ5IGJ1dCBubyBiaW5hcnkgZGF0YSB0byBmb2xsb3dcbiAgICAgICAgICAgICAgICBpZiAocGFja2V0LmF0dGFjaG1lbnRzID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1cGVyLmVtaXRSZXNlcnZlZChcImRlY29kZWRcIiwgcGFja2V0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBub24tYmluYXJ5IGZ1bGwgcGFja2V0XG4gICAgICAgICAgICAgICAgc3VwZXIuZW1pdFJlc2VydmVkKFwiZGVjb2RlZFwiLCBwYWNrZXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzX2JpbmFyeV9qc18xLmlzQmluYXJ5KG9iaikgfHwgb2JqLmJhc2U2NCkge1xuICAgICAgICAgICAgLy8gcmF3IGJpbmFyeSBkYXRhXG4gICAgICAgICAgICBpZiAoIXRoaXMucmVjb25zdHJ1Y3Rvcikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImdvdCBiaW5hcnkgZGF0YSB3aGVuIG5vdCByZWNvbnN0cnVjdGluZyBhIHBhY2tldFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHBhY2tldCA9IHRoaXMucmVjb25zdHJ1Y3Rvci50YWtlQmluYXJ5RGF0YShvYmopO1xuICAgICAgICAgICAgICAgIGlmIChwYWNrZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gcmVjZWl2ZWQgZmluYWwgYnVmZmVyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVjb25zdHJ1Y3RvciA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIHN1cGVyLmVtaXRSZXNlcnZlZChcImRlY29kZWRcIiwgcGFja2V0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIHR5cGU6IFwiICsgb2JqKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZWNvZGUgYSBwYWNrZXQgU3RyaW5nIChKU09OIGRhdGEpXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBwYWNrZXRcbiAgICAgKi9cbiAgICBkZWNvZGVTdHJpbmcoc3RyKSB7XG4gICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgLy8gbG9vayB1cCB0eXBlXG4gICAgICAgIGNvbnN0IHAgPSB7XG4gICAgICAgICAgICB0eXBlOiBOdW1iZXIoc3RyLmNoYXJBdCgwKSksXG4gICAgICAgIH07XG4gICAgICAgIGlmIChQYWNrZXRUeXBlW3AudHlwZV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidW5rbm93biBwYWNrZXQgdHlwZSBcIiArIHAudHlwZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gbG9vayB1cCBhdHRhY2htZW50cyBpZiB0eXBlIGJpbmFyeVxuICAgICAgICBpZiAocC50eXBlID09PSBQYWNrZXRUeXBlLkJJTkFSWV9FVkVOVCB8fFxuICAgICAgICAgICAgcC50eXBlID09PSBQYWNrZXRUeXBlLkJJTkFSWV9BQ0spIHtcbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0ID0gaSArIDE7XG4gICAgICAgICAgICB3aGlsZSAoc3RyLmNoYXJBdCgrK2kpICE9PSBcIi1cIiAmJiBpICE9IHN0ci5sZW5ndGgpIHsgfVxuICAgICAgICAgICAgY29uc3QgYnVmID0gc3RyLnN1YnN0cmluZyhzdGFydCwgaSk7XG4gICAgICAgICAgICBpZiAoYnVmICE9IE51bWJlcihidWYpIHx8IHN0ci5jaGFyQXQoaSkgIT09IFwiLVwiKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSWxsZWdhbCBhdHRhY2htZW50c1wiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHAuYXR0YWNobWVudHMgPSBOdW1iZXIoYnVmKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBsb29rIHVwIG5hbWVzcGFjZSAoaWYgYW55KVxuICAgICAgICBpZiAoXCIvXCIgPT09IHN0ci5jaGFyQXQoaSArIDEpKSB7XG4gICAgICAgICAgICBjb25zdCBzdGFydCA9IGkgKyAxO1xuICAgICAgICAgICAgd2hpbGUgKCsraSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGMgPSBzdHIuY2hhckF0KGkpO1xuICAgICAgICAgICAgICAgIGlmIChcIixcIiA9PT0gYylcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgaWYgKGkgPT09IHN0ci5sZW5ndGgpXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcC5uc3AgPSBzdHIuc3Vic3RyaW5nKHN0YXJ0LCBpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHAubnNwID0gXCIvXCI7XG4gICAgICAgIH1cbiAgICAgICAgLy8gbG9vayB1cCBpZFxuICAgICAgICBjb25zdCBuZXh0ID0gc3RyLmNoYXJBdChpICsgMSk7XG4gICAgICAgIGlmIChcIlwiICE9PSBuZXh0ICYmIE51bWJlcihuZXh0KSA9PSBuZXh0KSB7XG4gICAgICAgICAgICBjb25zdCBzdGFydCA9IGkgKyAxO1xuICAgICAgICAgICAgd2hpbGUgKCsraSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGMgPSBzdHIuY2hhckF0KGkpO1xuICAgICAgICAgICAgICAgIGlmIChudWxsID09IGMgfHwgTnVtYmVyKGMpICE9IGMpIHtcbiAgICAgICAgICAgICAgICAgICAgLS1pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGkgPT09IHN0ci5sZW5ndGgpXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcC5pZCA9IE51bWJlcihzdHIuc3Vic3RyaW5nKHN0YXJ0LCBpICsgMSkpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGxvb2sgdXAganNvbiBkYXRhXG4gICAgICAgIGlmIChzdHIuY2hhckF0KCsraSkpIHtcbiAgICAgICAgICAgIGNvbnN0IHBheWxvYWQgPSB0cnlQYXJzZShzdHIuc3Vic3RyKGkpKTtcbiAgICAgICAgICAgIGlmIChEZWNvZGVyLmlzUGF5bG9hZFZhbGlkKHAudHlwZSwgcGF5bG9hZCkpIHtcbiAgICAgICAgICAgICAgICBwLmRhdGEgPSBwYXlsb2FkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBwYXlsb2FkXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGRlYnVnKFwiZGVjb2RlZCAlcyBhcyAlalwiLCBzdHIsIHApO1xuICAgICAgICByZXR1cm4gcDtcbiAgICB9XG4gICAgc3RhdGljIGlzUGF5bG9hZFZhbGlkKHR5cGUsIHBheWxvYWQpIHtcbiAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgICBjYXNlIFBhY2tldFR5cGUuQ09OTkVDVDpcbiAgICAgICAgICAgICAgICByZXR1cm4gdHlwZW9mIHBheWxvYWQgPT09IFwib2JqZWN0XCI7XG4gICAgICAgICAgICBjYXNlIFBhY2tldFR5cGUuRElTQ09OTkVDVDpcbiAgICAgICAgICAgICAgICByZXR1cm4gcGF5bG9hZCA9PT0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgY2FzZSBQYWNrZXRUeXBlLkNPTk5FQ1RfRVJST1I6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiBwYXlsb2FkID09PSBcInN0cmluZ1wiIHx8IHR5cGVvZiBwYXlsb2FkID09PSBcIm9iamVjdFwiO1xuICAgICAgICAgICAgY2FzZSBQYWNrZXRUeXBlLkVWRU5UOlxuICAgICAgICAgICAgY2FzZSBQYWNrZXRUeXBlLkJJTkFSWV9FVkVOVDpcbiAgICAgICAgICAgICAgICByZXR1cm4gQXJyYXkuaXNBcnJheShwYXlsb2FkKSAmJiBwYXlsb2FkLmxlbmd0aCA+IDA7XG4gICAgICAgICAgICBjYXNlIFBhY2tldFR5cGUuQUNLOlxuICAgICAgICAgICAgY2FzZSBQYWNrZXRUeXBlLkJJTkFSWV9BQ0s6XG4gICAgICAgICAgICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkocGF5bG9hZCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogRGVhbGxvY2F0ZXMgYSBwYXJzZXIncyByZXNvdXJjZXNcbiAgICAgKi9cbiAgICBkZXN0cm95KCkge1xuICAgICAgICBpZiAodGhpcy5yZWNvbnN0cnVjdG9yKSB7XG4gICAgICAgICAgICB0aGlzLnJlY29uc3RydWN0b3IuZmluaXNoZWRSZWNvbnN0cnVjdGlvbigpO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5EZWNvZGVyID0gRGVjb2RlcjtcbmZ1bmN0aW9uIHRyeVBhcnNlKHN0cikge1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKHN0cik7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG4vKipcbiAqIEEgbWFuYWdlciBvZiBhIGJpbmFyeSBldmVudCdzICdidWZmZXIgc2VxdWVuY2UnLiBTaG91bGRcbiAqIGJlIGNvbnN0cnVjdGVkIHdoZW5ldmVyIGEgcGFja2V0IG9mIHR5cGUgQklOQVJZX0VWRU5UIGlzXG4gKiBkZWNvZGVkLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXRcbiAqIEByZXR1cm4ge0JpbmFyeVJlY29uc3RydWN0b3J9IGluaXRpYWxpemVkIHJlY29uc3RydWN0b3JcbiAqL1xuY2xhc3MgQmluYXJ5UmVjb25zdHJ1Y3RvciB7XG4gICAgY29uc3RydWN0b3IocGFja2V0KSB7XG4gICAgICAgIHRoaXMucGFja2V0ID0gcGFja2V0O1xuICAgICAgICB0aGlzLmJ1ZmZlcnMgPSBbXTtcbiAgICAgICAgdGhpcy5yZWNvblBhY2sgPSBwYWNrZXQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE1ldGhvZCB0byBiZSBjYWxsZWQgd2hlbiBiaW5hcnkgZGF0YSByZWNlaXZlZCBmcm9tIGNvbm5lY3Rpb25cbiAgICAgKiBhZnRlciBhIEJJTkFSWV9FVkVOVCBwYWNrZXQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0J1ZmZlciB8IEFycmF5QnVmZmVyfSBiaW5EYXRhIC0gdGhlIHJhdyBiaW5hcnkgZGF0YSByZWNlaXZlZFxuICAgICAqIEByZXR1cm4ge251bGwgfCBPYmplY3R9IHJldHVybnMgbnVsbCBpZiBtb3JlIGJpbmFyeSBkYXRhIGlzIGV4cGVjdGVkIG9yXG4gICAgICogICBhIHJlY29uc3RydWN0ZWQgcGFja2V0IG9iamVjdCBpZiBhbGwgYnVmZmVycyBoYXZlIGJlZW4gcmVjZWl2ZWQuXG4gICAgICovXG4gICAgdGFrZUJpbmFyeURhdGEoYmluRGF0YSkge1xuICAgICAgICB0aGlzLmJ1ZmZlcnMucHVzaChiaW5EYXRhKTtcbiAgICAgICAgaWYgKHRoaXMuYnVmZmVycy5sZW5ndGggPT09IHRoaXMucmVjb25QYWNrLmF0dGFjaG1lbnRzKSB7XG4gICAgICAgICAgICAvLyBkb25lIHdpdGggYnVmZmVyIGxpc3RcbiAgICAgICAgICAgIGNvbnN0IHBhY2tldCA9IGJpbmFyeV9qc18xLnJlY29uc3RydWN0UGFja2V0KHRoaXMucmVjb25QYWNrLCB0aGlzLmJ1ZmZlcnMpO1xuICAgICAgICAgICAgdGhpcy5maW5pc2hlZFJlY29uc3RydWN0aW9uKCk7XG4gICAgICAgICAgICByZXR1cm4gcGFja2V0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDbGVhbnMgdXAgYmluYXJ5IHBhY2tldCByZWNvbnN0cnVjdGlvbiB2YXJpYWJsZXMuXG4gICAgICovXG4gICAgZmluaXNoZWRSZWNvbnN0cnVjdGlvbigpIHtcbiAgICAgICAgdGhpcy5yZWNvblBhY2sgPSBudWxsO1xuICAgICAgICB0aGlzLmJ1ZmZlcnMgPSBbXTtcbiAgICB9XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaGFzQmluYXJ5ID0gZXhwb3J0cy5pc0JpbmFyeSA9IHZvaWQgMDtcbmNvbnN0IHdpdGhOYXRpdmVBcnJheUJ1ZmZlciA9IHR5cGVvZiBBcnJheUJ1ZmZlciA9PT0gXCJmdW5jdGlvblwiO1xuY29uc3QgaXNWaWV3ID0gKG9iaikgPT4ge1xuICAgIHJldHVybiB0eXBlb2YgQXJyYXlCdWZmZXIuaXNWaWV3ID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgPyBBcnJheUJ1ZmZlci5pc1ZpZXcob2JqKVxuICAgICAgICA6IG9iai5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcjtcbn07XG5jb25zdCB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5jb25zdCB3aXRoTmF0aXZlQmxvYiA9IHR5cGVvZiBCbG9iID09PSBcImZ1bmN0aW9uXCIgfHxcbiAgICAodHlwZW9mIEJsb2IgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICAgICAgdG9TdHJpbmcuY2FsbChCbG9iKSA9PT0gXCJbb2JqZWN0IEJsb2JDb25zdHJ1Y3Rvcl1cIik7XG5jb25zdCB3aXRoTmF0aXZlRmlsZSA9IHR5cGVvZiBGaWxlID09PSBcImZ1bmN0aW9uXCIgfHxcbiAgICAodHlwZW9mIEZpbGUgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICAgICAgdG9TdHJpbmcuY2FsbChGaWxlKSA9PT0gXCJbb2JqZWN0IEZpbGVDb25zdHJ1Y3Rvcl1cIik7XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBvYmogaXMgYSBCdWZmZXIsIGFuIEFycmF5QnVmZmVyLCBhIEJsb2Igb3IgYSBGaWxlLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGlzQmluYXJ5KG9iaikge1xuICAgIHJldHVybiAoKHdpdGhOYXRpdmVBcnJheUJ1ZmZlciAmJiAob2JqIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIgfHwgaXNWaWV3KG9iaikpKSB8fFxuICAgICAgICAod2l0aE5hdGl2ZUJsb2IgJiYgb2JqIGluc3RhbmNlb2YgQmxvYikgfHxcbiAgICAgICAgKHdpdGhOYXRpdmVGaWxlICYmIG9iaiBpbnN0YW5jZW9mIEZpbGUpKTtcbn1cbmV4cG9ydHMuaXNCaW5hcnkgPSBpc0JpbmFyeTtcbmZ1bmN0aW9uIGhhc0JpbmFyeShvYmosIHRvSlNPTikge1xuICAgIGlmICghb2JqIHx8IHR5cGVvZiBvYmogIT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoQXJyYXkuaXNBcnJheShvYmopKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsID0gb2JqLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgaWYgKGhhc0JpbmFyeShvYmpbaV0pKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoaXNCaW5hcnkob2JqKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKG9iai50b0pTT04gJiZcbiAgICAgICAgdHlwZW9mIG9iai50b0pTT04gPT09IFwiZnVuY3Rpb25cIiAmJlxuICAgICAgICBhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHJldHVybiBoYXNCaW5hcnkob2JqLnRvSlNPTigpLCB0cnVlKTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBrZXkgaW4gb2JqKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpICYmIGhhc0JpbmFyeShvYmpba2V5XSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmV4cG9ydHMuaGFzQmluYXJ5ID0gaGFzQmluYXJ5O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfaXNSZWFjdE5hdGl2ZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vaXNSZWFjdE5hdGl2ZVwiKSk7XG5cbnZhciBfdXJpVG9CbG9iID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91cmlUb0Jsb2JcIikpO1xuXG52YXIgX2lzQ29yZG92YSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vaXNDb3Jkb3ZhXCIpKTtcblxudmFyIF9yZWFkQXNCeXRlQXJyYXkgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3JlYWRBc0J5dGVBcnJheVwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gIHJldHVybiBDb25zdHJ1Y3Rvcjtcbn1cblxudmFyIEZpbGVTb3VyY2UgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAvLyBNYWtlIHRoaXMuc2l6ZSBhIG1ldGhvZFxuICBmdW5jdGlvbiBGaWxlU291cmNlKGZpbGUpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRmlsZVNvdXJjZSk7XG5cbiAgICB0aGlzLl9maWxlID0gZmlsZTtcbiAgICB0aGlzLnNpemUgPSBmaWxlLnNpemU7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoRmlsZVNvdXJjZSwgW3tcbiAgICBrZXk6IFwic2xpY2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCkge1xuICAgICAgLy8gSW4gQXBhY2hlIENvcmRvdmEgYXBwbGljYXRpb25zLCBhIEZpbGUgbXVzdCBiZSByZXNvbHZlZCB1c2luZ1xuICAgICAgLy8gRmlsZVJlYWRlciBpbnN0YW5jZXMsIHNlZVxuICAgICAgLy8gaHR0cHM6Ly9jb3Jkb3ZhLmFwYWNoZS5vcmcvZG9jcy9lbi84LngvcmVmZXJlbmNlL2NvcmRvdmEtcGx1Z2luLWZpbGUvaW5kZXguaHRtbCNyZWFkLWEtZmlsZVxuICAgICAgaWYgKCgwLCBfaXNDb3Jkb3ZhLmRlZmF1bHQpKCkpIHtcbiAgICAgICAgcmV0dXJuICgwLCBfcmVhZEFzQnl0ZUFycmF5LmRlZmF1bHQpKHRoaXMuX2ZpbGUuc2xpY2Uoc3RhcnQsIGVuZCkpO1xuICAgICAgfVxuXG4gICAgICB2YXIgdmFsdWUgPSB0aGlzLl9maWxlLnNsaWNlKHN0YXJ0LCBlbmQpO1xuXG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHtcbiAgICAgICAgdmFsdWU6IHZhbHVlXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY2xvc2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2xvc2UoKSB7Ly8gTm90aGluZyB0byBkbyBoZXJlIHNpbmNlIHdlIGRvbid0IG5lZWQgdG8gcmVsZWFzZSBhbnkgcmVzb3VyY2VzLlxuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBGaWxlU291cmNlO1xufSgpO1xuXG52YXIgU3RyZWFtU291cmNlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU3RyZWFtU291cmNlKHJlYWRlciwgY2h1bmtTaXplKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFN0cmVhbVNvdXJjZSk7XG5cbiAgICB0aGlzLl9jaHVua1NpemUgPSBjaHVua1NpemU7XG4gICAgdGhpcy5fYnVmZmVyID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX2J1ZmZlck9mZnNldCA9IDA7XG4gICAgdGhpcy5fcmVhZGVyID0gcmVhZGVyO1xuICAgIHRoaXMuX2RvbmUgPSBmYWxzZTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhTdHJlYW1Tb3VyY2UsIFt7XG4gICAga2V5OiBcInNsaWNlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNsaWNlKHN0YXJ0LCBlbmQpIHtcbiAgICAgIGlmIChzdGFydCA8IHRoaXMuX2J1ZmZlck9mZnNldCkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiUmVxdWVzdGVkIGRhdGEgaXMgYmVmb3JlIHRoZSByZWFkZXIncyBjdXJyZW50IG9mZnNldFwiKSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLl9yZWFkVW50aWxFbm91Z2hEYXRhT3JEb25lKHN0YXJ0LCBlbmQpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJfcmVhZFVudGlsRW5vdWdoRGF0YU9yRG9uZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfcmVhZFVudGlsRW5vdWdoRGF0YU9yRG9uZShzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICB2YXIgaGFzRW5vdWdoRGF0YSA9IGVuZCA8PSB0aGlzLl9idWZmZXJPZmZzZXQgKyBsZW4odGhpcy5fYnVmZmVyKTtcblxuICAgICAgaWYgKHRoaXMuX2RvbmUgfHwgaGFzRW5vdWdoRGF0YSkge1xuICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLl9nZXREYXRhRnJvbUJ1ZmZlcihzdGFydCwgZW5kKTtcblxuICAgICAgICB2YXIgZG9uZSA9IHZhbHVlID09IG51bGwgPyB0aGlzLl9kb25lIDogZmFsc2U7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoe1xuICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICBkb25lOiBkb25lXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5fcmVhZGVyLnJlYWQoKS50aGVuKGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IF9yZWYudmFsdWUsXG4gICAgICAgICAgICBkb25lID0gX3JlZi5kb25lO1xuXG4gICAgICAgIGlmIChkb25lKSB7XG4gICAgICAgICAgX3RoaXMuX2RvbmUgPSB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKF90aGlzLl9idWZmZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIF90aGlzLl9idWZmZXIgPSB2YWx1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfdGhpcy5fYnVmZmVyID0gY29uY2F0KF90aGlzLl9idWZmZXIsIHZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBfdGhpcy5fcmVhZFVudGlsRW5vdWdoRGF0YU9yRG9uZShzdGFydCwgZW5kKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJfZ2V0RGF0YUZyb21CdWZmZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2dldERhdGFGcm9tQnVmZmVyKHN0YXJ0LCBlbmQpIHtcbiAgICAgIC8vIFJlbW92ZSBkYXRhIGZyb20gYnVmZmVyIGJlZm9yZSBgc3RhcnRgLlxuICAgICAgLy8gRGF0YSBtaWdodCBiZSByZXJlYWQgZnJvbSB0aGUgYnVmZmVyIGlmIGFuIHVwbG9hZCBmYWlscywgc28gd2UgY2FuIG9ubHlcbiAgICAgIC8vIHNhZmVseSBkZWxldGUgZGF0YSB3aGVuIGl0IGNvbWVzICpiZWZvcmUqIHdoYXQgaXMgY3VycmVudGx5IGJlaW5nIHJlYWQuXG4gICAgICBpZiAoc3RhcnQgPiB0aGlzLl9idWZmZXJPZmZzZXQpIHtcbiAgICAgICAgdGhpcy5fYnVmZmVyID0gdGhpcy5fYnVmZmVyLnNsaWNlKHN0YXJ0IC0gdGhpcy5fYnVmZmVyT2Zmc2V0KTtcbiAgICAgICAgdGhpcy5fYnVmZmVyT2Zmc2V0ID0gc3RhcnQ7XG4gICAgICB9IC8vIElmIHRoZSBidWZmZXIgaXMgZW1wdHkgYWZ0ZXIgcmVtb3Zpbmcgb2xkIGRhdGEsIGFsbCBkYXRhIGhhcyBiZWVuIHJlYWQuXG5cblxuICAgICAgdmFyIGhhc0FsbERhdGFCZWVuUmVhZCA9IGxlbih0aGlzLl9idWZmZXIpID09PSAwO1xuXG4gICAgICBpZiAodGhpcy5fZG9uZSAmJiBoYXNBbGxEYXRhQmVlblJlYWQpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9IC8vIFdlIGFscmVhZHkgcmVtb3ZlZCBkYXRhIGJlZm9yZSBgc3RhcnRgLCBzbyB3ZSBqdXN0IHJldHVybiB0aGUgZmlyc3RcbiAgICAgIC8vIGNodW5rIGZyb20gdGhlIGJ1ZmZlci5cblxuXG4gICAgICByZXR1cm4gdGhpcy5fYnVmZmVyLnNsaWNlKDAsIGVuZCAtIHN0YXJ0KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY2xvc2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2xvc2UoKSB7XG4gICAgICBpZiAodGhpcy5fcmVhZGVyLmNhbmNlbCkge1xuICAgICAgICB0aGlzLl9yZWFkZXIuY2FuY2VsKCk7XG4gICAgICB9XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFN0cmVhbVNvdXJjZTtcbn0oKTtcblxuZnVuY3Rpb24gbGVuKGJsb2JPckFycmF5KSB7XG4gIGlmIChibG9iT3JBcnJheSA9PT0gdW5kZWZpbmVkKSByZXR1cm4gMDtcbiAgaWYgKGJsb2JPckFycmF5LnNpemUgIT09IHVuZGVmaW5lZCkgcmV0dXJuIGJsb2JPckFycmF5LnNpemU7XG4gIHJldHVybiBibG9iT3JBcnJheS5sZW5ndGg7XG59XG4vKlxuICBUeXBlZCBhcnJheXMgYW5kIGJsb2JzIGRvbid0IGhhdmUgYSBjb25jYXQgbWV0aG9kLlxuICBUaGlzIGZ1bmN0aW9uIGhlbHBzIFN0cmVhbVNvdXJjZSBhY2N1bXVsYXRlIGRhdGEgdG8gcmVhY2ggY2h1bmtTaXplLlxuKi9cblxuXG5mdW5jdGlvbiBjb25jYXQoYSwgYikge1xuICBpZiAoYS5jb25jYXQpIHtcbiAgICAvLyBJcyBgYWAgYW4gQXJyYXk/XG4gICAgcmV0dXJuIGEuY29uY2F0KGIpO1xuICB9XG5cbiAgaWYgKGEgaW5zdGFuY2VvZiBCbG9iKSB7XG4gICAgcmV0dXJuIG5ldyBCbG9iKFthLCBiXSwge1xuICAgICAgdHlwZTogYS50eXBlXG4gICAgfSk7XG4gIH1cblxuICBpZiAoYS5zZXQpIHtcbiAgICAvLyBJcyBgYWAgYSB0eXBlZCBhcnJheT9cbiAgICB2YXIgYyA9IG5ldyBhLmNvbnN0cnVjdG9yKGEubGVuZ3RoICsgYi5sZW5ndGgpO1xuICAgIGMuc2V0KGEpO1xuICAgIGMuc2V0KGIsIGEubGVuZ3RoKTtcbiAgICByZXR1cm4gYztcbiAgfVxuXG4gIHRocm93IG5ldyBFcnJvcignVW5rbm93biBkYXRhIHR5cGUnKTtcbn1cblxudmFyIEZpbGVSZWFkZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBGaWxlUmVhZGVyKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBGaWxlUmVhZGVyKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhGaWxlUmVhZGVyLCBbe1xuICAgIGtleTogXCJvcGVuRmlsZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvcGVuRmlsZShpbnB1dCwgY2h1bmtTaXplKSB7XG4gICAgICAvLyBJbiBSZWFjdCBOYXRpdmUsIHdoZW4gdXNlciBzZWxlY3RzIGEgZmlsZSwgaW5zdGVhZCBvZiBhIEZpbGUgb3IgQmxvYixcbiAgICAgIC8vIHlvdSB1c3VhbGx5IGdldCBhIGZpbGUgb2JqZWN0IHt9IHdpdGggYSB1cmkgcHJvcGVydHkgdGhhdCBjb250YWluc1xuICAgICAgLy8gYSBsb2NhbCBwYXRoIHRvIHRoZSBmaWxlLiBXZSB1c2UgWE1MSHR0cFJlcXVlc3QgdG8gZmV0Y2hcbiAgICAgIC8vIHRoZSBmaWxlIGJsb2IsIGJlZm9yZSB1cGxvYWRpbmcgd2l0aCB0dXMuXG4gICAgICBpZiAoKDAsIF9pc1JlYWN0TmF0aXZlLmRlZmF1bHQpKCkgJiYgaW5wdXQgJiYgdHlwZW9mIGlucHV0LnVyaSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuICgwLCBfdXJpVG9CbG9iLmRlZmF1bHQpKGlucHV0LnVyaSkudGhlbihmdW5jdGlvbiAoYmxvYikge1xuICAgICAgICAgIHJldHVybiBuZXcgRmlsZVNvdXJjZShibG9iKTtcbiAgICAgICAgfSlbXCJjYXRjaFwiXShmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidHVzOiBjYW5ub3QgZmV0Y2ggYGZpbGUudXJpYCBhcyBCbG9iLCBtYWtlIHN1cmUgdGhlIHVyaSBpcyBjb3JyZWN0IGFuZCBhY2Nlc3NpYmxlLiBcIi5jb25jYXQoZXJyKSk7XG4gICAgICAgIH0pO1xuICAgICAgfSAvLyBTaW5jZSB3ZSBlbXVsYXRlIHRoZSBCbG9iIHR5cGUgaW4gb3VyIHRlc3RzIChub3QgYWxsIHRhcmdldCBicm93c2Vyc1xuICAgICAgLy8gc3VwcG9ydCBpdCksIHdlIGNhbm5vdCB1c2UgYGluc3RhbmNlb2ZgIGZvciB0ZXN0aW5nIHdoZXRoZXIgdGhlIGlucHV0IHZhbHVlXG4gICAgICAvLyBjYW4gYmUgaGFuZGxlZC4gSW5zdGVhZCwgd2Ugc2ltcGx5IGNoZWNrIGlzIHRoZSBzbGljZSgpIGZ1bmN0aW9uIGFuZCB0aGVcbiAgICAgIC8vIHNpemUgcHJvcGVydHkgYXJlIGF2YWlsYWJsZS5cblxuXG4gICAgICBpZiAodHlwZW9mIGlucHV0LnNsaWNlID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBpbnB1dC5zaXplICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5ldyBGaWxlU291cmNlKGlucHV0KSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgaW5wdXQucmVhZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBjaHVua1NpemUgPSArY2h1bmtTaXplO1xuXG4gICAgICAgIGlmICghaXNGaW5pdGUoY2h1bmtTaXplKSkge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoJ2Nhbm5vdCBjcmVhdGUgc291cmNlIGZvciBzdHJlYW0gd2l0aG91dCBhIGZpbml0ZSB2YWx1ZSBmb3IgdGhlIGBjaHVua1NpemVgIG9wdGlvbicpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobmV3IFN0cmVhbVNvdXJjZShpbnB1dCwgY2h1bmtTaXplKSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoJ3NvdXJjZSBvYmplY3QgbWF5IG9ubHkgYmUgYW4gaW5zdGFuY2Ugb2YgRmlsZSwgQmxvYiwgb3IgUmVhZGVyIGluIHRoaXMgZW52aXJvbm1lbnQnKSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEZpbGVSZWFkZXI7XG59KCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IEZpbGVSZWFkZXI7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBmaW5nZXJwcmludDtcblxudmFyIF9pc1JlYWN0TmF0aXZlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9pc1JlYWN0TmF0aXZlXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLy8gVE9ETzogRGlmZmVyZW5jaWF0ZSBiZXR3ZWVuIGlucHV0IHR5cGVzXG5cbi8qKlxuICogR2VuZXJhdGUgYSBmaW5nZXJwcmludCBmb3IgYSBmaWxlIHdoaWNoIHdpbGwgYmUgdXNlZCB0aGUgc3RvcmUgdGhlIGVuZHBvaW50XG4gKlxuICogQHBhcmFtIHtGaWxlfSBmaWxlXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqL1xuZnVuY3Rpb24gZmluZ2VycHJpbnQoZmlsZSwgb3B0aW9ucykge1xuICBpZiAoKDAsIF9pc1JlYWN0TmF0aXZlLmRlZmF1bHQpKCkpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlYWN0TmF0aXZlRmluZ2VycHJpbnQoZmlsZSwgb3B0aW9ucykpO1xuICB9XG5cbiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShbJ3R1cy1icicsIGZpbGUubmFtZSwgZmlsZS50eXBlLCBmaWxlLnNpemUsIGZpbGUubGFzdE1vZGlmaWVkLCBvcHRpb25zLmVuZHBvaW50XS5qb2luKCctJykpO1xufVxuXG5mdW5jdGlvbiByZWFjdE5hdGl2ZUZpbmdlcnByaW50KGZpbGUsIG9wdGlvbnMpIHtcbiAgdmFyIGV4aWZIYXNoID0gZmlsZS5leGlmID8gaGFzaENvZGUoSlNPTi5zdHJpbmdpZnkoZmlsZS5leGlmKSkgOiAnbm9leGlmJztcbiAgcmV0dXJuIFsndHVzLXJuJywgZmlsZS5uYW1lIHx8ICdub25hbWUnLCBmaWxlLnNpemUgfHwgJ25vc2l6ZScsIGV4aWZIYXNoLCBvcHRpb25zLmVuZHBvaW50XS5qb2luKCcvJyk7XG59XG5cbmZ1bmN0aW9uIGhhc2hDb2RlKHN0cikge1xuICAvLyBmcm9tIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS84ODMxOTM3LzE1MTY2NlxuICB2YXIgaGFzaCA9IDA7XG5cbiAgaWYgKHN0ci5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gaGFzaDtcbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIF9jaGFyID0gc3RyLmNoYXJDb2RlQXQoaSk7XG5cbiAgICBoYXNoID0gKGhhc2ggPDwgNSkgLSBoYXNoICsgX2NoYXI7XG4gICAgaGFzaCAmPSBoYXNoOyAvLyBDb252ZXJ0IHRvIDMyYml0IGludGVnZXJcbiAgfVxuXG4gIHJldHVybiBoYXNoO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICByZXR1cm4gQ29uc3RydWN0b3I7XG59XG4vKiBnbG9iYWwgd2luZG93ICovXG5cblxudmFyIFhIUkh0dHBTdGFjayA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFhIUkh0dHBTdGFjaygpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgWEhSSHR0cFN0YWNrKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhYSFJIdHRwU3RhY2ssIFt7XG4gICAga2V5OiBcImNyZWF0ZVJlcXVlc3RcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlUmVxdWVzdChtZXRob2QsIHVybCkge1xuICAgICAgcmV0dXJuIG5ldyBSZXF1ZXN0KG1ldGhvZCwgdXJsKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0TmFtZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXROYW1lKCkge1xuICAgICAgcmV0dXJuICdYSFJIdHRwU3RhY2snO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBYSFJIdHRwU3RhY2s7XG59KCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFhIUkh0dHBTdGFjaztcblxudmFyIFJlcXVlc3QgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBSZXF1ZXN0KG1ldGhvZCwgdXJsKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJlcXVlc3QpO1xuXG4gICAgdGhpcy5feGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgICB0aGlzLl94aHIub3BlbihtZXRob2QsIHVybCwgdHJ1ZSk7XG5cbiAgICB0aGlzLl9tZXRob2QgPSBtZXRob2Q7XG4gICAgdGhpcy5fdXJsID0gdXJsO1xuICAgIHRoaXMuX2hlYWRlcnMgPSB7fTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhSZXF1ZXN0LCBbe1xuICAgIGtleTogXCJnZXRNZXRob2RcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0TWV0aG9kKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX21ldGhvZDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0VVJMXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFVSTCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl91cmw7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInNldEhlYWRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRIZWFkZXIoaGVhZGVyLCB2YWx1ZSkge1xuICAgICAgdGhpcy5feGhyLnNldFJlcXVlc3RIZWFkZXIoaGVhZGVyLCB2YWx1ZSk7XG5cbiAgICAgIHRoaXMuX2hlYWRlcnNbaGVhZGVyXSA9IHZhbHVlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRIZWFkZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0SGVhZGVyKGhlYWRlcikge1xuICAgICAgcmV0dXJuIHRoaXMuX2hlYWRlcnNbaGVhZGVyXTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic2V0UHJvZ3Jlc3NIYW5kbGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldFByb2dyZXNzSGFuZGxlcihwcm9ncmVzc0hhbmRsZXIpIHtcbiAgICAgIC8vIFRlc3Qgc3VwcG9ydCBmb3IgcHJvZ3Jlc3MgZXZlbnRzIGJlZm9yZSBhdHRhY2hpbmcgYW4gZXZlbnQgbGlzdGVuZXJcbiAgICAgIGlmICghKCd1cGxvYWQnIGluIHRoaXMuX3hocikpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl94aHIudXBsb2FkLm9ucHJvZ3Jlc3MgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICBpZiAoIWUubGVuZ3RoQ29tcHV0YWJsZSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHByb2dyZXNzSGFuZGxlcihlLmxvYWRlZCk7XG4gICAgICB9O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzZW5kXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNlbmQoKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICB2YXIgYm9keSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogbnVsbDtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIF90aGlzLl94aHIub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJlc29sdmUobmV3IFJlc3BvbnNlKF90aGlzLl94aHIpKTtcbiAgICAgICAgfTtcblxuICAgICAgICBfdGhpcy5feGhyLm9uZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgIH07XG5cbiAgICAgICAgX3RoaXMuX3hoci5zZW5kKGJvZHkpO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImFib3J0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFib3J0KCkge1xuICAgICAgdGhpcy5feGhyLmFib3J0KCk7XG5cbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0VW5kZXJseWluZ09iamVjdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRVbmRlcmx5aW5nT2JqZWN0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3hocjtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUmVxdWVzdDtcbn0oKTtcblxudmFyIFJlc3BvbnNlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUmVzcG9uc2UoeGhyKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJlc3BvbnNlKTtcblxuICAgIHRoaXMuX3hociA9IHhocjtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhSZXNwb25zZSwgW3tcbiAgICBrZXk6IFwiZ2V0U3RhdHVzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFN0YXR1cygpIHtcbiAgICAgIHJldHVybiB0aGlzLl94aHIuc3RhdHVzO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRIZWFkZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0SGVhZGVyKGhlYWRlcikge1xuICAgICAgcmV0dXJuIHRoaXMuX3hoci5nZXRSZXNwb25zZUhlYWRlcihoZWFkZXIpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRCb2R5XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldEJvZHkoKSB7XG4gICAgICByZXR1cm4gdGhpcy5feGhyLnJlc3BvbnNlVGV4dDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0VW5kZXJseWluZ09iamVjdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRVbmRlcmx5aW5nT2JqZWN0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3hocjtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUmVzcG9uc2U7XG59KCk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJlbmFibGVEZWJ1Z0xvZ1wiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfbG9nZ2VyLmVuYWJsZURlYnVnTG9nO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImNhblN0b3JlVVJMc1wiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfdXJsU3RvcmFnZS5jYW5TdG9yZVVSTHM7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiSHR0cFN0YWNrXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9odHRwU3RhY2suZGVmYXVsdDtcbiAgfVxufSk7XG5leHBvcnRzLmlzU3VwcG9ydGVkID0gZXhwb3J0cy5kZWZhdWx0T3B0aW9ucyA9IGV4cG9ydHMuVXBsb2FkID0gdm9pZCAwO1xuXG52YXIgX3VwbG9hZCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3VwbG9hZFwiKSk7XG5cbnZhciBfbm9vcFVybFN0b3JhZ2UgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9ub29wVXJsU3RvcmFnZVwiKSk7XG5cbnZhciBfbG9nZ2VyID0gcmVxdWlyZShcIi4uL2xvZ2dlclwiKTtcblxudmFyIF91cmxTdG9yYWdlID0gcmVxdWlyZShcIi4vdXJsU3RvcmFnZVwiKTtcblxudmFyIF9odHRwU3RhY2sgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2h0dHBTdGFja1wiKSk7XG5cbnZhciBfZmlsZVJlYWRlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vZmlsZVJlYWRlclwiKSk7XG5cbnZhciBfZmluZ2VycHJpbnQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2ZpbmdlcnByaW50XCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiO1xuXG4gIGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikge1xuICAgIF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICAgICAgcmV0dXJuIHR5cGVvZiBvYmo7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgICAgIHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gX3R5cGVvZihvYmopO1xufVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICByZXR1cm4gQ29uc3RydWN0b3I7XG59XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpO1xuICB9XG5cbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgY29uc3RydWN0b3I6IHtcbiAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfVxuICB9KTtcbiAgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7XG59XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gIF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICAgIG8uX19wcm90b19fID0gcDtcbiAgICByZXR1cm4gbztcbiAgfTtcblxuICByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApO1xufVxuXG5mdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSxcbiAgICAgICAgcmVzdWx0O1xuXG4gICAgaWYgKF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSkge1xuICAgICAgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjtcblxuICAgICAgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkge1xuICBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkge1xuICAgIHJldHVybiBjYWxsO1xuICB9XG5cbiAgcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7XG59XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikge1xuICBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7XG4gICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICB9XG5cbiAgcmV0dXJuIHNlbGY7XG59XG5cbmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7XG4gIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTtcbiAgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTtcbiAgaWYgKHR5cGVvZiBQcm94eSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gdHJ1ZTtcblxuICB0cnkge1xuICAgIERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSwgW10sIGZ1bmN0aW9uICgpIHt9KSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHtcbiAgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHtcbiAgICByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pO1xuICB9O1xuICByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pO1xufVxuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpO1xuXG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7XG4gICAgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkge1xuICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7XG4gICAgfSk7XG4gICAga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpO1xuICB9XG5cbiAgcmV0dXJuIGtleXM7XG59XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307XG5cbiAgICBpZiAoaSAlIDIpIHtcbiAgICAgIG93bktleXMoT2JqZWN0KHNvdXJjZSksIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuLyogZ2xvYmFsIHdpbmRvdyAqL1xuXG5cbnZhciBkZWZhdWx0T3B0aW9ucyA9IF9vYmplY3RTcHJlYWQoe30sIF91cGxvYWQuZGVmYXVsdC5kZWZhdWx0T3B0aW9ucywge1xuICBodHRwU3RhY2s6IG5ldyBfaHR0cFN0YWNrLmRlZmF1bHQoKSxcbiAgZmlsZVJlYWRlcjogbmV3IF9maWxlUmVhZGVyLmRlZmF1bHQoKSxcbiAgdXJsU3RvcmFnZTogX3VybFN0b3JhZ2UuY2FuU3RvcmVVUkxzID8gbmV3IF91cmxTdG9yYWdlLldlYlN0b3JhZ2VVcmxTdG9yYWdlKCkgOiBuZXcgX25vb3BVcmxTdG9yYWdlLmRlZmF1bHQoKSxcbiAgZmluZ2VycHJpbnQ6IF9maW5nZXJwcmludC5kZWZhdWx0XG59KTtcblxuZXhwb3J0cy5kZWZhdWx0T3B0aW9ucyA9IGRlZmF1bHRPcHRpb25zO1xuXG52YXIgVXBsb2FkID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQmFzZVVwbG9hZCkge1xuICBfaW5oZXJpdHMoVXBsb2FkLCBfQmFzZVVwbG9hZCk7XG5cbiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihVcGxvYWQpO1xuXG4gIGZ1bmN0aW9uIFVwbG9hZCgpIHtcbiAgICB2YXIgZmlsZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogbnVsbDtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVXBsb2FkKTtcblxuICAgIG9wdGlvbnMgPSBfb2JqZWN0U3ByZWFkKHt9LCBkZWZhdWx0T3B0aW9ucywge30sIG9wdGlvbnMpO1xuICAgIHJldHVybiBfc3VwZXIuY2FsbCh0aGlzLCBmaWxlLCBvcHRpb25zKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhVcGxvYWQsIG51bGwsIFt7XG4gICAga2V5OiBcInRlcm1pbmF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0ZXJtaW5hdGUodXJsLCBvcHRpb25zLCBjYikge1xuICAgICAgb3B0aW9ucyA9IF9vYmplY3RTcHJlYWQoe30sIGRlZmF1bHRPcHRpb25zLCB7fSwgb3B0aW9ucyk7XG4gICAgICByZXR1cm4gX3VwbG9hZC5kZWZhdWx0LnRlcm1pbmF0ZSh1cmwsIG9wdGlvbnMsIGNiKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gVXBsb2FkO1xufShfdXBsb2FkLmRlZmF1bHQpO1xuXG5leHBvcnRzLlVwbG9hZCA9IFVwbG9hZDtcbnZhciBfd2luZG93ID0gd2luZG93LFxuICAgIFhNTEh0dHBSZXF1ZXN0ID0gX3dpbmRvdy5YTUxIdHRwUmVxdWVzdCxcbiAgICBCbG9iID0gX3dpbmRvdy5CbG9iO1xudmFyIGlzU3VwcG9ydGVkID0gWE1MSHR0cFJlcXVlc3QgJiYgQmxvYiAmJiB0eXBlb2YgQmxvYi5wcm90b3R5cGUuc2xpY2UgPT09ICdmdW5jdGlvbic7XG5leHBvcnRzLmlzU3VwcG9ydGVkID0gaXNTdXBwb3J0ZWQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBpc0NvcmRvdmEgPSBmdW5jdGlvbiBpc0NvcmRvdmEoKSB7XG4gIHJldHVybiB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnICYmICh0eXBlb2Ygd2luZG93LlBob25lR2FwICE9ICd1bmRlZmluZWQnIHx8IHR5cGVvZiB3aW5kb3cuQ29yZG92YSAhPSAndW5kZWZpbmVkJyB8fCB0eXBlb2Ygd2luZG93LmNvcmRvdmEgIT0gJ3VuZGVmaW5lZCcpO1xufTtcblxudmFyIF9kZWZhdWx0ID0gaXNDb3Jkb3ZhO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBpc1JlYWN0TmF0aXZlID0gZnVuY3Rpb24gaXNSZWFjdE5hdGl2ZSgpIHtcbiAgcmV0dXJuIHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ3N0cmluZycgJiYgbmF2aWdhdG9yLnByb2R1Y3QudG9Mb3dlckNhc2UoKSA9PT0gJ3JlYWN0bmF0aXZlJztcbn07XG5cbnZhciBfZGVmYXVsdCA9IGlzUmVhY3ROYXRpdmU7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHJlYWRBc0J5dGVBcnJheTtcblxuLyoqXG4gKiByZWFkQXNCeXRlQXJyYXkgY29udmVydHMgYSBGaWxlIG9iamVjdCB0byBhIFVpbnQ4QXJyYXkuXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIG9ubHkgdXNlZCBvbiB0aGUgQXBhY2hlIENvcmRvdmEgcGxhdGZvcm0uXG4gKiBTZWUgaHR0cHM6Ly9jb3Jkb3ZhLmFwYWNoZS5vcmcvZG9jcy9lbi9sYXRlc3QvcmVmZXJlbmNlL2NvcmRvdmEtcGx1Z2luLWZpbGUvaW5kZXguaHRtbCNyZWFkLWEtZmlsZVxuICovXG5mdW5jdGlvbiByZWFkQXNCeXRlQXJyYXkoY2h1bmspIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcblxuICAgIHJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgdmFsdWUgPSBuZXcgVWludDhBcnJheShyZWFkZXIucmVzdWx0KTtcbiAgICAgIHJlc29sdmUoe1xuICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICByZWFkZXIub25lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgIHJlamVjdChlcnIpO1xuICAgIH07XG5cbiAgICByZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoY2h1bmspO1xuICB9KTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHVyaVRvQmxvYjtcblxuLyoqXG4gKiB1cmlUb0Jsb2IgcmVzb2x2ZXMgYSBVUkkgdG8gYSBCbG9iIG9iamVjdC4gVGhpcyBpcyB1c2VkIGZvclxuICogUmVhY3QgTmF0aXZlIHRvIHJldHJpZXZlIGEgZmlsZSAoaWRlbnRpZmllZCBieSBhIGZpbGU6Ly9cbiAqIFVSSSkgYXMgYSBibG9iLlxuICovXG5mdW5jdGlvbiB1cmlUb0Jsb2IodXJpKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgIHhoci5yZXNwb25zZVR5cGUgPSAnYmxvYic7XG5cbiAgICB4aHIub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGJsb2IgPSB4aHIucmVzcG9uc2U7XG4gICAgICByZXNvbHZlKGJsb2IpO1xuICAgIH07XG5cbiAgICB4aHIub25lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgIHJlamVjdChlcnIpO1xuICAgIH07XG5cbiAgICB4aHIub3BlbignR0VUJywgdXJpKTtcbiAgICB4aHIuc2VuZCgpO1xuICB9KTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuV2ViU3RvcmFnZVVybFN0b3JhZ2UgPSBleHBvcnRzLmNhblN0b3JlVVJMcyA9IHZvaWQgMDtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgcmV0dXJuIENvbnN0cnVjdG9yO1xufVxuLyogZ2xvYmFsIHdpbmRvdywgbG9jYWxTdG9yYWdlICovXG5cblxudmFyIGhhc1N0b3JhZ2UgPSBmYWxzZTtcblxudHJ5IHtcbiAgaGFzU3RvcmFnZSA9ICdsb2NhbFN0b3JhZ2UnIGluIHdpbmRvdzsgLy8gQXR0ZW1wdCB0byBzdG9yZSBhbmQgcmVhZCBlbnRyaWVzIGZyb20gdGhlIGxvY2FsIHN0b3JhZ2UgdG8gZGV0ZWN0IFByaXZhdGVcbiAgLy8gTW9kZSBvbiBTYWZhcmkgb24gaU9TIChzZWUgIzQ5KVxuXG4gIHZhciBrZXkgPSAndHVzU3VwcG9ydCc7XG4gIGxvY2FsU3RvcmFnZS5zZXRJdGVtKGtleSwgbG9jYWxTdG9yYWdlLmdldEl0ZW0oa2V5KSk7XG59IGNhdGNoIChlKSB7XG4gIC8vIElmIHdlIHRyeSB0byBhY2Nlc3MgbG9jYWxTdG9yYWdlIGluc2lkZSBhIHNhbmRib3hlZCBpZnJhbWUsIGEgU2VjdXJpdHlFcnJvclxuICAvLyBpcyB0aHJvd24uIFdoZW4gaW4gcHJpdmF0ZSBtb2RlIG9uIGlPUyBTYWZhcmksIGEgUXVvdGFFeGNlZWRlZEVycm9yIGlzXG4gIC8vIHRocm93biAoc2VlICM0OSlcbiAgaWYgKGUuY29kZSA9PT0gZS5TRUNVUklUWV9FUlIgfHwgZS5jb2RlID09PSBlLlFVT1RBX0VYQ0VFREVEX0VSUikge1xuICAgIGhhc1N0b3JhZ2UgPSBmYWxzZTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBlO1xuICB9XG59XG5cbnZhciBjYW5TdG9yZVVSTHMgPSBoYXNTdG9yYWdlO1xuZXhwb3J0cy5jYW5TdG9yZVVSTHMgPSBjYW5TdG9yZVVSTHM7XG5cbnZhciBXZWJTdG9yYWdlVXJsU3RvcmFnZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFdlYlN0b3JhZ2VVcmxTdG9yYWdlKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBXZWJTdG9yYWdlVXJsU3RvcmFnZSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoV2ViU3RvcmFnZVVybFN0b3JhZ2UsIFt7XG4gICAga2V5OiBcImZpbmRBbGxVcGxvYWRzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZpbmRBbGxVcGxvYWRzKCkge1xuICAgICAgdmFyIHJlc3VsdHMgPSB0aGlzLl9maW5kRW50cmllcygndHVzOjonKTtcblxuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShyZXN1bHRzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZmluZFVwbG9hZHNCeUZpbmdlcnByaW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZpbmRVcGxvYWRzQnlGaW5nZXJwcmludChmaW5nZXJwcmludCkge1xuICAgICAgdmFyIHJlc3VsdHMgPSB0aGlzLl9maW5kRW50cmllcyhcInR1czo6XCIuY29uY2F0KGZpbmdlcnByaW50LCBcIjo6XCIpKTtcblxuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShyZXN1bHRzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVtb3ZlVXBsb2FkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZVVwbG9hZCh1cmxTdG9yYWdlS2V5KSB7XG4gICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSh1cmxTdG9yYWdlS2V5KTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiYWRkVXBsb2FkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFkZFVwbG9hZChmaW5nZXJwcmludCwgdXBsb2FkKSB7XG4gICAgICB2YXIgaWQgPSBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiAxZTEyKTtcbiAgICAgIHZhciBrZXkgPSBcInR1czo6XCIuY29uY2F0KGZpbmdlcnByaW50LCBcIjo6XCIpLmNvbmNhdChpZCk7XG4gICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShrZXksIEpTT04uc3RyaW5naWZ5KHVwbG9hZCkpO1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShrZXkpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJfZmluZEVudHJpZXNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2ZpbmRFbnRyaWVzKHByZWZpeCkge1xuICAgICAgdmFyIHJlc3VsdHMgPSBbXTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsb2NhbFN0b3JhZ2UubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIF9rZXkgPSBsb2NhbFN0b3JhZ2Uua2V5KGkpO1xuXG4gICAgICAgIGlmIChfa2V5LmluZGV4T2YocHJlZml4KSAhPT0gMCkgY29udGludWU7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB2YXIgdXBsb2FkID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbShfa2V5KSk7XG4gICAgICAgICAgdXBsb2FkLnVybFN0b3JhZ2VLZXkgPSBfa2V5O1xuICAgICAgICAgIHJlc3VsdHMucHVzaCh1cGxvYWQpO1xuICAgICAgICB9IGNhdGNoIChlKSB7Ly8gVGhlIEpTT04gcGFyc2UgZXJyb3IgaXMgaW50ZW50aW9uYWxseSBpZ25vcmVkIGhlcmUsIHNvIGEgbWFsZm9ybWVkXG4gICAgICAgICAgLy8gZW50cnkgaW4gdGhlIHN0b3JhZ2UgY2Fubm90IHByZXZlbnQgYW4gdXBsb2FkLlxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXN1bHRzO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBXZWJTdG9yYWdlVXJsU3RvcmFnZTtcbn0oKTtcblxuZXhwb3J0cy5XZWJTdG9yYWdlVXJsU3RvcmFnZSA9IFdlYlN0b3JhZ2VVcmxTdG9yYWdlOyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7XG5cbiAgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7XG4gICAgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIG9iajtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICAgICAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBfdHlwZW9mKG9iaik7XG59XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpO1xuICB9XG5cbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgY29uc3RydWN0b3I6IHtcbiAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfVxuICB9KTtcbiAgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7XG59XG5cbmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIFN1cGVyID0gX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLFxuICAgICAgICByZXN1bHQ7XG5cbiAgICBpZiAoX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpKSB7XG4gICAgICB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yO1xuXG4gICAgICByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7XG4gIGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7XG4gICAgcmV0dXJuIGNhbGw7XG4gIH1cblxuICByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTtcbn1cblxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7XG4gIGlmIChzZWxmID09PSB2b2lkIDApIHtcbiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gIH1cblxuICByZXR1cm4gc2VsZjtcbn1cblxuZnVuY3Rpb24gX3dyYXBOYXRpdmVTdXBlcihDbGFzcykge1xuICB2YXIgX2NhY2hlID0gdHlwZW9mIE1hcCA9PT0gXCJmdW5jdGlvblwiID8gbmV3IE1hcCgpIDogdW5kZWZpbmVkO1xuXG4gIF93cmFwTmF0aXZlU3VwZXIgPSBmdW5jdGlvbiBfd3JhcE5hdGl2ZVN1cGVyKENsYXNzKSB7XG4gICAgaWYgKENsYXNzID09PSBudWxsIHx8ICFfaXNOYXRpdmVGdW5jdGlvbihDbGFzcykpIHJldHVybiBDbGFzcztcblxuICAgIGlmICh0eXBlb2YgQ2xhc3MgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgX2NhY2hlICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBpZiAoX2NhY2hlLmhhcyhDbGFzcykpIHJldHVybiBfY2FjaGUuZ2V0KENsYXNzKTtcblxuICAgICAgX2NhY2hlLnNldChDbGFzcywgV3JhcHBlcik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gV3JhcHBlcigpIHtcbiAgICAgIHJldHVybiBfY29uc3RydWN0KENsYXNzLCBhcmd1bWVudHMsIF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3Rvcik7XG4gICAgfVxuXG4gICAgV3JhcHBlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKENsYXNzLnByb3RvdHlwZSwge1xuICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgdmFsdWU6IFdyYXBwZXIsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihXcmFwcGVyLCBDbGFzcyk7XG4gIH07XG5cbiAgcmV0dXJuIF93cmFwTmF0aXZlU3VwZXIoQ2xhc3MpO1xufVxuXG5mdW5jdGlvbiBfY29uc3RydWN0KFBhcmVudCwgYXJncywgQ2xhc3MpIHtcbiAgaWYgKF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSkge1xuICAgIF9jb25zdHJ1Y3QgPSBSZWZsZWN0LmNvbnN0cnVjdDtcbiAgfSBlbHNlIHtcbiAgICBfY29uc3RydWN0ID0gZnVuY3Rpb24gX2NvbnN0cnVjdChQYXJlbnQsIGFyZ3MsIENsYXNzKSB7XG4gICAgICB2YXIgYSA9IFtudWxsXTtcbiAgICAgIGEucHVzaC5hcHBseShhLCBhcmdzKTtcbiAgICAgIHZhciBDb25zdHJ1Y3RvciA9IEZ1bmN0aW9uLmJpbmQuYXBwbHkoUGFyZW50LCBhKTtcbiAgICAgIHZhciBpbnN0YW5jZSA9IG5ldyBDb25zdHJ1Y3RvcigpO1xuICAgICAgaWYgKENsYXNzKSBfc2V0UHJvdG90eXBlT2YoaW5zdGFuY2UsIENsYXNzLnByb3RvdHlwZSk7XG4gICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBfY29uc3RydWN0LmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7XG4gIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTtcbiAgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTtcbiAgaWYgKHR5cGVvZiBQcm94eSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gdHJ1ZTtcblxuICB0cnkge1xuICAgIERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSwgW10sIGZ1bmN0aW9uICgpIHt9KSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2lzTmF0aXZlRnVuY3Rpb24oZm4pIHtcbiAgcmV0dXJuIEZ1bmN0aW9uLnRvU3RyaW5nLmNhbGwoZm4pLmluZGV4T2YoXCJbbmF0aXZlIGNvZGVdXCIpICE9PSAtMTtcbn1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gICAgby5fX3Byb3RvX18gPSBwO1xuICAgIHJldHVybiBvO1xuICB9O1xuXG4gIHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7XG59XG5cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XG4gIF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XG4gICAgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTtcbiAgfTtcbiAgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTtcbn1cblxudmFyIERldGFpbGVkRXJyb3IgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9FcnJvcikge1xuICBfaW5oZXJpdHMoRGV0YWlsZWRFcnJvciwgX0Vycm9yKTtcblxuICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKERldGFpbGVkRXJyb3IpO1xuXG4gIGZ1bmN0aW9uIERldGFpbGVkRXJyb3IobWVzc2FnZSkge1xuICAgIHZhciBfdGhpcztcblxuICAgIHZhciBjYXVzaW5nRXJyID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBudWxsO1xuICAgIHZhciByZXEgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IG51bGw7XG4gICAgdmFyIHJlcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogbnVsbDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBEZXRhaWxlZEVycm9yKTtcblxuICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgbWVzc2FnZSk7XG4gICAgX3RoaXMub3JpZ2luYWxSZXF1ZXN0ID0gcmVxO1xuICAgIF90aGlzLm9yaWdpbmFsUmVzcG9uc2UgPSByZXM7XG4gICAgX3RoaXMuY2F1c2luZ0Vycm9yID0gY2F1c2luZ0VycjtcblxuICAgIGlmIChjYXVzaW5nRXJyICE9IG51bGwpIHtcbiAgICAgIG1lc3NhZ2UgKz0gXCIsIGNhdXNlZCBieSBcIi5jb25jYXQoY2F1c2luZ0Vyci50b1N0cmluZygpKTtcbiAgICB9XG5cbiAgICBpZiAocmVxICE9IG51bGwpIHtcbiAgICAgIHZhciByZXF1ZXN0SWQgPSByZXEuZ2V0SGVhZGVyKCdYLVJlcXVlc3QtSUQnKSB8fCAnbi9hJztcbiAgICAgIHZhciBtZXRob2QgPSByZXEuZ2V0TWV0aG9kKCk7XG4gICAgICB2YXIgdXJsID0gcmVxLmdldFVSTCgpO1xuICAgICAgdmFyIHN0YXR1cyA9IHJlcyA/IHJlcy5nZXRTdGF0dXMoKSA6ICduL2EnO1xuICAgICAgdmFyIGJvZHkgPSByZXMgPyByZXMuZ2V0Qm9keSgpIHx8ICcnIDogJ24vYSc7XG4gICAgICBtZXNzYWdlICs9IFwiLCBvcmlnaW5hdGVkIGZyb20gcmVxdWVzdCAobWV0aG9kOiBcIi5jb25jYXQobWV0aG9kLCBcIiwgdXJsOiBcIikuY29uY2F0KHVybCwgXCIsIHJlc3BvbnNlIGNvZGU6IFwiKS5jb25jYXQoc3RhdHVzLCBcIiwgcmVzcG9uc2UgdGV4dDogXCIpLmNvbmNhdChib2R5LCBcIiwgcmVxdWVzdCBpZDogXCIpLmNvbmNhdChyZXF1ZXN0SWQsIFwiKVwiKTtcbiAgICB9XG5cbiAgICBfdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICByZXR1cm4gRGV0YWlsZWRFcnJvcjtcbn0oIC8qI19fUFVSRV9fKi9fd3JhcE5hdGl2ZVN1cGVyKEVycm9yKSk7XG5cbnZhciBfZGVmYXVsdCA9IERldGFpbGVkRXJyb3I7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZW5hYmxlRGVidWdMb2cgPSBlbmFibGVEZWJ1Z0xvZztcbmV4cG9ydHMubG9nID0gbG9nO1xuXG4vKiBlc2xpbnQgbm8tY29uc29sZTogXCJvZmZcIiAqL1xudmFyIGlzRW5hYmxlZCA9IGZhbHNlO1xuXG5mdW5jdGlvbiBlbmFibGVEZWJ1Z0xvZygpIHtcbiAgaXNFbmFibGVkID0gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gbG9nKG1zZykge1xuICBpZiAoIWlzRW5hYmxlZCkgcmV0dXJuO1xuICBjb25zb2xlLmxvZyhtc2cpO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICByZXR1cm4gQ29uc3RydWN0b3I7XG59XG4vKiBlc2xpbnQgbm8tdW51c2VkLXZhcnM6IFwib2ZmXCIgKi9cblxuXG52YXIgTm9vcFVybFN0b3JhZ2UgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBOb29wVXJsU3RvcmFnZSgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTm9vcFVybFN0b3JhZ2UpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKE5vb3BVcmxTdG9yYWdlLCBbe1xuICAgIGtleTogXCJsaXN0QWxsVXBsb2Fkc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsaXN0QWxsVXBsb2FkcygpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoW10pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJmaW5kVXBsb2Fkc0J5RmluZ2VycHJpbnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZmluZFVwbG9hZHNCeUZpbmdlcnByaW50KGZpbmdlcnByaW50KSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKFtdKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVtb3ZlVXBsb2FkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZVVwbG9hZCh1cmxTdG9yYWdlS2V5KSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImFkZFVwbG9hZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRVcGxvYWQoZmluZ2VycHJpbnQsIHVwbG9hZCkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShudWxsKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gTm9vcFVybFN0b3JhZ2U7XG59KCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IE5vb3BVcmxTdG9yYWdlOyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2pzQmFzZSA9IHJlcXVpcmUoXCJqcy1iYXNlNjRcIik7XG5cbnZhciBfdXJsUGFyc2UgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJ1cmwtcGFyc2VcIikpO1xuXG52YXIgX2Vycm9yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9lcnJvclwiKSk7XG5cbnZhciBfbG9nZ2VyID0gcmVxdWlyZShcIi4vbG9nZ2VyXCIpO1xuXG52YXIgX3V1aWQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V1aWRcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpO1xuXG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7XG4gICAgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkge1xuICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7XG4gICAgfSk7XG4gICAga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpO1xuICB9XG5cbiAgcmV0dXJuIGtleXM7XG59XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307XG5cbiAgICBpZiAoaSAlIDIpIHtcbiAgICAgIG93bktleXMoT2JqZWN0KHNvdXJjZSksIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICByZXR1cm4gQ29uc3RydWN0b3I7XG59XG4vKiBnbG9iYWwgd2luZG93ICovXG5cblxudmFyIGRlZmF1bHRPcHRpb25zID0ge1xuICBlbmRwb2ludDogbnVsbCxcbiAgdXBsb2FkVXJsOiBudWxsLFxuICBtZXRhZGF0YToge30sXG4gIGZpbmdlcnByaW50OiBudWxsLFxuICB1cGxvYWRTaXplOiBudWxsLFxuICBvblByb2dyZXNzOiBudWxsLFxuICBvbkNodW5rQ29tcGxldGU6IG51bGwsXG4gIG9uU3VjY2VzczogbnVsbCxcbiAgb25FcnJvcjogbnVsbCxcbiAgX29uVXBsb2FkVXJsQXZhaWxhYmxlOiBudWxsLFxuICBvdmVycmlkZVBhdGNoTWV0aG9kOiBmYWxzZSxcbiAgaGVhZGVyczoge30sXG4gIGFkZFJlcXVlc3RJZDogZmFsc2UsXG4gIG9uQmVmb3JlUmVxdWVzdDogbnVsbCxcbiAgb25BZnRlclJlc3BvbnNlOiBudWxsLFxuICBvblNob3VsZFJldHJ5OiBudWxsLFxuICBjaHVua1NpemU6IEluZmluaXR5LFxuICByZXRyeURlbGF5czogWzAsIDEwMDAsIDMwMDAsIDUwMDBdLFxuICBwYXJhbGxlbFVwbG9hZHM6IDEsXG4gIHN0b3JlRmluZ2VycHJpbnRGb3JSZXN1bWluZzogdHJ1ZSxcbiAgcmVtb3ZlRmluZ2VycHJpbnRPblN1Y2Nlc3M6IGZhbHNlLFxuICB1cGxvYWRMZW5ndGhEZWZlcnJlZDogZmFsc2UsXG4gIHVwbG9hZERhdGFEdXJpbmdDcmVhdGlvbjogZmFsc2UsXG4gIHVybFN0b3JhZ2U6IG51bGwsXG4gIGZpbGVSZWFkZXI6IG51bGwsXG4gIGh0dHBTdGFjazogbnVsbFxufTtcblxudmFyIEJhc2VVcGxvYWQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBCYXNlVXBsb2FkKGZpbGUsIG9wdGlvbnMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQmFzZVVwbG9hZCk7IC8vIFdhcm4gYWJvdXQgcmVtb3ZlZCBvcHRpb25zIGZyb20gcHJldmlvdXMgdmVyc2lvbnNcblxuXG4gICAgaWYgKCdyZXN1bWUnIGluIG9wdGlvbnMpIHtcbiAgICAgIGNvbnNvbGUubG9nKCd0dXM6IFRoZSBgcmVzdW1lYCBvcHRpb24gaGFzIGJlZW4gcmVtb3ZlZCBpbiB0dXMtanMtY2xpZW50IHYyLiBQbGVhc2UgdXNlIHRoZSBVUkwgc3RvcmFnZSBBUEkgaW5zdGVhZC4nKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gICAgfSAvLyBUaGUgZGVmYXVsdCBvcHRpb25zIHdpbGwgYWxyZWFkeSBiZSBhZGRlZCBmcm9tIHRoZSB3cmFwcGVyIGNsYXNzZXMuXG5cblxuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7IC8vIFRoZSBzdG9yYWdlIG1vZHVsZSB1c2VkIHRvIHN0b3JlIFVSTHNcblxuICAgIHRoaXMuX3VybFN0b3JhZ2UgPSB0aGlzLm9wdGlvbnMudXJsU3RvcmFnZTsgLy8gVGhlIHVuZGVybHlpbmcgRmlsZS9CbG9iIG9iamVjdFxuXG4gICAgdGhpcy5maWxlID0gZmlsZTsgLy8gVGhlIFVSTCBhZ2FpbnN0IHdoaWNoIHRoZSBmaWxlIHdpbGwgYmUgdXBsb2FkZWRcblxuICAgIHRoaXMudXJsID0gbnVsbDsgLy8gVGhlIHVuZGVybHlpbmcgcmVxdWVzdCBvYmplY3QgZm9yIHRoZSBjdXJyZW50IFBBVENIIHJlcXVlc3RcblxuICAgIHRoaXMuX3JlcSA9IG51bGw7IC8vIFRoZSBmaW5nZXJwaW5ydCBmb3IgdGhlIGN1cnJlbnQgZmlsZSAoc2V0IGFmdGVyIHN0YXJ0KCkpXG5cbiAgICB0aGlzLl9maW5nZXJwcmludCA9IG51bGw7IC8vIFRoZSBrZXkgdGhhdCB0aGUgVVJMIHN0b3JhZ2UgcmV0dXJuZWQgd2hlbiBzYXZpbmcgYW4gVVJMIHdpdGggYSBmaW5nZXJwcmludCxcblxuICAgIHRoaXMuX3VybFN0b3JhZ2VLZXkgPSBudWxsOyAvLyBUaGUgb2Zmc2V0IHVzZWQgaW4gdGhlIGN1cnJlbnQgUEFUQ0ggcmVxdWVzdFxuXG4gICAgdGhpcy5fb2Zmc2V0ID0gbnVsbDsgLy8gVHJ1ZSBpZiB0aGUgY3VycmVudCBQQVRDSCByZXF1ZXN0IGhhcyBiZWVuIGFib3J0ZWRcblxuICAgIHRoaXMuX2Fib3J0ZWQgPSBmYWxzZTsgLy8gVGhlIGZpbGUncyBzaXplIGluIGJ5dGVzXG5cbiAgICB0aGlzLl9zaXplID0gbnVsbDsgLy8gVGhlIFNvdXJjZSBvYmplY3Qgd2hpY2ggd2lsbCB3cmFwIGFyb3VuZCB0aGUgZ2l2ZW4gZmlsZSBhbmQgcHJvdmlkZXMgdXNcbiAgICAvLyB3aXRoIGEgdW5pZmllZCBpbnRlcmZhY2UgZm9yIGdldHRpbmcgaXRzIHNpemUgYW5kIHNsaWNlIGNodW5rcyBmcm9tIGl0c1xuICAgIC8vIGNvbnRlbnQgYWxsb3dpbmcgdXMgdG8gZWFzaWx5IGhhbmRsZSBGaWxlcywgQmxvYnMsIEJ1ZmZlcnMgYW5kIFN0cmVhbXMuXG5cbiAgICB0aGlzLl9zb3VyY2UgPSBudWxsOyAvLyBUaGUgY3VycmVudCBjb3VudCBvZiBhdHRlbXB0cyB3aGljaCBoYXZlIGJlZW4gbWFkZS4gWmVybyBpbmRpY2F0ZXMgbm9uZS5cblxuICAgIHRoaXMuX3JldHJ5QXR0ZW1wdCA9IDA7IC8vIFRoZSB0aW1lb3V0J3MgSUQgd2hpY2ggaXMgdXNlZCB0byBkZWxheSB0aGUgbmV4dCByZXRyeVxuXG4gICAgdGhpcy5fcmV0cnlUaW1lb3V0ID0gbnVsbDsgLy8gVGhlIG9mZnNldCBvZiB0aGUgcmVtb3RlIHVwbG9hZCBiZWZvcmUgdGhlIGxhdGVzdCBhdHRlbXB0IHdhcyBzdGFydGVkLlxuXG4gICAgdGhpcy5fb2Zmc2V0QmVmb3JlUmV0cnkgPSAwOyAvLyBBbiBhcnJheSBvZiBCYXNlVXBsb2FkIGluc3RhbmNlcyB3aGljaCBhcmUgdXNlZCBmb3IgdXBsb2FkaW5nIHRoZSBkaWZmZXJlbnRcbiAgICAvLyBwYXJ0cywgaWYgdGhlIHBhcmFsbGVsVXBsb2FkcyBvcHRpb24gaXMgdXNlZC5cblxuICAgIHRoaXMuX3BhcmFsbGVsVXBsb2FkcyA9IG51bGw7IC8vIEFuIGFycmF5IG9mIHVwbG9hZCBVUkxzIHdoaWNoIGFyZSB1c2VkIGZvciB1cGxvYWRpbmcgdGhlIGRpZmZlcmVudFxuICAgIC8vIHBhcnRzLCBpZiB0aGUgcGFyYWxsZWxVcGxvYWRzIG9wdGlvbiBpcyB1c2VkLlxuXG4gICAgdGhpcy5fcGFyYWxsZWxVcGxvYWRVcmxzID0gbnVsbDtcbiAgfVxuICAvKipcbiAgICogVXNlIHRoZSBUZXJtaW5hdGlvbiBleHRlbnNpb24gdG8gZGVsZXRlIGFuIHVwbG9hZCBmcm9tIHRoZSBzZXJ2ZXIgYnkgc2VuZGluZyBhIERFTEVURVxuICAgKiByZXF1ZXN0IHRvIHRoZSBzcGVjaWZpZWQgdXBsb2FkIFVSTC4gVGhpcyBpcyBvbmx5IHBvc3NpYmxlIGlmIHRoZSBzZXJ2ZXIgc3VwcG9ydHMgdGhlXG4gICAqIFRlcm1pbmF0aW9uIGV4dGVuc2lvbi4gSWYgdGhlIGBvcHRpb25zLnJldHJ5RGVsYXlzYCBwcm9wZXJ0eSBpcyBzZXQsIHRoZSBtZXRob2Qgd2lsbFxuICAgKiBhbHNvIHJldHJ5IGlmIGFuIGVycm9yIG9jdXJycy5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IHVybCBUaGUgdXBsb2FkJ3MgVVJMIHdoaWNoIHdpbGwgYmUgdGVybWluYXRlZC5cbiAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgT3B0aW9uYWwgb3B0aW9ucyBmb3IgaW5mbHVlbmNpbmcgSFRUUCByZXF1ZXN0cy5cbiAgICogQHJldHVybiB7UHJvbWlzZX0gVGhlIFByb21pc2Ugd2lsbCBiZSByZXNvbHZlZC9yZWplY3RlZCB3aGVuIHRoZSByZXF1ZXN0cyBmaW5pc2guXG4gICAqL1xuXG5cbiAgX2NyZWF0ZUNsYXNzKEJhc2VVcGxvYWQsIFt7XG4gICAga2V5OiBcImZpbmRQcmV2aW91c1VwbG9hZHNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZmluZFByZXZpb3VzVXBsb2FkcygpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMuZmluZ2VycHJpbnQodGhpcy5maWxlLCB0aGlzLm9wdGlvbnMpLnRoZW4oZnVuY3Rpb24gKGZpbmdlcnByaW50KSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5fdXJsU3RvcmFnZS5maW5kVXBsb2Fkc0J5RmluZ2VycHJpbnQoZmluZ2VycHJpbnQpO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlc3VtZUZyb21QcmV2aW91c1VwbG9hZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZXN1bWVGcm9tUHJldmlvdXNVcGxvYWQocHJldmlvdXNVcGxvYWQpIHtcbiAgICAgIHRoaXMudXJsID0gcHJldmlvdXNVcGxvYWQudXBsb2FkVXJsIHx8IG51bGw7XG4gICAgICB0aGlzLl9wYXJhbGxlbFVwbG9hZFVybHMgPSBwcmV2aW91c1VwbG9hZC5wYXJhbGxlbFVwbG9hZFVybHMgfHwgbnVsbDtcbiAgICAgIHRoaXMuX3VybFN0b3JhZ2VLZXkgPSBwcmV2aW91c1VwbG9hZC51cmxTdG9yYWdlS2V5O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzdGFydFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzdGFydCgpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB2YXIgZmlsZSA9IHRoaXMuZmlsZTtcblxuICAgICAgaWYgKCFmaWxlKSB7XG4gICAgICAgIHRoaXMuX2VtaXRFcnJvcihuZXcgRXJyb3IoJ3R1czogbm8gZmlsZSBvciBzdHJlYW0gdG8gdXBsb2FkIHByb3ZpZGVkJykpO1xuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuZW5kcG9pbnQgJiYgIXRoaXMub3B0aW9ucy51cGxvYWRVcmwpIHtcbiAgICAgICAgdGhpcy5fZW1pdEVycm9yKG5ldyBFcnJvcigndHVzOiBuZWl0aGVyIGFuIGVuZHBvaW50IG9yIGFuIHVwbG9hZCBVUkwgaXMgcHJvdmlkZWQnKSk7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmV0cnlEZWxheXMgPSB0aGlzLm9wdGlvbnMucmV0cnlEZWxheXM7XG5cbiAgICAgIGlmIChyZXRyeURlbGF5cyAhPSBudWxsICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChyZXRyeURlbGF5cykgIT09ICdbb2JqZWN0IEFycmF5XScpIHtcbiAgICAgICAgdGhpcy5fZW1pdEVycm9yKG5ldyBFcnJvcigndHVzOiB0aGUgYHJldHJ5RGVsYXlzYCBvcHRpb24gbXVzdCBlaXRoZXIgYmUgYW4gYXJyYXkgb3IgbnVsbCcpKTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMucGFyYWxsZWxVcGxvYWRzID4gMSkge1xuICAgICAgICAvLyBUZXN0IHdoaWNoIG9wdGlvbnMgYXJlIGluY29tcGF0aWJsZSB3aXRoIHBhcmFsbGVsIHVwbG9hZHMuXG4gICAgICAgIFsndXBsb2FkVXJsJywgJ3VwbG9hZFNpemUnLCAndXBsb2FkTGVuZ3RoRGVmZXJyZWQnXS5mb3JFYWNoKGZ1bmN0aW9uIChvcHRpb25OYW1lKSB7XG4gICAgICAgICAgaWYgKF90aGlzMi5vcHRpb25zW29wdGlvbk5hbWVdKSB7XG4gICAgICAgICAgICBfdGhpczIuX2VtaXRFcnJvcihuZXcgRXJyb3IoXCJ0dXM6IGNhbm5vdCB1c2UgdGhlIFwiLmNvbmNhdChvcHRpb25OYW1lLCBcIiBvcHRpb24gd2hlbiBwYXJhbGxlbFVwbG9hZHMgaXMgZW5hYmxlZFwiKSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMub3B0aW9ucy5maW5nZXJwcmludChmaWxlLCB0aGlzLm9wdGlvbnMpLnRoZW4oZnVuY3Rpb24gKGZpbmdlcnByaW50KSB7XG4gICAgICAgIGlmIChmaW5nZXJwcmludCA9PSBudWxsKSB7XG4gICAgICAgICAgKDAsIF9sb2dnZXIubG9nKSgnTm8gZmluZ2VycHJpbnQgd2FzIGNhbGN1bGF0ZWQgbWVhbmluZyB0aGF0IHRoZSB1cGxvYWQgY2Fubm90IGJlIHN0b3JlZCBpbiB0aGUgVVJMIHN0b3JhZ2UuJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgKDAsIF9sb2dnZXIubG9nKShcIkNhbGN1bGF0ZWQgZmluZ2VycHJpbnQ6IFwiLmNvbmNhdChmaW5nZXJwcmludCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXMyLl9maW5nZXJwcmludCA9IGZpbmdlcnByaW50O1xuXG4gICAgICAgIGlmIChfdGhpczIuX3NvdXJjZSkge1xuICAgICAgICAgIHJldHVybiBfdGhpczIuX3NvdXJjZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBfdGhpczIub3B0aW9ucy5maWxlUmVhZGVyLm9wZW5GaWxlKGZpbGUsIF90aGlzMi5vcHRpb25zLmNodW5rU2l6ZSk7XG4gICAgICB9KS50aGVuKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgICAgX3RoaXMyLl9zb3VyY2UgPSBzb3VyY2U7IC8vIElmIHRoZSB1cGxvYWQgd2FzIGNvbmZpZ3VyZWQgdG8gdXNlIG11bHRpcGxlIHJlcXVlc3RzIG9yIGlmIHdlIHJlc3VtZSBmcm9tXG4gICAgICAgIC8vIGFuIHVwbG9hZCB3aGljaCB1c2VkIG11bHRpcGxlIHJlcXVlc3RzLCB3ZSBzdGFydCBhIHBhcmFsbGVsIHVwbG9hZC5cblxuICAgICAgICBpZiAoX3RoaXMyLm9wdGlvbnMucGFyYWxsZWxVcGxvYWRzID4gMSB8fCBfdGhpczIuX3BhcmFsbGVsVXBsb2FkVXJscyAhPSBudWxsKSB7XG4gICAgICAgICAgX3RoaXMyLl9zdGFydFBhcmFsbGVsVXBsb2FkKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX3RoaXMyLl9zdGFydFNpbmdsZVVwbG9hZCgpO1xuICAgICAgICB9XG4gICAgICB9KVtcImNhdGNoXCJdKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgX3RoaXMyLl9lbWl0RXJyb3IoZXJyKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbml0aWF0ZSB0aGUgdXBsb2FkaW5nIHByb2NlZHVyZSBmb3IgYSBwYXJhbGxlbGl6ZWQgdXBsb2FkLCB3aGVyZSBvbmUgZmlsZSBpcyBzcGxpdCBpbnRvXG4gICAgICogbXVsdGlwbGUgcmVxdWVzdCB3aGljaCBhcmUgcnVuIGluIHBhcmFsbGVsLlxuICAgICAqXG4gICAgICogQGFwaSBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJfc3RhcnRQYXJhbGxlbFVwbG9hZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfc3RhcnRQYXJhbGxlbFVwbG9hZCgpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICB2YXIgdG90YWxTaXplID0gdGhpcy5fc2l6ZSA9IHRoaXMuX3NvdXJjZS5zaXplO1xuICAgICAgdmFyIHRvdGFsUHJvZ3Jlc3MgPSAwO1xuICAgICAgdGhpcy5fcGFyYWxsZWxVcGxvYWRzID0gW107XG4gICAgICB2YXIgcGFydENvdW50ID0gdGhpcy5fcGFyYWxsZWxVcGxvYWRVcmxzICE9IG51bGwgPyB0aGlzLl9wYXJhbGxlbFVwbG9hZFVybHMubGVuZ3RoIDogdGhpcy5vcHRpb25zLnBhcmFsbGVsVXBsb2FkczsgLy8gVGhlIGlucHV0IGZpbGUgd2lsbCBiZSBzcGxpdCBpbnRvIG11bHRpcGxlIHNsaWNlcyB3aGljaCBhcmUgdXBsb2FkZWQgaW4gc2VwYXJhdGVcbiAgICAgIC8vIHJlcXVlc3RzLiBIZXJlIHdlIGdlbmVyYXRlIHRoZSBzdGFydCBhbmQgZW5kIHBvc2l0aW9uIGZvciB0aGUgc2xpY2VzLlxuXG4gICAgICB2YXIgcGFydHMgPSBzcGxpdFNpemVJbnRvUGFydHModGhpcy5fc291cmNlLnNpemUsIHBhcnRDb3VudCwgdGhpcy5fcGFyYWxsZWxVcGxvYWRVcmxzKTsgLy8gQ3JlYXRlIGFuIGVtcHR5IGxpc3QgZm9yIHN0b3JpbmcgdGhlIHVwbG9hZCBVUkxzXG5cbiAgICAgIHRoaXMuX3BhcmFsbGVsVXBsb2FkVXJscyA9IG5ldyBBcnJheShwYXJ0cy5sZW5ndGgpOyAvLyBHZW5lcmF0ZSBhIHByb21pc2UgZm9yIGVhY2ggc2xpY2UgdGhhdCB3aWxsIGJlIHJlc29sdmUgaWYgdGhlIHJlc3BlY3RpdmVcbiAgICAgIC8vIHVwbG9hZCBpcyBjb21wbGV0ZWQuXG5cbiAgICAgIHZhciB1cGxvYWRzID0gcGFydHMubWFwKGZ1bmN0aW9uIChwYXJ0LCBpbmRleCkge1xuICAgICAgICB2YXIgbGFzdFBhcnRQcm9ncmVzcyA9IDA7XG4gICAgICAgIHJldHVybiBfdGhpczMuX3NvdXJjZS5zbGljZShwYXJ0LnN0YXJ0LCBwYXJ0LmVuZCkudGhlbihmdW5jdGlvbiAoX3JlZikge1xuICAgICAgICAgIHZhciB2YWx1ZSA9IF9yZWYudmFsdWU7XG4gICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIC8vIE1lcmdlIHdpdGggdGhlIHVzZXIgc3VwcGxpZWQgb3B0aW9ucyBidXQgb3ZlcndyaXRlIHNvbWUgdmFsdWVzLlxuICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSBfb2JqZWN0U3ByZWFkKHt9LCBfdGhpczMub3B0aW9ucywge1xuICAgICAgICAgICAgICAvLyBJZiBhdmFpbGFibGUsIHRoZSBwYXJ0aWFsIHVwbG9hZCBzaG91bGQgYmUgcmVzdW1lZCBmcm9tIGEgcHJldmlvdXMgVVJMLlxuICAgICAgICAgICAgICB1cGxvYWRVcmw6IHBhcnQudXBsb2FkVXJsIHx8IG51bGwsXG4gICAgICAgICAgICAgIC8vIFdlIHRha2UgbWFudWFsbHkgY2FyZSBvZiByZXN1bWluZyBmb3IgcGFydGlhbCB1cGxvYWRzLCBzbyB0aGV5IHNob3VsZFxuICAgICAgICAgICAgICAvLyBub3QgYmUgc3RvcmVkIGluIHRoZSBVUkwgc3RvcmFnZS5cbiAgICAgICAgICAgICAgc3RvcmVGaW5nZXJwcmludEZvclJlc3VtaW5nOiBmYWxzZSxcbiAgICAgICAgICAgICAgcmVtb3ZlRmluZ2VycHJpbnRPblN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgICAgICAvLyBSZXNldCB0aGUgcGFyYWxsZWxVcGxvYWRzIG9wdGlvbiB0byBub3QgY2F1c2UgcmVjdXJzaW9uLlxuICAgICAgICAgICAgICBwYXJhbGxlbFVwbG9hZHM6IDEsXG4gICAgICAgICAgICAgIG1ldGFkYXRhOiB7fSxcbiAgICAgICAgICAgICAgLy8gQWRkIHRoZSBoZWFkZXIgdG8gaW5kaWNhdGUgdGhlIHRoaXMgaXMgYSBwYXJ0aWFsIHVwbG9hZC5cbiAgICAgICAgICAgICAgaGVhZGVyczogX29iamVjdFNwcmVhZCh7fSwgX3RoaXMzLm9wdGlvbnMuaGVhZGVycywge1xuICAgICAgICAgICAgICAgICdVcGxvYWQtQ29uY2F0JzogJ3BhcnRpYWwnXG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAvLyBSZWplY3Qgb3IgcmVzb2x2ZSB0aGUgcHJvbWlzZSBpZiB0aGUgdXBsb2FkIGVycm9ycyBvciBjb21wbGV0ZXMuXG4gICAgICAgICAgICAgIG9uU3VjY2VzczogcmVzb2x2ZSxcbiAgICAgICAgICAgICAgb25FcnJvcjogcmVqZWN0LFxuICAgICAgICAgICAgICAvLyBCYXNlZCBpbiB0aGUgcHJvZ3Jlc3MgZm9yIHRoaXMgcGFydGlhbCB1cGxvYWQsIGNhbGN1bGF0ZSB0aGUgcHJvZ3Jlc3NcbiAgICAgICAgICAgICAgLy8gZm9yIHRoZSBlbnRpcmUgZmluYWwgdXBsb2FkLlxuICAgICAgICAgICAgICBvblByb2dyZXNzOiBmdW5jdGlvbiBvblByb2dyZXNzKG5ld1BhcnRQcm9ncmVzcykge1xuICAgICAgICAgICAgICAgIHRvdGFsUHJvZ3Jlc3MgPSB0b3RhbFByb2dyZXNzIC0gbGFzdFBhcnRQcm9ncmVzcyArIG5ld1BhcnRQcm9ncmVzcztcbiAgICAgICAgICAgICAgICBsYXN0UGFydFByb2dyZXNzID0gbmV3UGFydFByb2dyZXNzO1xuXG4gICAgICAgICAgICAgICAgX3RoaXMzLl9lbWl0UHJvZ3Jlc3ModG90YWxQcm9ncmVzcywgdG90YWxTaXplKTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgLy8gV2FpdCB1bnRpbCBldmVyeSBwYXJ0aWFsIHVwbG9hZCBoYXMgYW4gdXBsb2FkIFVSTCwgc28gd2UgY2FuIGFkZFxuICAgICAgICAgICAgICAvLyB0aGVtIHRvIHRoZSBVUkwgc3RvcmFnZS5cbiAgICAgICAgICAgICAgX29uVXBsb2FkVXJsQXZhaWxhYmxlOiBmdW5jdGlvbiBfb25VcGxvYWRVcmxBdmFpbGFibGUoKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMzLl9wYXJhbGxlbFVwbG9hZFVybHNbaW5kZXhdID0gdXBsb2FkLnVybDsgLy8gVGVzdCBpZiBhbGwgdXBsb2FkcyBoYXZlIHJlY2VpdmVkIGFuIFVSTFxuXG4gICAgICAgICAgICAgICAgaWYgKF90aGlzMy5fcGFyYWxsZWxVcGxvYWRVcmxzLmZpbHRlcihmdW5jdGlvbiAodSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuICEhdTtcbiAgICAgICAgICAgICAgICB9KS5sZW5ndGggPT09IHBhcnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgX3RoaXMzLl9zYXZlVXBsb2FkSW5VcmxTdG9yYWdlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdmFyIHVwbG9hZCA9IG5ldyBCYXNlVXBsb2FkKHZhbHVlLCBvcHRpb25zKTtcbiAgICAgICAgICAgIHVwbG9hZC5zdGFydCgpOyAvLyBTdG9yZSB0aGUgdXBsb2FkIGluIGFuIGFycmF5LCBzbyB3ZSBjYW4gbGF0ZXIgYWJvcnQgdGhlbSBpZiBuZWNlc3NhcnkuXG5cbiAgICAgICAgICAgIF90aGlzMy5fcGFyYWxsZWxVcGxvYWRzLnB1c2godXBsb2FkKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIHZhciByZXE7IC8vIFdhaXQgdW50aWwgYWxsIHBhcnRpYWwgdXBsb2FkcyBhcmUgZmluaXNoZWQgYW5kIHdlIGNhbiBzZW5kIHRoZSBQT1NUIHJlcXVlc3QgZm9yXG4gICAgICAvLyBjcmVhdGluZyB0aGUgZmluYWwgdXBsb2FkLlxuXG4gICAgICBQcm9taXNlLmFsbCh1cGxvYWRzKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmVxID0gX3RoaXMzLl9vcGVuUmVxdWVzdCgnUE9TVCcsIF90aGlzMy5vcHRpb25zLmVuZHBvaW50KTtcbiAgICAgICAgcmVxLnNldEhlYWRlcignVXBsb2FkLUNvbmNhdCcsIFwiZmluYWw7XCIuY29uY2F0KF90aGlzMy5fcGFyYWxsZWxVcGxvYWRVcmxzLmpvaW4oJyAnKSkpOyAvLyBBZGQgbWV0YWRhdGEgaWYgdmFsdWVzIGhhdmUgYmVlbiBhZGRlZFxuXG4gICAgICAgIHZhciBtZXRhZGF0YSA9IGVuY29kZU1ldGFkYXRhKF90aGlzMy5vcHRpb25zLm1ldGFkYXRhKTtcblxuICAgICAgICBpZiAobWV0YWRhdGEgIT09ICcnKSB7XG4gICAgICAgICAgcmVxLnNldEhlYWRlcignVXBsb2FkLU1ldGFkYXRhJywgbWV0YWRhdGEpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIF90aGlzMy5fc2VuZFJlcXVlc3QocmVxLCBudWxsKTtcbiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlcykge1xuICAgICAgICBpZiAoIWluU3RhdHVzQ2F0ZWdvcnkocmVzLmdldFN0YXR1cygpLCAyMDApKSB7XG4gICAgICAgICAgX3RoaXMzLl9lbWl0SHR0cEVycm9yKHJlcSwgcmVzLCAndHVzOiB1bmV4cGVjdGVkIHJlc3BvbnNlIHdoaWxlIGNyZWF0aW5nIHVwbG9hZCcpO1xuXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGxvY2F0aW9uID0gcmVzLmdldEhlYWRlcignTG9jYXRpb24nKTtcblxuICAgICAgICBpZiAobG9jYXRpb24gPT0gbnVsbCkge1xuICAgICAgICAgIF90aGlzMy5fZW1pdEh0dHBFcnJvcihyZXEsIHJlcywgJ3R1czogaW52YWxpZCBvciBtaXNzaW5nIExvY2F0aW9uIGhlYWRlcicpO1xuXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXMzLnVybCA9IHJlc29sdmVVcmwoX3RoaXMzLm9wdGlvbnMuZW5kcG9pbnQsIGxvY2F0aW9uKTtcbiAgICAgICAgKDAsIF9sb2dnZXIubG9nKShcIkNyZWF0ZWQgdXBsb2FkIGF0IFwiLmNvbmNhdChfdGhpczMudXJsKSk7XG5cbiAgICAgICAgX3RoaXMzLl9lbWl0U3VjY2VzcygpO1xuICAgICAgfSlbXCJjYXRjaFwiXShmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIF90aGlzMy5fZW1pdEVycm9yKGVycik7XG4gICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW5pdGlhdGUgdGhlIHVwbG9hZGluZyBwcm9jZWR1cmUgZm9yIGEgbm9uLXBhcmFsbGVsIHVwbG9hZC4gSGVyZSB0aGUgZW50aXJlIGZpbGUgaXNcbiAgICAgKiB1cGxvYWRlZCBpbiBhIHNlcXVlbnRpYWwgbWF0dGVyLlxuICAgICAqXG4gICAgICogQGFwaSBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJfc3RhcnRTaW5nbGVVcGxvYWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3N0YXJ0U2luZ2xlVXBsb2FkKCkge1xuICAgICAgLy8gRmlyc3QsIHdlIGxvb2sgYXQgdGhlIHVwbG9hZExlbmd0aERlZmVycmVkIG9wdGlvbi5cbiAgICAgIC8vIE5leHQsIHdlIGNoZWNrIGlmIHRoZSBjYWxsZXIgaGFzIHN1cHBsaWVkIGEgbWFudWFsIHVwbG9hZCBzaXplLlxuICAgICAgLy8gRmluYWxseSwgd2UgdHJ5IHRvIHVzZSB0aGUgY2FsY3VsYXRlZCBzaXplIGZyb20gdGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLnVwbG9hZExlbmd0aERlZmVycmVkKSB7XG4gICAgICAgIHRoaXMuX3NpemUgPSBudWxsO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLm9wdGlvbnMudXBsb2FkU2l6ZSAhPSBudWxsKSB7XG4gICAgICAgIHRoaXMuX3NpemUgPSArdGhpcy5vcHRpb25zLnVwbG9hZFNpemU7XG5cbiAgICAgICAgaWYgKGlzTmFOKHRoaXMuX3NpemUpKSB7XG4gICAgICAgICAgdGhpcy5fZW1pdEVycm9yKG5ldyBFcnJvcigndHVzOiBjYW5ub3QgY29udmVydCBgdXBsb2FkU2l6ZWAgb3B0aW9uIGludG8gYSBudW1iZXInKSk7XG5cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX3NpemUgPSB0aGlzLl9zb3VyY2Uuc2l6ZTtcblxuICAgICAgICBpZiAodGhpcy5fc2l6ZSA9PSBudWxsKSB7XG4gICAgICAgICAgdGhpcy5fZW1pdEVycm9yKG5ldyBFcnJvcihcInR1czogY2Fubm90IGF1dG9tYXRpY2FsbHkgZGVyaXZlIHVwbG9hZCdzIHNpemUgZnJvbSBpbnB1dCBhbmQgbXVzdCBiZSBzcGVjaWZpZWQgbWFudWFsbHkgdXNpbmcgdGhlIGB1cGxvYWRTaXplYCBvcHRpb25cIikpO1xuXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9IC8vIFJlc2V0IHRoZSBhYm9ydGVkIGZsYWcgd2hlbiB0aGUgdXBsb2FkIGlzIHN0YXJ0ZWQgb3IgZWxzZSB0aGVcbiAgICAgIC8vIF9wZXJmb3JtVXBsb2FkIHdpbGwgc3RvcCBiZWZvcmUgc2VuZGluZyBhIHJlcXVlc3QgaWYgdGhlIHVwbG9hZCBoYXMgYmVlblxuICAgICAgLy8gYWJvcnRlZCBwcmV2aW91c2x5LlxuXG5cbiAgICAgIHRoaXMuX2Fib3J0ZWQgPSBmYWxzZTsgLy8gVGhlIHVwbG9hZCBoYWQgYmVlbiBzdGFydGVkIHByZXZpb3VzbHkgYW5kIHdlIHNob3VsZCByZXVzZSB0aGlzIFVSTC5cblxuICAgICAgaWYgKHRoaXMudXJsICE9IG51bGwpIHtcbiAgICAgICAgKDAsIF9sb2dnZXIubG9nKShcIlJlc3VtaW5nIHVwbG9hZCBmcm9tIHByZXZpb3VzIFVSTDogXCIuY29uY2F0KHRoaXMudXJsKSk7XG5cbiAgICAgICAgdGhpcy5fcmVzdW1lVXBsb2FkKCk7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSAvLyBBIFVSTCBoYXMgbWFudWFsbHkgYmVlbiBzcGVjaWZpZWQsIHNvIHdlIHRyeSB0byByZXN1bWVcblxuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLnVwbG9hZFVybCAhPSBudWxsKSB7XG4gICAgICAgICgwLCBfbG9nZ2VyLmxvZykoXCJSZXN1bWluZyB1cGxvYWQgZnJvbSBwcm92aWRlZCBVUkw6IFwiLmNvbmNhdCh0aGlzLm9wdGlvbnMudXJsKSk7XG4gICAgICAgIHRoaXMudXJsID0gdGhpcy5vcHRpb25zLnVwbG9hZFVybDtcblxuICAgICAgICB0aGlzLl9yZXN1bWVVcGxvYWQoKTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9IC8vIEFuIHVwbG9hZCBoYXMgbm90IHN0YXJ0ZWQgZm9yIHRoZSBmaWxlIHlldCwgc28gd2Ugc3RhcnQgYSBuZXcgb25lXG5cblxuICAgICAgKDAsIF9sb2dnZXIubG9nKSgnQ3JlYXRpbmcgYSBuZXcgdXBsb2FkJyk7XG5cbiAgICAgIHRoaXMuX2NyZWF0ZVVwbG9hZCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBYm9ydCBhbnkgcnVubmluZyByZXF1ZXN0IGFuZCBzdG9wIHRoZSBjdXJyZW50IHVwbG9hZC4gQWZ0ZXIgYWJvcnQgaXMgY2FsbGVkLCBubyBldmVudFxuICAgICAqIGhhbmRsZXIgd2lsbCBiZSBpbnZva2VkIGFueW1vcmUuIFlvdSBjYW4gdXNlIHRoZSBgc3RhcnRgIG1ldGhvZCB0byByZXN1bWUgdGhlIHVwbG9hZFxuICAgICAqIGFnYWluLlxuICAgICAqIElmIGBzaG91bGRUZXJtaW5hdGVgIGlzIHRydWUsIHRoZSBgdGVybWluYXRlYCBmdW5jdGlvbiB3aWxsIGJlIGNhbGxlZCB0byByZW1vdmUgdGhlXG4gICAgICogY3VycmVudCB1cGxvYWQgZnJvbSB0aGUgc2VydmVyLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtib29sZWFufSBzaG91bGRUZXJtaW5hdGUgVHJ1ZSBpZiB0aGUgdXBsb2FkIHNob3VsZCBiZSBkZWxldGVkIGZyb20gdGhlIHNlcnZlci5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBUaGUgUHJvbWlzZSB3aWxsIGJlIHJlc29sdmVkL3JlamVjdGVkIHdoZW4gdGhlIHJlcXVlc3RzIGZpbmlzaC5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImFib3J0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFib3J0KHNob3VsZFRlcm1pbmF0ZSkge1xuICAgICAgdmFyIF90aGlzNCA9IHRoaXM7IC8vIENvdW50IHRoZSBudW1iZXIgb2YgYXJndW1lbnRzIHRvIHNlZSBpZiBhIGNhbGxiYWNrIGlzIGJlaW5nIHByb3ZpZGVkIGluIHRoZSBvbGQgc3R5bGUgcmVxdWlyZWQgYnkgdHVzLWpzLWNsaWVudCAxLngsIHRoZW4gdGhyb3cgYW4gZXJyb3IgaWYgaXQgaXMuXG4gICAgICAvLyBgYXJndW1lbnRzYCBpcyBhIEphdmFTY3JpcHQgYnVpbHQtaW4gdmFyaWFibGUgdGhhdCBjb250YWlucyBhbGwgb2YgdGhlIGZ1bmN0aW9uJ3MgYXJndW1lbnRzLlxuXG5cbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSAmJiB0eXBlb2YgYXJndW1lbnRzWzFdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcigndHVzOiB0aGUgYWJvcnQgZnVuY3Rpb24gZG9lcyBub3QgYWNjZXB0IGEgY2FsbGJhY2sgc2luY2UgdjIgYW55bW9yZTsgcGxlYXNlIHVzZSB0aGUgcmV0dXJuZWQgUHJvbWlzZSBpbnN0ZWFkJyk7XG4gICAgICB9IC8vIFN0b3AgYW55IHBhcmFsbGVsIHBhcnRpYWwgdXBsb2FkcywgdGhhdCBoYXZlIGJlZW4gc3RhcnRlZCBpbiBfc3RhcnRQYXJhbGxlbFVwbG9hZHMuXG5cblxuICAgICAgaWYgKHRoaXMuX3BhcmFsbGVsVXBsb2FkcyAhPSBudWxsKSB7XG4gICAgICAgIHRoaXMuX3BhcmFsbGVsVXBsb2Fkcy5mb3JFYWNoKGZ1bmN0aW9uICh1cGxvYWQpIHtcbiAgICAgICAgICB1cGxvYWQuYWJvcnQoc2hvdWxkVGVybWluYXRlKTtcbiAgICAgICAgfSk7XG4gICAgICB9IC8vIFN0b3AgYW55IGN1cnJlbnQgcnVubmluZyByZXF1ZXN0LlxuXG5cbiAgICAgIGlmICh0aGlzLl9yZXEgIT09IG51bGwpIHtcbiAgICAgICAgdGhpcy5fcmVxLmFib3J0KCk7XG5cbiAgICAgICAgdGhpcy5fc291cmNlLmNsb3NlKCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2Fib3J0ZWQgPSB0cnVlOyAvLyBTdG9wIGFueSB0aW1lb3V0IHVzZWQgZm9yIGluaXRpYXRpbmcgYSByZXRyeS5cblxuICAgICAgaWYgKHRoaXMuX3JldHJ5VGltZW91dCAhPSBudWxsKSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLl9yZXRyeVRpbWVvdXQpO1xuICAgICAgICB0aGlzLl9yZXRyeVRpbWVvdXQgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXNob3VsZFRlcm1pbmF0ZSB8fCB0aGlzLnVybCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIEJhc2VVcGxvYWQudGVybWluYXRlKHRoaXMudXJsLCB0aGlzLm9wdGlvbnMpIC8vIFJlbW92ZSBlbnRyeSBmcm9tIHRoZSBVUkwgc3RvcmFnZSBzaW5jZSB0aGUgdXBsb2FkIFVSTCBpcyBubyBsb25nZXIgdmFsaWQuXG4gICAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpczQuX3JlbW92ZUZyb21VcmxTdG9yYWdlKCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiX2VtaXRIdHRwRXJyb3JcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2VtaXRIdHRwRXJyb3IocmVxLCByZXMsIG1lc3NhZ2UsIGNhdXNpbmdFcnIpIHtcbiAgICAgIHRoaXMuX2VtaXRFcnJvcihuZXcgX2Vycm9yLmRlZmF1bHQobWVzc2FnZSwgY2F1c2luZ0VyciwgcmVxLCByZXMpKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiX2VtaXRFcnJvclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZW1pdEVycm9yKGVycikge1xuICAgICAgdmFyIF90aGlzNSA9IHRoaXM7IC8vIERvIG5vdCBlbWl0IGVycm9ycywgZS5nLiBmcm9tIGFib3J0ZWQgSFRUUCByZXF1ZXN0cywgaWYgdGhlIHVwbG9hZCBoYXMgYmVlbiBzdG9wcGVkLlxuXG5cbiAgICAgIGlmICh0aGlzLl9hYm9ydGVkKSByZXR1cm47IC8vIENoZWNrIGlmIHdlIHNob3VsZCByZXRyeSwgd2hlbiBlbmFibGVkLCBiZWZvcmUgc2VuZGluZyB0aGUgZXJyb3IgdG8gdGhlIHVzZXIuXG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMucmV0cnlEZWxheXMgIT0gbnVsbCkge1xuICAgICAgICAvLyBXZSB3aWxsIHJlc2V0IHRoZSBhdHRlbXB0IGNvdW50ZXIgaWZcbiAgICAgICAgLy8gLSB3ZSB3ZXJlIGFscmVhZHkgYWJsZSB0byBjb25uZWN0IHRvIHRoZSBzZXJ2ZXIgKG9mZnNldCAhPSBudWxsKSBhbmRcbiAgICAgICAgLy8gLSB3ZSB3ZXJlIGFibGUgdG8gdXBsb2FkIGEgc21hbGwgY2h1bmsgb2YgZGF0YSB0byB0aGUgc2VydmVyXG4gICAgICAgIHZhciBzaG91bGRSZXNldERlbGF5cyA9IHRoaXMuX29mZnNldCAhPSBudWxsICYmIHRoaXMuX29mZnNldCA+IHRoaXMuX29mZnNldEJlZm9yZVJldHJ5O1xuXG4gICAgICAgIGlmIChzaG91bGRSZXNldERlbGF5cykge1xuICAgICAgICAgIHRoaXMuX3JldHJ5QXR0ZW1wdCA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2hvdWxkUmV0cnkoZXJyLCB0aGlzLl9yZXRyeUF0dGVtcHQsIHRoaXMub3B0aW9ucykpIHtcbiAgICAgICAgICB2YXIgZGVsYXkgPSB0aGlzLm9wdGlvbnMucmV0cnlEZWxheXNbdGhpcy5fcmV0cnlBdHRlbXB0KytdO1xuICAgICAgICAgIHRoaXMuX29mZnNldEJlZm9yZVJldHJ5ID0gdGhpcy5fb2Zmc2V0O1xuICAgICAgICAgIHRoaXMuX3JldHJ5VGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXM1LnN0YXJ0KCk7XG4gICAgICAgICAgfSwgZGVsYXkpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIHRoaXMub3B0aW9ucy5vbkVycm9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucy5vbkVycm9yKGVycik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBlcnI7XG4gICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFB1Ymxpc2hlcyBub3RpZmljYXRpb24gaWYgdGhlIHVwbG9hZCBoYXMgYmVlbiBzdWNjZXNzZnVsbHkgY29tcGxldGVkLlxuICAgICAqXG4gICAgICogQGFwaSBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJfZW1pdFN1Y2Nlc3NcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2VtaXRTdWNjZXNzKCkge1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5yZW1vdmVGaW5nZXJwcmludE9uU3VjY2Vzcykge1xuICAgICAgICAvLyBSZW1vdmUgc3RvcmVkIGZpbmdlcnByaW50IGFuZCBjb3JyZXNwb25kaW5nIGVuZHBvaW50LiBUaGlzIGNhdXNlc1xuICAgICAgICAvLyBuZXcgdXBsb2FkcyBvZiB0aGUgc2FtZSBmaWxlIHRvIGJlIHRyZWF0ZWQgYXMgYSBkaWZmZXJlbnQgZmlsZS5cbiAgICAgICAgdGhpcy5fcmVtb3ZlRnJvbVVybFN0b3JhZ2UoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiB0aGlzLm9wdGlvbnMub25TdWNjZXNzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucy5vblN1Y2Nlc3MoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogUHVibGlzaGVzIG5vdGlmaWNhdGlvbiB3aGVuIGRhdGEgaGFzIGJlZW4gc2VudCB0byB0aGUgc2VydmVyLiBUaGlzXG4gICAgICogZGF0YSBtYXkgbm90IGhhdmUgYmVlbiBhY2NlcHRlZCBieSB0aGUgc2VydmVyIHlldC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBieXRlc1NlbnQgIE51bWJlciBvZiBieXRlcyBzZW50IHRvIHRoZSBzZXJ2ZXIuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJ5dGVzVG90YWwgVG90YWwgbnVtYmVyIG9mIGJ5dGVzIHRvIGJlIHNlbnQgdG8gdGhlIHNlcnZlci5cbiAgICAgKiBAYXBpIHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcIl9lbWl0UHJvZ3Jlc3NcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2VtaXRQcm9ncmVzcyhieXRlc1NlbnQsIGJ5dGVzVG90YWwpIHtcbiAgICAgIGlmICh0eXBlb2YgdGhpcy5vcHRpb25zLm9uUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zLm9uUHJvZ3Jlc3MoYnl0ZXNTZW50LCBieXRlc1RvdGFsKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogUHVibGlzaGVzIG5vdGlmaWNhdGlvbiB3aGVuIGEgY2h1bmsgb2YgZGF0YSBoYXMgYmVlbiBzZW50IHRvIHRoZSBzZXJ2ZXJcbiAgICAgKiBhbmQgYWNjZXB0ZWQgYnkgdGhlIHNlcnZlci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gY2h1bmtTaXplICBTaXplIG9mIHRoZSBjaHVuayB0aGF0IHdhcyBhY2NlcHRlZCBieSB0aGUgc2VydmVyLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBieXRlc0FjY2VwdGVkIFRvdGFsIG51bWJlciBvZiBieXRlcyB0aGF0IGhhdmUgYmVlblxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY2NlcHRlZCBieSB0aGUgc2VydmVyLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBieXRlc1RvdGFsIFRvdGFsIG51bWJlciBvZiBieXRlcyB0byBiZSBzZW50IHRvIHRoZSBzZXJ2ZXIuXG4gICAgICogQGFwaSBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJfZW1pdENodW5rQ29tcGxldGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2VtaXRDaHVua0NvbXBsZXRlKGNodW5rU2l6ZSwgYnl0ZXNBY2NlcHRlZCwgYnl0ZXNUb3RhbCkge1xuICAgICAgaWYgKHR5cGVvZiB0aGlzLm9wdGlvbnMub25DaHVua0NvbXBsZXRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucy5vbkNodW5rQ29tcGxldGUoY2h1bmtTaXplLCBieXRlc0FjY2VwdGVkLCBieXRlc1RvdGFsKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IHVwbG9hZCB1c2luZyB0aGUgY3JlYXRpb24gZXh0ZW5zaW9uIGJ5IHNlbmRpbmcgYSBQT1NUXG4gICAgICogcmVxdWVzdCB0byB0aGUgZW5kcG9pbnQuIEFmdGVyIHN1Y2Nlc3NmdWwgY3JlYXRpb24gdGhlIGZpbGUgd2lsbCBiZVxuICAgICAqIHVwbG9hZGVkXG4gICAgICpcbiAgICAgKiBAYXBpIHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcIl9jcmVhdGVVcGxvYWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2NyZWF0ZVVwbG9hZCgpIHtcbiAgICAgIHZhciBfdGhpczYgPSB0aGlzO1xuXG4gICAgICBpZiAoIXRoaXMub3B0aW9ucy5lbmRwb2ludCkge1xuICAgICAgICB0aGlzLl9lbWl0RXJyb3IobmV3IEVycm9yKCd0dXM6IHVuYWJsZSB0byBjcmVhdGUgdXBsb2FkIGJlY2F1c2Ugbm8gZW5kcG9pbnQgaXMgcHJvdmlkZWQnKSk7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVxID0gdGhpcy5fb3BlblJlcXVlc3QoJ1BPU1QnLCB0aGlzLm9wdGlvbnMuZW5kcG9pbnQpO1xuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLnVwbG9hZExlbmd0aERlZmVycmVkKSB7XG4gICAgICAgIHJlcS5zZXRIZWFkZXIoJ1VwbG9hZC1EZWZlci1MZW5ndGgnLCAxKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlcS5zZXRIZWFkZXIoJ1VwbG9hZC1MZW5ndGgnLCB0aGlzLl9zaXplKTtcbiAgICAgIH0gLy8gQWRkIG1ldGFkYXRhIGlmIHZhbHVlcyBoYXZlIGJlZW4gYWRkZWRcblxuXG4gICAgICB2YXIgbWV0YWRhdGEgPSBlbmNvZGVNZXRhZGF0YSh0aGlzLm9wdGlvbnMubWV0YWRhdGEpO1xuXG4gICAgICBpZiAobWV0YWRhdGEgIT09ICcnKSB7XG4gICAgICAgIHJlcS5zZXRIZWFkZXIoJ1VwbG9hZC1NZXRhZGF0YScsIG1ldGFkYXRhKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHByb21pc2U7XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMudXBsb2FkRGF0YUR1cmluZ0NyZWF0aW9uICYmICF0aGlzLm9wdGlvbnMudXBsb2FkTGVuZ3RoRGVmZXJyZWQpIHtcbiAgICAgICAgdGhpcy5fb2Zmc2V0ID0gMDtcbiAgICAgICAgcHJvbWlzZSA9IHRoaXMuX2FkZENodW5rVG9SZXF1ZXN0KHJlcSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9taXNlID0gdGhpcy5fc2VuZFJlcXVlc3QocmVxLCBudWxsKTtcbiAgICAgIH1cblxuICAgICAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgICAgaWYgKCFpblN0YXR1c0NhdGVnb3J5KHJlcy5nZXRTdGF0dXMoKSwgMjAwKSkge1xuICAgICAgICAgIF90aGlzNi5fZW1pdEh0dHBFcnJvcihyZXEsIHJlcywgJ3R1czogdW5leHBlY3RlZCByZXNwb25zZSB3aGlsZSBjcmVhdGluZyB1cGxvYWQnKTtcblxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBsb2NhdGlvbiA9IHJlcy5nZXRIZWFkZXIoJ0xvY2F0aW9uJyk7XG5cbiAgICAgICAgaWYgKGxvY2F0aW9uID09IG51bGwpIHtcbiAgICAgICAgICBfdGhpczYuX2VtaXRIdHRwRXJyb3IocmVxLCByZXMsICd0dXM6IGludmFsaWQgb3IgbWlzc2luZyBMb2NhdGlvbiBoZWFkZXInKTtcblxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIF90aGlzNi51cmwgPSByZXNvbHZlVXJsKF90aGlzNi5vcHRpb25zLmVuZHBvaW50LCBsb2NhdGlvbik7XG4gICAgICAgICgwLCBfbG9nZ2VyLmxvZykoXCJDcmVhdGVkIHVwbG9hZCBhdCBcIi5jb25jYXQoX3RoaXM2LnVybCkpO1xuXG4gICAgICAgIGlmICh0eXBlb2YgX3RoaXM2Lm9wdGlvbnMuX29uVXBsb2FkVXJsQXZhaWxhYmxlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgX3RoaXM2Lm9wdGlvbnMuX29uVXBsb2FkVXJsQXZhaWxhYmxlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoX3RoaXM2Ll9zaXplID09PSAwKSB7XG4gICAgICAgICAgLy8gTm90aGluZyB0byB1cGxvYWQgYW5kIGZpbGUgd2FzIHN1Y2Nlc3NmdWxseSBjcmVhdGVkXG4gICAgICAgICAgX3RoaXM2Ll9lbWl0U3VjY2VzcygpO1xuXG4gICAgICAgICAgX3RoaXM2Ll9zb3VyY2UuY2xvc2UoKTtcblxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIF90aGlzNi5fc2F2ZVVwbG9hZEluVXJsU3RvcmFnZSgpO1xuXG4gICAgICAgIGlmIChfdGhpczYub3B0aW9ucy51cGxvYWREYXRhRHVyaW5nQ3JlYXRpb24pIHtcbiAgICAgICAgICBfdGhpczYuX2hhbmRsZVVwbG9hZFJlc3BvbnNlKHJlcSwgcmVzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfdGhpczYuX29mZnNldCA9IDA7XG5cbiAgICAgICAgICBfdGhpczYuX3BlcmZvcm1VcGxvYWQoKTtcbiAgICAgICAgfVxuICAgICAgfSlbXCJjYXRjaFwiXShmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIF90aGlzNi5fZW1pdEh0dHBFcnJvcihyZXEsIG51bGwsICd0dXM6IGZhaWxlZCB0byBjcmVhdGUgdXBsb2FkJywgZXJyKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICAvKlxuICAgICAqIFRyeSB0byByZXN1bWUgYW4gZXhpc3RpbmcgdXBsb2FkLiBGaXJzdCBhIEhFQUQgcmVxdWVzdCB3aWxsIGJlIHNlbnRcbiAgICAgKiB0byByZXRyaWV2ZSB0aGUgb2Zmc2V0LiBJZiB0aGUgcmVxdWVzdCBmYWlscyBhIG5ldyB1cGxvYWQgd2lsbCBiZVxuICAgICAqIGNyZWF0ZWQuIEluIHRoZSBjYXNlIG9mIGEgc3VjY2Vzc2Z1bCByZXNwb25zZSB0aGUgZmlsZSB3aWxsIGJlIHVwbG9hZGVkLlxuICAgICAqXG4gICAgICogQGFwaSBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJfcmVzdW1lVXBsb2FkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9yZXN1bWVVcGxvYWQoKSB7XG4gICAgICB2YXIgX3RoaXM3ID0gdGhpcztcblxuICAgICAgdmFyIHJlcSA9IHRoaXMuX29wZW5SZXF1ZXN0KCdIRUFEJywgdGhpcy51cmwpO1xuXG4gICAgICB2YXIgcHJvbWlzZSA9IHRoaXMuX3NlbmRSZXF1ZXN0KHJlcSwgbnVsbCk7XG5cbiAgICAgIHByb21pc2UudGhlbihmdW5jdGlvbiAocmVzKSB7XG4gICAgICAgIHZhciBzdGF0dXMgPSByZXMuZ2V0U3RhdHVzKCk7XG5cbiAgICAgICAgaWYgKCFpblN0YXR1c0NhdGVnb3J5KHN0YXR1cywgMjAwKSkge1xuICAgICAgICAgIGlmIChpblN0YXR1c0NhdGVnb3J5KHN0YXR1cywgNDAwKSkge1xuICAgICAgICAgICAgLy8gUmVtb3ZlIHN0b3JlZCBmaW5nZXJwcmludCBhbmQgY29ycmVzcG9uZGluZyBlbmRwb2ludCxcbiAgICAgICAgICAgIC8vIG9uIGNsaWVudCBlcnJvcnMgc2luY2UgdGhlIGZpbGUgY2FuIG5vdCBiZSBmb3VuZFxuICAgICAgICAgICAgX3RoaXM3Ll9yZW1vdmVGcm9tVXJsU3RvcmFnZSgpO1xuICAgICAgICAgIH0gLy8gSWYgdGhlIHVwbG9hZCBpcyBsb2NrZWQgKGluZGljYXRlZCBieSB0aGUgNDIzIExvY2tlZCBzdGF0dXMgY29kZSksIHdlXG4gICAgICAgICAgLy8gZW1pdCBhbiBlcnJvciBpbnN0ZWFkIG9mIGRpcmVjdGx5IHN0YXJ0aW5nIGEgbmV3IHVwbG9hZC4gVGhpcyB3YXkgdGhlXG4gICAgICAgICAgLy8gcmV0cnkgbG9naWMgY2FuIGNhdGNoIHRoZSBlcnJvciBhbmQgd2lsbCByZXRyeSB0aGUgdXBsb2FkLiBBbiB1cGxvYWRcbiAgICAgICAgICAvLyBpcyB1c3VhbGx5IGxvY2tlZCBmb3IgYSBzaG9ydCBwZXJpb2Qgb2YgdGltZSBhbmQgd2lsbCBiZSBhdmFpbGFibGVcbiAgICAgICAgICAvLyBhZnRlcndhcmRzLlxuXG5cbiAgICAgICAgICBpZiAoc3RhdHVzID09PSA0MjMpIHtcbiAgICAgICAgICAgIF90aGlzNy5fZW1pdEh0dHBFcnJvcihyZXEsIHJlcywgJ3R1czogdXBsb2FkIGlzIGN1cnJlbnRseSBsb2NrZWQ7IHJldHJ5IGxhdGVyJyk7XG5cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoIV90aGlzNy5vcHRpb25zLmVuZHBvaW50KSB7XG4gICAgICAgICAgICAvLyBEb24ndCBhdHRlbXB0IHRvIGNyZWF0ZSBhIG5ldyB1cGxvYWQgaWYgbm8gZW5kcG9pbnQgaXMgcHJvdmlkZWQuXG4gICAgICAgICAgICBfdGhpczcuX2VtaXRIdHRwRXJyb3IocmVxLCByZXMsICd0dXM6IHVuYWJsZSB0byByZXN1bWUgdXBsb2FkIChuZXcgdXBsb2FkIGNhbm5vdCBiZSBjcmVhdGVkIHdpdGhvdXQgYW4gZW5kcG9pbnQpJyk7XG5cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9IC8vIFRyeSB0byBjcmVhdGUgYSBuZXcgdXBsb2FkXG5cblxuICAgICAgICAgIF90aGlzNy51cmwgPSBudWxsO1xuXG4gICAgICAgICAgX3RoaXM3Ll9jcmVhdGVVcGxvYWQoKTtcblxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBvZmZzZXQgPSBwYXJzZUludChyZXMuZ2V0SGVhZGVyKCdVcGxvYWQtT2Zmc2V0JyksIDEwKTtcblxuICAgICAgICBpZiAoaXNOYU4ob2Zmc2V0KSkge1xuICAgICAgICAgIF90aGlzNy5fZW1pdEh0dHBFcnJvcihyZXEsIHJlcywgJ3R1czogaW52YWxpZCBvciBtaXNzaW5nIG9mZnNldCB2YWx1ZScpO1xuXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGxlbmd0aCA9IHBhcnNlSW50KHJlcy5nZXRIZWFkZXIoJ1VwbG9hZC1MZW5ndGgnKSwgMTApO1xuXG4gICAgICAgIGlmIChpc05hTihsZW5ndGgpICYmICFfdGhpczcub3B0aW9ucy51cGxvYWRMZW5ndGhEZWZlcnJlZCkge1xuICAgICAgICAgIF90aGlzNy5fZW1pdEh0dHBFcnJvcihyZXEsIHJlcywgJ3R1czogaW52YWxpZCBvciBtaXNzaW5nIGxlbmd0aCB2YWx1ZScpO1xuXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBfdGhpczcub3B0aW9ucy5fb25VcGxvYWRVcmxBdmFpbGFibGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBfdGhpczcub3B0aW9ucy5fb25VcGxvYWRVcmxBdmFpbGFibGUoKTtcbiAgICAgICAgfSAvLyBVcGxvYWQgaGFzIGFscmVhZHkgYmVlbiBjb21wbGV0ZWQgYW5kIHdlIGRvIG5vdCBuZWVkIHRvIHNlbmQgYWRkaXRpb25hbFxuICAgICAgICAvLyBkYXRhIHRvIHRoZSBzZXJ2ZXJcblxuXG4gICAgICAgIGlmIChvZmZzZXQgPT09IGxlbmd0aCkge1xuICAgICAgICAgIF90aGlzNy5fZW1pdFByb2dyZXNzKGxlbmd0aCwgbGVuZ3RoKTtcblxuICAgICAgICAgIF90aGlzNy5fZW1pdFN1Y2Nlc3MoKTtcblxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIF90aGlzNy5fb2Zmc2V0ID0gb2Zmc2V0O1xuXG4gICAgICAgIF90aGlzNy5fcGVyZm9ybVVwbG9hZCgpO1xuICAgICAgfSlbXCJjYXRjaFwiXShmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIF90aGlzNy5fZW1pdEh0dHBFcnJvcihyZXEsIG51bGwsICd0dXM6IGZhaWxlZCB0byByZXN1bWUgdXBsb2FkJywgZXJyKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTdGFydCB1cGxvYWRpbmcgdGhlIGZpbGUgdXNpbmcgUEFUQ0ggcmVxdWVzdHMuIFRoZSBmaWxlIHdpbGwgYmUgZGl2aWRlZFxuICAgICAqIGludG8gY2h1bmtzIGFzIHNwZWNpZmllZCBpbiB0aGUgY2h1bmtTaXplIG9wdGlvbi4gRHVyaW5nIHRoZSB1cGxvYWRcbiAgICAgKiB0aGUgb25Qcm9ncmVzcyBldmVudCBoYW5kbGVyIG1heSBiZSBpbnZva2VkIG11bHRpcGxlIHRpbWVzLlxuICAgICAqXG4gICAgICogQGFwaSBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJfcGVyZm9ybVVwbG9hZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfcGVyZm9ybVVwbG9hZCgpIHtcbiAgICAgIHZhciBfdGhpczggPSB0aGlzOyAvLyBJZiB0aGUgdXBsb2FkIGhhcyBiZWVuIGFib3J0ZWQsIHdlIHdpbGwgbm90IHNlbmQgdGhlIG5leHQgUEFUQ0ggcmVxdWVzdC5cbiAgICAgIC8vIFRoaXMgaXMgaW1wb3J0YW50IGlmIHRoZSBhYm9ydCBtZXRob2Qgd2FzIGNhbGxlZCBkdXJpbmcgYSBjYWxsYmFjaywgc3VjaFxuICAgICAgLy8gYXMgb25DaHVua0NvbXBsZXRlIG9yIG9uUHJvZ3Jlc3MuXG5cblxuICAgICAgaWYgKHRoaXMuX2Fib3J0ZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVxOyAvLyBTb21lIGJyb3dzZXIgYW5kIHNlcnZlcnMgbWF5IG5vdCBzdXBwb3J0IHRoZSBQQVRDSCBtZXRob2QuIEZvciB0aG9zZVxuICAgICAgLy8gY2FzZXMsIHlvdSBjYW4gdGVsbCB0dXMtanMtY2xpZW50IHRvIHVzZSBhIFBPU1QgcmVxdWVzdCB3aXRoIHRoZVxuICAgICAgLy8gWC1IVFRQLU1ldGhvZC1PdmVycmlkZSBoZWFkZXIgZm9yIHNpbXVsYXRpbmcgYSBQQVRDSCByZXF1ZXN0LlxuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLm92ZXJyaWRlUGF0Y2hNZXRob2QpIHtcbiAgICAgICAgcmVxID0gdGhpcy5fb3BlblJlcXVlc3QoJ1BPU1QnLCB0aGlzLnVybCk7XG4gICAgICAgIHJlcS5zZXRIZWFkZXIoJ1gtSFRUUC1NZXRob2QtT3ZlcnJpZGUnLCAnUEFUQ0gnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlcSA9IHRoaXMuX29wZW5SZXF1ZXN0KCdQQVRDSCcsIHRoaXMudXJsKTtcbiAgICAgIH1cblxuICAgICAgcmVxLnNldEhlYWRlcignVXBsb2FkLU9mZnNldCcsIHRoaXMuX29mZnNldCk7XG5cbiAgICAgIHZhciBwcm9taXNlID0gdGhpcy5fYWRkQ2h1bmtUb1JlcXVlc3QocmVxKTtcblxuICAgICAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgICAgaWYgKCFpblN0YXR1c0NhdGVnb3J5KHJlcy5nZXRTdGF0dXMoKSwgMjAwKSkge1xuICAgICAgICAgIF90aGlzOC5fZW1pdEh0dHBFcnJvcihyZXEsIHJlcywgJ3R1czogdW5leHBlY3RlZCByZXNwb25zZSB3aGlsZSB1cGxvYWRpbmcgY2h1bmsnKTtcblxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIF90aGlzOC5faGFuZGxlVXBsb2FkUmVzcG9uc2UocmVxLCByZXMpO1xuICAgICAgfSlbXCJjYXRjaFwiXShmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIC8vIERvbid0IGVtaXQgYW4gZXJyb3IgaWYgdGhlIHVwbG9hZCB3YXMgYWJvcnRlZCBtYW51YWxseVxuICAgICAgICBpZiAoX3RoaXM4Ll9hYm9ydGVkKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXM4Ll9lbWl0SHR0cEVycm9yKHJlcSwgbnVsbCwgXCJ0dXM6IGZhaWxlZCB0byB1cGxvYWQgY2h1bmsgYXQgb2Zmc2V0IFwiLmNvbmNhdChfdGhpczguX29mZnNldCksIGVycik7XG4gICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogX2FkZENodW5rdG9SZXF1ZXN0IHJlYWRzIGEgY2h1bmsgZnJvbSB0aGUgc291cmNlIGFuZCBzZW5kcyBpdCB1c2luZyB0aGVcbiAgICAgKiBzdXBwbGllZCByZXF1ZXN0IG9iamVjdC4gSXQgd2lsbCBub3QgaGFuZGxlIHRoZSByZXNwb25zZS5cbiAgICAgKlxuICAgICAqIEBhcGkgcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiX2FkZENodW5rVG9SZXF1ZXN0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9hZGRDaHVua1RvUmVxdWVzdChyZXEpIHtcbiAgICAgIHZhciBfdGhpczkgPSB0aGlzO1xuXG4gICAgICB2YXIgc3RhcnQgPSB0aGlzLl9vZmZzZXQ7XG4gICAgICB2YXIgZW5kID0gdGhpcy5fb2Zmc2V0ICsgdGhpcy5vcHRpb25zLmNodW5rU2l6ZTtcbiAgICAgIHJlcS5zZXRQcm9ncmVzc0hhbmRsZXIoZnVuY3Rpb24gKGJ5dGVzU2VudCkge1xuICAgICAgICBfdGhpczkuX2VtaXRQcm9ncmVzcyhzdGFydCArIGJ5dGVzU2VudCwgX3RoaXM5Ll9zaXplKTtcbiAgICAgIH0pO1xuICAgICAgcmVxLnNldEhlYWRlcignQ29udGVudC1UeXBlJywgJ2FwcGxpY2F0aW9uL29mZnNldCtvY3RldC1zdHJlYW0nKTsgLy8gVGhlIHNwZWNpZmllZCBjaHVua1NpemUgbWF5IGJlIEluZmluaXR5IG9yIHRoZSBjYWxjbHVhdGVkIGVuZCBwb3NpdGlvblxuICAgICAgLy8gbWF5IGV4Y2VlZCB0aGUgZmlsZSdzIHNpemUuIEluIGJvdGggY2FzZXMsIHdlIGxpbWl0IHRoZSBlbmQgcG9zaXRpb24gdG9cbiAgICAgIC8vIHRoZSBpbnB1dCdzIHRvdGFsIHNpemUgZm9yIHNpbXBsZXIgY2FsY3VsYXRpb25zIGFuZCBjb3JyZWN0bmVzcy5cblxuICAgICAgaWYgKChlbmQgPT09IEluZmluaXR5IHx8IGVuZCA+IHRoaXMuX3NpemUpICYmICF0aGlzLm9wdGlvbnMudXBsb2FkTGVuZ3RoRGVmZXJyZWQpIHtcbiAgICAgICAgZW5kID0gdGhpcy5fc2l6ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuX3NvdXJjZS5zbGljZShzdGFydCwgZW5kKS50aGVuKGZ1bmN0aW9uIChfcmVmMikge1xuICAgICAgICB2YXIgdmFsdWUgPSBfcmVmMi52YWx1ZSxcbiAgICAgICAgICAgIGRvbmUgPSBfcmVmMi5kb25lOyAvLyBJZiB0aGUgdXBsb2FkIGxlbmd0aCBpcyBkZWZlcnJlZCwgdGhlIHVwbG9hZCBzaXplIHdhcyBub3Qgc3BlY2lmaWVkIGR1cmluZ1xuICAgICAgICAvLyB1cGxvYWQgY3JlYXRpb24uIFNvLCBpZiB0aGUgZmlsZSByZWFkZXIgaXMgZG9uZSByZWFkaW5nLCB3ZSBrbm93IHRoZSB0b3RhbFxuICAgICAgICAvLyB1cGxvYWQgc2l6ZSBhbmQgY2FuIHRlbGwgdGhlIHR1cyBzZXJ2ZXIuXG5cbiAgICAgICAgaWYgKF90aGlzOS5vcHRpb25zLnVwbG9hZExlbmd0aERlZmVycmVkICYmIGRvbmUpIHtcbiAgICAgICAgICBfdGhpczkuX3NpemUgPSBfdGhpczkuX29mZnNldCArICh2YWx1ZSAmJiB2YWx1ZS5zaXplID8gdmFsdWUuc2l6ZSA6IDApO1xuICAgICAgICAgIHJlcS5zZXRIZWFkZXIoJ1VwbG9hZC1MZW5ndGgnLCBfdGhpczkuX3NpemUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzOS5fc2VuZFJlcXVlc3QocmVxKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF90aGlzOS5fZW1pdFByb2dyZXNzKF90aGlzOS5fb2Zmc2V0LCBfdGhpczkuX3NpemUpO1xuXG4gICAgICAgIHJldHVybiBfdGhpczkuX3NlbmRSZXF1ZXN0KHJlcSwgdmFsdWUpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIF9oYW5kbGVVcGxvYWRSZXNwb25zZSBpcyB1c2VkIGJ5IHJlcXVlc3RzIHRoYXQgaGF2ZW4gYmVlbiBzZW50IHVzaW5nIF9hZGRDaHVua1RvUmVxdWVzdFxuICAgICAqIGFuZCBhbHJlYWR5IGhhdmUgcmVjZWl2ZWQgYSByZXNwb25zZS5cbiAgICAgKlxuICAgICAqIEBhcGkgcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiX2hhbmRsZVVwbG9hZFJlc3BvbnNlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9oYW5kbGVVcGxvYWRSZXNwb25zZShyZXEsIHJlcykge1xuICAgICAgdmFyIG9mZnNldCA9IHBhcnNlSW50KHJlcy5nZXRIZWFkZXIoJ1VwbG9hZC1PZmZzZXQnKSwgMTApO1xuXG4gICAgICBpZiAoaXNOYU4ob2Zmc2V0KSkge1xuICAgICAgICB0aGlzLl9lbWl0SHR0cEVycm9yKHJlcSwgcmVzLCAndHVzOiBpbnZhbGlkIG9yIG1pc3Npbmcgb2Zmc2V0IHZhbHVlJyk7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9lbWl0UHJvZ3Jlc3Mob2Zmc2V0LCB0aGlzLl9zaXplKTtcblxuICAgICAgdGhpcy5fZW1pdENodW5rQ29tcGxldGUob2Zmc2V0IC0gdGhpcy5fb2Zmc2V0LCBvZmZzZXQsIHRoaXMuX3NpemUpO1xuXG4gICAgICB0aGlzLl9vZmZzZXQgPSBvZmZzZXQ7XG5cbiAgICAgIGlmIChvZmZzZXQgPT0gdGhpcy5fc2l6ZSkge1xuICAgICAgICAvLyBZYXksIGZpbmFsbHkgZG9uZSA6KVxuICAgICAgICB0aGlzLl9lbWl0U3VjY2VzcygpO1xuXG4gICAgICAgIHRoaXMuX3NvdXJjZS5jbG9zZSgpO1xuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fcGVyZm9ybVVwbG9hZCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgSFRUUCByZXF1ZXN0IG9iamVjdCB3aXRoIHRoZSBnaXZlbiBtZXRob2QgYW5kIFVSTC5cbiAgICAgKlxuICAgICAqIEBhcGkgcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiX29wZW5SZXF1ZXN0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9vcGVuUmVxdWVzdChtZXRob2QsIHVybCkge1xuICAgICAgdmFyIHJlcSA9IG9wZW5SZXF1ZXN0KG1ldGhvZCwgdXJsLCB0aGlzLm9wdGlvbnMpO1xuICAgICAgdGhpcy5fcmVxID0gcmVxO1xuICAgICAgcmV0dXJuIHJlcTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVtb3ZlIHRoZSBlbnRyeSBpbiB0aGUgVVJMIHN0b3JhZ2UsIGlmIGl0IGhhcyBiZWVuIHNhdmVkIGJlZm9yZS5cbiAgICAgKlxuICAgICAqIEBhcGkgcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiX3JlbW92ZUZyb21VcmxTdG9yYWdlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9yZW1vdmVGcm9tVXJsU3RvcmFnZSgpIHtcbiAgICAgIHZhciBfdGhpczEwID0gdGhpcztcblxuICAgICAgaWYgKCF0aGlzLl91cmxTdG9yYWdlS2V5KSByZXR1cm47XG5cbiAgICAgIHRoaXMuX3VybFN0b3JhZ2UucmVtb3ZlVXBsb2FkKHRoaXMuX3VybFN0b3JhZ2VLZXkpW1wiY2F0Y2hcIl0oZnVuY3Rpb24gKGVycikge1xuICAgICAgICBfdGhpczEwLl9lbWl0RXJyb3IoZXJyKTtcbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLl91cmxTdG9yYWdlS2V5ID0gbnVsbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRkIHRoZSB1cGxvYWQgVVJMIHRvIHRoZSBVUkwgc3RvcmFnZSwgaWYgcG9zc2libGUuXG4gICAgICpcbiAgICAgKiBAYXBpIHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcIl9zYXZlVXBsb2FkSW5VcmxTdG9yYWdlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9zYXZlVXBsb2FkSW5VcmxTdG9yYWdlKCkge1xuICAgICAgdmFyIF90aGlzMTEgPSB0aGlzOyAvLyBPbmx5IGlmIGEgZmluZ2VycHJpbnQgd2FzIGNhbGN1bGF0ZWQgZm9yIHRoZSBpbnB1dCAoaS5lLiBub3QgYSBzdHJlYW0pLCB3ZSBjYW4gc3RvcmUgdGhlIHVwbG9hZCBVUkwuXG5cblxuICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuc3RvcmVGaW5nZXJwcmludEZvclJlc3VtaW5nIHx8ICF0aGlzLl9maW5nZXJwcmludCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBzdG9yZWRVcGxvYWQgPSB7XG4gICAgICAgIHNpemU6IHRoaXMuX3NpemUsXG4gICAgICAgIG1ldGFkYXRhOiB0aGlzLm9wdGlvbnMubWV0YWRhdGEsXG4gICAgICAgIGNyZWF0aW9uVGltZTogbmV3IERhdGUoKS50b1N0cmluZygpXG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5fcGFyYWxsZWxVcGxvYWRzKSB7XG4gICAgICAgIC8vIFNhdmUgbXVsdGlwbGUgVVJMcyBpZiB0aGUgcGFyYWxsZWxVcGxvYWRzIG9wdGlvbiBpcyB1c2VkIC4uLlxuICAgICAgICBzdG9yZWRVcGxvYWQucGFyYWxsZWxVcGxvYWRVcmxzID0gdGhpcy5fcGFyYWxsZWxVcGxvYWRVcmxzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gLi4uIG90aGVyd2lzZSB3ZSBqdXN0IHNhdmUgdGhlIG9uZSBhdmFpbGFibGUgVVJMLlxuICAgICAgICBzdG9yZWRVcGxvYWQudXBsb2FkVXJsID0gdGhpcy51cmw7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3VybFN0b3JhZ2UuYWRkVXBsb2FkKHRoaXMuX2ZpbmdlcnByaW50LCBzdG9yZWRVcGxvYWQpLnRoZW4oZnVuY3Rpb24gKHVybFN0b3JhZ2VLZXkpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzMTEuX3VybFN0b3JhZ2VLZXkgPSB1cmxTdG9yYWdlS2V5O1xuICAgICAgfSlbXCJjYXRjaFwiXShmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIF90aGlzMTEuX2VtaXRFcnJvcihlcnIpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNlbmQgYSByZXF1ZXN0IHdpdGggdGhlIHByb3ZpZGVkIGJvZHkuXG4gICAgICpcbiAgICAgKiBAYXBpIHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcIl9zZW5kUmVxdWVzdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfc2VuZFJlcXVlc3QocmVxKSB7XG4gICAgICB2YXIgYm9keSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogbnVsbDtcbiAgICAgIHJldHVybiBzZW5kUmVxdWVzdChyZXEsIGJvZHksIHRoaXMub3B0aW9ucyk7XG4gICAgfVxuICB9XSwgW3tcbiAgICBrZXk6IFwidGVybWluYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRlcm1pbmF0ZSh1cmwsIG9wdGlvbnMpIHtcbiAgICAgIC8vIENvdW50IHRoZSBudW1iZXIgb2YgYXJndW1lbnRzIHRvIHNlZSBpZiBhIGNhbGxiYWNrIGlzIGJlaW5nIHByb3ZpZGVkIGFzIHRoZSBsYXN0XG4gICAgICAvLyBhcmd1bWVudCBpbiB0aGUgb2xkIHN0eWxlIHJlcXVpcmVkIGJ5IHR1cy1qcy1jbGllbnQgMS54LCB0aGVuIHRocm93IGFuIGVycm9yIGlmIGl0IGlzLlxuICAgICAgLy8gYGFyZ3VtZW50c2AgaXMgYSBKYXZhU2NyaXB0IGJ1aWx0LWluIHZhcmlhYmxlIHRoYXQgY29udGFpbnMgYWxsIG9mIHRoZSBmdW5jdGlvbidzIGFyZ3VtZW50cy5cbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSAmJiB0eXBlb2YgYXJndW1lbnRzW2FyZ3VtZW50cy5sZW5ndGggLSAxXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3R1czogdGhlIHRlcm1pbmF0ZSBmdW5jdGlvbiBkb2VzIG5vdCBhY2NlcHQgYSBjYWxsYmFjayBzaW5jZSB2MiBhbnltb3JlOyBwbGVhc2UgdXNlIHRoZSByZXR1cm5lZCBQcm9taXNlIGluc3RlYWQnKTtcbiAgICAgIH0gLy8gTm90ZSB0aGF0IGluIG9yZGVyIGZvciB0aGUgdHJpY2sgYWJvdmUgdG8gd29yaywgYSBkZWZhdWx0IHZhbHVlIGNhbm5vdCBiZSBzZXQgZm9yIGBvcHRpb25zYCxcbiAgICAgIC8vIHNvIHRoZSBjaGVjayBiZWxvdyByZXBsYWNlcyB0aGUgb2xkIGRlZmF1bHQgYHt9YC5cblxuXG4gICAgICBpZiAob3B0aW9ucyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlcSA9IG9wZW5SZXF1ZXN0KCdERUxFVEUnLCB1cmwsIG9wdGlvbnMpO1xuICAgICAgcmV0dXJuIHNlbmRSZXF1ZXN0KHJlcSwgbnVsbCwgb3B0aW9ucykudGhlbihmdW5jdGlvbiAocmVzKSB7XG4gICAgICAgIC8vIEEgMjA0IHJlc3BvbnNlIGluZGljYXRlcyBhIHN1Y2Nlc3NmdWxsIHJlcXVlc3RcbiAgICAgICAgaWYgKHJlcy5nZXRTdGF0dXMoKSA9PT0gMjA0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhyb3cgbmV3IF9lcnJvci5kZWZhdWx0KCd0dXM6IHVuZXhwZWN0ZWQgcmVzcG9uc2Ugd2hpbGUgdGVybWluYXRpbmcgdXBsb2FkJywgbnVsbCwgcmVxLCByZXMpO1xuICAgICAgfSlbXCJjYXRjaFwiXShmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIGlmICghKGVyciBpbnN0YW5jZW9mIF9lcnJvci5kZWZhdWx0KSkge1xuICAgICAgICAgIGVyciA9IG5ldyBfZXJyb3IuZGVmYXVsdCgndHVzOiBmYWlsZWQgdG8gdGVybWluYXRlIHVwbG9hZCcsIGVyciwgcmVxLCBudWxsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghc2hvdWxkUmV0cnkoZXJyLCAwLCBvcHRpb25zKSkge1xuICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgfSAvLyBJbnN0ZWFkIG9mIGtlZXBpbmcgdHJhY2sgb2YgdGhlIHJldHJ5IGF0dGVtcHRzLCB3ZSByZW1vdmUgdGhlIGZpcnN0IGVsZW1lbnQgZnJvbSB0aGUgZGVsYXlzXG4gICAgICAgIC8vIGFycmF5LiBJZiB0aGUgYXJyYXkgaXMgZW1wdHksIGFsbCByZXRyeSBhdHRlbXB0cyBhcmUgdXNlZCB1cCBhbmQgd2Ugd2lsbCBidWJibGUgdXAgdGhlIGVycm9yLlxuICAgICAgICAvLyBXZSByZWN1cnNpdmVseSBjYWxsIHRoZSB0ZXJtaW5hdGUgZnVuY3Rpb24gd2lsbCByZW1vdmluZyBlbGVtZW50cyBmcm9tIHRoZSByZXRyeURlbGF5cyBhcnJheS5cblxuXG4gICAgICAgIHZhciBkZWxheSA9IG9wdGlvbnMucmV0cnlEZWxheXNbMF07XG4gICAgICAgIHZhciByZW1haW5pbmdEZWxheXMgPSBvcHRpb25zLnJldHJ5RGVsYXlzLnNsaWNlKDEpO1xuXG4gICAgICAgIHZhciBuZXdPcHRpb25zID0gX29iamVjdFNwcmVhZCh7fSwgb3B0aW9ucywge1xuICAgICAgICAgIHJldHJ5RGVsYXlzOiByZW1haW5pbmdEZWxheXNcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQocmVzb2x2ZSwgZGVsYXkpO1xuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gQmFzZVVwbG9hZC50ZXJtaW5hdGUodXJsLCBuZXdPcHRpb25zKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQmFzZVVwbG9hZDtcbn0oKTtcblxuZnVuY3Rpb24gZW5jb2RlTWV0YWRhdGEobWV0YWRhdGEpIHtcbiAgdmFyIGVuY29kZWQgPSBbXTtcblxuICBmb3IgKHZhciBrZXkgaW4gbWV0YWRhdGEpIHtcbiAgICBlbmNvZGVkLnB1c2goXCJcIi5jb25jYXQoa2V5LCBcIiBcIikuY29uY2F0KF9qc0Jhc2UuQmFzZTY0LmVuY29kZShtZXRhZGF0YVtrZXldKSkpO1xuICB9XG5cbiAgcmV0dXJuIGVuY29kZWQuam9pbignLCcpO1xufVxuLyoqXG4gKiBDaGVja3Mgd2hldGhlciBhIGdpdmVuIHN0YXR1cyBpcyBpbiB0aGUgcmFuZ2Ugb2YgdGhlIGV4cGVjdGVkIGNhdGVnb3J5LlxuICogRm9yIGV4YW1wbGUsIG9ubHkgYSBzdGF0dXMgYmV0d2VlbiAyMDAgYW5kIDI5OSB3aWxsIHNhdGlzZnkgdGhlIGNhdGVnb3J5IDIwMC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5cbmZ1bmN0aW9uIGluU3RhdHVzQ2F0ZWdvcnkoc3RhdHVzLCBjYXRlZ29yeSkge1xuICByZXR1cm4gc3RhdHVzID49IGNhdGVnb3J5ICYmIHN0YXR1cyA8IGNhdGVnb3J5ICsgMTAwO1xufVxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgSFRUUCByZXF1ZXN0IHdpdGggdGhlIHNwZWNpZmllZCBtZXRob2QgYW5kIFVSTC5cbiAqIFRoZSBuZWNlc3NhcnkgaGVhZGVycyB0aGF0IGFyZSBpbmNsdWRlZCBpbiBldmVyeSByZXF1ZXN0XG4gKiB3aWxsIGJlIGFkZGVkLCBpbmNsdWRpbmcgdGhlIHJlcXVlc3QgSUQuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuXG5mdW5jdGlvbiBvcGVuUmVxdWVzdChtZXRob2QsIHVybCwgb3B0aW9ucykge1xuICB2YXIgcmVxID0gb3B0aW9ucy5odHRwU3RhY2suY3JlYXRlUmVxdWVzdChtZXRob2QsIHVybCk7XG4gIHJlcS5zZXRIZWFkZXIoJ1R1cy1SZXN1bWFibGUnLCAnMS4wLjAnKTtcbiAgdmFyIGhlYWRlcnMgPSBvcHRpb25zLmhlYWRlcnMgfHwge307XG5cbiAgZm9yICh2YXIgbmFtZSBpbiBoZWFkZXJzKSB7XG4gICAgcmVxLnNldEhlYWRlcihuYW1lLCBoZWFkZXJzW25hbWVdKTtcbiAgfVxuXG4gIGlmIChvcHRpb25zLmFkZFJlcXVlc3RJZCkge1xuICAgIHZhciByZXF1ZXN0SWQgPSAoMCwgX3V1aWQuZGVmYXVsdCkoKTtcbiAgICByZXEuc2V0SGVhZGVyKCdYLVJlcXVlc3QtSUQnLCByZXF1ZXN0SWQpO1xuICB9XG5cbiAgcmV0dXJuIHJlcTtcbn1cbi8qKlxuICogU2VuZCBhIHJlcXVlc3Qgd2l0aCB0aGUgcHJvdmlkZWQgYm9keSB3aGlsZSBpbnZva2luZyB0aGUgb25CZWZvcmVSZXF1ZXN0XG4gKiBhbmQgb25BZnRlclJlc3BvbnNlIGNhbGxiYWNrcy5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5cbmZ1bmN0aW9uIHNlbmRSZXF1ZXN0KHJlcSwgYm9keSwgb3B0aW9ucykge1xuICB2YXIgb25CZWZvcmVSZXF1ZXN0UHJvbWlzZSA9IHR5cGVvZiBvcHRpb25zLm9uQmVmb3JlUmVxdWVzdCA9PT0gJ2Z1bmN0aW9uJyA/IFByb21pc2UucmVzb2x2ZShvcHRpb25zLm9uQmVmb3JlUmVxdWVzdChyZXEpKSA6IFByb21pc2UucmVzb2x2ZSgpO1xuICByZXR1cm4gb25CZWZvcmVSZXF1ZXN0UHJvbWlzZS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gcmVxLnNlbmQoYm9keSkudGhlbihmdW5jdGlvbiAocmVzKSB7XG4gICAgICB2YXIgb25BZnRlclJlc3BvbnNlUHJvbWlzZSA9IHR5cGVvZiBvcHRpb25zLm9uQWZ0ZXJSZXNwb25zZSA9PT0gJ2Z1bmN0aW9uJyA/IFByb21pc2UucmVzb2x2ZShvcHRpb25zLm9uQWZ0ZXJSZXNwb25zZShyZXEsIHJlcykpIDogUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICByZXR1cm4gb25BZnRlclJlc3BvbnNlUHJvbWlzZS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcbn1cbi8qKlxuICogQ2hlY2tzIHdoZXRoZXIgdGhlIGJyb3dzZXIgcnVubmluZyB0aGlzIGNvZGUgaGFzIGludGVybmV0IGFjY2Vzcy5cbiAqIFRoaXMgZnVuY3Rpb24gd2lsbCBhbHdheXMgcmV0dXJuIHRydWUgaW4gdGhlIG5vZGUuanMgZW52aXJvbm1lbnRcbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5cbmZ1bmN0aW9uIGlzT25saW5lKCkge1xuICB2YXIgb25saW5lID0gdHJ1ZTtcblxuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgJ25hdmlnYXRvcicgaW4gd2luZG93ICYmIHdpbmRvdy5uYXZpZ2F0b3Iub25MaW5lID09PSBmYWxzZSkge1xuICAgIG9ubGluZSA9IGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIG9ubGluZTtcbn1cbi8qKlxuICogQ2hlY2tzIHdoZXRoZXIgb3Igbm90IGl0IGlzIG9rIHRvIHJldHJ5IGEgcmVxdWVzdC5cbiAqIEBwYXJhbSB7RXJyb3J9IGVyciB0aGUgZXJyb3IgcmV0dXJuZWQgZnJvbSB0aGUgbGFzdCByZXF1ZXN0XG4gKiBAcGFyYW0ge251bWJlcn0gcmV0cnlBdHRlbXB0IHRoZSBudW1iZXIgb2YgdGltZXMgdGhlIHJlcXVlc3QgaGFzIGFscmVhZHkgYmVlbiByZXRyaWVkXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyB0dXMgVXBsb2FkIG9wdGlvbnNcbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5cbmZ1bmN0aW9uIHNob3VsZFJldHJ5KGVyciwgcmV0cnlBdHRlbXB0LCBvcHRpb25zKSB7XG4gIC8vIFdlIG9ubHkgYXR0ZW1wdCBhIHJldHJ5IGlmXG4gIC8vIC0gcmV0cnlEZWxheXMgb3B0aW9uIGlzIHNldFxuICAvLyAtIHdlIGRpZG4ndCBleGNlZWQgdGhlIG1heGl1bSBudW1iZXIgb2YgcmV0cmllcywgeWV0LCBhbmRcbiAgLy8gLSB0aGlzIGVycm9yIHdhcyBjYXVzZWQgYnkgYSByZXF1ZXN0IG9yIGl0J3MgcmVzcG9uc2UgYW5kXG4gIC8vIC0gdGhlIGVycm9yIGlzIHNlcnZlciBlcnJvciAoaS5lLiBub3QgYSBzdGF0dXMgNHh4IGV4Y2VwdCBhIDQwOSBvciA0MjMpIG9yXG4gIC8vIGEgb25TaG91bGRSZXRyeSBpcyBzcGVjaWZpZWQgYW5kIHJldHVybnMgdHJ1ZVxuICAvLyAtIHRoZSBicm93c2VyIGRvZXMgbm90IGluZGljYXRlIHRoYXQgd2UgYXJlIG9mZmxpbmVcbiAgaWYgKG9wdGlvbnMucmV0cnlEZWxheXMgPT0gbnVsbCB8fCByZXRyeUF0dGVtcHQgPj0gb3B0aW9ucy5yZXRyeURlbGF5cy5sZW5ndGggfHwgZXJyLm9yaWdpbmFsUmVxdWVzdCA9PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMgJiYgdHlwZW9mIG9wdGlvbnMub25TaG91bGRSZXRyeSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBvcHRpb25zLm9uU2hvdWxkUmV0cnkoZXJyLCByZXRyeUF0dGVtcHQsIG9wdGlvbnMpO1xuICB9XG5cbiAgdmFyIHN0YXR1cyA9IGVyci5vcmlnaW5hbFJlc3BvbnNlID8gZXJyLm9yaWdpbmFsUmVzcG9uc2UuZ2V0U3RhdHVzKCkgOiAwO1xuICByZXR1cm4gKCFpblN0YXR1c0NhdGVnb3J5KHN0YXR1cywgNDAwKSB8fCBzdGF0dXMgPT09IDQwOSB8fCBzdGF0dXMgPT09IDQyMykgJiYgaXNPbmxpbmUoKTtcbn1cbi8qKlxuICogUmVzb2x2ZSBhIHJlbGF0aXZlIGxpbmsgZ2l2ZW4gdGhlIG9yaWdpbiBhcyBzb3VyY2UuIEZvciBleGFtcGxlLFxuICogaWYgYSBIVFRQIHJlcXVlc3QgdG8gaHR0cDovL2V4YW1wbGUuY29tL2ZpbGVzLyByZXR1cm5zIGEgTG9jYXRpb25cbiAqIGhlYWRlciB3aXRoIHRoZSB2YWx1ZSAvdXBsb2FkL2FiYywgdGhlIHJlc29sdmVkIFVSTCB3aWxsIGJlOlxuICogaHR0cDovL2V4YW1wbGUuY29tL3VwbG9hZC9hYmNcbiAqL1xuXG5cbmZ1bmN0aW9uIHJlc29sdmVVcmwob3JpZ2luLCBsaW5rKSB7XG4gIHJldHVybiBuZXcgX3VybFBhcnNlLmRlZmF1bHQobGluaywgb3JpZ2luKS50b1N0cmluZygpO1xufVxuLyoqXG4gKiBDYWxjdWxhdGUgdGhlIHN0YXJ0IGFuZCBlbmQgcG9zaXRpb25zIGZvciB0aGUgcGFydHMgaWYgYW4gdXBsb2FkXG4gKiBpcyBzcGxpdCBpbnRvIG11bHRpcGxlIHBhcmFsbGVsIHJlcXVlc3RzLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSB0b3RhbFNpemUgVGhlIGJ5dGUgc2l6ZSBvZiB0aGUgdXBsb2FkLCB3aGljaCB3aWxsIGJlIHNwbGl0LlxuICogQHBhcmFtIHtudW1iZXJ9IHBhcnRDb3VudCBUaGUgbnVtYmVyIGluIGhvdyBtYW55IHBhcnRzIHRoZSB1cGxvYWQgd2lsbCBiZSBzcGxpdC5cbiAqIEBwYXJhbSB7c3RyaW5nW119IHByZXZpb3VzVXJscyBUaGUgdXBsb2FkIFVSTHMgZm9yIHByZXZpb3VzIHBhcnRzLlxuICogQHJldHVybiB7b2JqZWN0W119XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5cbmZ1bmN0aW9uIHNwbGl0U2l6ZUludG9QYXJ0cyh0b3RhbFNpemUsIHBhcnRDb3VudCwgcHJldmlvdXNVcmxzKSB7XG4gIHZhciBwYXJ0U2l6ZSA9IE1hdGguZmxvb3IodG90YWxTaXplIC8gcGFydENvdW50KTtcbiAgdmFyIHBhcnRzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJ0Q291bnQ7IGkrKykge1xuICAgIHBhcnRzLnB1c2goe1xuICAgICAgc3RhcnQ6IHBhcnRTaXplICogaSxcbiAgICAgIGVuZDogcGFydFNpemUgKiAoaSArIDEpXG4gICAgfSk7XG4gIH1cblxuICBwYXJ0c1twYXJ0Q291bnQgLSAxXS5lbmQgPSB0b3RhbFNpemU7IC8vIEF0dGFjaCBVUkxzIGZyb20gcHJldmlvdXMgdXBsb2FkcywgaWYgYXZhaWxhYmxlLlxuXG4gIGlmIChwcmV2aW91c1VybHMpIHtcbiAgICBwYXJ0cy5mb3JFYWNoKGZ1bmN0aW9uIChwYXJ0LCBpbmRleCkge1xuICAgICAgcGFydC51cGxvYWRVcmwgPSBwcmV2aW91c1VybHNbaW5kZXhdIHx8IG51bGw7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gcGFydHM7XG59XG5cbkJhc2VVcGxvYWQuZGVmYXVsdE9wdGlvbnMgPSBkZWZhdWx0T3B0aW9ucztcbnZhciBfZGVmYXVsdCA9IEJhc2VVcGxvYWQ7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHV1aWQ7XG5cbi8qKlxuICogR2VuZXJhdGUgYSBVVUlEIHY0IGJhc2VkIG9uIHJhbmRvbSBudW1iZXJzLiBXZSBpbnRlbnRpb2FubGx5IHVzZSB0aGUgbGVzc1xuICogc2VjdXJlIE1hdGgucmFuZG9tIGZ1bmN0aW9uIGhlcmUgc2luY2UgdGhlIG1vcmUgc2VjdXJlIGNyeXB0by5nZXRSYW5kb21OdW1iZXJzXG4gKiBpcyBub3QgYXZhaWxhYmxlIG9uIGFsbCBwbGF0Zm9ybXMuXG4gKiBUaGlzIGlzIG5vdCBhIHByb2JsZW0gZm9yIHVzIHNpbmNlIHdlIHVzZSB0aGUgVVVJRCBvbmx5IGZvciBnZW5lcmF0aW5nIGFcbiAqIHJlcXVlc3QgSUQsIHNvIHdlIGNhbiBjb3JyZWxhdGUgc2VydmVyIGxvZ3MgdG8gY2xpZW50IGVycm9ycy5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIHRha2VuIGZyb20gZm9sbG93aW5nIHNpdGU6XG4gKiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xMDUwMzQvY3JlYXRlLWd1aWQtdXVpZC1pbi1qYXZhc2NyaXB0XG4gKlxuICogQHJldHVybiB7c3RyaW5nfSBUaGUgZ2VuZXJhdGUgVVVJRFxuICovXG5mdW5jdGlvbiB1dWlkKCkge1xuICByZXR1cm4gJ3h4eHh4eHh4LXh4eHgtNHh4eC15eHh4LXh4eHh4eHh4eHh4eCcucmVwbGFjZSgvW3h5XS9nLCBmdW5jdGlvbiAoYykge1xuICAgIHZhciByID0gTWF0aC5yYW5kb20oKSAqIDE2IHwgMCxcbiAgICAgICAgdiA9IGMgPT0gJ3gnID8gciA6IHIgJiAweDMgfCAweDg7XG4gICAgcmV0dXJuIHYudG9TdHJpbmcoMTYpO1xuICB9KTtcbn0iLCIndXNlIHN0cmljdCc7XG5cbnZhciByZXF1aXJlZCA9IHJlcXVpcmUoJ3JlcXVpcmVzLXBvcnQnKVxuICAsIHFzID0gcmVxdWlyZSgncXVlcnlzdHJpbmdpZnknKVxuICAsIHNsYXNoZXMgPSAvXltBLVphLXpdW0EtWmEtejAtOSstLl0qOlxcL1xcLy9cbiAgLCBwcm90b2NvbHJlID0gL14oW2Etel1bYS16MC05ListXSo6KT8oXFwvXFwvKT8oW1xcXFwvXSspPyhbXFxTXFxzXSopL2lcbiAgLCB3aW5kb3dzRHJpdmVMZXR0ZXIgPSAvXlthLXpBLVpdOi9cbiAgLCB3aGl0ZXNwYWNlID0gJ1tcXFxceDA5XFxcXHgwQVxcXFx4MEJcXFxceDBDXFxcXHgwRFxcXFx4MjBcXFxceEEwXFxcXHUxNjgwXFxcXHUxODBFXFxcXHUyMDAwXFxcXHUyMDAxXFxcXHUyMDAyXFxcXHUyMDAzXFxcXHUyMDA0XFxcXHUyMDA1XFxcXHUyMDA2XFxcXHUyMDA3XFxcXHUyMDA4XFxcXHUyMDA5XFxcXHUyMDBBXFxcXHUyMDJGXFxcXHUyMDVGXFxcXHUzMDAwXFxcXHUyMDI4XFxcXHUyMDI5XFxcXHVGRUZGXSdcbiAgLCBsZWZ0ID0gbmV3IFJlZ0V4cCgnXicrIHdoaXRlc3BhY2UgKycrJyk7XG5cbi8qKlxuICogVHJpbSBhIGdpdmVuIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyIFN0cmluZyB0byB0cmltLlxuICogQHB1YmxpY1xuICovXG5mdW5jdGlvbiB0cmltTGVmdChzdHIpIHtcbiAgcmV0dXJuIChzdHIgPyBzdHIgOiAnJykudG9TdHJpbmcoKS5yZXBsYWNlKGxlZnQsICcnKTtcbn1cblxuLyoqXG4gKiBUaGVzZSBhcmUgdGhlIHBhcnNlIHJ1bGVzIGZvciB0aGUgVVJMIHBhcnNlciwgaXQgaW5mb3JtcyB0aGUgcGFyc2VyXG4gKiBhYm91dDpcbiAqXG4gKiAwLiBUaGUgY2hhciBpdCBOZWVkcyB0byBwYXJzZSwgaWYgaXQncyBhIHN0cmluZyBpdCBzaG91bGQgYmUgZG9uZSB1c2luZ1xuICogICAgaW5kZXhPZiwgUmVnRXhwIHVzaW5nIGV4ZWMgYW5kIE5hTiBtZWFucyBzZXQgYXMgY3VycmVudCB2YWx1ZS5cbiAqIDEuIFRoZSBwcm9wZXJ0eSB3ZSBzaG91bGQgc2V0IHdoZW4gcGFyc2luZyB0aGlzIHZhbHVlLlxuICogMi4gSW5kaWNhdGlvbiBpZiBpdCdzIGJhY2t3YXJkcyBvciBmb3J3YXJkIHBhcnNpbmcsIHdoZW4gc2V0IGFzIG51bWJlciBpdCdzXG4gKiAgICB0aGUgdmFsdWUgb2YgZXh0cmEgY2hhcnMgdGhhdCBzaG91bGQgYmUgc3BsaXQgb2ZmLlxuICogMy4gSW5oZXJpdCBmcm9tIGxvY2F0aW9uIGlmIG5vbiBleGlzdGluZyBpbiB0aGUgcGFyc2VyLlxuICogNC4gYHRvTG93ZXJDYXNlYCB0aGUgcmVzdWx0aW5nIHZhbHVlLlxuICovXG52YXIgcnVsZXMgPSBbXG4gIFsnIycsICdoYXNoJ10sICAgICAgICAgICAgICAgICAgICAgICAgLy8gRXh0cmFjdCBmcm9tIHRoZSBiYWNrLlxuICBbJz8nLCAncXVlcnknXSwgICAgICAgICAgICAgICAgICAgICAgIC8vIEV4dHJhY3QgZnJvbSB0aGUgYmFjay5cbiAgZnVuY3Rpb24gc2FuaXRpemUoYWRkcmVzcywgdXJsKSB7ICAgICAvLyBTYW5pdGl6ZSB3aGF0IGlzIGxlZnQgb2YgdGhlIGFkZHJlc3NcbiAgICByZXR1cm4gaXNTcGVjaWFsKHVybC5wcm90b2NvbCkgPyBhZGRyZXNzLnJlcGxhY2UoL1xcXFwvZywgJy8nKSA6IGFkZHJlc3M7XG4gIH0sXG4gIFsnLycsICdwYXRobmFtZSddLCAgICAgICAgICAgICAgICAgICAgLy8gRXh0cmFjdCBmcm9tIHRoZSBiYWNrLlxuICBbJ0AnLCAnYXV0aCcsIDFdLCAgICAgICAgICAgICAgICAgICAgIC8vIEV4dHJhY3QgZnJvbSB0aGUgZnJvbnQuXG4gIFtOYU4sICdob3N0JywgdW5kZWZpbmVkLCAxLCAxXSwgICAgICAgLy8gU2V0IGxlZnQgb3ZlciB2YWx1ZS5cbiAgWy86KFxcZCspJC8sICdwb3J0JywgdW5kZWZpbmVkLCAxXSwgICAgLy8gUmVnRXhwIHRoZSBiYWNrLlxuICBbTmFOLCAnaG9zdG5hbWUnLCB1bmRlZmluZWQsIDEsIDFdICAgIC8vIFNldCBsZWZ0IG92ZXIuXG5dO1xuXG4vKipcbiAqIFRoZXNlIHByb3BlcnRpZXMgc2hvdWxkIG5vdCBiZSBjb3BpZWQgb3IgaW5oZXJpdGVkIGZyb20uIFRoaXMgaXMgb25seSBuZWVkZWRcbiAqIGZvciBhbGwgbm9uIGJsb2IgVVJMJ3MgYXMgYSBibG9iIFVSTCBkb2VzIG5vdCBpbmNsdWRlIGEgaGFzaCwgb25seSB0aGVcbiAqIG9yaWdpbi5cbiAqXG4gKiBAdHlwZSB7T2JqZWN0fVxuICogQHByaXZhdGVcbiAqL1xudmFyIGlnbm9yZSA9IHsgaGFzaDogMSwgcXVlcnk6IDEgfTtcblxuLyoqXG4gKiBUaGUgbG9jYXRpb24gb2JqZWN0IGRpZmZlcnMgd2hlbiB5b3VyIGNvZGUgaXMgbG9hZGVkIHRocm91Z2ggYSBub3JtYWwgcGFnZSxcbiAqIFdvcmtlciBvciB0aHJvdWdoIGEgd29ya2VyIHVzaW5nIGEgYmxvYi4gQW5kIHdpdGggdGhlIGJsb2JibGUgYmVnaW5zIHRoZVxuICogdHJvdWJsZSBhcyB0aGUgbG9jYXRpb24gb2JqZWN0IHdpbGwgY29udGFpbiB0aGUgVVJMIG9mIHRoZSBibG9iLCBub3QgdGhlXG4gKiBsb2NhdGlvbiBvZiB0aGUgcGFnZSB3aGVyZSBvdXIgY29kZSBpcyBsb2FkZWQgaW4uIFRoZSBhY3R1YWwgb3JpZ2luIGlzXG4gKiBlbmNvZGVkIGluIHRoZSBgcGF0aG5hbWVgIHNvIHdlIGNhbiB0aGFua2Z1bGx5IGdlbmVyYXRlIGEgZ29vZCBcImRlZmF1bHRcIlxuICogbG9jYXRpb24gZnJvbSBpdCBzbyB3ZSBjYW4gZ2VuZXJhdGUgcHJvcGVyIHJlbGF0aXZlIFVSTCdzIGFnYWluLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fFN0cmluZ30gbG9jIE9wdGlvbmFsIGRlZmF1bHQgbG9jYXRpb24gb2JqZWN0LlxuICogQHJldHVybnMge09iamVjdH0gbG9sY2F0aW9uIG9iamVjdC5cbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gbG9sY2F0aW9uKGxvYykge1xuICB2YXIgZ2xvYmFsVmFyO1xuXG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykgZ2xvYmFsVmFyID0gd2luZG93O1xuICBlbHNlIGlmICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykgZ2xvYmFsVmFyID0gZ2xvYmFsO1xuICBlbHNlIGlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcpIGdsb2JhbFZhciA9IHNlbGY7XG4gIGVsc2UgZ2xvYmFsVmFyID0ge307XG5cbiAgdmFyIGxvY2F0aW9uID0gZ2xvYmFsVmFyLmxvY2F0aW9uIHx8IHt9O1xuICBsb2MgPSBsb2MgfHwgbG9jYXRpb247XG5cbiAgdmFyIGZpbmFsZGVzdGluYXRpb24gPSB7fVxuICAgICwgdHlwZSA9IHR5cGVvZiBsb2NcbiAgICAsIGtleTtcblxuICBpZiAoJ2Jsb2I6JyA9PT0gbG9jLnByb3RvY29sKSB7XG4gICAgZmluYWxkZXN0aW5hdGlvbiA9IG5ldyBVcmwodW5lc2NhcGUobG9jLnBhdGhuYW1lKSwge30pO1xuICB9IGVsc2UgaWYgKCdzdHJpbmcnID09PSB0eXBlKSB7XG4gICAgZmluYWxkZXN0aW5hdGlvbiA9IG5ldyBVcmwobG9jLCB7fSk7XG4gICAgZm9yIChrZXkgaW4gaWdub3JlKSBkZWxldGUgZmluYWxkZXN0aW5hdGlvbltrZXldO1xuICB9IGVsc2UgaWYgKCdvYmplY3QnID09PSB0eXBlKSB7XG4gICAgZm9yIChrZXkgaW4gbG9jKSB7XG4gICAgICBpZiAoa2V5IGluIGlnbm9yZSkgY29udGludWU7XG4gICAgICBmaW5hbGRlc3RpbmF0aW9uW2tleV0gPSBsb2Nba2V5XTtcbiAgICB9XG5cbiAgICBpZiAoZmluYWxkZXN0aW5hdGlvbi5zbGFzaGVzID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGZpbmFsZGVzdGluYXRpb24uc2xhc2hlcyA9IHNsYXNoZXMudGVzdChsb2MuaHJlZik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZpbmFsZGVzdGluYXRpb247XG59XG5cbi8qKlxuICogQ2hlY2sgd2hldGhlciBhIHByb3RvY29sIHNjaGVtZSBpcyBzcGVjaWFsLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBUaGUgcHJvdG9jb2wgc2NoZW1lIG9mIHRoZSBVUkxcbiAqIEByZXR1cm4ge0Jvb2xlYW59IGB0cnVlYCBpZiB0aGUgcHJvdG9jb2wgc2NoZW1lIGlzIHNwZWNpYWwsIGVsc2UgYGZhbHNlYFxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gaXNTcGVjaWFsKHNjaGVtZSkge1xuICByZXR1cm4gKFxuICAgIHNjaGVtZSA9PT0gJ2ZpbGU6JyB8fFxuICAgIHNjaGVtZSA9PT0gJ2Z0cDonIHx8XG4gICAgc2NoZW1lID09PSAnaHR0cDonIHx8XG4gICAgc2NoZW1lID09PSAnaHR0cHM6JyB8fFxuICAgIHNjaGVtZSA9PT0gJ3dzOicgfHxcbiAgICBzY2hlbWUgPT09ICd3c3M6J1xuICApO1xufVxuXG4vKipcbiAqIEB0eXBlZGVmIFByb3RvY29sRXh0cmFjdFxuICogQHR5cGUgT2JqZWN0XG4gKiBAcHJvcGVydHkge1N0cmluZ30gcHJvdG9jb2wgUHJvdG9jb2wgbWF0Y2hlZCBpbiB0aGUgVVJMLCBpbiBsb3dlcmNhc2UuXG4gKiBAcHJvcGVydHkge0Jvb2xlYW59IHNsYXNoZXMgYHRydWVgIGlmIHByb3RvY29sIGlzIGZvbGxvd2VkIGJ5IFwiLy9cIiwgZWxzZSBgZmFsc2VgLlxuICogQHByb3BlcnR5IHtTdHJpbmd9IHJlc3QgUmVzdCBvZiB0aGUgVVJMIHRoYXQgaXMgbm90IHBhcnQgb2YgdGhlIHByb3RvY29sLlxuICovXG5cbi8qKlxuICogRXh0cmFjdCBwcm90b2NvbCBpbmZvcm1hdGlvbiBmcm9tIGEgVVJMIHdpdGgvd2l0aG91dCBkb3VibGUgc2xhc2ggKFwiLy9cIikuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGFkZHJlc3MgVVJMIHdlIHdhbnQgdG8gZXh0cmFjdCBmcm9tLlxuICogQHBhcmFtIHtPYmplY3R9IGxvY2F0aW9uXG4gKiBAcmV0dXJuIHtQcm90b2NvbEV4dHJhY3R9IEV4dHJhY3RlZCBpbmZvcm1hdGlvbi5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGV4dHJhY3RQcm90b2NvbChhZGRyZXNzLCBsb2NhdGlvbikge1xuICBhZGRyZXNzID0gdHJpbUxlZnQoYWRkcmVzcyk7XG4gIGxvY2F0aW9uID0gbG9jYXRpb24gfHwge307XG5cbiAgdmFyIG1hdGNoID0gcHJvdG9jb2xyZS5leGVjKGFkZHJlc3MpO1xuICB2YXIgcHJvdG9jb2wgPSBtYXRjaFsxXSA/IG1hdGNoWzFdLnRvTG93ZXJDYXNlKCkgOiAnJztcbiAgdmFyIGZvcndhcmRTbGFzaGVzID0gISFtYXRjaFsyXTtcbiAgdmFyIG90aGVyU2xhc2hlcyA9ICEhbWF0Y2hbM107XG4gIHZhciBzbGFzaGVzQ291bnQgPSAwO1xuICB2YXIgcmVzdDtcblxuICBpZiAoZm9yd2FyZFNsYXNoZXMpIHtcbiAgICBpZiAob3RoZXJTbGFzaGVzKSB7XG4gICAgICByZXN0ID0gbWF0Y2hbMl0gKyBtYXRjaFszXSArIG1hdGNoWzRdO1xuICAgICAgc2xhc2hlc0NvdW50ID0gbWF0Y2hbMl0ubGVuZ3RoICsgbWF0Y2hbM10ubGVuZ3RoO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN0ID0gbWF0Y2hbMl0gKyBtYXRjaFs0XTtcbiAgICAgIHNsYXNoZXNDb3VudCA9IG1hdGNoWzJdLmxlbmd0aDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKG90aGVyU2xhc2hlcykge1xuICAgICAgcmVzdCA9IG1hdGNoWzNdICsgbWF0Y2hbNF07XG4gICAgICBzbGFzaGVzQ291bnQgPSBtYXRjaFszXS5sZW5ndGg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3QgPSBtYXRjaFs0XVxuICAgIH1cbiAgfVxuXG4gIGlmIChwcm90b2NvbCA9PT0gJ2ZpbGU6Jykge1xuICAgIGlmIChzbGFzaGVzQ291bnQgPj0gMikge1xuICAgICAgcmVzdCA9IHJlc3Quc2xpY2UoMik7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzU3BlY2lhbChwcm90b2NvbCkpIHtcbiAgICByZXN0ID0gbWF0Y2hbNF07XG4gIH0gZWxzZSBpZiAocHJvdG9jb2wpIHtcbiAgICBpZiAoZm9yd2FyZFNsYXNoZXMpIHtcbiAgICAgIHJlc3QgPSByZXN0LnNsaWNlKDIpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChzbGFzaGVzQ291bnQgPj0gMiAmJiBpc1NwZWNpYWwobG9jYXRpb24ucHJvdG9jb2wpKSB7XG4gICAgcmVzdCA9IG1hdGNoWzRdO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBwcm90b2NvbDogcHJvdG9jb2wsXG4gICAgc2xhc2hlczogZm9yd2FyZFNsYXNoZXMgfHwgaXNTcGVjaWFsKHByb3RvY29sKSxcbiAgICBzbGFzaGVzQ291bnQ6IHNsYXNoZXNDb3VudCxcbiAgICByZXN0OiByZXN0XG4gIH07XG59XG5cbi8qKlxuICogUmVzb2x2ZSBhIHJlbGF0aXZlIFVSTCBwYXRobmFtZSBhZ2FpbnN0IGEgYmFzZSBVUkwgcGF0aG5hbWUuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHJlbGF0aXZlIFBhdGhuYW1lIG9mIHRoZSByZWxhdGl2ZSBVUkwuXG4gKiBAcGFyYW0ge1N0cmluZ30gYmFzZSBQYXRobmFtZSBvZiB0aGUgYmFzZSBVUkwuXG4gKiBAcmV0dXJuIHtTdHJpbmd9IFJlc29sdmVkIHBhdGhuYW1lLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZShyZWxhdGl2ZSwgYmFzZSkge1xuICBpZiAocmVsYXRpdmUgPT09ICcnKSByZXR1cm4gYmFzZTtcblxuICB2YXIgcGF0aCA9IChiYXNlIHx8ICcvJykuc3BsaXQoJy8nKS5zbGljZSgwLCAtMSkuY29uY2F0KHJlbGF0aXZlLnNwbGl0KCcvJykpXG4gICAgLCBpID0gcGF0aC5sZW5ndGhcbiAgICAsIGxhc3QgPSBwYXRoW2kgLSAxXVxuICAgICwgdW5zaGlmdCA9IGZhbHNlXG4gICAgLCB1cCA9IDA7XG5cbiAgd2hpbGUgKGktLSkge1xuICAgIGlmIChwYXRoW2ldID09PSAnLicpIHtcbiAgICAgIHBhdGguc3BsaWNlKGksIDEpO1xuICAgIH0gZWxzZSBpZiAocGF0aFtpXSA9PT0gJy4uJykge1xuICAgICAgcGF0aC5zcGxpY2UoaSwgMSk7XG4gICAgICB1cCsrO1xuICAgIH0gZWxzZSBpZiAodXApIHtcbiAgICAgIGlmIChpID09PSAwKSB1bnNoaWZ0ID0gdHJ1ZTtcbiAgICAgIHBhdGguc3BsaWNlKGksIDEpO1xuICAgICAgdXAtLTtcbiAgICB9XG4gIH1cblxuICBpZiAodW5zaGlmdCkgcGF0aC51bnNoaWZ0KCcnKTtcbiAgaWYgKGxhc3QgPT09ICcuJyB8fCBsYXN0ID09PSAnLi4nKSBwYXRoLnB1c2goJycpO1xuXG4gIHJldHVybiBwYXRoLmpvaW4oJy8nKTtcbn1cblxuLyoqXG4gKiBUaGUgYWN0dWFsIFVSTCBpbnN0YW5jZS4gSW5zdGVhZCBvZiByZXR1cm5pbmcgYW4gb2JqZWN0IHdlJ3ZlIG9wdGVkLWluIHRvXG4gKiBjcmVhdGUgYW4gYWN0dWFsIGNvbnN0cnVjdG9yIGFzIGl0J3MgbXVjaCBtb3JlIG1lbW9yeSBlZmZpY2llbnQgYW5kXG4gKiBmYXN0ZXIgYW5kIGl0IHBsZWFzZXMgbXkgT0NELlxuICpcbiAqIEl0IGlzIHdvcnRoIG5vdGluZyB0aGF0IHdlIHNob3VsZCBub3QgdXNlIGBVUkxgIGFzIGNsYXNzIG5hbWUgdG8gcHJldmVudFxuICogY2xhc2hlcyB3aXRoIHRoZSBnbG9iYWwgVVJMIGluc3RhbmNlIHRoYXQgZ290IGludHJvZHVjZWQgaW4gYnJvd3NlcnMuXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge1N0cmluZ30gYWRkcmVzcyBVUkwgd2Ugd2FudCB0byBwYXJzZS5cbiAqIEBwYXJhbSB7T2JqZWN0fFN0cmluZ30gW2xvY2F0aW9uXSBMb2NhdGlvbiBkZWZhdWx0cyBmb3IgcmVsYXRpdmUgcGF0aHMuXG4gKiBAcGFyYW0ge0Jvb2xlYW58RnVuY3Rpb259IFtwYXJzZXJdIFBhcnNlciBmb3IgdGhlIHF1ZXJ5IHN0cmluZy5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIFVybChhZGRyZXNzLCBsb2NhdGlvbiwgcGFyc2VyKSB7XG4gIGFkZHJlc3MgPSB0cmltTGVmdChhZGRyZXNzKTtcblxuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgVXJsKSkge1xuICAgIHJldHVybiBuZXcgVXJsKGFkZHJlc3MsIGxvY2F0aW9uLCBwYXJzZXIpO1xuICB9XG5cbiAgdmFyIHJlbGF0aXZlLCBleHRyYWN0ZWQsIHBhcnNlLCBpbnN0cnVjdGlvbiwgaW5kZXgsIGtleVxuICAgICwgaW5zdHJ1Y3Rpb25zID0gcnVsZXMuc2xpY2UoKVxuICAgICwgdHlwZSA9IHR5cGVvZiBsb2NhdGlvblxuICAgICwgdXJsID0gdGhpc1xuICAgICwgaSA9IDA7XG5cbiAgLy9cbiAgLy8gVGhlIGZvbGxvd2luZyBpZiBzdGF0ZW1lbnRzIGFsbG93cyB0aGlzIG1vZHVsZSB0d28gaGF2ZSBjb21wYXRpYmlsaXR5IHdpdGhcbiAgLy8gMiBkaWZmZXJlbnQgQVBJOlxuICAvL1xuICAvLyAxLiBOb2RlLmpzJ3MgYHVybC5wYXJzZWAgYXBpIHdoaWNoIGFjY2VwdHMgYSBVUkwsIGJvb2xlYW4gYXMgYXJndW1lbnRzXG4gIC8vICAgIHdoZXJlIHRoZSBib29sZWFuIGluZGljYXRlcyB0aGF0IHRoZSBxdWVyeSBzdHJpbmcgc2hvdWxkIGFsc28gYmUgcGFyc2VkLlxuICAvL1xuICAvLyAyLiBUaGUgYFVSTGAgaW50ZXJmYWNlIG9mIHRoZSBicm93c2VyIHdoaWNoIGFjY2VwdHMgYSBVUkwsIG9iamVjdCBhc1xuICAvLyAgICBhcmd1bWVudHMuIFRoZSBzdXBwbGllZCBvYmplY3Qgd2lsbCBiZSB1c2VkIGFzIGRlZmF1bHQgdmFsdWVzIC8gZmFsbC1iYWNrXG4gIC8vICAgIGZvciByZWxhdGl2ZSBwYXRocy5cbiAgLy9cbiAgaWYgKCdvYmplY3QnICE9PSB0eXBlICYmICdzdHJpbmcnICE9PSB0eXBlKSB7XG4gICAgcGFyc2VyID0gbG9jYXRpb247XG4gICAgbG9jYXRpb24gPSBudWxsO1xuICB9XG5cbiAgaWYgKHBhcnNlciAmJiAnZnVuY3Rpb24nICE9PSB0eXBlb2YgcGFyc2VyKSBwYXJzZXIgPSBxcy5wYXJzZTtcblxuICBsb2NhdGlvbiA9IGxvbGNhdGlvbihsb2NhdGlvbik7XG5cbiAgLy9cbiAgLy8gRXh0cmFjdCBwcm90b2NvbCBpbmZvcm1hdGlvbiBiZWZvcmUgcnVubmluZyB0aGUgaW5zdHJ1Y3Rpb25zLlxuICAvL1xuICBleHRyYWN0ZWQgPSBleHRyYWN0UHJvdG9jb2woYWRkcmVzcyB8fCAnJywgbG9jYXRpb24pO1xuICByZWxhdGl2ZSA9ICFleHRyYWN0ZWQucHJvdG9jb2wgJiYgIWV4dHJhY3RlZC5zbGFzaGVzO1xuICB1cmwuc2xhc2hlcyA9IGV4dHJhY3RlZC5zbGFzaGVzIHx8IHJlbGF0aXZlICYmIGxvY2F0aW9uLnNsYXNoZXM7XG4gIHVybC5wcm90b2NvbCA9IGV4dHJhY3RlZC5wcm90b2NvbCB8fCBsb2NhdGlvbi5wcm90b2NvbCB8fCAnJztcbiAgYWRkcmVzcyA9IGV4dHJhY3RlZC5yZXN0O1xuXG4gIC8vXG4gIC8vIFdoZW4gdGhlIGF1dGhvcml0eSBjb21wb25lbnQgaXMgYWJzZW50IHRoZSBVUkwgc3RhcnRzIHdpdGggYSBwYXRoXG4gIC8vIGNvbXBvbmVudC5cbiAgLy9cbiAgaWYgKFxuICAgIGV4dHJhY3RlZC5wcm90b2NvbCA9PT0gJ2ZpbGU6JyAmJiAoXG4gICAgICBleHRyYWN0ZWQuc2xhc2hlc0NvdW50ICE9PSAyIHx8IHdpbmRvd3NEcml2ZUxldHRlci50ZXN0KGFkZHJlc3MpKSB8fFxuICAgICghZXh0cmFjdGVkLnNsYXNoZXMgJiZcbiAgICAgIChleHRyYWN0ZWQucHJvdG9jb2wgfHxcbiAgICAgICAgZXh0cmFjdGVkLnNsYXNoZXNDb3VudCA8IDIgfHxcbiAgICAgICAgIWlzU3BlY2lhbCh1cmwucHJvdG9jb2wpKSlcbiAgKSB7XG4gICAgaW5zdHJ1Y3Rpb25zWzNdID0gWy8oLiopLywgJ3BhdGhuYW1lJ107XG4gIH1cblxuICBmb3IgKDsgaSA8IGluc3RydWN0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgIGluc3RydWN0aW9uID0gaW5zdHJ1Y3Rpb25zW2ldO1xuXG4gICAgaWYgKHR5cGVvZiBpbnN0cnVjdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYWRkcmVzcyA9IGluc3RydWN0aW9uKGFkZHJlc3MsIHVybCk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBwYXJzZSA9IGluc3RydWN0aW9uWzBdO1xuICAgIGtleSA9IGluc3RydWN0aW9uWzFdO1xuXG4gICAgaWYgKHBhcnNlICE9PSBwYXJzZSkge1xuICAgICAgdXJsW2tleV0gPSBhZGRyZXNzO1xuICAgIH0gZWxzZSBpZiAoJ3N0cmluZycgPT09IHR5cGVvZiBwYXJzZSkge1xuICAgICAgaWYgKH4oaW5kZXggPSBhZGRyZXNzLmluZGV4T2YocGFyc2UpKSkge1xuICAgICAgICBpZiAoJ251bWJlcicgPT09IHR5cGVvZiBpbnN0cnVjdGlvblsyXSkge1xuICAgICAgICAgIHVybFtrZXldID0gYWRkcmVzcy5zbGljZSgwLCBpbmRleCk7XG4gICAgICAgICAgYWRkcmVzcyA9IGFkZHJlc3Muc2xpY2UoaW5kZXggKyBpbnN0cnVjdGlvblsyXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdXJsW2tleV0gPSBhZGRyZXNzLnNsaWNlKGluZGV4KTtcbiAgICAgICAgICBhZGRyZXNzID0gYWRkcmVzcy5zbGljZSgwLCBpbmRleCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKChpbmRleCA9IHBhcnNlLmV4ZWMoYWRkcmVzcykpKSB7XG4gICAgICB1cmxba2V5XSA9IGluZGV4WzFdO1xuICAgICAgYWRkcmVzcyA9IGFkZHJlc3Muc2xpY2UoMCwgaW5kZXguaW5kZXgpO1xuICAgIH1cblxuICAgIHVybFtrZXldID0gdXJsW2tleV0gfHwgKFxuICAgICAgcmVsYXRpdmUgJiYgaW5zdHJ1Y3Rpb25bM10gPyBsb2NhdGlvbltrZXldIHx8ICcnIDogJydcbiAgICApO1xuXG4gICAgLy9cbiAgICAvLyBIb3N0bmFtZSwgaG9zdCBhbmQgcHJvdG9jb2wgc2hvdWxkIGJlIGxvd2VyY2FzZWQgc28gdGhleSBjYW4gYmUgdXNlZCB0b1xuICAgIC8vIGNyZWF0ZSBhIHByb3BlciBgb3JpZ2luYC5cbiAgICAvL1xuICAgIGlmIChpbnN0cnVjdGlvbls0XSkgdXJsW2tleV0gPSB1cmxba2V5XS50b0xvd2VyQ2FzZSgpO1xuICB9XG5cbiAgLy9cbiAgLy8gQWxzbyBwYXJzZSB0aGUgc3VwcGxpZWQgcXVlcnkgc3RyaW5nIGluIHRvIGFuIG9iamVjdC4gSWYgd2UncmUgc3VwcGxpZWRcbiAgLy8gd2l0aCBhIGN1c3RvbSBwYXJzZXIgYXMgZnVuY3Rpb24gdXNlIHRoYXQgaW5zdGVhZCBvZiB0aGUgZGVmYXVsdCBidWlsZC1pblxuICAvLyBwYXJzZXIuXG4gIC8vXG4gIGlmIChwYXJzZXIpIHVybC5xdWVyeSA9IHBhcnNlcih1cmwucXVlcnkpO1xuXG4gIC8vXG4gIC8vIElmIHRoZSBVUkwgaXMgcmVsYXRpdmUsIHJlc29sdmUgdGhlIHBhdGhuYW1lIGFnYWluc3QgdGhlIGJhc2UgVVJMLlxuICAvL1xuICBpZiAoXG4gICAgICByZWxhdGl2ZVxuICAgICYmIGxvY2F0aW9uLnNsYXNoZXNcbiAgICAmJiB1cmwucGF0aG5hbWUuY2hhckF0KDApICE9PSAnLydcbiAgICAmJiAodXJsLnBhdGhuYW1lICE9PSAnJyB8fCBsb2NhdGlvbi5wYXRobmFtZSAhPT0gJycpXG4gICkge1xuICAgIHVybC5wYXRobmFtZSA9IHJlc29sdmUodXJsLnBhdGhuYW1lLCBsb2NhdGlvbi5wYXRobmFtZSk7XG4gIH1cblxuICAvL1xuICAvLyBEZWZhdWx0IHRvIGEgLyBmb3IgcGF0aG5hbWUgaWYgbm9uZSBleGlzdHMuIFRoaXMgbm9ybWFsaXplcyB0aGUgVVJMXG4gIC8vIHRvIGFsd2F5cyBoYXZlIGEgL1xuICAvL1xuICBpZiAodXJsLnBhdGhuYW1lLmNoYXJBdCgwKSAhPT0gJy8nICYmIGlzU3BlY2lhbCh1cmwucHJvdG9jb2wpKSB7XG4gICAgdXJsLnBhdGhuYW1lID0gJy8nICsgdXJsLnBhdGhuYW1lO1xuICB9XG5cbiAgLy9cbiAgLy8gV2Ugc2hvdWxkIG5vdCBhZGQgcG9ydCBudW1iZXJzIGlmIHRoZXkgYXJlIGFscmVhZHkgdGhlIGRlZmF1bHQgcG9ydCBudW1iZXJcbiAgLy8gZm9yIGEgZ2l2ZW4gcHJvdG9jb2wuIEFzIHRoZSBob3N0IGFsc28gY29udGFpbnMgdGhlIHBvcnQgbnVtYmVyIHdlJ3JlIGdvaW5nXG4gIC8vIG92ZXJyaWRlIGl0IHdpdGggdGhlIGhvc3RuYW1lIHdoaWNoIGNvbnRhaW5zIG5vIHBvcnQgbnVtYmVyLlxuICAvL1xuICBpZiAoIXJlcXVpcmVkKHVybC5wb3J0LCB1cmwucHJvdG9jb2wpKSB7XG4gICAgdXJsLmhvc3QgPSB1cmwuaG9zdG5hbWU7XG4gICAgdXJsLnBvcnQgPSAnJztcbiAgfVxuXG4gIC8vXG4gIC8vIFBhcnNlIGRvd24gdGhlIGBhdXRoYCBmb3IgdGhlIHVzZXJuYW1lIGFuZCBwYXNzd29yZC5cbiAgLy9cbiAgdXJsLnVzZXJuYW1lID0gdXJsLnBhc3N3b3JkID0gJyc7XG4gIGlmICh1cmwuYXV0aCkge1xuICAgIGluc3RydWN0aW9uID0gdXJsLmF1dGguc3BsaXQoJzonKTtcbiAgICB1cmwudXNlcm5hbWUgPSBpbnN0cnVjdGlvblswXSB8fCAnJztcbiAgICB1cmwucGFzc3dvcmQgPSBpbnN0cnVjdGlvblsxXSB8fCAnJztcbiAgfVxuXG4gIHVybC5vcmlnaW4gPSB1cmwucHJvdG9jb2wgIT09ICdmaWxlOicgJiYgaXNTcGVjaWFsKHVybC5wcm90b2NvbCkgJiYgdXJsLmhvc3RcbiAgICA/IHVybC5wcm90b2NvbCArJy8vJysgdXJsLmhvc3RcbiAgICA6ICdudWxsJztcblxuICAvL1xuICAvLyBUaGUgaHJlZiBpcyBqdXN0IHRoZSBjb21waWxlZCByZXN1bHQuXG4gIC8vXG4gIHVybC5ocmVmID0gdXJsLnRvU3RyaW5nKCk7XG59XG5cbi8qKlxuICogVGhpcyBpcyBjb252ZW5pZW5jZSBtZXRob2QgZm9yIGNoYW5naW5nIHByb3BlcnRpZXMgaW4gdGhlIFVSTCBpbnN0YW5jZSB0b1xuICogaW5zdXJlIHRoYXQgdGhleSBhbGwgcHJvcGFnYXRlIGNvcnJlY3RseS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gcGFydCAgICAgICAgICBQcm9wZXJ0eSB3ZSBuZWVkIHRvIGFkanVzdC5cbiAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlICAgICAgICAgIFRoZSBuZXdseSBhc3NpZ25lZCB2YWx1ZS5cbiAqIEBwYXJhbSB7Qm9vbGVhbnxGdW5jdGlvbn0gZm4gIFdoZW4gc2V0dGluZyB0aGUgcXVlcnksIGl0IHdpbGwgYmUgdGhlIGZ1bmN0aW9uXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VkIHRvIHBhcnNlIHRoZSBxdWVyeS5cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdoZW4gc2V0dGluZyB0aGUgcHJvdG9jb2wsIGRvdWJsZSBzbGFzaCB3aWxsIGJlXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVkIGZyb20gdGhlIGZpbmFsIHVybCBpZiBpdCBpcyB0cnVlLlxuICogQHJldHVybnMge1VSTH0gVVJMIGluc3RhbmNlIGZvciBjaGFpbmluZy5cbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gc2V0KHBhcnQsIHZhbHVlLCBmbikge1xuICB2YXIgdXJsID0gdGhpcztcblxuICBzd2l0Y2ggKHBhcnQpIHtcbiAgICBjYXNlICdxdWVyeSc6XG4gICAgICBpZiAoJ3N0cmluZycgPT09IHR5cGVvZiB2YWx1ZSAmJiB2YWx1ZS5sZW5ndGgpIHtcbiAgICAgICAgdmFsdWUgPSAoZm4gfHwgcXMucGFyc2UpKHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgdXJsW3BhcnRdID0gdmFsdWU7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ3BvcnQnOlxuICAgICAgdXJsW3BhcnRdID0gdmFsdWU7XG5cbiAgICAgIGlmICghcmVxdWlyZWQodmFsdWUsIHVybC5wcm90b2NvbCkpIHtcbiAgICAgICAgdXJsLmhvc3QgPSB1cmwuaG9zdG5hbWU7XG4gICAgICAgIHVybFtwYXJ0XSA9ICcnO1xuICAgICAgfSBlbHNlIGlmICh2YWx1ZSkge1xuICAgICAgICB1cmwuaG9zdCA9IHVybC5ob3N0bmFtZSArJzonKyB2YWx1ZTtcbiAgICAgIH1cblxuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdob3N0bmFtZSc6XG4gICAgICB1cmxbcGFydF0gPSB2YWx1ZTtcblxuICAgICAgaWYgKHVybC5wb3J0KSB2YWx1ZSArPSAnOicrIHVybC5wb3J0O1xuICAgICAgdXJsLmhvc3QgPSB2YWx1ZTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnaG9zdCc6XG4gICAgICB1cmxbcGFydF0gPSB2YWx1ZTtcblxuICAgICAgaWYgKC86XFxkKyQvLnRlc3QodmFsdWUpKSB7XG4gICAgICAgIHZhbHVlID0gdmFsdWUuc3BsaXQoJzonKTtcbiAgICAgICAgdXJsLnBvcnQgPSB2YWx1ZS5wb3AoKTtcbiAgICAgICAgdXJsLmhvc3RuYW1lID0gdmFsdWUuam9pbignOicpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdXJsLmhvc3RuYW1lID0gdmFsdWU7XG4gICAgICAgIHVybC5wb3J0ID0gJyc7XG4gICAgICB9XG5cbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAncHJvdG9jb2wnOlxuICAgICAgdXJsLnByb3RvY29sID0gdmFsdWUudG9Mb3dlckNhc2UoKTtcbiAgICAgIHVybC5zbGFzaGVzID0gIWZuO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdwYXRobmFtZSc6XG4gICAgY2FzZSAnaGFzaCc6XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgdmFyIGNoYXIgPSBwYXJ0ID09PSAncGF0aG5hbWUnID8gJy8nIDogJyMnO1xuICAgICAgICB1cmxbcGFydF0gPSB2YWx1ZS5jaGFyQXQoMCkgIT09IGNoYXIgPyBjaGFyICsgdmFsdWUgOiB2YWx1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHVybFtwYXJ0XSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgdXJsW3BhcnRdID0gdmFsdWU7XG4gIH1cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHJ1bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGlucyA9IHJ1bGVzW2ldO1xuXG4gICAgaWYgKGluc1s0XSkgdXJsW2luc1sxXV0gPSB1cmxbaW5zWzFdXS50b0xvd2VyQ2FzZSgpO1xuICB9XG5cbiAgdXJsLm9yaWdpbiA9IHVybC5wcm90b2NvbCAhPT0gJ2ZpbGU6JyAmJiBpc1NwZWNpYWwodXJsLnByb3RvY29sKSAmJiB1cmwuaG9zdFxuICAgID8gdXJsLnByb3RvY29sICsnLy8nKyB1cmwuaG9zdFxuICAgIDogJ251bGwnO1xuXG4gIHVybC5ocmVmID0gdXJsLnRvU3RyaW5nKCk7XG5cbiAgcmV0dXJuIHVybDtcbn1cblxuLyoqXG4gKiBUcmFuc2Zvcm0gdGhlIHByb3BlcnRpZXMgYmFjayBpbiB0byBhIHZhbGlkIGFuZCBmdWxsIFVSTCBzdHJpbmcuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gc3RyaW5naWZ5IE9wdGlvbmFsIHF1ZXJ5IHN0cmluZ2lmeSBmdW5jdGlvbi5cbiAqIEByZXR1cm5zIHtTdHJpbmd9IENvbXBpbGVkIHZlcnNpb24gb2YgdGhlIFVSTC5cbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gdG9TdHJpbmcoc3RyaW5naWZ5KSB7XG4gIGlmICghc3RyaW5naWZ5IHx8ICdmdW5jdGlvbicgIT09IHR5cGVvZiBzdHJpbmdpZnkpIHN0cmluZ2lmeSA9IHFzLnN0cmluZ2lmeTtcblxuICB2YXIgcXVlcnlcbiAgICAsIHVybCA9IHRoaXNcbiAgICAsIHByb3RvY29sID0gdXJsLnByb3RvY29sO1xuXG4gIGlmIChwcm90b2NvbCAmJiBwcm90b2NvbC5jaGFyQXQocHJvdG9jb2wubGVuZ3RoIC0gMSkgIT09ICc6JykgcHJvdG9jb2wgKz0gJzonO1xuXG4gIHZhciByZXN1bHQgPSBwcm90b2NvbCArICh1cmwuc2xhc2hlcyB8fCBpc1NwZWNpYWwodXJsLnByb3RvY29sKSA/ICcvLycgOiAnJyk7XG5cbiAgaWYgKHVybC51c2VybmFtZSkge1xuICAgIHJlc3VsdCArPSB1cmwudXNlcm5hbWU7XG4gICAgaWYgKHVybC5wYXNzd29yZCkgcmVzdWx0ICs9ICc6JysgdXJsLnBhc3N3b3JkO1xuICAgIHJlc3VsdCArPSAnQCc7XG4gIH1cblxuICByZXN1bHQgKz0gdXJsLmhvc3QgKyB1cmwucGF0aG5hbWU7XG5cbiAgcXVlcnkgPSAnb2JqZWN0JyA9PT0gdHlwZW9mIHVybC5xdWVyeSA/IHN0cmluZ2lmeSh1cmwucXVlcnkpIDogdXJsLnF1ZXJ5O1xuICBpZiAocXVlcnkpIHJlc3VsdCArPSAnPycgIT09IHF1ZXJ5LmNoYXJBdCgwKSA/ICc/JysgcXVlcnkgOiBxdWVyeTtcblxuICBpZiAodXJsLmhhc2gpIHJlc3VsdCArPSB1cmwuaGFzaDtcblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5VcmwucHJvdG90eXBlID0geyBzZXQ6IHNldCwgdG9TdHJpbmc6IHRvU3RyaW5nIH07XG5cbi8vXG4vLyBFeHBvc2UgdGhlIFVSTCBwYXJzZXIgYW5kIHNvbWUgYWRkaXRpb25hbCBwcm9wZXJ0aWVzIHRoYXQgbWlnaHQgYmUgdXNlZnVsIGZvclxuLy8gb3RoZXJzIG9yIHRlc3RpbmcuXG4vL1xuVXJsLmV4dHJhY3RQcm90b2NvbCA9IGV4dHJhY3RQcm90b2NvbDtcblVybC5sb2NhdGlvbiA9IGxvbGNhdGlvbjtcblVybC50cmltTGVmdCA9IHRyaW1MZWZ0O1xuVXJsLnFzID0gcXM7XG5cbm1vZHVsZS5leHBvcnRzID0gVXJsO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYWxwaGFiZXQgPSAnMDEyMzQ1Njc4OUFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXotXycuc3BsaXQoJycpXG4gICwgbGVuZ3RoID0gNjRcbiAgLCBtYXAgPSB7fVxuICAsIHNlZWQgPSAwXG4gICwgaSA9IDBcbiAgLCBwcmV2O1xuXG4vKipcbiAqIFJldHVybiBhIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIHNwZWNpZmllZCBudW1iZXIuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG51bSBUaGUgbnVtYmVyIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBudW1iZXIuXG4gKiBAYXBpIHB1YmxpY1xuICovXG5mdW5jdGlvbiBlbmNvZGUobnVtKSB7XG4gIHZhciBlbmNvZGVkID0gJyc7XG5cbiAgZG8ge1xuICAgIGVuY29kZWQgPSBhbHBoYWJldFtudW0gJSBsZW5ndGhdICsgZW5jb2RlZDtcbiAgICBudW0gPSBNYXRoLmZsb29yKG51bSAvIGxlbmd0aCk7XG4gIH0gd2hpbGUgKG51bSA+IDApO1xuXG4gIHJldHVybiBlbmNvZGVkO1xufVxuXG4vKipcbiAqIFJldHVybiB0aGUgaW50ZWdlciB2YWx1ZSBzcGVjaWZpZWQgYnkgdGhlIGdpdmVuIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtOdW1iZXJ9IFRoZSBpbnRlZ2VyIHZhbHVlIHJlcHJlc2VudGVkIGJ5IHRoZSBzdHJpbmcuXG4gKiBAYXBpIHB1YmxpY1xuICovXG5mdW5jdGlvbiBkZWNvZGUoc3RyKSB7XG4gIHZhciBkZWNvZGVkID0gMDtcblxuICBmb3IgKGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgZGVjb2RlZCA9IGRlY29kZWQgKiBsZW5ndGggKyBtYXBbc3RyLmNoYXJBdChpKV07XG4gIH1cblxuICByZXR1cm4gZGVjb2RlZDtcbn1cblxuLyoqXG4gKiBZZWFzdDogQSB0aW55IGdyb3dpbmcgaWQgZ2VuZXJhdG9yLlxuICpcbiAqIEByZXR1cm5zIHtTdHJpbmd9IEEgdW5pcXVlIGlkLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuZnVuY3Rpb24geWVhc3QoKSB7XG4gIHZhciBub3cgPSBlbmNvZGUoK25ldyBEYXRlKCkpO1xuXG4gIGlmIChub3cgIT09IHByZXYpIHJldHVybiBzZWVkID0gMCwgcHJldiA9IG5vdztcbiAgcmV0dXJuIG5vdyArJy4nKyBlbmNvZGUoc2VlZCsrKTtcbn1cblxuLy9cbi8vIE1hcCBlYWNoIGNoYXJhY3RlciB0byBpdHMgaW5kZXguXG4vL1xuZm9yICg7IGkgPCBsZW5ndGg7IGkrKykgbWFwW2FscGhhYmV0W2ldXSA9IGk7XG5cbi8vXG4vLyBFeHBvc2UgdGhlIGB5ZWFzdGAsIGBlbmNvZGVgIGFuZCBgZGVjb2RlYCBmdW5jdGlvbnMuXG4vL1xueWVhc3QuZW5jb2RlID0gZW5jb2RlO1xueWVhc3QuZGVjb2RlID0gZGVjb2RlO1xubW9kdWxlLmV4cG9ydHMgPSB5ZWFzdDtcbiIsIid1c2Ugc3RyaWN0J1xuXG5jbGFzcyBBdXRoRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICBzdXBlcignQXV0aG9yaXphdGlvbiByZXF1aXJlZCcpXG4gICAgdGhpcy5uYW1lID0gJ0F1dGhFcnJvcidcbiAgICB0aGlzLmlzQXV0aEVycm9yID0gdHJ1ZVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQXV0aEVycm9yXG4iLCIndXNlIHN0cmljdCdcblxuY29uc3QgUmVxdWVzdENsaWVudCA9IHJlcXVpcmUoJy4vUmVxdWVzdENsaWVudCcpXG5jb25zdCB0b2tlblN0b3JhZ2UgPSByZXF1aXJlKCcuL3Rva2VuU3RvcmFnZScpXG5cbmNvbnN0IGdldE5hbWUgPSAoaWQpID0+IHtcbiAgcmV0dXJuIGlkLnNwbGl0KCctJykubWFwKChzKSA9PiBzLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcy5zbGljZSgxKSkuam9pbignICcpXG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2xhc3MgUHJvdmlkZXIgZXh0ZW5kcyBSZXF1ZXN0Q2xpZW50IHtcbiAgY29uc3RydWN0b3IgKHVwcHksIG9wdHMpIHtcbiAgICBzdXBlcih1cHB5LCBvcHRzKVxuICAgIHRoaXMucHJvdmlkZXIgPSBvcHRzLnByb3ZpZGVyXG4gICAgdGhpcy5pZCA9IHRoaXMucHJvdmlkZXJcbiAgICB0aGlzLm5hbWUgPSB0aGlzLm9wdHMubmFtZSB8fCBnZXROYW1lKHRoaXMuaWQpXG4gICAgdGhpcy5wbHVnaW5JZCA9IHRoaXMub3B0cy5wbHVnaW5JZFxuICAgIHRoaXMudG9rZW5LZXkgPSBgY29tcGFuaW9uLSR7dGhpcy5wbHVnaW5JZH0tYXV0aC10b2tlbmBcbiAgICB0aGlzLmNvbXBhbmlvbktleXNQYXJhbXMgPSB0aGlzLm9wdHMuY29tcGFuaW9uS2V5c1BhcmFtc1xuICAgIHRoaXMucHJlQXV0aFRva2VuID0gbnVsbFxuICB9XG5cbiAgaGVhZGVycyAoKSB7XG4gICAgcmV0dXJuIFByb21pc2UuYWxsKFtzdXBlci5oZWFkZXJzKCksIHRoaXMuZ2V0QXV0aFRva2VuKCldKVxuICAgICAgLnRoZW4oKFtoZWFkZXJzLCB0b2tlbl0pID0+IHtcbiAgICAgICAgY29uc3QgYXV0aEhlYWRlcnMgPSB7fVxuICAgICAgICBpZiAodG9rZW4pIHtcbiAgICAgICAgICBhdXRoSGVhZGVyc1sndXBweS1hdXRoLXRva2VuJ10gPSB0b2tlblxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuY29tcGFuaW9uS2V5c1BhcmFtcykge1xuICAgICAgICAgIGF1dGhIZWFkZXJzWyd1cHB5LWNyZWRlbnRpYWxzLXBhcmFtcyddID0gYnRvYShcbiAgICAgICAgICAgIEpTT04uc3RyaW5naWZ5KHsgcGFyYW1zOiB0aGlzLmNvbXBhbmlvbktleXNQYXJhbXMgfSksXG4gICAgICAgICAgKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IC4uLmhlYWRlcnMsIC4uLmF1dGhIZWFkZXJzIH1cbiAgICAgIH0pXG4gIH1cblxuICBvblJlY2VpdmVSZXNwb25zZSAocmVzcG9uc2UpIHtcbiAgICByZXNwb25zZSA9IHN1cGVyLm9uUmVjZWl2ZVJlc3BvbnNlKHJlc3BvbnNlKVxuICAgIGNvbnN0IHBsdWdpbiA9IHRoaXMudXBweS5nZXRQbHVnaW4odGhpcy5wbHVnaW5JZClcbiAgICBjb25zdCBvbGRBdXRoZW50aWNhdGVkID0gcGx1Z2luLmdldFBsdWdpblN0YXRlKCkuYXV0aGVudGljYXRlZFxuICAgIGNvbnN0IGF1dGhlbnRpY2F0ZWQgPSBvbGRBdXRoZW50aWNhdGVkID8gcmVzcG9uc2Uuc3RhdHVzICE9PSA0MDEgOiByZXNwb25zZS5zdGF0dXMgPCA0MDBcbiAgICBwbHVnaW4uc2V0UGx1Z2luU3RhdGUoeyBhdXRoZW50aWNhdGVkIH0pXG4gICAgcmV0dXJuIHJlc3BvbnNlXG4gIH1cblxuICBzZXRBdXRoVG9rZW4gKHRva2VuKSB7XG4gICAgcmV0dXJuIHRoaXMudXBweS5nZXRQbHVnaW4odGhpcy5wbHVnaW5JZCkuc3RvcmFnZS5zZXRJdGVtKHRoaXMudG9rZW5LZXksIHRva2VuKVxuICB9XG5cbiAgZ2V0QXV0aFRva2VuICgpIHtcbiAgICByZXR1cm4gdGhpcy51cHB5LmdldFBsdWdpbih0aGlzLnBsdWdpbklkKS5zdG9yYWdlLmdldEl0ZW0odGhpcy50b2tlbktleSlcbiAgfVxuXG4gIGF1dGhVcmwgKHF1ZXJpZXMgPSB7fSkge1xuICAgIGlmICh0aGlzLnByZUF1dGhUb2tlbikge1xuICAgICAgcXVlcmllcy51cHB5UHJlQXV0aFRva2VuID0gdGhpcy5wcmVBdXRoVG9rZW5cbiAgICB9XG5cbiAgICByZXR1cm4gYCR7dGhpcy5ob3N0bmFtZX0vJHt0aGlzLmlkfS9jb25uZWN0PyR7bmV3IFVSTFNlYXJjaFBhcmFtcyhxdWVyaWVzKX1gXG4gIH1cblxuICBmaWxlVXJsIChpZCkge1xuICAgIHJldHVybiBgJHt0aGlzLmhvc3RuYW1lfS8ke3RoaXMuaWR9L2dldC8ke2lkfWBcbiAgfVxuXG4gIGZldGNoUHJlQXV0aFRva2VuICgpIHtcbiAgICBpZiAoIXRoaXMuY29tcGFuaW9uS2V5c1BhcmFtcykge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpXG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMucG9zdChgJHt0aGlzLmlkfS9wcmVhdXRoL2AsIHsgcGFyYW1zOiB0aGlzLmNvbXBhbmlvbktleXNQYXJhbXMgfSlcbiAgICAgIC50aGVuKChyZXMpID0+IHtcbiAgICAgICAgdGhpcy5wcmVBdXRoVG9rZW4gPSByZXMudG9rZW5cbiAgICAgIH0pLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgdGhpcy51cHB5LmxvZyhgW0NvbXBhbmlvbkNsaWVudF0gdW5hYmxlIHRvIGZldGNoIHByZUF1dGhUb2tlbiAke2Vycn1gLCAnd2FybmluZycpXG4gICAgICB9KVxuICB9XG5cbiAgbGlzdCAoZGlyZWN0b3J5KSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0KGAke3RoaXMuaWR9L2xpc3QvJHtkaXJlY3RvcnkgfHwgJyd9YClcbiAgfVxuXG4gIGxvZ291dCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0KGAke3RoaXMuaWR9L2xvZ291dGApXG4gICAgICAudGhlbigocmVzcG9uc2UpID0+IFByb21pc2UuYWxsKFtcbiAgICAgICAgcmVzcG9uc2UsXG4gICAgICAgIHRoaXMudXBweS5nZXRQbHVnaW4odGhpcy5wbHVnaW5JZCkuc3RvcmFnZS5yZW1vdmVJdGVtKHRoaXMudG9rZW5LZXkpLFxuICAgICAgXSkpLnRoZW4oKFtyZXNwb25zZV0pID0+IHJlc3BvbnNlKVxuICB9XG5cbiAgc3RhdGljIGluaXRQbHVnaW4gKHBsdWdpbiwgb3B0cywgZGVmYXVsdE9wdHMpIHtcbiAgICBwbHVnaW4udHlwZSA9ICdhY3F1aXJlcidcbiAgICBwbHVnaW4uZmlsZXMgPSBbXVxuICAgIGlmIChkZWZhdWx0T3B0cykge1xuICAgICAgcGx1Z2luLm9wdHMgPSB7IC4uLmRlZmF1bHRPcHRzLCAuLi5vcHRzIH1cbiAgICB9XG5cbiAgICBpZiAob3B0cy5zZXJ2ZXJVcmwgfHwgb3B0cy5zZXJ2ZXJQYXR0ZXJuKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2BzZXJ2ZXJVcmxgIGFuZCBgc2VydmVyUGF0dGVybmAgaGF2ZSBiZWVuIHJlbmFtZWQgdG8gYGNvbXBhbmlvblVybGAgYW5kIGBjb21wYW5pb25BbGxvd2VkSG9zdHNgIHJlc3BlY3RpdmVseSBpbiB0aGUgMC4zMC41IHJlbGVhc2UuIFBsZWFzZSBjb25zdWx0IHRoZSBkb2NzIChmb3IgZXhhbXBsZSwgaHR0cHM6Ly91cHB5LmlvL2RvY3MvaW5zdGFncmFtLyBmb3IgdGhlIEluc3RhZ3JhbSBwbHVnaW4pIGFuZCB1c2UgdGhlIHVwZGF0ZWQgb3B0aW9ucy5gJylcbiAgICB9XG5cbiAgICBpZiAob3B0cy5jb21wYW5pb25BbGxvd2VkSG9zdHMpIHtcbiAgICAgIGNvbnN0IHBhdHRlcm4gPSBvcHRzLmNvbXBhbmlvbkFsbG93ZWRIb3N0c1xuICAgICAgLy8gdmFsaWRhdGUgY29tcGFuaW9uQWxsb3dlZEhvc3RzIHBhcmFtXG4gICAgICBpZiAodHlwZW9mIHBhdHRlcm4gIT09ICdzdHJpbmcnICYmICFBcnJheS5pc0FycmF5KHBhdHRlcm4pICYmICEocGF0dGVybiBpbnN0YW5jZW9mIFJlZ0V4cCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgJHtwbHVnaW4uaWR9OiB0aGUgb3B0aW9uIFwiY29tcGFuaW9uQWxsb3dlZEhvc3RzXCIgbXVzdCBiZSBvbmUgb2Ygc3RyaW5nLCBBcnJheSwgUmVnRXhwYClcbiAgICAgIH1cbiAgICAgIHBsdWdpbi5vcHRzLmNvbXBhbmlvbkFsbG93ZWRIb3N0cyA9IHBhdHRlcm5cbiAgICB9IGVsc2UgaWYgKC9eKD8haHR0cHM/OlxcL1xcLykuKiQvaS50ZXN0KG9wdHMuY29tcGFuaW9uVXJsKSkge1xuICAgICAgLy8gZG9lcyBub3Qgc3RhcnQgd2l0aCBodHRwczovL1xuICAgICAgcGx1Z2luLm9wdHMuY29tcGFuaW9uQWxsb3dlZEhvc3RzID0gYGh0dHBzOi8vJHtvcHRzLmNvbXBhbmlvblVybC5yZXBsYWNlKC9eXFwvXFwvLywgJycpfWBcbiAgICB9IGVsc2Uge1xuICAgICAgcGx1Z2luLm9wdHMuY29tcGFuaW9uQWxsb3dlZEhvc3RzID0gbmV3IFVSTChvcHRzLmNvbXBhbmlvblVybCkub3JpZ2luXG4gICAgfVxuXG4gICAgcGx1Z2luLnN0b3JhZ2UgPSBwbHVnaW4ub3B0cy5zdG9yYWdlIHx8IHRva2VuU3RvcmFnZVxuICB9XG59XG4iLCIndXNlIHN0cmljdCdcblxuY29uc3QgZmV0Y2hXaXRoTmV0d29ya0Vycm9yID0gcmVxdWlyZSgnQHVwcHkvdXRpbHMvbGliL2ZldGNoV2l0aE5ldHdvcmtFcnJvcicpXG5jb25zdCBBdXRoRXJyb3IgPSByZXF1aXJlKCcuL0F1dGhFcnJvcicpXG5cbi8vIFJlbW92ZSB0aGUgdHJhaWxpbmcgc2xhc2ggc28gd2UgY2FuIGFsd2F5cyBzYWZlbHkgYXBwZW5kIC94eXouXG5mdW5jdGlvbiBzdHJpcFNsYXNoICh1cmwpIHtcbiAgcmV0dXJuIHVybC5yZXBsYWNlKC9cXC8kLywgJycpXG59XG5cbmFzeW5jIGZ1bmN0aW9uIGhhbmRsZUpTT05SZXNwb25zZSAocmVzKSB7XG4gIGlmIChyZXMuc3RhdHVzID09PSA0MDEpIHtcbiAgICB0aHJvdyBuZXcgQXV0aEVycm9yKClcbiAgfVxuXG4gIGNvbnN0IGpzb25Qcm9taXNlID0gcmVzLmpzb24oKVxuXG4gIGlmIChyZXMuc3RhdHVzIDwgMjAwIHx8IHJlcy5zdGF0dXMgPiAzMDApIHtcbiAgICBsZXQgZXJyTXNnID0gYEZhaWxlZCByZXF1ZXN0IHdpdGggc3RhdHVzOiAke3Jlcy5zdGF0dXN9LiAke3Jlcy5zdGF0dXNUZXh0fWBcbiAgICB0cnkge1xuICAgICAgY29uc3QgZXJyRGF0YSA9IGF3YWl0IGpzb25Qcm9taXNlXG4gICAgICBlcnJNc2cgPSBlcnJEYXRhLm1lc3NhZ2UgPyBgJHtlcnJNc2d9IG1lc3NhZ2U6ICR7ZXJyRGF0YS5tZXNzYWdlfWAgOiBlcnJNc2dcbiAgICAgIGVyck1zZyA9IGVyckRhdGEucmVxdWVzdElkID8gYCR7ZXJyTXNnfSByZXF1ZXN0LUlkOiAke2VyckRhdGEucmVxdWVzdElkfWAgOiBlcnJNc2dcbiAgICB9IGZpbmFsbHkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuc2FmZS1maW5hbGx5XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyTXNnKVxuICAgIH1cbiAgfVxuICByZXR1cm4ganNvblByb21pc2Vcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjbGFzcyBSZXF1ZXN0Q2xpZW50IHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGdsb2JhbC1yZXF1aXJlXG4gIHN0YXRpYyBWRVJTSU9OID0gcmVxdWlyZSgnLi4vcGFja2FnZS5qc29uJykudmVyc2lvblxuXG4gICNnZXRQb3N0UmVzcG9uc2VGdW5jID0gc2tpcCA9PiByZXNwb25zZSA9PiAoc2tpcCA/IHJlc3BvbnNlIDogdGhpcy5vblJlY2VpdmVSZXNwb25zZShyZXNwb25zZSkpXG5cbiAgY29uc3RydWN0b3IgKHVwcHksIG9wdHMpIHtcbiAgICB0aGlzLnVwcHkgPSB1cHB5XG4gICAgdGhpcy5vcHRzID0gb3B0c1xuICAgIHRoaXMub25SZWNlaXZlUmVzcG9uc2UgPSB0aGlzLm9uUmVjZWl2ZVJlc3BvbnNlLmJpbmQodGhpcylcbiAgICB0aGlzLmFsbG93ZWRIZWFkZXJzID0gWydhY2NlcHQnLCAnY29udGVudC10eXBlJywgJ3VwcHktYXV0aC10b2tlbiddXG4gICAgdGhpcy5wcmVmbGlnaHREb25lID0gZmFsc2VcbiAgfVxuXG4gIGdldCBob3N0bmFtZSAoKSB7XG4gICAgY29uc3QgeyBjb21wYW5pb24gfSA9IHRoaXMudXBweS5nZXRTdGF0ZSgpXG4gICAgY29uc3QgaG9zdCA9IHRoaXMub3B0cy5jb21wYW5pb25VcmxcbiAgICByZXR1cm4gc3RyaXBTbGFzaChjb21wYW5pb24gJiYgY29tcGFuaW9uW2hvc3RdID8gY29tcGFuaW9uW2hvc3RdIDogaG9zdClcbiAgfVxuXG4gIHN0YXRpYyBkZWZhdWx0SGVhZGVycyA9IHtcbiAgICBBY2NlcHQ6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICdVcHB5LVZlcnNpb25zJzogYEB1cHB5L2NvbXBhbmlvbi1jbGllbnQ9JHtSZXF1ZXN0Q2xpZW50LlZFUlNJT059YCxcbiAgfVxuXG4gIGhlYWRlcnMgKCkge1xuICAgIGNvbnN0IHVzZXJIZWFkZXJzID0gdGhpcy5vcHRzLmNvbXBhbmlvbkhlYWRlcnMgfHwge31cbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHtcbiAgICAgIC4uLlJlcXVlc3RDbGllbnQuZGVmYXVsdEhlYWRlcnMsXG4gICAgICAuLi51c2VySGVhZGVycyxcbiAgICB9KVxuICB9XG5cbiAgb25SZWNlaXZlUmVzcG9uc2UgKHJlc3BvbnNlKSB7XG4gICAgY29uc3Qgc3RhdGUgPSB0aGlzLnVwcHkuZ2V0U3RhdGUoKVxuICAgIGNvbnN0IGNvbXBhbmlvbiA9IHN0YXRlLmNvbXBhbmlvbiB8fCB7fVxuICAgIGNvbnN0IGhvc3QgPSB0aGlzLm9wdHMuY29tcGFuaW9uVXJsXG4gICAgY29uc3QgeyBoZWFkZXJzIH0gPSByZXNwb25zZVxuICAgIC8vIFN0b3JlIHRoZSBzZWxmLWlkZW50aWZpZWQgZG9tYWluIG5hbWUgZm9yIHRoZSBDb21wYW5pb24gaW5zdGFuY2Ugd2UganVzdCBoaXQuXG4gICAgaWYgKGhlYWRlcnMuaGFzKCdpLWFtJykgJiYgaGVhZGVycy5nZXQoJ2ktYW0nKSAhPT0gY29tcGFuaW9uW2hvc3RdKSB7XG4gICAgICB0aGlzLnVwcHkuc2V0U3RhdGUoe1xuICAgICAgICBjb21wYW5pb246IHsgLi4uY29tcGFuaW9uLCBbaG9zdF06IGhlYWRlcnMuZ2V0KCdpLWFtJykgfSxcbiAgICAgIH0pXG4gICAgfVxuICAgIHJldHVybiByZXNwb25zZVxuICB9XG5cbiAgI2dldFVybCAodXJsKSB7XG4gICAgaWYgKC9eKGh0dHBzPzp8KVxcL1xcLy8udGVzdCh1cmwpKSB7XG4gICAgICByZXR1cm4gdXJsXG4gICAgfVxuICAgIHJldHVybiBgJHt0aGlzLmhvc3RuYW1lfS8ke3VybH1gXG4gIH1cblxuICAjZXJyb3JIYW5kbGVyIChtZXRob2QsIHBhdGgpIHtcbiAgICByZXR1cm4gKGVycikgPT4ge1xuICAgICAgaWYgKCFlcnI/LmlzQXV0aEVycm9yKSB7XG4gICAgICAgIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKGBDb3VsZCBub3QgJHttZXRob2R9ICR7dGhpcy4jZ2V0VXJsKHBhdGgpfWApXG4gICAgICAgIGVycm9yLmNhdXNlID0gZXJyXG4gICAgICAgIGVyciA9IGVycm9yIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgIH1cbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnIpXG4gICAgfVxuICB9XG5cbiAgcHJlZmxpZ2h0IChwYXRoKSB7XG4gICAgaWYgKHRoaXMucHJlZmxpZ2h0RG9uZSkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLmFsbG93ZWRIZWFkZXJzLnNsaWNlKCkpXG4gICAgfVxuXG4gICAgcmV0dXJuIGZldGNoKHRoaXMuI2dldFVybChwYXRoKSwge1xuICAgICAgbWV0aG9kOiAnT1BUSU9OUycsXG4gICAgfSlcbiAgICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgICBpZiAocmVzcG9uc2UuaGVhZGVycy5oYXMoJ2FjY2Vzcy1jb250cm9sLWFsbG93LWhlYWRlcnMnKSkge1xuICAgICAgICAgIHRoaXMuYWxsb3dlZEhlYWRlcnMgPSByZXNwb25zZS5oZWFkZXJzLmdldCgnYWNjZXNzLWNvbnRyb2wtYWxsb3ctaGVhZGVycycpXG4gICAgICAgICAgICAuc3BsaXQoJywnKS5tYXAoKGhlYWRlck5hbWUpID0+IGhlYWRlck5hbWUudHJpbSgpLnRvTG93ZXJDYXNlKCkpXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wcmVmbGlnaHREb25lID0gdHJ1ZVxuICAgICAgICByZXR1cm4gdGhpcy5hbGxvd2VkSGVhZGVycy5zbGljZSgpXG4gICAgICB9KVxuICAgICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgdGhpcy51cHB5LmxvZyhgW0NvbXBhbmlvbkNsaWVudF0gdW5hYmxlIHRvIG1ha2UgcHJlZmxpZ2h0IHJlcXVlc3QgJHtlcnJ9YCwgJ3dhcm5pbmcnKVxuICAgICAgICB0aGlzLnByZWZsaWdodERvbmUgPSB0cnVlXG4gICAgICAgIHJldHVybiB0aGlzLmFsbG93ZWRIZWFkZXJzLnNsaWNlKClcbiAgICAgIH0pXG4gIH1cblxuICBwcmVmbGlnaHRBbmRIZWFkZXJzIChwYXRoKSB7XG4gICAgcmV0dXJuIFByb21pc2UuYWxsKFt0aGlzLnByZWZsaWdodChwYXRoKSwgdGhpcy5oZWFkZXJzKCldKVxuICAgICAgLnRoZW4oKFthbGxvd2VkSGVhZGVycywgaGVhZGVyc10pID0+IHtcbiAgICAgICAgLy8gZmlsdGVyIHRvIGtlZXAgb25seSBhbGxvd2VkIEhlYWRlcnNcbiAgICAgICAgT2JqZWN0LmtleXMoaGVhZGVycykuZm9yRWFjaCgoaGVhZGVyKSA9PiB7XG4gICAgICAgICAgaWYgKCFhbGxvd2VkSGVhZGVycy5pbmNsdWRlcyhoZWFkZXIudG9Mb3dlckNhc2UoKSkpIHtcbiAgICAgICAgICAgIHRoaXMudXBweS5sb2coYFtDb21wYW5pb25DbGllbnRdIGV4Y2x1ZGluZyBkaXNhbGxvd2VkIGhlYWRlciAke2hlYWRlcn1gKVxuICAgICAgICAgICAgZGVsZXRlIGhlYWRlcnNbaGVhZGVyXSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuXG4gICAgICAgIHJldHVybiBoZWFkZXJzXG4gICAgICB9KVxuICB9XG5cbiAgZ2V0IChwYXRoLCBza2lwUG9zdFJlc3BvbnNlKSB7XG4gICAgY29uc3QgbWV0aG9kID0gJ2dldCdcbiAgICByZXR1cm4gdGhpcy5wcmVmbGlnaHRBbmRIZWFkZXJzKHBhdGgpXG4gICAgICAudGhlbigoaGVhZGVycykgPT4gZmV0Y2hXaXRoTmV0d29ya0Vycm9yKHRoaXMuI2dldFVybChwYXRoKSwge1xuICAgICAgICBtZXRob2QsXG4gICAgICAgIGhlYWRlcnMsXG4gICAgICAgIGNyZWRlbnRpYWxzOiB0aGlzLm9wdHMuY29tcGFuaW9uQ29va2llc1J1bGUgfHwgJ3NhbWUtb3JpZ2luJyxcbiAgICAgIH0pKVxuICAgICAgLnRoZW4odGhpcy4jZ2V0UG9zdFJlc3BvbnNlRnVuYyhza2lwUG9zdFJlc3BvbnNlKSlcbiAgICAgIC50aGVuKGhhbmRsZUpTT05SZXNwb25zZSlcbiAgICAgIC5jYXRjaCh0aGlzLiNlcnJvckhhbmRsZXIobWV0aG9kLCBwYXRoKSlcbiAgfVxuXG4gIHBvc3QgKHBhdGgsIGRhdGEsIHNraXBQb3N0UmVzcG9uc2UpIHtcbiAgICBjb25zdCBtZXRob2QgPSAncG9zdCdcbiAgICByZXR1cm4gdGhpcy5wcmVmbGlnaHRBbmRIZWFkZXJzKHBhdGgpXG4gICAgICAudGhlbigoaGVhZGVycykgPT4gZmV0Y2hXaXRoTmV0d29ya0Vycm9yKHRoaXMuI2dldFVybChwYXRoKSwge1xuICAgICAgICBtZXRob2QsXG4gICAgICAgIGhlYWRlcnMsXG4gICAgICAgIGNyZWRlbnRpYWxzOiB0aGlzLm9wdHMuY29tcGFuaW9uQ29va2llc1J1bGUgfHwgJ3NhbWUtb3JpZ2luJyxcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoZGF0YSksXG4gICAgICB9KSlcbiAgICAgIC50aGVuKHRoaXMuI2dldFBvc3RSZXNwb25zZUZ1bmMoc2tpcFBvc3RSZXNwb25zZSkpXG4gICAgICAudGhlbihoYW5kbGVKU09OUmVzcG9uc2UpXG4gICAgICAuY2F0Y2godGhpcy4jZXJyb3JIYW5kbGVyKG1ldGhvZCwgcGF0aCkpXG4gIH1cblxuICBkZWxldGUgKHBhdGgsIGRhdGEsIHNraXBQb3N0UmVzcG9uc2UpIHtcbiAgICBjb25zdCBtZXRob2QgPSAnZGVsZXRlJ1xuICAgIHJldHVybiB0aGlzLnByZWZsaWdodEFuZEhlYWRlcnMocGF0aClcbiAgICAgIC50aGVuKChoZWFkZXJzKSA9PiBmZXRjaFdpdGhOZXR3b3JrRXJyb3IoYCR7dGhpcy5ob3N0bmFtZX0vJHtwYXRofWAsIHtcbiAgICAgICAgbWV0aG9kLFxuICAgICAgICBoZWFkZXJzLFxuICAgICAgICBjcmVkZW50aWFsczogdGhpcy5vcHRzLmNvbXBhbmlvbkNvb2tpZXNSdWxlIHx8ICdzYW1lLW9yaWdpbicsXG4gICAgICAgIGJvZHk6IGRhdGEgPyBKU09OLnN0cmluZ2lmeShkYXRhKSA6IG51bGwsXG4gICAgICB9KSlcbiAgICAgIC50aGVuKHRoaXMuI2dldFBvc3RSZXNwb25zZUZ1bmMoc2tpcFBvc3RSZXNwb25zZSkpXG4gICAgICAudGhlbihoYW5kbGVKU09OUmVzcG9uc2UpXG4gICAgICAuY2F0Y2godGhpcy4jZXJyb3JIYW5kbGVyKG1ldGhvZCwgcGF0aCkpXG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0J1xuXG5jb25zdCBSZXF1ZXN0Q2xpZW50ID0gcmVxdWlyZSgnLi9SZXF1ZXN0Q2xpZW50JylcblxuY29uc3QgZ2V0TmFtZSA9IChpZCkgPT4ge1xuICByZXR1cm4gaWQuc3BsaXQoJy0nKS5tYXAoKHMpID0+IHMuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzLnNsaWNlKDEpKS5qb2luKCcgJylcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjbGFzcyBTZWFyY2hQcm92aWRlciBleHRlbmRzIFJlcXVlc3RDbGllbnQge1xuICBjb25zdHJ1Y3RvciAodXBweSwgb3B0cykge1xuICAgIHN1cGVyKHVwcHksIG9wdHMpXG4gICAgdGhpcy5wcm92aWRlciA9IG9wdHMucHJvdmlkZXJcbiAgICB0aGlzLmlkID0gdGhpcy5wcm92aWRlclxuICAgIHRoaXMubmFtZSA9IHRoaXMub3B0cy5uYW1lIHx8IGdldE5hbWUodGhpcy5pZClcbiAgICB0aGlzLnBsdWdpbklkID0gdGhpcy5vcHRzLnBsdWdpbklkXG4gIH1cblxuICBmaWxlVXJsIChpZCkge1xuICAgIHJldHVybiBgJHt0aGlzLmhvc3RuYW1lfS9zZWFyY2gvJHt0aGlzLmlkfS9nZXQvJHtpZH1gXG4gIH1cblxuICBzZWFyY2ggKHRleHQsIHF1ZXJpZXMpIHtcbiAgICBxdWVyaWVzID0gcXVlcmllcyA/IGAmJHtxdWVyaWVzfWAgOiAnJ1xuICAgIHJldHVybiB0aGlzLmdldChgc2VhcmNoLyR7dGhpcy5pZH0vbGlzdD9xPSR7ZW5jb2RlVVJJQ29tcG9uZW50KHRleHQpfSR7cXVlcmllc31gKVxuICB9XG59XG4iLCJjb25zdCBlZSA9IHJlcXVpcmUoJ25hbWVzcGFjZS1lbWl0dGVyJylcblxubW9kdWxlLmV4cG9ydHMgPSBjbGFzcyBVcHB5U29ja2V0IHtcbiAgI3F1ZXVlZCA9IFtdXG5cbiAgI2VtaXR0ZXIgPSBlZSgpXG5cbiAgI2lzT3BlbiA9IGZhbHNlXG5cbiAgI3NvY2tldFxuXG4gIGNvbnN0cnVjdG9yIChvcHRzKSB7XG4gICAgdGhpcy5vcHRzID0gb3B0c1xuXG4gICAgaWYgKCFvcHRzIHx8IG9wdHMuYXV0b09wZW4gIT09IGZhbHNlKSB7XG4gICAgICB0aGlzLm9wZW4oKVxuICAgIH1cbiAgfVxuXG4gIGdldCBpc09wZW4gKCkgeyByZXR1cm4gdGhpcy4jaXNPcGVuIH1cblxuICBbU3ltYm9sLmZvcigndXBweSB0ZXN0OiBnZXRTb2NrZXQnKV0gKCkgeyByZXR1cm4gdGhpcy4jc29ja2V0IH1cblxuICBbU3ltYm9sLmZvcigndXBweSB0ZXN0OiBnZXRRdWV1ZWQnKV0gKCkgeyByZXR1cm4gdGhpcy4jcXVldWVkIH1cblxuICBvcGVuICgpIHtcbiAgICB0aGlzLiNzb2NrZXQgPSBuZXcgV2ViU29ja2V0KHRoaXMub3B0cy50YXJnZXQpXG5cbiAgICB0aGlzLiNzb2NrZXQub25vcGVuID0gKCkgPT4ge1xuICAgICAgdGhpcy4jaXNPcGVuID0gdHJ1ZVxuXG4gICAgICB3aGlsZSAodGhpcy4jcXVldWVkLmxlbmd0aCA+IDAgJiYgdGhpcy4jaXNPcGVuKSB7XG4gICAgICAgIGNvbnN0IGZpcnN0ID0gdGhpcy4jcXVldWVkLnNoaWZ0KClcbiAgICAgICAgdGhpcy5zZW5kKGZpcnN0LmFjdGlvbiwgZmlyc3QucGF5bG9hZClcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLiNzb2NrZXQub25jbG9zZSA9ICgpID0+IHtcbiAgICAgIHRoaXMuI2lzT3BlbiA9IGZhbHNlXG4gICAgfVxuXG4gICAgdGhpcy4jc29ja2V0Lm9ubWVzc2FnZSA9IHRoaXMuI2hhbmRsZU1lc3NhZ2VcbiAgfVxuXG4gIGNsb3NlICgpIHtcbiAgICB0aGlzLiNzb2NrZXQ/LmNsb3NlKClcbiAgfVxuXG4gIHNlbmQgKGFjdGlvbiwgcGF5bG9hZCkge1xuICAgIC8vIGF0dGFjaCB1dWlkXG5cbiAgICBpZiAoIXRoaXMuI2lzT3Blbikge1xuICAgICAgdGhpcy4jcXVldWVkLnB1c2goeyBhY3Rpb24sIHBheWxvYWQgfSlcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHRoaXMuI3NvY2tldC5zZW5kKEpTT04uc3RyaW5naWZ5KHtcbiAgICAgIGFjdGlvbixcbiAgICAgIHBheWxvYWQsXG4gICAgfSkpXG4gIH1cblxuICBvbiAoYWN0aW9uLCBoYW5kbGVyKSB7XG4gICAgdGhpcy4jZW1pdHRlci5vbihhY3Rpb24sIGhhbmRsZXIpXG4gIH1cblxuICBlbWl0IChhY3Rpb24sIHBheWxvYWQpIHtcbiAgICB0aGlzLiNlbWl0dGVyLmVtaXQoYWN0aW9uLCBwYXlsb2FkKVxuICB9XG5cbiAgb25jZSAoYWN0aW9uLCBoYW5kbGVyKSB7XG4gICAgdGhpcy4jZW1pdHRlci5vbmNlKGFjdGlvbiwgaGFuZGxlcilcbiAgfVxuXG4gICNoYW5kbGVNZXNzYWdlID0gKGUpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgbWVzc2FnZSA9IEpTT04ucGFyc2UoZS5kYXRhKVxuICAgICAgdGhpcy5lbWl0KG1lc3NhZ2UuYWN0aW9uLCBtZXNzYWdlLnBheWxvYWQpXG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAvLyBUT0RPOiB1c2UgYSBtb3JlIHJvYnVzdCBlcnJvciBoYW5kbGVyLlxuICAgICAgY29uc29sZS5sb2coZXJyKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcbiAgICB9XG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0J1xuXG4vKipcbiAqIE1hbmFnZXMgY29tbXVuaWNhdGlvbnMgd2l0aCBDb21wYW5pb25cbiAqL1xuXG5jb25zdCBSZXF1ZXN0Q2xpZW50ID0gcmVxdWlyZSgnLi9SZXF1ZXN0Q2xpZW50JylcbmNvbnN0IFByb3ZpZGVyID0gcmVxdWlyZSgnLi9Qcm92aWRlcicpXG5jb25zdCBTZWFyY2hQcm92aWRlciA9IHJlcXVpcmUoJy4vU2VhcmNoUHJvdmlkZXInKVxuY29uc3QgU29ja2V0ID0gcmVxdWlyZSgnLi9Tb2NrZXQnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgUmVxdWVzdENsaWVudCxcbiAgUHJvdmlkZXIsXG4gIFNlYXJjaFByb3ZpZGVyLFxuICBTb2NrZXQsXG59XG4iLCIndXNlIHN0cmljdCdcblxuLyoqXG4gKiBUaGlzIG1vZHVsZSBzZXJ2ZXMgYXMgYW4gQXN5bmMgd3JhcHBlciBmb3IgTG9jYWxTdG9yYWdlXG4gKi9cbm1vZHVsZS5leHBvcnRzLnNldEl0ZW0gPSAoa2V5LCB2YWx1ZSkgPT4ge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShrZXksIHZhbHVlKVxuICAgIHJlc29sdmUoKVxuICB9KVxufVxuXG5tb2R1bGUuZXhwb3J0cy5nZXRJdGVtID0gKGtleSkgPT4ge1xuICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKGtleSkpXG59XG5cbm1vZHVsZS5leHBvcnRzLnJlbW92ZUl0ZW0gPSAoa2V5KSA9PiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKGtleSlcbiAgICByZXNvbHZlKClcbiAgfSlcbn1cbiIsIi8qKlxuICogQ29yZSBwbHVnaW4gbG9naWMgdGhhdCBhbGwgcGx1Z2lucyBzaGFyZS5cbiAqXG4gKiBCYXNlUGx1Z2luIGRvZXMgbm90IGNvbnRhaW4gRE9NIHJlbmRlcmluZyBzbyBpdCBjYW4gYmUgdXNlZCBmb3IgcGx1Z2luc1xuICogd2l0aG91dCBhIHVzZXIgaW50ZXJmYWNlLlxuICpcbiAqIFNlZSBgUGx1Z2luYCBmb3IgdGhlIGV4dGVuZGVkIHZlcnNpb24gd2l0aCBQcmVhY3QgcmVuZGVyaW5nIGZvciBpbnRlcmZhY2VzLlxuICovXG5cbmNvbnN0IFRyYW5zbGF0b3IgPSByZXF1aXJlKCdAdXBweS91dGlscy9saWIvVHJhbnNsYXRvcicpXG5cbm1vZHVsZS5leHBvcnRzID0gY2xhc3MgQmFzZVBsdWdpbiB7XG4gIGNvbnN0cnVjdG9yICh1cHB5LCBvcHRzID0ge30pIHtcbiAgICB0aGlzLnVwcHkgPSB1cHB5XG4gICAgdGhpcy5vcHRzID0gb3B0c1xuICB9XG5cbiAgZ2V0UGx1Z2luU3RhdGUgKCkge1xuICAgIGNvbnN0IHsgcGx1Z2lucyB9ID0gdGhpcy51cHB5LmdldFN0YXRlKClcbiAgICByZXR1cm4gcGx1Z2luc1t0aGlzLmlkXSB8fCB7fVxuICB9XG5cbiAgc2V0UGx1Z2luU3RhdGUgKHVwZGF0ZSkge1xuICAgIGNvbnN0IHsgcGx1Z2lucyB9ID0gdGhpcy51cHB5LmdldFN0YXRlKClcblxuICAgIHRoaXMudXBweS5zZXRTdGF0ZSh7XG4gICAgICBwbHVnaW5zOiB7XG4gICAgICAgIC4uLnBsdWdpbnMsXG4gICAgICAgIFt0aGlzLmlkXToge1xuICAgICAgICAgIC4uLnBsdWdpbnNbdGhpcy5pZF0sXG4gICAgICAgICAgLi4udXBkYXRlLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9KVxuICB9XG5cbiAgc2V0T3B0aW9ucyAobmV3T3B0cykge1xuICAgIHRoaXMub3B0cyA9IHsgLi4udGhpcy5vcHRzLCAuLi5uZXdPcHRzIH1cbiAgICB0aGlzLnNldFBsdWdpblN0YXRlKCkgLy8gc28gdGhhdCBVSSByZS1yZW5kZXJzIHdpdGggbmV3IG9wdGlvbnNcbiAgICB0aGlzLmkxOG5Jbml0KClcbiAgfVxuXG4gIGkxOG5Jbml0ICgpIHtcbiAgICBjb25zdCB0cmFuc2xhdG9yID0gbmV3IFRyYW5zbGF0b3IoW3RoaXMuZGVmYXVsdExvY2FsZSwgdGhpcy51cHB5LmxvY2FsZSwgdGhpcy5vcHRzLmxvY2FsZV0pXG4gICAgdGhpcy5pMThuID0gdHJhbnNsYXRvci50cmFuc2xhdGUuYmluZCh0cmFuc2xhdG9yKVxuICAgIHRoaXMuaTE4bkFycmF5ID0gdHJhbnNsYXRvci50cmFuc2xhdGVBcnJheS5iaW5kKHRyYW5zbGF0b3IpXG4gICAgdGhpcy5zZXRQbHVnaW5TdGF0ZSgpIC8vIHNvIHRoYXQgVUkgcmUtcmVuZGVycyBhbmQgd2Ugc2VlIHRoZSB1cGRhdGVkIGxvY2FsZVxuICB9XG5cbiAgLyoqXG4gICAqIEV4dGVuZGFibGUgbWV0aG9kc1xuICAgKiA9PT09PT09PT09PT09PT09PT1cbiAgICogVGhlc2UgbWV0aG9kcyBhcmUgaGVyZSB0byBzZXJ2ZSBhcyBhbiBvdmVydmlldyBvZiB0aGUgZXh0ZW5kYWJsZSBtZXRob2RzIGFzIHdlbGwgYXNcbiAgICogbWFraW5nIHRoZW0gbm90IGNvbmRpdGlvbmFsIGluIHVzZSwgc3VjaCBhcyBgaWYgKHRoaXMuYWZ0ZXJVcGRhdGUpYC5cbiAgICovXG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXNcbiAgYWRkVGFyZ2V0ICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4dGVuZCB0aGUgYWRkVGFyZ2V0IG1ldGhvZCB0byBhZGQgeW91ciBwbHVnaW4gdG8gYW5vdGhlciBwbHVnaW5cXCdzIHRhcmdldCcpXG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2xhc3MtbWV0aG9kcy11c2UtdGhpc1xuICBpbnN0YWxsICgpIHt9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXNcbiAgdW5pbnN0YWxsICgpIHt9XG5cbiAgLyoqXG4gICAqIENhbGxlZCB3aGVuIHBsdWdpbiBpcyBtb3VudGVkLCB3aGV0aGVyIGluIERPTSBvciBpbnRvIGFub3RoZXIgcGx1Z2luLlxuICAgKiBOZWVkZWQgYmVjYXVzZSBzb21ldGltZXMgcGx1Z2lucyBhcmUgbW91bnRlZCBzZXBhcmF0ZWx5L2FmdGVyIGBpbnN0YWxsYCxcbiAgICogc28gdGhpcy5lbCBhbmQgdGhpcy5wYXJlbnQgbWlnaHQgbm90IGJlIGF2YWlsYWJsZSBpbiBgaW5zdGFsbGAuXG4gICAqIFRoaXMgaXMgdGhlIGNhc2Ugd2l0aCBAdXBweS9yZWFjdCBwbHVnaW5zLCBmb3IgZXhhbXBsZS5cbiAgICovXG4gIHJlbmRlciAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdFeHRlbmQgdGhlIHJlbmRlciBtZXRob2QgdG8gYWRkIHlvdXIgcGx1Z2luIHRvIGEgRE9NIGVsZW1lbnQnKVxuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXNcbiAgdXBkYXRlICgpIHt9XG5cbiAgLy8gQ2FsbGVkIGFmdGVyIGV2ZXJ5IHN0YXRlIHVwZGF0ZSwgYWZ0ZXIgZXZlcnl0aGluZydzIG1vdW50ZWQuIERlYm91bmNlZC5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXNcbiAgYWZ0ZXJVcGRhdGUgKCkge31cbn1cbiIsImNvbnN0IHsgcmVuZGVyIH0gPSByZXF1aXJlKCdwcmVhY3QnKVxuY29uc3QgZmluZERPTUVsZW1lbnQgPSByZXF1aXJlKCdAdXBweS91dGlscy9saWIvZmluZERPTUVsZW1lbnQnKVxuXG5jb25zdCBCYXNlUGx1Z2luID0gcmVxdWlyZSgnLi9CYXNlUGx1Z2luJylcblxuLyoqXG4gKiBEZWZlciBhIGZyZXF1ZW50IGNhbGwgdG8gdGhlIG1pY3JvdGFzayBxdWV1ZS5cbiAqXG4gKiBAcGFyYW0geygpID0+IFR9IGZuXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxUPn1cbiAqL1xuZnVuY3Rpb24gZGVib3VuY2UgKGZuKSB7XG4gIGxldCBjYWxsaW5nID0gbnVsbFxuICBsZXQgbGF0ZXN0QXJncyA9IG51bGxcbiAgcmV0dXJuICguLi5hcmdzKSA9PiB7XG4gICAgbGF0ZXN0QXJncyA9IGFyZ3NcbiAgICBpZiAoIWNhbGxpbmcpIHtcbiAgICAgIGNhbGxpbmcgPSBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IHtcbiAgICAgICAgY2FsbGluZyA9IG51bGxcbiAgICAgICAgLy8gQXQgdGhpcyBwb2ludCBgYXJnc2AgbWF5IGJlIGRpZmZlcmVudCBmcm9tIHRoZSBtb3N0XG4gICAgICAgIC8vIHJlY2VudCBzdGF0ZSwgaWYgbXVsdGlwbGUgY2FsbHMgaGFwcGVuZWQgc2luY2UgdGhpcyB0YXNrXG4gICAgICAgIC8vIHdhcyBxdWV1ZWQuIFNvIHdlIHVzZSB0aGUgYGxhdGVzdEFyZ3NgLCB3aGljaCBkZWZpbml0ZWx5XG4gICAgICAgIC8vIGlzIHRoZSBtb3N0IHJlY2VudCBjYWxsLlxuICAgICAgICByZXR1cm4gZm4oLi4ubGF0ZXN0QXJncylcbiAgICAgIH0pXG4gICAgfVxuICAgIHJldHVybiBjYWxsaW5nXG4gIH1cbn1cblxuLyoqXG4gKiBVSVBsdWdpbiBpcyB0aGUgZXh0ZW5kZWQgdmVyc2lvbiBvZiBCYXNlUGx1Z2luIHRvIGluY29ycG9yYXRlIHJlbmRlcmluZyB3aXRoIFByZWFjdC5cbiAqIFVzZSB0aGlzIGZvciBwbHVnaW5zIHRoYXQgbmVlZCBhIHVzZXIgaW50ZXJmYWNlLlxuICpcbiAqIEZvciBwbHVnaW5zIHdpdGhvdXQgYW4gdXNlciBpbnRlcmZhY2UsIHNlZSBCYXNlUGx1Z2luLlxuICovXG5jbGFzcyBVSVBsdWdpbiBleHRlbmRzIEJhc2VQbHVnaW4ge1xuICAjdXBkYXRlVUlcblxuICAvKipcbiAgICogQ2hlY2sgaWYgc3VwcGxpZWQgYHRhcmdldGAgaXMgYSBET00gZWxlbWVudCBvciBhbiBgb2JqZWN0YC5cbiAgICogSWYgaXTigJlzIGFuIG9iamVjdCDigJQgdGFyZ2V0IGlzIGEgcGx1Z2luLCBhbmQgd2Ugc2VhcmNoIGBwbHVnaW5zYFxuICAgKiBmb3IgYSBwbHVnaW4gd2l0aCBzYW1lIG5hbWUgYW5kIHJldHVybiBpdHMgdGFyZ2V0LlxuICAgKi9cbiAgbW91bnQgKHRhcmdldCwgcGx1Z2luKSB7XG4gICAgY29uc3QgY2FsbGVyUGx1Z2luTmFtZSA9IHBsdWdpbi5pZFxuXG4gICAgY29uc3QgdGFyZ2V0RWxlbWVudCA9IGZpbmRET01FbGVtZW50KHRhcmdldClcblxuICAgIGlmICh0YXJnZXRFbGVtZW50KSB7XG4gICAgICB0aGlzLmlzVGFyZ2V0RE9NRWwgPSB0cnVlXG4gICAgICAvLyBXaGVuIHRhcmdldCBpcyA8Ym9keT4gd2l0aCBhIHNpbmdsZSA8ZGl2PiBlbGVtZW50LFxuICAgICAgLy8gUHJlYWN0IHRoaW5rcyBpdOKAmXMgdGhlIFVwcHkgcm9vdCBlbGVtZW50IGluIHRoZXJlIHdoZW4gZG9pbmcgYSBkaWZmLFxuICAgICAgLy8gYW5kIGRlc3Ryb3lzIGl0LiBTbyB3ZSBhcmUgY3JlYXRpbmcgYSBmcmFnbWVudCAoY291bGQgYmUgZW1wdHkgZGl2KVxuICAgICAgY29uc3QgdXBweVJvb3RFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpXG5cbiAgICAgIC8vIEFQSSBmb3IgcGx1Z2lucyB0aGF0IHJlcXVpcmUgYSBzeW5jaHJvbm91cyByZXJlbmRlci5cbiAgICAgIHRoaXMuI3VwZGF0ZVVJID0gZGVib3VuY2UoKHN0YXRlKSA9PiB7XG4gICAgICAgIC8vIHBsdWdpbiBjb3VsZCBiZSByZW1vdmVkLCBidXQgdGhpcy5yZXJlbmRlciBpcyBkZWJvdW5jZWQgYmVsb3csXG4gICAgICAgIC8vIHNvIGl0IGNvdWxkIHN0aWxsIGJlIGNhbGxlZCBldmVuIGFmdGVyIHVwcHkucmVtb3ZlUGx1Z2luIG9yIHVwcHkuY2xvc2VcbiAgICAgICAgLy8gaGVuY2UgdGhlIGNoZWNrXG4gICAgICAgIGlmICghdGhpcy51cHB5LmdldFBsdWdpbih0aGlzLmlkKSkgcmV0dXJuXG4gICAgICAgIHJlbmRlcih0aGlzLnJlbmRlcihzdGF0ZSksIHVwcHlSb290RWxlbWVudClcbiAgICAgICAgdGhpcy5hZnRlclVwZGF0ZSgpXG4gICAgICB9KVxuXG4gICAgICB0aGlzLnVwcHkubG9nKGBJbnN0YWxsaW5nICR7Y2FsbGVyUGx1Z2luTmFtZX0gdG8gYSBET00gZWxlbWVudCAnJHt0YXJnZXR9J2ApXG5cbiAgICAgIGlmICh0aGlzLm9wdHMucmVwbGFjZVRhcmdldENvbnRlbnQpIHtcbiAgICAgICAgLy8gRG9pbmcgcmVuZGVyKGgobnVsbCksIHRhcmdldEVsZW1lbnQpLCB3aGljaCBzaG91bGQgaGF2ZSBiZWVuXG4gICAgICAgIC8vIGEgYmV0dGVyIHdheSwgc2luY2UgYmVjYXVzZSB0aGUgY29tcG9uZW50IG1pZ2h0IG5lZWQgdG8gZG8gYWRkaXRpb25hbCBjbGVhbnVwIHdoZW4gaXQgaXMgcmVtb3ZlZCxcbiAgICAgICAgLy8gc3RvcHBlZCB3b3JraW5nIOKAlCBQcmVhY3QganVzdCBhZGRzIG51bGwgaW50byB0YXJnZXQsIG5vdCByZXBsYWNpbmdcbiAgICAgICAgdGFyZ2V0RWxlbWVudC5pbm5lckhUTUwgPSAnJ1xuICAgICAgfVxuXG4gICAgICByZW5kZXIodGhpcy5yZW5kZXIodGhpcy51cHB5LmdldFN0YXRlKCkpLCB1cHB5Um9vdEVsZW1lbnQpXG4gICAgICB0aGlzLmVsID0gdXBweVJvb3RFbGVtZW50LmZpcnN0RWxlbWVudENoaWxkXG4gICAgICB0YXJnZXRFbGVtZW50LmFwcGVuZENoaWxkKHVwcHlSb290RWxlbWVudClcblxuICAgICAgdGhpcy5vbk1vdW50KClcblxuICAgICAgcmV0dXJuIHRoaXMuZWxcbiAgICB9XG5cbiAgICBsZXQgdGFyZ2V0UGx1Z2luXG4gICAgaWYgKHR5cGVvZiB0YXJnZXQgPT09ICdvYmplY3QnICYmIHRhcmdldCBpbnN0YW5jZW9mIFVJUGx1Z2luKSB7XG4gICAgICAvLyBUYXJnZXRpbmcgYSBwbHVnaW4gKmluc3RhbmNlKlxuICAgICAgdGFyZ2V0UGx1Z2luID0gdGFyZ2V0XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgdGFyZ2V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAvLyBUYXJnZXRpbmcgYSBwbHVnaW4gdHlwZVxuICAgICAgY29uc3QgVGFyZ2V0ID0gdGFyZ2V0XG4gICAgICAvLyBGaW5kIHRoZSB0YXJnZXQgcGx1Z2luIGluc3RhbmNlLlxuICAgICAgdGhpcy51cHB5Lml0ZXJhdGVQbHVnaW5zKHAgPT4ge1xuICAgICAgICBpZiAocCBpbnN0YW5jZW9mIFRhcmdldCkge1xuICAgICAgICAgIHRhcmdldFBsdWdpbiA9IHBcbiAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG5cbiAgICBpZiAodGFyZ2V0UGx1Z2luKSB7XG4gICAgICB0aGlzLnVwcHkubG9nKGBJbnN0YWxsaW5nICR7Y2FsbGVyUGx1Z2luTmFtZX0gdG8gJHt0YXJnZXRQbHVnaW4uaWR9YClcbiAgICAgIHRoaXMucGFyZW50ID0gdGFyZ2V0UGx1Z2luXG4gICAgICB0aGlzLmVsID0gdGFyZ2V0UGx1Z2luLmFkZFRhcmdldChwbHVnaW4pXG5cbiAgICAgIHRoaXMub25Nb3VudCgpXG4gICAgICByZXR1cm4gdGhpcy5lbFxuICAgIH1cblxuICAgIHRoaXMudXBweS5sb2coYE5vdCBpbnN0YWxsaW5nICR7Y2FsbGVyUGx1Z2luTmFtZX1gKVxuXG4gICAgbGV0IG1lc3NhZ2UgPSBgSW52YWxpZCB0YXJnZXQgb3B0aW9uIGdpdmVuIHRvICR7Y2FsbGVyUGx1Z2luTmFtZX0uYFxuICAgIGlmICh0eXBlb2YgdGFyZ2V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBtZXNzYWdlICs9ICcgVGhlIGdpdmVuIHRhcmdldCBpcyBub3QgYSBQbHVnaW4gY2xhc3MuICdcbiAgICAgICAgKyAnUGxlYXNlIGNoZWNrIHRoYXQgeW91XFwncmUgbm90IHNwZWNpZnlpbmcgYSBSZWFjdCBDb21wb25lbnQgaW5zdGVhZCBvZiBhIHBsdWdpbi4gJ1xuICAgICAgICArICdJZiB5b3UgYXJlIHVzaW5nIEB1cHB5LyogcGFja2FnZXMgZGlyZWN0bHksIG1ha2Ugc3VyZSB5b3UgaGF2ZSBvbmx5IDEgdmVyc2lvbiBvZiBAdXBweS9jb3JlIGluc3RhbGxlZDogJ1xuICAgICAgICArICdydW4gYG5wbSBscyBAdXBweS9jb3JlYCBvbiB0aGUgY29tbWFuZCBsaW5lIGFuZCB2ZXJpZnkgdGhhdCBhbGwgdGhlIHZlcnNpb25zIG1hdGNoIGFuZCBhcmUgZGVkdXBlZCBjb3JyZWN0bHkuJ1xuICAgIH0gZWxzZSB7XG4gICAgICBtZXNzYWdlICs9ICdJZiB5b3UgbWVhbnQgdG8gdGFyZ2V0IGFuIEhUTUwgZWxlbWVudCwgcGxlYXNlIG1ha2Ugc3VyZSB0aGF0IHRoZSBlbGVtZW50IGV4aXN0cy4gJ1xuICAgICAgICArICdDaGVjayB0aGF0IHRoZSA8c2NyaXB0PiB0YWcgaW5pdGlhbGl6aW5nIFVwcHkgaXMgcmlnaHQgYmVmb3JlIHRoZSBjbG9zaW5nIDwvYm9keT4gdGFnIGF0IHRoZSBlbmQgb2YgdGhlIHBhZ2UuICdcbiAgICAgICAgKyAnKHNlZSBodHRwczovL2dpdGh1Yi5jb20vdHJhbnNsb2FkaXQvdXBweS9pc3N1ZXMvMTA0MilcXG5cXG4nXG4gICAgICAgICsgJ0lmIHlvdSBtZWFudCB0byB0YXJnZXQgYSBwbHVnaW4sIHBsZWFzZSBjb25maXJtIHRoYXQgeW91ciBgaW1wb3J0YCBzdGF0ZW1lbnRzIG9yIGByZXF1aXJlYCBjYWxscyBhcmUgY29ycmVjdC4nXG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKVxuICB9XG5cbiAgdXBkYXRlIChzdGF0ZSkge1xuICAgIGlmICh0aGlzLmVsICE9IG51bGwpIHtcbiAgICAgIHRoaXMuI3VwZGF0ZVVJPy4oc3RhdGUpXG4gICAgfVxuICB9XG5cbiAgdW5tb3VudCAoKSB7XG4gICAgaWYgKHRoaXMuaXNUYXJnZXRET01FbCkge1xuICAgICAgdGhpcy5lbD8ucmVtb3ZlKClcbiAgICB9XG4gICAgdGhpcy5vblVubW91bnQoKVxuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXNcbiAgb25Nb3VudCAoKSB7fVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzXG4gIG9uVW5tb3VudCAoKSB7fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFVJUGx1Z2luXG4iLCIvKiBnbG9iYWwgQWdncmVnYXRlRXJyb3IgKi9cblxuJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IFRyYW5zbGF0b3IgPSByZXF1aXJlKCdAdXBweS91dGlscy9saWIvVHJhbnNsYXRvcicpXG5jb25zdCBlZSA9IHJlcXVpcmUoJ25hbWVzcGFjZS1lbWl0dGVyJylcbmNvbnN0IHsgbmFub2lkIH0gPSByZXF1aXJlKCduYW5vaWQnKVxuY29uc3QgdGhyb3R0bGUgPSByZXF1aXJlKCdsb2Rhc2gudGhyb3R0bGUnKVxuY29uc3QgcHJldHRpZXJCeXRlcyA9IHJlcXVpcmUoJ0B0cmFuc2xvYWRpdC9wcmV0dGllci1ieXRlcycpXG5jb25zdCBtYXRjaCA9IHJlcXVpcmUoJ21pbWUtbWF0Y2gnKVxuY29uc3QgRGVmYXVsdFN0b3JlID0gcmVxdWlyZSgnQHVwcHkvc3RvcmUtZGVmYXVsdCcpXG5jb25zdCBnZXRGaWxlVHlwZSA9IHJlcXVpcmUoJ0B1cHB5L3V0aWxzL2xpYi9nZXRGaWxlVHlwZScpXG5jb25zdCBnZXRGaWxlTmFtZUFuZEV4dGVuc2lvbiA9IHJlcXVpcmUoJ0B1cHB5L3V0aWxzL2xpYi9nZXRGaWxlTmFtZUFuZEV4dGVuc2lvbicpXG5jb25zdCBnZW5lcmF0ZUZpbGVJRCA9IHJlcXVpcmUoJ0B1cHB5L3V0aWxzL2xpYi9nZW5lcmF0ZUZpbGVJRCcpXG5jb25zdCBzdXBwb3J0c1VwbG9hZFByb2dyZXNzID0gcmVxdWlyZSgnLi9zdXBwb3J0c1VwbG9hZFByb2dyZXNzJylcbmNvbnN0IGdldEZpbGVOYW1lID0gcmVxdWlyZSgnLi9nZXRGaWxlTmFtZScpXG5jb25zdCB7IGp1c3RFcnJvcnNMb2dnZXIsIGRlYnVnTG9nZ2VyIH0gPSByZXF1aXJlKCcuL2xvZ2dlcnMnKVxuXG5jb25zdCBsb2NhbGUgPSByZXF1aXJlKCcuL2xvY2FsZScpXG5cbi8vIEV4cG9ydGVkIGZyb20gaGVyZS5cbmNsYXNzIFJlc3RyaWN0aW9uRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gIGNvbnN0cnVjdG9yICguLi5hcmdzKSB7XG4gICAgc3VwZXIoLi4uYXJncylcbiAgICB0aGlzLmlzUmVzdHJpY3Rpb24gPSB0cnVlXG4gIH1cbn1cbmlmICh0eXBlb2YgQWdncmVnYXRlRXJyb3IgPT09ICd1bmRlZmluZWQnKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1nbG9iYWwtYXNzaWduXG4gIGdsb2JhbFRoaXMuQWdncmVnYXRlRXJyb3IgPSBjbGFzcyBBZ2dyZWdhdGVFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvciAoZXJyb3JzLCBtZXNzYWdlKSB7XG4gICAgICBzdXBlcihtZXNzYWdlKVxuICAgICAgdGhpcy5lcnJvcnMgPSBlcnJvcnNcbiAgICB9XG4gIH1cbn1cblxuY2xhc3MgQWdncmVnYXRlUmVzdHJpY3Rpb25FcnJvciBleHRlbmRzIEFnZ3JlZ2F0ZUVycm9yIHtcbiAgY29uc3RydWN0b3IgKC4uLmFyZ3MpIHtcbiAgICBzdXBlciguLi5hcmdzKVxuICAgIHRoaXMuaXNSZXN0cmljdGlvbiA9IHRydWVcbiAgfVxufVxuXG4vKipcbiAqIFVwcHkgQ29yZSBtb2R1bGUuXG4gKiBNYW5hZ2VzIHBsdWdpbnMsIHN0YXRlIHVwZGF0ZXMsIGFjdHMgYXMgYW4gZXZlbnQgYnVzLFxuICogYWRkcy9yZW1vdmVzIGZpbGVzIGFuZCBtZXRhZGF0YS5cbiAqL1xuY2xhc3MgVXBweSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBnbG9iYWwtcmVxdWlyZVxuICBzdGF0aWMgVkVSU0lPTiA9IHJlcXVpcmUoJy4uL3BhY2thZ2UuanNvbicpLnZlcnNpb25cblxuICAvKiogQHR5cGUge1JlY29yZDxzdHJpbmcsIEJhc2VQbHVnaW5bXT59ICovXG4gICNwbHVnaW5zID0gT2JqZWN0LmNyZWF0ZShudWxsKVxuXG4gICNzdG9yZVVuc3Vic2NyaWJlXG5cbiAgI2VtaXR0ZXIgPSBlZSgpXG5cbiAgI3ByZVByb2Nlc3NvcnMgPSBuZXcgU2V0KClcblxuICAjdXBsb2FkZXJzID0gbmV3IFNldCgpXG5cbiAgI3Bvc3RQcm9jZXNzb3JzID0gbmV3IFNldCgpXG5cbiAgLyoqXG4gICAqIEluc3RhbnRpYXRlIFVwcHlcbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IG9wdHMg4oCUIFVwcHkgb3B0aW9uc1xuICAgKi9cbiAgY29uc3RydWN0b3IgKG9wdHMpIHtcbiAgICB0aGlzLmRlZmF1bHRMb2NhbGUgPSBsb2NhbGVcblxuICAgIGNvbnN0IGRlZmF1bHRPcHRpb25zID0ge1xuICAgICAgaWQ6ICd1cHB5JyxcbiAgICAgIGF1dG9Qcm9jZWVkOiBmYWxzZSxcbiAgICAgIC8qKlxuICAgICAgICogQGRlcHJlY2F0ZWQgVGhlIG1ldGhvZCBzaG91bGQgbm90IGJlIHVzZWRcbiAgICAgICAqL1xuICAgICAgYWxsb3dNdWx0aXBsZVVwbG9hZHM6IHRydWUsXG4gICAgICBhbGxvd011bHRpcGxlVXBsb2FkQmF0Y2hlczogdHJ1ZSxcbiAgICAgIGRlYnVnOiBmYWxzZSxcbiAgICAgIHJlc3RyaWN0aW9uczoge1xuICAgICAgICBtYXhGaWxlU2l6ZTogbnVsbCxcbiAgICAgICAgbWluRmlsZVNpemU6IG51bGwsXG4gICAgICAgIG1heFRvdGFsRmlsZVNpemU6IG51bGwsXG4gICAgICAgIG1heE51bWJlck9mRmlsZXM6IG51bGwsXG4gICAgICAgIG1pbk51bWJlck9mRmlsZXM6IG51bGwsXG4gICAgICAgIGFsbG93ZWRGaWxlVHlwZXM6IG51bGwsXG4gICAgICAgIHJlcXVpcmVkTWV0YUZpZWxkczogW10sXG4gICAgICB9LFxuICAgICAgbWV0YToge30sXG4gICAgICBvbkJlZm9yZUZpbGVBZGRlZDogKGN1cnJlbnRGaWxlKSA9PiBjdXJyZW50RmlsZSxcbiAgICAgIG9uQmVmb3JlVXBsb2FkOiAoZmlsZXMpID0+IGZpbGVzLFxuICAgICAgc3RvcmU6IERlZmF1bHRTdG9yZSgpLFxuICAgICAgbG9nZ2VyOiBqdXN0RXJyb3JzTG9nZ2VyLFxuICAgICAgaW5mb1RpbWVvdXQ6IDUwMDAsXG4gICAgfVxuXG4gICAgLy8gTWVyZ2UgZGVmYXVsdCBvcHRpb25zIHdpdGggdGhlIG9uZXMgc2V0IGJ5IHVzZXIsXG4gICAgLy8gbWFraW5nIHN1cmUgdG8gbWVyZ2UgcmVzdHJpY3Rpb25zIHRvb1xuICAgIHRoaXMub3B0cyA9IHtcbiAgICAgIC4uLmRlZmF1bHRPcHRpb25zLFxuICAgICAgLi4ub3B0cyxcbiAgICAgIHJlc3RyaWN0aW9uczoge1xuICAgICAgICAuLi5kZWZhdWx0T3B0aW9ucy5yZXN0cmljdGlvbnMsXG4gICAgICAgIC4uLihvcHRzICYmIG9wdHMucmVzdHJpY3Rpb25zKSxcbiAgICAgIH0sXG4gICAgfVxuXG4gICAgLy8gU3VwcG9ydCBkZWJ1ZzogdHJ1ZSBmb3IgYmFja3dhcmRzLWNvbXBhdGFiaWxpdHksIHVubGVzcyBsb2dnZXIgaXMgc2V0IGluIG9wdHNcbiAgICAvLyBvcHRzIGluc3RlYWQgb2YgdGhpcy5vcHRzIHRvIGF2b2lkIGNvbXBhcmluZyBvYmplY3RzIOKAlCB3ZSBzZXQgbG9nZ2VyOiBqdXN0RXJyb3JzTG9nZ2VyIGluIGRlZmF1bHRPcHRpb25zXG4gICAgaWYgKG9wdHMgJiYgb3B0cy5sb2dnZXIgJiYgb3B0cy5kZWJ1Zykge1xuICAgICAgdGhpcy5sb2coJ1lvdSBhcmUgdXNpbmcgYSBjdXN0b20gYGxvZ2dlcmAsIGJ1dCBhbHNvIHNldCBgZGVidWc6IHRydWVgLCB3aGljaCB1c2VzIGJ1aWx0LWluIGxvZ2dlciB0byBvdXRwdXQgbG9ncyB0byBjb25zb2xlLiBJZ25vcmluZyBgZGVidWc6IHRydWVgIGFuZCB1c2luZyB5b3VyIGN1c3RvbSBgbG9nZ2VyYC4nLCAnd2FybmluZycpXG4gICAgfSBlbHNlIGlmIChvcHRzICYmIG9wdHMuZGVidWcpIHtcbiAgICAgIHRoaXMub3B0cy5sb2dnZXIgPSBkZWJ1Z0xvZ2dlclxuICAgIH1cblxuICAgIHRoaXMubG9nKGBVc2luZyBDb3JlIHYke3RoaXMuY29uc3RydWN0b3IuVkVSU0lPTn1gKVxuXG4gICAgaWYgKHRoaXMub3B0cy5yZXN0cmljdGlvbnMuYWxsb3dlZEZpbGVUeXBlc1xuICAgICAgICAmJiB0aGlzLm9wdHMucmVzdHJpY3Rpb25zLmFsbG93ZWRGaWxlVHlwZXMgIT09IG51bGxcbiAgICAgICAgJiYgIUFycmF5LmlzQXJyYXkodGhpcy5vcHRzLnJlc3RyaWN0aW9ucy5hbGxvd2VkRmlsZVR5cGVzKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYHJlc3RyaWN0aW9ucy5hbGxvd2VkRmlsZVR5cGVzYCBtdXN0IGJlIGFuIGFycmF5JylcbiAgICB9XG5cbiAgICB0aGlzLmkxOG5Jbml0KClcblxuICAgIC8vIF9fX1doeSB0aHJvdHRsZSBhdCA1MDBtcz9cbiAgICAvLyAgICAtIFdlIG11c3QgdGhyb3R0bGUgYXQgPjI1MG1zIGZvciBzdXBlcmZvY3VzIGluIERhc2hib2FyZCB0byB3b3JrIHdlbGxcbiAgICAvLyAgICAoYmVjYXVzZSBhbmltYXRpb24gdGFrZXMgMC4yNXMsIGFuZCB3ZSB3YW50IHRvIHdhaXQgZm9yIGFsbCBhbmltYXRpb25zIHRvIGJlIG92ZXIgYmVmb3JlIHJlZm9jdXNpbmcpLlxuICAgIC8vICAgIFtQcmFjdGljYWwgQ2hlY2tdOiBpZiB0aG90dGxlIGlzIGF0IDEwMG1zLCB0aGVuIGlmIHlvdSBhcmUgdXBsb2FkaW5nIGEgZmlsZSxcbiAgICAvLyAgICBhbmQgY2xpY2sgJ0FERCBNT1JFIEZJTEVTJywgLSBmb2N1cyB3b24ndCBhY3RpdmF0ZSBpbiBGaXJlZm94LlxuICAgIC8vICAgIC0gV2UgbXVzdCB0aHJvdHRsZSBhdCBhcm91bmQgPjUwMG1zIHRvIGF2b2lkIHBlcmZvcm1hbmNlIGxhZ3MuXG4gICAgLy8gICAgW1ByYWN0aWNhbCBDaGVja10gRmlyZWZveCwgdHJ5IHRvIHVwbG9hZCBhIGJpZyBmaWxlIGZvciBhIHByb2xvbmdlZCBwZXJpb2Qgb2YgdGltZS4gTGFwdG9wIHdpbGwgc3RhcnQgdG8gaGVhdCB1cC5cbiAgICB0aGlzLmNhbGN1bGF0ZVByb2dyZXNzID0gdGhyb3R0bGUodGhpcy5jYWxjdWxhdGVQcm9ncmVzcy5iaW5kKHRoaXMpLCA1MDAsIHsgbGVhZGluZzogdHJ1ZSwgdHJhaWxpbmc6IHRydWUgfSlcblxuICAgIHRoaXMuc3RvcmUgPSB0aGlzLm9wdHMuc3RvcmVcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIHBsdWdpbnM6IHt9LFxuICAgICAgZmlsZXM6IHt9LFxuICAgICAgY3VycmVudFVwbG9hZHM6IHt9LFxuICAgICAgYWxsb3dOZXdVcGxvYWQ6IHRydWUsXG4gICAgICBjYXBhYmlsaXRpZXM6IHtcbiAgICAgICAgdXBsb2FkUHJvZ3Jlc3M6IHN1cHBvcnRzVXBsb2FkUHJvZ3Jlc3MoKSxcbiAgICAgICAgaW5kaXZpZHVhbENhbmNlbGxhdGlvbjogdHJ1ZSxcbiAgICAgICAgcmVzdW1hYmxlVXBsb2FkczogZmFsc2UsXG4gICAgICB9LFxuICAgICAgdG90YWxQcm9ncmVzczogMCxcbiAgICAgIG1ldGE6IHsgLi4udGhpcy5vcHRzLm1ldGEgfSxcbiAgICAgIGluZm86IFtdLFxuICAgICAgcmVjb3ZlcmVkU3RhdGU6IG51bGwsXG4gICAgfSlcblxuICAgIHRoaXMuI3N0b3JlVW5zdWJzY3JpYmUgPSB0aGlzLnN0b3JlLnN1YnNjcmliZSgocHJldlN0YXRlLCBuZXh0U3RhdGUsIHBhdGNoKSA9PiB7XG4gICAgICB0aGlzLmVtaXQoJ3N0YXRlLXVwZGF0ZScsIHByZXZTdGF0ZSwgbmV4dFN0YXRlLCBwYXRjaClcbiAgICAgIHRoaXMudXBkYXRlQWxsKG5leHRTdGF0ZSlcbiAgICB9KVxuXG4gICAgLy8gRXhwb3NpbmcgdXBweSBvYmplY3Qgb24gd2luZG93IGZvciBkZWJ1Z2dpbmcgYW5kIHRlc3RpbmdcbiAgICBpZiAodGhpcy5vcHRzLmRlYnVnICYmIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB3aW5kb3dbdGhpcy5vcHRzLmlkXSA9IHRoaXNcbiAgICB9XG5cbiAgICB0aGlzLiNhZGRMaXN0ZW5lcnMoKVxuICB9XG5cbiAgZW1pdCAoZXZlbnQsIC4uLmFyZ3MpIHtcbiAgICB0aGlzLiNlbWl0dGVyLmVtaXQoZXZlbnQsIC4uLmFyZ3MpXG4gIH1cblxuICBvbiAoZXZlbnQsIGNhbGxiYWNrKSB7XG4gICAgdGhpcy4jZW1pdHRlci5vbihldmVudCwgY2FsbGJhY2spXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIG9uY2UgKGV2ZW50LCBjYWxsYmFjaykge1xuICAgIHRoaXMuI2VtaXR0ZXIub25jZShldmVudCwgY2FsbGJhY2spXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIG9mZiAoZXZlbnQsIGNhbGxiYWNrKSB7XG4gICAgdGhpcy4jZW1pdHRlci5vZmYoZXZlbnQsIGNhbGxiYWNrKVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAvKipcbiAgICogSXRlcmF0ZSBvbiBhbGwgcGx1Z2lucyBhbmQgcnVuIGB1cGRhdGVgIG9uIHRoZW0uXG4gICAqIENhbGxlZCBlYWNoIHRpbWUgc3RhdGUgY2hhbmdlcy5cbiAgICpcbiAgICovXG4gIHVwZGF0ZUFsbCAoc3RhdGUpIHtcbiAgICB0aGlzLml0ZXJhdGVQbHVnaW5zKHBsdWdpbiA9PiB7XG4gICAgICBwbHVnaW4udXBkYXRlKHN0YXRlKVxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlcyBzdGF0ZSB3aXRoIGEgcGF0Y2hcbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IHBhdGNoIHtmb286ICdiYXInfVxuICAgKi9cbiAgc2V0U3RhdGUgKHBhdGNoKSB7XG4gICAgdGhpcy5zdG9yZS5zZXRTdGF0ZShwYXRjaClcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGN1cnJlbnQgc3RhdGUuXG4gICAqXG4gICAqIEByZXR1cm5zIHtvYmplY3R9XG4gICAqL1xuICBnZXRTdGF0ZSAoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RvcmUuZ2V0U3RhdGUoKVxuICB9XG5cbiAgLyoqXG4gICAqIEJhY2sgY29tcGF0IGZvciB3aGVuIHVwcHkuc3RhdGUgaXMgdXNlZCBpbnN0ZWFkIG9mIHVwcHkuZ2V0U3RhdGUoKS5cbiAgICpcbiAgICogQGRlcHJlY2F0ZWRcbiAgICovXG4gIGdldCBzdGF0ZSAoKSB7XG4gICAgLy8gSGVyZSwgc3RhdGUgaXMgYSBub24tZW51bWVyYWJsZSBwcm9wZXJ0eS5cbiAgICByZXR1cm4gdGhpcy5nZXRTdGF0ZSgpXG4gIH1cblxuICAvKipcbiAgICogU2hvcnRoYW5kIHRvIHNldCBzdGF0ZSBmb3IgYSBzcGVjaWZpYyBmaWxlLlxuICAgKi9cbiAgc2V0RmlsZVN0YXRlIChmaWxlSUQsIHN0YXRlKSB7XG4gICAgaWYgKCF0aGlzLmdldFN0YXRlKCkuZmlsZXNbZmlsZUlEXSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW7igJl0IHNldCBzdGF0ZSBmb3IgJHtmaWxlSUR9ICh0aGUgZmlsZSBjb3VsZCBoYXZlIGJlZW4gcmVtb3ZlZClgKVxuICAgIH1cblxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgZmlsZXM6IHsgLi4udGhpcy5nZXRTdGF0ZSgpLmZpbGVzLCBbZmlsZUlEXTogeyAuLi50aGlzLmdldFN0YXRlKCkuZmlsZXNbZmlsZUlEXSwgLi4uc3RhdGUgfSB9LFxuICAgIH0pXG4gIH1cblxuICBpMThuSW5pdCAoKSB7XG4gICAgY29uc3QgdHJhbnNsYXRvciA9IG5ldyBUcmFuc2xhdG9yKFt0aGlzLmRlZmF1bHRMb2NhbGUsIHRoaXMub3B0cy5sb2NhbGVdKVxuICAgIHRoaXMuaTE4biA9IHRyYW5zbGF0b3IudHJhbnNsYXRlLmJpbmQodHJhbnNsYXRvcilcbiAgICB0aGlzLmkxOG5BcnJheSA9IHRyYW5zbGF0b3IudHJhbnNsYXRlQXJyYXkuYmluZCh0cmFuc2xhdG9yKVxuICAgIHRoaXMubG9jYWxlID0gdHJhbnNsYXRvci5sb2NhbGVcbiAgfVxuXG4gIHNldE9wdGlvbnMgKG5ld09wdHMpIHtcbiAgICB0aGlzLm9wdHMgPSB7XG4gICAgICAuLi50aGlzLm9wdHMsXG4gICAgICAuLi5uZXdPcHRzLFxuICAgICAgcmVzdHJpY3Rpb25zOiB7XG4gICAgICAgIC4uLnRoaXMub3B0cy5yZXN0cmljdGlvbnMsXG4gICAgICAgIC4uLihuZXdPcHRzICYmIG5ld09wdHMucmVzdHJpY3Rpb25zKSxcbiAgICAgIH0sXG4gICAgfVxuXG4gICAgaWYgKG5ld09wdHMubWV0YSkge1xuICAgICAgdGhpcy5zZXRNZXRhKG5ld09wdHMubWV0YSlcbiAgICB9XG5cbiAgICB0aGlzLmkxOG5Jbml0KClcblxuICAgIGlmIChuZXdPcHRzLmxvY2FsZSkge1xuICAgICAgdGhpcy5pdGVyYXRlUGx1Z2lucygocGx1Z2luKSA9PiB7XG4gICAgICAgIHBsdWdpbi5zZXRPcHRpb25zKClcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgLy8gTm90ZTogdGhpcyBpcyBub3QgdGhlIHByZWFjdCBgc2V0U3RhdGVgLCBpdCdzIGFuIGludGVybmFsIGZ1bmN0aW9uIHRoYXQgaGFzIHRoZSBzYW1lIG5hbWUuXG4gICAgdGhpcy5zZXRTdGF0ZSgpIC8vIHNvIHRoYXQgVUkgcmUtcmVuZGVycyB3aXRoIG5ldyBvcHRpb25zXG4gIH1cblxuICByZXNldFByb2dyZXNzICgpIHtcbiAgICBjb25zdCBkZWZhdWx0UHJvZ3Jlc3MgPSB7XG4gICAgICBwZXJjZW50YWdlOiAwLFxuICAgICAgYnl0ZXNVcGxvYWRlZDogMCxcbiAgICAgIHVwbG9hZENvbXBsZXRlOiBmYWxzZSxcbiAgICAgIHVwbG9hZFN0YXJ0ZWQ6IG51bGwsXG4gICAgfVxuICAgIGNvbnN0IGZpbGVzID0geyAuLi50aGlzLmdldFN0YXRlKCkuZmlsZXMgfVxuICAgIGNvbnN0IHVwZGF0ZWRGaWxlcyA9IHt9XG4gICAgT2JqZWN0LmtleXMoZmlsZXMpLmZvckVhY2goZmlsZUlEID0+IHtcbiAgICAgIGNvbnN0IHVwZGF0ZWRGaWxlID0geyAuLi5maWxlc1tmaWxlSURdIH1cbiAgICAgIHVwZGF0ZWRGaWxlLnByb2dyZXNzID0geyAuLi51cGRhdGVkRmlsZS5wcm9ncmVzcywgLi4uZGVmYXVsdFByb2dyZXNzIH1cbiAgICAgIHVwZGF0ZWRGaWxlc1tmaWxlSURdID0gdXBkYXRlZEZpbGVcbiAgICB9KVxuXG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBmaWxlczogdXBkYXRlZEZpbGVzLFxuICAgICAgdG90YWxQcm9ncmVzczogMCxcbiAgICB9KVxuXG4gICAgdGhpcy5lbWl0KCdyZXNldC1wcm9ncmVzcycpXG4gIH1cblxuICBhZGRQcmVQcm9jZXNzb3IgKGZuKSB7XG4gICAgdGhpcy4jcHJlUHJvY2Vzc29ycy5hZGQoZm4pXG4gIH1cblxuICByZW1vdmVQcmVQcm9jZXNzb3IgKGZuKSB7XG4gICAgcmV0dXJuIHRoaXMuI3ByZVByb2Nlc3NvcnMuZGVsZXRlKGZuKVxuICB9XG5cbiAgYWRkUG9zdFByb2Nlc3NvciAoZm4pIHtcbiAgICB0aGlzLiNwb3N0UHJvY2Vzc29ycy5hZGQoZm4pXG4gIH1cblxuICByZW1vdmVQb3N0UHJvY2Vzc29yIChmbikge1xuICAgIHJldHVybiB0aGlzLiNwb3N0UHJvY2Vzc29ycy5kZWxldGUoZm4pXG4gIH1cblxuICBhZGRVcGxvYWRlciAoZm4pIHtcbiAgICB0aGlzLiN1cGxvYWRlcnMuYWRkKGZuKVxuICB9XG5cbiAgcmVtb3ZlVXBsb2FkZXIgKGZuKSB7XG4gICAgcmV0dXJuIHRoaXMuI3VwbG9hZGVycy5kZWxldGUoZm4pXG4gIH1cblxuICBzZXRNZXRhIChkYXRhKSB7XG4gICAgY29uc3QgdXBkYXRlZE1ldGEgPSB7IC4uLnRoaXMuZ2V0U3RhdGUoKS5tZXRhLCAuLi5kYXRhIH1cbiAgICBjb25zdCB1cGRhdGVkRmlsZXMgPSB7IC4uLnRoaXMuZ2V0U3RhdGUoKS5maWxlcyB9XG5cbiAgICBPYmplY3Qua2V5cyh1cGRhdGVkRmlsZXMpLmZvckVhY2goKGZpbGVJRCkgPT4ge1xuICAgICAgdXBkYXRlZEZpbGVzW2ZpbGVJRF0gPSB7IC4uLnVwZGF0ZWRGaWxlc1tmaWxlSURdLCBtZXRhOiB7IC4uLnVwZGF0ZWRGaWxlc1tmaWxlSURdLm1ldGEsIC4uLmRhdGEgfSB9XG4gICAgfSlcblxuICAgIHRoaXMubG9nKCdBZGRpbmcgbWV0YWRhdGE6JylcbiAgICB0aGlzLmxvZyhkYXRhKVxuXG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBtZXRhOiB1cGRhdGVkTWV0YSxcbiAgICAgIGZpbGVzOiB1cGRhdGVkRmlsZXMsXG4gICAgfSlcbiAgfVxuXG4gIHNldEZpbGVNZXRhIChmaWxlSUQsIGRhdGEpIHtcbiAgICBjb25zdCB1cGRhdGVkRmlsZXMgPSB7IC4uLnRoaXMuZ2V0U3RhdGUoKS5maWxlcyB9XG4gICAgaWYgKCF1cGRhdGVkRmlsZXNbZmlsZUlEXSkge1xuICAgICAgdGhpcy5sb2coJ1dhcyB0cnlpbmcgdG8gc2V0IG1ldGFkYXRhIGZvciBhIGZpbGUgdGhhdCBoYXMgYmVlbiByZW1vdmVkOiAnLCBmaWxlSUQpXG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgY29uc3QgbmV3TWV0YSA9IHsgLi4udXBkYXRlZEZpbGVzW2ZpbGVJRF0ubWV0YSwgLi4uZGF0YSB9XG4gICAgdXBkYXRlZEZpbGVzW2ZpbGVJRF0gPSB7IC4uLnVwZGF0ZWRGaWxlc1tmaWxlSURdLCBtZXRhOiBuZXdNZXRhIH1cbiAgICB0aGlzLnNldFN0YXRlKHsgZmlsZXM6IHVwZGF0ZWRGaWxlcyB9KVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCBhIGZpbGUgb2JqZWN0LlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZmlsZUlEIFRoZSBJRCBvZiB0aGUgZmlsZSBvYmplY3QgdG8gcmV0dXJuLlxuICAgKi9cbiAgZ2V0RmlsZSAoZmlsZUlEKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U3RhdGUoKS5maWxlc1tmaWxlSURdXG4gIH1cblxuICAvKipcbiAgICogR2V0IGFsbCBmaWxlcyBpbiBhbiBhcnJheS5cbiAgICovXG4gIGdldEZpbGVzICgpIHtcbiAgICBjb25zdCB7IGZpbGVzIH0gPSB0aGlzLmdldFN0YXRlKClcbiAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyhmaWxlcylcbiAgfVxuXG4gIGdldE9iamVjdE9mRmlsZXNQZXJTdGF0ZSAoKSB7XG4gICAgY29uc3QgeyBmaWxlczogZmlsZXNPYmplY3QsIHRvdGFsUHJvZ3Jlc3MsIGVycm9yIH0gPSB0aGlzLmdldFN0YXRlKClcbiAgICBjb25zdCBmaWxlcyA9IE9iamVjdC52YWx1ZXMoZmlsZXNPYmplY3QpXG4gICAgY29uc3QgaW5Qcm9ncmVzc0ZpbGVzID0gZmlsZXMuZmlsdGVyKCh7IHByb2dyZXNzIH0pID0+ICFwcm9ncmVzcy51cGxvYWRDb21wbGV0ZSAmJiBwcm9ncmVzcy51cGxvYWRTdGFydGVkKVxuICAgIGNvbnN0IG5ld0ZpbGVzID0gIGZpbGVzLmZpbHRlcigoZmlsZSkgPT4gIWZpbGUucHJvZ3Jlc3MudXBsb2FkU3RhcnRlZClcbiAgICBjb25zdCBzdGFydGVkRmlsZXMgPSBmaWxlcy5maWx0ZXIoXG4gICAgICBmaWxlID0+IGZpbGUucHJvZ3Jlc3MudXBsb2FkU3RhcnRlZCB8fCBmaWxlLnByb2dyZXNzLnByZXByb2Nlc3MgfHwgZmlsZS5wcm9ncmVzcy5wb3N0cHJvY2VzcyxcbiAgICApXG4gICAgY29uc3QgdXBsb2FkU3RhcnRlZEZpbGVzID0gZmlsZXMuZmlsdGVyKChmaWxlKSA9PiBmaWxlLnByb2dyZXNzLnVwbG9hZFN0YXJ0ZWQpXG4gICAgY29uc3QgcGF1c2VkRmlsZXMgPSBmaWxlcy5maWx0ZXIoKGZpbGUpID0+IGZpbGUuaXNQYXVzZWQpXG4gICAgY29uc3QgY29tcGxldGVGaWxlcyA9IGZpbGVzLmZpbHRlcigoZmlsZSkgPT4gZmlsZS5wcm9ncmVzcy51cGxvYWRDb21wbGV0ZSlcbiAgICBjb25zdCBlcnJvcmVkRmlsZXMgPSBmaWxlcy5maWx0ZXIoKGZpbGUpID0+IGZpbGUuZXJyb3IpXG4gICAgY29uc3QgaW5Qcm9ncmVzc05vdFBhdXNlZEZpbGVzID0gaW5Qcm9ncmVzc0ZpbGVzLmZpbHRlcigoZmlsZSkgPT4gIWZpbGUuaXNQYXVzZWQpXG4gICAgY29uc3QgcHJvY2Vzc2luZ0ZpbGVzID0gZmlsZXMuZmlsdGVyKChmaWxlKSA9PiBmaWxlLnByb2dyZXNzLnByZXByb2Nlc3MgfHwgZmlsZS5wcm9ncmVzcy5wb3N0cHJvY2VzcylcblxuICAgIHJldHVybiB7XG4gICAgICBuZXdGaWxlcyxcbiAgICAgIHN0YXJ0ZWRGaWxlcyxcbiAgICAgIHVwbG9hZFN0YXJ0ZWRGaWxlcyxcbiAgICAgIHBhdXNlZEZpbGVzLFxuICAgICAgY29tcGxldGVGaWxlcyxcbiAgICAgIGVycm9yZWRGaWxlcyxcbiAgICAgIGluUHJvZ3Jlc3NGaWxlcyxcbiAgICAgIGluUHJvZ3Jlc3NOb3RQYXVzZWRGaWxlcyxcbiAgICAgIHByb2Nlc3NpbmdGaWxlcyxcblxuICAgICAgaXNVcGxvYWRTdGFydGVkOiB1cGxvYWRTdGFydGVkRmlsZXMubGVuZ3RoID4gMCxcbiAgICAgIGlzQWxsQ29tcGxldGU6IHRvdGFsUHJvZ3Jlc3MgPT09IDEwMFxuICAgICAgICAmJiBjb21wbGV0ZUZpbGVzLmxlbmd0aCA9PT0gZmlsZXMubGVuZ3RoXG4gICAgICAgICYmIHByb2Nlc3NpbmdGaWxlcy5sZW5ndGggPT09IDAsXG4gICAgICBpc0FsbEVycm9yZWQ6ICEhZXJyb3IgJiYgZXJyb3JlZEZpbGVzLmxlbmd0aCA9PT0gZmlsZXMubGVuZ3RoLFxuICAgICAgaXNBbGxQYXVzZWQ6IGluUHJvZ3Jlc3NGaWxlcy5sZW5ndGggIT09IDAgJiYgcGF1c2VkRmlsZXMubGVuZ3RoID09PSBpblByb2dyZXNzRmlsZXMubGVuZ3RoLFxuICAgICAgaXNVcGxvYWRJblByb2dyZXNzOiBpblByb2dyZXNzRmlsZXMubGVuZ3RoID4gMCxcbiAgICAgIGlzU29tZUdob3N0OiBmaWxlcy5zb21lKGZpbGUgPT4gZmlsZS5pc0dob3N0KSxcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQSBwdWJsaWMgd3JhcHBlciBmb3IgX2NoZWNrUmVzdHJpY3Rpb25zIOKAlCBjaGVja3MgaWYgYSBmaWxlIHBhc3NlcyBhIHNldCBvZiByZXN0cmljdGlvbnMuXG4gICAqIEZvciB1c2UgaW4gVUkgcGx1aWdpbnMgKGxpa2UgUHJvdmlkZXJzKSwgdG8gZGlzYWxsb3cgc2VsZWN0aW5nIGZpbGVzIHRoYXQgd29u4oCZdCBwYXNzIHJlc3RyaWN0aW9ucy5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGZpbGUgb2JqZWN0IHRvIGNoZWNrXG4gICAqIEBwYXJhbSB7QXJyYXl9IFtmaWxlc10gYXJyYXkgdG8gY2hlY2sgbWF4TnVtYmVyT2ZGaWxlcyBhbmQgbWF4VG90YWxGaWxlU2l6ZVxuICAgKiBAcmV0dXJucyB7b2JqZWN0fSB7IHJlc3VsdDogdHJ1ZS9mYWxzZSwgcmVhc29uOiB3aHkgZmlsZSBkaWRu4oCZdCBwYXNzIHJlc3RyaWN0aW9ucyB9XG4gICAqL1xuICB2YWxpZGF0ZVJlc3RyaWN0aW9ucyAoZmlsZSwgZmlsZXMpIHtcbiAgICB0cnkge1xuICAgICAgdGhpcy4jY2hlY2tSZXN0cmljdGlvbnMoZmlsZSwgZmlsZXMpXG4gICAgICByZXR1cm4ge1xuICAgICAgICByZXN1bHQ6IHRydWUsXG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICByZXN1bHQ6IGZhbHNlLFxuICAgICAgICByZWFzb246IGVyci5tZXNzYWdlLFxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBmaWxlIHBhc3NlcyBhIHNldCBvZiByZXN0cmljdGlvbnMgc2V0IGluIG9wdGlvbnM6IG1heEZpbGVTaXplLCBtaW5GaWxlU2l6ZSxcbiAgICogbWF4TnVtYmVyT2ZGaWxlcyBhbmQgYWxsb3dlZEZpbGVUeXBlcy5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGZpbGUgb2JqZWN0IHRvIGNoZWNrXG4gICAqIEBwYXJhbSB7QXJyYXl9IFtmaWxlc10gYXJyYXkgdG8gY2hlY2sgbWF4TnVtYmVyT2ZGaWxlcyBhbmQgbWF4VG90YWxGaWxlU2l6ZVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgI2NoZWNrUmVzdHJpY3Rpb25zIChmaWxlLCBmaWxlcyA9IHRoaXMuZ2V0RmlsZXMoKSkge1xuICAgIGNvbnN0IHsgbWF4RmlsZVNpemUsIG1pbkZpbGVTaXplLCBtYXhUb3RhbEZpbGVTaXplLCBtYXhOdW1iZXJPZkZpbGVzLCBhbGxvd2VkRmlsZVR5cGVzIH0gPSB0aGlzLm9wdHMucmVzdHJpY3Rpb25zXG5cbiAgICBpZiAobWF4TnVtYmVyT2ZGaWxlcykge1xuICAgICAgaWYgKGZpbGVzLmxlbmd0aCArIDEgPiBtYXhOdW1iZXJPZkZpbGVzKSB7XG4gICAgICAgIHRocm93IG5ldyBSZXN0cmljdGlvbkVycm9yKGAke3RoaXMuaTE4bigneW91Q2FuT25seVVwbG9hZFgnLCB7IHNtYXJ0X2NvdW50OiBtYXhOdW1iZXJPZkZpbGVzIH0pfWApXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGFsbG93ZWRGaWxlVHlwZXMpIHtcbiAgICAgIGNvbnN0IGlzQ29ycmVjdEZpbGVUeXBlID0gYWxsb3dlZEZpbGVUeXBlcy5zb21lKCh0eXBlKSA9PiB7XG4gICAgICAgIC8vIGNoZWNrIGlmIHRoaXMgaXMgYSBtaW1lLXR5cGVcbiAgICAgICAgaWYgKHR5cGUuaW5kZXhPZignLycpID4gLTEpIHtcbiAgICAgICAgICBpZiAoIWZpbGUudHlwZSkgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgcmV0dXJuIG1hdGNoKGZpbGUudHlwZS5yZXBsYWNlKC87Lio/JC8sICcnKSwgdHlwZSlcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIG90aGVyd2lzZSB0aGlzIGlzIGxpa2VseSBhbiBleHRlbnNpb25cbiAgICAgICAgaWYgKHR5cGVbMF0gPT09ICcuJyAmJiBmaWxlLmV4dGVuc2lvbikge1xuICAgICAgICAgIHJldHVybiBmaWxlLmV4dGVuc2lvbi50b0xvd2VyQ2FzZSgpID09PSB0eXBlLnN1YnN0cigxKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9KVxuXG4gICAgICBpZiAoIWlzQ29ycmVjdEZpbGVUeXBlKSB7XG4gICAgICAgIGNvbnN0IGFsbG93ZWRGaWxlVHlwZXNTdHJpbmcgPSBhbGxvd2VkRmlsZVR5cGVzLmpvaW4oJywgJylcbiAgICAgICAgdGhyb3cgbmV3IFJlc3RyaWN0aW9uRXJyb3IodGhpcy5pMThuKCd5b3VDYW5Pbmx5VXBsb2FkRmlsZVR5cGVzJywgeyB0eXBlczogYWxsb3dlZEZpbGVUeXBlc1N0cmluZyB9KSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBXZSBjYW4ndCBjaGVjayBtYXhUb3RhbEZpbGVTaXplIGlmIHRoZSBzaXplIGlzIHVua25vd24uXG4gICAgaWYgKG1heFRvdGFsRmlsZVNpemUgJiYgZmlsZS5zaXplICE9IG51bGwpIHtcbiAgICAgIGxldCB0b3RhbEZpbGVzU2l6ZSA9IDBcbiAgICAgIHRvdGFsRmlsZXNTaXplICs9IGZpbGUuc2l6ZVxuICAgICAgZmlsZXMuZm9yRWFjaCgoZikgPT4ge1xuICAgICAgICB0b3RhbEZpbGVzU2l6ZSArPSBmLnNpemVcbiAgICAgIH0pXG4gICAgICBpZiAodG90YWxGaWxlc1NpemUgPiBtYXhUb3RhbEZpbGVTaXplKSB7XG4gICAgICAgIHRocm93IG5ldyBSZXN0cmljdGlvbkVycm9yKHRoaXMuaTE4bignZXhjZWVkc1NpemUnLCB7XG4gICAgICAgICAgc2l6ZTogcHJldHRpZXJCeXRlcyhtYXhUb3RhbEZpbGVTaXplKSxcbiAgICAgICAgICBmaWxlOiBmaWxlLm5hbWUsXG4gICAgICAgIH0pKVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFdlIGNhbid0IGNoZWNrIG1heEZpbGVTaXplIGlmIHRoZSBzaXplIGlzIHVua25vd24uXG4gICAgaWYgKG1heEZpbGVTaXplICYmIGZpbGUuc2l6ZSAhPSBudWxsKSB7XG4gICAgICBpZiAoZmlsZS5zaXplID4gbWF4RmlsZVNpemUpIHtcbiAgICAgICAgdGhyb3cgbmV3IFJlc3RyaWN0aW9uRXJyb3IodGhpcy5pMThuKCdleGNlZWRzU2l6ZScsIHtcbiAgICAgICAgICBzaXplOiBwcmV0dGllckJ5dGVzKG1heEZpbGVTaXplKSxcbiAgICAgICAgICBmaWxlOiBmaWxlLm5hbWUsXG4gICAgICAgIH0pKVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFdlIGNhbid0IGNoZWNrIG1pbkZpbGVTaXplIGlmIHRoZSBzaXplIGlzIHVua25vd24uXG4gICAgaWYgKG1pbkZpbGVTaXplICYmIGZpbGUuc2l6ZSAhPSBudWxsKSB7XG4gICAgICBpZiAoZmlsZS5zaXplIDwgbWluRmlsZVNpemUpIHtcbiAgICAgICAgdGhyb3cgbmV3IFJlc3RyaWN0aW9uRXJyb3IodGhpcy5pMThuKCdpbmZlcmlvclNpemUnLCB7XG4gICAgICAgICAgc2l6ZTogcHJldHRpZXJCeXRlcyhtaW5GaWxlU2l6ZSksXG4gICAgICAgIH0pKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBtaW5OdW1iZXJPZkZpbGVzIHJlc3RyaWN0aW9uIGlzIHJlYWNoZWQgYmVmb3JlIHVwbG9hZGluZy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gICNjaGVja01pbk51bWJlck9mRmlsZXMgKGZpbGVzKSB7XG4gICAgY29uc3QgeyBtaW5OdW1iZXJPZkZpbGVzIH0gPSB0aGlzLm9wdHMucmVzdHJpY3Rpb25zXG4gICAgaWYgKE9iamVjdC5rZXlzKGZpbGVzKS5sZW5ndGggPCBtaW5OdW1iZXJPZkZpbGVzKSB7XG4gICAgICB0aHJvdyBuZXcgUmVzdHJpY3Rpb25FcnJvcihgJHt0aGlzLmkxOG4oJ3lvdUhhdmVUb0F0TGVhc3RTZWxlY3RYJywgeyBzbWFydF9jb3VudDogbWluTnVtYmVyT2ZGaWxlcyB9KX1gKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiByZXF1aXJlZE1ldGFGaWVsZCByZXN0cmljdGlvbiBpcyBtZXQgZm9yIGEgc3BlY2lmaWMgZmlsZS5cbiAgICpcbiAgICovXG4gICNjaGVja1JlcXVpcmVkTWV0YUZpZWxkc09uRmlsZSAoZmlsZSkge1xuICAgIGNvbnN0IHsgcmVxdWlyZWRNZXRhRmllbGRzIH0gPSB0aGlzLm9wdHMucmVzdHJpY3Rpb25zXG4gICAgY29uc3QgeyBoYXNPd25Qcm9wZXJ0eSB9ID0gT2JqZWN0LnByb3RvdHlwZVxuXG4gICAgY29uc3QgZXJyb3JzID0gW11cbiAgICBjb25zdCBtaXNzaW5nRmllbGRzID0gW11cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlcXVpcmVkTWV0YUZpZWxkcy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKCFoYXNPd25Qcm9wZXJ0eS5jYWxsKGZpbGUubWV0YSwgcmVxdWlyZWRNZXRhRmllbGRzW2ldKSB8fCBmaWxlLm1ldGFbcmVxdWlyZWRNZXRhRmllbGRzW2ldXSA9PT0gJycpIHtcbiAgICAgICAgY29uc3QgZXJyID0gbmV3IFJlc3RyaWN0aW9uRXJyb3IoYCR7dGhpcy5pMThuKCdtaXNzaW5nUmVxdWlyZWRNZXRhRmllbGRPbkZpbGUnLCB7IGZpbGVOYW1lOiBmaWxlLm5hbWUgfSl9YClcbiAgICAgICAgZXJyb3JzLnB1c2goZXJyKVxuICAgICAgICBtaXNzaW5nRmllbGRzLnB1c2gocmVxdWlyZWRNZXRhRmllbGRzW2ldKVxuICAgICAgICB0aGlzLiNzaG93T3JMb2dFcnJvckFuZFRocm93KGVyciwgeyBmaWxlLCBzaG93SW5mb3JtZXI6IGZhbHNlLCB0aHJvd0VycjogZmFsc2UgfSlcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5zZXRGaWxlU3RhdGUoZmlsZS5pZCwgeyBtaXNzaW5nUmVxdWlyZWRNZXRhRmllbGRzOiBtaXNzaW5nRmllbGRzIH0pXG4gICAgcmV0dXJuIGVycm9yc1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIHJlcXVpcmVkTWV0YUZpZWxkIHJlc3RyaWN0aW9uIGlzIG1ldCBiZWZvcmUgdXBsb2FkaW5nLlxuICAgKlxuICAgKi9cbiAgI2NoZWNrUmVxdWlyZWRNZXRhRmllbGRzIChmaWxlcykge1xuICAgIGNvbnN0IGVycm9ycyA9IE9iamVjdC5rZXlzKGZpbGVzKS5mbGF0TWFwKChmaWxlSUQpID0+IHtcbiAgICAgIGNvbnN0IGZpbGUgPSB0aGlzLmdldEZpbGUoZmlsZUlEKVxuICAgICAgcmV0dXJuIHRoaXMuI2NoZWNrUmVxdWlyZWRNZXRhRmllbGRzT25GaWxlKGZpbGUpXG4gICAgfSlcblxuICAgIGlmIChlcnJvcnMubGVuZ3RoKSB7XG4gICAgICB0aHJvdyBuZXcgQWdncmVnYXRlUmVzdHJpY3Rpb25FcnJvcihlcnJvcnMsIGAke3RoaXMuaTE4bignbWlzc2luZ1JlcXVpcmVkTWV0YUZpZWxkJyl9YClcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogTG9ncyBhbiBlcnJvciwgc2V0cyBJbmZvcm1lciBtZXNzYWdlLCB0aGVuIHRocm93cyB0aGUgZXJyb3IuXG4gICAqIEVtaXRzIGEgJ3Jlc3RyaWN0aW9uLWZhaWxlZCcgZXZlbnQgaWYgaXTigJlzIGEgcmVzdHJpY3Rpb24gZXJyb3JcbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3QgfCBzdHJpbmd9IGVyciDigJQgRXJyb3Igb2JqZWN0IG9yIHBsYWluIHN0cmluZyBtZXNzYWdlXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc11cbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5zaG93SW5mb3JtZXI9dHJ1ZV0g4oCUIFNvbWV0aW1lcyBkZXZlbG9wZXIgbWlnaHQgd2FudCB0byBzaG93IEluZm9ybWVyIG1hbnVhbGx5XG4gICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9ucy5maWxlPW51bGxdIOKAlCBGaWxlIG9iamVjdCB1c2VkIHRvIGVtaXQgdGhlIHJlc3RyaWN0aW9uIGVycm9yXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMudGhyb3dFcnI9dHJ1ZV0g4oCUIEVycm9ycyBzaG91bGRu4oCZdCBiZSB0aHJvd24sIGZvciBleGFtcGxlLCBpbiBgdXBsb2FkLWVycm9yYCBldmVudFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgI3Nob3dPckxvZ0Vycm9yQW5kVGhyb3cgKGVyciwgeyBzaG93SW5mb3JtZXIgPSB0cnVlLCBmaWxlID0gbnVsbCwgdGhyb3dFcnIgPSB0cnVlIH0gPSB7fSkge1xuICAgIGNvbnN0IG1lc3NhZ2UgPSB0eXBlb2YgZXJyID09PSAnb2JqZWN0JyA/IGVyci5tZXNzYWdlIDogZXJyXG4gICAgY29uc3QgZGV0YWlscyA9ICh0eXBlb2YgZXJyID09PSAnb2JqZWN0JyAmJiBlcnIuZGV0YWlscykgPyBlcnIuZGV0YWlscyA6ICcnXG5cbiAgICAvLyBSZXN0cmljdGlvbiBlcnJvcnMgc2hvdWxkIGJlIGxvZ2dlZCwgYnV0IG5vdCBhcyBlcnJvcnMsXG4gICAgLy8gYXMgdGhleSBhcmUgZXhwZWN0ZWQgYW5kIHNob3duIGluIHRoZSBVSS5cbiAgICBsZXQgbG9nTWVzc2FnZVdpdGhEZXRhaWxzID0gbWVzc2FnZVxuICAgIGlmIChkZXRhaWxzKSB7XG4gICAgICBsb2dNZXNzYWdlV2l0aERldGFpbHMgKz0gYCAke2RldGFpbHN9YFxuICAgIH1cbiAgICBpZiAoZXJyLmlzUmVzdHJpY3Rpb24pIHtcbiAgICAgIHRoaXMubG9nKGxvZ01lc3NhZ2VXaXRoRGV0YWlscylcbiAgICAgIHRoaXMuZW1pdCgncmVzdHJpY3Rpb24tZmFpbGVkJywgZmlsZSwgZXJyKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmxvZyhsb2dNZXNzYWdlV2l0aERldGFpbHMsICdlcnJvcicpXG4gICAgfVxuXG4gICAgLy8gU29tZXRpbWVzIGluZm9ybWVyIGhhcyB0byBiZSBzaG93biBtYW51YWxseSBieSB0aGUgZGV2ZWxvcGVyLFxuICAgIC8vIGZvciBleGFtcGxlLCBpbiBgb25CZWZvcmVGaWxlQWRkZWRgLlxuICAgIGlmIChzaG93SW5mb3JtZXIpIHtcbiAgICAgIHRoaXMuaW5mbyh7IG1lc3NhZ2UsIGRldGFpbHMgfSwgJ2Vycm9yJywgdGhpcy5vcHRzLmluZm9UaW1lb3V0KVxuICAgIH1cblxuICAgIGlmICh0aHJvd0Vycikge1xuICAgICAgdGhyb3cgKHR5cGVvZiBlcnIgPT09ICdvYmplY3QnID8gZXJyIDogbmV3IEVycm9yKGVycikpXG4gICAgfVxuICB9XG5cbiAgI2Fzc2VydE5ld1VwbG9hZEFsbG93ZWQgKGZpbGUpIHtcbiAgICBjb25zdCB7IGFsbG93TmV3VXBsb2FkIH0gPSB0aGlzLmdldFN0YXRlKClcblxuICAgIGlmIChhbGxvd05ld1VwbG9hZCA9PT0gZmFsc2UpIHtcbiAgICAgIHRoaXMuI3Nob3dPckxvZ0Vycm9yQW5kVGhyb3cobmV3IFJlc3RyaWN0aW9uRXJyb3IodGhpcy5pMThuKCdub01vcmVGaWxlc0FsbG93ZWQnKSksIHsgZmlsZSB9KVxuICAgIH1cbiAgfVxuXG4gIGNoZWNrSWZGaWxlQWxyZWFkeUV4aXN0cyAoZmlsZUlEKSB7XG4gICAgY29uc3QgeyBmaWxlcyB9ID0gdGhpcy5nZXRTdGF0ZSgpXG5cbiAgICBpZiAoZmlsZXNbZmlsZUlEXSAmJiAhZmlsZXNbZmlsZUlEXS5pc0dob3N0KSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBmaWxlIHN0YXRlIG9iamVjdCBiYXNlZCBvbiB1c2VyLXByb3ZpZGVkIGBhZGRGaWxlKClgIG9wdGlvbnMuXG4gICAqXG4gICAqIE5vdGUgdGhpcyBpcyBleHRyZW1lbHkgc2lkZS1lZmZlY3RmdWwgYW5kIHNob3VsZCBvbmx5IGJlIGRvbmUgd2hlbiBhIGZpbGUgc3RhdGUgb2JqZWN0XG4gICAqIHdpbGwgYmUgYWRkZWQgdG8gc3RhdGUgaW1tZWRpYXRlbHkgYWZ0ZXJ3YXJkIVxuICAgKlxuICAgKiBUaGUgYGZpbGVzYCB2YWx1ZSBpcyBwYXNzZWQgaW4gYmVjYXVzZSBpdCBtYXkgYmUgdXBkYXRlZCBieSB0aGUgY2FsbGVyIHdpdGhvdXQgdXBkYXRpbmcgdGhlIHN0b3JlLlxuICAgKi9cbiAgI2NoZWNrQW5kQ3JlYXRlRmlsZVN0YXRlT2JqZWN0IChmaWxlcywgZmlsZURlc2NyaXB0b3IpIHtcbiAgICBjb25zdCBmaWxlVHlwZSA9IGdldEZpbGVUeXBlKGZpbGVEZXNjcmlwdG9yKVxuICAgIGNvbnN0IGZpbGVOYW1lID0gZ2V0RmlsZU5hbWUoZmlsZVR5cGUsIGZpbGVEZXNjcmlwdG9yKVxuICAgIGNvbnN0IGZpbGVFeHRlbnNpb24gPSBnZXRGaWxlTmFtZUFuZEV4dGVuc2lvbihmaWxlTmFtZSkuZXh0ZW5zaW9uXG4gICAgY29uc3QgaXNSZW1vdGUgPSBCb29sZWFuKGZpbGVEZXNjcmlwdG9yLmlzUmVtb3RlKVxuICAgIGNvbnN0IGZpbGVJRCA9IGdlbmVyYXRlRmlsZUlEKHtcbiAgICAgIC4uLmZpbGVEZXNjcmlwdG9yLFxuICAgICAgdHlwZTogZmlsZVR5cGUsXG4gICAgfSlcblxuICAgIGlmICh0aGlzLmNoZWNrSWZGaWxlQWxyZWFkeUV4aXN0cyhmaWxlSUQpKSB7XG4gICAgICBjb25zdCBlcnJvciA9IG5ldyBSZXN0cmljdGlvbkVycm9yKHRoaXMuaTE4bignbm9EdXBsaWNhdGVzJywgeyBmaWxlTmFtZSB9KSlcbiAgICAgIHRoaXMuI3Nob3dPckxvZ0Vycm9yQW5kVGhyb3coZXJyb3IsIHsgZmlsZTogZmlsZURlc2NyaXB0b3IgfSlcbiAgICB9XG5cbiAgICBjb25zdCBtZXRhID0gZmlsZURlc2NyaXB0b3IubWV0YSB8fCB7fVxuICAgIG1ldGEubmFtZSA9IGZpbGVOYW1lXG4gICAgbWV0YS50eXBlID0gZmlsZVR5cGVcblxuICAgIC8vIGBudWxsYCBtZWFucyB0aGUgc2l6ZSBpcyB1bmtub3duLlxuICAgIGNvbnN0IHNpemUgPSBOdW1iZXIuaXNGaW5pdGUoZmlsZURlc2NyaXB0b3IuZGF0YS5zaXplKSA/IGZpbGVEZXNjcmlwdG9yLmRhdGEuc2l6ZSA6IG51bGxcblxuICAgIGxldCBuZXdGaWxlID0ge1xuICAgICAgc291cmNlOiBmaWxlRGVzY3JpcHRvci5zb3VyY2UgfHwgJycsXG4gICAgICBpZDogZmlsZUlELFxuICAgICAgbmFtZTogZmlsZU5hbWUsXG4gICAgICBleHRlbnNpb246IGZpbGVFeHRlbnNpb24gfHwgJycsXG4gICAgICBtZXRhOiB7XG4gICAgICAgIC4uLnRoaXMuZ2V0U3RhdGUoKS5tZXRhLFxuICAgICAgICAuLi5tZXRhLFxuICAgICAgfSxcbiAgICAgIHR5cGU6IGZpbGVUeXBlLFxuICAgICAgZGF0YTogZmlsZURlc2NyaXB0b3IuZGF0YSxcbiAgICAgIHByb2dyZXNzOiB7XG4gICAgICAgIHBlcmNlbnRhZ2U6IDAsXG4gICAgICAgIGJ5dGVzVXBsb2FkZWQ6IDAsXG4gICAgICAgIGJ5dGVzVG90YWw6IHNpemUsXG4gICAgICAgIHVwbG9hZENvbXBsZXRlOiBmYWxzZSxcbiAgICAgICAgdXBsb2FkU3RhcnRlZDogbnVsbCxcbiAgICAgIH0sXG4gICAgICBzaXplLFxuICAgICAgaXNSZW1vdGUsXG4gICAgICByZW1vdGU6IGZpbGVEZXNjcmlwdG9yLnJlbW90ZSB8fCAnJyxcbiAgICAgIHByZXZpZXc6IGZpbGVEZXNjcmlwdG9yLnByZXZpZXcsXG4gICAgfVxuXG4gICAgY29uc3Qgb25CZWZvcmVGaWxlQWRkZWRSZXN1bHQgPSB0aGlzLm9wdHMub25CZWZvcmVGaWxlQWRkZWQobmV3RmlsZSwgZmlsZXMpXG5cbiAgICBpZiAob25CZWZvcmVGaWxlQWRkZWRSZXN1bHQgPT09IGZhbHNlKSB7XG4gICAgICAvLyBEb27igJl0IHNob3cgVUkgaW5mbyBmb3IgdGhpcyBlcnJvciwgYXMgaXQgc2hvdWxkIGJlIGRvbmUgYnkgdGhlIGRldmVsb3BlclxuICAgICAgdGhpcy4jc2hvd09yTG9nRXJyb3JBbmRUaHJvdyhuZXcgUmVzdHJpY3Rpb25FcnJvcignQ2Fubm90IGFkZCB0aGUgZmlsZSBiZWNhdXNlIG9uQmVmb3JlRmlsZUFkZGVkIHJldHVybmVkIGZhbHNlLicpLCB7IHNob3dJbmZvcm1lcjogZmFsc2UsIGZpbGVEZXNjcmlwdG9yIH0pXG4gICAgfSBlbHNlIGlmICh0eXBlb2Ygb25CZWZvcmVGaWxlQWRkZWRSZXN1bHQgPT09ICdvYmplY3QnICYmIG9uQmVmb3JlRmlsZUFkZGVkUmVzdWx0ICE9PSBudWxsKSB7XG4gICAgICBuZXdGaWxlID0gb25CZWZvcmVGaWxlQWRkZWRSZXN1bHRcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgY29uc3QgZmlsZXNBcnJheSA9IE9iamVjdC5rZXlzKGZpbGVzKS5tYXAoaSA9PiBmaWxlc1tpXSlcbiAgICAgIHRoaXMuI2NoZWNrUmVzdHJpY3Rpb25zKG5ld0ZpbGUsIGZpbGVzQXJyYXkpXG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICB0aGlzLiNzaG93T3JMb2dFcnJvckFuZFRocm93KGVyciwgeyBmaWxlOiBuZXdGaWxlIH0pXG4gICAgfVxuXG4gICAgcmV0dXJuIG5ld0ZpbGVcbiAgfVxuXG4gIC8vIFNjaGVkdWxlIGFuIHVwbG9hZCBpZiBgYXV0b1Byb2NlZWRgIGlzIGVuYWJsZWQuXG4gICNzdGFydElmQXV0b1Byb2NlZWQgKCkge1xuICAgIGlmICh0aGlzLm9wdHMuYXV0b1Byb2NlZWQgJiYgIXRoaXMuc2NoZWR1bGVkQXV0b1Byb2NlZWQpIHtcbiAgICAgIHRoaXMuc2NoZWR1bGVkQXV0b1Byb2NlZWQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdGhpcy5zY2hlZHVsZWRBdXRvUHJvY2VlZCA9IG51bGxcbiAgICAgICAgdGhpcy51cGxvYWQoKS5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgICAgaWYgKCFlcnIuaXNSZXN0cmljdGlvbikge1xuICAgICAgICAgICAgdGhpcy5sb2coZXJyLnN0YWNrIHx8IGVyci5tZXNzYWdlIHx8IGVycilcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICB9LCA0KVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgYSBuZXcgZmlsZSB0byBgc3RhdGUuZmlsZXNgLiBUaGlzIHdpbGwgcnVuIGBvbkJlZm9yZUZpbGVBZGRlZGAsXG4gICAqIHRyeSB0byBndWVzcyBmaWxlIHR5cGUgaW4gYSBjbGV2ZXIgd2F5LCBjaGVjayBmaWxlIGFnYWluc3QgcmVzdHJpY3Rpb25zLFxuICAgKiBhbmQgc3RhcnQgYW4gdXBsb2FkIGlmIGBhdXRvUHJvY2VlZCA9PT0gdHJ1ZWAuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBmaWxlIG9iamVjdCB0byBhZGRcbiAgICogQHJldHVybnMge3N0cmluZ30gaWQgZm9yIHRoZSBhZGRlZCBmaWxlXG4gICAqL1xuICBhZGRGaWxlIChmaWxlKSB7XG4gICAgdGhpcy4jYXNzZXJ0TmV3VXBsb2FkQWxsb3dlZChmaWxlKVxuXG4gICAgY29uc3QgeyBmaWxlcyB9ID0gdGhpcy5nZXRTdGF0ZSgpXG4gICAgbGV0IG5ld0ZpbGUgPSB0aGlzLiNjaGVja0FuZENyZWF0ZUZpbGVTdGF0ZU9iamVjdChmaWxlcywgZmlsZSlcblxuICAgIC8vIFVzZXJzIGFyZSBhc2tlZCB0byByZS1zZWxlY3QgcmVjb3ZlcmVkIGZpbGVzIHdpdGhvdXQgZGF0YSxcbiAgICAvLyBhbmQgdG8ga2VlcCB0aGUgcHJvZ3Jlc3MsIG1ldGEgYW5kIGV2ZXJ0aGluZyBlbHNlLCB3ZSBvbmx5IHJlcGxhY2Ugc2FpZCBkYXRhXG4gICAgaWYgKGZpbGVzW25ld0ZpbGUuaWRdICYmIGZpbGVzW25ld0ZpbGUuaWRdLmlzR2hvc3QpIHtcbiAgICAgIG5ld0ZpbGUgPSB7XG4gICAgICAgIC4uLmZpbGVzW25ld0ZpbGUuaWRdLFxuICAgICAgICBkYXRhOiBmaWxlLmRhdGEsXG4gICAgICAgIGlzR2hvc3Q6IGZhbHNlLFxuICAgICAgfVxuICAgICAgdGhpcy5sb2coYFJlcGxhY2VkIHRoZSBibG9iIGluIHRoZSByZXN0b3JlZCBnaG9zdCBmaWxlOiAke25ld0ZpbGUubmFtZX0sICR7bmV3RmlsZS5pZH1gKVxuICAgIH1cblxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgZmlsZXM6IHtcbiAgICAgICAgLi4uZmlsZXMsXG4gICAgICAgIFtuZXdGaWxlLmlkXTogbmV3RmlsZSxcbiAgICAgIH0sXG4gICAgfSlcblxuICAgIHRoaXMuZW1pdCgnZmlsZS1hZGRlZCcsIG5ld0ZpbGUpXG4gICAgdGhpcy5lbWl0KCdmaWxlcy1hZGRlZCcsIFtuZXdGaWxlXSlcbiAgICB0aGlzLmxvZyhgQWRkZWQgZmlsZTogJHtuZXdGaWxlLm5hbWV9LCAke25ld0ZpbGUuaWR9LCBtaW1lIHR5cGU6ICR7bmV3RmlsZS50eXBlfWApXG5cbiAgICB0aGlzLiNzdGFydElmQXV0b1Byb2NlZWQoKVxuXG4gICAgcmV0dXJuIG5ld0ZpbGUuaWRcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgbXVsdGlwbGUgZmlsZXMgdG8gYHN0YXRlLmZpbGVzYC4gU2VlIHRoZSBgYWRkRmlsZSgpYCBkb2N1bWVudGF0aW9uLlxuICAgKlxuICAgKiBJZiBhbiBlcnJvciBvY2N1cnMgd2hpbGUgYWRkaW5nIGEgZmlsZSwgaXQgaXMgbG9nZ2VkIGFuZCB0aGUgdXNlciBpcyBub3RpZmllZC5cbiAgICogVGhpcyBpcyBnb29kIGZvciBVSSBwbHVnaW5zLCBidXQgbm90IGZvciBwcm9ncmFtbWF0aWMgdXNlLlxuICAgKiBQcm9ncmFtbWF0aWMgdXNlcnMgc2hvdWxkIHVzdWFsbHkgc3RpbGwgdXNlIGBhZGRGaWxlKClgIG9uIGluZGl2aWR1YWwgZmlsZXMuXG4gICAqL1xuICBhZGRGaWxlcyAoZmlsZURlc2NyaXB0b3JzKSB7XG4gICAgdGhpcy4jYXNzZXJ0TmV3VXBsb2FkQWxsb3dlZCgpXG5cbiAgICAvLyBjcmVhdGUgYSBjb3B5IG9mIHRoZSBmaWxlcyBvYmplY3Qgb25seSBvbmNlXG4gICAgY29uc3QgZmlsZXMgPSB7IC4uLnRoaXMuZ2V0U3RhdGUoKS5maWxlcyB9XG4gICAgY29uc3QgbmV3RmlsZXMgPSBbXVxuICAgIGNvbnN0IGVycm9ycyA9IFtdXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmaWxlRGVzY3JpcHRvcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGxldCBuZXdGaWxlID0gdGhpcy4jY2hlY2tBbmRDcmVhdGVGaWxlU3RhdGVPYmplY3QoZmlsZXMsIGZpbGVEZXNjcmlwdG9yc1tpXSlcbiAgICAgICAgLy8gVXNlcnMgYXJlIGFza2VkIHRvIHJlLXNlbGVjdCByZWNvdmVyZWQgZmlsZXMgd2l0aG91dCBkYXRhLFxuICAgICAgICAvLyBhbmQgdG8ga2VlcCB0aGUgcHJvZ3Jlc3MsIG1ldGEgYW5kIGV2ZXJ0aGluZyBlbHNlLCB3ZSBvbmx5IHJlcGxhY2Ugc2FpZCBkYXRhXG4gICAgICAgIGlmIChmaWxlc1tuZXdGaWxlLmlkXSAmJiBmaWxlc1tuZXdGaWxlLmlkXS5pc0dob3N0KSB7XG4gICAgICAgICAgbmV3RmlsZSA9IHtcbiAgICAgICAgICAgIC4uLmZpbGVzW25ld0ZpbGUuaWRdLFxuICAgICAgICAgICAgZGF0YTogZmlsZURlc2NyaXB0b3JzW2ldLmRhdGEsXG4gICAgICAgICAgICBpc0dob3N0OiBmYWxzZSxcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5sb2coYFJlcGxhY2VkIGJsb2IgaW4gYSBnaG9zdCBmaWxlOiAke25ld0ZpbGUubmFtZX0sICR7bmV3RmlsZS5pZH1gKVxuICAgICAgICB9XG4gICAgICAgIGZpbGVzW25ld0ZpbGUuaWRdID0gbmV3RmlsZVxuICAgICAgICBuZXdGaWxlcy5wdXNoKG5ld0ZpbGUpXG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgaWYgKCFlcnIuaXNSZXN0cmljdGlvbikge1xuICAgICAgICAgIGVycm9ycy5wdXNoKGVycilcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuc2V0U3RhdGUoeyBmaWxlcyB9KVxuXG4gICAgbmV3RmlsZXMuZm9yRWFjaCgobmV3RmlsZSkgPT4ge1xuICAgICAgdGhpcy5lbWl0KCdmaWxlLWFkZGVkJywgbmV3RmlsZSlcbiAgICB9KVxuXG4gICAgdGhpcy5lbWl0KCdmaWxlcy1hZGRlZCcsIG5ld0ZpbGVzKVxuXG4gICAgaWYgKG5ld0ZpbGVzLmxlbmd0aCA+IDUpIHtcbiAgICAgIHRoaXMubG9nKGBBZGRlZCBiYXRjaCBvZiAke25ld0ZpbGVzLmxlbmd0aH0gZmlsZXNgKVxuICAgIH0gZWxzZSB7XG4gICAgICBPYmplY3Qua2V5cyhuZXdGaWxlcykuZm9yRWFjaChmaWxlSUQgPT4ge1xuICAgICAgICB0aGlzLmxvZyhgQWRkZWQgZmlsZTogJHtuZXdGaWxlc1tmaWxlSURdLm5hbWV9XFxuIGlkOiAke25ld0ZpbGVzW2ZpbGVJRF0uaWR9XFxuIHR5cGU6ICR7bmV3RmlsZXNbZmlsZUlEXS50eXBlfWApXG4gICAgICB9KVxuICAgIH1cblxuICAgIGlmIChuZXdGaWxlcy5sZW5ndGggPiAwKSB7XG4gICAgICB0aGlzLiNzdGFydElmQXV0b1Byb2NlZWQoKVxuICAgIH1cblxuICAgIGlmIChlcnJvcnMubGVuZ3RoID4gMCkge1xuICAgICAgbGV0IG1lc3NhZ2UgPSAnTXVsdGlwbGUgZXJyb3JzIG9jY3VycmVkIHdoaWxlIGFkZGluZyBmaWxlczpcXG4nXG4gICAgICBlcnJvcnMuZm9yRWFjaCgoc3ViRXJyb3IpID0+IHtcbiAgICAgICAgbWVzc2FnZSArPSBgXFxuICogJHtzdWJFcnJvci5tZXNzYWdlfWBcbiAgICAgIH0pXG5cbiAgICAgIHRoaXMuaW5mbyh7XG4gICAgICAgIG1lc3NhZ2U6IHRoaXMuaTE4bignYWRkQnVsa0ZpbGVzRmFpbGVkJywgeyBzbWFydF9jb3VudDogZXJyb3JzLmxlbmd0aCB9KSxcbiAgICAgICAgZGV0YWlsczogbWVzc2FnZSxcbiAgICAgIH0sICdlcnJvcicsIHRoaXMub3B0cy5pbmZvVGltZW91dClcblxuICAgICAgaWYgKHR5cGVvZiBBZ2dyZWdhdGVFcnJvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgQWdncmVnYXRlRXJyb3IoZXJyb3JzLCBtZXNzYWdlKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgZXJyID0gbmV3IEVycm9yKG1lc3NhZ2UpXG4gICAgICAgIGVyci5lcnJvcnMgPSBlcnJvcnNcbiAgICAgICAgdGhyb3cgZXJyXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmVtb3ZlRmlsZXMgKGZpbGVJRHMsIHJlYXNvbikge1xuICAgIGNvbnN0IHsgZmlsZXMsIGN1cnJlbnRVcGxvYWRzIH0gPSB0aGlzLmdldFN0YXRlKClcbiAgICBjb25zdCB1cGRhdGVkRmlsZXMgPSB7IC4uLmZpbGVzIH1cbiAgICBjb25zdCB1cGRhdGVkVXBsb2FkcyA9IHsgLi4uY3VycmVudFVwbG9hZHMgfVxuXG4gICAgY29uc3QgcmVtb3ZlZEZpbGVzID0gT2JqZWN0LmNyZWF0ZShudWxsKVxuICAgIGZpbGVJRHMuZm9yRWFjaCgoZmlsZUlEKSA9PiB7XG4gICAgICBpZiAoZmlsZXNbZmlsZUlEXSkge1xuICAgICAgICByZW1vdmVkRmlsZXNbZmlsZUlEXSA9IGZpbGVzW2ZpbGVJRF1cbiAgICAgICAgZGVsZXRlIHVwZGF0ZWRGaWxlc1tmaWxlSURdXG4gICAgICB9XG4gICAgfSlcblxuICAgIC8vIFJlbW92ZSBmaWxlcyBmcm9tIHRoZSBgZmlsZUlEc2AgbGlzdCBpbiBlYWNoIHVwbG9hZC5cbiAgICBmdW5jdGlvbiBmaWxlSXNOb3RSZW1vdmVkICh1cGxvYWRGaWxlSUQpIHtcbiAgICAgIHJldHVybiByZW1vdmVkRmlsZXNbdXBsb2FkRmlsZUlEXSA9PT0gdW5kZWZpbmVkXG4gICAgfVxuXG4gICAgT2JqZWN0LmtleXModXBkYXRlZFVwbG9hZHMpLmZvckVhY2goKHVwbG9hZElEKSA9PiB7XG4gICAgICBjb25zdCBuZXdGaWxlSURzID0gY3VycmVudFVwbG9hZHNbdXBsb2FkSURdLmZpbGVJRHMuZmlsdGVyKGZpbGVJc05vdFJlbW92ZWQpXG5cbiAgICAgIC8vIFJlbW92ZSB0aGUgdXBsb2FkIGlmIG5vIGZpbGVzIGFyZSBhc3NvY2lhdGVkIHdpdGggaXQgYW55bW9yZS5cbiAgICAgIGlmIChuZXdGaWxlSURzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBkZWxldGUgdXBkYXRlZFVwbG9hZHNbdXBsb2FkSURdXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICB1cGRhdGVkVXBsb2Fkc1t1cGxvYWRJRF0gPSB7XG4gICAgICAgIC4uLmN1cnJlbnRVcGxvYWRzW3VwbG9hZElEXSxcbiAgICAgICAgZmlsZUlEczogbmV3RmlsZUlEcyxcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgY29uc3Qgc3RhdGVVcGRhdGUgPSB7XG4gICAgICBjdXJyZW50VXBsb2FkczogdXBkYXRlZFVwbG9hZHMsXG4gICAgICBmaWxlczogdXBkYXRlZEZpbGVzLFxuICAgIH1cblxuICAgIC8vIElmIGFsbCBmaWxlcyB3ZXJlIHJlbW92ZWQgLSBhbGxvdyBuZXcgdXBsb2FkcyxcbiAgICAvLyBhbmQgY2xlYXIgcmVjb3ZlcmVkU3RhdGVcbiAgICBpZiAoT2JqZWN0LmtleXModXBkYXRlZEZpbGVzKS5sZW5ndGggPT09IDApIHtcbiAgICAgIHN0YXRlVXBkYXRlLmFsbG93TmV3VXBsb2FkID0gdHJ1ZVxuICAgICAgc3RhdGVVcGRhdGUuZXJyb3IgPSBudWxsXG4gICAgICBzdGF0ZVVwZGF0ZS5yZWNvdmVyZWRTdGF0ZSA9IG51bGxcbiAgICB9XG5cbiAgICB0aGlzLnNldFN0YXRlKHN0YXRlVXBkYXRlKVxuICAgIHRoaXMuY2FsY3VsYXRlVG90YWxQcm9ncmVzcygpXG5cbiAgICBjb25zdCByZW1vdmVkRmlsZUlEcyA9IE9iamVjdC5rZXlzKHJlbW92ZWRGaWxlcylcbiAgICByZW1vdmVkRmlsZUlEcy5mb3JFYWNoKChmaWxlSUQpID0+IHtcbiAgICAgIHRoaXMuZW1pdCgnZmlsZS1yZW1vdmVkJywgcmVtb3ZlZEZpbGVzW2ZpbGVJRF0sIHJlYXNvbilcbiAgICB9KVxuXG4gICAgaWYgKHJlbW92ZWRGaWxlSURzLmxlbmd0aCA+IDUpIHtcbiAgICAgIHRoaXMubG9nKGBSZW1vdmVkICR7cmVtb3ZlZEZpbGVJRHMubGVuZ3RofSBmaWxlc2ApXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubG9nKGBSZW1vdmVkIGZpbGVzOiAke3JlbW92ZWRGaWxlSURzLmpvaW4oJywgJyl9YClcbiAgICB9XG4gIH1cblxuICByZW1vdmVGaWxlIChmaWxlSUQsIHJlYXNvbiA9IG51bGwpIHtcbiAgICB0aGlzLnJlbW92ZUZpbGVzKFtmaWxlSURdLCByZWFzb24pXG4gIH1cblxuICBwYXVzZVJlc3VtZSAoZmlsZUlEKSB7XG4gICAgaWYgKCF0aGlzLmdldFN0YXRlKCkuY2FwYWJpbGl0aWVzLnJlc3VtYWJsZVVwbG9hZHNcbiAgICAgICAgIHx8IHRoaXMuZ2V0RmlsZShmaWxlSUQpLnVwbG9hZENvbXBsZXRlKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkXG4gICAgfVxuXG4gICAgY29uc3Qgd2FzUGF1c2VkID0gdGhpcy5nZXRGaWxlKGZpbGVJRCkuaXNQYXVzZWQgfHwgZmFsc2VcbiAgICBjb25zdCBpc1BhdXNlZCA9ICF3YXNQYXVzZWRcblxuICAgIHRoaXMuc2V0RmlsZVN0YXRlKGZpbGVJRCwge1xuICAgICAgaXNQYXVzZWQsXG4gICAgfSlcblxuICAgIHRoaXMuZW1pdCgndXBsb2FkLXBhdXNlJywgZmlsZUlELCBpc1BhdXNlZClcblxuICAgIHJldHVybiBpc1BhdXNlZFxuICB9XG5cbiAgcGF1c2VBbGwgKCkge1xuICAgIGNvbnN0IHVwZGF0ZWRGaWxlcyA9IHsgLi4udGhpcy5nZXRTdGF0ZSgpLmZpbGVzIH1cbiAgICBjb25zdCBpblByb2dyZXNzVXBkYXRlZEZpbGVzID0gT2JqZWN0LmtleXModXBkYXRlZEZpbGVzKS5maWx0ZXIoKGZpbGUpID0+IHtcbiAgICAgIHJldHVybiAhdXBkYXRlZEZpbGVzW2ZpbGVdLnByb2dyZXNzLnVwbG9hZENvbXBsZXRlXG4gICAgICAgICAgICAgJiYgdXBkYXRlZEZpbGVzW2ZpbGVdLnByb2dyZXNzLnVwbG9hZFN0YXJ0ZWRcbiAgICB9KVxuXG4gICAgaW5Qcm9ncmVzc1VwZGF0ZWRGaWxlcy5mb3JFYWNoKChmaWxlKSA9PiB7XG4gICAgICBjb25zdCB1cGRhdGVkRmlsZSA9IHsgLi4udXBkYXRlZEZpbGVzW2ZpbGVdLCBpc1BhdXNlZDogdHJ1ZSB9XG4gICAgICB1cGRhdGVkRmlsZXNbZmlsZV0gPSB1cGRhdGVkRmlsZVxuICAgIH0pXG5cbiAgICB0aGlzLnNldFN0YXRlKHsgZmlsZXM6IHVwZGF0ZWRGaWxlcyB9KVxuICAgIHRoaXMuZW1pdCgncGF1c2UtYWxsJylcbiAgfVxuXG4gIHJlc3VtZUFsbCAoKSB7XG4gICAgY29uc3QgdXBkYXRlZEZpbGVzID0geyAuLi50aGlzLmdldFN0YXRlKCkuZmlsZXMgfVxuICAgIGNvbnN0IGluUHJvZ3Jlc3NVcGRhdGVkRmlsZXMgPSBPYmplY3Qua2V5cyh1cGRhdGVkRmlsZXMpLmZpbHRlcigoZmlsZSkgPT4ge1xuICAgICAgcmV0dXJuICF1cGRhdGVkRmlsZXNbZmlsZV0ucHJvZ3Jlc3MudXBsb2FkQ29tcGxldGVcbiAgICAgICAgICAgICAmJiB1cGRhdGVkRmlsZXNbZmlsZV0ucHJvZ3Jlc3MudXBsb2FkU3RhcnRlZFxuICAgIH0pXG5cbiAgICBpblByb2dyZXNzVXBkYXRlZEZpbGVzLmZvckVhY2goKGZpbGUpID0+IHtcbiAgICAgIGNvbnN0IHVwZGF0ZWRGaWxlID0ge1xuICAgICAgICAuLi51cGRhdGVkRmlsZXNbZmlsZV0sXG4gICAgICAgIGlzUGF1c2VkOiBmYWxzZSxcbiAgICAgICAgZXJyb3I6IG51bGwsXG4gICAgICB9XG4gICAgICB1cGRhdGVkRmlsZXNbZmlsZV0gPSB1cGRhdGVkRmlsZVxuICAgIH0pXG4gICAgdGhpcy5zZXRTdGF0ZSh7IGZpbGVzOiB1cGRhdGVkRmlsZXMgfSlcblxuICAgIHRoaXMuZW1pdCgncmVzdW1lLWFsbCcpXG4gIH1cblxuICByZXRyeUFsbCAoKSB7XG4gICAgY29uc3QgdXBkYXRlZEZpbGVzID0geyAuLi50aGlzLmdldFN0YXRlKCkuZmlsZXMgfVxuICAgIGNvbnN0IGZpbGVzVG9SZXRyeSA9IE9iamVjdC5rZXlzKHVwZGF0ZWRGaWxlcykuZmlsdGVyKGZpbGUgPT4ge1xuICAgICAgcmV0dXJuIHVwZGF0ZWRGaWxlc1tmaWxlXS5lcnJvclxuICAgIH0pXG5cbiAgICBmaWxlc1RvUmV0cnkuZm9yRWFjaCgoZmlsZSkgPT4ge1xuICAgICAgY29uc3QgdXBkYXRlZEZpbGUgPSB7XG4gICAgICAgIC4uLnVwZGF0ZWRGaWxlc1tmaWxlXSxcbiAgICAgICAgaXNQYXVzZWQ6IGZhbHNlLFxuICAgICAgICBlcnJvcjogbnVsbCxcbiAgICAgIH1cbiAgICAgIHVwZGF0ZWRGaWxlc1tmaWxlXSA9IHVwZGF0ZWRGaWxlXG4gICAgfSlcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGZpbGVzOiB1cGRhdGVkRmlsZXMsXG4gICAgICBlcnJvcjogbnVsbCxcbiAgICB9KVxuXG4gICAgdGhpcy5lbWl0KCdyZXRyeS1hbGwnLCBmaWxlc1RvUmV0cnkpXG5cbiAgICBpZiAoZmlsZXNUb1JldHJ5Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh7XG4gICAgICAgIHN1Y2Nlc3NmdWw6IFtdLFxuICAgICAgICBmYWlsZWQ6IFtdLFxuICAgICAgfSlcbiAgICB9XG5cbiAgICBjb25zdCB1cGxvYWRJRCA9IHRoaXMuI2NyZWF0ZVVwbG9hZChmaWxlc1RvUmV0cnksIHtcbiAgICAgIGZvcmNlQWxsb3dOZXdVcGxvYWQ6IHRydWUsIC8vIGNyZWF0ZSBuZXcgdXBsb2FkIGV2ZW4gaWYgYWxsb3dOZXdVcGxvYWQ6IGZhbHNlXG4gICAgfSlcbiAgICByZXR1cm4gdGhpcy4jcnVuVXBsb2FkKHVwbG9hZElEKVxuICB9XG5cbiAgY2FuY2VsQWxsICgpIHtcbiAgICB0aGlzLmVtaXQoJ2NhbmNlbC1hbGwnKVxuXG4gICAgY29uc3QgeyBmaWxlcyB9ID0gdGhpcy5nZXRTdGF0ZSgpXG5cbiAgICBjb25zdCBmaWxlSURzID0gT2JqZWN0LmtleXMoZmlsZXMpXG4gICAgaWYgKGZpbGVJRHMubGVuZ3RoKSB7XG4gICAgICB0aGlzLnJlbW92ZUZpbGVzKGZpbGVJRHMsICdjYW5jZWwtYWxsJylcbiAgICB9XG5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIHRvdGFsUHJvZ3Jlc3M6IDAsXG4gICAgICBlcnJvcjogbnVsbCxcbiAgICAgIHJlY292ZXJlZFN0YXRlOiBudWxsLFxuICAgIH0pXG4gIH1cblxuICByZXRyeVVwbG9hZCAoZmlsZUlEKSB7XG4gICAgdGhpcy5zZXRGaWxlU3RhdGUoZmlsZUlELCB7XG4gICAgICBlcnJvcjogbnVsbCxcbiAgICAgIGlzUGF1c2VkOiBmYWxzZSxcbiAgICB9KVxuXG4gICAgdGhpcy5lbWl0KCd1cGxvYWQtcmV0cnknLCBmaWxlSUQpXG5cbiAgICBjb25zdCB1cGxvYWRJRCA9IHRoaXMuI2NyZWF0ZVVwbG9hZChbZmlsZUlEXSwge1xuICAgICAgZm9yY2VBbGxvd05ld1VwbG9hZDogdHJ1ZSwgLy8gY3JlYXRlIG5ldyB1cGxvYWQgZXZlbiBpZiBhbGxvd05ld1VwbG9hZDogZmFsc2VcbiAgICB9KVxuICAgIHJldHVybiB0aGlzLiNydW5VcGxvYWQodXBsb2FkSUQpXG4gIH1cblxuICByZXNldCAoKSB7XG4gICAgdGhpcy5jYW5jZWxBbGwoKVxuICB9XG5cbiAgbG9nb3V0ICgpIHtcbiAgICB0aGlzLml0ZXJhdGVQbHVnaW5zKHBsdWdpbiA9PiB7XG4gICAgICBpZiAocGx1Z2luLnByb3ZpZGVyICYmIHBsdWdpbi5wcm92aWRlci5sb2dvdXQpIHtcbiAgICAgICAgcGx1Z2luLnByb3ZpZGVyLmxvZ291dCgpXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIGNhbGN1bGF0ZVByb2dyZXNzIChmaWxlLCBkYXRhKSB7XG4gICAgaWYgKCF0aGlzLmdldEZpbGUoZmlsZS5pZCkpIHtcbiAgICAgIHRoaXMubG9nKGBOb3Qgc2V0dGluZyBwcm9ncmVzcyBmb3IgYSBmaWxlIHRoYXQgaGFzIGJlZW4gcmVtb3ZlZDogJHtmaWxlLmlkfWApXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyBieXRlc1RvdGFsIG1heSBiZSBudWxsIG9yIHplcm87IGluIHRoYXQgY2FzZSB3ZSBjYW4ndCBkaXZpZGUgYnkgaXRcbiAgICBjb25zdCBjYW5IYXZlUGVyY2VudGFnZSA9IE51bWJlci5pc0Zpbml0ZShkYXRhLmJ5dGVzVG90YWwpICYmIGRhdGEuYnl0ZXNUb3RhbCA+IDBcbiAgICB0aGlzLnNldEZpbGVTdGF0ZShmaWxlLmlkLCB7XG4gICAgICBwcm9ncmVzczoge1xuICAgICAgICAuLi50aGlzLmdldEZpbGUoZmlsZS5pZCkucHJvZ3Jlc3MsXG4gICAgICAgIGJ5dGVzVXBsb2FkZWQ6IGRhdGEuYnl0ZXNVcGxvYWRlZCxcbiAgICAgICAgYnl0ZXNUb3RhbDogZGF0YS5ieXRlc1RvdGFsLFxuICAgICAgICBwZXJjZW50YWdlOiBjYW5IYXZlUGVyY2VudGFnZVxuICAgICAgICAgID8gTWF0aC5yb3VuZCgoZGF0YS5ieXRlc1VwbG9hZGVkIC8gZGF0YS5ieXRlc1RvdGFsKSAqIDEwMClcbiAgICAgICAgICA6IDAsXG4gICAgICB9LFxuICAgIH0pXG5cbiAgICB0aGlzLmNhbGN1bGF0ZVRvdGFsUHJvZ3Jlc3MoKVxuICB9XG5cbiAgY2FsY3VsYXRlVG90YWxQcm9ncmVzcyAoKSB7XG4gICAgLy8gY2FsY3VsYXRlIHRvdGFsIHByb2dyZXNzLCB1c2luZyB0aGUgbnVtYmVyIG9mIGZpbGVzIGN1cnJlbnRseSB1cGxvYWRpbmcsXG4gICAgLy8gbXVsdGlwbGllZCBieSAxMDAgYW5kIHRoZSBzdW1tIG9mIGluZGl2aWR1YWwgcHJvZ3Jlc3Mgb2YgZWFjaCBmaWxlXG4gICAgY29uc3QgZmlsZXMgPSB0aGlzLmdldEZpbGVzKClcblxuICAgIGNvbnN0IGluUHJvZ3Jlc3MgPSBmaWxlcy5maWx0ZXIoKGZpbGUpID0+IHtcbiAgICAgIHJldHVybiBmaWxlLnByb2dyZXNzLnVwbG9hZFN0YXJ0ZWRcbiAgICAgICAgfHwgZmlsZS5wcm9ncmVzcy5wcmVwcm9jZXNzXG4gICAgICAgIHx8IGZpbGUucHJvZ3Jlc3MucG9zdHByb2Nlc3NcbiAgICB9KVxuXG4gICAgaWYgKGluUHJvZ3Jlc3MubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aGlzLmVtaXQoJ3Byb2dyZXNzJywgMClcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyB0b3RhbFByb2dyZXNzOiAwIH0pXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCBzaXplZEZpbGVzID0gaW5Qcm9ncmVzcy5maWx0ZXIoKGZpbGUpID0+IGZpbGUucHJvZ3Jlc3MuYnl0ZXNUb3RhbCAhPSBudWxsKVxuICAgIGNvbnN0IHVuc2l6ZWRGaWxlcyA9IGluUHJvZ3Jlc3MuZmlsdGVyKChmaWxlKSA9PiBmaWxlLnByb2dyZXNzLmJ5dGVzVG90YWwgPT0gbnVsbClcblxuICAgIGlmIChzaXplZEZpbGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgY29uc3QgcHJvZ3Jlc3NNYXggPSBpblByb2dyZXNzLmxlbmd0aCAqIDEwMFxuICAgICAgY29uc3QgY3VycmVudFByb2dyZXNzID0gdW5zaXplZEZpbGVzLnJlZHVjZSgoYWNjLCBmaWxlKSA9PiB7XG4gICAgICAgIHJldHVybiBhY2MgKyBmaWxlLnByb2dyZXNzLnBlcmNlbnRhZ2VcbiAgICAgIH0sIDApXG4gICAgICBjb25zdCB0b3RhbFByb2dyZXNzID0gTWF0aC5yb3VuZCgoY3VycmVudFByb2dyZXNzIC8gcHJvZ3Jlc3NNYXgpICogMTAwKVxuICAgICAgdGhpcy5zZXRTdGF0ZSh7IHRvdGFsUHJvZ3Jlc3MgfSlcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGxldCB0b3RhbFNpemUgPSBzaXplZEZpbGVzLnJlZHVjZSgoYWNjLCBmaWxlKSA9PiB7XG4gICAgICByZXR1cm4gYWNjICsgZmlsZS5wcm9ncmVzcy5ieXRlc1RvdGFsXG4gICAgfSwgMClcbiAgICBjb25zdCBhdmVyYWdlU2l6ZSA9IHRvdGFsU2l6ZSAvIHNpemVkRmlsZXMubGVuZ3RoXG4gICAgdG90YWxTaXplICs9IGF2ZXJhZ2VTaXplICogdW5zaXplZEZpbGVzLmxlbmd0aFxuXG4gICAgbGV0IHVwbG9hZGVkU2l6ZSA9IDBcbiAgICBzaXplZEZpbGVzLmZvckVhY2goKGZpbGUpID0+IHtcbiAgICAgIHVwbG9hZGVkU2l6ZSArPSBmaWxlLnByb2dyZXNzLmJ5dGVzVXBsb2FkZWRcbiAgICB9KVxuICAgIHVuc2l6ZWRGaWxlcy5mb3JFYWNoKChmaWxlKSA9PiB7XG4gICAgICB1cGxvYWRlZFNpemUgKz0gKGF2ZXJhZ2VTaXplICogKGZpbGUucHJvZ3Jlc3MucGVyY2VudGFnZSB8fCAwKSkgLyAxMDBcbiAgICB9KVxuXG4gICAgbGV0IHRvdGFsUHJvZ3Jlc3MgPSB0b3RhbFNpemUgPT09IDBcbiAgICAgID8gMFxuICAgICAgOiBNYXRoLnJvdW5kKCh1cGxvYWRlZFNpemUgLyB0b3RhbFNpemUpICogMTAwKVxuXG4gICAgLy8gaG90IGZpeCwgYmVjYXVzZTpcbiAgICAvLyB1cGxvYWRlZFNpemUgZW5kZWQgdXAgbGFyZ2VyIHRoYW4gdG90YWxTaXplLCByZXN1bHRpbmcgaW4gMTMyNSUgdG90YWxcbiAgICBpZiAodG90YWxQcm9ncmVzcyA+IDEwMCkge1xuICAgICAgdG90YWxQcm9ncmVzcyA9IDEwMFxuICAgIH1cblxuICAgIHRoaXMuc2V0U3RhdGUoeyB0b3RhbFByb2dyZXNzIH0pXG4gICAgdGhpcy5lbWl0KCdwcm9ncmVzcycsIHRvdGFsUHJvZ3Jlc3MpXG4gIH1cblxuICAvKipcbiAgICogUmVnaXN0ZXJzIGxpc3RlbmVycyBmb3IgYWxsIGdsb2JhbCBhY3Rpb25zLCBsaWtlOlxuICAgKiBgZXJyb3JgLCBgZmlsZS1yZW1vdmVkYCwgYHVwbG9hZC1wcm9ncmVzc2BcbiAgICovXG4gICNhZGRMaXN0ZW5lcnMgKCkge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7RXJyb3J9IGVycm9yXG4gICAgICogQHBhcmFtIHtvYmplY3R9IFtmaWxlXVxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBbcmVzcG9uc2VdXG4gICAgICovXG4gICAgY29uc3QgZXJyb3JIYW5kbGVyID0gKGVycm9yLCBmaWxlLCByZXNwb25zZSkgPT4ge1xuICAgICAgbGV0IGVycm9yTXNnID0gZXJyb3IubWVzc2FnZSB8fCAnVW5rbm93biBlcnJvcidcbiAgICAgIGlmIChlcnJvci5kZXRhaWxzKSB7XG4gICAgICAgIGVycm9yTXNnICs9IGAgJHtlcnJvci5kZXRhaWxzfWBcbiAgICAgIH1cblxuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGVycm9yOiBlcnJvck1zZyB9KVxuXG4gICAgICBpZiAoZmlsZSAhPSBudWxsICYmIGZpbGUuaWQgaW4gdGhpcy5nZXRTdGF0ZSgpLmZpbGVzKSB7XG4gICAgICAgIHRoaXMuc2V0RmlsZVN0YXRlKGZpbGUuaWQsIHtcbiAgICAgICAgICBlcnJvcjogZXJyb3JNc2csXG4gICAgICAgICAgcmVzcG9uc2UsXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5vbignZXJyb3InLCBlcnJvckhhbmRsZXIpXG5cbiAgICB0aGlzLm9uKCd1cGxvYWQtZXJyb3InLCAoZmlsZSwgZXJyb3IsIHJlc3BvbnNlKSA9PiB7XG4gICAgICBlcnJvckhhbmRsZXIoZXJyb3IsIGZpbGUsIHJlc3BvbnNlKVxuXG4gICAgICBpZiAodHlwZW9mIGVycm9yID09PSAnb2JqZWN0JyAmJiBlcnJvci5tZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IG5ld0Vycm9yID0gbmV3IEVycm9yKGVycm9yLm1lc3NhZ2UpXG4gICAgICAgIG5ld0Vycm9yLmRldGFpbHMgPSBlcnJvci5tZXNzYWdlXG4gICAgICAgIGlmIChlcnJvci5kZXRhaWxzKSB7XG4gICAgICAgICAgbmV3RXJyb3IuZGV0YWlscyArPSBgICR7ZXJyb3IuZGV0YWlsc31gXG4gICAgICAgIH1cbiAgICAgICAgbmV3RXJyb3IubWVzc2FnZSA9IHRoaXMuaTE4bignZmFpbGVkVG9VcGxvYWQnLCB7IGZpbGU6IGZpbGUubmFtZSB9KVxuICAgICAgICB0aGlzLiNzaG93T3JMb2dFcnJvckFuZFRocm93KG5ld0Vycm9yLCB7XG4gICAgICAgICAgdGhyb3dFcnI6IGZhbHNlLFxuICAgICAgICB9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy4jc2hvd09yTG9nRXJyb3JBbmRUaHJvdyhlcnJvciwge1xuICAgICAgICAgIHRocm93RXJyOiBmYWxzZSxcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgdGhpcy5vbigndXBsb2FkJywgKCkgPT4ge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGVycm9yOiBudWxsIH0pXG4gICAgfSlcblxuICAgIHRoaXMub24oJ3VwbG9hZC1zdGFydGVkJywgKGZpbGUpID0+IHtcbiAgICAgIGlmICghdGhpcy5nZXRGaWxlKGZpbGUuaWQpKSB7XG4gICAgICAgIHRoaXMubG9nKGBOb3Qgc2V0dGluZyBwcm9ncmVzcyBmb3IgYSBmaWxlIHRoYXQgaGFzIGJlZW4gcmVtb3ZlZDogJHtmaWxlLmlkfWApXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgdGhpcy5zZXRGaWxlU3RhdGUoZmlsZS5pZCwge1xuICAgICAgICBwcm9ncmVzczoge1xuICAgICAgICAgIHVwbG9hZFN0YXJ0ZWQ6IERhdGUubm93KCksXG4gICAgICAgICAgdXBsb2FkQ29tcGxldGU6IGZhbHNlLFxuICAgICAgICAgIHBlcmNlbnRhZ2U6IDAsXG4gICAgICAgICAgYnl0ZXNVcGxvYWRlZDogMCxcbiAgICAgICAgICBieXRlc1RvdGFsOiBmaWxlLnNpemUsXG4gICAgICAgIH0sXG4gICAgICB9KVxuICAgIH0pXG5cbiAgICB0aGlzLm9uKCd1cGxvYWQtcHJvZ3Jlc3MnLCB0aGlzLmNhbGN1bGF0ZVByb2dyZXNzKVxuXG4gICAgdGhpcy5vbigndXBsb2FkLXN1Y2Nlc3MnLCAoZmlsZSwgdXBsb2FkUmVzcCkgPT4ge1xuICAgICAgaWYgKCF0aGlzLmdldEZpbGUoZmlsZS5pZCkpIHtcbiAgICAgICAgdGhpcy5sb2coYE5vdCBzZXR0aW5nIHByb2dyZXNzIGZvciBhIGZpbGUgdGhhdCBoYXMgYmVlbiByZW1vdmVkOiAke2ZpbGUuaWR9YClcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGN1cnJlbnRQcm9ncmVzcyA9IHRoaXMuZ2V0RmlsZShmaWxlLmlkKS5wcm9ncmVzc1xuICAgICAgdGhpcy5zZXRGaWxlU3RhdGUoZmlsZS5pZCwge1xuICAgICAgICBwcm9ncmVzczoge1xuICAgICAgICAgIC4uLmN1cnJlbnRQcm9ncmVzcyxcbiAgICAgICAgICBwb3N0cHJvY2VzczogdGhpcy4jcG9zdFByb2Nlc3NvcnMuc2l6ZSA+IDAgPyB7XG4gICAgICAgICAgICBtb2RlOiAnaW5kZXRlcm1pbmF0ZScsXG4gICAgICAgICAgfSA6IG51bGwsXG4gICAgICAgICAgdXBsb2FkQ29tcGxldGU6IHRydWUsXG4gICAgICAgICAgcGVyY2VudGFnZTogMTAwLFxuICAgICAgICAgIGJ5dGVzVXBsb2FkZWQ6IGN1cnJlbnRQcm9ncmVzcy5ieXRlc1RvdGFsLFxuICAgICAgICB9LFxuICAgICAgICByZXNwb25zZTogdXBsb2FkUmVzcCxcbiAgICAgICAgdXBsb2FkVVJMOiB1cGxvYWRSZXNwLnVwbG9hZFVSTCxcbiAgICAgICAgaXNQYXVzZWQ6IGZhbHNlLFxuICAgICAgfSlcblxuICAgICAgLy8gUmVtb3RlIHByb3ZpZGVycyBzb21ldGltZXMgZG9uJ3QgdGVsbCB1cyB0aGUgZmlsZSBzaXplLFxuICAgICAgLy8gYnV0IHdlIGNhbiBrbm93IGhvdyBtYW55IGJ5dGVzIHdlIHVwbG9hZGVkIG9uY2UgdGhlIHVwbG9hZCBpcyBjb21wbGV0ZS5cbiAgICAgIGlmIChmaWxlLnNpemUgPT0gbnVsbCkge1xuICAgICAgICB0aGlzLnNldEZpbGVTdGF0ZShmaWxlLmlkLCB7XG4gICAgICAgICAgc2l6ZTogdXBsb2FkUmVzcC5ieXRlc1VwbG9hZGVkIHx8IGN1cnJlbnRQcm9ncmVzcy5ieXRlc1RvdGFsLFxuICAgICAgICB9KVxuICAgICAgfVxuXG4gICAgICB0aGlzLmNhbGN1bGF0ZVRvdGFsUHJvZ3Jlc3MoKVxuICAgIH0pXG5cbiAgICB0aGlzLm9uKCdwcmVwcm9jZXNzLXByb2dyZXNzJywgKGZpbGUsIHByb2dyZXNzKSA9PiB7XG4gICAgICBpZiAoIXRoaXMuZ2V0RmlsZShmaWxlLmlkKSkge1xuICAgICAgICB0aGlzLmxvZyhgTm90IHNldHRpbmcgcHJvZ3Jlc3MgZm9yIGEgZmlsZSB0aGF0IGhhcyBiZWVuIHJlbW92ZWQ6ICR7ZmlsZS5pZH1gKVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIHRoaXMuc2V0RmlsZVN0YXRlKGZpbGUuaWQsIHtcbiAgICAgICAgcHJvZ3Jlc3M6IHsgLi4udGhpcy5nZXRGaWxlKGZpbGUuaWQpLnByb2dyZXNzLCBwcmVwcm9jZXNzOiBwcm9ncmVzcyB9LFxuICAgICAgfSlcbiAgICB9KVxuXG4gICAgdGhpcy5vbigncHJlcHJvY2Vzcy1jb21wbGV0ZScsIChmaWxlKSA9PiB7XG4gICAgICBpZiAoIXRoaXMuZ2V0RmlsZShmaWxlLmlkKSkge1xuICAgICAgICB0aGlzLmxvZyhgTm90IHNldHRpbmcgcHJvZ3Jlc3MgZm9yIGEgZmlsZSB0aGF0IGhhcyBiZWVuIHJlbW92ZWQ6ICR7ZmlsZS5pZH1gKVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIGNvbnN0IGZpbGVzID0geyAuLi50aGlzLmdldFN0YXRlKCkuZmlsZXMgfVxuICAgICAgZmlsZXNbZmlsZS5pZF0gPSB7IC4uLmZpbGVzW2ZpbGUuaWRdLCBwcm9ncmVzczogeyAuLi5maWxlc1tmaWxlLmlkXS5wcm9ncmVzcyB9IH1cbiAgICAgIGRlbGV0ZSBmaWxlc1tmaWxlLmlkXS5wcm9ncmVzcy5wcmVwcm9jZXNzXG5cbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBmaWxlcyB9KVxuICAgIH0pXG5cbiAgICB0aGlzLm9uKCdwb3N0cHJvY2Vzcy1wcm9ncmVzcycsIChmaWxlLCBwcm9ncmVzcykgPT4ge1xuICAgICAgaWYgKCF0aGlzLmdldEZpbGUoZmlsZS5pZCkpIHtcbiAgICAgICAgdGhpcy5sb2coYE5vdCBzZXR0aW5nIHByb2dyZXNzIGZvciBhIGZpbGUgdGhhdCBoYXMgYmVlbiByZW1vdmVkOiAke2ZpbGUuaWR9YClcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICB0aGlzLnNldEZpbGVTdGF0ZShmaWxlLmlkLCB7XG4gICAgICAgIHByb2dyZXNzOiB7IC4uLnRoaXMuZ2V0U3RhdGUoKS5maWxlc1tmaWxlLmlkXS5wcm9ncmVzcywgcG9zdHByb2Nlc3M6IHByb2dyZXNzIH0sXG4gICAgICB9KVxuICAgIH0pXG5cbiAgICB0aGlzLm9uKCdwb3N0cHJvY2Vzcy1jb21wbGV0ZScsIChmaWxlKSA9PiB7XG4gICAgICBpZiAoIXRoaXMuZ2V0RmlsZShmaWxlLmlkKSkge1xuICAgICAgICB0aGlzLmxvZyhgTm90IHNldHRpbmcgcHJvZ3Jlc3MgZm9yIGEgZmlsZSB0aGF0IGhhcyBiZWVuIHJlbW92ZWQ6ICR7ZmlsZS5pZH1gKVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIGNvbnN0IGZpbGVzID0ge1xuICAgICAgICAuLi50aGlzLmdldFN0YXRlKCkuZmlsZXMsXG4gICAgICB9XG4gICAgICBmaWxlc1tmaWxlLmlkXSA9IHtcbiAgICAgICAgLi4uZmlsZXNbZmlsZS5pZF0sXG4gICAgICAgIHByb2dyZXNzOiB7XG4gICAgICAgICAgLi4uZmlsZXNbZmlsZS5pZF0ucHJvZ3Jlc3MsXG4gICAgICAgIH0sXG4gICAgICB9XG4gICAgICBkZWxldGUgZmlsZXNbZmlsZS5pZF0ucHJvZ3Jlc3MucG9zdHByb2Nlc3NcblxuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGZpbGVzIH0pXG4gICAgfSlcblxuICAgIHRoaXMub24oJ3Jlc3RvcmVkJywgKCkgPT4ge1xuICAgICAgLy8gRmlsZXMgbWF5IGhhdmUgY2hhbmdlZC0tZW5zdXJlIHByb2dyZXNzIGlzIHN0aWxsIGFjY3VyYXRlLlxuICAgICAgdGhpcy5jYWxjdWxhdGVUb3RhbFByb2dyZXNzKClcbiAgICB9KVxuXG4gICAgdGhpcy5vbignZGFzaGJvYXJkOmZpbGUtZWRpdC1jb21wbGV0ZScsIChmaWxlKSA9PiB7XG4gICAgICBpZiAoZmlsZSkge1xuICAgICAgICB0aGlzLiNjaGVja1JlcXVpcmVkTWV0YUZpZWxkc09uRmlsZShmaWxlKVxuICAgICAgfVxuICAgIH0pXG5cbiAgICAvLyBzaG93IGluZm9ybWVyIGlmIG9mZmxpbmVcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdvbmxpbmUnLCB0aGlzLiN1cGRhdGVPbmxpbmVTdGF0dXMpXG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignb2ZmbGluZScsIHRoaXMuI3VwZGF0ZU9ubGluZVN0YXR1cylcbiAgICAgIHNldFRpbWVvdXQodGhpcy4jdXBkYXRlT25saW5lU3RhdHVzLCAzMDAwKVxuICAgIH1cbiAgfVxuXG4gIHVwZGF0ZU9ubGluZVN0YXR1cyAoKSB7XG4gICAgY29uc3Qgb25saW5lID0gdHlwZW9mIHdpbmRvdy5uYXZpZ2F0b3Iub25MaW5lICE9PSAndW5kZWZpbmVkJ1xuICAgICAgPyB3aW5kb3cubmF2aWdhdG9yLm9uTGluZVxuICAgICAgOiB0cnVlXG4gICAgaWYgKCFvbmxpbmUpIHtcbiAgICAgIHRoaXMuZW1pdCgnaXMtb2ZmbGluZScpXG4gICAgICB0aGlzLmluZm8odGhpcy5pMThuKCdub0ludGVybmV0Q29ubmVjdGlvbicpLCAnZXJyb3InLCAwKVxuICAgICAgdGhpcy53YXNPZmZsaW5lID0gdHJ1ZVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmVtaXQoJ2lzLW9ubGluZScpXG4gICAgICBpZiAodGhpcy53YXNPZmZsaW5lKSB7XG4gICAgICAgIHRoaXMuZW1pdCgnYmFjay1vbmxpbmUnKVxuICAgICAgICB0aGlzLmluZm8odGhpcy5pMThuKCdjb25uZWN0ZWRUb0ludGVybmV0JyksICdzdWNjZXNzJywgMzAwMClcbiAgICAgICAgdGhpcy53YXNPZmZsaW5lID0gZmFsc2VcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAjdXBkYXRlT25saW5lU3RhdHVzID0gdGhpcy51cGRhdGVPbmxpbmVTdGF0dXMuYmluZCh0aGlzKVxuXG4gIGdldElEICgpIHtcbiAgICByZXR1cm4gdGhpcy5vcHRzLmlkXG4gIH1cblxuICAvKipcbiAgICogUmVnaXN0ZXJzIGEgcGx1Z2luIHdpdGggQ29yZS5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IFBsdWdpbiBvYmplY3RcbiAgICogQHBhcmFtIHtvYmplY3R9IFtvcHRzXSBvYmplY3Qgd2l0aCBvcHRpb25zIHRvIGJlIHBhc3NlZCB0byBQbHVnaW5cbiAgICogQHJldHVybnMge29iamVjdH0gc2VsZiBmb3IgY2hhaW5pbmdcbiAgICovXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zaGFkb3dcbiAgdXNlIChQbHVnaW4sIG9wdHMpIHtcbiAgICBpZiAodHlwZW9mIFBsdWdpbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgY29uc3QgbXNnID0gYEV4cGVjdGVkIGEgcGx1Z2luIGNsYXNzLCBidXQgZ290ICR7UGx1Z2luID09PSBudWxsID8gJ251bGwnIDogdHlwZW9mIFBsdWdpbn0uYFxuICAgICAgICArICcgUGxlYXNlIHZlcmlmeSB0aGF0IHRoZSBwbHVnaW4gd2FzIGltcG9ydGVkIGFuZCBzcGVsbGVkIGNvcnJlY3RseS4nXG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKG1zZylcbiAgICB9XG5cbiAgICAvLyBJbnN0YW50aWF0ZVxuICAgIGNvbnN0IHBsdWdpbiA9IG5ldyBQbHVnaW4odGhpcywgb3B0cylcbiAgICBjb25zdCBwbHVnaW5JZCA9IHBsdWdpbi5pZFxuXG4gICAgaWYgKCFwbHVnaW5JZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3VyIHBsdWdpbiBtdXN0IGhhdmUgYW4gaWQnKVxuICAgIH1cblxuICAgIGlmICghcGx1Z2luLnR5cGUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignWW91ciBwbHVnaW4gbXVzdCBoYXZlIGEgdHlwZScpXG4gICAgfVxuXG4gICAgY29uc3QgZXhpc3RzUGx1Z2luQWxyZWFkeSA9IHRoaXMuZ2V0UGx1Z2luKHBsdWdpbklkKVxuICAgIGlmIChleGlzdHNQbHVnaW5BbHJlYWR5KSB7XG4gICAgICBjb25zdCBtc2cgPSBgQWxyZWFkeSBmb3VuZCBhIHBsdWdpbiBuYW1lZCAnJHtleGlzdHNQbHVnaW5BbHJlYWR5LmlkfScuIGBcbiAgICAgICAgKyBgVHJpZWQgdG8gdXNlOiAnJHtwbHVnaW5JZH0nLlxcbmBcbiAgICAgICAgKyAnVXBweSBwbHVnaW5zIG11c3QgaGF2ZSB1bmlxdWUgYGlkYCBvcHRpb25zLiBTZWUgaHR0cHM6Ly91cHB5LmlvL2RvY3MvcGx1Z2lucy8jaWQuJ1xuICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZylcbiAgICB9XG5cbiAgICBpZiAoUGx1Z2luLlZFUlNJT04pIHtcbiAgICAgIHRoaXMubG9nKGBVc2luZyAke3BsdWdpbklkfSB2JHtQbHVnaW4uVkVSU0lPTn1gKVxuICAgIH1cblxuICAgIGlmIChwbHVnaW4udHlwZSBpbiB0aGlzLiNwbHVnaW5zKSB7XG4gICAgICB0aGlzLiNwbHVnaW5zW3BsdWdpbi50eXBlXS5wdXNoKHBsdWdpbilcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy4jcGx1Z2luc1twbHVnaW4udHlwZV0gPSBbcGx1Z2luXVxuICAgIH1cbiAgICBwbHVnaW4uaW5zdGFsbCgpXG5cbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLyoqXG4gICAqIEZpbmQgb25lIFBsdWdpbiBieSBuYW1lLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgcGx1Z2luIGlkXG4gICAqIEByZXR1cm5zIHtCYXNlUGx1Z2lufHVuZGVmaW5lZH1cbiAgICovXG4gIGdldFBsdWdpbiAoaWQpIHtcbiAgICBmb3IgKGNvbnN0IHBsdWdpbnMgb2YgT2JqZWN0LnZhbHVlcyh0aGlzLiNwbHVnaW5zKSkge1xuICAgICAgY29uc3QgZm91bmRQbHVnaW4gPSBwbHVnaW5zLmZpbmQocGx1Z2luID0+IHBsdWdpbi5pZCA9PT0gaWQpXG4gICAgICBpZiAoZm91bmRQbHVnaW4gIT0gbnVsbCkgcmV0dXJuIGZvdW5kUGx1Z2luXG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWRcbiAgfVxuXG4gIFtTeW1ib2wuZm9yKCd1cHB5IHRlc3Q6IGdldFBsdWdpbnMnKV0gKHR5cGUpIHtcbiAgICByZXR1cm4gdGhpcy4jcGx1Z2luc1t0eXBlXVxuICB9XG5cbiAgLyoqXG4gICAqIEl0ZXJhdGUgdGhyb3VnaCBhbGwgYHVzZWBkIHBsdWdpbnMuXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IG1ldGhvZCB0aGF0IHdpbGwgYmUgcnVuIG9uIGVhY2ggcGx1Z2luXG4gICAqL1xuICBpdGVyYXRlUGx1Z2lucyAobWV0aG9kKSB7XG4gICAgT2JqZWN0LnZhbHVlcyh0aGlzLiNwbHVnaW5zKS5mbGF0KDEpLmZvckVhY2gobWV0aG9kKVxuICB9XG5cbiAgLyoqXG4gICAqIFVuaW5zdGFsbCBhbmQgcmVtb3ZlIGEgcGx1Z2luLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gaW5zdGFuY2UgVGhlIHBsdWdpbiBpbnN0YW5jZSB0byByZW1vdmUuXG4gICAqL1xuICByZW1vdmVQbHVnaW4gKGluc3RhbmNlKSB7XG4gICAgdGhpcy5sb2coYFJlbW92aW5nIHBsdWdpbiAke2luc3RhbmNlLmlkfWApXG4gICAgdGhpcy5lbWl0KCdwbHVnaW4tcmVtb3ZlJywgaW5zdGFuY2UpXG5cbiAgICBpZiAoaW5zdGFuY2UudW5pbnN0YWxsKSB7XG4gICAgICBpbnN0YW5jZS51bmluc3RhbGwoKVxuICAgIH1cblxuICAgIGNvbnN0IGxpc3QgPSB0aGlzLiNwbHVnaW5zW2luc3RhbmNlLnR5cGVdXG4gICAgLy8gbGlzdC5pbmRleE9mIGZhaWxlZCBoZXJlLCBiZWNhdXNlIFZ1ZTMgY29udmVydGVkIHRoZSBwbHVnaW4gaW5zdGFuY2VcbiAgICAvLyB0byBhIFByb3h5IG9iamVjdCwgd2hpY2ggZmFpbGVkIHRoZSBzdHJpY3QgY29tcGFyaXNvbiB0ZXN0OlxuICAgIC8vIG9iaiAhPT0gb2JqUHJveHlcbiAgICBjb25zdCBpbmRleCA9IGxpc3QuZmluZEluZGV4KGl0ZW0gPT4gaXRlbS5pZCA9PT0gaW5zdGFuY2UuaWQpXG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgbGlzdC5zcGxpY2UoaW5kZXgsIDEpXG4gICAgfVxuXG4gICAgY29uc3Qgc3RhdGUgPSB0aGlzLmdldFN0YXRlKClcbiAgICBjb25zdCB1cGRhdGVkU3RhdGUgPSB7XG4gICAgICBwbHVnaW5zOiB7XG4gICAgICAgIC4uLnN0YXRlLnBsdWdpbnMsXG4gICAgICAgIFtpbnN0YW5jZS5pZF06IHVuZGVmaW5lZCxcbiAgICAgIH0sXG4gICAgfVxuICAgIHRoaXMuc2V0U3RhdGUodXBkYXRlZFN0YXRlKVxuICB9XG5cbiAgLyoqXG4gICAqIFVuaW5zdGFsbCBhbGwgcGx1Z2lucyBhbmQgY2xvc2UgZG93biB0aGlzIFVwcHkgaW5zdGFuY2UuXG4gICAqL1xuICBjbG9zZSAoKSB7XG4gICAgdGhpcy5sb2coYENsb3NpbmcgVXBweSBpbnN0YW5jZSAke3RoaXMub3B0cy5pZH06IHJlbW92aW5nIGFsbCBmaWxlcyBhbmQgdW5pbnN0YWxsaW5nIHBsdWdpbnNgKVxuXG4gICAgdGhpcy5yZXNldCgpXG5cbiAgICB0aGlzLiNzdG9yZVVuc3Vic2NyaWJlKClcblxuICAgIHRoaXMuaXRlcmF0ZVBsdWdpbnMoKHBsdWdpbikgPT4ge1xuICAgICAgdGhpcy5yZW1vdmVQbHVnaW4ocGx1Z2luKVxuICAgIH0pXG5cbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIpIHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdvbmxpbmUnLCB0aGlzLiN1cGRhdGVPbmxpbmVTdGF0dXMpXG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignb2ZmbGluZScsIHRoaXMuI3VwZGF0ZU9ubGluZVN0YXR1cylcbiAgICB9XG4gIH1cblxuICBoaWRlSW5mbyAoKSB7XG4gICAgY29uc3QgeyBpbmZvIH0gPSB0aGlzLmdldFN0YXRlKClcblxuICAgIHRoaXMuc2V0U3RhdGUoeyBpbmZvOiBpbmZvLnNsaWNlKDEpIH0pXG5cbiAgICB0aGlzLmVtaXQoJ2luZm8taGlkZGVuJylcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgaW5mbyBtZXNzYWdlIGluIGBzdGF0ZS5pbmZvYCwgc28gdGhhdCBVSSBwbHVnaW5zIGxpa2UgYEluZm9ybWVyYFxuICAgKiBjYW4gZGlzcGxheSB0aGUgbWVzc2FnZS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmcgfCBvYmplY3R9IG1lc3NhZ2UgTWVzc2FnZSB0byBiZSBkaXNwbGF5ZWQgYnkgdGhlIGluZm9ybWVyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbdHlwZV1cbiAgICogQHBhcmFtIHtudW1iZXJ9IFtkdXJhdGlvbl1cbiAgICovXG4gIGluZm8gKG1lc3NhZ2UsIHR5cGUgPSAnaW5mbycsIGR1cmF0aW9uID0gMzAwMCkge1xuICAgIGNvbnN0IGlzQ29tcGxleE1lc3NhZ2UgPSB0eXBlb2YgbWVzc2FnZSA9PT0gJ29iamVjdCdcblxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgaW5mbzogW1xuICAgICAgICAuLi50aGlzLmdldFN0YXRlKCkuaW5mbyxcbiAgICAgICAge1xuICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgbWVzc2FnZTogaXNDb21wbGV4TWVzc2FnZSA/IG1lc3NhZ2UubWVzc2FnZSA6IG1lc3NhZ2UsXG4gICAgICAgICAgZGV0YWlsczogaXNDb21wbGV4TWVzc2FnZSA/IG1lc3NhZ2UuZGV0YWlscyA6IG51bGwsXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH0pXG5cbiAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMuaGlkZUluZm8oKSwgZHVyYXRpb24pXG5cbiAgICB0aGlzLmVtaXQoJ2luZm8tdmlzaWJsZScpXG4gIH1cblxuICAvKipcbiAgICogUGFzc2VzIG1lc3NhZ2VzIHRvIGEgZnVuY3Rpb24sIHByb3ZpZGVkIGluIGBvcHRzLmxvZ2dlcmAuXG4gICAqIElmIGBvcHRzLmxvZ2dlcjogVXBweS5kZWJ1Z0xvZ2dlcmAgb3IgYG9wdHMuZGVidWc6IHRydWVgLCBsb2dzIHRvIHRoZSBicm93c2VyIGNvbnNvbGUuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfG9iamVjdH0gbWVzc2FnZSB0byBsb2dcbiAgICogQHBhcmFtIHtzdHJpbmd9IFt0eXBlXSBvcHRpb25hbCBgZXJyb3JgIG9yIGB3YXJuaW5nYFxuICAgKi9cbiAgbG9nIChtZXNzYWdlLCB0eXBlKSB7XG4gICAgY29uc3QgeyBsb2dnZXIgfSA9IHRoaXMub3B0c1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSAnZXJyb3InOiBsb2dnZXIuZXJyb3IobWVzc2FnZSk7IGJyZWFrXG4gICAgICBjYXNlICd3YXJuaW5nJzogbG9nZ2VyLndhcm4obWVzc2FnZSk7IGJyZWFrXG4gICAgICBkZWZhdWx0OiBsb2dnZXIuZGVidWcobWVzc2FnZSk7IGJyZWFrXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlc3RvcmUgYW4gdXBsb2FkIGJ5IGl0cyBJRC5cbiAgICovXG4gIHJlc3RvcmUgKHVwbG9hZElEKSB7XG4gICAgdGhpcy5sb2coYENvcmU6IGF0dGVtcHRpbmcgdG8gcmVzdG9yZSB1cGxvYWQgXCIke3VwbG9hZElEfVwiYClcblxuICAgIGlmICghdGhpcy5nZXRTdGF0ZSgpLmN1cnJlbnRVcGxvYWRzW3VwbG9hZElEXSkge1xuICAgICAgdGhpcy4jcmVtb3ZlVXBsb2FkKHVwbG9hZElEKVxuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcignTm9uZXhpc3RlbnQgdXBsb2FkJykpXG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuI3J1blVwbG9hZCh1cGxvYWRJRClcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYW4gdXBsb2FkIGZvciBhIGJ1bmNoIG9mIGZpbGVzLlxuICAgKlxuICAgKiBAcGFyYW0ge0FycmF5PHN0cmluZz59IGZpbGVJRHMgRmlsZSBJRHMgdG8gaW5jbHVkZSBpbiB0aGlzIHVwbG9hZC5cbiAgICogQHJldHVybnMge3N0cmluZ30gSUQgb2YgdGhpcyB1cGxvYWQuXG4gICAqL1xuICAjY3JlYXRlVXBsb2FkIChmaWxlSURzLCBvcHRzID0ge30pIHtcbiAgICAvLyB1cHB5LnJldHJ5QWxsIHNldHMgdGhpcyB0byB0cnVlIOKAlCB3aGVuIHJldHJ5aW5nIHdlIHdhbnQgdG8gaWdub3JlIGBhbGxvd05ld1VwbG9hZDogZmFsc2VgXG4gICAgY29uc3QgeyBmb3JjZUFsbG93TmV3VXBsb2FkID0gZmFsc2UgfSA9IG9wdHNcblxuICAgIGNvbnN0IHsgYWxsb3dOZXdVcGxvYWQsIGN1cnJlbnRVcGxvYWRzIH0gPSB0aGlzLmdldFN0YXRlKClcbiAgICBpZiAoIWFsbG93TmV3VXBsb2FkICYmICFmb3JjZUFsbG93TmV3VXBsb2FkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBjcmVhdGUgYSBuZXcgdXBsb2FkOiBhbHJlYWR5IHVwbG9hZGluZy4nKVxuICAgIH1cblxuICAgIGNvbnN0IHVwbG9hZElEID0gbmFub2lkKClcblxuICAgIHRoaXMuZW1pdCgndXBsb2FkJywge1xuICAgICAgaWQ6IHVwbG9hZElELFxuICAgICAgZmlsZUlEcyxcbiAgICB9KVxuXG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBhbGxvd05ld1VwbG9hZDogdGhpcy5vcHRzLmFsbG93TXVsdGlwbGVVcGxvYWRCYXRjaGVzICE9PSBmYWxzZSAmJiB0aGlzLm9wdHMuYWxsb3dNdWx0aXBsZVVwbG9hZHMgIT09IGZhbHNlLFxuXG4gICAgICBjdXJyZW50VXBsb2Fkczoge1xuICAgICAgICAuLi5jdXJyZW50VXBsb2FkcyxcbiAgICAgICAgW3VwbG9hZElEXToge1xuICAgICAgICAgIGZpbGVJRHMsXG4gICAgICAgICAgc3RlcDogMCxcbiAgICAgICAgICByZXN1bHQ6IHt9LFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9KVxuXG4gICAgcmV0dXJuIHVwbG9hZElEXG4gIH1cblxuICBbU3ltYm9sLmZvcigndXBweSB0ZXN0OiBjcmVhdGVVcGxvYWQnKV0gKC4uLmFyZ3MpIHsgcmV0dXJuIHRoaXMuI2NyZWF0ZVVwbG9hZCguLi5hcmdzKSB9XG5cbiAgI2dldFVwbG9hZCAodXBsb2FkSUQpIHtcbiAgICBjb25zdCB7IGN1cnJlbnRVcGxvYWRzIH0gPSB0aGlzLmdldFN0YXRlKClcblxuICAgIHJldHVybiBjdXJyZW50VXBsb2Fkc1t1cGxvYWRJRF1cbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgZGF0YSB0byBhbiB1cGxvYWQncyByZXN1bHQgb2JqZWN0LlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdXBsb2FkSUQgVGhlIElEIG9mIHRoZSB1cGxvYWQuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhIERhdGEgcHJvcGVydGllcyB0byBhZGQgdG8gdGhlIHJlc3VsdCBvYmplY3QuXG4gICAqL1xuICBhZGRSZXN1bHREYXRhICh1cGxvYWRJRCwgZGF0YSkge1xuICAgIGlmICghdGhpcy4jZ2V0VXBsb2FkKHVwbG9hZElEKSkge1xuICAgICAgdGhpcy5sb2coYE5vdCBzZXR0aW5nIHJlc3VsdCBmb3IgYW4gdXBsb2FkIHRoYXQgaGFzIGJlZW4gcmVtb3ZlZDogJHt1cGxvYWRJRH1gKVxuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGNvbnN0IHsgY3VycmVudFVwbG9hZHMgfSA9IHRoaXMuZ2V0U3RhdGUoKVxuICAgIGNvbnN0IGN1cnJlbnRVcGxvYWQgPSB7IC4uLmN1cnJlbnRVcGxvYWRzW3VwbG9hZElEXSwgcmVzdWx0OiB7IC4uLmN1cnJlbnRVcGxvYWRzW3VwbG9hZElEXS5yZXN1bHQsIC4uLmRhdGEgfSB9XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBjdXJyZW50VXBsb2FkczogeyAuLi5jdXJyZW50VXBsb2FkcywgW3VwbG9hZElEXTogY3VycmVudFVwbG9hZCB9LFxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIGFuIHVwbG9hZCwgZWcuIGlmIGl0IGhhcyBiZWVuIGNhbmNlbGVkIG9yIGNvbXBsZXRlZC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHVwbG9hZElEIFRoZSBJRCBvZiB0aGUgdXBsb2FkLlxuICAgKi9cbiAgI3JlbW92ZVVwbG9hZCAodXBsb2FkSUQpIHtcbiAgICBjb25zdCBjdXJyZW50VXBsb2FkcyA9IHsgLi4udGhpcy5nZXRTdGF0ZSgpLmN1cnJlbnRVcGxvYWRzIH1cbiAgICBkZWxldGUgY3VycmVudFVwbG9hZHNbdXBsb2FkSURdXG5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGN1cnJlbnRVcGxvYWRzLFxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogUnVuIGFuIHVwbG9hZC4gVGhpcyBwaWNrcyB1cCB3aGVyZSBpdCBsZWZ0IG9mZiBpbiBjYXNlIHRoZSB1cGxvYWQgaXMgYmVpbmcgcmVzdG9yZWQuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBhc3luYyAjcnVuVXBsb2FkICh1cGxvYWRJRCkge1xuICAgIGxldCB7IGN1cnJlbnRVcGxvYWRzIH0gPSB0aGlzLmdldFN0YXRlKClcbiAgICBsZXQgY3VycmVudFVwbG9hZCA9IGN1cnJlbnRVcGxvYWRzW3VwbG9hZElEXVxuICAgIGNvbnN0IHJlc3RvcmVTdGVwID0gY3VycmVudFVwbG9hZC5zdGVwIHx8IDBcblxuICAgIGNvbnN0IHN0ZXBzID0gW1xuICAgICAgLi4udGhpcy4jcHJlUHJvY2Vzc29ycyxcbiAgICAgIC4uLnRoaXMuI3VwbG9hZGVycyxcbiAgICAgIC4uLnRoaXMuI3Bvc3RQcm9jZXNzb3JzLFxuICAgIF1cbiAgICB0cnkge1xuICAgICAgZm9yIChsZXQgc3RlcCA9IHJlc3RvcmVTdGVwOyBzdGVwIDwgc3RlcHMubGVuZ3RoOyBzdGVwKyspIHtcbiAgICAgICAgaWYgKCFjdXJyZW50VXBsb2FkKSB7XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBmbiA9IHN0ZXBzW3N0ZXBdXG5cbiAgICAgICAgY29uc3QgdXBkYXRlZFVwbG9hZCA9IHtcbiAgICAgICAgICAuLi5jdXJyZW50VXBsb2FkLFxuICAgICAgICAgIHN0ZXAsXG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBjdXJyZW50VXBsb2Fkczoge1xuICAgICAgICAgICAgLi4uY3VycmVudFVwbG9hZHMsXG4gICAgICAgICAgICBbdXBsb2FkSURdOiB1cGRhdGVkVXBsb2FkLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pXG5cbiAgICAgICAgLy8gVE9ETyBnaXZlIHRoaXMgdGhlIGB1cGRhdGVkVXBsb2FkYCBvYmplY3QgYXMgaXRzIG9ubHkgcGFyYW1ldGVyIG1heWJlP1xuICAgICAgICAvLyBPdGhlcndpc2Ugd2hlbiBtb3JlIG1ldGFkYXRhIG1heSBiZSBhZGRlZCB0byB0aGUgdXBsb2FkIHRoaXMgd291bGQga2VlcCBnZXR0aW5nIG1vcmUgcGFyYW1ldGVyc1xuICAgICAgICBhd2FpdCBmbih1cGRhdGVkVXBsb2FkLmZpbGVJRHMsIHVwbG9hZElEKVxuXG4gICAgICAgIC8vIFVwZGF0ZSBjdXJyZW50VXBsb2FkIHZhbHVlIGluIGNhc2UgaXQgd2FzIG1vZGlmaWVkIGFzeW5jaHJvbm91c2x5LlxuICAgICAgICBjdXJyZW50VXBsb2FkcyA9IHRoaXMuZ2V0U3RhdGUoKS5jdXJyZW50VXBsb2Fkc1xuICAgICAgICBjdXJyZW50VXBsb2FkID0gY3VycmVudFVwbG9hZHNbdXBsb2FkSURdXG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICB0aGlzLmVtaXQoJ2Vycm9yJywgZXJyKVxuICAgICAgdGhpcy4jcmVtb3ZlVXBsb2FkKHVwbG9hZElEKVxuICAgICAgdGhyb3cgZXJyXG4gICAgfVxuXG4gICAgLy8gU2V0IHJlc3VsdCBkYXRhLlxuICAgIGlmIChjdXJyZW50VXBsb2FkKSB7XG4gICAgICAvLyBNYXJrIHBvc3Rwcm9jZXNzaW5nIHN0ZXAgYXMgY29tcGxldGUgaWYgbmVjZXNzYXJ5OyB0aGlzIGFkZHJlc3NlcyBhIGNhc2Ugd2hlcmUgd2UgbWlnaHQgZ2V0XG4gICAgICAvLyBzdHVjayBpbiB0aGUgcG9zdHByb2Nlc3NpbmcgVUkgd2hpbGUgdGhlIHVwbG9hZCBpcyBmdWxseSBjb21wbGV0ZS5cbiAgICAgIC8vIElmIHRoZSBwb3N0cHJvY2Vzc2luZyBzdGVwcyBkbyBub3QgZG8gYW55IHdvcmssIHRoZXkgbWF5IG5vdCBlbWl0IHBvc3Rwcm9jZXNzaW5nIGV2ZW50cyBhdFxuICAgICAgLy8gYWxsLCBhbmQgbmV2ZXIgbWFyayB0aGUgcG9zdHByb2Nlc3NpbmcgYXMgY29tcGxldGUuIFRoaXMgaXMgZmluZSBvbiBpdHMgb3duIGJ1dCB3ZVxuICAgICAgLy8gaW50cm9kdWNlZCBjb2RlIGluIHRoZSBAdXBweS9jb3JlIHVwbG9hZC1zdWNjZXNzIGhhbmRsZXIgdG8gcHJlcGFyZSBwb3N0cHJvY2Vzc2luZyBwcm9ncmVzc1xuICAgICAgLy8gc3RhdGUgaWYgYW55IHBvc3Rwcm9jZXNzb3JzIGFyZSByZWdpc3RlcmVkLiBUaGF0IGlzIHRvIGF2b2lkIGEgXCJmbGFzaCBvZiBjb21wbGV0ZWQgc3RhdGVcIlxuICAgICAgLy8gYmVmb3JlIHRoZSBwb3N0cHJvY2Vzc2luZyBwbHVnaW5zIGNhbiBlbWl0IGV2ZW50cy5cbiAgICAgIC8vXG4gICAgICAvLyBTbywganVzdCBpbiBjYXNlIGFuIHVwbG9hZCB3aXRoIHBvc3Rwcm9jZXNzaW5nIHBsdWdpbnMgKmhhcyogY29tcGxldGVkICp3aXRob3V0KiBlbWl0dGluZ1xuICAgICAgLy8gcG9zdHByb2Nlc3NpbmcgY29tcGxldGlvbiwgd2UgZG8gaXQgaW5zdGVhZC5cbiAgICAgIGN1cnJlbnRVcGxvYWQuZmlsZUlEcy5mb3JFYWNoKChmaWxlSUQpID0+IHtcbiAgICAgICAgY29uc3QgZmlsZSA9IHRoaXMuZ2V0RmlsZShmaWxlSUQpXG4gICAgICAgIGlmIChmaWxlICYmIGZpbGUucHJvZ3Jlc3MucG9zdHByb2Nlc3MpIHtcbiAgICAgICAgICB0aGlzLmVtaXQoJ3Bvc3Rwcm9jZXNzLWNvbXBsZXRlJywgZmlsZSlcbiAgICAgICAgfVxuICAgICAgfSlcblxuICAgICAgY29uc3QgZmlsZXMgPSBjdXJyZW50VXBsb2FkLmZpbGVJRHMubWFwKChmaWxlSUQpID0+IHRoaXMuZ2V0RmlsZShmaWxlSUQpKVxuICAgICAgY29uc3Qgc3VjY2Vzc2Z1bCA9IGZpbGVzLmZpbHRlcigoZmlsZSkgPT4gIWZpbGUuZXJyb3IpXG4gICAgICBjb25zdCBmYWlsZWQgPSBmaWxlcy5maWx0ZXIoKGZpbGUpID0+IGZpbGUuZXJyb3IpXG4gICAgICBhd2FpdCB0aGlzLmFkZFJlc3VsdERhdGEodXBsb2FkSUQsIHsgc3VjY2Vzc2Z1bCwgZmFpbGVkLCB1cGxvYWRJRCB9KVxuXG4gICAgICAvLyBVcGRhdGUgY3VycmVudFVwbG9hZCB2YWx1ZSBpbiBjYXNlIGl0IHdhcyBtb2RpZmllZCBhc3luY2hyb25vdXNseS5cbiAgICAgIGN1cnJlbnRVcGxvYWRzID0gdGhpcy5nZXRTdGF0ZSgpLmN1cnJlbnRVcGxvYWRzXG4gICAgICBjdXJyZW50VXBsb2FkID0gY3VycmVudFVwbG9hZHNbdXBsb2FkSURdXG4gICAgfVxuICAgIC8vIEVtaXQgY29tcGxldGlvbiBldmVudHMuXG4gICAgLy8gVGhpcyBpcyBpbiBhIHNlcGFyYXRlIGZ1bmN0aW9uIHNvIHRoYXQgdGhlIGBjdXJyZW50VXBsb2Fkc2AgdmFyaWFibGVcbiAgICAvLyBhbHdheXMgcmVmZXJzIHRvIHRoZSBsYXRlc3Qgc3RhdGUuIEluIHRoZSBoYW5kbGVyIHJpZ2h0IGFib3ZlIGl0IHJlZmVyc1xuICAgIC8vIHRvIGFuIG91dGRhdGVkIG9iamVjdCB3aXRob3V0IHRoZSBgLnJlc3VsdGAgcHJvcGVydHkuXG4gICAgbGV0IHJlc3VsdFxuICAgIGlmIChjdXJyZW50VXBsb2FkKSB7XG4gICAgICByZXN1bHQgPSBjdXJyZW50VXBsb2FkLnJlc3VsdFxuICAgICAgdGhpcy5lbWl0KCdjb21wbGV0ZScsIHJlc3VsdClcblxuICAgICAgdGhpcy4jcmVtb3ZlVXBsb2FkKHVwbG9hZElEKVxuICAgIH1cbiAgICBpZiAocmVzdWx0ID09IG51bGwpIHtcbiAgICAgIHRoaXMubG9nKGBOb3Qgc2V0dGluZyByZXN1bHQgZm9yIGFuIHVwbG9hZCB0aGF0IGhhcyBiZWVuIHJlbW92ZWQ6ICR7dXBsb2FkSUR9YClcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG5cbiAgLyoqXG4gICAqIFN0YXJ0IGFuIHVwbG9hZCBmb3IgYWxsIHRoZSBmaWxlcyB0aGF0IGFyZSBub3QgY3VycmVudGx5IGJlaW5nIHVwbG9hZGVkLlxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX1cbiAgICovXG4gIHVwbG9hZCAoKSB7XG4gICAgaWYgKCF0aGlzLiNwbHVnaW5zLnVwbG9hZGVyPy5sZW5ndGgpIHtcbiAgICAgIHRoaXMubG9nKCdObyB1cGxvYWRlciB0eXBlIHBsdWdpbnMgYXJlIHVzZWQnLCAnd2FybmluZycpXG4gICAgfVxuXG4gICAgbGV0IHsgZmlsZXMgfSA9IHRoaXMuZ2V0U3RhdGUoKVxuXG4gICAgY29uc3Qgb25CZWZvcmVVcGxvYWRSZXN1bHQgPSB0aGlzLm9wdHMub25CZWZvcmVVcGxvYWQoZmlsZXMpXG5cbiAgICBpZiAob25CZWZvcmVVcGxvYWRSZXN1bHQgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKCdOb3Qgc3RhcnRpbmcgdGhlIHVwbG9hZCBiZWNhdXNlIG9uQmVmb3JlVXBsb2FkIHJldHVybmVkIGZhbHNlJykpXG4gICAgfVxuXG4gICAgaWYgKG9uQmVmb3JlVXBsb2FkUmVzdWx0ICYmIHR5cGVvZiBvbkJlZm9yZVVwbG9hZFJlc3VsdCA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGZpbGVzID0gb25CZWZvcmVVcGxvYWRSZXN1bHRcbiAgICAgIC8vIFVwZGF0aW5nIGZpbGVzIGluIHN0YXRlLCBiZWNhdXNlIHVwbG9hZGVyIHBsdWdpbnMgcmVjZWl2ZSBmaWxlIElEcyxcbiAgICAgIC8vIGFuZCB0aGVuIGZldGNoIHRoZSBhY3R1YWwgZmlsZSBvYmplY3QgZnJvbSBzdGF0ZVxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGZpbGVzLFxuICAgICAgfSlcbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKClcbiAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgdGhpcy4jY2hlY2tNaW5OdW1iZXJPZkZpbGVzKGZpbGVzKVxuICAgICAgICB0aGlzLiNjaGVja1JlcXVpcmVkTWV0YUZpZWxkcyhmaWxlcylcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICB0aGlzLiNzaG93T3JMb2dFcnJvckFuZFRocm93KGVycilcbiAgICAgIH0pXG4gICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgIGNvbnN0IHsgY3VycmVudFVwbG9hZHMgfSA9IHRoaXMuZ2V0U3RhdGUoKVxuICAgICAgICAvLyBnZXQgYSBsaXN0IG9mIGZpbGVzIHRoYXQgYXJlIGN1cnJlbnRseSBhc3NpZ25lZCB0byB1cGxvYWRzXG4gICAgICAgIGNvbnN0IGN1cnJlbnRseVVwbG9hZGluZ0ZpbGVzID0gT2JqZWN0LnZhbHVlcyhjdXJyZW50VXBsb2FkcykuZmxhdE1hcChjdXJyID0+IGN1cnIuZmlsZUlEcylcblxuICAgICAgICBjb25zdCB3YWl0aW5nRmlsZUlEcyA9IFtdXG4gICAgICAgIE9iamVjdC5rZXlzKGZpbGVzKS5mb3JFYWNoKChmaWxlSUQpID0+IHtcbiAgICAgICAgICBjb25zdCBmaWxlID0gdGhpcy5nZXRGaWxlKGZpbGVJRClcbiAgICAgICAgICAvLyBpZiB0aGUgZmlsZSBoYXNuJ3Qgc3RhcnRlZCB1cGxvYWRpbmcgYW5kIGhhc24ndCBhbHJlYWR5IGJlZW4gYXNzaWduZWQgdG8gYW4gdXBsb2FkLi5cbiAgICAgICAgICBpZiAoKCFmaWxlLnByb2dyZXNzLnVwbG9hZFN0YXJ0ZWQpICYmIChjdXJyZW50bHlVcGxvYWRpbmdGaWxlcy5pbmRleE9mKGZpbGVJRCkgPT09IC0xKSkge1xuICAgICAgICAgICAgd2FpdGluZ0ZpbGVJRHMucHVzaChmaWxlLmlkKVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcblxuICAgICAgICBjb25zdCB1cGxvYWRJRCA9IHRoaXMuI2NyZWF0ZVVwbG9hZCh3YWl0aW5nRmlsZUlEcylcbiAgICAgICAgcmV0dXJuIHRoaXMuI3J1blVwbG9hZCh1cGxvYWRJRClcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICB0aGlzLiNzaG93T3JMb2dFcnJvckFuZFRocm93KGVyciwge1xuICAgICAgICAgIHNob3dJbmZvcm1lcjogZmFsc2UsXG4gICAgICAgIH0pXG4gICAgICB9KVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gVXBweVxuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXRGaWxlTmFtZSAoZmlsZVR5cGUsIGZpbGVEZXNjcmlwdG9yKSB7XG4gIGlmIChmaWxlRGVzY3JpcHRvci5uYW1lKSB7XG4gICAgcmV0dXJuIGZpbGVEZXNjcmlwdG9yLm5hbWVcbiAgfVxuXG4gIGlmIChmaWxlVHlwZS5zcGxpdCgnLycpWzBdID09PSAnaW1hZ2UnKSB7XG4gICAgcmV0dXJuIGAke2ZpbGVUeXBlLnNwbGl0KCcvJylbMF19LiR7ZmlsZVR5cGUuc3BsaXQoJy8nKVsxXX1gXG4gIH1cblxuICByZXR1cm4gJ25vbmFtZSdcbn1cbiIsIid1c2Ugc3RyaWN0J1xuXG5jb25zdCBVcHB5ID0gcmVxdWlyZSgnLi9VcHB5JylcbmNvbnN0IFVJUGx1Z2luID0gcmVxdWlyZSgnLi9VSVBsdWdpbicpXG5jb25zdCBCYXNlUGx1Z2luID0gcmVxdWlyZSgnLi9CYXNlUGx1Z2luJylcbmNvbnN0IHsgZGVidWdMb2dnZXIgfSA9IHJlcXVpcmUoJy4vbG9nZ2VycycpXG5cbm1vZHVsZS5leHBvcnRzID0gVXBweVxubW9kdWxlLmV4cG9ydHMuVXBweSA9IFVwcHlcbm1vZHVsZS5leHBvcnRzLlVJUGx1Z2luID0gVUlQbHVnaW5cbm1vZHVsZS5leHBvcnRzLkJhc2VQbHVnaW4gPSBCYXNlUGx1Z2luXG5tb2R1bGUuZXhwb3J0cy5kZWJ1Z0xvZ2dlciA9IGRlYnVnTG9nZ2VyXG4iLCJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgc3RyaW5nczoge1xuICAgIGFkZEJ1bGtGaWxlc0ZhaWxlZDoge1xuICAgICAgMDogJ0ZhaWxlZCB0byBhZGQgJXtzbWFydF9jb3VudH0gZmlsZSBkdWUgdG8gYW4gaW50ZXJuYWwgZXJyb3InLFxuICAgICAgMTogJ0ZhaWxlZCB0byBhZGQgJXtzbWFydF9jb3VudH0gZmlsZXMgZHVlIHRvIGludGVybmFsIGVycm9ycycsXG4gICAgfSxcbiAgICB5b3VDYW5Pbmx5VXBsb2FkWDoge1xuICAgICAgMDogJ1lvdSBjYW4gb25seSB1cGxvYWQgJXtzbWFydF9jb3VudH0gZmlsZScsXG4gICAgICAxOiAnWW91IGNhbiBvbmx5IHVwbG9hZCAle3NtYXJ0X2NvdW50fSBmaWxlcycsXG4gICAgfSxcbiAgICB5b3VIYXZlVG9BdExlYXN0U2VsZWN0WDoge1xuICAgICAgMDogJ1lvdSBoYXZlIHRvIHNlbGVjdCBhdCBsZWFzdCAle3NtYXJ0X2NvdW50fSBmaWxlJyxcbiAgICAgIDE6ICdZb3UgaGF2ZSB0byBzZWxlY3QgYXQgbGVhc3QgJXtzbWFydF9jb3VudH0gZmlsZXMnLFxuICAgIH0sXG4gICAgZXhjZWVkc1NpemU6ICcle2ZpbGV9IGV4Y2VlZHMgbWF4aW11bSBhbGxvd2VkIHNpemUgb2YgJXtzaXplfScsXG4gICAgbWlzc2luZ1JlcXVpcmVkTWV0YUZpZWxkOiAnTWlzc2luZyByZXF1aXJlZCBtZXRhIGZpZWxkcycsXG4gICAgbWlzc2luZ1JlcXVpcmVkTWV0YUZpZWxkT25GaWxlOlxuICAgICAgJ01pc3NpbmcgcmVxdWlyZWQgbWV0YSBmaWVsZHMgaW4gJXtmaWxlTmFtZX0nLFxuICAgIGluZmVyaW9yU2l6ZTogJ1RoaXMgZmlsZSBpcyBzbWFsbGVyIHRoYW4gdGhlIGFsbG93ZWQgc2l6ZSBvZiAle3NpemV9JyxcbiAgICB5b3VDYW5Pbmx5VXBsb2FkRmlsZVR5cGVzOiAnWW91IGNhbiBvbmx5IHVwbG9hZDogJXt0eXBlc30nLFxuICAgIG5vTW9yZUZpbGVzQWxsb3dlZDogJ0Nhbm5vdCBhZGQgbW9yZSBmaWxlcycsXG4gICAgbm9EdXBsaWNhdGVzOlxuICAgICAgXCJDYW5ub3QgYWRkIHRoZSBkdXBsaWNhdGUgZmlsZSAnJXtmaWxlTmFtZX0nLCBpdCBhbHJlYWR5IGV4aXN0c1wiLFxuICAgIGNvbXBhbmlvbkVycm9yOiAnQ29ubmVjdGlvbiB3aXRoIENvbXBhbmlvbiBmYWlsZWQnLFxuICAgIGF1dGhBYm9ydGVkOiAnQXV0aGVudGljYXRpb24gYWJvcnRlZCcsXG4gICAgY29tcGFuaW9uVW5hdXRob3JpemVIaW50OlxuICAgICAgJ1RvIHVuYXV0aG9yaXplIHRvIHlvdXIgJXtwcm92aWRlcn0gYWNjb3VudCwgcGxlYXNlIGdvIHRvICV7dXJsfScsXG4gICAgZmFpbGVkVG9VcGxvYWQ6ICdGYWlsZWQgdG8gdXBsb2FkICV7ZmlsZX0nLFxuICAgIG5vSW50ZXJuZXRDb25uZWN0aW9uOiAnTm8gSW50ZXJuZXQgY29ubmVjdGlvbicsXG4gICAgY29ubmVjdGVkVG9JbnRlcm5ldDogJ0Nvbm5lY3RlZCB0byB0aGUgSW50ZXJuZXQnLFxuICAgIC8vIFN0cmluZ3MgZm9yIHJlbW90ZSBwcm92aWRlcnNcbiAgICBub0ZpbGVzRm91bmQ6ICdZb3UgaGF2ZSBubyBmaWxlcyBvciBmb2xkZXJzIGhlcmUnLFxuICAgIHNlbGVjdFg6IHtcbiAgICAgIDA6ICdTZWxlY3QgJXtzbWFydF9jb3VudH0nLFxuICAgICAgMTogJ1NlbGVjdCAle3NtYXJ0X2NvdW50fScsXG4gICAgfSxcbiAgICBhbGxGaWxlc0Zyb21Gb2xkZXJOYW1lZDogJ0FsbCBmaWxlcyBmcm9tIGZvbGRlciAle25hbWV9JyxcbiAgICBvcGVuRm9sZGVyTmFtZWQ6ICdPcGVuIGZvbGRlciAle25hbWV9JyxcbiAgICBjYW5jZWw6ICdDYW5jZWwnLFxuICAgIGxvZ091dDogJ0xvZyBvdXQnLFxuICAgIGZpbHRlcjogJ0ZpbHRlcicsXG4gICAgcmVzZXRGaWx0ZXI6ICdSZXNldCBmaWx0ZXInLFxuICAgIGxvYWRpbmc6ICdMb2FkaW5nLi4uJyxcbiAgICBhdXRoZW50aWNhdGVXaXRoVGl0bGU6XG4gICAgICAnUGxlYXNlIGF1dGhlbnRpY2F0ZSB3aXRoICV7cGx1Z2luTmFtZX0gdG8gc2VsZWN0IGZpbGVzJyxcbiAgICBhdXRoZW50aWNhdGVXaXRoOiAnQ29ubmVjdCB0byAle3BsdWdpbk5hbWV9JyxcbiAgICBzaWduSW5XaXRoR29vZ2xlOiAnU2lnbiBpbiB3aXRoIEdvb2dsZScsXG4gICAgc2VhcmNoSW1hZ2VzOiAnU2VhcmNoIGZvciBpbWFnZXMnLFxuICAgIGVudGVyVGV4dFRvU2VhcmNoOiAnRW50ZXIgdGV4dCB0byBzZWFyY2ggZm9yIGltYWdlcycsXG4gICAgYmFja1RvU2VhcmNoOiAnQmFjayB0byBTZWFyY2gnLFxuICAgIGVtcHR5Rm9sZGVyQWRkZWQ6ICdObyBmaWxlcyB3ZXJlIGFkZGVkIGZyb20gZW1wdHkgZm9sZGVyJyxcbiAgICBmb2xkZXJBbHJlYWR5QWRkZWQ6ICdUaGUgZm9sZGVyIFwiJXtmb2xkZXJ9XCIgd2FzIGFscmVhZHkgYWRkZWQnLFxuICAgIGZvbGRlckFkZGVkOiB7XG4gICAgICAwOiAnQWRkZWQgJXtzbWFydF9jb3VudH0gZmlsZSBmcm9tICV7Zm9sZGVyfScsXG4gICAgICAxOiAnQWRkZWQgJXtzbWFydF9jb3VudH0gZmlsZXMgZnJvbSAle2ZvbGRlcn0nLFxuICAgIH0sXG4gIH0sXG59XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlICovXG5jb25zdCBnZXRUaW1lU3RhbXAgPSByZXF1aXJlKCdAdXBweS91dGlscy9saWIvZ2V0VGltZVN0YW1wJylcblxuLy8gU3dhbGxvdyBhbGwgbG9ncywgZXhjZXB0IGVycm9ycy5cbi8vIGRlZmF1bHQgaWYgbG9nZ2VyIGlzIG5vdCBzZXQgb3IgZGVidWc6IGZhbHNlXG5jb25zdCBqdXN0RXJyb3JzTG9nZ2VyID0ge1xuICBkZWJ1ZzogKCkgPT4ge30sXG4gIHdhcm46ICgpID0+IHt9LFxuICBlcnJvcjogKC4uLmFyZ3MpID0+IGNvbnNvbGUuZXJyb3IoYFtVcHB5XSBbJHtnZXRUaW1lU3RhbXAoKX1dYCwgLi4uYXJncyksXG59XG5cbi8vIFByaW50IGxvZ3MgdG8gY29uc29sZSB3aXRoIG5hbWVzcGFjZSArIHRpbWVzdGFtcCxcbi8vIHNldCBieSBsb2dnZXI6IFVwcHkuZGVidWdMb2dnZXIgb3IgZGVidWc6IHRydWVcbmNvbnN0IGRlYnVnTG9nZ2VyID0ge1xuICBkZWJ1ZzogKC4uLmFyZ3MpID0+IGNvbnNvbGUuZGVidWcoYFtVcHB5XSBbJHtnZXRUaW1lU3RhbXAoKX1dYCwgLi4uYXJncyksXG4gIHdhcm46ICguLi5hcmdzKSA9PiBjb25zb2xlLndhcm4oYFtVcHB5XSBbJHtnZXRUaW1lU3RhbXAoKX1dYCwgLi4uYXJncyksXG4gIGVycm9yOiAoLi4uYXJncykgPT4gY29uc29sZS5lcnJvcihgW1VwcHldIFske2dldFRpbWVTdGFtcCgpfV1gLCAuLi5hcmdzKSxcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGp1c3RFcnJvcnNMb2dnZXIsXG4gIGRlYnVnTG9nZ2VyLFxufVxuIiwiLy8gRWRnZSAxNS54IGRvZXMgbm90IGZpcmUgJ3Byb2dyZXNzJyBldmVudHMgb24gdXBsb2Fkcy5cbi8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vdHJhbnNsb2FkaXQvdXBweS9pc3N1ZXMvOTQ1XG4vLyBBbmQgaHR0cHM6Ly9kZXZlbG9wZXIubWljcm9zb2Z0LmNvbS9lbi11cy9taWNyb3NvZnQtZWRnZS9wbGF0Zm9ybS9pc3N1ZXMvMTIyMjQ1MTAvXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHN1cHBvcnRzVXBsb2FkUHJvZ3Jlc3MgKHVzZXJBZ2VudCkge1xuICAvLyBBbGxvdyBwYXNzaW5nIGluIHVzZXJBZ2VudCBmb3IgdGVzdHNcbiAgaWYgKHVzZXJBZ2VudCA9PSBudWxsKSB7XG4gICAgdXNlckFnZW50ID0gdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgPyBuYXZpZ2F0b3IudXNlckFnZW50IDogbnVsbFxuICB9XG4gIC8vIEFzc3VtZSBpdCB3b3JrcyBiZWNhdXNlIGJhc2ljYWxseSBldmVyeXRoaW5nIHN1cHBvcnRzIHByb2dyZXNzIGV2ZW50cy5cbiAgaWYgKCF1c2VyQWdlbnQpIHJldHVybiB0cnVlXG5cbiAgY29uc3QgbSA9IC9FZGdlXFwvKFxcZCtcXC5cXGQrKS8uZXhlYyh1c2VyQWdlbnQpXG4gIGlmICghbSkgcmV0dXJuIHRydWVcblxuICBjb25zdCBlZGdlVmVyc2lvbiA9IG1bMV1cbiAgbGV0IFttYWpvciwgbWlub3JdID0gZWRnZVZlcnNpb24uc3BsaXQoJy4nKVxuICBtYWpvciA9IHBhcnNlSW50KG1ham9yLCAxMClcbiAgbWlub3IgPSBwYXJzZUludChtaW5vciwgMTApXG5cbiAgLy8gV29ya2VkIGJlZm9yZTpcbiAgLy8gRWRnZSA0MC4xNTA2My4wLjBcbiAgLy8gTWljcm9zb2Z0IEVkZ2VIVE1MIDE1LjE1MDYzXG4gIGlmIChtYWpvciA8IDE1IHx8IChtYWpvciA9PT0gMTUgJiYgbWlub3IgPCAxNTA2MykpIHtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgLy8gRml4ZWQgaW46XG4gIC8vIE1pY3Jvc29mdCBFZGdlSFRNTCAxOC4xODIxOFxuICBpZiAobWFqb3IgPiAxOCB8fCAobWFqb3IgPT09IDE4ICYmIG1pbm9yID49IDE4MjE4KSkge1xuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICAvLyBvdGhlciB2ZXJzaW9ucyBkb24ndCB3b3JrLlxuICByZXR1cm4gZmFsc2Vcbn1cbiIsImNvbnN0IHsgaCwgQ29tcG9uZW50IH0gPSByZXF1aXJlKCdwcmVhY3QnKVxuXG5jbGFzcyBBZGRGaWxlcyBleHRlbmRzIENvbXBvbmVudCB7XG4gIHRyaWdnZXJGaWxlSW5wdXRDbGljayA9ICgpID0+IHtcbiAgICB0aGlzLmZpbGVJbnB1dC5jbGljaygpXG4gIH1cblxuICB0cmlnZ2VyRm9sZGVySW5wdXRDbGljayA9ICgpID0+IHtcbiAgICB0aGlzLmZvbGRlcklucHV0LmNsaWNrKClcbiAgfVxuXG4gIG9uRmlsZUlucHV0Q2hhbmdlID0gKGV2ZW50KSA9PiB7XG4gICAgdGhpcy5wcm9wcy5oYW5kbGVJbnB1dENoYW5nZShldmVudClcblxuICAgIC8vIFdlIGNsZWFyIHRoZSBpbnB1dCBhZnRlciBhIGZpbGUgaXMgc2VsZWN0ZWQsIGJlY2F1c2Ugb3RoZXJ3aXNlXG4gICAgLy8gY2hhbmdlIGV2ZW50IGlzIG5vdCBmaXJlZCBpbiBDaHJvbWUgYW5kIFNhZmFyaSB3aGVuIGEgZmlsZVxuICAgIC8vIHdpdGggdGhlIHNhbWUgbmFtZSBpcyBzZWxlY3RlZC5cbiAgICAvLyBfX19XaHkgbm90IHVzZSB2YWx1ZT1cIlwiIG9uIDxpbnB1dC8+IGluc3RlYWQ/XG4gICAgLy8gICAgQmVjYXVzZSBpZiB3ZSB1c2UgdGhhdCBtZXRob2Qgb2YgY2xlYXJpbmcgdGhlIGlucHV0LFxuICAgIC8vICAgIENocm9tZSB3aWxsIG5vdCB0cmlnZ2VyIGNoYW5nZSBpZiB3ZSBkcm9wIHRoZSBzYW1lIGZpbGUgdHdpY2UgKElzc3VlICM3NjgpLlxuICAgIGV2ZW50LnRhcmdldC52YWx1ZSA9IG51bGxcbiAgfVxuXG4gIHJlbmRlckhpZGRlbklucHV0ID0gKGlzRm9sZGVyLCByZWZDYWxsYmFjaykgPT4ge1xuICAgIHJldHVybiAoXG4gICAgICA8aW5wdXRcbiAgICAgICAgY2xhc3NOYW1lPVwidXBweS1EYXNoYm9hcmQtaW5wdXRcIlxuICAgICAgICBoaWRkZW5cbiAgICAgICAgYXJpYS1oaWRkZW49XCJ0cnVlXCJcbiAgICAgICAgdGFiSW5kZXg9ey0xfVxuICAgICAgICB3ZWJraXRkaXJlY3Rvcnk9e2lzRm9sZGVyfVxuICAgICAgICB0eXBlPVwiZmlsZVwiXG4gICAgICAgIG5hbWU9XCJmaWxlc1tdXCJcbiAgICAgICAgbXVsdGlwbGU9e3RoaXMucHJvcHMubWF4TnVtYmVyT2ZGaWxlcyAhPT0gMX1cbiAgICAgICAgb25DaGFuZ2U9e3RoaXMub25GaWxlSW5wdXRDaGFuZ2V9XG4gICAgICAgIGFjY2VwdD17dGhpcy5wcm9wcy5hbGxvd2VkRmlsZVR5cGVzfVxuICAgICAgICByZWY9e3JlZkNhbGxiYWNrfVxuICAgICAgLz5cbiAgICApXG4gIH1cblxuICByZW5kZXJNeURldmljZUFjcXVpcmVyID0gKCkgPT4ge1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2XG4gICAgICAgIGNsYXNzTmFtZT1cInVwcHktRGFzaGJvYXJkVGFiXCJcbiAgICAgICAgcm9sZT1cInByZXNlbnRhdGlvblwiXG4gICAgICAgIGRhdGEtdXBweS1hY3F1aXJlci1pZD1cIk15RGV2aWNlXCJcbiAgICAgID5cbiAgICAgICAgPGJ1dHRvblxuICAgICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgICAgIGNsYXNzTmFtZT1cInVwcHktdS1yZXNldCB1cHB5LWMtYnRuIHVwcHktRGFzaGJvYXJkVGFiLWJ0blwiXG4gICAgICAgICAgcm9sZT1cInRhYlwiXG4gICAgICAgICAgdGFiSW5kZXg9ezB9XG4gICAgICAgICAgZGF0YS11cHB5LXN1cGVyLWZvY3VzYWJsZVxuICAgICAgICAgIG9uQ2xpY2s9e3RoaXMudHJpZ2dlckZpbGVJbnB1dENsaWNrfVxuICAgICAgICA+XG4gICAgICAgICAgPHN2ZyBhcmlhLWhpZGRlbj1cInRydWVcIiBmb2N1c2FibGU9XCJmYWxzZVwiIHdpZHRoPVwiMzJcIiBoZWlnaHQ9XCIzMlwiIHZpZXdCb3g9XCIwIDAgMzIgMzJcIj5cbiAgICAgICAgICAgIDxnIGZpbGw9XCJub25lXCIgZmlsbFJ1bGU9XCJldmVub2RkXCI+XG4gICAgICAgICAgICAgIDxyZWN0IGNsYXNzTmFtZT1cInVwcHktUHJvdmlkZXJJY29uQmdcIiB3aWR0aD1cIjMyXCIgaGVpZ2h0PVwiMzJcIiByeD1cIjE2XCIgZmlsbD1cIiMyMjc1RDdcIiAvPlxuICAgICAgICAgICAgICA8cGF0aCBkPVwiTTIxLjk3MyAyMS4xNTJIOS44NjNsLTEuMTA4LTUuMDg3aDE0LjQ2NGwtMS4yNDYgNS4wODd6TTkuOTM1IDExLjM3aDMuOTU4bC44ODYgMS40NDRhLjY3My42NzMgMCAwIDAgLjU4NS4zMTZoNi41MDZ2MS4zN0g5LjkzNXYtMy4xM3ptMTQuODk4IDMuNDRhLjc5My43OTMgMCAwIDAtLjYxNi0uMzFoLS45Nzh2LTIuMTI2YzAtLjM3OS0uMjc1LS42MTMtLjY1My0uNjEzSDE1Ljc1bC0uODg2LTEuNDQ1YS42NzMuNjczIDAgMCAwLS41ODUtLjMxNkg5LjIzMmMtLjM3OCAwLS42NjcuMjA5LS42NjcuNTg3VjE0LjVoLS43ODJhLjc5My43OTMgMCAwIDAtLjYxLjMwMy43OTUuNzk1IDAgMCAwLS4xNTUuNjYzbDEuNDUgNi42MzNjLjA3OC4zNi4zOTYuNjE4Ljc2NC42MThoMTMuMzU0Yy4zNiAwIC42NzQtLjI0Ni43Ni0uNTk1bDEuNjMxLTYuNjM2YS43OTUuNzk1IDAgMCAwLS4xNDQtLjY3NXpcIiBmaWxsPVwiI0ZGRlwiIC8+XG4gICAgICAgICAgICA8L2c+XG4gICAgICAgICAgPC9zdmc+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ1cHB5LURhc2hib2FyZFRhYi1uYW1lXCI+e3RoaXMucHJvcHMuaTE4bignbXlEZXZpY2UnKX08L2Rpdj5cbiAgICAgICAgPC9idXR0b24+XG4gICAgICA8L2Rpdj5cbiAgICApXG4gIH1cblxuICByZW5kZXJCcm93c2VCdXR0b24gPSAodGV4dCwgb25DbGlja0ZuKSA9PiB7XG4gICAgY29uc3QgbnVtYmVyT2ZBY3F1aXJlcnMgPSB0aGlzLnByb3BzLmFjcXVpcmVycy5sZW5ndGhcbiAgICByZXR1cm4gKFxuICAgICAgPGJ1dHRvblxuICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgY2xhc3NOYW1lPVwidXBweS11LXJlc2V0IHVwcHktRGFzaGJvYXJkLWJyb3dzZVwiXG4gICAgICAgIG9uQ2xpY2s9e29uQ2xpY2tGbn1cbiAgICAgICAgZGF0YS11cHB5LXN1cGVyLWZvY3VzYWJsZT17bnVtYmVyT2ZBY3F1aXJlcnMgPT09IDB9XG4gICAgICA+XG4gICAgICAgIHt0ZXh0fVxuICAgICAgPC9idXR0b24+XG4gICAgKVxuICB9XG5cbiAgcmVuZGVyRHJvcFBhc3RlQnJvd3NlVGFnbGluZSA9ICgpID0+IHtcbiAgICBjb25zdCBudW1iZXJPZkFjcXVpcmVycyA9IHRoaXMucHJvcHMuYWNxdWlyZXJzLmxlbmd0aFxuICAgIGNvbnN0IGJyb3dzZUZpbGVzID0gdGhpcy5yZW5kZXJCcm93c2VCdXR0b24odGhpcy5wcm9wcy5pMThuKCdicm93c2VGaWxlcycpLCB0aGlzLnRyaWdnZXJGaWxlSW5wdXRDbGljaylcbiAgICBjb25zdCBicm93c2VGb2xkZXJzID0gdGhpcy5yZW5kZXJCcm93c2VCdXR0b24odGhpcy5wcm9wcy5pMThuKCdicm93c2VGb2xkZXJzJyksIHRoaXMudHJpZ2dlckZvbGRlcklucHV0Q2xpY2spXG5cbiAgICAvLyBpbiBvcmRlciB0byBrZWVwIHRoZSBpMThuIENhbWVsQ2FzZSBhbmQgb3B0aW9ucyBsb3dlciAoYXMgYXJlIGRlZmF1bHRzKSB3ZSB3aWxsIHdhbnQgdG8gdHJhbnNmb3JtIGEgbG93ZXJcbiAgICAvLyB0byBDYW1lbFxuICAgIGNvbnN0IGxvd2VyRk1TZWxlY3Rpb25UeXBlID0gdGhpcy5wcm9wcy5maWxlTWFuYWdlclNlbGVjdGlvblR5cGVcbiAgICBjb25zdCBjYW1lbEZNU2VsZWN0aW9uVHlwZSA9IGxvd2VyRk1TZWxlY3Rpb25UeXBlLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgbG93ZXJGTVNlbGVjdGlvblR5cGUuc2xpY2UoMSlcblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzPVwidXBweS1EYXNoYm9hcmQtQWRkRmlsZXMtdGl0bGVcIj5cbiAgICAgICAge1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXN0ZWQtdGVybmFyeVxuICAgICAgICAgIHRoaXMucHJvcHMuZGlzYWJsZUxvY2FsRmlsZXMgPyB0aGlzLnByb3BzLmkxOG4oJ2ltcG9ydEZpbGVzJylcbiAgICAgICAgICAgIDogbnVtYmVyT2ZBY3F1aXJlcnMgPiAwXG4gICAgICAgICAgICAgID8gdGhpcy5wcm9wcy5pMThuQXJyYXkoYGRyb3BQYXN0ZUltcG9ydCR7Y2FtZWxGTVNlbGVjdGlvblR5cGV9YCwgeyBicm93c2VGaWxlcywgYnJvd3NlRm9sZGVycywgYnJvd3NlOiBicm93c2VGaWxlcyB9KVxuICAgICAgICAgICAgICA6IHRoaXMucHJvcHMuaTE4bkFycmF5KGBkcm9wUGFzdGUke2NhbWVsRk1TZWxlY3Rpb25UeXBlfWAsIHsgYnJvd3NlRmlsZXMsIGJyb3dzZUZvbGRlcnMsIGJyb3dzZTogYnJvd3NlRmlsZXMgfSlcbiAgICAgICAgfVxuICAgICAgPC9kaXY+XG4gICAgKVxuICB9XG5cbiAgW1N5bWJvbC5mb3IoJ3VwcHkgdGVzdDogZGlzYWJsZSB1bnVzZWQgbG9jYWxlIGtleSB3YXJuaW5nJyldICgpIHtcbiAgICAvLyBUaG9zZSBhcmUgYWN0dWFsbHkgdXNlZCBpbiBgcmVuZGVyRHJvcFBhc3RlQnJvd3NlVGFnbGluZWAgbWV0aG9kLlxuICAgIHRoaXMucHJvcHMuaTE4bkFycmF5KCdkcm9wUGFzdGVCb3RoJylcbiAgICB0aGlzLnByb3BzLmkxOG5BcnJheSgnZHJvcFBhc3RlRmlsZXMnKVxuICAgIHRoaXMucHJvcHMuaTE4bkFycmF5KCdkcm9wUGFzdGVGb2xkZXJzJylcbiAgICB0aGlzLnByb3BzLmkxOG5BcnJheSgnZHJvcFBhc3RlSW1wb3J0Qm90aCcpXG4gICAgdGhpcy5wcm9wcy5pMThuQXJyYXkoJ2Ryb3BQYXN0ZUltcG9ydEZpbGVzJylcbiAgICB0aGlzLnByb3BzLmkxOG5BcnJheSgnZHJvcFBhc3RlSW1wb3J0Rm9sZGVycycpXG4gIH1cblxuICByZW5kZXJBY3F1aXJlciA9IChhY3F1aXJlcikgPT4ge1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2XG4gICAgICAgIGNsYXNzTmFtZT1cInVwcHktRGFzaGJvYXJkVGFiXCJcbiAgICAgICAgcm9sZT1cInByZXNlbnRhdGlvblwiXG4gICAgICAgIGRhdGEtdXBweS1hY3F1aXJlci1pZD17YWNxdWlyZXIuaWR9XG4gICAgICA+XG4gICAgICAgIDxidXR0b25cbiAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgICBjbGFzc05hbWU9XCJ1cHB5LXUtcmVzZXQgdXBweS1jLWJ0biB1cHB5LURhc2hib2FyZFRhYi1idG5cIlxuICAgICAgICAgIHJvbGU9XCJ0YWJcIlxuICAgICAgICAgIHRhYkluZGV4PXswfVxuICAgICAgICAgIGFyaWEtY29udHJvbHM9e2B1cHB5LURhc2hib2FyZENvbnRlbnQtcGFuZWwtLSR7YWNxdWlyZXIuaWR9YH1cbiAgICAgICAgICBhcmlhLXNlbGVjdGVkPXt0aGlzLnByb3BzLmFjdGl2ZVBpY2tlclBhbmVsLmlkID09PSBhY3F1aXJlci5pZH1cbiAgICAgICAgICBkYXRhLXVwcHktc3VwZXItZm9jdXNhYmxlXG4gICAgICAgICAgb25DbGljaz17KCkgPT4gdGhpcy5wcm9wcy5zaG93UGFuZWwoYWNxdWlyZXIuaWQpfVxuICAgICAgICA+XG4gICAgICAgICAge2FjcXVpcmVyLmljb24oKX1cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInVwcHktRGFzaGJvYXJkVGFiLW5hbWVcIj57YWNxdWlyZXIubmFtZX08L2Rpdj5cbiAgICAgICAgPC9idXR0b24+XG4gICAgICA8L2Rpdj5cbiAgICApXG4gIH1cblxuICByZW5kZXJBY3F1aXJlcnMgPSAoYWNxdWlyZXJzLCBkaXNhYmxlTG9jYWxGaWxlcykgPT4ge1xuICAgIC8vIEdyb3VwIGxhc3QgdHdvIGJ1dHRvbnMsIHNvIHdlIGRvbuKAmXQgZW5kIHVwIHdpdGhcbiAgICAvLyBqdXN0IG9uZSBidXR0b24gb24gYSBuZXcgbGluZVxuICAgIGNvbnN0IGFjcXVpcmVyc1dpdGhvdXRMYXN0VHdvID0gWy4uLmFjcXVpcmVyc11cbiAgICBjb25zdCBsYXN0VHdvQWNxdWlyZXJzID0gYWNxdWlyZXJzV2l0aG91dExhc3RUd28uc3BsaWNlKGFjcXVpcmVycy5sZW5ndGggLSAyLCBhY3F1aXJlcnMubGVuZ3RoKVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwidXBweS1EYXNoYm9hcmQtQWRkRmlsZXMtbGlzdFwiIHJvbGU9XCJ0YWJsaXN0XCI+XG4gICAgICAgIHshZGlzYWJsZUxvY2FsRmlsZXMgJiYgdGhpcy5yZW5kZXJNeURldmljZUFjcXVpcmVyKCl9XG4gICAgICAgIHthY3F1aXJlcnNXaXRob3V0TGFzdFR3by5tYXAoKGFjcXVpcmVyKSA9PiB0aGlzLnJlbmRlckFjcXVpcmVyKGFjcXVpcmVyKSl9XG4gICAgICAgIDxzcGFuIHJvbGU9XCJwcmVzZW50YXRpb25cIiBzdHlsZT17eyAnd2hpdGUtc3BhY2UnOiAnbm93cmFwJyB9fT5cbiAgICAgICAgICB7bGFzdFR3b0FjcXVpcmVycy5tYXAoKGFjcXVpcmVyKSA9PiB0aGlzLnJlbmRlckFjcXVpcmVyKGFjcXVpcmVyKSl9XG4gICAgICAgIDwvc3Bhbj5cbiAgICAgIDwvZGl2PlxuICAgIClcbiAgfVxuXG4gIHJlbmRlclBvd2VyZWRCeVVwcHkgKCkge1xuICAgIGNvbnN0IHsgaTE4bkFycmF5IH0gPSB0aGlzLnByb3BzXG5cbiAgICBjb25zdCB1cHB5QnJhbmRpbmcgPSAoXG4gICAgICA8c3Bhbj5cbiAgICAgICAgPHN2ZyBhcmlhLWhpZGRlbj1cInRydWVcIiBmb2N1c2FibGU9XCJmYWxzZVwiIGNsYXNzTmFtZT1cInVwcHktYy1pY29uIHVwcHktRGFzaGJvYXJkLXBvd2VyZWRCeUljb25cIiB3aWR0aD1cIjExXCIgaGVpZ2h0PVwiMTFcIiB2aWV3Qm94PVwiMCAwIDExIDExXCI+XG4gICAgICAgICAgPHBhdGggZD1cIk03LjM2NSAxMC41bC0uMDEtNC4wNDVoMi42MTJMNS41LjgwNmwtNC40NjcgNS42NWgyLjYwNGwuMDEgNC4wNDRoMy43MTh6XCIgZmlsbFJ1bGU9XCJldmVub2RkXCIgLz5cbiAgICAgICAgPC9zdmc+XG4gICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInVwcHktRGFzaGJvYXJkLXBvd2VyZWRCeVVwcHlcIj5VcHB5PC9zcGFuPlxuICAgICAgPC9zcGFuPlxuICAgIClcblxuICAgIGNvbnN0IGxpbmtUZXh0ID0gaTE4bkFycmF5KCdwb3dlcmVkQnknLCB7IHVwcHk6IHVwcHlCcmFuZGluZyB9KVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxhXG4gICAgICAgIHRhYkluZGV4PVwiLTFcIlxuICAgICAgICBocmVmPVwiaHR0cHM6Ly91cHB5LmlvXCJcbiAgICAgICAgcmVsPVwibm9yZWZlcnJlciBub29wZW5lclwiXG4gICAgICAgIHRhcmdldD1cIl9ibGFua1wiXG4gICAgICAgIGNsYXNzTmFtZT1cInVwcHktRGFzaGJvYXJkLXBvd2VyZWRCeVwiXG4gICAgICA+XG4gICAgICAgIHtsaW5rVGV4dH1cbiAgICAgIDwvYT5cbiAgICApXG4gIH1cblxuICByZW5kZXIgKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInVwcHktRGFzaGJvYXJkLUFkZEZpbGVzXCI+XG4gICAgICAgIHt0aGlzLnJlbmRlckhpZGRlbklucHV0KGZhbHNlLCAocmVmKSA9PiB7IHRoaXMuZmlsZUlucHV0ID0gcmVmIH0pfVxuICAgICAgICB7dGhpcy5yZW5kZXJIaWRkZW5JbnB1dCh0cnVlLCAocmVmKSA9PiB7IHRoaXMuZm9sZGVySW5wdXQgPSByZWYgfSl9XG4gICAgICAgIHt0aGlzLnJlbmRlckRyb3BQYXN0ZUJyb3dzZVRhZ2xpbmUoKX1cbiAgICAgICAge3RoaXMucHJvcHMuYWNxdWlyZXJzLmxlbmd0aCA+IDAgJiYgdGhpcy5yZW5kZXJBY3F1aXJlcnModGhpcy5wcm9wcy5hY3F1aXJlcnMsIHRoaXMucHJvcHMuZGlzYWJsZUxvY2FsRmlsZXMpfVxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInVwcHktRGFzaGJvYXJkLUFkZEZpbGVzLWluZm9cIj5cbiAgICAgICAgICB7dGhpcy5wcm9wcy5ub3RlICYmIDxkaXYgY2xhc3NOYW1lPVwidXBweS1EYXNoYm9hcmQtbm90ZVwiPnt0aGlzLnByb3BzLm5vdGV9PC9kaXY+fVxuICAgICAgICAgIHt0aGlzLnByb3BzLnByb3VkbHlEaXNwbGF5UG93ZXJlZEJ5VXBweSAmJiB0aGlzLnJlbmRlclBvd2VyZWRCeVVwcHkodGhpcy5wcm9wcyl9XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgKVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQWRkRmlsZXNcbiIsImNvbnN0IHsgaCB9ID0gcmVxdWlyZSgncHJlYWN0JylcbmNvbnN0IGNsYXNzTmFtZXMgPSByZXF1aXJlKCdjbGFzc25hbWVzJylcbmNvbnN0IEFkZEZpbGVzID0gcmVxdWlyZSgnLi9BZGRGaWxlcycpXG5cbmNvbnN0IEFkZEZpbGVzUGFuZWwgPSAocHJvcHMpID0+IHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2XG4gICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZXMoJ3VwcHktRGFzaGJvYXJkLUFkZEZpbGVzUGFuZWwnLCBwcm9wcy5jbGFzc05hbWUpfVxuICAgICAgZGF0YS11cHB5LXBhbmVsVHlwZT1cIkFkZEZpbGVzXCJcbiAgICAgIGFyaWEtaGlkZGVuPXtwcm9wcy5zaG93QWRkRmlsZXNQYW5lbH1cbiAgICA+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInVwcHktRGFzaGJvYXJkQ29udGVudC1iYXJcIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ1cHB5LURhc2hib2FyZENvbnRlbnQtdGl0bGVcIiByb2xlPVwiaGVhZGluZ1wiIGFyaWEtbGV2ZWw9XCIxXCI+XG4gICAgICAgICAge3Byb3BzLmkxOG4oJ2FkZGluZ01vcmVGaWxlcycpfVxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGJ1dHRvblxuICAgICAgICAgIGNsYXNzTmFtZT1cInVwcHktRGFzaGJvYXJkQ29udGVudC1iYWNrXCJcbiAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBwcm9wcy50b2dnbGVBZGRGaWxlc1BhbmVsKGZhbHNlKX1cbiAgICAgICAgPlxuICAgICAgICAgIHtwcm9wcy5pMThuKCdiYWNrJyl9XG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgICA8QWRkRmlsZXMgey4uLnByb3BzfSAvPlxuICAgIDwvZGl2PlxuICApXG59XG5cbm1vZHVsZS5leHBvcnRzID0gQWRkRmlsZXNQYW5lbFxuIiwiY29uc3QgeyBoIH0gPSByZXF1aXJlKCdwcmVhY3QnKVxuY29uc3QgY2xhc3NOYW1lcyA9IHJlcXVpcmUoJ2NsYXNzbmFtZXMnKVxuY29uc3QgaXNEcmFnRHJvcFN1cHBvcnRlZCA9IHJlcXVpcmUoJ0B1cHB5L3V0aWxzL2xpYi9pc0RyYWdEcm9wU3VwcG9ydGVkJylcbmNvbnN0IEZpbGVMaXN0ID0gcmVxdWlyZSgnLi9GaWxlTGlzdCcpXG5jb25zdCBBZGRGaWxlcyA9IHJlcXVpcmUoJy4vQWRkRmlsZXMnKVxuY29uc3QgQWRkRmlsZXNQYW5lbCA9IHJlcXVpcmUoJy4vQWRkRmlsZXNQYW5lbCcpXG5jb25zdCBQaWNrZXJQYW5lbENvbnRlbnQgPSByZXF1aXJlKCcuL1BpY2tlclBhbmVsQ29udGVudCcpXG5jb25zdCBFZGl0b3JQYW5lbCA9IHJlcXVpcmUoJy4vRWRpdG9yUGFuZWwnKVxuY29uc3QgUGFuZWxUb3BCYXIgPSByZXF1aXJlKCcuL1BpY2tlclBhbmVsVG9wQmFyJylcbmNvbnN0IEZpbGVDYXJkID0gcmVxdWlyZSgnLi9GaWxlQ2FyZCcpXG5jb25zdCBTbGlkZSA9IHJlcXVpcmUoJy4vU2xpZGUnKVxuXG4vLyBodHRwOi8vZGV2LmVkZW5zcGlla2VybWFubi5jb20vMjAxNi8wMi8xMS9pbnRyb2R1Y2luZy1hY2Nlc3NpYmxlLW1vZGFsLWRpYWxvZ1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL2dob3NoL21pY3JvbW9kYWxcblxuY29uc3QgV0lEVEhfWEwgPSA5MDBcbmNvbnN0IFdJRFRIX0xHID0gNzAwXG5jb25zdCBXSURUSF9NRCA9IDU3NlxuY29uc3QgSEVJR0hUX01EID0gNDAwXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gRGFzaGJvYXJkIChwcm9wcykge1xuICBjb25zdCBub0ZpbGVzID0gcHJvcHMudG90YWxGaWxlQ291bnQgPT09IDBcbiAgY29uc3QgaXNTaXplTUQgPSBwcm9wcy5jb250YWluZXJXaWR0aCA+IFdJRFRIX01EXG5cbiAgY29uc3Qgd3JhcHBlckNsYXNzTmFtZSA9IGNsYXNzTmFtZXMoe1xuICAgICd1cHB5LVJvb3QnOiBwcm9wcy5pc1RhcmdldERPTUVsLFxuICB9KVxuXG4gIGNvbnN0IGRhc2hib2FyZENsYXNzTmFtZSA9IGNsYXNzTmFtZXMoe1xuICAgICd1cHB5LURhc2hib2FyZCc6IHRydWUsXG4gICAgJ3VwcHktRGFzaGJvYXJkLS1pc0Rpc2FibGVkJzogcHJvcHMuZGlzYWJsZWQsXG4gICAgJ3VwcHktRGFzaGJvYXJkLS1hbmltYXRlT3BlbkNsb3NlJzogcHJvcHMuYW5pbWF0ZU9wZW5DbG9zZSxcbiAgICAndXBweS1EYXNoYm9hcmQtLWlzQ2xvc2luZyc6IHByb3BzLmlzQ2xvc2luZyxcbiAgICAndXBweS1EYXNoYm9hcmQtLWlzRHJhZ2dpbmdPdmVyJzogcHJvcHMuaXNEcmFnZ2luZ092ZXIsXG4gICAgJ3VwcHktRGFzaGJvYXJkLS1tb2RhbCc6ICFwcm9wcy5pbmxpbmUsXG4gICAgJ3VwcHktc2l6ZS0tbWQnOiBwcm9wcy5jb250YWluZXJXaWR0aCA+IFdJRFRIX01ELFxuICAgICd1cHB5LXNpemUtLWxnJzogcHJvcHMuY29udGFpbmVyV2lkdGggPiBXSURUSF9MRyxcbiAgICAndXBweS1zaXplLS14bCc6IHByb3BzLmNvbnRhaW5lcldpZHRoID4gV0lEVEhfWEwsXG4gICAgJ3VwcHktc2l6ZS0taGVpZ2h0LW1kJzogcHJvcHMuY29udGFpbmVySGVpZ2h0ID4gSEVJR0hUX01ELFxuICAgICd1cHB5LURhc2hib2FyZC0taXNBZGRGaWxlc1BhbmVsVmlzaWJsZSc6IHByb3BzLnNob3dBZGRGaWxlc1BhbmVsLFxuICAgICd1cHB5LURhc2hib2FyZC0taXNJbm5lcldyYXBWaXNpYmxlJzogcHJvcHMuYXJlSW5zaWRlc1JlYWR5VG9CZVZpc2libGUsXG4gIH0pXG5cbiAgLy8gSW1wb3J0YW50OiBrZWVwIHRoZXNlIGluIHN5bmMgd2l0aCB0aGUgcGVyY2VudCB3aWR0aCB2YWx1ZXMgaW4gYHNyYy9jb21wb25lbnRzL0ZpbGVJdGVtL2luZGV4LnNjc3NgLlxuICBsZXQgaXRlbXNQZXJSb3cgPSAxIC8vIG1vYmlsZVxuICBpZiAocHJvcHMuY29udGFpbmVyV2lkdGggPiBXSURUSF9YTCkge1xuICAgIGl0ZW1zUGVyUm93ID0gNVxuICB9IGVsc2UgaWYgKHByb3BzLmNvbnRhaW5lcldpZHRoID4gV0lEVEhfTEcpIHtcbiAgICBpdGVtc1BlclJvdyA9IDRcbiAgfSBlbHNlIGlmIChwcm9wcy5jb250YWluZXJXaWR0aCA+IFdJRFRIX01EKSB7XG4gICAgaXRlbXNQZXJSb3cgPSAzXG4gIH1cblxuICBjb25zdCBzaG93RmlsZUxpc3QgPSBwcm9wcy5zaG93U2VsZWN0ZWRGaWxlcyAmJiAhbm9GaWxlc1xuXG4gIGNvbnN0IG51bWJlck9mRmlsZXNGb3JSZWNvdmVyeSA9IHByb3BzLnJlY292ZXJlZFN0YXRlID8gT2JqZWN0LmtleXMocHJvcHMucmVjb3ZlcmVkU3RhdGUuZmlsZXMpLmxlbmd0aCA6IG51bGxcbiAgY29uc3QgbnVtYmVyT2ZHaG9zdHMgPSBwcm9wcy5maWxlcyA/IE9iamVjdC5rZXlzKHByb3BzLmZpbGVzKS5maWx0ZXIoKGZpbGVJRCkgPT4gcHJvcHMuZmlsZXNbZmlsZUlEXS5pc0dob3N0KS5sZW5ndGggOiBudWxsXG5cbiAgY29uc3QgcmVuZGVyUmVzdG9yZWRUZXh0ID0gKCkgPT4ge1xuICAgIGlmIChudW1iZXJPZkdob3N0cyA+IDApIHtcbiAgICAgIHJldHVybiBwcm9wcy5pMThuKCdyZWNvdmVyZWRYRmlsZXMnLCB7XG4gICAgICAgIHNtYXJ0X2NvdW50OiBudW1iZXJPZkdob3N0cyxcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgcmV0dXJuIHByb3BzLmkxOG4oJ3JlY292ZXJlZEFsbEZpbGVzJylcbiAgfVxuXG4gIGNvbnN0IGRhc2hib2FyZCA9IChcbiAgICA8ZGl2XG4gICAgICBjbGFzc05hbWU9e2Rhc2hib2FyZENsYXNzTmFtZX1cbiAgICAgIGRhdGEtdXBweS10aGVtZT17cHJvcHMudGhlbWV9XG4gICAgICBkYXRhLXVwcHktbnVtLWFjcXVpcmVycz17cHJvcHMuYWNxdWlyZXJzLmxlbmd0aH1cbiAgICAgIGRhdGEtdXBweS1kcmFnLWRyb3Atc3VwcG9ydGVkPXshcHJvcHMuZGlzYWJsZUxvY2FsRmlsZXMgJiYgaXNEcmFnRHJvcFN1cHBvcnRlZCgpfVxuICAgICAgYXJpYS1oaWRkZW49e3Byb3BzLmlubGluZSA/ICdmYWxzZScgOiBwcm9wcy5pc0hpZGRlbn1cbiAgICAgIGFyaWEtZGlzYWJsZWQ9e3Byb3BzLmRpc2FibGVkfVxuICAgICAgYXJpYS1sYWJlbD17IXByb3BzLmlubGluZSA/IHByb3BzLmkxOG4oJ2Rhc2hib2FyZFdpbmRvd1RpdGxlJykgOiBwcm9wcy5pMThuKCdkYXNoYm9hcmRUaXRsZScpfVxuICAgICAgb25QYXN0ZT17cHJvcHMuaGFuZGxlUGFzdGV9XG4gICAgICBvbkRyYWdPdmVyPXtwcm9wcy5oYW5kbGVEcmFnT3Zlcn1cbiAgICAgIG9uRHJhZ0xlYXZlPXtwcm9wcy5oYW5kbGVEcmFnTGVhdmV9XG4gICAgICBvbkRyb3A9e3Byb3BzLmhhbmRsZURyb3B9XG4gICAgPlxuICAgICAgPGRpdlxuICAgICAgICBhcmlhLWhpZGRlbj1cInRydWVcIlxuICAgICAgICBjbGFzc05hbWU9XCJ1cHB5LURhc2hib2FyZC1vdmVybGF5XCJcbiAgICAgICAgdGFiSW5kZXg9ey0xfVxuICAgICAgICBvbkNsaWNrPXtwcm9wcy5oYW5kbGVDbGlja091dHNpZGV9XG4gICAgICAvPlxuXG4gICAgICA8ZGl2XG4gICAgICAgIGNsYXNzTmFtZT1cInVwcHktRGFzaGJvYXJkLWlubmVyXCJcbiAgICAgICAgYXJpYS1tb2RhbD17IXByb3BzLmlubGluZSAmJiAndHJ1ZSd9XG4gICAgICAgIHJvbGU9eyFwcm9wcy5pbmxpbmUgJiYgJ2RpYWxvZyd9XG4gICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgd2lkdGg6IHByb3BzLmlubGluZSAmJiBwcm9wcy53aWR0aCA/IHByb3BzLndpZHRoIDogJycsXG4gICAgICAgICAgaGVpZ2h0OiBwcm9wcy5pbmxpbmUgJiYgcHJvcHMuaGVpZ2h0ID8gcHJvcHMuaGVpZ2h0IDogJycsXG4gICAgICAgIH19XG4gICAgICA+XG5cbiAgICAgICAgeyFwcm9wcy5pbmxpbmUgPyAoXG4gICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgY2xhc3NOYW1lPVwidXBweS11LXJlc2V0IHVwcHktRGFzaGJvYXJkLWNsb3NlXCJcbiAgICAgICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgICAgICAgYXJpYS1sYWJlbD17cHJvcHMuaTE4bignY2xvc2VNb2RhbCcpfVxuICAgICAgICAgICAgdGl0bGU9e3Byb3BzLmkxOG4oJ2Nsb3NlTW9kYWwnKX1cbiAgICAgICAgICAgIG9uQ2xpY2s9e3Byb3BzLmNsb3NlTW9kYWx9XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPHNwYW4gYXJpYS1oaWRkZW49XCJ0cnVlXCI+JnRpbWVzOzwvc3Bhbj5cbiAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgKSA6IG51bGx9XG5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ1cHB5LURhc2hib2FyZC1pbm5lcldyYXBcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInVwcHktRGFzaGJvYXJkLWRyb3BGaWxlc0hlcmVIaW50XCI+XG4gICAgICAgICAgICB7cHJvcHMuaTE4bignZHJvcEhpbnQnKX1cbiAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgIHtzaG93RmlsZUxpc3QgJiYgPFBhbmVsVG9wQmFyIHsuLi5wcm9wc30gLz59XG5cbiAgICAgICAgICB7bnVtYmVyT2ZGaWxlc0ZvclJlY292ZXJ5ICYmIChcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidXBweS1EYXNoYm9hcmQtc2VydmljZU1zZ1wiPlxuICAgICAgICAgICAgICA8c3ZnIGNsYXNzTmFtZT1cInVwcHktRGFzaGJvYXJkLXNlcnZpY2VNc2ctaWNvblwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiIGZvY3VzYWJsZT1cImZhbHNlXCIgd2lkdGg9XCIyMVwiIGhlaWdodD1cIjE2XCIgdmlld0JveD1cIjAgMCAyNCAxOVwiPlxuICAgICAgICAgICAgICAgIDxnIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgwIC0xKVwiIGZpbGw9XCJub25lXCIgZmlsbFJ1bGU9XCJldmVub2RkXCI+XG4gICAgICAgICAgICAgICAgICA8cGF0aCBkPVwiTTEyLjg1NyAxLjQzbDEwLjIzNCAxNy4wNTZBMSAxIDAgMDEyMi4yMzQgMjBIMS43NjZhMSAxIDAgMDEtLjg1Ny0xLjUxNEwxMS4xNDMgMS40MjlhMSAxIDAgMDExLjcxNCAwelwiIGZpbGw9XCIjRkZEMzAwXCIgLz5cbiAgICAgICAgICAgICAgICAgIDxwYXRoIGZpbGw9XCIjMDAwXCIgZD1cIk0xMSA2aDJsLS4zIDhoLTEuNHpcIiAvPlxuICAgICAgICAgICAgICAgICAgPGNpcmNsZSBmaWxsPVwiIzAwMFwiIGN4PVwiMTJcIiBjeT1cIjE3XCIgcj1cIjFcIiAvPlxuICAgICAgICAgICAgICAgIDwvZz5cbiAgICAgICAgICAgICAgPC9zdmc+XG4gICAgICAgICAgICAgIDxzdHJvbmcgY2xhc3NOYW1lPVwidXBweS1EYXNoYm9hcmQtc2VydmljZU1zZy10aXRsZVwiPlxuICAgICAgICAgICAgICAgIHtwcm9wcy5pMThuKCdzZXNzaW9uUmVzdG9yZWQnKX1cbiAgICAgICAgICAgICAgPC9zdHJvbmc+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidXBweS1EYXNoYm9hcmQtc2VydmljZU1zZy10ZXh0XCI+XG4gICAgICAgICAgICAgICAge3JlbmRlclJlc3RvcmVkVGV4dCgpfVxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICl9XG5cbiAgICAgICAgICB7c2hvd0ZpbGVMaXN0ID8gKFxuICAgICAgICAgICAgPEZpbGVMaXN0XG4gICAgICAgICAgICAgIHsuLi5wcm9wc31cbiAgICAgICAgICAgICAgaXRlbXNQZXJSb3c9e2l0ZW1zUGVyUm93fVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApIDogKFxuICAgICAgICAgICAgPEFkZEZpbGVzIHsuLi5wcm9wc30gaXNTaXplTUQ9e2lzU2l6ZU1EfSAvPlxuICAgICAgICAgICl9XG5cbiAgICAgICAgICA8U2xpZGU+XG4gICAgICAgICAgICB7cHJvcHMuc2hvd0FkZEZpbGVzUGFuZWwgPyA8QWRkRmlsZXNQYW5lbCBrZXk9XCJBZGRGaWxlc1wiIHsuLi5wcm9wc30gaXNTaXplTUQ9e2lzU2l6ZU1EfSAvPiA6IG51bGx9XG4gICAgICAgICAgPC9TbGlkZT5cblxuICAgICAgICAgIDxTbGlkZT5cbiAgICAgICAgICAgIHtwcm9wcy5maWxlQ2FyZEZvciA/IDxGaWxlQ2FyZCBrZXk9XCJGaWxlQ2FyZFwiIHsuLi5wcm9wc30gLz4gOiBudWxsfVxuICAgICAgICAgIDwvU2xpZGU+XG5cbiAgICAgICAgICA8U2xpZGU+XG4gICAgICAgICAgICB7cHJvcHMuYWN0aXZlUGlja2VyUGFuZWwgPyA8UGlja2VyUGFuZWxDb250ZW50IGtleT1cIlBpY2tlclwiIHsuLi5wcm9wc30gLz4gOiBudWxsfVxuICAgICAgICAgIDwvU2xpZGU+XG5cbiAgICAgICAgICA8U2xpZGU+XG4gICAgICAgICAgICB7cHJvcHMuc2hvd0ZpbGVFZGl0b3IgPyA8RWRpdG9yUGFuZWwga2V5PVwiRWRpdG9yXCIgey4uLnByb3BzfSAvPiA6IG51bGx9XG4gICAgICAgICAgPC9TbGlkZT5cblxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidXBweS1EYXNoYm9hcmQtcHJvZ3Jlc3NpbmRpY2F0b3JzXCI+XG4gICAgICAgICAgICB7cHJvcHMucHJvZ3Jlc3NpbmRpY2F0b3JzLm1hcCgodGFyZ2V0KSA9PiB7XG4gICAgICAgICAgICAgIHJldHVybiBwcm9wcy51cHB5LmdldFBsdWdpbih0YXJnZXQuaWQpLnJlbmRlcihwcm9wcy5zdGF0ZSlcbiAgICAgICAgICAgIH0pfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApXG5cbiAgcmV0dXJuIChcbiAgICAvLyBXcmFwIGl0IGZvciBSVEwgbGFuZ3VhZ2Ugc3VwcG9ydFxuICAgIDxkaXYgY2xhc3NOYW1lPXt3cmFwcGVyQ2xhc3NOYW1lfSBkaXI9e3Byb3BzLmRpcmVjdGlvbn0+XG4gICAgICB7ZGFzaGJvYXJkfVxuICAgIDwvZGl2PlxuICApXG59XG4iLCJjb25zdCB7IGggfSA9IHJlcXVpcmUoJ3ByZWFjdCcpXG5jb25zdCBjbGFzc05hbWVzID0gcmVxdWlyZSgnY2xhc3NuYW1lcycpXG5cbmZ1bmN0aW9uIEVkaXRvclBhbmVsIChwcm9wcykge1xuICBjb25zdCBmaWxlID0gcHJvcHMuZmlsZXNbcHJvcHMuZmlsZUNhcmRGb3JdXG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2XG4gICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZXMoJ3VwcHktRGFzaGJvYXJkQ29udGVudC1wYW5lbCcsIHByb3BzLmNsYXNzTmFtZSl9XG4gICAgICByb2xlPVwidGFicGFuZWxcIlxuICAgICAgZGF0YS11cHB5LXBhbmVsVHlwZT1cIkZpbGVFZGl0b3JcIlxuICAgICAgaWQ9XCJ1cHB5LURhc2hib2FyZENvbnRlbnQtcGFuZWwtLWVkaXRvclwiXG4gICAgPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJ1cHB5LURhc2hib2FyZENvbnRlbnQtYmFyXCI+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidXBweS1EYXNoYm9hcmRDb250ZW50LXRpdGxlXCIgcm9sZT1cImhlYWRpbmdcIiBhcmlhLWxldmVsPVwiMVwiPlxuICAgICAgICAgIHtwcm9wcy5pMThuQXJyYXkoJ2VkaXRpbmcnLCB7XG4gICAgICAgICAgICBmaWxlOiA8c3BhbiBjbGFzc05hbWU9XCJ1cHB5LURhc2hib2FyZENvbnRlbnQtdGl0bGVGaWxlXCI+e2ZpbGUubWV0YSA/IGZpbGUubWV0YS5uYW1lIDogZmlsZS5uYW1lfTwvc3Bhbj4sXG4gICAgICAgICAgfSl9XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgY2xhc3NOYW1lPVwidXBweS1EYXNoYm9hcmRDb250ZW50LWJhY2tcIlxuICAgICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgICAgIG9uQ2xpY2s9e3Byb3BzLmhpZGVBbGxQYW5lbHN9XG4gICAgICAgID5cbiAgICAgICAgICB7cHJvcHMuaTE4bignY2FuY2VsJyl9XG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgY2xhc3NOYW1lPVwidXBweS1EYXNoYm9hcmRDb250ZW50LXNhdmVcIlxuICAgICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgICAgIG9uQ2xpY2s9e3Byb3BzLnNhdmVGaWxlRWRpdG9yfVxuICAgICAgICA+XG4gICAgICAgICAge3Byb3BzLmkxOG4oJ3NhdmUnKX1cbiAgICAgICAgPC9idXR0b24+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwidXBweS1EYXNoYm9hcmRDb250ZW50LXBhbmVsQm9keVwiPlxuICAgICAgICB7cHJvcHMuZWRpdG9ycy5tYXAoKHRhcmdldCkgPT4ge1xuICAgICAgICAgIHJldHVybiBwcm9wcy51cHB5LmdldFBsdWdpbih0YXJnZXQuaWQpLnJlbmRlcihwcm9wcy5zdGF0ZSlcbiAgICAgICAgfSl9XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEVkaXRvclBhbmVsXG4iLCJjb25zdCB7IGgsIENvbXBvbmVudCB9ID0gcmVxdWlyZSgncHJlYWN0JylcbmNvbnN0IGNsYXNzTmFtZXMgPSByZXF1aXJlKCdjbGFzc25hbWVzJylcbmNvbnN0IHsgbmFub2lkIH0gPSByZXF1aXJlKCduYW5vaWQnKVxuY29uc3QgZ2V0RmlsZVR5cGVJY29uID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvZ2V0RmlsZVR5cGVJY29uJylcbmNvbnN0IGlnbm9yZUV2ZW50ID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvaWdub3JlRXZlbnQuanMnKVxuY29uc3QgRmlsZVByZXZpZXcgPSByZXF1aXJlKCcuLi9GaWxlUHJldmlldycpXG5cbmNsYXNzIEZpbGVDYXJkIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgZm9ybSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2Zvcm0nKVxuXG4gIGNvbnN0cnVjdG9yIChwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKVxuXG4gICAgY29uc3QgZmlsZSA9IHRoaXMucHJvcHMuZmlsZXNbdGhpcy5wcm9wcy5maWxlQ2FyZEZvcl1cbiAgICBjb25zdCBtZXRhRmllbGRzID0gdGhpcy5nZXRNZXRhRmllbGRzKCkgfHwgW11cblxuICAgIGNvbnN0IHN0b3JlZE1ldGFEYXRhID0ge31cbiAgICBtZXRhRmllbGRzLmZvckVhY2goKGZpZWxkKSA9PiB7XG4gICAgICBzdG9yZWRNZXRhRGF0YVtmaWVsZC5pZF0gPSBmaWxlLm1ldGFbZmllbGQuaWRdIHx8ICcnXG4gICAgfSlcblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBmb3JtU3RhdGU6IHN0b3JlZE1ldGFEYXRhLFxuICAgIH1cblxuICAgIHRoaXMuZm9ybS5pZCA9IG5hbm9pZCgpXG4gIH1cblxuICAvLyBUT0RPKGFkdWg5NSk6IG1vdmUgdGhpcyB0byBgVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudGAgd2hlbiB1cGRhdGluZyB0byBQcmVhY3QgWCsuXG4gIGNvbXBvbmVudFdpbGxNb3VudCAoKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVhY3Qvbm8tZGVwcmVjYXRlZFxuICAgIHRoaXMuZm9ybS5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCB0aGlzLmhhbmRsZVNhdmUpXG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLmZvcm0pXG4gIH1cblxuICBjb21wb25lbnRXaWxsVW5tb3VudCAoKSB7XG4gICAgdGhpcy5mb3JtLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIHRoaXMuaGFuZGxlU2F2ZSlcbiAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKHRoaXMuZm9ybSlcbiAgfVxuXG4gIGdldE1ldGFGaWVsZHMgKCkge1xuICAgIHJldHVybiB0eXBlb2YgdGhpcy5wcm9wcy5tZXRhRmllbGRzID09PSAnZnVuY3Rpb24nXG4gICAgICA/IHRoaXMucHJvcHMubWV0YUZpZWxkcyh0aGlzLnByb3BzLmZpbGVzW3RoaXMucHJvcHMuZmlsZUNhcmRGb3JdKVxuICAgICAgOiB0aGlzLnByb3BzLm1ldGFGaWVsZHNcbiAgfVxuXG4gIHVwZGF0ZU1ldGEgPSAobmV3VmFsLCBuYW1lKSA9PiB7XG4gICAgdGhpcy5zZXRTdGF0ZSgoeyBmb3JtU3RhdGUgfSkgPT4gKHtcbiAgICAgIGZvcm1TdGF0ZToge1xuICAgICAgICAuLi5mb3JtU3RhdGUsXG4gICAgICAgIFtuYW1lXTogbmV3VmFsLFxuICAgICAgfSxcbiAgICB9KSlcbiAgfVxuXG4gIGhhbmRsZVNhdmUgPSAoZSkgPT4ge1xuICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgIGNvbnN0IGZpbGVJRCA9IHRoaXMucHJvcHMuZmlsZUNhcmRGb3JcbiAgICB0aGlzLnByb3BzLnNhdmVGaWxlQ2FyZCh0aGlzLnN0YXRlLmZvcm1TdGF0ZSwgZmlsZUlEKVxuICB9XG5cbiAgaGFuZGxlQ2FuY2VsID0gKCkgPT4ge1xuICAgIHRoaXMucHJvcHMudG9nZ2xlRmlsZUNhcmQoZmFsc2UpXG4gIH1cblxuICBzYXZlT25FbnRlciA9IChldikgPT4ge1xuICAgIGlmIChldi5rZXlDb2RlID09PSAxMykge1xuICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKClcbiAgICAgIGV2LnByZXZlbnREZWZhdWx0KClcbiAgICAgIGNvbnN0IGZpbGUgPSB0aGlzLnByb3BzLmZpbGVzW3RoaXMucHJvcHMuZmlsZUNhcmRGb3JdXG4gICAgICB0aGlzLnByb3BzLnNhdmVGaWxlQ2FyZCh0aGlzLnN0YXRlLmZvcm1TdGF0ZSwgZmlsZS5pZClcbiAgICB9XG4gIH1cblxuICByZW5kZXJNZXRhRmllbGRzID0gKCkgPT4ge1xuICAgIGNvbnN0IG1ldGFGaWVsZHMgPSB0aGlzLmdldE1ldGFGaWVsZHMoKSB8fCBbXVxuICAgIGNvbnN0IGZpZWxkQ1NTQ2xhc3NlcyA9IHtcbiAgICAgIHRleHQ6ICd1cHB5LXUtcmVzZXQgdXBweS1jLXRleHRJbnB1dCB1cHB5LURhc2hib2FyZC1GaWxlQ2FyZC1pbnB1dCcsXG4gICAgfVxuXG4gICAgcmV0dXJuIG1ldGFGaWVsZHMubWFwKChmaWVsZCkgPT4ge1xuICAgICAgY29uc3QgaWQgPSBgdXBweS1EYXNoYm9hcmQtRmlsZUNhcmQtaW5wdXQtJHtmaWVsZC5pZH1gXG4gICAgICBjb25zdCByZXF1aXJlZCA9IHRoaXMucHJvcHMucmVxdWlyZWRNZXRhRmllbGRzLmluY2x1ZGVzKGZpZWxkLmlkKVxuICAgICAgcmV0dXJuIChcbiAgICAgICAgPGZpZWxkc2V0IGtleT17ZmllbGQuaWR9IGNsYXNzTmFtZT1cInVwcHktRGFzaGJvYXJkLUZpbGVDYXJkLWZpZWxkc2V0XCI+XG4gICAgICAgICAgPGxhYmVsIGNsYXNzTmFtZT1cInVwcHktRGFzaGJvYXJkLUZpbGVDYXJkLWxhYmVsXCIgaHRtbEZvcj17aWR9PntmaWVsZC5uYW1lfTwvbGFiZWw+XG4gICAgICAgICAge2ZpZWxkLnJlbmRlciAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICA/IGZpZWxkLnJlbmRlcih7XG4gICAgICAgICAgICAgIHZhbHVlOiB0aGlzLnN0YXRlLmZvcm1TdGF0ZVtmaWVsZC5pZF0sXG4gICAgICAgICAgICAgIG9uQ2hhbmdlOiAobmV3VmFsKSA9PiB0aGlzLnVwZGF0ZU1ldGEobmV3VmFsLCBmaWVsZC5pZCksXG4gICAgICAgICAgICAgIGZpZWxkQ1NTQ2xhc3NlcyxcbiAgICAgICAgICAgICAgcmVxdWlyZWQsXG4gICAgICAgICAgICAgIGZvcm06IHRoaXMuZm9ybS5pZCxcbiAgICAgICAgICAgIH0sIGgpXG4gICAgICAgICAgICA6IChcbiAgICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtmaWVsZENTU0NsYXNzZXMudGV4dH1cbiAgICAgICAgICAgICAgICBpZD17aWR9XG4gICAgICAgICAgICAgICAgZm9ybT17dGhpcy5mb3JtLmlkfVxuICAgICAgICAgICAgICAgIHR5cGU9e2ZpZWxkLnR5cGUgfHwgJ3RleHQnfVxuICAgICAgICAgICAgICAgIHJlcXVpcmVkPXtyZXF1aXJlZH1cbiAgICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS5mb3JtU3RhdGVbZmllbGQuaWRdfVxuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPXtmaWVsZC5wbGFjZWhvbGRlcn1cbiAgICAgICAgICAgICAgICAvLyBJZiBgZm9ybWAgYXR0cmlidXRlIGlzIG5vdCBzdXBwb3J0ZWQsIHdlIG5lZWQgdG8gY2FwdHVyZSBwcmVzc2luZyBFbnRlciB0byBhdm9pZCBidWJibGluZyBpbiBjYXNlIFVwcHkgaXNcbiAgICAgICAgICAgICAgICAvLyBlbWJlZGRlZCBpbnNpZGUgYSA8Zm9ybT4uXG4gICAgICAgICAgICAgICAgb25LZXlVcD17J2Zvcm0nIGluIEhUTUxJbnB1dEVsZW1lbnQucHJvdG90eXBlID8gdW5kZWZpbmVkIDogdGhpcy5zYXZlT25FbnRlcn1cbiAgICAgICAgICAgICAgICBvbktleURvd249eydmb3JtJyBpbiBIVE1MSW5wdXRFbGVtZW50LnByb3RvdHlwZSA/IHVuZGVmaW5lZCA6IHRoaXMuc2F2ZU9uRW50ZXJ9XG4gICAgICAgICAgICAgICAgb25LZXlQcmVzcz17J2Zvcm0nIGluIEhUTUxJbnB1dEVsZW1lbnQucHJvdG90eXBlID8gdW5kZWZpbmVkIDogdGhpcy5zYXZlT25FbnRlcn1cbiAgICAgICAgICAgICAgICBvbklucHV0PXtldiA9PiB0aGlzLnVwZGF0ZU1ldGEoZXYudGFyZ2V0LnZhbHVlLCBmaWVsZC5pZCl9XG4gICAgICAgICAgICAgICAgZGF0YS11cHB5LXN1cGVyLWZvY3VzYWJsZVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgPC9maWVsZHNldD5cbiAgICAgIClcbiAgICB9KVxuICB9XG5cbiAgcmVuZGVyICgpIHtcbiAgICBjb25zdCBmaWxlID0gdGhpcy5wcm9wcy5maWxlc1t0aGlzLnByb3BzLmZpbGVDYXJkRm9yXVxuICAgIGNvbnN0IHNob3dFZGl0QnV0dG9uID0gdGhpcy5wcm9wcy5jYW5FZGl0RmlsZShmaWxlKVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXZcbiAgICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWVzKCd1cHB5LURhc2hib2FyZC1GaWxlQ2FyZCcsIHRoaXMucHJvcHMuY2xhc3NOYW1lKX1cbiAgICAgICAgZGF0YS11cHB5LXBhbmVsVHlwZT1cIkZpbGVDYXJkXCJcbiAgICAgICAgb25EcmFnT3Zlcj17aWdub3JlRXZlbnR9XG4gICAgICAgIG9uRHJhZ0xlYXZlPXtpZ25vcmVFdmVudH1cbiAgICAgICAgb25Ecm9wPXtpZ25vcmVFdmVudH1cbiAgICAgICAgb25QYXN0ZT17aWdub3JlRXZlbnR9XG4gICAgICA+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidXBweS1EYXNoYm9hcmRDb250ZW50LWJhclwiPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidXBweS1EYXNoYm9hcmRDb250ZW50LXRpdGxlXCIgcm9sZT1cImhlYWRpbmdcIiBhcmlhLWxldmVsPVwiMVwiPlxuICAgICAgICAgICAge3RoaXMucHJvcHMuaTE4bkFycmF5KCdlZGl0aW5nJywge1xuICAgICAgICAgICAgICBmaWxlOiA8c3BhbiBjbGFzc05hbWU9XCJ1cHB5LURhc2hib2FyZENvbnRlbnQtdGl0bGVGaWxlXCI+e2ZpbGUubWV0YSA/IGZpbGUubWV0YS5uYW1lIDogZmlsZS5uYW1lfTwvc3Bhbj4sXG4gICAgICAgICAgICB9KX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICBjbGFzc05hbWU9XCJ1cHB5LURhc2hib2FyZENvbnRlbnQtYmFja1wiXG4gICAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgICAgIGZvcm09e3RoaXMuZm9ybS5pZH1cbiAgICAgICAgICAgIHRpdGxlPXt0aGlzLnByb3BzLmkxOG4oJ2ZpbmlzaEVkaXRpbmdGaWxlJyl9XG4gICAgICAgICAgICBvbkNsaWNrPXt0aGlzLmhhbmRsZUNhbmNlbH1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7dGhpcy5wcm9wcy5pMThuKCdjYW5jZWwnKX1cbiAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ1cHB5LURhc2hib2FyZC1GaWxlQ2FyZC1pbm5lclwiPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidXBweS1EYXNoYm9hcmQtRmlsZUNhcmQtcHJldmlld1wiIHN0eWxlPXt7IGJhY2tncm91bmRDb2xvcjogZ2V0RmlsZVR5cGVJY29uKGZpbGUudHlwZSkuY29sb3IgfX0+XG4gICAgICAgICAgICA8RmlsZVByZXZpZXcgZmlsZT17ZmlsZX0gLz5cbiAgICAgICAgICAgIHtzaG93RWRpdEJ1dHRvblxuICAgICAgICAgICAgICAmJiAoXG4gICAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJ1cHB5LXUtcmVzZXQgdXBweS1jLWJ0biB1cHB5LURhc2hib2FyZC1GaWxlQ2FyZC1lZGl0XCJcbiAgICAgICAgICAgICAgICBvbkNsaWNrPXsoZXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgIC8vIFdoZW4gb3BlbmluZyB0aGUgaW1hZ2UgZWRpdG9yIHdlIHdhbnQgdG8gc2F2ZSBhbnkgbWV0YSBmaWVsZHMgY2hhbmdlcy5cbiAgICAgICAgICAgICAgICAgIC8vIE90aGVyd2lzZSBpdCdzIGNvbmZ1c2luZyBmb3IgdGhlIHVzZXIgdG8gY2xpY2sgc2F2ZSBpbiB0aGUgZWRpdG9yLFxuICAgICAgICAgICAgICAgICAgLy8gYnV0IHRoZSBjaGFuZ2VzIGhlcmUgYXJlIGRpc2NhcmRlZC4gVGhpcyBieXBhc3NlcyB2YWxpZGF0aW9uLFxuICAgICAgICAgICAgICAgICAgLy8gYnV0IHdlIGFyZSBva2F5IHdpdGggdGhhdC5cbiAgICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlU2F2ZShldmVudClcbiAgICAgICAgICAgICAgICAgIHRoaXMucHJvcHMub3BlbkZpbGVFZGl0b3IoZmlsZSlcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgIGZvcm09e3RoaXMuZm9ybS5pZH1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHt0aGlzLnByb3BzLmkxOG4oJ2VkaXRGaWxlJyl9XG4gICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICApfVxuICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ1cHB5LURhc2hib2FyZC1GaWxlQ2FyZC1pbmZvXCI+XG4gICAgICAgICAgICB7dGhpcy5yZW5kZXJNZXRhRmllbGRzKCl9XG4gICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInVwcHktRGFzaGJvYXJkLUZpbGVDYXJkLWFjdGlvbnNcIj5cbiAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwidXBweS11LXJlc2V0IHVwcHktYy1idG4gdXBweS1jLWJ0bi1wcmltYXJ5IHVwcHktRGFzaGJvYXJkLUZpbGVDYXJkLWFjdGlvbnNCdG5cIlxuICAgICAgICAgICAgICAvLyBJZiBgZm9ybWAgYXR0cmlidXRlIGlzIHN1cHBvcnRlZCwgd2Ugd2FudCBhIHN1Ym1pdCBidXR0b24gdG8gdHJpZ2dlciB0aGUgZm9ybSB2YWxpZGF0aW9uLlxuICAgICAgICAgICAgICAvLyBPdGhlcndpc2UsIGZhbGxiYWNrIHRvIGEgY2xhc3NpYyBidXR0b24gd2l0aCBhIG9uQ2xpY2sgZXZlbnQgaGFuZGxlci5cbiAgICAgICAgICAgICAgdHlwZT17J2Zvcm0nIGluIEhUTUxCdXR0b25FbGVtZW50LnByb3RvdHlwZSA/ICdzdWJtaXQnIDogJ2J1dHRvbid9XG4gICAgICAgICAgICAgIG9uQ2xpY2s9eydmb3JtJyBpbiBIVE1MQnV0dG9uRWxlbWVudC5wcm90b3R5cGUgPyB1bmRlZmluZWQgOiB0aGlzLmhhbmRsZVNhdmV9XG4gICAgICAgICAgICAgIGZvcm09e3RoaXMuZm9ybS5pZH1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAge3RoaXMucHJvcHMuaTE4bignc2F2ZUNoYW5nZXMnKX1cbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJ1cHB5LXUtcmVzZXQgdXBweS1jLWJ0biB1cHB5LWMtYnRuLWxpbmsgdXBweS1EYXNoYm9hcmQtRmlsZUNhcmQtYWN0aW9uc0J0blwiXG4gICAgICAgICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLmhhbmRsZUNhbmNlbH1cbiAgICAgICAgICAgICAgZm9ybT17dGhpcy5mb3JtLmlkfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7dGhpcy5wcm9wcy5pMThuKCdjYW5jZWwnKX1cbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIClcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEZpbGVDYXJkXG4iLCJjb25zdCB7IGggfSA9IHJlcXVpcmUoJ3ByZWFjdCcpXG5jb25zdCBjb3B5VG9DbGlwYm9hcmQgPSByZXF1aXJlKCcuLi8uLi8uLi91dGlscy9jb3B5VG9DbGlwYm9hcmQnKVxuXG5mdW5jdGlvbiBFZGl0QnV0dG9uICh7XG4gIGZpbGUsXG4gIHVwbG9hZEluUHJvZ3Jlc3NPckNvbXBsZXRlLFxuICBtZXRhRmllbGRzLFxuICBjYW5FZGl0RmlsZSxcbiAgaTE4bixcbiAgb25DbGljayxcbn0pIHtcbiAgaWYgKFxuICAgICghdXBsb2FkSW5Qcm9ncmVzc09yQ29tcGxldGUgJiYgbWV0YUZpZWxkcyAmJiBtZXRhRmllbGRzLmxlbmd0aCA+IDApXG4gICAgfHwgKCF1cGxvYWRJblByb2dyZXNzT3JDb21wbGV0ZSAmJiBjYW5FZGl0RmlsZShmaWxlKSlcbiAgKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxidXR0b25cbiAgICAgICAgY2xhc3NOYW1lPVwidXBweS11LXJlc2V0IHVwcHktRGFzaGJvYXJkLUl0ZW0tYWN0aW9uIHVwcHktRGFzaGJvYXJkLUl0ZW0tYWN0aW9uLS1lZGl0XCJcbiAgICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICAgIGFyaWEtbGFiZWw9e2kxOG4oJ2VkaXRGaWxlV2l0aEZpbGVuYW1lJywgeyBmaWxlOiBmaWxlLm1ldGEubmFtZSB9KX1cbiAgICAgICAgdGl0bGU9e2kxOG4oJ2VkaXRGaWxlV2l0aEZpbGVuYW1lJywgeyBmaWxlOiBmaWxlLm1ldGEubmFtZSB9KX1cbiAgICAgICAgb25DbGljaz17KCkgPT4gb25DbGljaygpfVxuICAgICAgPlxuICAgICAgICA8c3ZnIGFyaWEtaGlkZGVuPVwidHJ1ZVwiIGZvY3VzYWJsZT1cImZhbHNlXCIgY2xhc3NOYW1lPVwidXBweS1jLWljb25cIiB3aWR0aD1cIjE0XCIgaGVpZ2h0PVwiMTRcIiB2aWV3Qm94PVwiMCAwIDE0IDE0XCI+XG4gICAgICAgICAgPGcgZmlsbFJ1bGU9XCJldmVub2RkXCI+XG4gICAgICAgICAgICA8cGF0aCBkPVwiTTEuNSAxMC43OTNoMi43OTNBMSAxIDAgMCAwIDUgMTAuNUwxMS41IDRhMSAxIDAgMCAwIDAtMS40MTRMOS43MDcuNzkzYTEgMSAwIDAgMC0xLjQxNCAwbC02LjUgNi41QTEgMSAwIDAgMCAxLjUgOHYyLjc5M3ptMS0xVjhMOSAxLjVsMS43OTMgMS43OTMtNi41IDYuNUgyLjV6XCIgZmlsbFJ1bGU9XCJub256ZXJvXCIgLz5cbiAgICAgICAgICAgIDxyZWN0IHg9XCIxXCIgeT1cIjEyLjI5M1wiIHdpZHRoPVwiMTFcIiBoZWlnaHQ9XCIxXCIgcng9XCIuNVwiIC8+XG4gICAgICAgICAgICA8cGF0aCBmaWxsUnVsZT1cIm5vbnplcm9cIiBkPVwiTTYuNzkzIDIuNUw5LjUgNS4yMDdsLjcwNy0uNzA3TDcuNSAxLjc5M3pcIiAvPlxuICAgICAgICAgIDwvZz5cbiAgICAgICAgPC9zdmc+XG4gICAgICA8L2J1dHRvbj5cbiAgICApXG4gIH1cbiAgcmV0dXJuIG51bGxcbn1cblxuZnVuY3Rpb24gUmVtb3ZlQnV0dG9uICh7IGkxOG4sIG9uQ2xpY2ssIGZpbGUgfSkge1xuICByZXR1cm4gKFxuICAgIDxidXR0b25cbiAgICAgIGNsYXNzTmFtZT1cInVwcHktdS1yZXNldCB1cHB5LURhc2hib2FyZC1JdGVtLWFjdGlvbiB1cHB5LURhc2hib2FyZC1JdGVtLWFjdGlvbi0tcmVtb3ZlXCJcbiAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgYXJpYS1sYWJlbD17aTE4bigncmVtb3ZlRmlsZScsIHsgZmlsZTogZmlsZS5tZXRhLm5hbWUgfSl9XG4gICAgICB0aXRsZT17aTE4bigncmVtb3ZlRmlsZScsIHsgZmlsZTogZmlsZS5tZXRhLm5hbWUgfSl9XG4gICAgICBvbkNsaWNrPXsoKSA9PiBvbkNsaWNrKCl9XG4gICAgPlxuICAgICAgPHN2ZyBhcmlhLWhpZGRlbj1cInRydWVcIiBmb2N1c2FibGU9XCJmYWxzZVwiIGNsYXNzTmFtZT1cInVwcHktYy1pY29uXCIgd2lkdGg9XCIxOFwiIGhlaWdodD1cIjE4XCIgdmlld0JveD1cIjAgMCAxOCAxOFwiPlxuICAgICAgICA8cGF0aCBkPVwiTTkgMEM0LjAzNCAwIDAgNC4wMzQgMCA5czQuMDM0IDkgOSA5IDktNC4wMzQgOS05LTQuMDM0LTktOS05elwiIC8+XG4gICAgICAgIDxwYXRoIGZpbGw9XCIjRkZGXCIgZD1cIk0xMyAxMi4yMjJsLS43NzguNzc4TDkgOS43NzggNS43NzggMTMgNSAxMi4yMjIgOC4yMjIgOSA1IDUuNzc4IDUuNzc4IDUgOSA4LjIyMiAxMi4yMjIgNWwuNzc4Ljc3OEw5Ljc3OCA5elwiIC8+XG4gICAgICA8L3N2Zz5cbiAgICA8L2J1dHRvbj5cbiAgKVxufVxuXG5jb25zdCBjb3B5TGlua1RvQ2xpcGJvYXJkID0gKGV2ZW50LCBwcm9wcykgPT4ge1xuICBjb3B5VG9DbGlwYm9hcmQocHJvcHMuZmlsZS51cGxvYWRVUkwsIHByb3BzLmkxOG4oJ2NvcHlMaW5rVG9DbGlwYm9hcmRGYWxsYmFjaycpKVxuICAgIC50aGVuKCgpID0+IHtcbiAgICAgIHByb3BzLnVwcHkubG9nKCdMaW5rIGNvcGllZCB0byBjbGlwYm9hcmQuJylcbiAgICAgIHByb3BzLnVwcHkuaW5mbyhwcm9wcy5pMThuKCdjb3B5TGlua1RvQ2xpcGJvYXJkU3VjY2VzcycpLCAnaW5mbycsIDMwMDApXG4gICAgfSlcbiAgICAuY2F0Y2gocHJvcHMudXBweS5sb2cpXG4gICAgLy8gYXZvaWQgbG9zaW5nIGZvY3VzXG4gICAgLnRoZW4oKCkgPT4gZXZlbnQudGFyZ2V0LmZvY3VzKHsgcHJldmVudFNjcm9sbDogdHJ1ZSB9KSlcbn1cblxuZnVuY3Rpb24gQ29weUxpbmtCdXR0b24gKHByb3BzKSB7XG4gIGNvbnN0IHsgaTE4biB9ID0gcHJvcHNcblxuICByZXR1cm4gKFxuICAgIDxidXR0b25cbiAgICAgIGNsYXNzTmFtZT1cInVwcHktdS1yZXNldCB1cHB5LURhc2hib2FyZC1JdGVtLWFjdGlvbiB1cHB5LURhc2hib2FyZC1JdGVtLWFjdGlvbi0tY29weUxpbmtcIlxuICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICBhcmlhLWxhYmVsPXtpMThuKCdjb3B5TGluaycpfVxuICAgICAgdGl0bGU9e2kxOG4oJ2NvcHlMaW5rJyl9XG4gICAgICBvbkNsaWNrPXsoZXZlbnQpID0+IGNvcHlMaW5rVG9DbGlwYm9hcmQoZXZlbnQsIHByb3BzKX1cbiAgICA+XG4gICAgICA8c3ZnIGFyaWEtaGlkZGVuPVwidHJ1ZVwiIGZvY3VzYWJsZT1cImZhbHNlXCIgY2xhc3NOYW1lPVwidXBweS1jLWljb25cIiB3aWR0aD1cIjE0XCIgaGVpZ2h0PVwiMTRcIiB2aWV3Qm94PVwiMCAwIDE0IDEyXCI+XG4gICAgICAgIDxwYXRoIGQ9XCJNNy45NCA3LjcwM2EyLjYxMyAyLjYxMyAwIDAgMS0uNjI2IDIuNjgxbC0uODUyLjg1MWEyLjU5NyAyLjU5NyAwIDAgMS0xLjg0OS43NjZBMi42MTYgMi42MTYgMCAwIDEgMi43NjQgNy41NGwuODUyLS44NTJhMi41OTYgMi41OTYgMCAwIDEgMi42OS0uNjI1TDUuMjY3IDcuMDk5YTEuNDQgMS40NCAwIDAgMC0uODMzLjQwN2wtLjg1Mi44NTFhMS40NTggMS40NTggMCAwIDAgMS4wMyAyLjQ4NmMuMzkgMCAuNzU1LS4xNTIgMS4wMy0uNDI2bC44NTItLjg1MmMuMjMxLS4yMzEuMzYzLS41MjIuNDA2LS44MjRsMS4wNC0xLjAzOHptNC4yOTUtNS45MzdBMi41OTYgMi41OTYgMCAwIDAgMTAuMzg3IDFjLS42OTggMC0xLjM1NS4yNzItMS44NDkuNzY2bC0uODUyLjg1MWEyLjYxNCAyLjYxNCAwIDAgMC0uNjI0IDIuNjg4bDEuMDM2LTEuMDM2Yy4wNDEtLjMwNC4xNzMtLjYuNDA3LS44MzNsLjg1Mi0uODUyYy4yNzUtLjI3NS42NC0uNDI2IDEuMDMtLjQyNmExLjQ1OCAxLjQ1OCAwIDAgMSAxLjAzIDIuNDg2bC0uODUyLjg1MWExLjQ0MiAxLjQ0MiAwIDAgMS0uODI0LjQwNmwtMS4wNCAxLjA0YTIuNTk2IDIuNTk2IDAgMCAwIDIuNjgzLS42MjhsLjg1MS0uODVhMi42MTYgMi42MTYgMCAwIDAgMC0zLjY5N3ptLTYuODggNi44ODNhLjU3Ny41NzcgMCAwIDAgLjgyIDBsMy40NzQtMy40NzRhLjU3OS41NzkgMCAxIDAtLjgxOS0uODJMNS4zNTUgNy44M2EuNTc5LjU3OSAwIDAgMCAwIC44MTl6XCIgLz5cbiAgICAgIDwvc3ZnPlxuICAgIDwvYnV0dG9uPlxuICApXG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gQnV0dG9ucyAocHJvcHMpIHtcbiAgY29uc3Qge1xuICAgIHVwcHksXG4gICAgZmlsZSxcbiAgICB1cGxvYWRJblByb2dyZXNzT3JDb21wbGV0ZSxcbiAgICBjYW5FZGl0RmlsZSxcbiAgICBtZXRhRmllbGRzLFxuICAgIHNob3dMaW5rVG9GaWxlVXBsb2FkUmVzdWx0LFxuICAgIHNob3dSZW1vdmVCdXR0b24sXG4gICAgaTE4bixcbiAgICB0b2dnbGVGaWxlQ2FyZCxcbiAgICBvcGVuRmlsZUVkaXRvcixcbiAgfSA9IHByb3BzXG5cbiAgY29uc3QgZWRpdEFjdGlvbiA9ICgpID0+IHtcbiAgICBpZiAobWV0YUZpZWxkcyAmJiBtZXRhRmllbGRzLmxlbmd0aCA+IDApIHtcbiAgICAgIHRvZ2dsZUZpbGVDYXJkKHRydWUsIGZpbGUuaWQpXG4gICAgfSBlbHNlIHtcbiAgICAgIG9wZW5GaWxlRWRpdG9yKGZpbGUpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cInVwcHktRGFzaGJvYXJkLUl0ZW0tYWN0aW9uV3JhcHBlclwiPlxuICAgICAgPEVkaXRCdXR0b25cbiAgICAgICAgaTE4bj17aTE4bn1cbiAgICAgICAgZmlsZT17ZmlsZX1cbiAgICAgICAgdXBsb2FkSW5Qcm9ncmVzc09yQ29tcGxldGU9e3VwbG9hZEluUHJvZ3Jlc3NPckNvbXBsZXRlfVxuICAgICAgICBjYW5FZGl0RmlsZT17Y2FuRWRpdEZpbGV9XG4gICAgICAgIG1ldGFGaWVsZHM9e21ldGFGaWVsZHN9XG4gICAgICAgIG9uQ2xpY2s9e2VkaXRBY3Rpb259XG4gICAgICAvPlxuICAgICAge3Nob3dMaW5rVG9GaWxlVXBsb2FkUmVzdWx0ICYmIGZpbGUudXBsb2FkVVJMID8gKFxuICAgICAgICA8Q29weUxpbmtCdXR0b25cbiAgICAgICAgICBmaWxlPXtmaWxlfVxuICAgICAgICAgIHVwcHk9e3VwcHl9XG4gICAgICAgICAgaTE4bj17aTE4bn1cbiAgICAgICAgLz5cbiAgICAgICkgOiBudWxsfVxuICAgICAge3Nob3dSZW1vdmVCdXR0b24gPyAoXG4gICAgICAgIDxSZW1vdmVCdXR0b25cbiAgICAgICAgICBpMThuPXtpMThufVxuICAgICAgICAgIGZpbGU9e2ZpbGV9XG4gICAgICAgICAgdXBweT17dXBweX1cbiAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBwcm9wcy51cHB5LnJlbW92ZUZpbGUoZmlsZS5pZCwgJ3JlbW92ZWQtYnktdXNlcicpfVxuICAgICAgICAvPlxuICAgICAgKSA6IG51bGx9XG4gICAgPC9kaXY+XG4gIClcbn1cbiIsImNvbnN0IHsgaCwgRnJhZ21lbnQgfSA9IHJlcXVpcmUoJ3ByZWFjdCcpXG5jb25zdCBwcmV0dGllckJ5dGVzID0gcmVxdWlyZSgnQHRyYW5zbG9hZGl0L3ByZXR0aWVyLWJ5dGVzJylcbmNvbnN0IHRydW5jYXRlU3RyaW5nID0gcmVxdWlyZSgnQHVwcHkvdXRpbHMvbGliL3RydW5jYXRlU3RyaW5nJylcbmNvbnN0IE1ldGFFcnJvck1lc3NhZ2UgPSByZXF1aXJlKCcuLi9NZXRhRXJyb3JNZXNzYWdlJylcblxuY29uc3QgcmVuZGVyRmlsZU5hbWUgPSAocHJvcHMpID0+IHtcbiAgY29uc3QgeyBhdXRob3IsIG5hbWUgfSA9IHByb3BzLmZpbGUubWV0YVxuXG4gIGZ1bmN0aW9uIGdldE1heE5hbWVMZW5ndGggKCkge1xuICAgIGlmIChwcm9wcy5jb250YWluZXJXaWR0aCA8PSAzNTIpIHtcbiAgICAgIHJldHVybiAzNVxuICAgIH1cbiAgICBpZiAocHJvcHMuY29udGFpbmVyV2lkdGggPD0gNTc2KSB7XG4gICAgICByZXR1cm4gNjBcbiAgICB9XG4gICAgLy8gV2hlbiBgYXV0aG9yYCBpcyBwcmVzZW50LCB3ZSB3YW50IHRvIG1ha2Ugc3VyZVxuICAgIC8vIHRoZSBmaWxlIG5hbWUgZml0cyBvbiBvbmUgbGluZSBzbyB3ZSBjYW4gcGxhY2VcbiAgICAvLyB0aGUgYXV0aG9yIG9uIHRoZSBzZWNvbmQgbGluZS5cbiAgICByZXR1cm4gYXV0aG9yID8gMjAgOiAzMFxuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cInVwcHktRGFzaGJvYXJkLUl0ZW0tbmFtZVwiIHRpdGxlPXtuYW1lfT5cbiAgICAgIHt0cnVuY2F0ZVN0cmluZyhuYW1lLCBnZXRNYXhOYW1lTGVuZ3RoKCkpfVxuICAgIDwvZGl2PlxuICApXG59XG5cbmNvbnN0IHJlbmRlckF1dGhvciA9IChwcm9wcykgPT4ge1xuICBjb25zdCB7IGF1dGhvciB9ID0gcHJvcHMuZmlsZS5tZXRhXG4gIGNvbnN0IHsgcHJvdmlkZXJOYW1lIH0gPSBwcm9wcy5maWxlLnJlbW90ZVxuICBjb25zdCBkb3QgPSBgXFx1MDBCN2BcblxuICBpZiAoIWF1dGhvcikge1xuICAgIHJldHVybiBudWxsXG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwidXBweS1EYXNoYm9hcmQtSXRlbS1hdXRob3JcIj5cbiAgICAgIDxhXG4gICAgICAgIGhyZWY9e2Ake2F1dGhvci51cmx9P3V0bV9zb3VyY2U9Q29tcGFuaW9uJnV0bV9tZWRpdW09cmVmZXJyYWxgfVxuICAgICAgICB0YXJnZXQ9XCJfYmxhbmtcIlxuICAgICAgICByZWw9XCJub29wZW5lciBub3JlZmVycmVyXCJcbiAgICAgID5cbiAgICAgICAge3RydW5jYXRlU3RyaW5nKGF1dGhvci5uYW1lLCAxMyl9XG4gICAgICA8L2E+XG4gICAgICB7cHJvdmlkZXJOYW1lID8gKFxuICAgICAgICA8RnJhZ21lbnQ+XG4gICAgICAgICAge2AgJHtkb3R9IGB9XG4gICAgICAgICAge3Byb3ZpZGVyTmFtZX1cbiAgICAgICAgPC9GcmFnbWVudD5cbiAgICAgICkgOiBudWxsfVxuICAgIDwvZGl2PlxuICApXG59XG5cbmNvbnN0IHJlbmRlckZpbGVTaXplID0gKHByb3BzKSA9PiBwcm9wcy5maWxlLnNpemUgJiYgKFxuICA8ZGl2IGNsYXNzTmFtZT1cInVwcHktRGFzaGJvYXJkLUl0ZW0tc3RhdHVzU2l6ZVwiPlxuICAgIHtwcmV0dGllckJ5dGVzKHByb3BzLmZpbGUuc2l6ZSl9XG4gIDwvZGl2PlxuKVxuXG5jb25zdCBSZVNlbGVjdEJ1dHRvbiA9IChwcm9wcykgPT4gcHJvcHMuZmlsZS5pc0dob3N0ICYmIChcbiAgPHNwYW4+XG4gICAgeycgXFx1MjAyMiAnfVxuICAgIDxidXR0b25cbiAgICAgIGNsYXNzTmFtZT1cInVwcHktdS1yZXNldCB1cHB5LWMtYnRuIHVwcHktRGFzaGJvYXJkLUl0ZW0tcmVTZWxlY3RcIlxuICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICBvbkNsaWNrPXtwcm9wcy50b2dnbGVBZGRGaWxlc1BhbmVsfVxuICAgID5cbiAgICAgIHtwcm9wcy5pMThuKCdyZVNlbGVjdCcpfVxuICAgIDwvYnV0dG9uPlxuICA8L3NwYW4+XG4pXG5cbmNvbnN0IEVycm9yQnV0dG9uID0gKHsgZmlsZSwgb25DbGljayB9KSA9PiB7XG4gIGlmIChmaWxlLmVycm9yKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxidXR0b25cbiAgICAgICAgY2xhc3NOYW1lPVwidXBweS11LXJlc2V0IHVwcHktRGFzaGJvYXJkLUl0ZW0tZXJyb3JEZXRhaWxzXCJcbiAgICAgICAgYXJpYS1sYWJlbD17ZmlsZS5lcnJvcn1cbiAgICAgICAgZGF0YS1taWNyb3RpcC1wb3NpdGlvbj1cImJvdHRvbVwiXG4gICAgICAgIGRhdGEtbWljcm90aXAtc2l6ZT1cIm1lZGl1bVwiXG4gICAgICAgIG9uQ2xpY2s9e29uQ2xpY2t9XG4gICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgPlxuICAgICAgICA/XG4gICAgICA8L2J1dHRvbj5cbiAgICApXG4gIH1cbiAgcmV0dXJuIG51bGxcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBGaWxlSW5mbyAocHJvcHMpIHtcbiAgY29uc3QgeyBmaWxlIH0gPSBwcm9wc1xuICByZXR1cm4gKFxuICAgIDxkaXZcbiAgICAgIGNsYXNzTmFtZT1cInVwcHktRGFzaGJvYXJkLUl0ZW0tZmlsZUluZm9cIlxuICAgICAgZGF0YS11cHB5LWZpbGUtc291cmNlPXtmaWxlLnNvdXJjZX1cbiAgICA+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInVwcHktRGFzaGJvYXJkLUl0ZW0tZmlsZU5hbWVcIj5cbiAgICAgICAge3JlbmRlckZpbGVOYW1lKHByb3BzKX1cbiAgICAgICAgPEVycm9yQnV0dG9uXG4gICAgICAgICAgZmlsZT17cHJvcHMuZmlsZX1cbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tYWxlcnRcbiAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBhbGVydChwcm9wcy5maWxlLmVycm9yKX0gLy8gVE9ETzogbW92ZSB0byBhIGN1c3RvbSBhbGVydCBpbXBsZW1lbnRhdGlvblxuICAgICAgICAvPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInVwcHktRGFzaGJvYXJkLUl0ZW0tc3RhdHVzXCI+XG4gICAgICAgIHtyZW5kZXJBdXRob3IocHJvcHMpfVxuICAgICAgICB7cmVuZGVyRmlsZVNpemUocHJvcHMpfVxuICAgICAgICB7UmVTZWxlY3RCdXR0b24ocHJvcHMpfVxuICAgICAgPC9kaXY+XG4gICAgICA8TWV0YUVycm9yTWVzc2FnZVxuICAgICAgICBmaWxlPXtwcm9wcy5maWxlfVxuICAgICAgICBpMThuPXtwcm9wcy5pMThufVxuICAgICAgICB0b2dnbGVGaWxlQ2FyZD17cHJvcHMudG9nZ2xlRmlsZUNhcmR9XG4gICAgICAgIG1ldGFGaWVsZHM9e3Byb3BzLm1ldGFGaWVsZHN9XG4gICAgICAvPlxuICAgIDwvZGl2PlxuICApXG59XG4iLCJjb25zdCB7IGggfSA9IHJlcXVpcmUoJ3ByZWFjdCcpXG5jb25zdCBGaWxlUHJldmlldyA9IHJlcXVpcmUoJy4uLy4uL0ZpbGVQcmV2aWV3JylcbmNvbnN0IE1ldGFFcnJvck1lc3NhZ2UgPSByZXF1aXJlKCcuLi9NZXRhRXJyb3JNZXNzYWdlJylcbmNvbnN0IGdldEZpbGVUeXBlSWNvbiA9IHJlcXVpcmUoJy4uLy4uLy4uL3V0aWxzL2dldEZpbGVUeXBlSWNvbicpXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gRmlsZVByZXZpZXdBbmRMaW5rIChwcm9wcykge1xuICByZXR1cm4gKFxuICAgIDxkaXZcbiAgICAgIGNsYXNzTmFtZT1cInVwcHktRGFzaGJvYXJkLUl0ZW0tcHJldmlld0lubmVyV3JhcFwiXG4gICAgICBzdHlsZT17eyBiYWNrZ3JvdW5kQ29sb3I6IGdldEZpbGVUeXBlSWNvbihwcm9wcy5maWxlLnR5cGUpLmNvbG9yIH19XG4gICAgPlxuICAgICAge1xuICAgICAgICBwcm9wcy5zaG93TGlua1RvRmlsZVVwbG9hZFJlc3VsdFxuICAgICAgICAmJiBwcm9wcy5maWxlLnVwbG9hZFVSTFxuICAgICAgICAgICYmIChcbiAgICAgICAgICA8YVxuICAgICAgICAgICAgY2xhc3NOYW1lPVwidXBweS1EYXNoYm9hcmQtSXRlbS1wcmV2aWV3TGlua1wiXG4gICAgICAgICAgICBocmVmPXtwcm9wcy5maWxlLnVwbG9hZFVSTH1cbiAgICAgICAgICAgIHJlbD1cIm5vcmVmZXJyZXIgbm9vcGVuZXJcIlxuICAgICAgICAgICAgdGFyZ2V0PVwiX2JsYW5rXCJcbiAgICAgICAgICAgIGFyaWEtbGFiZWw9e3Byb3BzLmZpbGUubWV0YS5uYW1lfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxzcGFuIGhpZGRlbj57cHJvcHMuZmlsZS5tZXRhLm5hbWV9PC9zcGFuPlxuICAgICAgICAgIDwvYT5cbiAgICAgICAgICApXG4gICAgICB9XG4gICAgICA8RmlsZVByZXZpZXcgZmlsZT17cHJvcHMuZmlsZX0gLz5cbiAgICAgIDxNZXRhRXJyb3JNZXNzYWdlXG4gICAgICAgIGZpbGU9e3Byb3BzLmZpbGV9XG4gICAgICAgIGkxOG49e3Byb3BzLmkxOG59XG4gICAgICAgIHRvZ2dsZUZpbGVDYXJkPXtwcm9wcy50b2dnbGVGaWxlQ2FyZH1cbiAgICAgICAgbWV0YUZpZWxkcz17cHJvcHMubWV0YUZpZWxkc31cbiAgICAgIC8+XG4gICAgPC9kaXY+XG4gIClcbn1cbiIsImNvbnN0IHsgaCB9ID0gcmVxdWlyZSgncHJlYWN0JylcblxuZnVuY3Rpb24gb25QYXVzZVJlc3VtZUNhbmNlbFJldHJ5IChwcm9wcykge1xuICBpZiAocHJvcHMuaXNVcGxvYWRlZCkgcmV0dXJuXG5cbiAgaWYgKHByb3BzLmVycm9yICYmICFwcm9wcy5oaWRlUmV0cnlCdXR0b24pIHtcbiAgICBwcm9wcy51cHB5LnJldHJ5VXBsb2FkKHByb3BzLmZpbGUuaWQpXG4gICAgcmV0dXJuXG4gIH1cblxuICBpZiAocHJvcHMucmVzdW1hYmxlVXBsb2FkcyAmJiAhcHJvcHMuaGlkZVBhdXNlUmVzdW1lQnV0dG9uKSB7XG4gICAgcHJvcHMudXBweS5wYXVzZVJlc3VtZShwcm9wcy5maWxlLmlkKVxuICB9IGVsc2UgaWYgKHByb3BzLmluZGl2aWR1YWxDYW5jZWxsYXRpb24gJiYgIXByb3BzLmhpZGVDYW5jZWxCdXR0b24pIHtcbiAgICBwcm9wcy51cHB5LnJlbW92ZUZpbGUocHJvcHMuZmlsZS5pZClcbiAgfVxufVxuXG5mdW5jdGlvbiBwcm9ncmVzc0luZGljYXRvclRpdGxlIChwcm9wcykge1xuICBpZiAocHJvcHMuaXNVcGxvYWRlZCkge1xuICAgIHJldHVybiBwcm9wcy5pMThuKCd1cGxvYWRDb21wbGV0ZScpXG4gIH1cblxuICBpZiAocHJvcHMuZXJyb3IpIHtcbiAgICByZXR1cm4gcHJvcHMuaTE4bigncmV0cnlVcGxvYWQnKVxuICB9XG5cbiAgaWYgKHByb3BzLnJlc3VtYWJsZVVwbG9hZHMpIHtcbiAgICBpZiAocHJvcHMuZmlsZS5pc1BhdXNlZCkge1xuICAgICAgcmV0dXJuIHByb3BzLmkxOG4oJ3Jlc3VtZVVwbG9hZCcpXG4gICAgfVxuICAgIHJldHVybiBwcm9wcy5pMThuKCdwYXVzZVVwbG9hZCcpXG4gIH0gaWYgKHByb3BzLmluZGl2aWR1YWxDYW5jZWxsYXRpb24pIHtcbiAgICByZXR1cm4gcHJvcHMuaTE4bignY2FuY2VsVXBsb2FkJylcbiAgfVxuXG4gIHJldHVybiAnJ1xufVxuXG5mdW5jdGlvbiBQcm9ncmVzc0luZGljYXRvckJ1dHRvbiAocHJvcHMpIHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cInVwcHktRGFzaGJvYXJkLUl0ZW0tcHJvZ3Jlc3NcIj5cbiAgICAgIDxidXR0b25cbiAgICAgICAgY2xhc3NOYW1lPVwidXBweS11LXJlc2V0IHVwcHktRGFzaGJvYXJkLUl0ZW0tcHJvZ3Jlc3NJbmRpY2F0b3JcIlxuICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgYXJpYS1sYWJlbD17cHJvZ3Jlc3NJbmRpY2F0b3JUaXRsZShwcm9wcyl9XG4gICAgICAgIHRpdGxlPXtwcm9ncmVzc0luZGljYXRvclRpdGxlKHByb3BzKX1cbiAgICAgICAgb25DbGljaz17KCkgPT4gb25QYXVzZVJlc3VtZUNhbmNlbFJldHJ5KHByb3BzKX1cbiAgICAgID5cbiAgICAgICAge3Byb3BzLmNoaWxkcmVufVxuICAgICAgPC9idXR0b24+XG4gICAgPC9kaXY+XG4gIClcbn1cblxuZnVuY3Rpb24gUHJvZ3Jlc3NDaXJjbGVDb250YWluZXIgKHsgY2hpbGRyZW4gfSkge1xuICByZXR1cm4gKFxuICAgIDxzdmdcbiAgICAgIGFyaWEtaGlkZGVuPVwidHJ1ZVwiXG4gICAgICBmb2N1c2FibGU9XCJmYWxzZVwiXG4gICAgICB3aWR0aD1cIjcwXCJcbiAgICAgIGhlaWdodD1cIjcwXCJcbiAgICAgIHZpZXdCb3g9XCIwIDAgMzYgMzZcIlxuICAgICAgY2xhc3NOYW1lPVwidXBweS1jLWljb24gdXBweS1EYXNoYm9hcmQtSXRlbS1wcm9ncmVzc0ljb24tLWNpcmNsZVwiXG4gICAgPlxuICAgICAge2NoaWxkcmVufVxuICAgIDwvc3ZnPlxuICApXG59XG5cbmZ1bmN0aW9uIFByb2dyZXNzQ2lyY2xlICh7IHByb2dyZXNzIH0pIHtcbiAgLy8gY2lyY2xlIGxlbmd0aCBlcXVhbHMgMiAqIFBJICogUlxuICBjb25zdCBjaXJjbGVMZW5ndGggPSAyICogTWF0aC5QSSAqIDE1XG5cbiAgcmV0dXJuIChcbiAgICA8Zz5cbiAgICAgIDxjaXJjbGVcbiAgICAgICAgY2xhc3NOYW1lPVwidXBweS1EYXNoYm9hcmQtSXRlbS1wcm9ncmVzc0ljb24tLWJnXCJcbiAgICAgICAgcj1cIjE1XCJcbiAgICAgICAgY3g9XCIxOFwiXG4gICAgICAgIGN5PVwiMThcIlxuICAgICAgICBzdHJva2Utd2lkdGg9XCIyXCJcbiAgICAgICAgZmlsbD1cIm5vbmVcIlxuICAgICAgLz5cbiAgICAgIDxjaXJjbGVcbiAgICAgICAgY2xhc3NOYW1lPVwidXBweS1EYXNoYm9hcmQtSXRlbS1wcm9ncmVzc0ljb24tLXByb2dyZXNzXCJcbiAgICAgICAgcj1cIjE1XCJcbiAgICAgICAgY3g9XCIxOFwiXG4gICAgICAgIGN5PVwiMThcIlxuICAgICAgICB0cmFuc2Zvcm09XCJyb3RhdGUoLTkwLCAxOCwgMTgpXCJcbiAgICAgICAgZmlsbD1cIm5vbmVcIlxuICAgICAgICBzdHJva2Utd2lkdGg9XCIyXCJcbiAgICAgICAgc3Ryb2tlLWRhc2hhcnJheT17Y2lyY2xlTGVuZ3RofVxuICAgICAgICBzdHJva2UtZGFzaG9mZnNldD17Y2lyY2xlTGVuZ3RoIC0gKChjaXJjbGVMZW5ndGggLyAxMDApICogcHJvZ3Jlc3MpfVxuICAgICAgLz5cbiAgICA8L2c+XG4gIClcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBGaWxlUHJvZ3Jlc3MgKHByb3BzKSB7XG4gIC8vIE5vdGhpbmcgaWYgdXBsb2FkIGhhcyBub3Qgc3RhcnRlZFxuICBpZiAoIXByb3BzLmZpbGUucHJvZ3Jlc3MudXBsb2FkU3RhcnRlZCkge1xuICAgIHJldHVybiBudWxsXG4gIH1cblxuICAvLyBHcmVlbiBjaGVja21hcmsgd2hlbiBjb21wbGV0ZVxuICBpZiAocHJvcHMuaXNVcGxvYWRlZCkge1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInVwcHktRGFzaGJvYXJkLUl0ZW0tcHJvZ3Jlc3NcIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ1cHB5LURhc2hib2FyZC1JdGVtLXByb2dyZXNzSW5kaWNhdG9yXCI+XG4gICAgICAgICAgPFByb2dyZXNzQ2lyY2xlQ29udGFpbmVyPlxuICAgICAgICAgICAgPGNpcmNsZSByPVwiMTVcIiBjeD1cIjE4XCIgY3k9XCIxOFwiIGZpbGw9XCIjMWJiMjQwXCIgLz5cbiAgICAgICAgICAgIDxwb2x5Z29uIGNsYXNzTmFtZT1cInVwcHktRGFzaGJvYXJkLUl0ZW0tcHJvZ3Jlc3NJY29uLS1jaGVja1wiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgyLCAzKVwiIHBvaW50cz1cIjE0IDIyLjUgNyAxNS4yNDU3MDY1IDguOTk5ODU4NTcgMTMuMTczMjgxNSAxNCAxOC4zNTQ3MTA0IDIyLjk3Mjk4ODMgOSAyNSAxMS4xMDA1NjM0XCIgLz5cbiAgICAgICAgICA8L1Byb2dyZXNzQ2lyY2xlQ29udGFpbmVyPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIClcbiAgfVxuXG4gIGlmIChwcm9wcy5yZWNvdmVyZWRTdGF0ZSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgLy8gUmV0cnkgYnV0dG9uIGZvciBlcnJvclxuICBpZiAocHJvcHMuZXJyb3IgJiYgIXByb3BzLmhpZGVSZXRyeUJ1dHRvbikge1xuICAgIHJldHVybiAoXG4gICAgICA8UHJvZ3Jlc3NJbmRpY2F0b3JCdXR0b24gey4uLnByb3BzfT5cbiAgICAgICAgPHN2ZyBhcmlhLWhpZGRlbj1cInRydWVcIiBmb2N1c2FibGU9XCJmYWxzZVwiIGNsYXNzTmFtZT1cInVwcHktYy1pY29uIHVwcHktRGFzaGJvYXJkLUl0ZW0tcHJvZ3Jlc3NJY29uLS1yZXRyeVwiIHdpZHRoPVwiMjhcIiBoZWlnaHQ9XCIzMVwiIHZpZXdCb3g9XCIwIDAgMTYgMTlcIj5cbiAgICAgICAgICA8cGF0aCBkPVwiTTE2IDExYTggOCAwIDEgMS04LTh2MmE2IDYgMCAxIDAgNiA2aDJ6XCIgLz5cbiAgICAgICAgICA8cGF0aCBkPVwiTTcuOSAzSDEwdjJINy45elwiIC8+XG4gICAgICAgICAgPHBhdGggZD1cIk04LjUzNi41bDMuNTM1IDMuNTM2LTEuNDE0IDEuNDE0TDcuMTIgMS45MTR6XCIgLz5cbiAgICAgICAgICA8cGF0aCBkPVwiTTEwLjY1NyAyLjYyMWwxLjQxNCAxLjQxNUw4LjUzNiA3LjU3IDcuMTIgNi4xNTd6XCIgLz5cbiAgICAgICAgPC9zdmc+XG4gICAgICA8L1Byb2dyZXNzSW5kaWNhdG9yQnV0dG9uPlxuICAgIClcbiAgfVxuXG4gIC8vIFBhdXNlL3Jlc3VtZSBidXR0b24gZm9yIHJlc3VtYWJsZSB1cGxvYWRzXG4gIGlmIChwcm9wcy5yZXN1bWFibGVVcGxvYWRzICYmICFwcm9wcy5oaWRlUGF1c2VSZXN1bWVCdXR0b24pIHtcbiAgICByZXR1cm4gKFxuICAgICAgPFByb2dyZXNzSW5kaWNhdG9yQnV0dG9uIHsuLi5wcm9wc30+XG4gICAgICAgIDxQcm9ncmVzc0NpcmNsZUNvbnRhaW5lcj5cbiAgICAgICAgICA8UHJvZ3Jlc3NDaXJjbGUgcHJvZ3Jlc3M9e3Byb3BzLmZpbGUucHJvZ3Jlc3MucGVyY2VudGFnZX0gLz5cbiAgICAgICAgICB7XG4gICAgICAgICAgICBwcm9wcy5maWxlLmlzUGF1c2VkXG4gICAgICAgICAgICAgID8gPHBvbHlnb24gY2xhc3NOYW1lPVwidXBweS1EYXNoYm9hcmQtSXRlbS1wcm9ncmVzc0ljb24tLXBsYXlcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoMywgMylcIiBwb2ludHM9XCIxMiAyMCAxMiAxMCAyMCAxNVwiIC8+XG4gICAgICAgICAgICAgIDogKFxuICAgICAgICAgICAgICAgIDxnIGNsYXNzTmFtZT1cInVwcHktRGFzaGJvYXJkLUl0ZW0tcHJvZ3Jlc3NJY29uLS1wYXVzZVwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgxNC41LCAxMylcIj5cbiAgICAgICAgICAgICAgICAgIDxyZWN0IHg9XCIwXCIgeT1cIjBcIiB3aWR0aD1cIjJcIiBoZWlnaHQ9XCIxMFwiIHJ4PVwiMFwiIC8+XG4gICAgICAgICAgICAgICAgICA8cmVjdCB4PVwiNVwiIHk9XCIwXCIgd2lkdGg9XCIyXCIgaGVpZ2h0PVwiMTBcIiByeD1cIjBcIiAvPlxuICAgICAgICAgICAgICAgIDwvZz5cbiAgICAgICAgICAgICAgKVxuICAgICAgICAgIH1cbiAgICAgICAgPC9Qcm9ncmVzc0NpcmNsZUNvbnRhaW5lcj5cbiAgICAgIDwvUHJvZ3Jlc3NJbmRpY2F0b3JCdXR0b24+XG4gICAgKVxuICB9XG5cbiAgLy8gQ2FuY2VsIGJ1dHRvbiBmb3Igbm9uLXJlc3VtYWJsZSB1cGxvYWRzIGlmIGluZGl2aWR1YWxDYW5jZWxsYXRpb24gaXMgc3VwcG9ydGVkIChub3QgYnVuZGxlZClcbiAgaWYgKCFwcm9wcy5yZXN1bWFibGVVcGxvYWRzICYmIHByb3BzLmluZGl2aWR1YWxDYW5jZWxsYXRpb24gJiYgIXByb3BzLmhpZGVDYW5jZWxCdXR0b24pIHtcbiAgICByZXR1cm4gKFxuICAgICAgPFByb2dyZXNzSW5kaWNhdG9yQnV0dG9uIHsuLi5wcm9wc30+XG4gICAgICAgIDxQcm9ncmVzc0NpcmNsZUNvbnRhaW5lcj5cbiAgICAgICAgICA8UHJvZ3Jlc3NDaXJjbGUgcHJvZ3Jlc3M9e3Byb3BzLmZpbGUucHJvZ3Jlc3MucGVyY2VudGFnZX0gLz5cbiAgICAgICAgICA8cG9seWdvbiBjbGFzc05hbWU9XCJjYW5jZWxcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoMiwgMilcIiBwb2ludHM9XCIxOS44ODU2NTE2IDExLjA2MjUgMTYgMTQuOTQ4MTUxNiAxMi4xMDE5NzM3IDExLjA2MjUgMTEuMDYyNSAxMi4xMTQzNDg0IDE0Ljk0ODE1MTYgMTYgMTEuMDYyNSAxOS44OTgwMjYzIDEyLjEwMTk3MzcgMjAuOTM3NSAxNiAxNy4wNTE4NDg0IDE5Ljg4NTY1MTYgMjAuOTM3NSAyMC45Mzc1IDE5Ljg5ODAyNjMgMTcuMDUxODQ4NCAxNiAyMC45Mzc1IDEyXCIgLz5cbiAgICAgICAgPC9Qcm9ncmVzc0NpcmNsZUNvbnRhaW5lcj5cbiAgICAgIDwvUHJvZ3Jlc3NJbmRpY2F0b3JCdXR0b24+XG4gICAgKVxuICB9XG5cbiAgLy8gSnVzdCBwcm9ncmVzcyB3aGVuIGJ1dHRvbnMgYXJlIGRpc2FibGVkXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJ1cHB5LURhc2hib2FyZC1JdGVtLXByb2dyZXNzXCI+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInVwcHktRGFzaGJvYXJkLUl0ZW0tcHJvZ3Jlc3NJbmRpY2F0b3JcIj5cbiAgICAgICAgPFByb2dyZXNzQ2lyY2xlQ29udGFpbmVyPlxuICAgICAgICAgIDxQcm9ncmVzc0NpcmNsZSBwcm9ncmVzcz17cHJvcHMuZmlsZS5wcm9ncmVzcy5wZXJjZW50YWdlfSAvPlxuICAgICAgICA8L1Byb2dyZXNzQ2lyY2xlQ29udGFpbmVyPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIClcbn1cbiIsImNvbnN0IHsgaCB9ID0gcmVxdWlyZSgncHJlYWN0JylcblxuY29uc3QgbWV0YUZpZWxkSWRUb05hbWUgPSAobWV0YUZpZWxkSWQsIG1ldGFGaWVsZHMpID0+IHtcbiAgY29uc3QgZmllbGQgPSBtZXRhRmllbGRzLmZpbHRlcihmID0+IGYuaWQgPT09IG1ldGFGaWVsZElkKVxuICByZXR1cm4gZmllbGRbMF0ubmFtZVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHJlbmRlck1pc3NpbmdNZXRhRmllbGRzRXJyb3IgKHByb3BzKSB7XG4gIGNvbnN0IHsgZmlsZSwgdG9nZ2xlRmlsZUNhcmQsIGkxOG4sIG1ldGFGaWVsZHMgfSA9IHByb3BzXG4gIGNvbnN0IHsgbWlzc2luZ1JlcXVpcmVkTWV0YUZpZWxkcyB9ID0gZmlsZVxuICBpZiAoIW1pc3NpbmdSZXF1aXJlZE1ldGFGaWVsZHM/Lmxlbmd0aCkge1xuICAgIHJldHVybiBudWxsXG4gIH1cblxuICBjb25zdCBtZXRhRmllbGRzU3RyaW5nID0gbWlzc2luZ1JlcXVpcmVkTWV0YUZpZWxkcy5tYXAobWlzc2luZ01ldGFGaWVsZCA9PiAoXG4gICAgbWV0YUZpZWxkSWRUb05hbWUobWlzc2luZ01ldGFGaWVsZCwgbWV0YUZpZWxkcylcbiAgKSkuam9pbignLCAnKVxuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJ1cHB5LURhc2hib2FyZC1JdGVtLWVycm9yTWVzc2FnZVwiPlxuICAgICAge2kxOG4oJ21pc3NpbmdSZXF1aXJlZE1ldGFGaWVsZHMnLCB7XG4gICAgICAgIHNtYXJ0X2NvdW50OiBtaXNzaW5nUmVxdWlyZWRNZXRhRmllbGRzLmxlbmd0aCxcbiAgICAgICAgZmllbGRzOiBtZXRhRmllbGRzU3RyaW5nLFxuICAgICAgfSl9XG4gICAgICB7JyAnfVxuICAgICAgPGJ1dHRvblxuICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgY2xhc3M9XCJ1cHB5LXUtcmVzZXQgdXBweS1EYXNoYm9hcmQtSXRlbS1lcnJvck1lc3NhZ2VCdG5cIlxuICAgICAgICBvbkNsaWNrPXsoKSA9PiB0b2dnbGVGaWxlQ2FyZCh0cnVlLCBmaWxlLmlkKX1cbiAgICAgID5cbiAgICAgICAge2kxOG4oJ2VkaXRGaWxlJyl9XG4gICAgICA8L2J1dHRvbj5cbiAgICA8L2Rpdj5cbiAgKVxufVxuIiwiY29uc3QgeyBoLCBDb21wb25lbnQgfSA9IHJlcXVpcmUoJ3ByZWFjdCcpXG5jb25zdCBjbGFzc05hbWVzID0gcmVxdWlyZSgnY2xhc3NuYW1lcycpXG5jb25zdCBzaGFsbG93RXF1YWwgPSByZXF1aXJlKCdpcy1zaGFsbG93LWVxdWFsJylcbmNvbnN0IEZpbGVQcmV2aWV3QW5kTGluayA9IHJlcXVpcmUoJy4vRmlsZVByZXZpZXdBbmRMaW5rJylcbmNvbnN0IEZpbGVQcm9ncmVzcyA9IHJlcXVpcmUoJy4vRmlsZVByb2dyZXNzJylcbmNvbnN0IEZpbGVJbmZvID0gcmVxdWlyZSgnLi9GaWxlSW5mbycpXG5jb25zdCBCdXR0b25zID0gcmVxdWlyZSgnLi9CdXR0b25zJylcblxubW9kdWxlLmV4cG9ydHMgPSBjbGFzcyBGaWxlSXRlbSBleHRlbmRzIENvbXBvbmVudCB7XG4gIGNvbXBvbmVudERpZE1vdW50ICgpIHtcbiAgICBjb25zdCB7IGZpbGUgfSA9IHRoaXMucHJvcHNcbiAgICBpZiAoIWZpbGUucHJldmlldykge1xuICAgICAgdGhpcy5wcm9wcy5oYW5kbGVSZXF1ZXN0VGh1bWJuYWlsKGZpbGUpXG4gICAgfVxuICB9XG5cbiAgc2hvdWxkQ29tcG9uZW50VXBkYXRlIChuZXh0UHJvcHMpIHtcbiAgICByZXR1cm4gIXNoYWxsb3dFcXVhbCh0aGlzLnByb3BzLCBuZXh0UHJvcHMpXG4gIH1cblxuICAvLyBWaXJ0dWFsTGlzdCBtb3VudHMgRmlsZUl0ZW1zIGFnYWluIGFuZCB0aGV5IGVtaXQgYHRodW1ibmFpbDpyZXF1ZXN0YFxuICAvLyBPdGhlcndpc2UgdGh1bWJuYWlscyBhcmUgYnJva2VuIG9yIG1pc3NpbmcgYWZ0ZXIgR29sZGVuIFJldHJpZXZlciByZXN0b3JlcyBmaWxlc1xuICBjb21wb25lbnREaWRVcGRhdGUgKCkge1xuICAgIGNvbnN0IHsgZmlsZSB9ID0gdGhpcy5wcm9wc1xuICAgIGlmICghZmlsZS5wcmV2aWV3KSB7XG4gICAgICB0aGlzLnByb3BzLmhhbmRsZVJlcXVlc3RUaHVtYm5haWwoZmlsZSlcbiAgICB9XG4gIH1cblxuICBjb21wb25lbnRXaWxsVW5tb3VudCAoKSB7XG4gICAgY29uc3QgeyBmaWxlIH0gPSB0aGlzLnByb3BzXG4gICAgaWYgKCFmaWxlLnByZXZpZXcpIHtcbiAgICAgIHRoaXMucHJvcHMuaGFuZGxlQ2FuY2VsVGh1bWJuYWlsKGZpbGUpXG4gICAgfVxuICB9XG5cbiAgcmVuZGVyICgpIHtcbiAgICBjb25zdCB7IGZpbGUgfSA9IHRoaXMucHJvcHNcblxuICAgIGNvbnN0IGlzUHJvY2Vzc2luZyA9IGZpbGUucHJvZ3Jlc3MucHJlcHJvY2VzcyB8fCBmaWxlLnByb2dyZXNzLnBvc3Rwcm9jZXNzXG4gICAgY29uc3QgaXNVcGxvYWRlZCA9IGZpbGUucHJvZ3Jlc3MudXBsb2FkQ29tcGxldGUgJiYgIWlzUHJvY2Vzc2luZyAmJiAhZmlsZS5lcnJvclxuICAgIGNvbnN0IHVwbG9hZEluUHJvZ3Jlc3NPckNvbXBsZXRlID0gZmlsZS5wcm9ncmVzcy51cGxvYWRTdGFydGVkIHx8IGlzUHJvY2Vzc2luZ1xuICAgIGNvbnN0IHVwbG9hZEluUHJvZ3Jlc3MgPSAoZmlsZS5wcm9ncmVzcy51cGxvYWRTdGFydGVkICYmICFmaWxlLnByb2dyZXNzLnVwbG9hZENvbXBsZXRlKSB8fCBpc1Byb2Nlc3NpbmdcbiAgICBjb25zdCBlcnJvciA9IGZpbGUuZXJyb3IgfHwgZmFsc2VcblxuICAgIC8vIEZpbGUgdGhhdCBHb2xkZW4gUmV0cmlldmVyIHdhcyBhYmxlIHRvIHBhcnRseSByZXN0b3JlIChvbmx5IG1ldGEsIG5vdCBibG9iKSxcbiAgICAvLyB1c2VycyBzdGlsbCBuZWVkIHRvIHJlLWFkZCBpdCwgc28gaXTigJlzIGEgZ2hvc3RcbiAgICBjb25zdCB7IGlzR2hvc3QgfSA9IGZpbGVcblxuICAgIGxldCBzaG93UmVtb3ZlQnV0dG9uID0gdGhpcy5wcm9wcy5pbmRpdmlkdWFsQ2FuY2VsbGF0aW9uXG4gICAgICA/ICFpc1VwbG9hZGVkXG4gICAgICA6ICF1cGxvYWRJblByb2dyZXNzICYmICFpc1VwbG9hZGVkXG5cbiAgICBpZiAoaXNVcGxvYWRlZCAmJiB0aGlzLnByb3BzLnNob3dSZW1vdmVCdXR0b25BZnRlckNvbXBsZXRlKSB7XG4gICAgICBzaG93UmVtb3ZlQnV0dG9uID0gdHJ1ZVxuICAgIH1cblxuICAgIGNvbnN0IGRhc2hib2FyZEl0ZW1DbGFzcyA9IGNsYXNzTmFtZXMoe1xuICAgICAgJ3VwcHktRGFzaGJvYXJkLUl0ZW0nOiB0cnVlLFxuICAgICAgJ2lzLWlucHJvZ3Jlc3MnOiB1cGxvYWRJblByb2dyZXNzICYmICF0aGlzLnByb3BzLnJlY292ZXJlZFN0YXRlLFxuICAgICAgJ2lzLXByb2Nlc3NpbmcnOiBpc1Byb2Nlc3NpbmcsXG4gICAgICAnaXMtY29tcGxldGUnOiBpc1VwbG9hZGVkLFxuICAgICAgJ2lzLWVycm9yJzogISFlcnJvcixcbiAgICAgICdpcy1yZXN1bWFibGUnOiB0aGlzLnByb3BzLnJlc3VtYWJsZVVwbG9hZHMsXG4gICAgICAnaXMtbm9JbmRpdmlkdWFsQ2FuY2VsbGF0aW9uJzogIXRoaXMucHJvcHMuaW5kaXZpZHVhbENhbmNlbGxhdGlvbixcbiAgICAgICdpcy1naG9zdCc6IGlzR2hvc3QsXG4gICAgfSlcblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2XG4gICAgICAgIGNsYXNzTmFtZT17ZGFzaGJvYXJkSXRlbUNsYXNzfVxuICAgICAgICBpZD17YHVwcHlfJHtmaWxlLmlkfWB9XG4gICAgICAgIHJvbGU9e3RoaXMucHJvcHMucm9sZX1cbiAgICAgID5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ1cHB5LURhc2hib2FyZC1JdGVtLXByZXZpZXdcIj5cbiAgICAgICAgICA8RmlsZVByZXZpZXdBbmRMaW5rXG4gICAgICAgICAgICBmaWxlPXtmaWxlfVxuICAgICAgICAgICAgc2hvd0xpbmtUb0ZpbGVVcGxvYWRSZXN1bHQ9e3RoaXMucHJvcHMuc2hvd0xpbmtUb0ZpbGVVcGxvYWRSZXN1bHR9XG4gICAgICAgICAgICBpMThuPXt0aGlzLnByb3BzLmkxOG59XG4gICAgICAgICAgICB0b2dnbGVGaWxlQ2FyZD17dGhpcy5wcm9wcy50b2dnbGVGaWxlQ2FyZH1cbiAgICAgICAgICAgIG1ldGFGaWVsZHM9e3RoaXMucHJvcHMubWV0YUZpZWxkc31cbiAgICAgICAgICAvPlxuICAgICAgICAgIDxGaWxlUHJvZ3Jlc3NcbiAgICAgICAgICAgIHVwcHk9e3RoaXMucHJvcHMudXBweX1cbiAgICAgICAgICAgIGZpbGU9e2ZpbGV9XG4gICAgICAgICAgICBlcnJvcj17ZXJyb3J9XG4gICAgICAgICAgICBpc1VwbG9hZGVkPXtpc1VwbG9hZGVkfVxuICAgICAgICAgICAgaGlkZVJldHJ5QnV0dG9uPXt0aGlzLnByb3BzLmhpZGVSZXRyeUJ1dHRvbn1cbiAgICAgICAgICAgIGhpZGVDYW5jZWxCdXR0b249e3RoaXMucHJvcHMuaGlkZUNhbmNlbEJ1dHRvbn1cbiAgICAgICAgICAgIGhpZGVQYXVzZVJlc3VtZUJ1dHRvbj17dGhpcy5wcm9wcy5oaWRlUGF1c2VSZXN1bWVCdXR0b259XG4gICAgICAgICAgICByZWNvdmVyZWRTdGF0ZT17dGhpcy5wcm9wcy5yZWNvdmVyZWRTdGF0ZX1cbiAgICAgICAgICAgIHNob3dSZW1vdmVCdXR0b25BZnRlckNvbXBsZXRlPXt0aGlzLnByb3BzLnNob3dSZW1vdmVCdXR0b25BZnRlckNvbXBsZXRlfVxuICAgICAgICAgICAgcmVzdW1hYmxlVXBsb2Fkcz17dGhpcy5wcm9wcy5yZXN1bWFibGVVcGxvYWRzfVxuICAgICAgICAgICAgaW5kaXZpZHVhbENhbmNlbGxhdGlvbj17dGhpcy5wcm9wcy5pbmRpdmlkdWFsQ2FuY2VsbGF0aW9ufVxuICAgICAgICAgICAgaTE4bj17dGhpcy5wcm9wcy5pMThufVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidXBweS1EYXNoYm9hcmQtSXRlbS1maWxlSW5mb0FuZEJ1dHRvbnNcIj5cbiAgICAgICAgICA8RmlsZUluZm9cbiAgICAgICAgICAgIGZpbGU9e2ZpbGV9XG4gICAgICAgICAgICBpZD17dGhpcy5wcm9wcy5pZH1cbiAgICAgICAgICAgIGFjcXVpcmVycz17dGhpcy5wcm9wcy5hY3F1aXJlcnN9XG4gICAgICAgICAgICBjb250YWluZXJXaWR0aD17dGhpcy5wcm9wcy5jb250YWluZXJXaWR0aH1cbiAgICAgICAgICAgIGkxOG49e3RoaXMucHJvcHMuaTE4bn1cbiAgICAgICAgICAgIHRvZ2dsZUFkZEZpbGVzUGFuZWw9e3RoaXMucHJvcHMudG9nZ2xlQWRkRmlsZXNQYW5lbH1cbiAgICAgICAgICAgIHRvZ2dsZUZpbGVDYXJkPXt0aGlzLnByb3BzLnRvZ2dsZUZpbGVDYXJkfVxuICAgICAgICAgICAgbWV0YUZpZWxkcz17dGhpcy5wcm9wcy5tZXRhRmllbGRzfVxuICAgICAgICAgIC8+XG4gICAgICAgICAgPEJ1dHRvbnNcbiAgICAgICAgICAgIGZpbGU9e2ZpbGV9XG4gICAgICAgICAgICBtZXRhRmllbGRzPXt0aGlzLnByb3BzLm1ldGFGaWVsZHN9XG4gICAgICAgICAgICBzaG93TGlua1RvRmlsZVVwbG9hZFJlc3VsdD17dGhpcy5wcm9wcy5zaG93TGlua1RvRmlsZVVwbG9hZFJlc3VsdH1cbiAgICAgICAgICAgIHNob3dSZW1vdmVCdXR0b249e3Nob3dSZW1vdmVCdXR0b259XG4gICAgICAgICAgICBjYW5FZGl0RmlsZT17dGhpcy5wcm9wcy5jYW5FZGl0RmlsZX1cbiAgICAgICAgICAgIHVwbG9hZEluUHJvZ3Jlc3NPckNvbXBsZXRlPXt1cGxvYWRJblByb2dyZXNzT3JDb21wbGV0ZX1cbiAgICAgICAgICAgIHRvZ2dsZUZpbGVDYXJkPXt0aGlzLnByb3BzLnRvZ2dsZUZpbGVDYXJkfVxuICAgICAgICAgICAgb3BlbkZpbGVFZGl0b3I9e3RoaXMucHJvcHMub3BlbkZpbGVFZGl0b3J9XG4gICAgICAgICAgICB1cHB5PXt0aGlzLnByb3BzLnVwcHl9XG4gICAgICAgICAgICBpMThuPXt0aGlzLnByb3BzLmkxOG59XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICApXG4gIH1cbn1cbiIsImNvbnN0IGNsYXNzTmFtZXMgPSByZXF1aXJlKCdjbGFzc25hbWVzJylcbmNvbnN0IHsgaCB9ID0gcmVxdWlyZSgncHJlYWN0JylcbmNvbnN0IEZpbGVJdGVtID0gcmVxdWlyZSgnLi9GaWxlSXRlbS9pbmRleC5qcycpXG5jb25zdCBWaXJ0dWFsTGlzdCA9IHJlcXVpcmUoJy4vVmlydHVhbExpc3QnKVxuXG5mdW5jdGlvbiBjaHVua3MgKGxpc3QsIHNpemUpIHtcbiAgY29uc3QgY2h1bmtlZCA9IFtdXG4gIGxldCBjdXJyZW50Q2h1bmsgPSBbXVxuICBsaXN0LmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICBpZiAoY3VycmVudENodW5rLmxlbmd0aCA8IHNpemUpIHtcbiAgICAgIGN1cnJlbnRDaHVuay5wdXNoKGl0ZW0pXG4gICAgfSBlbHNlIHtcbiAgICAgIGNodW5rZWQucHVzaChjdXJyZW50Q2h1bmspXG4gICAgICBjdXJyZW50Q2h1bmsgPSBbaXRlbV1cbiAgICB9XG4gIH0pXG4gIGlmIChjdXJyZW50Q2h1bmsubGVuZ3RoKSBjaHVua2VkLnB1c2goY3VycmVudENodW5rKVxuICByZXR1cm4gY2h1bmtlZFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IChwcm9wcykgPT4ge1xuICBjb25zdCBub0ZpbGVzID0gcHJvcHMudG90YWxGaWxlQ291bnQgPT09IDBcbiAgY29uc3QgZGFzaGJvYXJkRmlsZXNDbGFzcyA9IGNsYXNzTmFtZXMoXG4gICAgJ3VwcHktRGFzaGJvYXJkLWZpbGVzJyxcbiAgICB7ICd1cHB5LURhc2hib2FyZC1maWxlcy0tbm9GaWxlcyc6IG5vRmlsZXMgfSxcbiAgKVxuXG4gIC8vIEl0J3Mgbm90IGdyZWF0IHRoYXQgdGhpcyBpcyBoYXJkY29kZWQhXG4gIC8vIEl0J3MgRVNQRUNJQUxMWSBub3QgZ3JlYXQgdGhhdCB0aGlzIGlzIGNoZWNraW5nIGFnYWluc3QgYGl0ZW1zUGVyUm93YCFcbiAgY29uc3Qgcm93SGVpZ2h0ID0gcHJvcHMuaXRlbXNQZXJSb3cgPT09IDFcbiAgICAvLyBNb2JpbGVcbiAgICA/IDcxXG4gICAgLy8gMTkwcHggaGVpZ2h0ICsgMiAqIDVweCBtYXJnaW5cbiAgICA6IDIwMFxuXG4gIGNvbnN0IGZpbGVQcm9wcyA9IHtcbiAgICAvLyBGSVhNRSBUaGlzIGlzIGNvbmZ1c2luZywgaXQncyBhY3R1YWxseSB0aGUgRGFzaGJvYXJkJ3MgcGx1Z2luIElEXG4gICAgaWQ6IHByb3BzLmlkLFxuICAgIGVycm9yOiBwcm9wcy5lcnJvcixcbiAgICAvLyBUT0RPIG1vdmUgdGhpcyB0byBjb250ZXh0XG4gICAgaTE4bjogcHJvcHMuaTE4bixcbiAgICB1cHB5OiBwcm9wcy51cHB5LFxuICAgIC8vIGZlYXR1cmVzXG4gICAgYWNxdWlyZXJzOiBwcm9wcy5hY3F1aXJlcnMsXG4gICAgcmVzdW1hYmxlVXBsb2FkczogcHJvcHMucmVzdW1hYmxlVXBsb2FkcyxcbiAgICBpbmRpdmlkdWFsQ2FuY2VsbGF0aW9uOiBwcm9wcy5pbmRpdmlkdWFsQ2FuY2VsbGF0aW9uLFxuICAgIC8vIHZpc3VhbCBvcHRpb25zXG4gICAgaGlkZVJldHJ5QnV0dG9uOiBwcm9wcy5oaWRlUmV0cnlCdXR0b24sXG4gICAgaGlkZVBhdXNlUmVzdW1lQnV0dG9uOiBwcm9wcy5oaWRlUGF1c2VSZXN1bWVCdXR0b24sXG4gICAgaGlkZUNhbmNlbEJ1dHRvbjogcHJvcHMuaGlkZUNhbmNlbEJ1dHRvbixcbiAgICBzaG93TGlua1RvRmlsZVVwbG9hZFJlc3VsdDogcHJvcHMuc2hvd0xpbmtUb0ZpbGVVcGxvYWRSZXN1bHQsXG4gICAgc2hvd1JlbW92ZUJ1dHRvbkFmdGVyQ29tcGxldGU6IHByb3BzLnNob3dSZW1vdmVCdXR0b25BZnRlckNvbXBsZXRlLFxuICAgIGlzV2lkZTogcHJvcHMuaXNXaWRlLFxuICAgIG1ldGFGaWVsZHM6IHByb3BzLm1ldGFGaWVsZHMsXG4gICAgcmVjb3ZlcmVkU3RhdGU6IHByb3BzLnJlY292ZXJlZFN0YXRlLFxuICAgIC8vIGNhbGxiYWNrc1xuICAgIHRvZ2dsZUZpbGVDYXJkOiBwcm9wcy50b2dnbGVGaWxlQ2FyZCxcbiAgICBoYW5kbGVSZXF1ZXN0VGh1bWJuYWlsOiBwcm9wcy5oYW5kbGVSZXF1ZXN0VGh1bWJuYWlsLFxuICAgIGhhbmRsZUNhbmNlbFRodW1ibmFpbDogcHJvcHMuaGFuZGxlQ2FuY2VsVGh1bWJuYWlsLFxuICB9XG5cbiAgY29uc3Qgc29ydEJ5R2hvc3RDb21lc0ZpcnN0ID0gKGZpbGUxLCBmaWxlMikgPT4ge1xuICAgIHJldHVybiBwcm9wcy5maWxlc1tmaWxlMl0uaXNHaG9zdCAtIHByb3BzLmZpbGVzW2ZpbGUxXS5pc0dob3N0XG4gIH1cblxuICAvLyBTb3J0IGZpbGVzIGJ5IGZpbGUuaXNHaG9zdCwgZ2hvc3QgZmlsZXMgZmlyc3QsIG9ubHkgaWYgcmVjb3ZlcmVkU3RhdGUgaXMgcHJlc2VudFxuICBjb25zdCBmaWxlcyA9IE9iamVjdC5rZXlzKHByb3BzLmZpbGVzKVxuICBpZiAocHJvcHMucmVjb3ZlcmVkU3RhdGUpIGZpbGVzLnNvcnQoc29ydEJ5R2hvc3RDb21lc0ZpcnN0KVxuICBjb25zdCByb3dzID0gY2h1bmtzKGZpbGVzLCBwcm9wcy5pdGVtc1BlclJvdylcblxuICBjb25zdCByZW5kZXJSb3cgPSAocm93KSA9PiAoXG4gICAgLy8gVGhlIGByb2xlPVwicHJlc2VudGF0aW9uYCBhdHRyaWJ1dGUgZW5zdXJlcyB0aGF0IHRoZSBsaXN0IGl0ZW1zIGFyZSBwcm9wZXJseVxuICAgIC8vIGFzc29jaWF0ZWQgd2l0aCB0aGUgYFZpcnR1YWxMaXN0YCBlbGVtZW50LlxuICAgIC8vIFdlIHVzZSB0aGUgZmlyc3QgZmlsZSBJRCBhcyB0aGUga2V54oCUdGhpcyBzaG91bGQgbm90IGNoYW5nZSBhY3Jvc3Mgc2Nyb2xsIHJlcmVuZGVyc1xuICAgIDxkaXYgcm9sZT1cInByZXNlbnRhdGlvblwiIGtleT17cm93WzBdfT5cbiAgICAgIHtyb3cubWFwKChmaWxlSUQpID0+IChcbiAgICAgICAgPEZpbGVJdGVtXG4gICAgICAgICAga2V5PXtmaWxlSUR9XG4gICAgICAgICAgdXBweT17cHJvcHMudXBweX1cbiAgICAgICAgICB7Li4uZmlsZVByb3BzfVxuICAgICAgICAgIHJvbGU9XCJsaXN0aXRlbVwiXG4gICAgICAgICAgb3BlbkZpbGVFZGl0b3I9e3Byb3BzLm9wZW5GaWxlRWRpdG9yfVxuICAgICAgICAgIGNhbkVkaXRGaWxlPXtwcm9wcy5jYW5FZGl0RmlsZX1cbiAgICAgICAgICB0b2dnbGVBZGRGaWxlc1BhbmVsPXtwcm9wcy50b2dnbGVBZGRGaWxlc1BhbmVsfVxuICAgICAgICAgIGZpbGU9e3Byb3BzLmZpbGVzW2ZpbGVJRF19XG4gICAgICAgIC8+XG4gICAgICApKX1cbiAgICA8L2Rpdj5cbiAgKVxuXG4gIHJldHVybiAoXG4gICAgPFZpcnR1YWxMaXN0XG4gICAgICBjbGFzcz17ZGFzaGJvYXJkRmlsZXNDbGFzc31cbiAgICAgIHJvbGU9XCJsaXN0XCJcbiAgICAgIGRhdGE9e3Jvd3N9XG4gICAgICByZW5kZXJSb3c9e3JlbmRlclJvd31cbiAgICAgIHJvd0hlaWdodD17cm93SGVpZ2h0fVxuICAgIC8+XG4gIClcbn1cbiIsImNvbnN0IHsgaCB9ID0gcmVxdWlyZSgncHJlYWN0JylcbmNvbnN0IGdldEZpbGVUeXBlSWNvbiA9IHJlcXVpcmUoJy4uL3V0aWxzL2dldEZpbGVUeXBlSWNvbicpXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gRmlsZVByZXZpZXcgKHByb3BzKSB7XG4gIGNvbnN0IHsgZmlsZSB9ID0gcHJvcHNcblxuICBpZiAoZmlsZS5wcmV2aWV3KSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxpbWdcbiAgICAgICAgY2xhc3NOYW1lPVwidXBweS1EYXNoYm9hcmQtSXRlbS1wcmV2aWV3SW1nXCJcbiAgICAgICAgYWx0PXtmaWxlLm5hbWV9XG4gICAgICAgIHNyYz17ZmlsZS5wcmV2aWV3fVxuICAgICAgLz5cbiAgICApXG4gIH1cblxuICBjb25zdCB7IGNvbG9yLCBpY29uIH0gPSBnZXRGaWxlVHlwZUljb24oZmlsZS50eXBlKVxuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJ1cHB5LURhc2hib2FyZC1JdGVtLXByZXZpZXdJY29uV3JhcFwiPlxuICAgICAgPHNwYW4gY2xhc3NOYW1lPVwidXBweS1EYXNoYm9hcmQtSXRlbS1wcmV2aWV3SWNvblwiIHN0eWxlPXt7IGNvbG9yIH19PntpY29ufTwvc3Bhbj5cbiAgICAgIDxzdmcgYXJpYS1oaWRkZW49XCJ0cnVlXCIgZm9jdXNhYmxlPVwiZmFsc2VcIiBjbGFzc05hbWU9XCJ1cHB5LURhc2hib2FyZC1JdGVtLXByZXZpZXdJY29uQmdcIiB3aWR0aD1cIjU4XCIgaGVpZ2h0PVwiNzZcIiB2aWV3Qm94PVwiMCAwIDU4IDc2XCI+XG4gICAgICAgIDxyZWN0IGZpbGw9XCIjRkZGXCIgd2lkdGg9XCI1OFwiIGhlaWdodD1cIjc2XCIgcng9XCIzXCIgZmlsbFJ1bGU9XCJldmVub2RkXCIgLz5cbiAgICAgIDwvc3ZnPlxuICAgIDwvZGl2PlxuICApXG59XG4iLCJjb25zdCB7IGggfSA9IHJlcXVpcmUoJ3ByZWFjdCcpXG5jb25zdCBjbGFzc05hbWVzID0gcmVxdWlyZSgnY2xhc3NuYW1lcycpXG5jb25zdCBpZ25vcmVFdmVudCA9IHJlcXVpcmUoJy4uL3V0aWxzL2lnbm9yZUV2ZW50LmpzJylcblxuZnVuY3Rpb24gUGlja2VyUGFuZWxDb250ZW50IChwcm9wcykge1xuICByZXR1cm4gKFxuICAgIDxkaXZcbiAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lcygndXBweS1EYXNoYm9hcmRDb250ZW50LXBhbmVsJywgcHJvcHMuY2xhc3NOYW1lKX1cbiAgICAgIHJvbGU9XCJ0YWJwYW5lbFwiXG4gICAgICBkYXRhLXVwcHktcGFuZWxUeXBlPVwiUGlja2VyUGFuZWxcIlxuICAgICAgaWQ9e2B1cHB5LURhc2hib2FyZENvbnRlbnQtcGFuZWwtLSR7cHJvcHMuYWN0aXZlUGlja2VyUGFuZWwuaWR9YH1cbiAgICAgIG9uRHJhZ092ZXI9e2lnbm9yZUV2ZW50fVxuICAgICAgb25EcmFnTGVhdmU9e2lnbm9yZUV2ZW50fVxuICAgICAgb25Ecm9wPXtpZ25vcmVFdmVudH1cbiAgICAgIG9uUGFzdGU9e2lnbm9yZUV2ZW50fVxuICAgID5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwidXBweS1EYXNoYm9hcmRDb250ZW50LWJhclwiPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInVwcHktRGFzaGJvYXJkQ29udGVudC10aXRsZVwiIHJvbGU9XCJoZWFkaW5nXCIgYXJpYS1sZXZlbD1cIjFcIj5cbiAgICAgICAgICB7cHJvcHMuaTE4bignaW1wb3J0RnJvbScsIHsgbmFtZTogcHJvcHMuYWN0aXZlUGlja2VyUGFuZWwubmFtZSB9KX1cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxidXR0b25cbiAgICAgICAgICBjbGFzc05hbWU9XCJ1cHB5LURhc2hib2FyZENvbnRlbnQtYmFja1wiXG4gICAgICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICAgICAgb25DbGljaz17cHJvcHMuaGlkZUFsbFBhbmVsc31cbiAgICAgICAgPlxuICAgICAgICAgIHtwcm9wcy5pMThuKCdjYW5jZWwnKX1cbiAgICAgICAgPC9idXR0b24+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwidXBweS1EYXNoYm9hcmRDb250ZW50LXBhbmVsQm9keVwiPlxuICAgICAgICB7cHJvcHMudXBweS5nZXRQbHVnaW4ocHJvcHMuYWN0aXZlUGlja2VyUGFuZWwuaWQpLnJlbmRlcihwcm9wcy5zdGF0ZSl9XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFBpY2tlclBhbmVsQ29udGVudFxuIiwiY29uc3QgeyBoIH0gPSByZXF1aXJlKCdwcmVhY3QnKVxuXG5jb25zdCB1cGxvYWRTdGF0ZXMgPSB7XG4gIFNUQVRFX0VSUk9SOiAnZXJyb3InLFxuICBTVEFURV9XQUlUSU5HOiAnd2FpdGluZycsXG4gIFNUQVRFX1BSRVBST0NFU1NJTkc6ICdwcmVwcm9jZXNzaW5nJyxcbiAgU1RBVEVfVVBMT0FESU5HOiAndXBsb2FkaW5nJyxcbiAgU1RBVEVfUE9TVFBST0NFU1NJTkc6ICdwb3N0cHJvY2Vzc2luZycsXG4gIFNUQVRFX0NPTVBMRVRFOiAnY29tcGxldGUnLFxuICBTVEFURV9QQVVTRUQ6ICdwYXVzZWQnLFxufVxuXG5mdW5jdGlvbiBnZXRVcGxvYWRpbmdTdGF0ZSAoaXNBbGxFcnJvcmVkLCBpc0FsbENvbXBsZXRlLCBpc0FsbFBhdXNlZCwgZmlsZXMgPSB7fSkge1xuICBpZiAoaXNBbGxFcnJvcmVkKSB7XG4gICAgcmV0dXJuIHVwbG9hZFN0YXRlcy5TVEFURV9FUlJPUlxuICB9XG5cbiAgaWYgKGlzQWxsQ29tcGxldGUpIHtcbiAgICByZXR1cm4gdXBsb2FkU3RhdGVzLlNUQVRFX0NPTVBMRVRFXG4gIH1cblxuICBpZiAoaXNBbGxQYXVzZWQpIHtcbiAgICByZXR1cm4gdXBsb2FkU3RhdGVzLlNUQVRFX1BBVVNFRFxuICB9XG5cbiAgbGV0IHN0YXRlID0gdXBsb2FkU3RhdGVzLlNUQVRFX1dBSVRJTkdcbiAgY29uc3QgZmlsZUlEcyA9IE9iamVjdC5rZXlzKGZpbGVzKVxuICBmb3IgKGxldCBpID0gMDsgaSA8IGZpbGVJRHMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCB7IHByb2dyZXNzIH0gPSBmaWxlc1tmaWxlSURzW2ldXVxuICAgIC8vIElmIEFOWSBmaWxlcyBhcmUgYmVpbmcgdXBsb2FkZWQgcmlnaHQgbm93LCBzaG93IHRoZSB1cGxvYWRpbmcgc3RhdGUuXG4gICAgaWYgKHByb2dyZXNzLnVwbG9hZFN0YXJ0ZWQgJiYgIXByb2dyZXNzLnVwbG9hZENvbXBsZXRlKSB7XG4gICAgICByZXR1cm4gdXBsb2FkU3RhdGVzLlNUQVRFX1VQTE9BRElOR1xuICAgIH1cbiAgICAvLyBJZiBmaWxlcyBhcmUgYmVpbmcgcHJlcHJvY2Vzc2VkIEFORCBwb3N0cHJvY2Vzc2VkIGF0IHRoaXMgdGltZSwgd2Ugc2hvdyB0aGVcbiAgICAvLyBwcmVwcm9jZXNzIHN0YXRlLiBJZiBhbnkgZmlsZXMgYXJlIGJlaW5nIHVwbG9hZGVkIHdlIHNob3cgdXBsb2FkaW5nLlxuICAgIGlmIChwcm9ncmVzcy5wcmVwcm9jZXNzICYmIHN0YXRlICE9PSB1cGxvYWRTdGF0ZXMuU1RBVEVfVVBMT0FESU5HKSB7XG4gICAgICBzdGF0ZSA9IHVwbG9hZFN0YXRlcy5TVEFURV9QUkVQUk9DRVNTSU5HXG4gICAgfVxuICAgIC8vIElmIE5PIGZpbGVzIGFyZSBiZWluZyBwcmVwcm9jZXNzZWQgb3IgdXBsb2FkZWQgcmlnaHQgbm93LCBidXQgc29tZSBmaWxlcyBhcmVcbiAgICAvLyBiZWluZyBwb3N0cHJvY2Vzc2VkLCBzaG93IHRoZSBwb3N0cHJvY2VzcyBzdGF0ZS5cbiAgICBpZiAocHJvZ3Jlc3MucG9zdHByb2Nlc3MgJiYgc3RhdGUgIT09IHVwbG9hZFN0YXRlcy5TVEFURV9VUExPQURJTkcgJiYgc3RhdGUgIT09IHVwbG9hZFN0YXRlcy5TVEFURV9QUkVQUk9DRVNTSU5HKSB7XG4gICAgICBzdGF0ZSA9IHVwbG9hZFN0YXRlcy5TVEFURV9QT1NUUFJPQ0VTU0lOR1xuICAgIH1cbiAgfVxuICByZXR1cm4gc3RhdGVcbn1cblxuZnVuY3Rpb24gVXBsb2FkU3RhdHVzIChwcm9wcykge1xuICBjb25zdCB1cGxvYWRpbmdTdGF0ZSA9IGdldFVwbG9hZGluZ1N0YXRlKFxuICAgIHByb3BzLmlzQWxsRXJyb3JlZCxcbiAgICBwcm9wcy5pc0FsbENvbXBsZXRlLFxuICAgIHByb3BzLmlzQWxsUGF1c2VkLFxuICAgIHByb3BzLmZpbGVzLFxuICApXG5cbiAgc3dpdGNoICh1cGxvYWRpbmdTdGF0ZSkge1xuICAgIGNhc2UgJ3VwbG9hZGluZyc6XG4gICAgICByZXR1cm4gcHJvcHMuaTE4bigndXBsb2FkaW5nWEZpbGVzJywgeyBzbWFydF9jb3VudDogcHJvcHMuaW5Qcm9ncmVzc05vdFBhdXNlZEZpbGVzLmxlbmd0aCB9KVxuICAgIGNhc2UgJ3ByZXByb2Nlc3NpbmcnOlxuICAgIGNhc2UgJ3Bvc3Rwcm9jZXNzaW5nJzpcbiAgICAgIHJldHVybiBwcm9wcy5pMThuKCdwcm9jZXNzaW5nWEZpbGVzJywgeyBzbWFydF9jb3VudDogcHJvcHMucHJvY2Vzc2luZ0ZpbGVzLmxlbmd0aCB9KVxuICAgIGNhc2UgJ3BhdXNlZCc6XG4gICAgICByZXR1cm4gcHJvcHMuaTE4bigndXBsb2FkUGF1c2VkJylcbiAgICBjYXNlICd3YWl0aW5nJzpcbiAgICAgIHJldHVybiBwcm9wcy5pMThuKCd4RmlsZXNTZWxlY3RlZCcsIHsgc21hcnRfY291bnQ6IHByb3BzLm5ld0ZpbGVzLmxlbmd0aCB9KVxuICAgIGNhc2UgJ2NvbXBsZXRlJzpcbiAgICAgIHJldHVybiBwcm9wcy5pMThuKCd1cGxvYWRDb21wbGV0ZScpXG4gIH1cbn1cblxuZnVuY3Rpb24gUGFuZWxUb3BCYXIgKHByb3BzKSB7XG4gIGxldCB7IGFsbG93TmV3VXBsb2FkIH0gPSBwcm9wc1xuICAvLyBUT0RPIG1heWJlIHRoaXMgc2hvdWxkIGJlIGRvbmUgaW4gLi4vaW5kZXguanMsIHRoZW4ganVzdCBwYXNzIHRoYXQgZG93biBhcyBgYWxsb3dOZXdVcGxvYWRgXG4gIGlmIChhbGxvd05ld1VwbG9hZCAmJiBwcm9wcy5tYXhOdW1iZXJPZkZpbGVzKSB7XG4gICAgYWxsb3dOZXdVcGxvYWQgPSBwcm9wcy50b3RhbEZpbGVDb3VudCA8IHByb3BzLm1heE51bWJlck9mRmlsZXNcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJ1cHB5LURhc2hib2FyZENvbnRlbnQtYmFyXCI+XG4gICAgICB7IXByb3BzLmlzQWxsQ29tcGxldGUgJiYgIXByb3BzLmhpZGVDYW5jZWxCdXR0b24gPyAoXG4gICAgICAgIDxidXR0b25cbiAgICAgICAgICBjbGFzc05hbWU9XCJ1cHB5LURhc2hib2FyZENvbnRlbnQtYmFja1wiXG4gICAgICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICAgICAgb25DbGljaz17KCkgPT4gcHJvcHMudXBweS5jYW5jZWxBbGwoKX1cbiAgICAgICAgPlxuICAgICAgICAgIHtwcm9wcy5pMThuKCdjYW5jZWwnKX1cbiAgICAgICAgPC9idXR0b24+XG4gICAgICApIDogKFxuICAgICAgICA8ZGl2IC8+XG4gICAgICApfVxuXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInVwcHktRGFzaGJvYXJkQ29udGVudC10aXRsZVwiIHJvbGU9XCJoZWFkaW5nXCIgYXJpYS1sZXZlbD1cIjFcIj5cbiAgICAgICAgPFVwbG9hZFN0YXR1cyB7Li4ucHJvcHN9IC8+XG4gICAgICA8L2Rpdj5cblxuICAgICAge2FsbG93TmV3VXBsb2FkID8gKFxuICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgY2xhc3NOYW1lPVwidXBweS1EYXNoYm9hcmRDb250ZW50LWFkZE1vcmVcIlxuICAgICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgICAgIGFyaWEtbGFiZWw9e3Byb3BzLmkxOG4oJ2FkZE1vcmVGaWxlcycpfVxuICAgICAgICAgIHRpdGxlPXtwcm9wcy5pMThuKCdhZGRNb3JlRmlsZXMnKX1cbiAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBwcm9wcy50b2dnbGVBZGRGaWxlc1BhbmVsKHRydWUpfVxuICAgICAgICA+XG4gICAgICAgICAgPHN2ZyBhcmlhLWhpZGRlbj1cInRydWVcIiBmb2N1c2FibGU9XCJmYWxzZVwiIGNsYXNzTmFtZT1cInVwcHktYy1pY29uXCIgd2lkdGg9XCIxNVwiIGhlaWdodD1cIjE1XCIgdmlld0JveD1cIjAgMCAxNSAxNVwiPlxuICAgICAgICAgICAgPHBhdGggZD1cIk04IDYuNWg2YS41LjUgMCAwIDEgLjUuNXYuNWEuNS41IDAgMCAxLS41LjVIOHY2YS41LjUgMCAwIDEtLjUuNUg3YS41LjUgMCAwIDEtLjUtLjVWOGgtNmEuNS41IDAgMCAxLS41LS41VjdhLjUuNSAwIDAgMSAuNS0uNWg2di02QS41LjUgMCAwIDEgNyAwaC41YS41LjUgMCAwIDEgLjUuNXY2elwiIC8+XG4gICAgICAgICAgPC9zdmc+XG4gICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwidXBweS1EYXNoYm9hcmRDb250ZW50LWFkZE1vcmVDYXB0aW9uXCI+e3Byb3BzLmkxOG4oJ2FkZE1vcmUnKX08L3NwYW4+XG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgKSA6IChcbiAgICAgICAgPGRpdiAvPlxuICAgICAgKX1cbiAgICA8L2Rpdj5cbiAgKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFBhbmVsVG9wQmFyXG4iLCJjb25zdCB7IGNsb25lRWxlbWVudCwgQ29tcG9uZW50LCB0b0NoaWxkQXJyYXkgfSA9IHJlcXVpcmUoJ3ByZWFjdCcpXG5jb25zdCBjbGFzc05hbWVzID0gcmVxdWlyZSgnY2xhc3NuYW1lcycpXG5cbmNvbnN0IHRyYW5zaXRpb25OYW1lID0gJ3VwcHktdHJhbnNpdGlvbi1zbGlkZURvd25VcCdcbmNvbnN0IGR1cmF0aW9uID0gMjUwXG5cbi8qKlxuICogVmVydGljYWwgc2xpZGUgdHJhbnNpdGlvbi5cbiAqXG4gKiBUaGlzIGNhbiB0YWtlIGEgX3NpbmdsZV8gY2hpbGQgY29tcG9uZW50LCB3aGljaCBfbXVzdF8gYWNjZXB0IGEgYGNsYXNzTmFtZWAgcHJvcC5cbiAqXG4gKiBDdXJyZW50bHkgdGhpcyBpcyBzcGVjaWZpYyB0byB0aGUgYHVwcHktdHJhbnNpdGlvbi1zbGlkZURvd25VcGAgdHJhbnNpdGlvbixcbiAqIGJ1dCBpdCBzaG91bGQgYmUgc2ltcGxlIHRvIGV4dGVuZCB0aGlzIGZvciBhbnkgdHlwZSBvZiBzaW5nbGUtZWxlbWVudFxuICogdHJhbnNpdGlvbiBieSBzZXR0aW5nIHRoZSBDU1MgbmFtZSBhbmQgZHVyYXRpb24gYXMgcHJvcHMuXG4gKi9cbmNsYXNzIFNsaWRlIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IgKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpXG5cbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgY2FjaGVkQ2hpbGRyZW46IG51bGwsXG4gICAgICBjbGFzc05hbWU6ICcnLFxuICAgIH1cbiAgfVxuXG4gIC8vIFRPRE86IHJlZmFjdG9yIHRvIHN0YWJsZSBsaWZlY3ljbGUgbWV0aG9kXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICBjb21wb25lbnRXaWxsVXBkYXRlIChuZXh0UHJvcHMpIHtcbiAgICBjb25zdCB7IGNhY2hlZENoaWxkcmVuIH0gPSB0aGlzLnN0YXRlXG4gICAgY29uc3QgY2hpbGQgPSB0b0NoaWxkQXJyYXkobmV4dFByb3BzLmNoaWxkcmVuKVswXVxuXG4gICAgaWYgKGNhY2hlZENoaWxkcmVuID09PSBjaGlsZCkgcmV0dXJuIG51bGxcblxuICAgIGNvbnN0IHBhdGNoID0ge1xuICAgICAgY2FjaGVkQ2hpbGRyZW46IGNoaWxkLFxuICAgIH1cblxuICAgIC8vIEVudGVyIHRyYW5zaXRpb25cbiAgICBpZiAoY2hpbGQgJiYgIWNhY2hlZENoaWxkcmVuKSB7XG4gICAgICBwYXRjaC5jbGFzc05hbWUgPSBgJHt0cmFuc2l0aW9uTmFtZX0tZW50ZXJgXG5cbiAgICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMuYW5pbWF0aW9uRnJhbWUpXG4gICAgICBjbGVhclRpbWVvdXQodGhpcy5sZWF2ZVRpbWVvdXQpXG4gICAgICB0aGlzLmxlYXZlVGltZW91dCA9IHVuZGVmaW5lZFxuXG4gICAgICB0aGlzLmFuaW1hdGlvbkZyYW1lID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgLy8gRm9yY2UgaXQgdG8gcmVuZGVyIGJlZm9yZSB3ZSBhZGQgdGhlIGFjdGl2ZSBjbGFzc1xuICAgICAgICAvLyB0aGlzLmJhc2UuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcblxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBjbGFzc05hbWU6IGAke3RyYW5zaXRpb25OYW1lfS1lbnRlciAke3RyYW5zaXRpb25OYW1lfS1lbnRlci1hY3RpdmVgLFxuICAgICAgICB9KVxuXG4gICAgICAgIHRoaXMuZW50ZXJUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGNsYXNzTmFtZTogJycgfSlcbiAgICAgICAgfSwgZHVyYXRpb24pXG4gICAgICB9KVxuICAgIH1cblxuICAgIC8vIExlYXZlIHRyYW5zaXRpb25cbiAgICBpZiAoY2FjaGVkQ2hpbGRyZW4gJiYgIWNoaWxkICYmIHRoaXMubGVhdmVUaW1lb3V0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHBhdGNoLmNhY2hlZENoaWxkcmVuID0gY2FjaGVkQ2hpbGRyZW5cbiAgICAgIHBhdGNoLmNsYXNzTmFtZSA9IGAke3RyYW5zaXRpb25OYW1lfS1sZWF2ZWBcblxuICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUodGhpcy5hbmltYXRpb25GcmFtZSlcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLmVudGVyVGltZW91dClcbiAgICAgIHRoaXMuZW50ZXJUaW1lb3V0ID0gdW5kZWZpbmVkXG4gICAgICB0aGlzLmFuaW1hdGlvbkZyYW1lID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgY2xhc3NOYW1lOiBgJHt0cmFuc2l0aW9uTmFtZX0tbGVhdmUgJHt0cmFuc2l0aW9uTmFtZX0tbGVhdmUtYWN0aXZlYCxcbiAgICAgICAgfSlcblxuICAgICAgICB0aGlzLmxlYXZlVGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgY2FjaGVkQ2hpbGRyZW46IG51bGwsXG4gICAgICAgICAgICBjbGFzc05hbWU6ICcnLFxuICAgICAgICAgIH0pXG4gICAgICAgIH0sIGR1cmF0aW9uKVxuICAgICAgfSlcbiAgICB9XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICB0aGlzLnNldFN0YXRlKHBhdGNoKVxuICB9XG5cbiAgcmVuZGVyICgpIHtcbiAgICBjb25zdCB7IGNhY2hlZENoaWxkcmVuLCBjbGFzc05hbWUgfSA9IHRoaXMuc3RhdGVcblxuICAgIGlmICghY2FjaGVkQ2hpbGRyZW4pIHtcbiAgICAgIHJldHVybiBudWxsXG4gICAgfVxuXG4gICAgcmV0dXJuIGNsb25lRWxlbWVudChjYWNoZWRDaGlsZHJlbiwge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgY2FjaGVkQ2hpbGRyZW4ucHJvcHMuY2xhc3NOYW1lKSxcbiAgICB9KVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gU2xpZGVcbiIsIi8qKlxuICogQWRhcHRlZCBmcm9tIHByZWFjdC12aXJ0dWFsLWxpc3Q6IGh0dHBzOi8vZ2l0aHViLmNvbS9kZXZlbG9waXQvcHJlYWN0LXZpcnR1YWwtbGlzdFxuICpcbiAqIMKpIDIwMTYgSmFzb24gTWlsbGVyXG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuICogY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG4gKiBTT0ZUV0FSRS5cbiAqXG4gKiBBZGFwdGF0aW9uczpcbiAqIC0gQWRkZWQgcm9sZT1wcmVzZW50YXRpb24gdG8gaGVscGVyIGVsZW1lbnRzXG4gKiAtIFR3ZWFrZWQgc3R5bGVzIGZvciBVcHB5J3MgRGFzaGJvYXJkIHVzZSBjYXNlXG4gKi9cblxuY29uc3QgeyBoLCBDb21wb25lbnQgfSA9IHJlcXVpcmUoJ3ByZWFjdCcpXG5cbmNvbnN0IFNUWUxFX0lOTkVSID0ge1xuICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgLy8gRGlzYWJsZWQgZm9yIG91ciB1c2UgY2FzZTogdGhlIHdyYXBwZXIgZWxlbWVudHMgYXJvdW5kIEZpbGVMaXN0IGFscmVhZHkgZGVhbCB3aXRoIG92ZXJmbG93LFxuICAvLyBhbmQgdGhpcyBhZGRpdGlvbmFsIHByb3BlcnR5IHdvdWxkIGhpZGUgdGhpbmdzIHRoYXQgd2Ugd2FudCB0byBzaG93LlxuICAvL1xuICAvLyBvdmVyZmxvdzogJ2hpZGRlbicsXG4gIHdpZHRoOiAnMTAwJScsXG4gIG1pbkhlaWdodDogJzEwMCUnLFxufVxuXG5jb25zdCBTVFlMRV9DT05URU5UID0ge1xuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgdG9wOiAwLFxuICBsZWZ0OiAwLFxuICAvLyBCZWNhdXNlIHRoZSBgdG9wYCB2YWx1ZSBnZXRzIHNldCB0byBzb21lIG9mZnNldCwgdGhpcyBgaGVpZ2h0YCBiZWluZyAxMDAlIHdvdWxkIG1ha2UgdGhlIHNjcm9sbGJhclxuICAvLyBzdHJldGNoIGZhciBiZXlvbmQgdGhlIGNvbnRlbnQuIEZvciBvdXIgdXNlIGNhc2UsIHRoZSBjb250ZW50IGRpdiBhY3R1YWxseSBjYW4gZ2V0IGl0cyBoZWlnaHQgZnJvbVxuICAvLyB0aGUgZWxlbWVudHMgaW5zaWRlIGl0LCBzbyB3ZSBkb24ndCBuZWVkIHRvIHNwZWNpZnkgYSBgaGVpZ2h0YCBwcm9wZXJ0eSBhdCBhbGwuXG4gIC8vXG4gIC8vIGhlaWdodDogJzEwMCUnLFxuICB3aWR0aDogJzEwMCUnLFxuICBvdmVyZmxvdzogJ3Zpc2libGUnLFxufVxuXG5jbGFzcyBWaXJ0dWFsTGlzdCBleHRlbmRzIENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yIChwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKVxuXG4gICAgLy8gVGhlIGN1cnJlbnRseSBmb2N1c2VkIG5vZGUsIHVzZWQgdG8gcmV0YWluIGZvY3VzIHdoZW4gdGhlIHZpc2libGUgcm93cyBjaGFuZ2UuXG4gICAgLy8gVG8gYXZvaWQgdXBkYXRlIGxvb3BzLCB0aGlzIHNob3VsZCBub3QgY2F1c2Ugc3RhdGUgdXBkYXRlcywgc28gaXQncyBrZXB0IGFzIGEgcGxhaW4gcHJvcGVydHkuXG4gICAgdGhpcy5mb2N1c0VsZW1lbnQgPSBudWxsXG5cbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgb2Zmc2V0OiAwLFxuICAgICAgaGVpZ2h0OiAwLFxuICAgIH1cbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50ICgpIHtcbiAgICB0aGlzLnJlc2l6ZSgpXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMuaGFuZGxlUmVzaXplKVxuICB9XG5cbiAgLy8gVE9ETzogcmVmYWN0b3IgdG8gc3RhYmxlIGxpZmVjeWNsZSBtZXRob2RcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gIGNvbXBvbmVudFdpbGxVcGRhdGUgKCkge1xuICAgIGlmICh0aGlzLmJhc2UuY29udGFpbnMoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkpIHtcbiAgICAgIHRoaXMuZm9jdXNFbGVtZW50ID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudFxuICAgIH1cbiAgfVxuXG4gIGNvbXBvbmVudERpZFVwZGF0ZSAoKSB7XG4gICAgLy8gTWFpbnRhaW4gZm9jdXMgd2hlbiByb3dzIGFyZSBhZGRlZCBhbmQgcmVtb3ZlZC5cbiAgICBpZiAodGhpcy5mb2N1c0VsZW1lbnQgJiYgdGhpcy5mb2N1c0VsZW1lbnQucGFyZW50Tm9kZVxuICAgICAgICAmJiBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICE9PSB0aGlzLmZvY3VzRWxlbWVudCkge1xuICAgICAgdGhpcy5mb2N1c0VsZW1lbnQuZm9jdXMoKVxuICAgIH1cbiAgICB0aGlzLmZvY3VzRWxlbWVudCA9IG51bGxcbiAgICB0aGlzLnJlc2l6ZSgpXG4gIH1cblxuICBjb21wb25lbnRXaWxsVW5tb3VudCAoKSB7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMuaGFuZGxlUmVzaXplKVxuICB9XG5cbiAgaGFuZGxlU2Nyb2xsID0gKCkgPT4ge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBvZmZzZXQ6IHRoaXMuYmFzZS5zY3JvbGxUb3AgfSlcbiAgfVxuXG4gIGhhbmRsZVJlc2l6ZSA9ICgpID0+IHtcbiAgICB0aGlzLnJlc2l6ZSgpXG4gIH1cblxuICByZXNpemUgKCkge1xuICAgIGNvbnN0IHsgaGVpZ2h0IH0gPSB0aGlzLnN0YXRlXG5cbiAgICBpZiAoaGVpZ2h0ICE9PSB0aGlzLmJhc2Uub2Zmc2V0SGVpZ2h0KSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgaGVpZ2h0OiB0aGlzLmJhc2Uub2Zmc2V0SGVpZ2h0LFxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICByZW5kZXIgKHtcbiAgICBkYXRhLFxuICAgIHJvd0hlaWdodCxcbiAgICByZW5kZXJSb3csXG4gICAgb3ZlcnNjYW5Db3VudCA9IDEwLFxuICAgIC4uLnByb3BzXG4gIH0pIHtcbiAgICBjb25zdCB7IG9mZnNldCwgaGVpZ2h0IH0gPSB0aGlzLnN0YXRlXG4gICAgLy8gZmlyc3QgdmlzaWJsZSByb3cgaW5kZXhcbiAgICBsZXQgc3RhcnQgPSBNYXRoLmZsb29yKG9mZnNldCAvIHJvd0hlaWdodClcblxuICAgIC8vIGFjdHVhbCBudW1iZXIgb2YgdmlzaWJsZSByb3dzICh3aXRob3V0IG92ZXJzY2FuKVxuICAgIGxldCB2aXNpYmxlUm93Q291bnQgPSBNYXRoLmZsb29yKGhlaWdodCAvIHJvd0hlaWdodClcblxuICAgIC8vIE92ZXJzY2FuOiByZW5kZXIgYmxvY2tzIG9mIHJvd3MgbW9kdWxvIGFuIG92ZXJzY2FuIHJvdyBjb3VudFxuICAgIC8vIFRoaXMgZHJhbWF0aWNhbGx5IHJlZHVjZXMgRE9NIHdyaXRlcyBkdXJpbmcgc2Nyb2xsaW5nXG4gICAgaWYgKG92ZXJzY2FuQ291bnQpIHtcbiAgICAgIHN0YXJ0ID0gTWF0aC5tYXgoMCwgc3RhcnQgLSAoc3RhcnQgJSBvdmVyc2NhbkNvdW50KSlcbiAgICAgIHZpc2libGVSb3dDb3VudCArPSBvdmVyc2NhbkNvdW50XG4gICAgfVxuXG4gICAgLy8gbGFzdCB2aXNpYmxlICsgb3ZlcnNjYW4gcm93IGluZGV4ICsgcGFkZGluZyB0byBhbGxvdyBrZXlib2FyZCBmb2N1cyB0byB0cmF2ZWwgcGFzdCB0aGUgdmlzaWJsZSBhcmVhXG4gICAgY29uc3QgZW5kID0gc3RhcnQgKyB2aXNpYmxlUm93Q291bnQgKyA0XG5cbiAgICAvLyBkYXRhIHNsaWNlIGN1cnJlbnRseSBpbiB2aWV3cG9ydCBwbHVzIG92ZXJzY2FuIGl0ZW1zXG4gICAgY29uc3Qgc2VsZWN0aW9uID0gZGF0YS5zbGljZShzdGFydCwgZW5kKVxuXG4gICAgY29uc3Qgc3R5bGVJbm5lciA9IHsgLi4uU1RZTEVfSU5ORVIsIGhlaWdodDogZGF0YS5sZW5ndGggKiByb3dIZWlnaHQgfVxuICAgIGNvbnN0IHN0eWxlQ29udGVudCA9IHsgLi4uU1RZTEVfQ09OVEVOVCwgdG9wOiBzdGFydCAqIHJvd0hlaWdodCB9XG5cbiAgICAvLyBUaGUgYHJvbGU9XCJwcmVzZW50YXRpb25cImAgYXR0cmlidXRlcyBlbnN1cmUgdGhhdCB0aGVzZSB3cmFwcGVyIGVsZW1lbnRzIGFyZSBub3QgdHJlYXRlZCBhcyBsaXN0XG4gICAgLy8gaXRlbXMgYnkgYWNjZXNzaWJpbGl0eSBhbmQgb3V0bGluZSB0b29scy5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBvblNjcm9sbD17dGhpcy5oYW5kbGVTY3JvbGx9IHsuLi5wcm9wc30+XG4gICAgICAgIDxkaXYgcm9sZT1cInByZXNlbnRhdGlvblwiIHN0eWxlPXtzdHlsZUlubmVyfT5cbiAgICAgICAgICA8ZGl2IHJvbGU9XCJwcmVzZW50YXRpb25cIiBzdHlsZT17c3R5bGVDb250ZW50fT5cbiAgICAgICAgICAgIHtzZWxlY3Rpb24ubWFwKHJlbmRlclJvdyl9XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgKVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gVmlydHVhbExpc3RcbiIsImNvbnN0IHsgaCB9ID0gcmVxdWlyZSgncHJlYWN0JylcbmNvbnN0IHsgVUlQbHVnaW4gfSA9IHJlcXVpcmUoJ0B1cHB5L2NvcmUnKVxuY29uc3QgU3RhdHVzQmFyID0gcmVxdWlyZSgnQHVwcHkvc3RhdHVzLWJhcicpXG5jb25zdCBJbmZvcm1lciA9IHJlcXVpcmUoJ0B1cHB5L2luZm9ybWVyJylcbmNvbnN0IFRodW1ibmFpbEdlbmVyYXRvciA9IHJlcXVpcmUoJ0B1cHB5L3RodW1ibmFpbC1nZW5lcmF0b3InKVxuY29uc3QgZmluZEFsbERPTUVsZW1lbnRzID0gcmVxdWlyZSgnQHVwcHkvdXRpbHMvbGliL2ZpbmRBbGxET01FbGVtZW50cycpXG5jb25zdCB0b0FycmF5ID0gcmVxdWlyZSgnQHVwcHkvdXRpbHMvbGliL3RvQXJyYXknKVxuY29uc3QgZ2V0RHJvcHBlZEZpbGVzID0gcmVxdWlyZSgnQHVwcHkvdXRpbHMvbGliL2dldERyb3BwZWRGaWxlcycpXG5jb25zdCBnZXRUZXh0RGlyZWN0aW9uID0gcmVxdWlyZSgnQHVwcHkvdXRpbHMvbGliL2dldFRleHREaXJlY3Rpb24nKVxuY29uc3QgeyBuYW5vaWQgfSA9IHJlcXVpcmUoJ25hbm9pZCcpXG5jb25zdCB0cmFwRm9jdXMgPSByZXF1aXJlKCcuL3V0aWxzL3RyYXBGb2N1cycpXG5jb25zdCBjcmVhdGVTdXBlckZvY3VzID0gcmVxdWlyZSgnLi91dGlscy9jcmVhdGVTdXBlckZvY3VzJylcbmNvbnN0IG1lbW9pemUgPSByZXF1aXJlKCdtZW1vaXplLW9uZScpLmRlZmF1bHQgfHwgcmVxdWlyZSgnbWVtb2l6ZS1vbmUnKVxuY29uc3QgRk9DVVNBQkxFX0VMRU1FTlRTID0gcmVxdWlyZSgnQHVwcHkvdXRpbHMvbGliL0ZPQ1VTQUJMRV9FTEVNRU5UUycpXG5jb25zdCBEYXNoYm9hcmRVSSA9IHJlcXVpcmUoJy4vY29tcG9uZW50cy9EYXNoYm9hcmQnKVxuXG5jb25zdCBsb2NhbGUgPSByZXF1aXJlKCcuL2xvY2FsZScpXG5cbmNvbnN0IFRBQl9LRVkgPSA5XG5jb25zdCBFU0NfS0VZID0gMjdcblxuZnVuY3Rpb24gY3JlYXRlUHJvbWlzZSAoKSB7XG4gIGNvbnN0IG8gPSB7fVxuICBvLnByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgby5yZXNvbHZlID0gcmVzb2x2ZVxuICAgIG8ucmVqZWN0ID0gcmVqZWN0XG4gIH0pXG4gIHJldHVybiBvXG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRQaWNrZXJJY29uICgpIHtcbiAgcmV0dXJuIChcbiAgICA8c3ZnIGFyaWEtaGlkZGVuPVwidHJ1ZVwiIGZvY3VzYWJsZT1cImZhbHNlXCIgd2lkdGg9XCIzMFwiIGhlaWdodD1cIjMwXCIgdmlld0JveD1cIjAgMCAzMCAzMFwiPlxuICAgICAgPHBhdGggZD1cIk0xNSAzMGM4LjI4NCAwIDE1LTYuNzE2IDE1LTE1IDAtOC4yODQtNi43MTYtMTUtMTUtMTVDNi43MTYgMCAwIDYuNzE2IDAgMTVjMCA4LjI4NCA2LjcxNiAxNSAxNSAxNXptNC4yNTgtMTIuNjc2djYuODQ2aC04LjQyNnYtNi44NDZINS4yMDRsOS44Mi0xMi4zNjQgOS44MiAxMi4zNjRIMTkuMjZ6XCIgLz5cbiAgICA8L3N2Zz5cbiAgKVxufVxuXG4vKipcbiAqIERhc2hib2FyZCBVSSB3aXRoIHByZXZpZXdzLCBtZXRhZGF0YSBlZGl0aW5nLCB0YWJzIGZvciB2YXJpb3VzIHNlcnZpY2VzIGFuZCBtb3JlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gY2xhc3MgRGFzaGJvYXJkIGV4dGVuZHMgVUlQbHVnaW4ge1xuICBzdGF0aWMgVkVSU0lPTiA9IHJlcXVpcmUoJy4uL3BhY2thZ2UuanNvbicpLnZlcnNpb25cblxuICBjb25zdHJ1Y3RvciAodXBweSwgb3B0cykge1xuICAgIHN1cGVyKHVwcHksIG9wdHMpXG4gICAgdGhpcy5pZCA9IHRoaXMub3B0cy5pZCB8fCAnRGFzaGJvYXJkJ1xuICAgIHRoaXMudGl0bGUgPSAnRGFzaGJvYXJkJ1xuICAgIHRoaXMudHlwZSA9ICdvcmNoZXN0cmF0b3InXG4gICAgdGhpcy5tb2RhbE5hbWUgPSBgdXBweS1EYXNoYm9hcmQtJHtuYW5vaWQoKX1gXG5cbiAgICB0aGlzLmRlZmF1bHRMb2NhbGUgPSBsb2NhbGVcblxuICAgIC8vIHNldCBkZWZhdWx0IG9wdGlvbnNcbiAgICBjb25zdCBkZWZhdWx0T3B0aW9ucyA9IHtcbiAgICAgIHRhcmdldDogJ2JvZHknLFxuICAgICAgbWV0YUZpZWxkczogW10sXG4gICAgICB0cmlnZ2VyOiBudWxsLFxuICAgICAgaW5saW5lOiBmYWxzZSxcbiAgICAgIHdpZHRoOiA3NTAsXG4gICAgICBoZWlnaHQ6IDU1MCxcbiAgICAgIHRodW1ibmFpbFdpZHRoOiAyODAsXG4gICAgICB0aHVtYm5haWxUeXBlOiAnaW1hZ2UvanBlZycsXG4gICAgICB3YWl0Rm9yVGh1bWJuYWlsc0JlZm9yZVVwbG9hZDogZmFsc2UsXG4gICAgICBkZWZhdWx0UGlja2VySWNvbixcbiAgICAgIHNob3dMaW5rVG9GaWxlVXBsb2FkUmVzdWx0OiBmYWxzZSxcbiAgICAgIHNob3dQcm9ncmVzc0RldGFpbHM6IGZhbHNlLFxuICAgICAgaGlkZVVwbG9hZEJ1dHRvbjogZmFsc2UsXG4gICAgICBoaWRlQ2FuY2VsQnV0dG9uOiBmYWxzZSxcbiAgICAgIGhpZGVSZXRyeUJ1dHRvbjogZmFsc2UsXG4gICAgICBoaWRlUGF1c2VSZXN1bWVCdXR0b246IGZhbHNlLFxuICAgICAgaGlkZVByb2dyZXNzQWZ0ZXJGaW5pc2g6IGZhbHNlLFxuICAgICAgZG9uZUJ1dHRvbkhhbmRsZXI6ICgpID0+IHtcbiAgICAgICAgdGhpcy51cHB5LnJlc2V0KClcbiAgICAgICAgdGhpcy5yZXF1ZXN0Q2xvc2VNb2RhbCgpXG4gICAgICB9LFxuICAgICAgbm90ZTogbnVsbCxcbiAgICAgIGNsb3NlTW9kYWxPbkNsaWNrT3V0c2lkZTogZmFsc2UsXG4gICAgICBjbG9zZUFmdGVyRmluaXNoOiBmYWxzZSxcbiAgICAgIGRpc2FibGVTdGF0dXNCYXI6IGZhbHNlLFxuICAgICAgZGlzYWJsZUluZm9ybWVyOiBmYWxzZSxcbiAgICAgIGRpc2FibGVUaHVtYm5haWxHZW5lcmF0b3I6IGZhbHNlLFxuICAgICAgZGlzYWJsZVBhZ2VTY3JvbGxXaGVuTW9kYWxPcGVuOiB0cnVlLFxuICAgICAgYW5pbWF0ZU9wZW5DbG9zZTogdHJ1ZSxcbiAgICAgIGZpbGVNYW5hZ2VyU2VsZWN0aW9uVHlwZTogJ2ZpbGVzJyxcbiAgICAgIHByb3VkbHlEaXNwbGF5UG93ZXJlZEJ5VXBweTogdHJ1ZSxcbiAgICAgIG9uUmVxdWVzdENsb3NlTW9kYWw6ICgpID0+IHRoaXMuY2xvc2VNb2RhbCgpLFxuICAgICAgc2hvd1NlbGVjdGVkRmlsZXM6IHRydWUsXG4gICAgICBzaG93UmVtb3ZlQnV0dG9uQWZ0ZXJDb21wbGV0ZTogZmFsc2UsXG4gICAgICBicm93c2VyQmFja0J1dHRvbkNsb3NlOiBmYWxzZSxcbiAgICAgIHRoZW1lOiAnbGlnaHQnLFxuICAgICAgYXV0b09wZW5GaWxlRWRpdG9yOiBmYWxzZSxcbiAgICAgIGRpc2FibGVkOiBmYWxzZSxcbiAgICAgIGRpc2FibGVMb2NhbEZpbGVzOiBmYWxzZSxcbiAgICB9XG5cbiAgICAvLyBtZXJnZSBkZWZhdWx0IG9wdGlvbnMgd2l0aCB0aGUgb25lcyBzZXQgYnkgdXNlclxuICAgIHRoaXMub3B0cyA9IHsgLi4uZGVmYXVsdE9wdGlvbnMsIC4uLm9wdHMgfVxuXG4gICAgdGhpcy5pMThuSW5pdCgpXG5cbiAgICB0aGlzLnN1cGVyRm9jdXMgPSBjcmVhdGVTdXBlckZvY3VzKClcbiAgICB0aGlzLmlmRm9jdXNlZE9uVXBweVJlY2VudGx5ID0gZmFsc2VcblxuICAgIC8vIFRpbWVvdXRzXG4gICAgdGhpcy5tYWtlRGFzaGJvYXJkSW5zaWRlc1Zpc2libGVBbnl3YXlUaW1lb3V0ID0gbnVsbFxuICAgIHRoaXMucmVtb3ZlRHJhZ092ZXJDbGFzc1RpbWVvdXQgPSBudWxsXG4gIH1cblxuICByZW1vdmVUYXJnZXQgPSAocGx1Z2luKSA9PiB7XG4gICAgY29uc3QgcGx1Z2luU3RhdGUgPSB0aGlzLmdldFBsdWdpblN0YXRlKClcbiAgICAvLyBmaWx0ZXIgb3V0IHRoZSBvbmUgd2Ugd2FudCB0byByZW1vdmVcbiAgICBjb25zdCBuZXdUYXJnZXRzID0gcGx1Z2luU3RhdGUudGFyZ2V0cy5maWx0ZXIodGFyZ2V0ID0+IHRhcmdldC5pZCAhPT0gcGx1Z2luLmlkKVxuXG4gICAgdGhpcy5zZXRQbHVnaW5TdGF0ZSh7XG4gICAgICB0YXJnZXRzOiBuZXdUYXJnZXRzLFxuICAgIH0pXG4gIH1cblxuICBhZGRUYXJnZXQgPSAocGx1Z2luKSA9PiB7XG4gICAgY29uc3QgY2FsbGVyUGx1Z2luSWQgPSBwbHVnaW4uaWQgfHwgcGx1Z2luLmNvbnN0cnVjdG9yLm5hbWVcbiAgICBjb25zdCBjYWxsZXJQbHVnaW5OYW1lID0gcGx1Z2luLnRpdGxlIHx8IGNhbGxlclBsdWdpbklkXG4gICAgY29uc3QgY2FsbGVyUGx1Z2luVHlwZSA9IHBsdWdpbi50eXBlXG5cbiAgICBpZiAoY2FsbGVyUGx1Z2luVHlwZSAhPT0gJ2FjcXVpcmVyJ1xuICAgICAgICAmJiBjYWxsZXJQbHVnaW5UeXBlICE9PSAncHJvZ3Jlc3NpbmRpY2F0b3InXG4gICAgICAgICYmIGNhbGxlclBsdWdpblR5cGUgIT09ICdlZGl0b3InKSB7XG4gICAgICBjb25zdCBtc2cgPSAnRGFzaGJvYXJkOiBjYW4gb25seSBiZSB0YXJnZXRlZCBieSBwbHVnaW5zIG9mIHR5cGVzOiBhY3F1aXJlciwgcHJvZ3Jlc3NpbmRpY2F0b3IsIGVkaXRvcidcbiAgICAgIHRoaXMudXBweS5sb2cobXNnLCAnZXJyb3InKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3QgdGFyZ2V0ID0ge1xuICAgICAgaWQ6IGNhbGxlclBsdWdpbklkLFxuICAgICAgbmFtZTogY2FsbGVyUGx1Z2luTmFtZSxcbiAgICAgIHR5cGU6IGNhbGxlclBsdWdpblR5cGUsXG4gICAgfVxuXG4gICAgY29uc3Qgc3RhdGUgPSB0aGlzLmdldFBsdWdpblN0YXRlKClcbiAgICBjb25zdCBuZXdUYXJnZXRzID0gc3RhdGUudGFyZ2V0cy5zbGljZSgpXG4gICAgbmV3VGFyZ2V0cy5wdXNoKHRhcmdldClcblxuICAgIHRoaXMuc2V0UGx1Z2luU3RhdGUoe1xuICAgICAgdGFyZ2V0czogbmV3VGFyZ2V0cyxcbiAgICB9KVxuXG4gICAgcmV0dXJuIHRoaXMuZWxcbiAgfVxuXG4gIGhpZGVBbGxQYW5lbHMgPSAoKSA9PiB7XG4gICAgY29uc3Qgc3RhdGUgPSB0aGlzLmdldFBsdWdpblN0YXRlKClcbiAgICBjb25zdCB1cGRhdGUgPSB7XG4gICAgICBhY3RpdmVQaWNrZXJQYW5lbDogZmFsc2UsXG4gICAgICBzaG93QWRkRmlsZXNQYW5lbDogZmFsc2UsXG4gICAgICBhY3RpdmVPdmVybGF5VHlwZTogbnVsbCxcbiAgICAgIGZpbGVDYXJkRm9yOiBudWxsLFxuICAgICAgc2hvd0ZpbGVFZGl0b3I6IGZhbHNlLFxuICAgIH1cblxuICAgIGlmIChzdGF0ZS5hY3RpdmVQaWNrZXJQYW5lbCA9PT0gdXBkYXRlLmFjdGl2ZVBpY2tlclBhbmVsXG4gICAgICAgICYmIHN0YXRlLnNob3dBZGRGaWxlc1BhbmVsID09PSB1cGRhdGUuc2hvd0FkZEZpbGVzUGFuZWxcbiAgICAgICAgJiYgc3RhdGUuc2hvd0ZpbGVFZGl0b3IgPT09IHVwZGF0ZS5zaG93RmlsZUVkaXRvclxuICAgICAgICAmJiBzdGF0ZS5hY3RpdmVPdmVybGF5VHlwZSA9PT0gdXBkYXRlLmFjdGl2ZU92ZXJsYXlUeXBlKSB7XG4gICAgICAvLyBhdm9pZCBkb2luZyBhIHN0YXRlIHVwZGF0ZSBpZiBub3RoaW5nIGNoYW5nZWRcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHRoaXMuc2V0UGx1Z2luU3RhdGUodXBkYXRlKVxuICB9XG5cbiAgc2hvd1BhbmVsID0gKGlkKSA9PiB7XG4gICAgY29uc3QgeyB0YXJnZXRzIH0gPSB0aGlzLmdldFBsdWdpblN0YXRlKClcblxuICAgIGNvbnN0IGFjdGl2ZVBpY2tlclBhbmVsID0gdGFyZ2V0cy5maWx0ZXIoKHRhcmdldCkgPT4ge1xuICAgICAgcmV0dXJuIHRhcmdldC50eXBlID09PSAnYWNxdWlyZXInICYmIHRhcmdldC5pZCA9PT0gaWRcbiAgICB9KVswXVxuXG4gICAgdGhpcy5zZXRQbHVnaW5TdGF0ZSh7XG4gICAgICBhY3RpdmVQaWNrZXJQYW5lbCxcbiAgICAgIGFjdGl2ZU92ZXJsYXlUeXBlOiAnUGlja2VyUGFuZWwnLFxuICAgIH0pXG4gIH1cblxuICBjYW5FZGl0RmlsZSA9IChmaWxlKSA9PiB7XG4gICAgY29uc3QgeyB0YXJnZXRzIH0gPSB0aGlzLmdldFBsdWdpblN0YXRlKClcbiAgICBjb25zdCBlZGl0b3JzID0gdGhpcy4jZ2V0RWRpdG9ycyh0YXJnZXRzKVxuXG4gICAgcmV0dXJuIGVkaXRvcnMuc29tZSgodGFyZ2V0KSA9PiAoXG4gICAgICB0aGlzLnVwcHkuZ2V0UGx1Z2luKHRhcmdldC5pZCkuY2FuRWRpdEZpbGUoZmlsZSlcbiAgICApKVxuICB9XG5cbiAgb3BlbkZpbGVFZGl0b3IgPSAoZmlsZSkgPT4ge1xuICAgIGNvbnN0IHsgdGFyZ2V0cyB9ID0gdGhpcy5nZXRQbHVnaW5TdGF0ZSgpXG4gICAgY29uc3QgZWRpdG9ycyA9IHRoaXMuI2dldEVkaXRvcnModGFyZ2V0cylcblxuICAgIHRoaXMuc2V0UGx1Z2luU3RhdGUoe1xuICAgICAgc2hvd0ZpbGVFZGl0b3I6IHRydWUsXG4gICAgICBmaWxlQ2FyZEZvcjogZmlsZS5pZCB8fCBudWxsLFxuICAgICAgYWN0aXZlT3ZlcmxheVR5cGU6ICdGaWxlRWRpdG9yJyxcbiAgICB9KVxuXG4gICAgZWRpdG9ycy5mb3JFYWNoKChlZGl0b3IpID0+IHtcbiAgICAgIHRoaXMudXBweS5nZXRQbHVnaW4oZWRpdG9yLmlkKS5zZWxlY3RGaWxlKGZpbGUpXG4gICAgfSlcbiAgfVxuXG4gIHNhdmVGaWxlRWRpdG9yID0gKCkgPT4ge1xuICAgIGNvbnN0IHsgdGFyZ2V0cyB9ID0gdGhpcy5nZXRQbHVnaW5TdGF0ZSgpXG4gICAgY29uc3QgZWRpdG9ycyA9IHRoaXMuI2dldEVkaXRvcnModGFyZ2V0cylcblxuICAgIGVkaXRvcnMuZm9yRWFjaCgoZWRpdG9yKSA9PiB7XG4gICAgICB0aGlzLnVwcHkuZ2V0UGx1Z2luKGVkaXRvci5pZCkuc2F2ZSgpXG4gICAgfSlcblxuICAgIHRoaXMuaGlkZUFsbFBhbmVscygpXG4gIH1cblxuICBvcGVuTW9kYWwgPSAoKSA9PiB7XG4gICAgY29uc3QgeyBwcm9taXNlLCByZXNvbHZlIH0gPSBjcmVhdGVQcm9taXNlKClcbiAgICAvLyBzYXZlIHNjcm9sbCBwb3NpdGlvblxuICAgIHRoaXMuc2F2ZWRTY3JvbGxQb3NpdGlvbiA9IHdpbmRvdy5wYWdlWU9mZnNldFxuICAgIC8vIHNhdmUgYWN0aXZlIGVsZW1lbnQsIHNvIHdlIGNhbiByZXN0b3JlIGZvY3VzIHdoZW4gbW9kYWwgaXMgY2xvc2VkXG4gICAgdGhpcy5zYXZlZEFjdGl2ZUVsZW1lbnQgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50XG5cbiAgICBpZiAodGhpcy5vcHRzLmRpc2FibGVQYWdlU2Nyb2xsV2hlbk1vZGFsT3Blbikge1xuICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKCd1cHB5LURhc2hib2FyZC1pc0ZpeGVkJylcbiAgICB9XG5cbiAgICBpZiAodGhpcy5vcHRzLmFuaW1hdGVPcGVuQ2xvc2UgJiYgdGhpcy5nZXRQbHVnaW5TdGF0ZSgpLmlzQ2xvc2luZykge1xuICAgICAgY29uc3QgaGFuZGxlciA9ICgpID0+IHtcbiAgICAgICAgdGhpcy5zZXRQbHVnaW5TdGF0ZSh7XG4gICAgICAgICAgaXNIaWRkZW46IGZhbHNlLFxuICAgICAgICB9KVxuICAgICAgICB0aGlzLmVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2FuaW1hdGlvbmVuZCcsIGhhbmRsZXIsIGZhbHNlKVxuICAgICAgICByZXNvbHZlKClcbiAgICAgIH1cbiAgICAgIHRoaXMuZWwuYWRkRXZlbnRMaXN0ZW5lcignYW5pbWF0aW9uZW5kJywgaGFuZGxlciwgZmFsc2UpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2V0UGx1Z2luU3RhdGUoe1xuICAgICAgICBpc0hpZGRlbjogZmFsc2UsXG4gICAgICB9KVxuICAgICAgcmVzb2x2ZSgpXG4gICAgfVxuXG4gICAgaWYgKHRoaXMub3B0cy5icm93c2VyQmFja0J1dHRvbkNsb3NlKSB7XG4gICAgICB0aGlzLnVwZGF0ZUJyb3dzZXJIaXN0b3J5KClcbiAgICB9XG5cbiAgICAvLyBoYW5kbGUgRVNDIGFuZCBUQUIga2V5cyBpbiBtb2RhbCBkaWFsb2dcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5oYW5kbGVLZXlEb3duSW5Nb2RhbClcblxuICAgIHRoaXMudXBweS5lbWl0KCdkYXNoYm9hcmQ6bW9kYWwtb3BlbicpXG5cbiAgICByZXR1cm4gcHJvbWlzZVxuICB9XG5cbiAgY2xvc2VNb2RhbCA9IChvcHRzID0ge30pID0+IHtcbiAgICBjb25zdCB7XG4gICAgICAvLyBXaGV0aGVyIHRoZSBtb2RhbCBpcyBiZWluZyBjbG9zZWQgYnkgdGhlIHVzZXIgKGB0cnVlYCkgb3IgYnkgb3RoZXIgbWVhbnMgKGUuZy4gYnJvd3NlciBiYWNrIGJ1dHRvbilcbiAgICAgIG1hbnVhbENsb3NlID0gdHJ1ZSxcbiAgICB9ID0gb3B0c1xuXG4gICAgY29uc3QgeyBpc0hpZGRlbiwgaXNDbG9zaW5nIH0gPSB0aGlzLmdldFBsdWdpblN0YXRlKClcbiAgICBpZiAoaXNIaWRkZW4gfHwgaXNDbG9zaW5nKSB7XG4gICAgICAvLyBzaG9ydC1jaXJjdWl0IGlmIGFuaW1hdGlvbiBpcyBvbmdvaW5nXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCB7IHByb21pc2UsIHJlc29sdmUgfSA9IGNyZWF0ZVByb21pc2UoKVxuXG4gICAgaWYgKHRoaXMub3B0cy5kaXNhYmxlUGFnZVNjcm9sbFdoZW5Nb2RhbE9wZW4pIHtcbiAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZSgndXBweS1EYXNoYm9hcmQtaXNGaXhlZCcpXG4gICAgfVxuXG4gICAgaWYgKHRoaXMub3B0cy5hbmltYXRlT3BlbkNsb3NlKSB7XG4gICAgICB0aGlzLnNldFBsdWdpblN0YXRlKHtcbiAgICAgICAgaXNDbG9zaW5nOiB0cnVlLFxuICAgICAgfSlcbiAgICAgIGNvbnN0IGhhbmRsZXIgPSAoKSA9PiB7XG4gICAgICAgIHRoaXMuc2V0UGx1Z2luU3RhdGUoe1xuICAgICAgICAgIGlzSGlkZGVuOiB0cnVlLFxuICAgICAgICAgIGlzQ2xvc2luZzogZmFsc2UsXG4gICAgICAgIH0pXG5cbiAgICAgICAgdGhpcy5zdXBlckZvY3VzLmNhbmNlbCgpXG4gICAgICAgIHRoaXMuc2F2ZWRBY3RpdmVFbGVtZW50LmZvY3VzKClcblxuICAgICAgICB0aGlzLmVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2FuaW1hdGlvbmVuZCcsIGhhbmRsZXIsIGZhbHNlKVxuICAgICAgICByZXNvbHZlKClcbiAgICAgIH1cbiAgICAgIHRoaXMuZWwuYWRkRXZlbnRMaXN0ZW5lcignYW5pbWF0aW9uZW5kJywgaGFuZGxlciwgZmFsc2UpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2V0UGx1Z2luU3RhdGUoe1xuICAgICAgICBpc0hpZGRlbjogdHJ1ZSxcbiAgICAgIH0pXG5cbiAgICAgIHRoaXMuc3VwZXJGb2N1cy5jYW5jZWwoKVxuICAgICAgdGhpcy5zYXZlZEFjdGl2ZUVsZW1lbnQuZm9jdXMoKVxuXG4gICAgICByZXNvbHZlKClcbiAgICB9XG5cbiAgICAvLyBoYW5kbGUgRVNDIGFuZCBUQUIga2V5cyBpbiBtb2RhbCBkaWFsb2dcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5oYW5kbGVLZXlEb3duSW5Nb2RhbClcblxuICAgIGlmIChtYW51YWxDbG9zZSkge1xuICAgICAgaWYgKHRoaXMub3B0cy5icm93c2VyQmFja0J1dHRvbkNsb3NlKSB7XG4gICAgICAgIC8vIE1ha2Ugc3VyZSB0aGF0IHRoZSBsYXRlc3QgZW50cnkgaW4gdGhlIGhpc3Rvcnkgc3RhdGUgaXMgb3VyIG1vZGFsIG5hbWVcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtZ2xvYmFsc1xuICAgICAgICBpZiAoaGlzdG9yeS5zdGF0ZT8uW3RoaXMubW9kYWxOYW1lXSkge1xuICAgICAgICAgIC8vIEdvIGJhY2sgaW4gaGlzdG9yeSB0byBjbGVhciBvdXQgdGhlIGVudHJ5IHdlIGNyZWF0ZWQgKHVsdGltYXRlbHkgY2xvc2luZyB0aGUgbW9kYWwpXG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtZ2xvYmFsc1xuICAgICAgICAgIGhpc3RvcnkuYmFjaygpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnVwcHkuZW1pdCgnZGFzaGJvYXJkOm1vZGFsLWNsb3NlZCcpXG5cbiAgICByZXR1cm4gcHJvbWlzZVxuICB9XG5cbiAgaXNNb2RhbE9wZW4gPSAoKSA9PiB7XG4gICAgcmV0dXJuICF0aGlzLmdldFBsdWdpblN0YXRlKCkuaXNIaWRkZW4gfHwgZmFsc2VcbiAgfVxuXG4gIHJlcXVlc3RDbG9zZU1vZGFsID0gKCkgPT4ge1xuICAgIGlmICh0aGlzLm9wdHMub25SZXF1ZXN0Q2xvc2VNb2RhbCkge1xuICAgICAgcmV0dXJuIHRoaXMub3B0cy5vblJlcXVlc3RDbG9zZU1vZGFsKClcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuY2xvc2VNb2RhbCgpXG4gIH1cblxuICBzZXREYXJrTW9kZUNhcGFiaWxpdHkgPSAoaXNEYXJrTW9kZU9uKSA9PiB7XG4gICAgY29uc3QgeyBjYXBhYmlsaXRpZXMgfSA9IHRoaXMudXBweS5nZXRTdGF0ZSgpXG4gICAgdGhpcy51cHB5LnNldFN0YXRlKHtcbiAgICAgIGNhcGFiaWxpdGllczoge1xuICAgICAgICAuLi5jYXBhYmlsaXRpZXMsXG4gICAgICAgIGRhcmtNb2RlOiBpc0RhcmtNb2RlT24sXG4gICAgICB9LFxuICAgIH0pXG4gIH1cblxuICBoYW5kbGVTeXN0ZW1EYXJrTW9kZUNoYW5nZSA9IChldmVudCkgPT4ge1xuICAgIGNvbnN0IGlzRGFya01vZGVPbk5vdyA9IGV2ZW50Lm1hdGNoZXNcbiAgICB0aGlzLnVwcHkubG9nKGBbRGFzaGJvYXJkXSBEYXJrIG1vZGUgaXMgJHtpc0RhcmtNb2RlT25Ob3cgPyAnb24nIDogJ29mZid9YClcbiAgICB0aGlzLnNldERhcmtNb2RlQ2FwYWJpbGl0eShpc0RhcmtNb2RlT25Ob3cpXG4gIH1cblxuICB0b2dnbGVGaWxlQ2FyZCA9IChzaG93LCBmaWxlSUQpID0+IHtcbiAgICBjb25zdCBmaWxlID0gdGhpcy51cHB5LmdldEZpbGUoZmlsZUlEKVxuICAgIGlmIChzaG93KSB7XG4gICAgICB0aGlzLnVwcHkuZW1pdCgnZGFzaGJvYXJkOmZpbGUtZWRpdC1zdGFydCcsIGZpbGUpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudXBweS5lbWl0KCdkYXNoYm9hcmQ6ZmlsZS1lZGl0LWNvbXBsZXRlJywgZmlsZSlcbiAgICB9XG5cbiAgICB0aGlzLnNldFBsdWdpblN0YXRlKHtcbiAgICAgIGZpbGVDYXJkRm9yOiBzaG93ID8gZmlsZUlEIDogbnVsbCxcbiAgICAgIGFjdGl2ZU92ZXJsYXlUeXBlOiBzaG93ID8gJ0ZpbGVDYXJkJyA6IG51bGwsXG4gICAgfSlcbiAgfVxuXG4gIHRvZ2dsZUFkZEZpbGVzUGFuZWwgPSAoc2hvdykgPT4ge1xuICAgIHRoaXMuc2V0UGx1Z2luU3RhdGUoe1xuICAgICAgc2hvd0FkZEZpbGVzUGFuZWw6IHNob3csXG4gICAgICBhY3RpdmVPdmVybGF5VHlwZTogc2hvdyA/ICdBZGRGaWxlcycgOiBudWxsLFxuICAgIH0pXG4gIH1cblxuICBhZGRGaWxlcyA9IChmaWxlcykgPT4ge1xuICAgIGNvbnN0IGRlc2NyaXB0b3JzID0gZmlsZXMubWFwKChmaWxlKSA9PiAoe1xuICAgICAgc291cmNlOiB0aGlzLmlkLFxuICAgICAgbmFtZTogZmlsZS5uYW1lLFxuICAgICAgdHlwZTogZmlsZS50eXBlLFxuICAgICAgZGF0YTogZmlsZSxcbiAgICAgIG1ldGE6IHtcbiAgICAgICAgLy8gcGF0aCBvZiB0aGUgZmlsZSByZWxhdGl2ZSB0byB0aGUgYW5jZXN0b3IgZGlyZWN0b3J5IHRoZSB1c2VyIHNlbGVjdGVkLlxuICAgICAgICAvLyBlLmcuICdkb2NzL09sZCBQcmFndWUvYWlyYm5iLnBkZidcbiAgICAgICAgcmVsYXRpdmVQYXRoOiBmaWxlLnJlbGF0aXZlUGF0aCB8fCBudWxsLFxuICAgICAgfSxcbiAgICB9KSlcblxuICAgIHRyeSB7XG4gICAgICB0aGlzLnVwcHkuYWRkRmlsZXMoZGVzY3JpcHRvcnMpXG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICB0aGlzLnVwcHkubG9nKGVycilcbiAgICB9XG4gIH1cblxuICAvLyBfX19XaHkgbWFrZSBpbnNpZGVzIG9mIERhc2hib2FyZCBpbnZpc2libGUgdW50aWwgZmlyc3QgUmVzaXplT2JzZXJ2ZXIgZXZlbnQgaXMgZW1pdHRlZD9cbiAgLy8gICAgUmVzaXplT2JlcnNlcnZlciBkb2Vzbid0IGVtaXQgdGhlIGZpcnN0IHJlc2l6ZSBldmVudCBmYXN0IGVub3VnaCwgdXNlcnMgY2FuIHNlZSB0aGUganVtcCBmcm9tIG9uZSAudXBweS1zaXplLS0gdG9cbiAgLy8gICAgYW5vdGhlciAoZS5nLiBpbiBTYWZhcmkpXG4gIC8vIF9fX1doeSBub3QgYXBwbHkgdmlzaWJpbGl0eSBwcm9wZXJ0eSB0byAudXBweS1EYXNoYm9hcmQtaW5uZXI/XG4gIC8vICAgIEJlY2F1c2UgaWRlYWxseSwgYWNjIHRvIHNwZWNzLCBSZXNpemVPYnNlcnZlciBzaG91bGQgc2VlIGludmlzaWJsZSBlbGVtZW50cyBhcyBvZiB3aWR0aCAwLiBTbyBldmVuIHRob3VnaCBhcHBseWluZ1xuICAvLyAgICBpbnZpc2liaWxpdHkgdG8gLnVwcHktRGFzaGJvYXJkLWlubmVyIHdvcmtzIG5vdywgaXQgbWF5IG5vdCB3b3JrIGluIHRoZSBmdXR1cmUuXG4gIHN0YXJ0TGlzdGVuaW5nVG9SZXNpemUgPSAoKSA9PiB7XG4gICAgLy8gV2F0Y2ggZm9yIERhc2hib2FyZCBjb250YWluZXIgKGAudXBweS1EYXNoYm9hcmQtaW5uZXJgKSByZXNpemVcbiAgICAvLyBhbmQgdXBkYXRlIGNvbnRhaW5lcldpZHRoL2NvbnRhaW5lckhlaWdodCBpbiBwbHVnaW4gc3RhdGUgYWNjb3JkaW5nbHkuXG4gICAgLy8gRW1pdHMgZmlyc3QgZXZlbnQgb24gaW5pdGlhbGl6YXRpb24uXG4gICAgdGhpcy5yZXNpemVPYnNlcnZlciA9IG5ldyBSZXNpemVPYnNlcnZlcigoZW50cmllcykgPT4ge1xuICAgICAgY29uc3QgdXBweURhc2hib2FyZElubmVyRWwgPSBlbnRyaWVzWzBdXG5cbiAgICAgIGNvbnN0IHsgd2lkdGgsIGhlaWdodCB9ID0gdXBweURhc2hib2FyZElubmVyRWwuY29udGVudFJlY3RcblxuICAgICAgdGhpcy51cHB5LmxvZyhgW0Rhc2hib2FyZF0gcmVzaXplZDogJHt3aWR0aH0gLyAke2hlaWdodH1gLCAnZGVidWcnKVxuXG4gICAgICB0aGlzLnNldFBsdWdpblN0YXRlKHtcbiAgICAgICAgY29udGFpbmVyV2lkdGg6IHdpZHRoLFxuICAgICAgICBjb250YWluZXJIZWlnaHQ6IGhlaWdodCxcbiAgICAgICAgYXJlSW5zaWRlc1JlYWR5VG9CZVZpc2libGU6IHRydWUsXG4gICAgICB9KVxuICAgIH0pXG4gICAgdGhpcy5yZXNpemVPYnNlcnZlci5vYnNlcnZlKHRoaXMuZWwucXVlcnlTZWxlY3RvcignLnVwcHktRGFzaGJvYXJkLWlubmVyJykpXG5cbiAgICAvLyBJZiBSZXNpemVPYnNlcnZlciBmYWlscyB0byBlbWl0IGFuIGV2ZW50IHRlbGxpbmcgdXMgd2hhdCBzaXplIHRvIHVzZSAtIGRlZmF1bHQgdG8gdGhlIG1vYmlsZSB2aWV3XG4gICAgdGhpcy5tYWtlRGFzaGJvYXJkSW5zaWRlc1Zpc2libGVBbnl3YXlUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBjb25zdCBwbHVnaW5TdGF0ZSA9IHRoaXMuZ2V0UGx1Z2luU3RhdGUoKVxuICAgICAgY29uc3QgaXNNb2RhbEFuZENsb3NlZCA9ICF0aGlzLm9wdHMuaW5saW5lICYmIHBsdWdpblN0YXRlLmlzSGlkZGVuXG4gICAgICBpZiAoXG4gICAgICAgIC8vIGlmIFJlc2l6ZU9ic2VydmVyIGhhc24ndCB5ZXQgZmlyZWQsXG4gICAgICAgICFwbHVnaW5TdGF0ZS5hcmVJbnNpZGVzUmVhZHlUb0JlVmlzaWJsZVxuICAgICAgICAvLyBhbmQgaXQncyBub3QgZHVlIHRvIHRoZSBtb2RhbCBiZWluZyBjbG9zZWRcbiAgICAgICAgJiYgIWlzTW9kYWxBbmRDbG9zZWRcbiAgICAgICkge1xuICAgICAgICB0aGlzLnVwcHkubG9nKFwiW0Rhc2hib2FyZF0gcmVzaXplIGV2ZW50IGRpZG4ndCBmaXJlIG9uIHRpbWU6IGRlZmF1bHRlZCB0byBtb2JpbGUgbGF5b3V0XCIsICdkZWJ1ZycpXG5cbiAgICAgICAgdGhpcy5zZXRQbHVnaW5TdGF0ZSh7XG4gICAgICAgICAgYXJlSW5zaWRlc1JlYWR5VG9CZVZpc2libGU6IHRydWUsXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSwgMTAwMClcbiAgfVxuXG4gIHN0b3BMaXN0ZW5pbmdUb1Jlc2l6ZSA9ICgpID0+IHtcbiAgICB0aGlzLnJlc2l6ZU9ic2VydmVyLmRpc2Nvbm5lY3QoKVxuXG4gICAgY2xlYXJUaW1lb3V0KHRoaXMubWFrZURhc2hib2FyZEluc2lkZXNWaXNpYmxlQW55d2F5VGltZW91dClcbiAgfVxuXG4gIC8vIFJlY29yZHMgd2hldGhlciB3ZSBoYXZlIGJlZW4gaW50ZXJhY3Rpbmcgd2l0aCB1cHB5IHJpZ2h0IG5vdyxcbiAgLy8gd2hpY2ggaXMgdGhlbiB1c2VkIHRvIGRldGVybWluZSB3aGV0aGVyIHN0YXRlIHVwZGF0ZXMgc2hvdWxkIHRyaWdnZXIgYSByZWZvY3VzaW5nLlxuICByZWNvcmRJZkZvY3VzZWRPblVwcHlSZWNlbnRseSA9IChldmVudCkgPT4ge1xuICAgIGlmICh0aGlzLmVsLmNvbnRhaW5zKGV2ZW50LnRhcmdldCkpIHtcbiAgICAgIHRoaXMuaWZGb2N1c2VkT25VcHB5UmVjZW50bHkgPSB0cnVlXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaWZGb2N1c2VkT25VcHB5UmVjZW50bHkgPSBmYWxzZVxuICAgICAgLy8gX19fV2h5IHJ1biB0aGlzLnN1cGVyRm9jdXMuY2FuY2VsIGhlcmUgd2hlbiBpdCBhbHJlYWR5IHJ1bnMgaW4gc3VwZXJGb2N1c09uRWFjaFVwZGF0ZT9cbiAgICAgIC8vICAgIEJlY2F1c2Ugc3VwZXJGb2N1cyBpcyBkZWJvdW5jZWQsIHdoZW4gd2UgbW92ZSBmcm9tIFVwcHkgdG8gc29tZSBvdGhlciBlbGVtZW50IG9uIHRoZSBwYWdlLFxuICAgICAgLy8gICAgcHJldmlvdXNseSBydW4gc3VwZXJGb2N1cyBzb21ldGltZXMgaGl0cyBhbmQgbW92ZXMgZm9jdXMgYmFjayB0byBVcHB5LlxuICAgICAgdGhpcy5zdXBlckZvY3VzLmNhbmNlbCgpXG4gICAgfVxuICB9XG5cbiAgZGlzYWJsZUFsbEZvY3VzYWJsZUVsZW1lbnRzID0gKGRpc2FibGUpID0+IHtcbiAgICBjb25zdCBmb2N1c2FibGVOb2RlcyA9IHRvQXJyYXkodGhpcy5lbC5xdWVyeVNlbGVjdG9yQWxsKEZPQ1VTQUJMRV9FTEVNRU5UUykpXG4gICAgaWYgKGRpc2FibGUpIHtcbiAgICAgIGZvY3VzYWJsZU5vZGVzLmZvckVhY2goKG5vZGUpID0+IHtcbiAgICAgICAgLy8gc2F2ZSBwcmV2aW91cyB0YWJpbmRleCBpbiBhIGRhdGEtYXR0cmlidXRlLCB0byByZXN0b3JlIHdoZW4gZW5hYmxpbmdcbiAgICAgICAgY29uc3QgY3VycmVudFRhYkluZGV4ID0gbm9kZS5nZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JylcbiAgICAgICAgaWYgKGN1cnJlbnRUYWJJbmRleCkge1xuICAgICAgICAgIG5vZGUuZGF0YXNldC5pbmVydFRhYmluZGV4ID0gY3VycmVudFRhYkluZGV4XG4gICAgICAgIH1cbiAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JywgJy0xJylcbiAgICAgIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgIGZvY3VzYWJsZU5vZGVzLmZvckVhY2goKG5vZGUpID0+IHtcbiAgICAgICAgaWYgKCdpbmVydFRhYmluZGV4JyBpbiBub2RlLmRhdGFzZXQpIHtcbiAgICAgICAgICBub2RlLnNldEF0dHJpYnV0ZSgndGFiaW5kZXgnLCBub2RlLmRhdGFzZXQuaW5lcnRUYWJpbmRleClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZSgndGFiaW5kZXgnKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgICB0aGlzLmRhc2hib2FyZElzRGlzYWJsZWQgPSBkaXNhYmxlXG4gIH1cblxuICB1cGRhdGVCcm93c2VySGlzdG9yeSA9ICgpID0+IHtcbiAgICAvLyBFbnN1cmUgaGlzdG9yeSBzdGF0ZSBkb2VzIG5vdCBhbHJlYWR5IGNvbnRhaW4gb3VyIG1vZGFsIG5hbWUgdG8gYXZvaWQgZG91YmxlLXB1c2hpbmdcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1nbG9iYWxzXG4gICAgaWYgKCFoaXN0b3J5LnN0YXRlPy5bdGhpcy5tb2RhbE5hbWVdKSB7XG4gICAgICAvLyBQdXNoIHRvIGhpc3Rvcnkgc28gdGhhdCB0aGUgcGFnZSBpcyBub3QgbG9zdCBvbiBicm93c2VyIGJhY2sgYnV0dG9uIHByZXNzXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1nbG9iYWxzXG4gICAgICBoaXN0b3J5LnB1c2hTdGF0ZSh7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLWdsb2JhbHNcbiAgICAgICAgLi4uaGlzdG9yeS5zdGF0ZSxcbiAgICAgICAgW3RoaXMubW9kYWxOYW1lXTogdHJ1ZSxcbiAgICAgIH0sICcnKVxuICAgIH1cblxuICAgIC8vIExpc3RlbiBmb3IgYmFjayBidXR0b24gcHJlc3Nlc1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsIHRoaXMuaGFuZGxlUG9wU3RhdGUsIGZhbHNlKVxuICB9XG5cbiAgaGFuZGxlUG9wU3RhdGUgPSAoZXZlbnQpID0+IHtcbiAgICAvLyBDbG9zZSB0aGUgbW9kYWwgaWYgdGhlIGhpc3Rvcnkgc3RhdGUgbm8gbG9uZ2VyIGNvbnRhaW5zIG91ciBtb2RhbCBuYW1lXG4gICAgaWYgKHRoaXMuaXNNb2RhbE9wZW4oKSAmJiAoIWV2ZW50LnN0YXRlIHx8ICFldmVudC5zdGF0ZVt0aGlzLm1vZGFsTmFtZV0pKSB7XG4gICAgICB0aGlzLmNsb3NlTW9kYWwoeyBtYW51YWxDbG9zZTogZmFsc2UgfSlcbiAgICB9XG5cbiAgICAvLyBXaGVuIHRoZSBicm93c2VyIGJhY2sgYnV0dG9uIGlzIHByZXNzZWQgYW5kIHVwcHkgaXMgbm93IHRoZSBsYXRlc3QgZW50cnlcbiAgICAvLyBpbiB0aGUgaGlzdG9yeSBidXQgdGhlIG1vZGFsIGlzIGNsb3NlZCwgZml4IHRoZSBoaXN0b3J5IGJ5IHJlbW92aW5nIHRoZVxuICAgIC8vIHVwcHkgaGlzdG9yeSBlbnRyeS5cbiAgICAvLyBUaGlzIG9jY3VycyB3aGVuIGFub3RoZXIgZW50cnkgaXMgYWRkZWQgaW50byB0aGUgaGlzdG9yeSBzdGF0ZSB3aGlsZSB0aGVcbiAgICAvLyBtb2RhbCBpcyBvcGVuLCBhbmQgdGhlbiB0aGUgbW9kYWwgZ2V0cyBtYW51YWxseSBjbG9zZWQuXG4gICAgLy8gU29sdmVzIFBSICM1NzUgKGh0dHBzOi8vZ2l0aHViLmNvbS90cmFuc2xvYWRpdC91cHB5L3B1bGwvNTc1KVxuICAgIGlmICghdGhpcy5pc01vZGFsT3BlbigpICYmIGV2ZW50LnN0YXRlPy5bdGhpcy5tb2RhbE5hbWVdKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1nbG9iYWxzXG4gICAgICBoaXN0b3J5LmJhY2soKVxuICAgIH1cbiAgfVxuXG4gIGhhbmRsZUtleURvd25Jbk1vZGFsID0gKGV2ZW50KSA9PiB7XG4gICAgLy8gY2xvc2UgbW9kYWwgb24gZXNjIGtleSBwcmVzc1xuICAgIGlmIChldmVudC5rZXlDb2RlID09PSBFU0NfS0VZKSB0aGlzLnJlcXVlc3RDbG9zZU1vZGFsKGV2ZW50KVxuICAgIC8vIHRyYXAgZm9jdXMgb24gdGFiIGtleSBwcmVzc1xuICAgIGlmIChldmVudC5rZXlDb2RlID09PSBUQUJfS0VZKSB0cmFwRm9jdXMuZm9yTW9kYWwoZXZlbnQsIHRoaXMuZ2V0UGx1Z2luU3RhdGUoKS5hY3RpdmVPdmVybGF5VHlwZSwgdGhpcy5lbClcbiAgfVxuXG4gIGhhbmRsZUNsaWNrT3V0c2lkZSA9ICgpID0+IHtcbiAgICBpZiAodGhpcy5vcHRzLmNsb3NlTW9kYWxPbkNsaWNrT3V0c2lkZSkgdGhpcy5yZXF1ZXN0Q2xvc2VNb2RhbCgpXG4gIH1cblxuICBoYW5kbGVQYXN0ZSA9IChldmVudCkgPT4ge1xuICAgIC8vIExldCBhbnkgYWNxdWlyZXIgcGx1Z2luIChVcmwvV2ViY2FtL2V0Yy4pIGhhbmRsZSBwYXN0ZXMgdG8gdGhlIHJvb3RcbiAgICB0aGlzLnVwcHkuaXRlcmF0ZVBsdWdpbnMoKHBsdWdpbikgPT4ge1xuICAgICAgaWYgKHBsdWdpbi50eXBlID09PSAnYWNxdWlyZXInKSB7XG4gICAgICAgIC8vIEV2ZXJ5IFBsdWdpbiB3aXRoIC50eXBlIGFjcXVpcmVyIGNhbiBkZWZpbmUgaGFuZGxlUm9vdFBhc3RlKGV2ZW50KVxuICAgICAgICBwbHVnaW4uaGFuZGxlUm9vdFBhc3RlPy4oZXZlbnQpXG4gICAgICB9XG4gICAgfSlcblxuICAgIC8vIEFkZCBhbGwgZHJvcHBlZCBmaWxlc1xuICAgIGNvbnN0IGZpbGVzID0gdG9BcnJheShldmVudC5jbGlwYm9hcmREYXRhLmZpbGVzKVxuICAgIGlmIChmaWxlcy5sZW5ndGggPiAwKSB7XG4gICAgICB0aGlzLnVwcHkubG9nKCdbRGFzaGJvYXJkXSBGaWxlcyBwYXN0ZWQnKVxuICAgICAgdGhpcy5hZGRGaWxlcyhmaWxlcylcbiAgICB9XG4gIH1cblxuICBoYW5kbGVJbnB1dENoYW5nZSA9IChldmVudCkgPT4ge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICBjb25zdCBmaWxlcyA9IHRvQXJyYXkoZXZlbnQudGFyZ2V0LmZpbGVzKVxuICAgIGlmIChmaWxlcy5sZW5ndGggPiAwKSB7XG4gICAgICB0aGlzLnVwcHkubG9nKCdbRGFzaGJvYXJkXSBGaWxlcyBzZWxlY3RlZCB0aHJvdWdoIGlucHV0JylcbiAgICAgIHRoaXMuYWRkRmlsZXMoZmlsZXMpXG4gICAgfVxuICB9XG5cbiAgaGFuZGxlRHJhZ092ZXIgPSAoZXZlbnQpID0+IHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKClcblxuICAgIC8vIENoZWNrIGlmIHNvbWUgcGx1Z2luIGNhbiBoYW5kbGUgdGhlIGRhdGF0cmFuc2ZlciB3aXRob3V0IGZpbGVzIOKAlFxuICAgIC8vIGZvciBpbnN0YW5jZSwgdGhlIFVybCBwbHVnaW4gY2FuIGltcG9ydCBhIHVybFxuICAgIGNvbnN0IGNhblNvbWVQbHVnaW5IYW5kbGVSb290RHJvcCA9ICgpID0+IHtcbiAgICAgIGxldCBzb21lUGx1Z2luQ2FuSGFuZGxlUm9vdERyb3AgPSB0cnVlXG4gICAgICB0aGlzLnVwcHkuaXRlcmF0ZVBsdWdpbnMoKHBsdWdpbikgPT4ge1xuICAgICAgICBpZiAocGx1Z2luLmNhbkhhbmRsZVJvb3REcm9wPy4oZXZlbnQpKSB7XG4gICAgICAgICAgc29tZVBsdWdpbkNhbkhhbmRsZVJvb3REcm9wID0gdHJ1ZVxuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgcmV0dXJuIHNvbWVQbHVnaW5DYW5IYW5kbGVSb290RHJvcFxuICAgIH1cblxuICAgIC8vIENoZWNrIGlmIHRoZSBcInR5cGVcIiBvZiB0aGUgZGF0YXRyYW5zZmVyIG9iamVjdCBpbmNsdWRlcyBmaWxlc1xuICAgIGNvbnN0IGRvZXNFdmVudEhhdmVGaWxlcyA9ICgpID0+IHtcbiAgICAgIGNvbnN0IHsgdHlwZXMgfSA9IGV2ZW50LmRhdGFUcmFuc2ZlclxuICAgICAgcmV0dXJuIHR5cGVzLnNvbWUodHlwZSA9PiB0eXBlID09PSAnRmlsZXMnKVxuICAgIH1cblxuICAgIC8vIERlbnkgZHJvcCwgaWYgbm8gcGx1Z2lucyBjYW4gaGFuZGxlIGRhdGF0cmFuc2ZlciwgdGhlcmUgYXJlIG5vIGZpbGVzLFxuICAgIC8vIG9yIHdoZW4gb3B0cy5kaXNhYmxlZCBpcyBzZXQsIG9yIG5ldyB1cGxvYWRzIGFyZSBub3QgYWxsb3dlZFxuICAgIGNvbnN0IHNvbWVQbHVnaW5DYW5IYW5kbGVSb290RHJvcCA9IGNhblNvbWVQbHVnaW5IYW5kbGVSb290RHJvcChldmVudClcbiAgICBjb25zdCBoYXNGaWxlcyA9IGRvZXNFdmVudEhhdmVGaWxlcyhldmVudClcbiAgICBpZiAoXG4gICAgICAoIXNvbWVQbHVnaW5DYW5IYW5kbGVSb290RHJvcCAmJiAhaGFzRmlsZXMpXG4gICAgICB8fCB0aGlzLm9wdHMuZGlzYWJsZWRcbiAgICAgIC8vIG9wdHMuZGlzYWJsZUxvY2FsRmlsZXMgc2hvdWxkIG9ubHkgYmUgdGFrZW4gaW50byBhY2NvdW50IGlmIG5vIHBsdWdpbnNcbiAgICAgIC8vIGNhbiBoYW5kbGUgdGhlIGRhdGF0cmFuc2ZlclxuICAgICAgfHwgKHRoaXMub3B0cy5kaXNhYmxlTG9jYWxGaWxlcyAmJiAoaGFzRmlsZXMgfHwgIXNvbWVQbHVnaW5DYW5IYW5kbGVSb290RHJvcCkpXG4gICAgICB8fCAhdGhpcy51cHB5LmdldFN0YXRlKCkuYWxsb3dOZXdVcGxvYWRcbiAgICApIHtcbiAgICAgIGV2ZW50LmRhdGFUcmFuc2Zlci5kcm9wRWZmZWN0ID0gJ25vbmUnXG4gICAgICBjbGVhclRpbWVvdXQodGhpcy5yZW1vdmVEcmFnT3ZlckNsYXNzVGltZW91dClcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIEFkZCBhIHNtYWxsICgrKSBpY29uIG9uIGRyb3BcbiAgICAvLyAoYW5kIHByZXZlbnQgYnJvd3NlcnMgZnJvbSBpbnRlcnByZXRpbmcgdGhpcyBhcyBmaWxlcyBiZWluZyBfbW92ZWRfIGludG8gdGhlXG4gICAgLy8gYnJvd3NlciwgaHR0cHM6Ly9naXRodWIuY29tL3RyYW5zbG9hZGl0L3VwcHkvaXNzdWVzLzE5NzgpLlxuICAgIGV2ZW50LmRhdGFUcmFuc2Zlci5kcm9wRWZmZWN0ID0gJ2NvcHknXG5cbiAgICBjbGVhclRpbWVvdXQodGhpcy5yZW1vdmVEcmFnT3ZlckNsYXNzVGltZW91dClcbiAgICB0aGlzLnNldFBsdWdpblN0YXRlKHsgaXNEcmFnZ2luZ092ZXI6IHRydWUgfSlcblxuICAgIHRoaXMub3B0cy5vbkRyYWdPdmVyPy4oZXZlbnQpXG4gIH1cblxuICBoYW5kbGVEcmFnTGVhdmUgPSAoZXZlbnQpID0+IHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKClcblxuICAgIGNsZWFyVGltZW91dCh0aGlzLnJlbW92ZURyYWdPdmVyQ2xhc3NUaW1lb3V0KVxuICAgIC8vIFRpbWVvdXQgYWdhaW5zdCBmbGlja2VyaW5nLCB0aGlzIHNvbHV0aW9uIGlzIHRha2VuIGZyb20gZHJhZy1kcm9wIGxpYnJhcnkuXG4gICAgLy8gU29sdXRpb24gd2l0aCAncG9pbnRlci1ldmVudHM6IG5vbmUnIGRpZG4ndCB3b3JrIGFjcm9zcyBicm93c2Vycy5cbiAgICB0aGlzLnJlbW92ZURyYWdPdmVyQ2xhc3NUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aGlzLnNldFBsdWdpblN0YXRlKHsgaXNEcmFnZ2luZ092ZXI6IGZhbHNlIH0pXG4gICAgfSwgNTApXG5cbiAgICB0aGlzLm9wdHMub25EcmFnTGVhdmU/LihldmVudClcbiAgfVxuXG4gIGhhbmRsZURyb3AgPSBhc3luYyAoZXZlbnQpID0+IHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKClcblxuICAgIGNsZWFyVGltZW91dCh0aGlzLnJlbW92ZURyYWdPdmVyQ2xhc3NUaW1lb3V0KVxuXG4gICAgdGhpcy5zZXRQbHVnaW5TdGF0ZSh7IGlzRHJhZ2dpbmdPdmVyOiBmYWxzZSB9KVxuXG4gICAgLy8gTGV0IGFueSBhY3F1aXJlciBwbHVnaW4gKFVybC9XZWJjYW0vZXRjLikgaGFuZGxlIGRyb3BzIHRvIHRoZSByb290XG4gICAgdGhpcy51cHB5Lml0ZXJhdGVQbHVnaW5zKChwbHVnaW4pID0+IHtcbiAgICAgIGlmIChwbHVnaW4udHlwZSA9PT0gJ2FjcXVpcmVyJykge1xuICAgICAgICAvLyBFdmVyeSBQbHVnaW4gd2l0aCAudHlwZSBhY3F1aXJlciBjYW4gZGVmaW5lIGhhbmRsZVJvb3REcm9wKGV2ZW50KVxuICAgICAgICBwbHVnaW4uaGFuZGxlUm9vdERyb3A/LihldmVudClcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgLy8gQWRkIGFsbCBkcm9wcGVkIGZpbGVzXG4gICAgbGV0IGV4ZWN1dGVkRHJvcEVycm9yT25jZSA9IGZhbHNlXG4gICAgY29uc3QgbG9nRHJvcEVycm9yID0gKGVycm9yKSA9PiB7XG4gICAgICB0aGlzLnVwcHkubG9nKGVycm9yLCAnZXJyb3InKVxuXG4gICAgICAvLyBJbiBwcmFjdGljZSBhbGwgZHJvcCBlcnJvcnMgYXJlIG1vc3QgbGlrZWx5IHRoZSBzYW1lLFxuICAgICAgLy8gc28gbGV0J3MganVzdCBzaG93IG9uZSB0byBhdm9pZCBvdmVyd2hlbG1pbmcgdGhlIHVzZXJcbiAgICAgIGlmICghZXhlY3V0ZWREcm9wRXJyb3JPbmNlKSB7XG4gICAgICAgIHRoaXMudXBweS5pbmZvKGVycm9yLm1lc3NhZ2UsICdlcnJvcicpXG4gICAgICAgIGV4ZWN1dGVkRHJvcEVycm9yT25jZSA9IHRydWVcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBBZGQgYWxsIGRyb3BwZWQgZmlsZXNcbiAgICBjb25zdCBmaWxlcyA9IGF3YWl0IGdldERyb3BwZWRGaWxlcyhldmVudC5kYXRhVHJhbnNmZXIsIHsgbG9nRHJvcEVycm9yIH0pXG4gICAgaWYgKGZpbGVzLmxlbmd0aCA+IDApIHtcbiAgICAgIHRoaXMudXBweS5sb2coJ1tEYXNoYm9hcmRdIEZpbGVzIGRyb3BwZWQnKVxuICAgICAgdGhpcy5hZGRGaWxlcyhmaWxlcylcbiAgICB9XG5cbiAgICB0aGlzLm9wdHMub25Ecm9wPy4oZXZlbnQpXG4gIH1cblxuICBoYW5kbGVSZXF1ZXN0VGh1bWJuYWlsID0gKGZpbGUpID0+IHtcbiAgICBpZiAoIXRoaXMub3B0cy53YWl0Rm9yVGh1bWJuYWlsc0JlZm9yZVVwbG9hZCkge1xuICAgICAgdGhpcy51cHB5LmVtaXQoJ3RodW1ibmFpbDpyZXF1ZXN0JywgZmlsZSlcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogV2UgY2FuY2VsIHRodW1ibmFpbCByZXF1ZXN0cyB3aGVuIGEgZmlsZSBpdGVtIGNvbXBvbmVudCB1bm1vdW50cyB0byBhdm9pZFxuICAgKiBjbG9nZ2luZyB1cCB0aGUgcXVldWUgd2hlbiB0aGUgdXNlciBzY3JvbGxzIHBhc3QgbWFueSBlbGVtZW50cy5cbiAgICovXG4gIGhhbmRsZUNhbmNlbFRodW1ibmFpbCA9IChmaWxlKSA9PiB7XG4gICAgaWYgKCF0aGlzLm9wdHMud2FpdEZvclRodW1ibmFpbHNCZWZvcmVVcGxvYWQpIHtcbiAgICAgIHRoaXMudXBweS5lbWl0KCd0aHVtYm5haWw6Y2FuY2VsJywgZmlsZSlcbiAgICB9XG4gIH1cblxuICBoYW5kbGVLZXlEb3duSW5JbmxpbmUgPSAoZXZlbnQpID0+IHtcbiAgICAvLyBUcmFwIGZvY3VzIG9uIHRhYiBrZXkgcHJlc3MuXG4gICAgaWYgKGV2ZW50LmtleUNvZGUgPT09IFRBQl9LRVkpIHRyYXBGb2N1cy5mb3JJbmxpbmUoZXZlbnQsIHRoaXMuZ2V0UGx1Z2luU3RhdGUoKS5hY3RpdmVPdmVybGF5VHlwZSwgdGhpcy5lbClcbiAgfVxuXG4gIC8vIF9fX1doeSBkbyB3ZSBsaXN0ZW4gdG8gdGhlICdwYXN0ZScgZXZlbnQgb24gYSBkb2N1bWVudCBpbnN0ZWFkIG9mIG9uUGFzdGU9e3Byb3BzLmhhbmRsZVBhc3RlfSBwcm9wLFxuICAvLyAgICBvciB0aGlzLmVsLmFkZEV2ZW50TGlzdGVuZXIoJ3Bhc3RlJyk/XG4gIC8vICAgIEJlY2F1c2UgKGF0IGxlYXN0KSBDaHJvbWUgZG9lc24ndCBoYW5kbGUgcGFzdGUgaWYgZm9jdXMgaXMgb24gc29tZSBidXR0b24sIGUuZy4gJ015IERldmljZScuXG4gIC8vICAgID0+IFRoZXJlZm9yZSwgdGhlIGJlc3Qgb3B0aW9uIGlzIHRvIGxpc3RlbiB0byBhbGwgJ3Bhc3RlJyBldmVudHMsIGFuZCBvbmx5IHJlYWN0IHRvIHRoZW0gd2hlbiB3ZSBhcmUgZm9jdXNlZCBvbiBvdXJcbiAgLy8gICAgICAgcGFydGljdWxhciBVcHB5IGluc3RhbmNlLlxuICAvLyBfX19XaHkgZG8gd2Ugc3RpbGwgbmVlZCBvblBhc3RlPXtwcm9wcy5oYW5kbGVQYXN0ZX0gZm9yIHRoZSBEYXNoYm9hcmRVaT9cbiAgLy8gICAgQmVjYXVzZSBpZiB3ZSBjbGljayBvbiB0aGUgJ0Ryb3AgZmlsZXMgaGVyZScgY2FwdGlvbiBlLmcuLCBgZG9jdW1lbnQuYWN0aXZlRWxlbWVudGAgd2lsbCBiZSAnYm9keScuIFdoaWNoIG1lYW5zIG91clxuICAvLyAgICBzdGFuZGFyZCBkZXRlcm1pbmF0aW9uIG9mIHdoZXRoZXIgd2UncmUgcGFzdGluZyBpbnRvIG91ciBVcHB5IGluc3RhbmNlIHdvbid0IHdvcmsuXG4gIC8vICAgID0+IFRoZXJlZm9yZSwgd2UgbmVlZCBhIHRyYWRpdGlvbmFsIG9uUGFzdGU9e3Byb3BzLmhhbmRsZVBhc3RlfSBoYW5kbGVyIHRvby5cbiAgaGFuZGxlUGFzdGVPbkJvZHkgPSAoZXZlbnQpID0+IHtcbiAgICBjb25zdCBpc0ZvY3VzSW5PdmVybGF5ID0gdGhpcy5lbC5jb250YWlucyhkb2N1bWVudC5hY3RpdmVFbGVtZW50KVxuICAgIGlmIChpc0ZvY3VzSW5PdmVybGF5KSB7XG4gICAgICB0aGlzLmhhbmRsZVBhc3RlKGV2ZW50KVxuICAgIH1cbiAgfVxuXG4gIGhhbmRsZUNvbXBsZXRlID0gKHsgZmFpbGVkIH0pID0+IHtcbiAgICBpZiAodGhpcy5vcHRzLmNsb3NlQWZ0ZXJGaW5pc2ggJiYgZmFpbGVkLmxlbmd0aCA9PT0gMCkge1xuICAgICAgLy8gQWxsIHVwbG9hZHMgYXJlIGRvbmVcbiAgICAgIHRoaXMucmVxdWVzdENsb3NlTW9kYWwoKVxuICAgIH1cbiAgfVxuXG4gIGhhbmRsZUNhbmNlbFJlc3RvcmUgPSAoKSA9PiB7XG4gICAgdGhpcy51cHB5LmVtaXQoJ3Jlc3RvcmUtY2FuY2VsZWQnKVxuICB9XG5cbiAgI29wZW5GaWxlRWRpdG9yV2hlbkZpbGVzQWRkZWQgPSAoZmlsZXMpID0+IHtcbiAgICBjb25zdCBmaXJzdEZpbGUgPSBmaWxlc1swXVxuICAgIGlmICh0aGlzLmNhbkVkaXRGaWxlKGZpcnN0RmlsZSkpIHtcbiAgICAgIHRoaXMub3BlbkZpbGVFZGl0b3IoZmlyc3RGaWxlKVxuICAgIH1cbiAgfVxuXG4gIGluaXRFdmVudHMgPSAoKSA9PiB7XG4gICAgLy8gTW9kYWwgb3BlbiBidXR0b25cbiAgICBpZiAodGhpcy5vcHRzLnRyaWdnZXIgJiYgIXRoaXMub3B0cy5pbmxpbmUpIHtcbiAgICAgIGNvbnN0IHNob3dNb2RhbFRyaWdnZXIgPSBmaW5kQWxsRE9NRWxlbWVudHModGhpcy5vcHRzLnRyaWdnZXIpXG4gICAgICBpZiAoc2hvd01vZGFsVHJpZ2dlcikge1xuICAgICAgICBzaG93TW9kYWxUcmlnZ2VyLmZvckVhY2godHJpZ2dlciA9PiB0cmlnZ2VyLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5vcGVuTW9kYWwpKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy51cHB5LmxvZygnRGFzaGJvYXJkIG1vZGFsIHRyaWdnZXIgbm90IGZvdW5kLiBNYWtlIHN1cmUgYHRyaWdnZXJgIGlzIHNldCBpbiBEYXNoYm9hcmQgb3B0aW9ucywgdW5sZXNzIHlvdSBhcmUgcGxhbm5pbmcgdG8gY2FsbCBgZGFzaGJvYXJkLm9wZW5Nb2RhbCgpYCBtZXRob2QgeW91cnNlbGYnLCAnd2FybmluZycpXG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5zdGFydExpc3RlbmluZ1RvUmVzaXplKClcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdwYXN0ZScsIHRoaXMuaGFuZGxlUGFzdGVPbkJvZHkpXG5cbiAgICB0aGlzLnVwcHkub24oJ3BsdWdpbi1yZW1vdmUnLCB0aGlzLnJlbW92ZVRhcmdldClcbiAgICB0aGlzLnVwcHkub24oJ2ZpbGUtYWRkZWQnLCB0aGlzLmhpZGVBbGxQYW5lbHMpXG4gICAgdGhpcy51cHB5Lm9uKCdkYXNoYm9hcmQ6bW9kYWwtY2xvc2VkJywgdGhpcy5oaWRlQWxsUGFuZWxzKVxuICAgIHRoaXMudXBweS5vbignZmlsZS1lZGl0b3I6Y29tcGxldGUnLCB0aGlzLmhpZGVBbGxQYW5lbHMpXG4gICAgdGhpcy51cHB5Lm9uKCdjb21wbGV0ZScsIHRoaXMuaGFuZGxlQ29tcGxldGUpXG5cbiAgICAvLyBfX19XaHkgZmlyZSBvbiBjYXB0dXJlP1xuICAgIC8vICAgIEJlY2F1c2UgdGhpcy5pZkZvY3VzZWRPblVwcHlSZWNlbnRseSBuZWVkcyB0byBjaGFuZ2UgYmVmb3JlIG9uVXBkYXRlKCkgZmlyZXMuXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXMnLCB0aGlzLnJlY29yZElmRm9jdXNlZE9uVXBweVJlY2VudGx5LCB0cnVlKVxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5yZWNvcmRJZkZvY3VzZWRPblVwcHlSZWNlbnRseSwgdHJ1ZSlcblxuICAgIGlmICh0aGlzLm9wdHMuaW5saW5lKSB7XG4gICAgICB0aGlzLmVsLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLmhhbmRsZUtleURvd25JbklubGluZSlcbiAgICB9XG5cbiAgICBpZiAodGhpcy5vcHRzLmF1dG9PcGVuRmlsZUVkaXRvcikge1xuICAgICAgdGhpcy51cHB5Lm9uKCdmaWxlcy1hZGRlZCcsIHRoaXMuI29wZW5GaWxlRWRpdG9yV2hlbkZpbGVzQWRkZWQpXG4gICAgfVxuICB9XG5cbiAgcmVtb3ZlRXZlbnRzID0gKCkgPT4ge1xuICAgIGNvbnN0IHNob3dNb2RhbFRyaWdnZXIgPSBmaW5kQWxsRE9NRWxlbWVudHModGhpcy5vcHRzLnRyaWdnZXIpXG4gICAgaWYgKCF0aGlzLm9wdHMuaW5saW5lICYmIHNob3dNb2RhbFRyaWdnZXIpIHtcbiAgICAgIHNob3dNb2RhbFRyaWdnZXIuZm9yRWFjaCh0cmlnZ2VyID0+IHRyaWdnZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLm9wZW5Nb2RhbCkpXG4gICAgfVxuXG4gICAgdGhpcy5zdG9wTGlzdGVuaW5nVG9SZXNpemUoKVxuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Bhc3RlJywgdGhpcy5oYW5kbGVQYXN0ZU9uQm9keSlcblxuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsIHRoaXMuaGFuZGxlUG9wU3RhdGUsIGZhbHNlKVxuICAgIHRoaXMudXBweS5vZmYoJ3BsdWdpbi1yZW1vdmUnLCB0aGlzLnJlbW92ZVRhcmdldClcbiAgICB0aGlzLnVwcHkub2ZmKCdmaWxlLWFkZGVkJywgdGhpcy5oaWRlQWxsUGFuZWxzKVxuICAgIHRoaXMudXBweS5vZmYoJ2Rhc2hib2FyZDptb2RhbC1jbG9zZWQnLCB0aGlzLmhpZGVBbGxQYW5lbHMpXG4gICAgdGhpcy51cHB5Lm9mZignZmlsZS1lZGl0b3I6Y29tcGxldGUnLCB0aGlzLmhpZGVBbGxQYW5lbHMpXG4gICAgdGhpcy51cHB5Lm9mZignY29tcGxldGUnLCB0aGlzLmhhbmRsZUNvbXBsZXRlKVxuXG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignZm9jdXMnLCB0aGlzLnJlY29yZElmRm9jdXNlZE9uVXBweVJlY2VudGx5KVxuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5yZWNvcmRJZkZvY3VzZWRPblVwcHlSZWNlbnRseSlcblxuICAgIGlmICh0aGlzLm9wdHMuaW5saW5lKSB7XG4gICAgICB0aGlzLmVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLmhhbmRsZUtleURvd25JbklubGluZSlcbiAgICB9XG5cbiAgICBpZiAodGhpcy5vcHRzLmF1dG9PcGVuRmlsZUVkaXRvcikge1xuICAgICAgdGhpcy51cHB5Lm9mZignZmlsZXMtYWRkZWQnLCB0aGlzLiNvcGVuRmlsZUVkaXRvcldoZW5GaWxlc0FkZGVkKVxuICAgIH1cbiAgfVxuXG4gIHN1cGVyRm9jdXNPbkVhY2hVcGRhdGUgPSAoKSA9PiB7XG4gICAgY29uc3QgaXNGb2N1c0luVXBweSA9IHRoaXMuZWwuY29udGFpbnMoZG9jdW1lbnQuYWN0aXZlRWxlbWVudClcbiAgICAvLyBXaGVuIGZvY3VzIGlzIGxvc3Qgb24gdGhlIHBhZ2UgKD09IGZvY3VzIGlzIG9uIGJvZHkgZm9yIG1vc3QgYnJvd3NlcnMsIG9yIGZvY3VzIGlzIG51bGwgZm9yIElFMTEpXG4gICAgY29uc3QgaXNGb2N1c05vd2hlcmUgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50ID09PSBkb2N1bWVudC5ib2R5IHx8IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgPT09IG51bGxcbiAgICBjb25zdCBpc0luZm9ybWVySGlkZGVuID0gdGhpcy51cHB5LmdldFN0YXRlKCkuaW5mby5pc0hpZGRlblxuICAgIGNvbnN0IGlzTW9kYWwgPSAhdGhpcy5vcHRzLmlubGluZVxuXG4gICAgaWYgKFxuICAgICAgLy8gSWYgdXBkYXRlIGlzIGNvbm5lY3RlZCB0byBzaG93aW5nIHRoZSBJbmZvcm1lciAtIGxldCB0aGUgc2NyZWVuIHJlYWRlciBjYWxtbHkgcmVhZCBpdC5cbiAgICAgIGlzSW5mb3JtZXJIaWRkZW5cbiAgICAgICYmIChcbiAgICAgICAgLy8gSWYgd2UgYXJlIGluIGEgbW9kYWwgLSBhbHdheXMgc3VwZXJmb2N1cyB3aXRob3V0IGNvbmNlcm4gZm9yIG90aGVyIGVsZW1lbnRzXG4gICAgICAgIC8vIG9uIHRoZSBwYWdlICh1c2VyIGlzIHVubGlrZWx5IHRvIHdhbnQgdG8gaW50ZXJhY3Qgd2l0aCB0aGUgcmVzdCBvZiB0aGUgcGFnZSlcbiAgICAgICAgaXNNb2RhbFxuICAgICAgICAvLyBJZiB3ZSBhcmUgYWxyZWFkeSBpbnNpZGUgb2YgVXBweSwgb3JcbiAgICAgICAgfHwgaXNGb2N1c0luVXBweVxuICAgICAgICAvLyBJZiB3ZSBhcmUgbm90IGZvY3VzZWQgb24gYW55dGhpbmcgQlVUIHdlIGhhdmUgYWxyZWFkeSwgYXQgbGVhc3Qgb25jZSwgZm9jdXNlZCBvbiB1cHB5XG4gICAgICAgIC8vICAgMS4gV2UgZm9jdXMgd2hlbiBpc0ZvY3VzTm93aGVyZSwgYmVjYXVzZSB3aGVuIHRoZSBlbGVtZW50IHdlIHdlcmUgZm9jdXNlZFxuICAgICAgICAvLyAgICAgIG9uIGRpc2FwcGVhcnMgKGUuZy4gYW4gb3ZlcmxheSksIC0gZm9jdXMgZ2V0cyBsb3N0LiBJZiB1c2VyIGlzIHR5cGluZ1xuICAgICAgICAvLyAgICAgIHNvbWV0aGluZyBzb21ld2hlcmUgZWxzZSBvbiB0aGUgcGFnZSwgLSBmb2N1cyB3b24ndCBiZSAnbm93aGVyZScuXG4gICAgICAgIC8vICAgMi4gV2Ugb25seSBmb2N1cyB3aGVuIGZvY3VzIGlzIG5vd2hlcmUgQU5EIHRoaXMuaWZGb2N1c2VkT25VcHB5UmVjZW50bHksXG4gICAgICAgIC8vICAgICAgdG8gYXZvaWQgZm9jdXMganVtcHMgaWYgd2UgZG8gc29tZXRoaW5nIGVsc2Ugb24gdGhlIHBhZ2UuXG4gICAgICAgIC8vICAgW1ByYWN0aWNhbCBjaGVja10gV2l0aG91dCAnJiYgdGhpcy5pZkZvY3VzZWRPblVwcHlSZWNlbnRseScsIGluIFNhZmFyaSwgaW4gaW5saW5lIG1vZGUsXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgd2hlbiBmaWxlIGlzIHVwbG9hZGluZywgLSBuYXZpZ2F0ZSB2aWEgdGFiIHRvIHRoZSBjaGVja2JveCxcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICB0cnkgdG8gcHJlc3Mgc3BhY2UgbXVsdGlwbGUgdGltZXMuIEZvY3VzIHdpbGwganVtcCB0byBVcHB5LlxuICAgICAgICB8fCAoaXNGb2N1c05vd2hlcmUgJiYgdGhpcy5pZkZvY3VzZWRPblVwcHlSZWNlbnRseSlcbiAgICAgIClcbiAgICApIHtcbiAgICAgIHRoaXMuc3VwZXJGb2N1cyh0aGlzLmVsLCB0aGlzLmdldFBsdWdpblN0YXRlKCkuYWN0aXZlT3ZlcmxheVR5cGUpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc3VwZXJGb2N1cy5jYW5jZWwoKVxuICAgIH1cbiAgfVxuXG4gIGFmdGVyVXBkYXRlID0gKCkgPT4ge1xuICAgIGlmICh0aGlzLm9wdHMuZGlzYWJsZWQgJiYgIXRoaXMuZGFzaGJvYXJkSXNEaXNhYmxlZCkge1xuICAgICAgdGhpcy5kaXNhYmxlQWxsRm9jdXNhYmxlRWxlbWVudHModHJ1ZSlcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmICghdGhpcy5vcHRzLmRpc2FibGVkICYmIHRoaXMuZGFzaGJvYXJkSXNEaXNhYmxlZCkge1xuICAgICAgdGhpcy5kaXNhYmxlQWxsRm9jdXNhYmxlRWxlbWVudHMoZmFsc2UpXG4gICAgfVxuXG4gICAgdGhpcy5zdXBlckZvY3VzT25FYWNoVXBkYXRlKClcbiAgfVxuXG4gIHNhdmVGaWxlQ2FyZCA9IChtZXRhLCBmaWxlSUQpID0+IHtcbiAgICB0aGlzLnVwcHkuc2V0RmlsZU1ldGEoZmlsZUlELCBtZXRhKVxuICAgIHRoaXMudG9nZ2xlRmlsZUNhcmQoZmFsc2UsIGZpbGVJRClcbiAgfVxuXG4gICNhdHRhY2hSZW5kZXJGdW5jdGlvblRvVGFyZ2V0ID0gKHRhcmdldCkgPT4ge1xuICAgIGNvbnN0IHBsdWdpbiA9IHRoaXMudXBweS5nZXRQbHVnaW4odGFyZ2V0LmlkKVxuICAgIHJldHVybiB7XG4gICAgICAuLi50YXJnZXQsXG4gICAgICBpY29uOiBwbHVnaW4uaWNvbiB8fCB0aGlzLm9wdHMuZGVmYXVsdFBpY2tlckljb24sXG4gICAgICByZW5kZXI6IHBsdWdpbi5yZW5kZXIsXG4gICAgfVxuICB9XG5cbiAgI2lzVGFyZ2V0U3VwcG9ydGVkID0gKHRhcmdldCkgPT4ge1xuICAgIGNvbnN0IHBsdWdpbiA9IHRoaXMudXBweS5nZXRQbHVnaW4odGFyZ2V0LmlkKVxuICAgIC8vIElmIHRoZSBwbHVnaW4gZG9lcyBub3QgcHJvdmlkZSBhIGBzdXBwb3J0ZWRgIGNoZWNrLCBhc3N1bWUgdGhlIHBsdWdpbiB3b3JrcyBldmVyeXdoZXJlLlxuICAgIGlmICh0eXBlb2YgcGx1Z2luLmlzU3VwcG9ydGVkICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgICByZXR1cm4gcGx1Z2luLmlzU3VwcG9ydGVkKClcbiAgfVxuXG4gICNnZXRBY3F1aXJlcnMgPSBtZW1vaXplKCh0YXJnZXRzKSA9PiB7XG4gICAgcmV0dXJuIHRhcmdldHNcbiAgICAgIC5maWx0ZXIodGFyZ2V0ID0+IHRhcmdldC50eXBlID09PSAnYWNxdWlyZXInICYmIHRoaXMuI2lzVGFyZ2V0U3VwcG9ydGVkKHRhcmdldCkpXG4gICAgICAubWFwKHRoaXMuI2F0dGFjaFJlbmRlckZ1bmN0aW9uVG9UYXJnZXQpXG4gIH0pXG5cbiAgI2dldFByb2dyZXNzSW5kaWNhdG9ycyA9IG1lbW9pemUoKHRhcmdldHMpID0+IHtcbiAgICByZXR1cm4gdGFyZ2V0c1xuICAgICAgLmZpbHRlcih0YXJnZXQgPT4gdGFyZ2V0LnR5cGUgPT09ICdwcm9ncmVzc2luZGljYXRvcicpXG4gICAgICAubWFwKHRoaXMuI2F0dGFjaFJlbmRlckZ1bmN0aW9uVG9UYXJnZXQpXG4gIH0pXG5cbiAgI2dldEVkaXRvcnMgPSBtZW1vaXplKCh0YXJnZXRzKSA9PiB7XG4gICAgcmV0dXJuIHRhcmdldHNcbiAgICAgIC5maWx0ZXIodGFyZ2V0ID0+IHRhcmdldC50eXBlID09PSAnZWRpdG9yJylcbiAgICAgIC5tYXAodGhpcy4jYXR0YWNoUmVuZGVyRnVuY3Rpb25Ub1RhcmdldClcbiAgfSlcblxuICByZW5kZXIgPSAoc3RhdGUpID0+IHtcbiAgICBjb25zdCBwbHVnaW5TdGF0ZSA9IHRoaXMuZ2V0UGx1Z2luU3RhdGUoKVxuICAgIGNvbnN0IHsgZmlsZXMsIGNhcGFiaWxpdGllcywgYWxsb3dOZXdVcGxvYWQgfSA9IHN0YXRlXG4gICAgY29uc3Qge1xuICAgICAgbmV3RmlsZXMsXG4gICAgICB1cGxvYWRTdGFydGVkRmlsZXMsXG4gICAgICBjb21wbGV0ZUZpbGVzLFxuICAgICAgZXJyb3JlZEZpbGVzLFxuICAgICAgaW5Qcm9ncmVzc0ZpbGVzLFxuICAgICAgaW5Qcm9ncmVzc05vdFBhdXNlZEZpbGVzLFxuICAgICAgcHJvY2Vzc2luZ0ZpbGVzLFxuXG4gICAgICBpc1VwbG9hZFN0YXJ0ZWQsXG4gICAgICBpc0FsbENvbXBsZXRlLFxuICAgICAgaXNBbGxFcnJvcmVkLFxuICAgICAgaXNBbGxQYXVzZWQsXG4gICAgfSA9IHRoaXMudXBweS5nZXRPYmplY3RPZkZpbGVzUGVyU3RhdGUoKVxuXG4gICAgY29uc3QgYWNxdWlyZXJzID0gdGhpcy4jZ2V0QWNxdWlyZXJzKHBsdWdpblN0YXRlLnRhcmdldHMpXG4gICAgY29uc3QgcHJvZ3Jlc3NpbmRpY2F0b3JzID0gdGhpcy4jZ2V0UHJvZ3Jlc3NJbmRpY2F0b3JzKHBsdWdpblN0YXRlLnRhcmdldHMpXG4gICAgY29uc3QgZWRpdG9ycyA9IHRoaXMuI2dldEVkaXRvcnMocGx1Z2luU3RhdGUudGFyZ2V0cylcblxuICAgIGxldCB0aGVtZVxuICAgIGlmICh0aGlzLm9wdHMudGhlbWUgPT09ICdhdXRvJykge1xuICAgICAgdGhlbWUgPSBjYXBhYmlsaXRpZXMuZGFya01vZGUgPyAnZGFyaycgOiAnbGlnaHQnXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoZW1lID0gdGhpcy5vcHRzLnRoZW1lXG4gICAgfVxuXG4gICAgaWYgKFsnZmlsZXMnLCAnZm9sZGVycycsICdib3RoJ10uaW5kZXhPZih0aGlzLm9wdHMuZmlsZU1hbmFnZXJTZWxlY3Rpb25UeXBlKSA8IDApIHtcbiAgICAgIHRoaXMub3B0cy5maWxlTWFuYWdlclNlbGVjdGlvblR5cGUgPSAnZmlsZXMnXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS53YXJuKGBVbnN1cHBvcnRlZCBvcHRpb24gZm9yIFwiZmlsZU1hbmFnZXJTZWxlY3Rpb25UeXBlXCIuIFVzaW5nIGRlZmF1bHQgb2YgXCIke3RoaXMub3B0cy5maWxlTWFuYWdlclNlbGVjdGlvblR5cGV9XCIuYClcbiAgICB9XG5cbiAgICByZXR1cm4gRGFzaGJvYXJkVUkoe1xuICAgICAgc3RhdGUsXG4gICAgICBpc0hpZGRlbjogcGx1Z2luU3RhdGUuaXNIaWRkZW4sXG4gICAgICBmaWxlcyxcbiAgICAgIG5ld0ZpbGVzLFxuICAgICAgdXBsb2FkU3RhcnRlZEZpbGVzLFxuICAgICAgY29tcGxldGVGaWxlcyxcbiAgICAgIGVycm9yZWRGaWxlcyxcbiAgICAgIGluUHJvZ3Jlc3NGaWxlcyxcbiAgICAgIGluUHJvZ3Jlc3NOb3RQYXVzZWRGaWxlcyxcbiAgICAgIHByb2Nlc3NpbmdGaWxlcyxcbiAgICAgIGlzVXBsb2FkU3RhcnRlZCxcbiAgICAgIGlzQWxsQ29tcGxldGUsXG4gICAgICBpc0FsbEVycm9yZWQsXG4gICAgICBpc0FsbFBhdXNlZCxcbiAgICAgIHRvdGFsRmlsZUNvdW50OiBPYmplY3Qua2V5cyhmaWxlcykubGVuZ3RoLFxuICAgICAgdG90YWxQcm9ncmVzczogc3RhdGUudG90YWxQcm9ncmVzcyxcbiAgICAgIGFsbG93TmV3VXBsb2FkLFxuICAgICAgYWNxdWlyZXJzLFxuICAgICAgdGhlbWUsXG4gICAgICBkaXNhYmxlZDogdGhpcy5vcHRzLmRpc2FibGVkLFxuICAgICAgZGlzYWJsZUxvY2FsRmlsZXM6IHRoaXMub3B0cy5kaXNhYmxlTG9jYWxGaWxlcyxcbiAgICAgIGRpcmVjdGlvbjogdGhpcy5vcHRzLmRpcmVjdGlvbixcbiAgICAgIGFjdGl2ZVBpY2tlclBhbmVsOiBwbHVnaW5TdGF0ZS5hY3RpdmVQaWNrZXJQYW5lbCxcbiAgICAgIHNob3dGaWxlRWRpdG9yOiBwbHVnaW5TdGF0ZS5zaG93RmlsZUVkaXRvcixcbiAgICAgIHNhdmVGaWxlRWRpdG9yOiB0aGlzLnNhdmVGaWxlRWRpdG9yLFxuICAgICAgZGlzYWJsZUFsbEZvY3VzYWJsZUVsZW1lbnRzOiB0aGlzLmRpc2FibGVBbGxGb2N1c2FibGVFbGVtZW50cyxcbiAgICAgIGFuaW1hdGVPcGVuQ2xvc2U6IHRoaXMub3B0cy5hbmltYXRlT3BlbkNsb3NlLFxuICAgICAgaXNDbG9zaW5nOiBwbHVnaW5TdGF0ZS5pc0Nsb3NpbmcsXG4gICAgICBwcm9ncmVzc2luZGljYXRvcnMsXG4gICAgICBlZGl0b3JzLFxuICAgICAgYXV0b1Byb2NlZWQ6IHRoaXMudXBweS5vcHRzLmF1dG9Qcm9jZWVkLFxuICAgICAgaWQ6IHRoaXMuaWQsXG4gICAgICBjbG9zZU1vZGFsOiB0aGlzLnJlcXVlc3RDbG9zZU1vZGFsLFxuICAgICAgaGFuZGxlQ2xpY2tPdXRzaWRlOiB0aGlzLmhhbmRsZUNsaWNrT3V0c2lkZSxcbiAgICAgIGhhbmRsZUlucHV0Q2hhbmdlOiB0aGlzLmhhbmRsZUlucHV0Q2hhbmdlLFxuICAgICAgaGFuZGxlUGFzdGU6IHRoaXMuaGFuZGxlUGFzdGUsXG4gICAgICBpbmxpbmU6IHRoaXMub3B0cy5pbmxpbmUsXG4gICAgICBzaG93UGFuZWw6IHRoaXMuc2hvd1BhbmVsLFxuICAgICAgaGlkZUFsbFBhbmVsczogdGhpcy5oaWRlQWxsUGFuZWxzLFxuICAgICAgaTE4bjogdGhpcy5pMThuLFxuICAgICAgaTE4bkFycmF5OiB0aGlzLmkxOG5BcnJheSxcbiAgICAgIHVwcHk6IHRoaXMudXBweSxcbiAgICAgIG5vdGU6IHRoaXMub3B0cy5ub3RlLFxuICAgICAgcmVjb3ZlcmVkU3RhdGU6IHN0YXRlLnJlY292ZXJlZFN0YXRlLFxuICAgICAgbWV0YUZpZWxkczogcGx1Z2luU3RhdGUubWV0YUZpZWxkcyxcbiAgICAgIHJlc3VtYWJsZVVwbG9hZHM6IGNhcGFiaWxpdGllcy5yZXN1bWFibGVVcGxvYWRzIHx8IGZhbHNlLFxuICAgICAgaW5kaXZpZHVhbENhbmNlbGxhdGlvbjogY2FwYWJpbGl0aWVzLmluZGl2aWR1YWxDYW5jZWxsYXRpb24sXG4gICAgICBpc01vYmlsZURldmljZTogY2FwYWJpbGl0aWVzLmlzTW9iaWxlRGV2aWNlLFxuICAgICAgZmlsZUNhcmRGb3I6IHBsdWdpblN0YXRlLmZpbGVDYXJkRm9yLFxuICAgICAgdG9nZ2xlRmlsZUNhcmQ6IHRoaXMudG9nZ2xlRmlsZUNhcmQsXG4gICAgICB0b2dnbGVBZGRGaWxlc1BhbmVsOiB0aGlzLnRvZ2dsZUFkZEZpbGVzUGFuZWwsXG4gICAgICBzaG93QWRkRmlsZXNQYW5lbDogcGx1Z2luU3RhdGUuc2hvd0FkZEZpbGVzUGFuZWwsXG4gICAgICBzYXZlRmlsZUNhcmQ6IHRoaXMuc2F2ZUZpbGVDYXJkLFxuICAgICAgb3BlbkZpbGVFZGl0b3I6IHRoaXMub3BlbkZpbGVFZGl0b3IsXG4gICAgICBjYW5FZGl0RmlsZTogdGhpcy5jYW5FZGl0RmlsZSxcbiAgICAgIHdpZHRoOiB0aGlzLm9wdHMud2lkdGgsXG4gICAgICBoZWlnaHQ6IHRoaXMub3B0cy5oZWlnaHQsXG4gICAgICBzaG93TGlua1RvRmlsZVVwbG9hZFJlc3VsdDogdGhpcy5vcHRzLnNob3dMaW5rVG9GaWxlVXBsb2FkUmVzdWx0LFxuICAgICAgZmlsZU1hbmFnZXJTZWxlY3Rpb25UeXBlOiB0aGlzLm9wdHMuZmlsZU1hbmFnZXJTZWxlY3Rpb25UeXBlLFxuICAgICAgcHJvdWRseURpc3BsYXlQb3dlcmVkQnlVcHB5OiB0aGlzLm9wdHMucHJvdWRseURpc3BsYXlQb3dlcmVkQnlVcHB5LFxuICAgICAgaGlkZUNhbmNlbEJ1dHRvbjogdGhpcy5vcHRzLmhpZGVDYW5jZWxCdXR0b24sXG4gICAgICBoaWRlUmV0cnlCdXR0b246IHRoaXMub3B0cy5oaWRlUmV0cnlCdXR0b24sXG4gICAgICBoaWRlUGF1c2VSZXN1bWVCdXR0b246IHRoaXMub3B0cy5oaWRlUGF1c2VSZXN1bWVCdXR0b24sXG4gICAgICBzaG93UmVtb3ZlQnV0dG9uQWZ0ZXJDb21wbGV0ZTogdGhpcy5vcHRzLnNob3dSZW1vdmVCdXR0b25BZnRlckNvbXBsZXRlLFxuICAgICAgY29udGFpbmVyV2lkdGg6IHBsdWdpblN0YXRlLmNvbnRhaW5lcldpZHRoLFxuICAgICAgY29udGFpbmVySGVpZ2h0OiBwbHVnaW5TdGF0ZS5jb250YWluZXJIZWlnaHQsXG4gICAgICBhcmVJbnNpZGVzUmVhZHlUb0JlVmlzaWJsZTogcGx1Z2luU3RhdGUuYXJlSW5zaWRlc1JlYWR5VG9CZVZpc2libGUsXG4gICAgICBpc1RhcmdldERPTUVsOiB0aGlzLmlzVGFyZ2V0RE9NRWwsXG4gICAgICBwYXJlbnRFbGVtZW50OiB0aGlzLmVsLFxuICAgICAgYWxsb3dlZEZpbGVUeXBlczogdGhpcy51cHB5Lm9wdHMucmVzdHJpY3Rpb25zLmFsbG93ZWRGaWxlVHlwZXMsXG4gICAgICBtYXhOdW1iZXJPZkZpbGVzOiB0aGlzLnVwcHkub3B0cy5yZXN0cmljdGlvbnMubWF4TnVtYmVyT2ZGaWxlcyxcbiAgICAgIHJlcXVpcmVkTWV0YUZpZWxkczogdGhpcy51cHB5Lm9wdHMucmVzdHJpY3Rpb25zLnJlcXVpcmVkTWV0YUZpZWxkcyxcbiAgICAgIHNob3dTZWxlY3RlZEZpbGVzOiB0aGlzLm9wdHMuc2hvd1NlbGVjdGVkRmlsZXMsXG4gICAgICBoYW5kbGVDYW5jZWxSZXN0b3JlOiB0aGlzLmhhbmRsZUNhbmNlbFJlc3RvcmUsXG4gICAgICBoYW5kbGVSZXF1ZXN0VGh1bWJuYWlsOiB0aGlzLmhhbmRsZVJlcXVlc3RUaHVtYm5haWwsXG4gICAgICBoYW5kbGVDYW5jZWxUaHVtYm5haWw6IHRoaXMuaGFuZGxlQ2FuY2VsVGh1bWJuYWlsLFxuICAgICAgLy8gZHJhZyBwcm9wc1xuICAgICAgaXNEcmFnZ2luZ092ZXI6IHBsdWdpblN0YXRlLmlzRHJhZ2dpbmdPdmVyLFxuICAgICAgaGFuZGxlRHJhZ092ZXI6IHRoaXMuaGFuZGxlRHJhZ092ZXIsXG4gICAgICBoYW5kbGVEcmFnTGVhdmU6IHRoaXMuaGFuZGxlRHJhZ0xlYXZlLFxuICAgICAgaGFuZGxlRHJvcDogdGhpcy5oYW5kbGVEcm9wLFxuICAgIH0pXG4gIH1cblxuICBkaXNjb3ZlclByb3ZpZGVyUGx1Z2lucyA9ICgpID0+IHtcbiAgICB0aGlzLnVwcHkuaXRlcmF0ZVBsdWdpbnMoKHBsdWdpbikgPT4ge1xuICAgICAgaWYgKHBsdWdpbiAmJiAhcGx1Z2luLnRhcmdldCAmJiBwbHVnaW4ub3B0cyAmJiBwbHVnaW4ub3B0cy50YXJnZXQgPT09IHRoaXMuY29uc3RydWN0b3IpIHtcbiAgICAgICAgdGhpcy5hZGRUYXJnZXQocGx1Z2luKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBvbk1vdW50ICgpIHtcbiAgICAvLyBTZXQgdGhlIHRleHQgZGlyZWN0aW9uIGlmIHRoZSBwYWdlIGhhcyBub3QgZGVmaW5lZCBvbmUuXG4gICAgY29uc3QgZWxlbWVudCA9IHRoaXMuZWxcbiAgICBjb25zdCBkaXJlY3Rpb24gPSBnZXRUZXh0RGlyZWN0aW9uKGVsZW1lbnQpXG4gICAgaWYgKCFkaXJlY3Rpb24pIHtcbiAgICAgIGVsZW1lbnQuZGlyID0gJ2x0cidcbiAgICB9XG4gIH1cblxuICBpbnN0YWxsID0gKCkgPT4ge1xuICAgIC8vIFNldCBkZWZhdWx0IHN0YXRlIGZvciBEYXNoYm9hcmRcbiAgICB0aGlzLnNldFBsdWdpblN0YXRlKHtcbiAgICAgIGlzSGlkZGVuOiB0cnVlLFxuICAgICAgZmlsZUNhcmRGb3I6IG51bGwsXG4gICAgICBhY3RpdmVPdmVybGF5VHlwZTogbnVsbCxcbiAgICAgIHNob3dBZGRGaWxlc1BhbmVsOiBmYWxzZSxcbiAgICAgIGFjdGl2ZVBpY2tlclBhbmVsOiBmYWxzZSxcbiAgICAgIHNob3dGaWxlRWRpdG9yOiBmYWxzZSxcbiAgICAgIG1ldGFGaWVsZHM6IHRoaXMub3B0cy5tZXRhRmllbGRzLFxuICAgICAgdGFyZ2V0czogW10sXG4gICAgICAvLyBXZSdsbCBtYWtlIHRoZW0gdmlzaWJsZSBvbmNlIC5jb250YWluZXJXaWR0aCBpcyBkZXRlcm1pbmVkXG4gICAgICBhcmVJbnNpZGVzUmVhZHlUb0JlVmlzaWJsZTogZmFsc2UsXG4gICAgICBpc0RyYWdnaW5nT3ZlcjogZmFsc2UsXG4gICAgfSlcblxuICAgIGNvbnN0IHsgaW5saW5lLCBjbG9zZUFmdGVyRmluaXNoIH0gPSB0aGlzLm9wdHNcbiAgICBpZiAoaW5saW5lICYmIGNsb3NlQWZ0ZXJGaW5pc2gpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignW0Rhc2hib2FyZF0gYGNsb3NlQWZ0ZXJGaW5pc2g6IHRydWVgIGNhbm5vdCBiZSB1c2VkIG9uIGFuIGlubGluZSBEYXNoYm9hcmQsIGJlY2F1c2UgYW4gaW5saW5lIERhc2hib2FyZCBjYW5ub3QgYmUgY2xvc2VkIGF0IGFsbC4gRWl0aGVyIHNldCBgaW5saW5lOiBmYWxzZWAsIG9yIGRpc2FibGUgdGhlIGBjbG9zZUFmdGVyRmluaXNoYCBvcHRpb24uJylcbiAgICB9XG5cbiAgICBjb25zdCB7IGFsbG93TXVsdGlwbGVVcGxvYWRzLCBhbGxvd011bHRpcGxlVXBsb2FkQmF0Y2hlcyB9ID0gdGhpcy51cHB5Lm9wdHNcbiAgICBpZiAoKGFsbG93TXVsdGlwbGVVcGxvYWRzIHx8IGFsbG93TXVsdGlwbGVVcGxvYWRCYXRjaGVzKSAmJiBjbG9zZUFmdGVyRmluaXNoKSB7XG4gICAgICB0aGlzLnVwcHkubG9nKCdbRGFzaGJvYXJkXSBXaGVuIHVzaW5nIGBjbG9zZUFmdGVyRmluaXNoYCwgd2UgcmVjb21tZW5kZWQgc2V0dGluZyB0aGUgYGFsbG93TXVsdGlwbGVVcGxvYWRCYXRjaGVzYCBvcHRpb24gdG8gYGZhbHNlYCBpbiB0aGUgVXBweSBjb25zdHJ1Y3Rvci4gU2VlIGh0dHBzOi8vdXBweS5pby9kb2NzL3VwcHkvI2FsbG93TXVsdGlwbGVVcGxvYWRzLXRydWUnLCAnd2FybmluZycpXG4gICAgfVxuXG4gICAgY29uc3QgeyB0YXJnZXQgfSA9IHRoaXMub3B0c1xuXG4gICAgaWYgKHRhcmdldCkge1xuICAgICAgdGhpcy5tb3VudCh0YXJnZXQsIHRoaXMpXG4gICAgfVxuXG4gICAgY29uc3QgcGx1Z2lucyA9IHRoaXMub3B0cy5wbHVnaW5zIHx8IFtdXG5cbiAgICBwbHVnaW5zLmZvckVhY2goKHBsdWdpbklEKSA9PiB7XG4gICAgICBjb25zdCBwbHVnaW4gPSB0aGlzLnVwcHkuZ2V0UGx1Z2luKHBsdWdpbklEKVxuICAgICAgaWYgKHBsdWdpbikge1xuICAgICAgICBwbHVnaW4ubW91bnQodGhpcywgcGx1Z2luKVxuICAgICAgfVxuICAgIH0pXG5cbiAgICBpZiAoIXRoaXMub3B0cy5kaXNhYmxlU3RhdHVzQmFyKSB7XG4gICAgICB0aGlzLnVwcHkudXNlKFN0YXR1c0Jhciwge1xuICAgICAgICBpZDogYCR7dGhpcy5pZH06U3RhdHVzQmFyYCxcbiAgICAgICAgdGFyZ2V0OiB0aGlzLFxuICAgICAgICBoaWRlVXBsb2FkQnV0dG9uOiB0aGlzLm9wdHMuaGlkZVVwbG9hZEJ1dHRvbixcbiAgICAgICAgaGlkZVJldHJ5QnV0dG9uOiB0aGlzLm9wdHMuaGlkZVJldHJ5QnV0dG9uLFxuICAgICAgICBoaWRlUGF1c2VSZXN1bWVCdXR0b246IHRoaXMub3B0cy5oaWRlUGF1c2VSZXN1bWVCdXR0b24sXG4gICAgICAgIGhpZGVDYW5jZWxCdXR0b246IHRoaXMub3B0cy5oaWRlQ2FuY2VsQnV0dG9uLFxuICAgICAgICBzaG93UHJvZ3Jlc3NEZXRhaWxzOiB0aGlzLm9wdHMuc2hvd1Byb2dyZXNzRGV0YWlscyxcbiAgICAgICAgaGlkZUFmdGVyRmluaXNoOiB0aGlzLm9wdHMuaGlkZVByb2dyZXNzQWZ0ZXJGaW5pc2gsXG4gICAgICAgIGxvY2FsZTogdGhpcy5vcHRzLmxvY2FsZSxcbiAgICAgICAgZG9uZUJ1dHRvbkhhbmRsZXI6IHRoaXMub3B0cy5kb25lQnV0dG9uSGFuZGxlcixcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLm9wdHMuZGlzYWJsZUluZm9ybWVyKSB7XG4gICAgICB0aGlzLnVwcHkudXNlKEluZm9ybWVyLCB7XG4gICAgICAgIGlkOiBgJHt0aGlzLmlkfTpJbmZvcm1lcmAsXG4gICAgICAgIHRhcmdldDogdGhpcyxcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLm9wdHMuZGlzYWJsZVRodW1ibmFpbEdlbmVyYXRvcikge1xuICAgICAgdGhpcy51cHB5LnVzZShUaHVtYm5haWxHZW5lcmF0b3IsIHtcbiAgICAgICAgaWQ6IGAke3RoaXMuaWR9OlRodW1ibmFpbEdlbmVyYXRvcmAsXG4gICAgICAgIHRodW1ibmFpbFdpZHRoOiB0aGlzLm9wdHMudGh1bWJuYWlsV2lkdGgsXG4gICAgICAgIHRodW1ibmFpbFR5cGU6IHRoaXMub3B0cy50aHVtYm5haWxUeXBlLFxuICAgICAgICB3YWl0Rm9yVGh1bWJuYWlsc0JlZm9yZVVwbG9hZDogdGhpcy5vcHRzLndhaXRGb3JUaHVtYm5haWxzQmVmb3JlVXBsb2FkLFxuICAgICAgICAvLyBJZiB3ZSBkb24ndCBibG9jayBvbiB0aHVtYm5haWxzLCB3ZSBjYW4gbGF6aWx5IGdlbmVyYXRlIHRoZW1cbiAgICAgICAgbGF6eTogIXRoaXMub3B0cy53YWl0Rm9yVGh1bWJuYWlsc0JlZm9yZVVwbG9hZCxcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgLy8gRGFyayBNb2RlIC8gdGhlbWVcbiAgICB0aGlzLmRhcmtNb2RlTWVkaWFRdWVyeSA9ICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cubWF0Y2hNZWRpYSlcbiAgICAgID8gd2luZG93Lm1hdGNoTWVkaWEoJyhwcmVmZXJzLWNvbG9yLXNjaGVtZTogZGFyayknKVxuICAgICAgOiBudWxsXG5cbiAgICBjb25zdCBpc0RhcmtNb2RlT25Gcm9tVGhlU3RhcnQgPSB0aGlzLmRhcmtNb2RlTWVkaWFRdWVyeSA/IHRoaXMuZGFya01vZGVNZWRpYVF1ZXJ5Lm1hdGNoZXMgOiBmYWxzZVxuICAgIHRoaXMudXBweS5sb2coYFtEYXNoYm9hcmRdIERhcmsgbW9kZSBpcyAke2lzRGFya01vZGVPbkZyb21UaGVTdGFydCA/ICdvbicgOiAnb2ZmJ31gKVxuICAgIHRoaXMuc2V0RGFya01vZGVDYXBhYmlsaXR5KGlzRGFya01vZGVPbkZyb21UaGVTdGFydClcblxuICAgIGlmICh0aGlzLm9wdHMudGhlbWUgPT09ICdhdXRvJykge1xuICAgICAgdGhpcy5kYXJrTW9kZU1lZGlhUXVlcnkuYWRkTGlzdGVuZXIodGhpcy5oYW5kbGVTeXN0ZW1EYXJrTW9kZUNoYW5nZSlcbiAgICB9XG5cbiAgICB0aGlzLmRpc2NvdmVyUHJvdmlkZXJQbHVnaW5zKClcbiAgICB0aGlzLmluaXRFdmVudHMoKVxuICB9XG5cbiAgdW5pbnN0YWxsID0gKCkgPT4ge1xuICAgIGlmICghdGhpcy5vcHRzLmRpc2FibGVJbmZvcm1lcikge1xuICAgICAgY29uc3QgaW5mb3JtZXIgPSB0aGlzLnVwcHkuZ2V0UGx1Z2luKGAke3RoaXMuaWR9OkluZm9ybWVyYClcbiAgICAgIC8vIENoZWNraW5nIGlmIHRoaXMgcGx1Z2luIGV4aXN0cywgaW4gY2FzZSBpdCB3YXMgcmVtb3ZlZCBieSB1cHB5LWNvcmVcbiAgICAgIC8vIGJlZm9yZSB0aGUgRGFzaGJvYXJkIHdhcy5cbiAgICAgIGlmIChpbmZvcm1lcikgdGhpcy51cHB5LnJlbW92ZVBsdWdpbihpbmZvcm1lcilcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMub3B0cy5kaXNhYmxlU3RhdHVzQmFyKSB7XG4gICAgICBjb25zdCBzdGF0dXNCYXIgPSB0aGlzLnVwcHkuZ2V0UGx1Z2luKGAke3RoaXMuaWR9OlN0YXR1c0JhcmApXG4gICAgICBpZiAoc3RhdHVzQmFyKSB0aGlzLnVwcHkucmVtb3ZlUGx1Z2luKHN0YXR1c0JhcilcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMub3B0cy5kaXNhYmxlVGh1bWJuYWlsR2VuZXJhdG9yKSB7XG4gICAgICBjb25zdCB0aHVtYm5haWwgPSB0aGlzLnVwcHkuZ2V0UGx1Z2luKGAke3RoaXMuaWR9OlRodW1ibmFpbEdlbmVyYXRvcmApXG4gICAgICBpZiAodGh1bWJuYWlsKSB0aGlzLnVwcHkucmVtb3ZlUGx1Z2luKHRodW1ibmFpbClcbiAgICB9XG5cbiAgICBjb25zdCBwbHVnaW5zID0gdGhpcy5vcHRzLnBsdWdpbnMgfHwgW11cbiAgICBwbHVnaW5zLmZvckVhY2goKHBsdWdpbklEKSA9PiB7XG4gICAgICBjb25zdCBwbHVnaW4gPSB0aGlzLnVwcHkuZ2V0UGx1Z2luKHBsdWdpbklEKVxuICAgICAgaWYgKHBsdWdpbikgcGx1Z2luLnVubW91bnQoKVxuICAgIH0pXG5cbiAgICBpZiAodGhpcy5vcHRzLnRoZW1lID09PSAnYXV0bycpIHtcbiAgICAgIHRoaXMuZGFya01vZGVNZWRpYVF1ZXJ5LnJlbW92ZUxpc3RlbmVyKHRoaXMuaGFuZGxlU3lzdGVtRGFya01vZGVDaGFuZ2UpXG4gICAgfVxuXG4gICAgdGhpcy51bm1vdW50KClcbiAgICB0aGlzLnJlbW92ZUV2ZW50cygpXG4gIH1cbn1cbiIsIm1vZHVsZS5leHBvcnRzID0ge1xuICBzdHJpbmdzOiB7XG4gICAgLy8gV2hlbiBgaW5saW5lOiBmYWxzZWAsIHVzZWQgYXMgdGhlIHNjcmVlbiByZWFkZXIgbGFiZWwgZm9yIHRoZSBidXR0b24gdGhhdCBjbG9zZXMgdGhlIG1vZGFsLlxuICAgIGNsb3NlTW9kYWw6ICdDbG9zZSBNb2RhbCcsXG4gICAgLy8gVXNlZCBhcyB0aGUgc2NyZWVuIHJlYWRlciBsYWJlbCBmb3IgdGhlIHBsdXMgKCspIGJ1dHRvbiB0aGF0IHNob3dzIHRoZSDigJxBZGQgbW9yZSBmaWxlc+KAnSBzY3JlZW5cbiAgICBhZGRNb3JlRmlsZXM6ICdBZGQgbW9yZSBmaWxlcycsXG4gICAgYWRkaW5nTW9yZUZpbGVzOiAnQWRkaW5nIG1vcmUgZmlsZXMnLFxuICAgIC8vIFVzZWQgYXMgdGhlIGhlYWRlciBmb3IgaW1wb3J0IHBhbmVscywgZS5nLiwg4oCcSW1wb3J0IGZyb20gR29vZ2xlIERyaXZl4oCdLlxuICAgIGltcG9ydEZyb206ICdJbXBvcnQgZnJvbSAle25hbWV9JyxcbiAgICAvLyBXaGVuIGBpbmxpbmU6IGZhbHNlYCwgdXNlZCBhcyB0aGUgc2NyZWVuIHJlYWRlciBsYWJlbCBmb3IgdGhlIGRhc2hib2FyZCBtb2RhbC5cbiAgICBkYXNoYm9hcmRXaW5kb3dUaXRsZTogJ1VwcHkgRGFzaGJvYXJkIFdpbmRvdyAoUHJlc3MgZXNjYXBlIHRvIGNsb3NlKScsXG4gICAgLy8gV2hlbiBgaW5saW5lOiB0cnVlYCwgdXNlZCBhcyB0aGUgc2NyZWVuIHJlYWRlciBsYWJlbCBmb3IgdGhlIGRhc2hib2FyZCBhcmVhLlxuICAgIGRhc2hib2FyZFRpdGxlOiAnVXBweSBEYXNoYm9hcmQnLFxuICAgIC8vIFNob3duIGluIHRoZSBJbmZvcm1lciB3aGVuIGEgbGluayB0byBhIGZpbGUgd2FzIGNvcGllZCB0byB0aGUgY2xpcGJvYXJkLlxuICAgIGNvcHlMaW5rVG9DbGlwYm9hcmRTdWNjZXNzOiAnTGluayBjb3BpZWQgdG8gY2xpcGJvYXJkLicsXG4gICAgLy8gVXNlZCB3aGVuIGEgbGluayBjYW5ub3QgYmUgY29waWVkIGF1dG9tYXRpY2FsbHkg4oCUIHRoZSB1c2VyIGhhcyB0byBzZWxlY3QgdGhlIHRleHQgZnJvbSB0aGVcbiAgICAvLyBpbnB1dCBlbGVtZW50IGJlbG93IHRoaXMgc3RyaW5nLlxuICAgIGNvcHlMaW5rVG9DbGlwYm9hcmRGYWxsYmFjazogJ0NvcHkgdGhlIFVSTCBiZWxvdycsXG4gICAgLy8gVXNlZCBhcyB0aGUgaG92ZXIgdGl0bGUgYW5kIHNjcmVlbiByZWFkZXIgbGFiZWwgZm9yIGJ1dHRvbnMgdGhhdCBjb3B5IGEgZmlsZSBsaW5rLlxuICAgIGNvcHlMaW5rOiAnQ29weSBsaW5rJyxcbiAgICBiYWNrOiAnQmFjaycsXG4gICAgLy8gVXNlZCBhcyB0aGUgc2NyZWVuIHJlYWRlciBsYWJlbCBmb3IgYnV0dG9ucyB0aGF0IHJlbW92ZSBhIGZpbGUuXG4gICAgcmVtb3ZlRmlsZTogJ1JlbW92ZSBmaWxlJyxcbiAgICAvLyBVc2VkIGFzIHRoZSBzY3JlZW4gcmVhZGVyIGxhYmVsIGZvciBidXR0b25zIHRoYXQgb3BlbiB0aGUgbWV0YWRhdGEgZWRpdG9yIHBhbmVsIGZvciBhIGZpbGUuXG4gICAgZWRpdEZpbGU6ICdFZGl0IGZpbGUnLFxuICAgIC8vIFNob3duIGluIHRoZSBwYW5lbCBoZWFkZXIgZm9yIHRoZSBtZXRhZGF0YSBlZGl0b3IuIFJlbmRlcmVkIGFzIOKAnEVkaXRpbmcgaW1hZ2UucG5n4oCdLlxuICAgIGVkaXRpbmc6ICdFZGl0aW5nICV7ZmlsZX0nLFxuICAgIC8vIFVzZWQgYXMgdGhlIHNjcmVlbiByZWFkZXIgbGFiZWwgZm9yIHRoZSBidXR0b24gdGhhdCBzYXZlcyBtZXRhZGF0YSBlZGl0cyBhbmQgcmV0dXJucyB0byB0aGVcbiAgICAvLyBmaWxlIGxpc3Qgdmlldy5cbiAgICBmaW5pc2hFZGl0aW5nRmlsZTogJ0ZpbmlzaCBlZGl0aW5nIGZpbGUnLFxuICAgIHNhdmVDaGFuZ2VzOiAnU2F2ZSBjaGFuZ2VzJyxcbiAgICAvLyBVc2VkIGFzIHRoZSBsYWJlbCBmb3IgdGhlIHRhYiBidXR0b24gdGhhdCBvcGVucyB0aGUgc3lzdGVtIGZpbGUgc2VsZWN0aW9uIGRpYWxvZy5cbiAgICBteURldmljZTogJ015IERldmljZScsXG4gICAgZHJvcEhpbnQ6ICdEcm9wIHlvdXIgZmlsZXMgaGVyZScsXG4gICAgLy8gVXNlZCBhcyB0aGUgaG92ZXIgdGV4dCBhbmQgc2NyZWVuIHJlYWRlciBsYWJlbCBmb3IgZmlsZSBwcm9ncmVzcyBpbmRpY2F0b3JzIHdoZW5cbiAgICAvLyB0aGV5IGhhdmUgYmVlbiBmdWxseSB1cGxvYWRlZC5cbiAgICB1cGxvYWRDb21wbGV0ZTogJ1VwbG9hZCBjb21wbGV0ZScsXG4gICAgdXBsb2FkUGF1c2VkOiAnVXBsb2FkIHBhdXNlZCcsXG4gICAgLy8gVXNlZCBhcyB0aGUgaG92ZXIgdGV4dCBhbmQgc2NyZWVuIHJlYWRlciBsYWJlbCBmb3IgdGhlIGJ1dHRvbnMgdG8gcmVzdW1lIHBhdXNlZCB1cGxvYWRzLlxuICAgIHJlc3VtZVVwbG9hZDogJ1Jlc3VtZSB1cGxvYWQnLFxuICAgIC8vIFVzZWQgYXMgdGhlIGhvdmVyIHRleHQgYW5kIHNjcmVlbiByZWFkZXIgbGFiZWwgZm9yIHRoZSBidXR0b25zIHRvIHBhdXNlIHVwbG9hZHMuXG4gICAgcGF1c2VVcGxvYWQ6ICdQYXVzZSB1cGxvYWQnLFxuICAgIC8vIFVzZWQgYXMgdGhlIGhvdmVyIHRleHQgYW5kIHNjcmVlbiByZWFkZXIgbGFiZWwgZm9yIHRoZSBidXR0b25zIHRvIHJldHJ5IGZhaWxlZCB1cGxvYWRzLlxuICAgIHJldHJ5VXBsb2FkOiAnUmV0cnkgdXBsb2FkJyxcbiAgICAvLyBVc2VkIGFzIHRoZSBob3ZlciB0ZXh0IGFuZCBzY3JlZW4gcmVhZGVyIGxhYmVsIGZvciB0aGUgYnV0dG9ucyB0byBjYW5jZWwgdXBsb2Fkcy5cbiAgICBjYW5jZWxVcGxvYWQ6ICdDYW5jZWwgdXBsb2FkJyxcbiAgICAvLyBVc2VkIGluIGEgdGl0bGUsIGhvdyBtYW55IGZpbGVzIGFyZSBjdXJyZW50bHkgc2VsZWN0ZWRcbiAgICB4RmlsZXNTZWxlY3RlZDoge1xuICAgICAgMDogJyV7c21hcnRfY291bnR9IGZpbGUgc2VsZWN0ZWQnLFxuICAgICAgMTogJyV7c21hcnRfY291bnR9IGZpbGVzIHNlbGVjdGVkJyxcbiAgICB9LFxuICAgIHVwbG9hZGluZ1hGaWxlczoge1xuICAgICAgMDogJ1VwbG9hZGluZyAle3NtYXJ0X2NvdW50fSBmaWxlJyxcbiAgICAgIDE6ICdVcGxvYWRpbmcgJXtzbWFydF9jb3VudH0gZmlsZXMnLFxuICAgIH0sXG4gICAgcHJvY2Vzc2luZ1hGaWxlczoge1xuICAgICAgMDogJ1Byb2Nlc3NpbmcgJXtzbWFydF9jb3VudH0gZmlsZScsXG4gICAgICAxOiAnUHJvY2Vzc2luZyAle3NtYXJ0X2NvdW50fSBmaWxlcycsXG4gICAgfSxcbiAgICAvLyBUaGUgXCJwb3dlcmVkIGJ5IFVwcHlcIiBsaW5rIGF0IHRoZSBib3R0b20gb2YgdGhlIERhc2hib2FyZC5cbiAgICBwb3dlcmVkQnk6ICdQb3dlcmVkIGJ5ICV7dXBweX0nLFxuICAgIGFkZE1vcmU6ICdBZGQgbW9yZScsXG4gICAgZWRpdEZpbGVXaXRoRmlsZW5hbWU6ICdFZGl0IGZpbGUgJXtmaWxlfScsXG4gICAgc2F2ZTogJ1NhdmUnLFxuICAgIGNhbmNlbDogJ0NhbmNlbCcsXG4gICAgZHJvcFBhc3RlRmlsZXM6ICdEcm9wIGZpbGVzIGhlcmUgb3IgJXticm93c2VGaWxlc30nLFxuICAgIGRyb3BQYXN0ZUZvbGRlcnM6ICdEcm9wIGZpbGVzIGhlcmUgb3IgJXticm93c2VGb2xkZXJzfScsXG4gICAgZHJvcFBhc3RlQm90aDogJ0Ryb3AgZmlsZXMgaGVyZSwgJXticm93c2VGaWxlc30gb3IgJXticm93c2VGb2xkZXJzfScsXG4gICAgZHJvcFBhc3RlSW1wb3J0RmlsZXM6ICdEcm9wIGZpbGVzIGhlcmUsICV7YnJvd3NlRmlsZXN9IG9yIGltcG9ydCBmcm9tOicsXG4gICAgZHJvcFBhc3RlSW1wb3J0Rm9sZGVyczogJ0Ryb3AgZmlsZXMgaGVyZSwgJXticm93c2VGb2xkZXJzfSBvciBpbXBvcnQgZnJvbTonLFxuICAgIGRyb3BQYXN0ZUltcG9ydEJvdGg6XG4gICAgICAnRHJvcCBmaWxlcyBoZXJlLCAle2Jyb3dzZUZpbGVzfSwgJXticm93c2VGb2xkZXJzfSBvciBpbXBvcnQgZnJvbTonLFxuICAgIGltcG9ydEZpbGVzOiAnSW1wb3J0IGZpbGVzIGZyb206JyxcbiAgICBicm93c2VGaWxlczogJ2Jyb3dzZSBmaWxlcycsXG4gICAgYnJvd3NlRm9sZGVyczogJ2Jyb3dzZSBmb2xkZXJzJyxcbiAgICByZWNvdmVyZWRYRmlsZXM6IHtcbiAgICAgIDA6ICdXZSBjb3VsZCBub3QgZnVsbHkgcmVjb3ZlciAxIGZpbGUuIFBsZWFzZSByZS1zZWxlY3QgaXQgYW5kIHJlc3VtZSB0aGUgdXBsb2FkLicsXG4gICAgICAxOiAnV2UgY291bGQgbm90IGZ1bGx5IHJlY292ZXIgJXtzbWFydF9jb3VudH0gZmlsZXMuIFBsZWFzZSByZS1zZWxlY3QgdGhlbSBhbmQgcmVzdW1lIHRoZSB1cGxvYWQuJyxcbiAgICB9LFxuICAgIHJlY292ZXJlZEFsbEZpbGVzOiAnV2UgcmVzdG9yZWQgYWxsIGZpbGVzLiBZb3UgY2FuIG5vdyByZXN1bWUgdGhlIHVwbG9hZC4nLFxuICAgIHNlc3Npb25SZXN0b3JlZDogJ1Nlc3Npb24gcmVzdG9yZWQnLFxuICAgIHJlU2VsZWN0OiAnUmUtc2VsZWN0JyxcbiAgICBtaXNzaW5nUmVxdWlyZWRNZXRhRmllbGRzOiB7XG4gICAgICAwOiAnTWlzc2luZyByZXF1aXJlZCBtZXRhIGZpZWxkOiAle2ZpZWxkc30uJyxcbiAgICAgIDE6ICdNaXNzaW5nIHJlcXVpcmVkIG1ldGEgZmllbGRzOiAle2ZpZWxkc30uJyxcbiAgICB9LFxuICB9LFxufVxuIiwiLyoqXG4gKiBDb3BpZXMgdGV4dCB0byBjbGlwYm9hcmQgYnkgY3JlYXRpbmcgYW4gYWxtb3N0IGludmlzaWJsZSB0ZXh0YXJlYSxcbiAqIGFkZGluZyB0ZXh0IHRoZXJlLCB0aGVuIHJ1bm5pbmcgZXhlY0NvbW1hbmQoJ2NvcHknKS5cbiAqIEZhbGxzIGJhY2sgdG8gcHJvbXB0KCkgd2hlbiB0aGUgZWFzeSB3YXkgZmFpbHMgKGhlbGxvLCBTYWZhcmkhKVxuICogRnJvbSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8zMDgxMDMyMlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0VG9Db3B5XG4gKiBAcGFyYW0ge3N0cmluZ30gZmFsbGJhY2tTdHJpbmdcbiAqIEByZXR1cm5zIHtQcm9taXNlfVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNvcHlUb0NsaXBib2FyZCAodGV4dFRvQ29weSwgZmFsbGJhY2tTdHJpbmcpIHtcbiAgZmFsbGJhY2tTdHJpbmcgPSBmYWxsYmFja1N0cmluZyB8fCAnQ29weSB0aGUgVVJMIGJlbG93J1xuXG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgIGNvbnN0IHRleHRBcmVhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGV4dGFyZWEnKVxuICAgIHRleHRBcmVhLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCB7XG4gICAgICBwb3NpdGlvbjogJ2ZpeGVkJyxcbiAgICAgIHRvcDogMCxcbiAgICAgIGxlZnQ6IDAsXG4gICAgICB3aWR0aDogJzJlbScsXG4gICAgICBoZWlnaHQ6ICcyZW0nLFxuICAgICAgcGFkZGluZzogMCxcbiAgICAgIGJvcmRlcjogJ25vbmUnLFxuICAgICAgb3V0bGluZTogJ25vbmUnLFxuICAgICAgYm94U2hhZG93OiAnbm9uZScsXG4gICAgICBiYWNrZ3JvdW5kOiAndHJhbnNwYXJlbnQnLFxuICAgIH0pXG5cbiAgICB0ZXh0QXJlYS52YWx1ZSA9IHRleHRUb0NvcHlcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRleHRBcmVhKVxuICAgIHRleHRBcmVhLnNlbGVjdCgpXG5cbiAgICBjb25zdCBtYWdpY0NvcHlGYWlsZWQgPSAoKSA9PiB7XG4gICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKHRleHRBcmVhKVxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWFsZXJ0XG4gICAgICB3aW5kb3cucHJvbXB0KGZhbGxiYWNrU3RyaW5nLCB0ZXh0VG9Db3B5KVxuICAgICAgcmVzb2x2ZSgpXG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHN1Y2Nlc3NmdWwgPSBkb2N1bWVudC5leGVjQ29tbWFuZCgnY29weScpXG4gICAgICBpZiAoIXN1Y2Nlc3NmdWwpIHtcbiAgICAgICAgcmV0dXJuIG1hZ2ljQ29weUZhaWxlZCgnY29weSBjb21tYW5kIHVuYXZhaWxhYmxlJylcbiAgICAgIH1cbiAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQodGV4dEFyZWEpXG4gICAgICByZXR1cm4gcmVzb2x2ZSgpXG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKHRleHRBcmVhKVxuICAgICAgcmV0dXJuIG1hZ2ljQ29weUZhaWxlZChlcnIpXG4gICAgfVxuICB9KVxufVxuIiwiY29uc3QgZGVib3VuY2UgPSByZXF1aXJlKCdsb2Rhc2guZGVib3VuY2UnKVxuY29uc3QgRk9DVVNBQkxFX0VMRU1FTlRTID0gcmVxdWlyZSgnQHVwcHkvdXRpbHMvbGliL0ZPQ1VTQUJMRV9FTEVNRU5UUycpXG5jb25zdCBnZXRBY3RpdmVPdmVybGF5RWwgPSByZXF1aXJlKCcuL2dldEFjdGl2ZU92ZXJsYXlFbCcpXG5cbi8qXG4gIEZvY3VzZXMgb24gc29tZSBlbGVtZW50IGluIHRoZSBjdXJyZW50bHkgdG9wbW9zdCBvdmVybGF5LlxuXG4gIDEuIElmIHRoZXJlIGFyZSBzb21lIFtkYXRhLXVwcHktc3VwZXItZm9jdXNhYmxlXSBlbGVtZW50cyByZW5kZXJlZCBhbHJlYWR5IC0gZm9jdXNlc1xuICAgICBvbiB0aGUgZmlyc3Qgc3VwZXJmb2N1c2FibGUgZWxlbWVudCwgYW5kIGxlYXZlcyBmb2N1cyB1cCB0byB0aGUgY29udHJvbCBvZlxuICAgICBhIHVzZXIgKHVudGlsIGN1cnJlbnRseSBmb2N1c2VkIGVsZW1lbnQgZGlzYXBwZWFycyBmcm9tIHRoZSBzY3JlZW4gW3doaWNoXG4gICAgIGNhbiBoYXBwZW4gd2hlbiBvdmVybGF5IGNoYW5nZXMsIG9yLCBlLmcuLCB3aGVuIHdlIGNsaWNrIG9uIGEgZm9sZGVyIGluIGdvb2dsZWRyaXZlXSkuXG4gIDIuIElmIHRoZXJlIGFyZSBubyBbZGF0YS11cHB5LXN1cGVyLWZvY3VzYWJsZV0gZWxlbWVudHMgeWV0IChvciBldmVyKSAtIGZvY3VzZXNcbiAgICAgb24gdGhlIGZpcnN0IGZvY3VzYWJsZSBlbGVtZW50LCBidXQgc3dpdGNoZXMgZm9jdXMgaWYgc3VwZXJmb2N1c2FibGUgZWxlbWVudHMgYXBwZWFyIG9uIG5leHQgcmVuZGVyLlxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3JlYXRlU3VwZXJGb2N1cyAoKSB7XG4gIGxldCBsYXN0Rm9jdXNXYXNPblN1cGVyRm9jdXNhYmxlRWwgPSBmYWxzZVxuXG4gIGNvbnN0IHN1cGVyRm9jdXMgPSAoZGFzaGJvYXJkRWwsIGFjdGl2ZU92ZXJsYXlUeXBlKSA9PiB7XG4gICAgY29uc3Qgb3ZlcmxheUVsID0gZ2V0QWN0aXZlT3ZlcmxheUVsKGRhc2hib2FyZEVsLCBhY3RpdmVPdmVybGF5VHlwZSlcblxuICAgIGNvbnN0IGlzRm9jdXNJbk92ZXJsYXkgPSBvdmVybGF5RWwuY29udGFpbnMoZG9jdW1lbnQuYWN0aXZlRWxlbWVudClcbiAgICAvLyBJZiBmb2N1cyBpcyBhbHJlYWR5IGluIHRoZSB0b3Btb3N0IG92ZXJsYXksIEFORCBvbiBsYXN0IHVwZGF0ZSB3ZSBmb2N1c2VkIG9uIHRoZSBzdXBlcmZvY3VzYWJsZVxuICAgIC8vIGVsZW1lbnQgLSB0aGVuIGxlYXZlIGZvY3VzIHVwIHRvIHRoZSB1c2VyLlxuICAgIC8vIFtQcmFjdGljYWwgY2hlY2tdIHdpdGhvdXQgdGhpcyBsaW5lLCB0eXBpbmcgaW4gdGhlIHNlYXJjaCBpbnB1dCBpbiBnb29nbGVkcml2ZSBvdmVybGF5IHdvbid0IHdvcmsuXG4gICAgaWYgKGlzRm9jdXNJbk92ZXJsYXkgJiYgbGFzdEZvY3VzV2FzT25TdXBlckZvY3VzYWJsZUVsKSByZXR1cm5cblxuICAgIGNvbnN0IHN1cGVyRm9jdXNhYmxlRWwgPSBvdmVybGF5RWwucXVlcnlTZWxlY3RvcignW2RhdGEtdXBweS1zdXBlci1mb2N1c2FibGVdJylcbiAgICAvLyBJZiB3ZSBhcmUgYWxyZWFkeSBpbiB0aGUgdG9wbW9zdCBvdmVybGF5LCBBTkQgdGhlcmUgYXJlIG5vIHN1cGVyIGZvY3VzYWJsZSBlbGVtZW50cyB5ZXQsIC0gbGVhdmUgZm9jdXMgdXAgdG8gdGhlIHVzZXIuXG4gICAgLy8gW1ByYWN0aWNhbCBjaGVja10gd2l0aG91dCB0aGlzIGxpbmUsIGlmIHlvdSBhcmUgaW4gYW4gZW1wdHkgZm9sZGVyIGluIGdvb2dsZSBkcml2ZSwgYW5kIHNvbWV0aGluZydzIHVwbG9hZGluZyBpbiB0aGVcbiAgICAvLyBiZywgLSBmb2N1cyB3aWxsIGJlIGp1bXBpbmcgdG8gRG9uZSBhbGwgdGhlIHRpbWUuXG4gICAgaWYgKGlzRm9jdXNJbk92ZXJsYXkgJiYgIXN1cGVyRm9jdXNhYmxlRWwpIHJldHVyblxuXG4gICAgaWYgKHN1cGVyRm9jdXNhYmxlRWwpIHtcbiAgICAgIHN1cGVyRm9jdXNhYmxlRWwuZm9jdXMoeyBwcmV2ZW50U2Nyb2xsOiB0cnVlIH0pXG4gICAgICBsYXN0Rm9jdXNXYXNPblN1cGVyRm9jdXNhYmxlRWwgPSB0cnVlXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGZpcnN0RWwgPSBvdmVybGF5RWwucXVlcnlTZWxlY3RvcihGT0NVU0FCTEVfRUxFTUVOVFMpXG4gICAgICBmaXJzdEVsPy5mb2N1cyh7IHByZXZlbnRTY3JvbGw6IHRydWUgfSlcbiAgICAgIGxhc3RGb2N1c1dhc09uU3VwZXJGb2N1c2FibGVFbCA9IGZhbHNlXG4gICAgfVxuICB9XG5cbiAgLy8gX19fV2h5IGRvIHdlIG5lZWQgdG8gZGVib3VuY2U/XG4gIC8vICAgIDEuIFRvIGRlYWwgd2l0aCBhbmltYXRpb25zOiBvdmVybGF5IGNoYW5nZXMgdmlhIGFuaW1hdGlvbnMsIHdoaWNoIHJlc3VsdHMgaW4gdGhlIERPTSB1cGRhdGluZyBBRlRFUiBwbHVnaW4udXBkYXRlKClcbiAgLy8gICAgICAgYWxyZWFkeSBleGVjdXRlZC5cbiAgLy8gICAgW1ByYWN0aWNhbCBjaGVja10gd2l0aG91dCBkZWJvdW5jZSwgaWYgd2Ugb3BlbiB0aGUgVXJsIG92ZXJsYXksIGFuZCBjbGljayAnRG9uZScsIERhc2hib2FyZCB3b24ndCBnZXQgZm9jdXNlZCBhZ2Fpbi5cbiAgLy8gICAgW1ByYWN0aWNhbCBjaGVja10gaWYgd2UgZGVsYXkgMjUwbXMgaW5zdGVhZCBvZiAyNjBtcyAtIElFMTEgd29uJ3QgZ2V0IGZvY3VzZWQgaW4gc2FtZSBzaXR1YXRpb24uXG4gIC8vICAgIDIuIFBlcmZvcm1hbmNlOiB0aGVyZSBjYW4gYmUgbWFueSBzdGF0ZSB1cGRhdGUoKXMgaW4gYSBzZWNvbmQsIGFuZCB0aGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCBldmVyeSB0aW1lLlxuICByZXR1cm4gZGVib3VuY2Uoc3VwZXJGb2N1cywgMjYwKVxufVxuIiwiLyoqXG4gKiBAcmV0dXJucyB7SFRNTEVsZW1lbnR9IC0gZWl0aGVyIGRhc2hib2FyZCBlbGVtZW50LCBvciB0aGUgb3ZlcmxheSB0aGF0J3MgbW9zdCBvbiB0b3BcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXRBY3RpdmVPdmVybGF5RWwgKGRhc2hib2FyZEVsLCBhY3RpdmVPdmVybGF5VHlwZSkge1xuICBpZiAoYWN0aXZlT3ZlcmxheVR5cGUpIHtcbiAgICBjb25zdCBvdmVybGF5RWwgPSBkYXNoYm9hcmRFbC5xdWVyeVNlbGVjdG9yKGBbZGF0YS11cHB5LXBhbmVsdHlwZT1cIiR7YWN0aXZlT3ZlcmxheVR5cGV9XCJdYClcbiAgICAvLyBpZiBhbiBvdmVybGF5IGlzIGFscmVhZHkgbW91bnRlZFxuICAgIGlmIChvdmVybGF5RWwpIHJldHVybiBvdmVybGF5RWxcbiAgfVxuICByZXR1cm4gZGFzaGJvYXJkRWxcbn1cbiIsImNvbnN0IHsgaCB9ID0gcmVxdWlyZSgncHJlYWN0JylcblxuZnVuY3Rpb24gaWNvbkltYWdlICgpIHtcbiAgcmV0dXJuIChcbiAgICA8c3ZnIGFyaWEtaGlkZGVuPVwidHJ1ZVwiIGZvY3VzYWJsZT1cImZhbHNlXCIgd2lkdGg9XCIyNVwiIGhlaWdodD1cIjI1XCIgdmlld0JveD1cIjAgMCAyNSAyNVwiPlxuICAgICAgPGcgZmlsbD1cIiM2ODZERTBcIiBmaWxsUnVsZT1cImV2ZW5vZGRcIj5cbiAgICAgICAgPHBhdGggZD1cIk01IDd2MTBoMTVWN0g1em0wLTFoMTVhMSAxIDAgMCAxIDEgMXYxMGExIDEgMCAwIDEtMSAxSDVhMSAxIDAgMCAxLTEtMVY3YTEgMSAwIDAgMSAxLTF6XCIgZmlsbFJ1bGU9XCJub256ZXJvXCIgLz5cbiAgICAgICAgPHBhdGggZD1cIk02LjM1IDE3LjE3Mmw0Ljk5NC01LjAyNmEuNS41IDAgMCAxIC43MDcgMGwyLjE2IDIuMTYgMy41MDUtMy41MDVhLjUuNSAwIDAgMSAuNzA3IDBsMi4zMzYgMi4zMS0uNzA3LjcyLTEuOTgzLTEuOTctMy41MDUgMy41MDVhLjUuNSAwIDAgMS0uNzA3IDBsLTIuMTYtMi4xNTktMy45MzggMy45MzktMS40MDkuMDI2elwiIGZpbGxSdWxlPVwibm9uemVyb1wiIC8+XG4gICAgICAgIDxjaXJjbGUgY3g9XCI3LjVcIiBjeT1cIjkuNVwiIHI9XCIxLjVcIiAvPlxuICAgICAgPC9nPlxuICAgIDwvc3ZnPlxuICApXG59XG5cbmZ1bmN0aW9uIGljb25BdWRpbyAoKSB7XG4gIHJldHVybiAoXG4gICAgPHN2ZyBhcmlhLWhpZGRlbj1cInRydWVcIiBmb2N1c2FibGU9XCJmYWxzZVwiIGNsYXNzTmFtZT1cInVwcHktYy1pY29uXCIgd2lkdGg9XCIyNVwiIGhlaWdodD1cIjI1XCIgdmlld0JveD1cIjAgMCAyNSAyNVwiPlxuICAgICAgPHBhdGggZD1cIk05LjUgMTguNjRjMCAxLjE0LTEuMTQ1IDItMi41IDJzLTIuNS0uODYtMi41LTJjMC0xLjE0IDEuMTQ1LTIgMi41LTIgLjU1NyAwIDEuMDc5LjE0NSAxLjUuMzk2VjcuMjVhLjUuNSAwIDAgMSAuMzc5LS40ODVsOS0yLjI1QS41LjUgMCAwIDEgMTguNSA1djExLjY0YzAgMS4xNC0xLjE0NSAyLTIuNSAycy0yLjUtLjg2LTIuNS0yYzAtMS4xNCAxLjE0NS0yIDIuNS0yIC41NTcgMCAxLjA3OS4xNDUgMS41LjM5NlY4LjY3bC04IDJ2Ny45N3ptOC0xMXYtMmwtOCAydjJsOC0yek03IDE5LjY0Yy44NTUgMCAxLjUtLjQ4NCAxLjUtMXMtLjY0NS0xLTEuNS0xLTEuNS40ODQtMS41IDEgLjY0NSAxIDEuNSAxem05LTJjLjg1NSAwIDEuNS0uNDg0IDEuNS0xcy0uNjQ1LTEtMS41LTEtMS41LjQ4NC0xLjUgMSAuNjQ1IDEgMS41IDF6XCIgZmlsbD1cIiMwNDlCQ0ZcIiBmaWxsUnVsZT1cIm5vbnplcm9cIiAvPlxuICAgIDwvc3ZnPlxuICApXG59XG5cbmZ1bmN0aW9uIGljb25WaWRlbyAoKSB7XG4gIHJldHVybiAoXG4gICAgPHN2ZyBhcmlhLWhpZGRlbj1cInRydWVcIiBmb2N1c2FibGU9XCJmYWxzZVwiIGNsYXNzTmFtZT1cInVwcHktYy1pY29uXCIgd2lkdGg9XCIyNVwiIGhlaWdodD1cIjI1XCIgdmlld0JveD1cIjAgMCAyNSAyNVwiPlxuICAgICAgPHBhdGggZD1cIk0xNiAxMS44MzRsNC40ODYtMi42OTFBMSAxIDAgMCAxIDIyIDEwdjZhMSAxIDAgMCAxLTEuNTE0Ljg1N0wxNiAxNC4xNjdWMTdhMSAxIDAgMCAxLTEgMUg1YTEgMSAwIDAgMS0xLTFWOWExIDEgMCAwIDEgMS0xaDEwYTEgMSAwIDAgMSAxIDF2Mi44MzR6TTE1IDlINXY4aDEwVjl6bTEgNGw1IDN2LTZsLTUgM3pcIiBmaWxsPVwiIzE5QUY2N1wiIGZpbGxSdWxlPVwibm9uemVyb1wiIC8+XG4gICAgPC9zdmc+XG4gIClcbn1cblxuZnVuY3Rpb24gaWNvblBERiAoKSB7XG4gIHJldHVybiAoXG4gICAgPHN2ZyBhcmlhLWhpZGRlbj1cInRydWVcIiBmb2N1c2FibGU9XCJmYWxzZVwiIGNsYXNzTmFtZT1cInVwcHktYy1pY29uXCIgd2lkdGg9XCIyNVwiIGhlaWdodD1cIjI1XCIgdmlld0JveD1cIjAgMCAyNSAyNVwiPlxuICAgICAgPHBhdGggZD1cIk05Ljc2NiA4LjI5NWMtLjY5MS0xLjg0My0uNTM5LTMuNDAxLjc0Ny0zLjcyNiAxLjY0My0uNDE0IDIuNTA1LjkzOCAyLjM5IDMuMjk5LS4wMzkuNzktLjE5NCAxLjY2Mi0uNTM3IDMuMTQ4LjMyNC40OS42Ni45NjcgMS4wNTUgMS41MS4xNy4yMzEuMzgyLjQ4OC42MjkuNzU3IDEuODY2LS4xMjggMy42NTMuMTE0IDQuOTE4LjY1NSAxLjQ4Ny42MzUgMi4xOTIgMS42ODUgMS42MTQgMi44NC0uNTY2IDEuMTMzLTEuODM5IDEuMDg0LTMuNDE2LjI0OS0xLjE0MS0uNjA0LTIuNDU3LTEuNjM0LTMuNTEtMi43MDdhMTMuNDY3IDEzLjQ2NyAwIDAgMC0yLjIzOC40MjZjLTEuMzkyIDQuMDUxLTQuNTM0IDYuNDUzLTUuNzA3IDQuNTcyLS45ODYtMS41OCAxLjM4LTQuMjA2IDQuOTE0LTUuMzc1LjA5Ny0uMzIyLjE4NS0uNjU2LjI2NC0xLjAwMS4wOC0uMzUzLjMwNi0xLjMxLjQwNy0xLjczNy0uNjc4LTEuMDU5LTEuMi0yLjAzMS0xLjUzLTIuOTF6bTIuMDk4IDQuODdjLS4wMzMuMTQ0LS4wNjguMjg3LS4xMDQuNDI3bC4wMzMtLjAxLS4wMTIuMDM4YTE0LjA2NSAxNC4wNjUgMCAwIDEgMS4wMi0uMTk3bC0uMDMyLS4wMzMuMDUyLS4wMDRhNy45MDIgNy45MDIgMCAwIDEtLjIwOC0uMjcxYy0uMTk3LS4yNy0uMzgtLjUyNi0uNTU1LS43NzVsLS4wMDYuMDI4LS4wMDItLjAwM2MtLjA3Ni4zMjMtLjE0OC42MzItLjE4Ni44em01Ljc3IDIuOTc4YzEuMTQzLjYwNSAxLjgzMi42MzIgMi4wNTQuMTg3LjI2LS41MTktLjA4Ny0xLjAzNC0xLjExMy0xLjQ3My0uOTExLS4zOS0yLjE3NS0uNjA4LTMuNTUtLjYwOC44NDUuNzY2IDEuNzg3IDEuNDU5IDIuNjA5IDEuODk0ek02LjU1OSAxOC43ODljLjE0LjIyMy42OTMuMTYgMS40MjUtLjQxMy44MjctLjY0OCAxLjYxLTEuNzQ3IDIuMjA4LTMuMjA2LTIuNTYzIDEuMDY0LTQuMTAyIDIuODY3LTMuNjMzIDMuNjJ6bTUuMzQ1LTEwLjk3Yy4wODgtMS43OTMtLjM1MS0yLjQ4LTEuMTQ2LTIuMjgtLjQ3My4xMTktLjU2NCAxLjA1LS4wNTYgMi40MDUuMjEzLjU2Ni41MiAxLjE4OC45MDggMS44NTkuMTgtLjg1OC4yNjgtMS40NTMuMjk0LTEuOTg0elwiIGZpbGw9XCIjRTI1MTRBXCIgZmlsbFJ1bGU9XCJub256ZXJvXCIgLz5cbiAgICA8L3N2Zz5cbiAgKVxufVxuXG5mdW5jdGlvbiBpY29uQXJjaGl2ZSAoKSB7XG4gIHJldHVybiAoXG4gICAgPHN2ZyBhcmlhLWhpZGRlbj1cInRydWVcIiBmb2N1c2FibGU9XCJmYWxzZVwiIHdpZHRoPVwiMjVcIiBoZWlnaHQ9XCIyNVwiIHZpZXdCb3g9XCIwIDAgMjUgMjVcIj5cbiAgICAgIDxwYXRoIGQ9XCJNMTAuNDUgMi4wNWgxLjA1YS41LjUgMCAwIDEgLjUuNXYuMDI0YS41LjUgMCAwIDEtLjUuNWgtMS4wNWEuNS41IDAgMCAxLS41LS41VjIuNTVhLjUuNSAwIDAgMSAuNS0uNXptMi4wNSAxLjAyNGgxLjA1YS41LjUgMCAwIDEgLjUuNVYzLjZhLjUuNSAwIDAgMS0uNS41SDEyLjVhLjUuNSAwIDAgMS0uNS0uNXYtLjAyNWEuNS41IDAgMCAxIC41LS41di0uMDAxek0xMC40NSAwaDEuMDVhLjUuNSAwIDAgMSAuNS41di4wMjVhLjUuNSAwIDAgMS0uNS41aC0xLjA1YS41LjUgMCAwIDEtLjUtLjVWLjVhLjUuNSAwIDAgMSAuNS0uNXptMi4wNSAxLjAyNWgxLjA1YS41LjUgMCAwIDEgLjUuNXYuMDI0YS41LjUgMCAwIDEtLjUuNUgxMi41YS41LjUgMCAwIDEtLjUtLjV2LS4wMjRhLjUuNSAwIDAgMSAuNS0uNXptLTIuMDUgMy4wNzRoMS4wNWEuNS41IDAgMCAxIC41LjV2LjAyNWEuNS41IDAgMCAxLS41LjVoLTEuMDVhLjUuNSAwIDAgMS0uNS0uNXYtLjAyNWEuNS41IDAgMCAxIC41LS41em0yLjA1IDEuMDI1aDEuMDVhLjUuNSAwIDAgMSAuNS41di4wMjRhLjUuNSAwIDAgMS0uNS41SDEyLjVhLjUuNSAwIDAgMS0uNS0uNXYtLjAyNGEuNS41IDAgMCAxIC41LS41em0tMi4wNSAxLjAyNGgxLjA1YS41LjUgMCAwIDEgLjUuNXYuMDI1YS41LjUgMCAwIDEtLjUuNWgtMS4wNWEuNS41IDAgMCAxLS41LS41di0uMDI1YS41LjUgMCAwIDEgLjUtLjV6bTIuMDUgMS4wMjVoMS4wNWEuNS41IDAgMCAxIC41LjV2LjAyNWEuNS41IDAgMCAxLS41LjVIMTIuNWEuNS41IDAgMCAxLS41LS41di0uMDI1YS41LjUgMCAwIDEgLjUtLjV6bS0yLjA1IDEuMDI1aDEuMDVhLjUuNSAwIDAgMSAuNS41di4wMjVhLjUuNSAwIDAgMS0uNS41aC0xLjA1YS41LjUgMCAwIDEtLjUtLjV2LS4wMjVhLjUuNSAwIDAgMSAuNS0uNXptMi4wNSAxLjAyNWgxLjA1YS41LjUgMCAwIDEgLjUuNXYuMDI0YS41LjUgMCAwIDEtLjUuNUgxMi41YS41LjUgMCAwIDEtLjUtLjV2LS4wMjRhLjUuNSAwIDAgMSAuNS0uNXptLTEuNjU2IDMuMDc0bC0uODIgNS45NDZjLjUyLjMwMiAxLjE3NC40NTggMS45NzYuNDU4LjgwMyAwIDEuNDU1LS4xNTYgMS45NzUtLjQ1OGwtLjgyLTUuOTQ2aC0yLjMxMXptMC0xLjAyNWgyLjMxMmMuNTEyIDAgLjk0Ni4zNzggMS4wMTUuODg1bC44MiA1Ljk0NmMuMDU2LjQxMi0uMTQyLjgxNy0uNTAxIDEuMDI2LS42ODYuMzk4LTEuNTE1LjU5Ny0yLjQ5LjU5Ny0uOTc0IDAtMS44MDQtLjE5OS0yLjQ5LS41OTdhMS4wMjUgMS4wMjUgMCAwIDEtLjUtMS4wMjZsLjgxOS01Ljk0NmMuMDctLjUwNy41MDMtLjg4NSAxLjAxNS0uODg1em0uNTQ1IDYuNmEuNS41IDAgMCAxLS4zOTctLjU2MWwuMTQzLS45OTlhLjUuNSAwIDAgMSAuNDk1LS40MjloLjc0YS41LjUgMCAwIDEgLjQ5NS40M2wuMTQzLjk5OGEuNS41IDAgMCAxLS4zOTcuNTYxYy0uNDA0LjA4LS44MTkuMDgtMS4yMjIgMHpcIiBmaWxsPVwiIzAwQzQ2OVwiIGZpbGxSdWxlPVwibm9uemVyb1wiIC8+XG4gICAgPC9zdmc+XG4gIClcbn1cblxuZnVuY3Rpb24gaWNvbkZpbGUgKCkge1xuICByZXR1cm4gKFxuICAgIDxzdmcgYXJpYS1oaWRkZW49XCJ0cnVlXCIgZm9jdXNhYmxlPVwiZmFsc2VcIiBjbGFzc05hbWU9XCJ1cHB5LWMtaWNvblwiIHdpZHRoPVwiMjVcIiBoZWlnaHQ9XCIyNVwiIHZpZXdCb3g9XCIwIDAgMjUgMjVcIj5cbiAgICAgIDxnIGZpbGw9XCIjQTdBRkI3XCIgZmlsbFJ1bGU9XCJub256ZXJvXCI+XG4gICAgICAgIDxwYXRoIGQ9XCJNNS41IDIyYS41LjUgMCAwIDEtLjUtLjV2LTE4YS41LjUgMCAwIDEgLjUtLjVoMTAuNzE5YS41LjUgMCAwIDEgLjM2Ny4xNmwzLjI4MSAzLjU1NmEuNS41IDAgMCAxIC4xMzMuMzM5VjIxLjVhLjUuNSAwIDAgMS0uNS41aC0xNHptLjUtMWgxM1Y3LjI1TDE2IDRINnYxN3pcIiAvPlxuICAgICAgICA8cGF0aCBkPVwiTTE1IDR2M2ExIDEgMCAwIDAgMSAxaDNWN2gtM1Y0aC0xelwiIC8+XG4gICAgICA8L2c+XG4gICAgPC9zdmc+XG4gIClcbn1cblxuZnVuY3Rpb24gaWNvblRleHQgKCkge1xuICByZXR1cm4gKFxuICAgIDxzdmcgYXJpYS1oaWRkZW49XCJ0cnVlXCIgZm9jdXNhYmxlPVwiZmFsc2VcIiBjbGFzc05hbWU9XCJ1cHB5LWMtaWNvblwiIHdpZHRoPVwiMjVcIiBoZWlnaHQ9XCIyNVwiIHZpZXdCb3g9XCIwIDAgMjUgMjVcIj5cbiAgICAgIDxwYXRoIGQ9XCJNNC41IDdoMTNhLjUuNSAwIDEgMSAwIDFoLTEzYS41LjUgMCAwIDEgMC0xem0wIDNoMTVhLjUuNSAwIDEgMSAwIDFoLTE1YS41LjUgMCAxIDEgMC0xem0wIDNoMTVhLjUuNSAwIDEgMSAwIDFoLTE1YS41LjUgMCAxIDEgMC0xem0wIDNoMTBhLjUuNSAwIDEgMSAwIDFoLTEwYS41LjUgMCAxIDEgMC0xelwiIGZpbGw9XCIjNUE1RTY5XCIgZmlsbFJ1bGU9XCJub256ZXJvXCIgLz5cbiAgICA8L3N2Zz5cbiAgKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldEljb25CeU1pbWUgKGZpbGVUeXBlKSB7XG4gIGNvbnN0IGRlZmF1bHRDaG9pY2UgPSB7XG4gICAgY29sb3I6ICcjODM4OTk5JyxcbiAgICBpY29uOiBpY29uRmlsZSgpLFxuICB9XG5cbiAgaWYgKCFmaWxlVHlwZSkgcmV0dXJuIGRlZmF1bHRDaG9pY2VcblxuICBjb25zdCBmaWxlVHlwZUdlbmVyYWwgPSBmaWxlVHlwZS5zcGxpdCgnLycpWzBdXG4gIGNvbnN0IGZpbGVUeXBlU3BlY2lmaWMgPSBmaWxlVHlwZS5zcGxpdCgnLycpWzFdXG5cbiAgLy8gVGV4dFxuICBpZiAoZmlsZVR5cGVHZW5lcmFsID09PSAndGV4dCcpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY29sb3I6ICcjNWE1ZTY5JyxcbiAgICAgIGljb246IGljb25UZXh0KCksXG4gICAgfVxuICB9XG5cbiAgLy8gSW1hZ2VcbiAgaWYgKGZpbGVUeXBlR2VuZXJhbCA9PT0gJ2ltYWdlJykge1xuICAgIHJldHVybiB7XG4gICAgICBjb2xvcjogJyM2ODZkZTAnLFxuICAgICAgaWNvbjogaWNvbkltYWdlKCksXG4gICAgfVxuICB9XG5cbiAgLy8gQXVkaW9cbiAgaWYgKGZpbGVUeXBlR2VuZXJhbCA9PT0gJ2F1ZGlvJykge1xuICAgIHJldHVybiB7XG4gICAgICBjb2xvcjogJyMwNjhkYmInLFxuICAgICAgaWNvbjogaWNvbkF1ZGlvKCksXG4gICAgfVxuICB9XG5cbiAgLy8gVmlkZW9cbiAgaWYgKGZpbGVUeXBlR2VuZXJhbCA9PT0gJ3ZpZGVvJykge1xuICAgIHJldHVybiB7XG4gICAgICBjb2xvcjogJyMxOWFmNjcnLFxuICAgICAgaWNvbjogaWNvblZpZGVvKCksXG4gICAgfVxuICB9XG5cbiAgLy8gUERGXG4gIGlmIChmaWxlVHlwZUdlbmVyYWwgPT09ICdhcHBsaWNhdGlvbicgJiYgZmlsZVR5cGVTcGVjaWZpYyA9PT0gJ3BkZicpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY29sb3I6ICcjZTI1MTQ5JyxcbiAgICAgIGljb246IGljb25QREYoKSxcbiAgICB9XG4gIH1cblxuICAvLyBBcmNoaXZlXG4gIGNvbnN0IGFyY2hpdmVUeXBlcyA9IFsnemlwJywgJ3gtN3otY29tcHJlc3NlZCcsICd4LXJhci1jb21wcmVzc2VkJywgJ3gtdGFyJywgJ3gtZ3ppcCcsICd4LWFwcGxlLWRpc2tpbWFnZSddXG4gIGlmIChmaWxlVHlwZUdlbmVyYWwgPT09ICdhcHBsaWNhdGlvbicgJiYgYXJjaGl2ZVR5cGVzLmluZGV4T2YoZmlsZVR5cGVTcGVjaWZpYykgIT09IC0xKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbG9yOiAnIzAwQzQ2OScsXG4gICAgICBpY29uOiBpY29uQXJjaGl2ZSgpLFxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBkZWZhdWx0Q2hvaWNlXG59XG4iLCIvLyBpZ25vcmUgZHJvcC9wYXN0ZSBldmVudHMgaWYgdGhleSBhcmUgbm90IGluIGlucHV0IG9yIHRleHRhcmVhIOKAlFxuLy8gb3RoZXJ3aXNlIHdoZW4gVXJsIHBsdWdpbiBhZGRzIGRyb3AvcGFzdGUgbGlzdGVuZXJzIHRvIHRoaXMuZWwsXG4vLyBkcmFnaW5nIFVJIGVsZW1lbnRzIG9yIHBhc3RpbmcgYW55dGhpbmcgaW50byBhbnkgZmllbGQgdHJpZ2dlcnMgdGhvc2UgZXZlbnRzIOKAlFxuLy8gVXJsIHRyZWF0cyB0aGVtIGFzIFVSTHMgdGhhdCBuZWVkIHRvIGJlIGltcG9ydGVkXG5cbmZ1bmN0aW9uIGlnbm9yZUV2ZW50IChldikge1xuICBjb25zdCB7IHRhZ05hbWUgfSA9IGV2LnRhcmdldFxuICBpZiAodGFnTmFtZSA9PT0gJ0lOUFVUJ1xuICAgICAgfHwgdGFnTmFtZSA9PT0gJ1RFWFRBUkVBJykge1xuICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpXG4gICAgcmV0dXJuXG4gIH1cbiAgZXYucHJldmVudERlZmF1bHQoKVxuICBldi5zdG9wUHJvcGFnYXRpb24oKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlnbm9yZUV2ZW50XG4iLCJjb25zdCB0b0FycmF5ID0gcmVxdWlyZSgnQHVwcHkvdXRpbHMvbGliL3RvQXJyYXknKVxuY29uc3QgRk9DVVNBQkxFX0VMRU1FTlRTID0gcmVxdWlyZSgnQHVwcHkvdXRpbHMvbGliL0ZPQ1VTQUJMRV9FTEVNRU5UUycpXG5jb25zdCBnZXRBY3RpdmVPdmVybGF5RWwgPSByZXF1aXJlKCcuL2dldEFjdGl2ZU92ZXJsYXlFbCcpXG5cbmZ1bmN0aW9uIGZvY3VzT25GaXJzdE5vZGUgKGV2ZW50LCBub2Rlcykge1xuICBjb25zdCBub2RlID0gbm9kZXNbMF1cbiAgaWYgKG5vZGUpIHtcbiAgICBub2RlLmZvY3VzKClcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gIH1cbn1cblxuZnVuY3Rpb24gZm9jdXNPbkxhc3ROb2RlIChldmVudCwgbm9kZXMpIHtcbiAgY29uc3Qgbm9kZSA9IG5vZGVzW25vZGVzLmxlbmd0aCAtIDFdXG4gIGlmIChub2RlKSB7XG4gICAgbm9kZS5mb2N1cygpXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICB9XG59XG5cbi8vIF9fX1doeSBub3QganVzdCB1c2UgKGZvY3VzZWRJdGVtSW5kZXggPT09IC0xKT9cbi8vICAgIEZpcmVmb3ggdGhpbmtzIDx1bD4gaXMgZm9jdXNhYmxlLCBidXQgd2UgZG9uJ3QgaGF2ZSA8dWw+cyBpbiBvdXIgRk9DVVNBQkxFX0VMRU1FTlRTLiBXaGljaCBtZWFucyB0aGF0IGlmIHdlIHRhYiBpbnRvXG4vLyAgICB0aGUgPHVsPiwgY29kZSB3aWxsIHRoaW5rIHRoYXQgd2UgYXJlIG5vdCBpbiB0aGUgYWN0aXZlIG92ZXJsYXksIGFuZCB3ZSBzaG91bGQgZm9jdXNPbkZpcnN0Tm9kZSgpIG9mIHRoZSBjdXJyZW50bHlcbi8vICAgIGFjdGl2ZSBvdmVybGF5IVxuLy8gICAgW1ByYWN0aWNhbCBjaGVja10gaWYgd2UgdXNlIChmb2N1c2VkSXRlbUluZGV4ID09PSAtMSksIGluc3RhZ3JhbSBwcm92aWRlciBpbiBmaXJlZm94IHdpbGwgbmV2ZXIgZ2V0IGZvY3VzIG9uIGl0cyBwaWNzXG4vLyAgICBpbiB0aGUgPHVsPi5cbmZ1bmN0aW9uIGlzRm9jdXNJbk92ZXJsYXkgKGFjdGl2ZU92ZXJsYXlFbCkge1xuICByZXR1cm4gYWN0aXZlT3ZlcmxheUVsLmNvbnRhaW5zKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpXG59XG5cbmZ1bmN0aW9uIHRyYXBGb2N1cyAoZXZlbnQsIGFjdGl2ZU92ZXJsYXlUeXBlLCBkYXNoYm9hcmRFbCkge1xuICBjb25zdCBhY3RpdmVPdmVybGF5RWwgPSBnZXRBY3RpdmVPdmVybGF5RWwoZGFzaGJvYXJkRWwsIGFjdGl2ZU92ZXJsYXlUeXBlKVxuICBjb25zdCBmb2N1c2FibGVOb2RlcyA9IHRvQXJyYXkoYWN0aXZlT3ZlcmxheUVsLnF1ZXJ5U2VsZWN0b3JBbGwoRk9DVVNBQkxFX0VMRU1FTlRTKSlcblxuICBjb25zdCBmb2N1c2VkSXRlbUluZGV4ID0gZm9jdXNhYmxlTm9kZXMuaW5kZXhPZihkb2N1bWVudC5hY3RpdmVFbGVtZW50KVxuXG4gIC8vIElmIHdlIHByZXNzZWQgdGFiLCBhbmQgZm9jdXMgaXMgbm90IHlldCB3aXRoaW4gdGhlIGN1cnJlbnQgb3ZlcmxheSAtIGZvY3VzIG9uXG4gIC8vIHRoZSBmaXJzdCBlbGVtZW50IHdpdGhpbiB0aGUgY3VycmVudCBvdmVybGF5LlxuICAvLyBUaGlzIGlzIGEgc2FmZXR5IG1lYXN1cmUgKGZvciB3aGVuIHVzZXIgcmV0dXJucyBmcm9tIGFub3RoZXIgdGFiIGUuZy4pLCBtb3N0XG4gIC8vIHBsdWdpbnMgd2lsbCB0cnkgdG8gZm9jdXMgb24gc29tZSBpbXBvcnRhbnQgZWxlbWVudCBhcyBpdCBsb2Fkcy5cbiAgaWYgKCFpc0ZvY3VzSW5PdmVybGF5KGFjdGl2ZU92ZXJsYXlFbCkpIHtcbiAgICBmb2N1c09uRmlyc3ROb2RlKGV2ZW50LCBmb2N1c2FibGVOb2RlcylcbiAgLy8gSWYgd2UgcHJlc3NlZCBzaGlmdCArIHRhYiwgYW5kIHdlJ3JlIG9uIHRoZSBmaXJzdCBlbGVtZW50IG9mIGEgbW9kYWxcbiAgfSBlbHNlIGlmIChldmVudC5zaGlmdEtleSAmJiBmb2N1c2VkSXRlbUluZGV4ID09PSAwKSB7XG4gICAgZm9jdXNPbkxhc3ROb2RlKGV2ZW50LCBmb2N1c2FibGVOb2RlcylcbiAgLy8gSWYgd2UgcHJlc3NlZCB0YWIsIGFuZCB3ZSdyZSBvbiB0aGUgbGFzdCBlbGVtZW50IG9mIHRoZSBtb2RhbFxuICB9IGVsc2UgaWYgKCFldmVudC5zaGlmdEtleSAmJiBmb2N1c2VkSXRlbUluZGV4ID09PSBmb2N1c2FibGVOb2Rlcy5sZW5ndGggLSAxKSB7XG4gICAgZm9jdXNPbkZpcnN0Tm9kZShldmVudCwgZm9jdXNhYmxlTm9kZXMpXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIFRyYXBzIGZvY3VzIGluc2lkZSBvZiB0aGUgY3VycmVudGx5IG9wZW4gb3ZlcmxheSAoZS5nLiBEYXNoYm9hcmQsIG9yIGUuZy4gSW5zdGFncmFtKSxcbiAgLy8gbmV2ZXIgbGV0cyBmb2N1cyBkaXNhcHBlYXIgZnJvbSB0aGUgbW9kYWwuXG4gIGZvck1vZGFsOiAoZXZlbnQsIGFjdGl2ZU92ZXJsYXlUeXBlLCBkYXNoYm9hcmRFbCkgPT4ge1xuICAgIHRyYXBGb2N1cyhldmVudCwgYWN0aXZlT3ZlcmxheVR5cGUsIGRhc2hib2FyZEVsKVxuICB9LFxuXG4gIC8vIFRyYXBzIGZvY3VzIGluc2lkZSBvZiB0aGUgY3VycmVudGx5IG9wZW4gb3ZlcmxheSwgdW5sZXNzIG92ZXJsYXkgaXMgbnVsbCAtIHRoZW4gbGV0IHRoZSB1c2VyIHRhYiBhd2F5LlxuICBmb3JJbmxpbmU6IChldmVudCwgYWN0aXZlT3ZlcmxheVR5cGUsIGRhc2hib2FyZEVsKSA9PiB7XG4gICAgLy8gX19fV2hlbiB3ZSdyZSBpbiB0aGUgYmFyZSAnRHJvcCBmaWxlcyBoZXJlLCBwYXN0ZSwgYnJvd3NlIG9yIGltcG9ydCBmcm9tJyBzY3JlZW5cbiAgICBpZiAoYWN0aXZlT3ZlcmxheVR5cGUgPT09IG51bGwpIHtcbiAgICAgIC8vIERvIG5vdGhpbmcgYW5kIGxldCB0aGUgYnJvd3NlciBoYW5kbGUgaXQsIHVzZXIgY2FuIHRhYiBhd2F5IGZyb20gVXBweSB0byBvdGhlciBlbGVtZW50cyBvbiB0aGUgcGFnZVxuICAgIC8vIF9fX1doZW4gdGhlcmUgaXMgc29tZSBvdmVybGF5IHdpdGggJ0RvbmUnIGJ1dHRvblxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBUcmFwIHRoZSBmb2N1cyBpbnNpZGUgdGhpcyBvdmVybGF5IVxuICAgICAgLy8gVXNlciBjYW4gY2xvc2UgdGhlIG92ZXJsYXkgKGNsaWNrICdEb25lJykgaWYgdGhleSB3YW50IHRvIHRyYXZlbCBhd2F5IGZyb20gVXBweS5cbiAgICAgIHRyYXBGb2N1cyhldmVudCwgYWN0aXZlT3ZlcmxheVR5cGUsIGRhc2hib2FyZEVsKVxuICAgIH1cbiAgfSxcbn1cbiIsImNvbnN0IHsgVUlQbHVnaW4gfSA9IHJlcXVpcmUoJ0B1cHB5L2NvcmUnKVxuY29uc3QgeyBQcm92aWRlciB9ID0gcmVxdWlyZSgnQHVwcHkvY29tcGFuaW9uLWNsaWVudCcpXG5jb25zdCB7IFByb3ZpZGVyVmlld3MgfSA9IHJlcXVpcmUoJ0B1cHB5L3Byb3ZpZGVyLXZpZXdzJylcbmNvbnN0IHsgaCB9ID0gcmVxdWlyZSgncHJlYWN0JylcblxuY29uc3QgbG9jYWxlID0gcmVxdWlyZSgnLi9sb2NhbGUnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNsYXNzIERyb3Bib3ggZXh0ZW5kcyBVSVBsdWdpbiB7XG4gIHN0YXRpYyBWRVJTSU9OID0gcmVxdWlyZSgnLi4vcGFja2FnZS5qc29uJykudmVyc2lvblxuXG4gIGNvbnN0cnVjdG9yICh1cHB5LCBvcHRzKSB7XG4gICAgc3VwZXIodXBweSwgb3B0cylcbiAgICB0aGlzLmlkID0gdGhpcy5vcHRzLmlkIHx8ICdEcm9wYm94J1xuICAgIFByb3ZpZGVyLmluaXRQbHVnaW4odGhpcywgb3B0cylcbiAgICB0aGlzLnRpdGxlID0gdGhpcy5vcHRzLnRpdGxlIHx8ICdEcm9wYm94J1xuICAgIHRoaXMuaWNvbiA9ICgpID0+IChcbiAgICAgIDxzdmcgYXJpYS1oaWRkZW49XCJ0cnVlXCIgZm9jdXNhYmxlPVwiZmFsc2VcIiB3aWR0aD1cIjMyXCIgaGVpZ2h0PVwiMzJcIiB2aWV3Qm94PVwiMCAwIDMyIDMyXCI+XG4gICAgICAgIDxnIGZpbGw9XCJub25lXCIgZmlsbFJ1bGU9XCJldmVub2RkXCI+XG4gICAgICAgICAgPHJlY3QgY2xhc3NOYW1lPVwidXBweS1Qcm92aWRlckljb25CZ1wiIGZpbGw9XCIjMEQyNDgxXCIgd2lkdGg9XCIzMlwiIGhlaWdodD1cIjMyXCIgcng9XCIxNlwiIC8+XG4gICAgICAgICAgPHBhdGggZD1cIk0xMSA4bDUgMy4xODUtNSAzLjE4Ni01LTMuMTg2TDExIDh6bTEwIDBsNSAzLjE4NS01IDMuMTg2LTUtMy4xODZMMjEgOHpNNiAxNy41NTZsNS0zLjE4NSA1IDMuMTg1LTUgMy4xODYtNS0zLjE4NnptMTUtMy4xODVsNSAzLjE4NS01IDMuMTg2LTUtMy4xODYgNS0zLjE4NXptLTEwIDcuNDMybDUtMy4xODUgNSAzLjE4NS01IDMuMTg2LTUtMy4xODZ6XCIgZmlsbD1cIiNGRkZcIiBmaWxsUnVsZT1cIm5vbnplcm9cIiAvPlxuICAgICAgICA8L2c+XG4gICAgICA8L3N2Zz5cbiAgICApXG5cbiAgICB0aGlzLnByb3ZpZGVyID0gbmV3IFByb3ZpZGVyKHVwcHksIHtcbiAgICAgIGNvbXBhbmlvblVybDogdGhpcy5vcHRzLmNvbXBhbmlvblVybCxcbiAgICAgIGNvbXBhbmlvbkhlYWRlcnM6IHRoaXMub3B0cy5jb21wYW5pb25IZWFkZXJzLFxuICAgICAgY29tcGFuaW9uS2V5c1BhcmFtczogdGhpcy5vcHRzLmNvbXBhbmlvbktleXNQYXJhbXMsXG4gICAgICBjb21wYW5pb25Db29raWVzUnVsZTogdGhpcy5vcHRzLmNvbXBhbmlvbkNvb2tpZXNSdWxlLFxuICAgICAgcHJvdmlkZXI6ICdkcm9wYm94JyxcbiAgICAgIHBsdWdpbklkOiB0aGlzLmlkLFxuICAgIH0pXG5cbiAgICB0aGlzLmRlZmF1bHRMb2NhbGUgPSBsb2NhbGVcblxuICAgIHRoaXMuaTE4bkluaXQoKVxuICAgIHRoaXMudGl0bGUgPSB0aGlzLmkxOG4oJ3BsdWdpbk5hbWVEcm9wYm94JylcblxuICAgIHRoaXMub25GaXJzdFJlbmRlciA9IHRoaXMub25GaXJzdFJlbmRlci5iaW5kKHRoaXMpXG4gICAgdGhpcy5yZW5kZXIgPSB0aGlzLnJlbmRlci5iaW5kKHRoaXMpXG4gIH1cblxuICBpbnN0YWxsICgpIHtcbiAgICB0aGlzLnZpZXcgPSBuZXcgUHJvdmlkZXJWaWV3cyh0aGlzLCB7XG4gICAgICBwcm92aWRlcjogdGhpcy5wcm92aWRlcixcbiAgICB9KVxuXG4gICAgY29uc3QgeyB0YXJnZXQgfSA9IHRoaXMub3B0c1xuICAgIGlmICh0YXJnZXQpIHtcbiAgICAgIHRoaXMubW91bnQodGFyZ2V0LCB0aGlzKVxuICAgIH1cbiAgfVxuXG4gIHVuaW5zdGFsbCAoKSB7XG4gICAgdGhpcy52aWV3LnRlYXJEb3duKClcbiAgICB0aGlzLnVubW91bnQoKVxuICB9XG5cbiAgb25GaXJzdFJlbmRlciAoKSB7XG4gICAgcmV0dXJuIFByb21pc2UuYWxsKFtcbiAgICAgIHRoaXMucHJvdmlkZXIuZmV0Y2hQcmVBdXRoVG9rZW4oKSxcbiAgICAgIHRoaXMudmlldy5nZXRGb2xkZXIoKSxcbiAgICBdKVxuICB9XG5cbiAgcmVuZGVyIChzdGF0ZSkge1xuICAgIHJldHVybiB0aGlzLnZpZXcucmVuZGVyKHN0YXRlKVxuICB9XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgc3RyaW5nczoge1xuICAgIHBsdWdpbk5hbWVEcm9wYm94OiAnRHJvcGJveCcsXG4gIH0sXG59XG4iLCJjb25zdCB7IFVJUGx1Z2luIH0gPSByZXF1aXJlKCdAdXBweS9jb3JlJylcbmNvbnN0IHsgUHJvdmlkZXIgfSA9IHJlcXVpcmUoJ0B1cHB5L2NvbXBhbmlvbi1jbGllbnQnKVxuY29uc3QgeyBQcm92aWRlclZpZXdzIH0gPSByZXF1aXJlKCdAdXBweS9wcm92aWRlci12aWV3cycpXG5jb25zdCB7IGggfSA9IHJlcXVpcmUoJ3ByZWFjdCcpXG5cbmNvbnN0IGxvY2FsZSA9IHJlcXVpcmUoJy4vbG9jYWxlLmpzJylcblxubW9kdWxlLmV4cG9ydHMgPSBjbGFzcyBGYWNlYm9vayBleHRlbmRzIFVJUGx1Z2luIHtcbiAgc3RhdGljIFZFUlNJT04gPSByZXF1aXJlKCcuLi9wYWNrYWdlLmpzb24nKS52ZXJzaW9uXG5cbiAgY29uc3RydWN0b3IgKHVwcHksIG9wdHMpIHtcbiAgICBzdXBlcih1cHB5LCBvcHRzKVxuICAgIHRoaXMuaWQgPSB0aGlzLm9wdHMuaWQgfHwgJ0ZhY2Vib29rJ1xuICAgIFByb3ZpZGVyLmluaXRQbHVnaW4odGhpcywgb3B0cylcbiAgICB0aGlzLnRpdGxlID0gdGhpcy5vcHRzLnRpdGxlIHx8ICdGYWNlYm9vaydcbiAgICB0aGlzLmljb24gPSAoKSA9PiAoXG4gICAgICA8c3ZnIGFyaWEtaGlkZGVuPVwidHJ1ZVwiIGZvY3VzYWJsZT1cImZhbHNlXCIgd2lkdGg9XCIzMlwiIGhlaWdodD1cIjMyXCIgdmlld0JveD1cIjAgMCAzMiAzMlwiPlxuICAgICAgICA8ZyBmaWxsPVwibm9uZVwiIGZpbGxSdWxlPVwiZXZlbm9kZFwiPlxuICAgICAgICAgIDxyZWN0IGNsYXNzTmFtZT1cInVwcHktUHJvdmlkZXJJY29uQmdcIiB3aWR0aD1cIjMyXCIgaGVpZ2h0PVwiMzJcIiByeD1cIjE2XCIgZmlsbD1cIiMzQzVBOTlcIiAvPlxuICAgICAgICAgIDxwYXRoIGQ9XCJNMTcuODQyIDI2di04LjY2N2gyLjY1M2wuMzk4LTMuMzc3aC0zLjA1MXYtMi4xNTdjMC0uOTc4LjI0OC0xLjY0NCAxLjUyNy0xLjY0NEgyMVY3LjEzMkExOS45MTQgMTkuOTE0IDAgMCAwIDE4LjYyMyA3Yy0yLjM1MiAwLTMuOTYzIDEuNTc0LTMuOTYzIDQuNDY1djIuNDlIMTJ2My4zNzhoMi42NlYyNmgzLjE4MnpcIiBmaWxsPVwiI0ZGRlwiIGZpbGxSdWxlPVwibm9uemVyb1wiIC8+XG4gICAgICAgIDwvZz5cbiAgICAgIDwvc3ZnPlxuICAgIClcblxuICAgIHRoaXMucHJvdmlkZXIgPSBuZXcgUHJvdmlkZXIodXBweSwge1xuICAgICAgY29tcGFuaW9uVXJsOiB0aGlzLm9wdHMuY29tcGFuaW9uVXJsLFxuICAgICAgY29tcGFuaW9uSGVhZGVyczogdGhpcy5vcHRzLmNvbXBhbmlvbkhlYWRlcnMsXG4gICAgICBjb21wYW5pb25LZXlzUGFyYW1zOiB0aGlzLm9wdHMuY29tcGFuaW9uS2V5c1BhcmFtcyxcbiAgICAgIGNvbXBhbmlvbkNvb2tpZXNSdWxlOiB0aGlzLm9wdHMuY29tcGFuaW9uQ29va2llc1J1bGUsXG4gICAgICBwcm92aWRlcjogJ2ZhY2Vib29rJyxcbiAgICAgIHBsdWdpbklkOiB0aGlzLmlkLFxuICAgIH0pXG5cbiAgICB0aGlzLmRlZmF1bHRMb2NhbGUgPSBsb2NhbGVcblxuICAgIHRoaXMuaTE4bkluaXQoKVxuICAgIHRoaXMudGl0bGUgPSB0aGlzLmkxOG4oJ3BsdWdpbk5hbWVGYWNlYm9vaycpXG5cbiAgICB0aGlzLm9uRmlyc3RSZW5kZXIgPSB0aGlzLm9uRmlyc3RSZW5kZXIuYmluZCh0aGlzKVxuICAgIHRoaXMucmVuZGVyID0gdGhpcy5yZW5kZXIuYmluZCh0aGlzKVxuICB9XG5cbiAgaW5zdGFsbCAoKSB7XG4gICAgdGhpcy52aWV3ID0gbmV3IFByb3ZpZGVyVmlld3ModGhpcywge1xuICAgICAgcHJvdmlkZXI6IHRoaXMucHJvdmlkZXIsXG4gICAgfSlcblxuICAgIGNvbnN0IHsgdGFyZ2V0IH0gPSB0aGlzLm9wdHNcbiAgICBpZiAodGFyZ2V0KSB7XG4gICAgICB0aGlzLm1vdW50KHRhcmdldCwgdGhpcylcbiAgICB9XG4gIH1cblxuICB1bmluc3RhbGwgKCkge1xuICAgIHRoaXMudmlldy50ZWFyRG93bigpXG4gICAgdGhpcy51bm1vdW50KClcbiAgfVxuXG4gIG9uRmlyc3RSZW5kZXIgKCkge1xuICAgIHJldHVybiBQcm9taXNlLmFsbChbXG4gICAgICB0aGlzLnByb3ZpZGVyLmZldGNoUHJlQXV0aFRva2VuKCksXG4gICAgICB0aGlzLnZpZXcuZ2V0Rm9sZGVyKCksXG4gICAgXSlcbiAgfVxuXG4gIHJlbmRlciAoc3RhdGUpIHtcbiAgICBjb25zdCB2aWV3T3B0aW9ucyA9IHt9XG4gICAgaWYgKHRoaXMuZ2V0UGx1Z2luU3RhdGUoKS5maWxlcy5sZW5ndGggJiYgIXRoaXMuZ2V0UGx1Z2luU3RhdGUoKS5mb2xkZXJzLmxlbmd0aCkge1xuICAgICAgdmlld09wdGlvbnMudmlld1R5cGUgPSAnZ3JpZCdcbiAgICAgIHZpZXdPcHRpb25zLnNob3dGaWx0ZXIgPSBmYWxzZVxuICAgICAgdmlld09wdGlvbnMuc2hvd1RpdGxlcyA9IGZhbHNlXG4gICAgfVxuICAgIHJldHVybiB0aGlzLnZpZXcucmVuZGVyKHN0YXRlLCB2aWV3T3B0aW9ucylcbiAgfVxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSB7XG4gIHN0cmluZ3M6IHtcbiAgICBwbHVnaW5OYW1lRmFjZWJvb2s6ICdGYWNlYm9vaycsXG4gIH0sXG59XG4iLCJjb25zdCBCYXNlUGx1Z2luID0gcmVxdWlyZSgnQHVwcHkvY29yZS9saWIvQmFzZVBsdWdpbicpXG5jb25zdCBmaW5kRE9NRWxlbWVudCA9IHJlcXVpcmUoJ0B1cHB5L3V0aWxzL2xpYi9maW5kRE9NRWxlbWVudCcpXG5jb25zdCB0b0FycmF5ID0gcmVxdWlyZSgnQHVwcHkvdXRpbHMvbGliL3RvQXJyYXknKVxuLy8gUm9sbHVwIHVzZXMgZ2V0LWZvcm0tZGF0YSdzIEVTIG1vZHVsZXMgYnVpbGQsIGFuZCByb2xsdXAtcGx1Z2luLWNvbW1vbmpzIGF1dG9tYXRpY2FsbHkgcmVzb2x2ZXMgYC5kZWZhdWx0YC5cbi8vIFNvLCBpZiB3ZSBhcmUgYmVpbmcgYnVpbHQgdXNpbmcgcm9sbHVwLCB0aGlzIHJlcXVpcmUoKSB3b24ndCBoYXZlIGEgYC5kZWZhdWx0YCBwcm9wZXJ0eS5cbmNvbnN0IGdldEZvcm1EYXRhID0gcmVxdWlyZSgnZ2V0LWZvcm0tZGF0YScpLmRlZmF1bHQgfHwgcmVxdWlyZSgnZ2V0LWZvcm0tZGF0YScpXG5cbi8qKlxuICogRm9ybVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGNsYXNzIEZvcm0gZXh0ZW5kcyBCYXNlUGx1Z2luIHtcbiAgc3RhdGljIFZFUlNJT04gPSByZXF1aXJlKCcuLi9wYWNrYWdlLmpzb24nKS52ZXJzaW9uXG5cbiAgY29uc3RydWN0b3IgKHVwcHksIG9wdHMpIHtcbiAgICBzdXBlcih1cHB5LCBvcHRzKVxuICAgIHRoaXMudHlwZSA9ICdhY3F1aXJlcidcbiAgICB0aGlzLmlkID0gdGhpcy5vcHRzLmlkIHx8ICdGb3JtJ1xuICAgIHRoaXMudGl0bGUgPSAnRm9ybSdcblxuICAgIC8vIHNldCBkZWZhdWx0IG9wdGlvbnNcbiAgICBjb25zdCBkZWZhdWx0T3B0aW9ucyA9IHtcbiAgICAgIHRhcmdldDogbnVsbCxcbiAgICAgIHJlc3VsdE5hbWU6ICd1cHB5UmVzdWx0JyxcbiAgICAgIGdldE1ldGFGcm9tRm9ybTogdHJ1ZSxcbiAgICAgIGFkZFJlc3VsdFRvRm9ybTogdHJ1ZSxcbiAgICAgIHN1Ym1pdE9uU3VjY2VzczogZmFsc2UsXG4gICAgICB0cmlnZ2VyVXBsb2FkT25TdWJtaXQ6IGZhbHNlLFxuICAgIH1cblxuICAgIC8vIG1lcmdlIGRlZmF1bHQgb3B0aW9ucyB3aXRoIHRoZSBvbmVzIHNldCBieSB1c2VyXG4gICAgdGhpcy5vcHRzID0geyAuLi5kZWZhdWx0T3B0aW9ucywgLi4ub3B0cyB9XG5cbiAgICB0aGlzLmhhbmRsZUZvcm1TdWJtaXQgPSB0aGlzLmhhbmRsZUZvcm1TdWJtaXQuYmluZCh0aGlzKVxuICAgIHRoaXMuaGFuZGxlVXBsb2FkU3RhcnQgPSB0aGlzLmhhbmRsZVVwbG9hZFN0YXJ0LmJpbmQodGhpcylcbiAgICB0aGlzLmhhbmRsZVN1Y2Nlc3MgPSB0aGlzLmhhbmRsZVN1Y2Nlc3MuYmluZCh0aGlzKVxuICAgIHRoaXMuYWRkUmVzdWx0VG9Gb3JtID0gdGhpcy5hZGRSZXN1bHRUb0Zvcm0uYmluZCh0aGlzKVxuICAgIHRoaXMuZ2V0TWV0YUZyb21Gb3JtID0gdGhpcy5nZXRNZXRhRnJvbUZvcm0uYmluZCh0aGlzKVxuICB9XG5cbiAgaGFuZGxlVXBsb2FkU3RhcnQgKCkge1xuICAgIGlmICh0aGlzLm9wdHMuZ2V0TWV0YUZyb21Gb3JtKSB7XG4gICAgICB0aGlzLmdldE1ldGFGcm9tRm9ybSgpXG4gICAgfVxuICB9XG5cbiAgaGFuZGxlU3VjY2VzcyAocmVzdWx0KSB7XG4gICAgaWYgKHRoaXMub3B0cy5hZGRSZXN1bHRUb0Zvcm0pIHtcbiAgICAgIHRoaXMuYWRkUmVzdWx0VG9Gb3JtKHJlc3VsdClcbiAgICB9XG5cbiAgICBpZiAodGhpcy5vcHRzLnN1Ym1pdE9uU3VjY2Vzcykge1xuICAgICAgdGhpcy5mb3JtLnN1Ym1pdCgpXG4gICAgfVxuICB9XG5cbiAgaGFuZGxlRm9ybVN1Ym1pdCAoZXYpIHtcbiAgICBpZiAodGhpcy5vcHRzLnRyaWdnZXJVcGxvYWRPblN1Ym1pdCkge1xuICAgICAgZXYucHJldmVudERlZmF1bHQoKVxuICAgICAgY29uc3QgZWxlbWVudHMgPSB0b0FycmF5KGV2LnRhcmdldC5lbGVtZW50cylcbiAgICAgIGNvbnN0IGRpc2FibGVkQnlVcHB5ID0gW11cbiAgICAgIGVsZW1lbnRzLmZvckVhY2goKGVsKSA9PiB7XG4gICAgICAgIGNvbnN0IGlzQnV0dG9uID0gZWwudGFnTmFtZSA9PT0gJ0JVVFRPTicgfHwgKGVsLnRhZ05hbWUgPT09ICdJTlBVVCcgJiYgZWwudHlwZSA9PT0gJ3N1Ym1pdCcpXG4gICAgICAgIGlmIChpc0J1dHRvbiAmJiAhZWwuZGlzYWJsZWQpIHtcbiAgICAgICAgICBlbC5kaXNhYmxlZCA9IHRydWVcbiAgICAgICAgICBkaXNhYmxlZEJ5VXBweS5wdXNoKGVsKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgdGhpcy51cHB5LnVwbG9hZCgpLnRoZW4oKCkgPT4ge1xuICAgICAgICBkaXNhYmxlZEJ5VXBweS5mb3JFYWNoKChidXR0b24pID0+IHtcbiAgICAgICAgICBidXR0b24uZGlzYWJsZWQgPSBmYWxzZVxuICAgICAgICB9KVxuICAgICAgfSwgKGVycikgPT4ge1xuICAgICAgICBkaXNhYmxlZEJ5VXBweS5mb3JFYWNoKChidXR0b24pID0+IHtcbiAgICAgICAgICBidXR0b24uZGlzYWJsZWQgPSBmYWxzZVxuICAgICAgICB9KVxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyKVxuICAgICAgfSkuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICB0aGlzLnVwcHkubG9nKGVyci5zdGFjayB8fCBlcnIubWVzc2FnZSB8fCBlcnIpXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIGFkZFJlc3VsdFRvRm9ybSAocmVzdWx0KSB7XG4gICAgdGhpcy51cHB5LmxvZygnW0Zvcm1dIEFkZGluZyByZXN1bHQgdG8gdGhlIG9yaWdpbmFsIGZvcm06JylcbiAgICB0aGlzLnVwcHkubG9nKHJlc3VsdClcblxuICAgIGxldCByZXN1bHRJbnB1dCA9IHRoaXMuZm9ybS5xdWVyeVNlbGVjdG9yKGBbbmFtZT1cIiR7dGhpcy5vcHRzLnJlc3VsdE5hbWV9XCJdYClcbiAgICBpZiAocmVzdWx0SW5wdXQpIHtcbiAgICAgIC8vIEFwcGVuZCBuZXcgcmVzdWx0IHRvIHRoZSBwcmV2aW91cyByZXN1bHQgYXJyYXkuXG4gICAgICAvLyBJZiB0aGUgcHJldmlvdXMgcmVzdWx0IGlzIGVtcHR5LCBvciBub3QgYW4gYXJyYXksXG4gICAgICAvLyBzZXQgaXQgdG8gYW4gZW1wdHkgYXJyYXkuXG4gICAgICBsZXQgdXBkYXRlZFJlc3VsdFxuICAgICAgdHJ5IHtcbiAgICAgICAgdXBkYXRlZFJlc3VsdCA9IEpTT04ucGFyc2UocmVzdWx0SW5wdXQudmFsdWUpXG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgLy8gTm90aGluZywgc2luY2Ugd2UgY2hlY2sgZm9yIGFycmF5IGJlbG93IGFueXdheVxuICAgICAgfVxuXG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkodXBkYXRlZFJlc3VsdCkpIHtcbiAgICAgICAgdXBkYXRlZFJlc3VsdCA9IFtdXG4gICAgICB9XG4gICAgICB1cGRhdGVkUmVzdWx0LnB1c2gocmVzdWx0KVxuICAgICAgcmVzdWx0SW5wdXQudmFsdWUgPSBKU09OLnN0cmluZ2lmeSh1cGRhdGVkUmVzdWx0KVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgcmVzdWx0SW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpXG4gICAgcmVzdWx0SW5wdXQubmFtZSA9IHRoaXMub3B0cy5yZXN1bHROYW1lXG4gICAgcmVzdWx0SW5wdXQudHlwZSA9ICdoaWRkZW4nXG4gICAgcmVzdWx0SW5wdXQudmFsdWUgPSBKU09OLnN0cmluZ2lmeShbcmVzdWx0XSlcblxuICAgIHRoaXMuZm9ybS5hcHBlbmRDaGlsZChyZXN1bHRJbnB1dClcbiAgfVxuXG4gIGdldE1ldGFGcm9tRm9ybSAoKSB7XG4gICAgY29uc3QgZm9ybU1ldGEgPSBnZXRGb3JtRGF0YSh0aGlzLmZvcm0pXG4gICAgLy8gV2Ugd2FudCB0byBleGNsdWRlIG1ldGEgdGhlIHRoZSBGb3JtIHBsdWdpbiBpdHNlbGYgaGFzIGFkZGVkXG4gICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS90cmFuc2xvYWRpdC91cHB5L2lzc3Vlcy8xNjM3XG4gICAgZGVsZXRlIGZvcm1NZXRhW3RoaXMub3B0cy5yZXN1bHROYW1lXVxuICAgIHRoaXMudXBweS5zZXRNZXRhKGZvcm1NZXRhKVxuICB9XG5cbiAgaW5zdGFsbCAoKSB7XG4gICAgdGhpcy5mb3JtID0gZmluZERPTUVsZW1lbnQodGhpcy5vcHRzLnRhcmdldClcbiAgICBpZiAoIXRoaXMuZm9ybSB8fCB0aGlzLmZvcm0ubm9kZU5hbWUgIT09ICdGT1JNJykge1xuICAgICAgdGhpcy51cHB5LmxvZygnRm9ybSBwbHVnaW4gcmVxdWlyZXMgYSA8Zm9ybT4gdGFyZ2V0IGVsZW1lbnQgcGFzc2VkIGluIG9wdGlvbnMgdG8gb3BlcmF0ZSwgbm9uZSB3YXMgZm91bmQnLCAnZXJyb3InKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdGhpcy5mb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIHRoaXMuaGFuZGxlRm9ybVN1Ym1pdClcbiAgICB0aGlzLnVwcHkub24oJ3VwbG9hZCcsIHRoaXMuaGFuZGxlVXBsb2FkU3RhcnQpXG4gICAgdGhpcy51cHB5Lm9uKCdjb21wbGV0ZScsIHRoaXMuaGFuZGxlU3VjY2VzcylcbiAgfVxuXG4gIHVuaW5zdGFsbCAoKSB7XG4gICAgdGhpcy5mb3JtLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIHRoaXMuaGFuZGxlRm9ybVN1Ym1pdClcbiAgICB0aGlzLnVwcHkub2ZmKCd1cGxvYWQnLCB0aGlzLmhhbmRsZVVwbG9hZFN0YXJ0KVxuICAgIHRoaXMudXBweS5vZmYoJ2NvbXBsZXRlJywgdGhpcy5oYW5kbGVTdWNjZXNzKVxuICB9XG59XG4iLCJjb25zdCB7IFByb3ZpZGVyVmlld3MgfSA9IHJlcXVpcmUoJ0B1cHB5L3Byb3ZpZGVyLXZpZXdzJylcblxubW9kdWxlLmV4cG9ydHMgPSBjbGFzcyBEcml2ZVByb3ZpZGVyVmlld3MgZXh0ZW5kcyBQcm92aWRlclZpZXdzIHtcbiAgdG9nZ2xlQ2hlY2tib3ggKGUsIGZpbGUpIHtcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpXG5cbiAgICAvLyBTaGFyZWQgRHJpdmVzIGFyZW4ndCBzZWxlY3RhYmxlOyBmb3IgYWxsIGVsc2UsIGRlZmVyIHRvIHRoZSBiYXNlIFByb3ZpZGVyVmlldy5cbiAgICBpZiAoIWZpbGUuY3VzdG9tLmlzU2hhcmVkRHJpdmUpIHtcbiAgICAgIHN1cGVyLnRvZ2dsZUNoZWNrYm94KGUsIGZpbGUpXG4gICAgfVxuICB9XG59XG4iLCJjb25zdCB7IFVJUGx1Z2luIH0gPSByZXF1aXJlKCdAdXBweS9jb3JlJylcbmNvbnN0IHsgUHJvdmlkZXIgfSA9IHJlcXVpcmUoJ0B1cHB5L2NvbXBhbmlvbi1jbGllbnQnKVxuY29uc3QgeyBoIH0gPSByZXF1aXJlKCdwcmVhY3QnKVxuY29uc3QgRHJpdmVQcm92aWRlclZpZXdzID0gcmVxdWlyZSgnLi9Ecml2ZVByb3ZpZGVyVmlld3MnKVxuXG5jb25zdCBsb2NhbGUgPSByZXF1aXJlKCcuL2xvY2FsZScpXG5cbm1vZHVsZS5leHBvcnRzID0gY2xhc3MgR29vZ2xlRHJpdmUgZXh0ZW5kcyBVSVBsdWdpbiB7XG4gIHN0YXRpYyBWRVJTSU9OID0gcmVxdWlyZSgnLi4vcGFja2FnZS5qc29uJykudmVyc2lvblxuXG4gIGNvbnN0cnVjdG9yICh1cHB5LCBvcHRzKSB7XG4gICAgc3VwZXIodXBweSwgb3B0cylcbiAgICB0aGlzLmlkID0gdGhpcy5vcHRzLmlkIHx8ICdHb29nbGVEcml2ZSdcbiAgICB0aGlzLnRpdGxlID0gdGhpcy5vcHRzLnRpdGxlIHx8ICdHb29nbGUgRHJpdmUnXG4gICAgUHJvdmlkZXIuaW5pdFBsdWdpbih0aGlzLCBvcHRzKVxuICAgIHRoaXMudGl0bGUgPSB0aGlzLm9wdHMudGl0bGUgfHwgJ0dvb2dsZSBEcml2ZSdcbiAgICB0aGlzLmljb24gPSAoKSA9PiAoXG4gICAgICA8c3ZnXG4gICAgICAgIGFyaWEtaGlkZGVuPVwidHJ1ZVwiXG4gICAgICAgIGZvY3VzYWJsZT1cImZhbHNlXCJcbiAgICAgICAgd2lkdGg9XCIzMlwiXG4gICAgICAgIGhlaWdodD1cIjMyXCJcbiAgICAgICAgdmlld0JveD1cIjAgMCAzMiAzMlwiXG4gICAgICA+XG4gICAgICAgIDxnIGZpbGw9XCJub25lXCIgZmlsbFJ1bGU9XCJldmVub2RkXCI+XG4gICAgICAgICAgPHJlY3RcbiAgICAgICAgICAgIGNsYXNzTmFtZT1cInVwcHktUHJvdmlkZXJJY29uQmdcIlxuICAgICAgICAgICAgZmlsbD1cIiM0Mjg1RjRcIlxuICAgICAgICAgICAgd2lkdGg9XCIzMlwiXG4gICAgICAgICAgICBoZWlnaHQ9XCIzMlwiXG4gICAgICAgICAgICByeD1cIjE2XCJcbiAgICAgICAgICAvPlxuICAgICAgICAgIDxwYXRoXG4gICAgICAgICAgICBkPVwiTTI1LjIxNiAxNy43MzZMMTkuMDQzIDdoLTYuMDg2bDYuMTc1IDEwLjczNmg2LjA4NHptLTExLjI3NS44OTZMMTAuOSAyNGgxMS43MjNsMy4wNC01LjM2OEgxMy45NDJ6bS0xLjc4OS0xMC4yOWwtNS44MTYgMTAuMjlMOS4zOCAyNGw1LjkwNS0xMC4yOS0zLjEzMi01LjM2OXpcIlxuICAgICAgICAgICAgZmlsbD1cIiNGRkZcIlxuICAgICAgICAgIC8+XG4gICAgICAgIDwvZz5cbiAgICAgIDwvc3ZnPlxuICAgIClcblxuICAgIHRoaXMucHJvdmlkZXIgPSBuZXcgUHJvdmlkZXIodXBweSwge1xuICAgICAgY29tcGFuaW9uVXJsOiB0aGlzLm9wdHMuY29tcGFuaW9uVXJsLFxuICAgICAgY29tcGFuaW9uSGVhZGVyczogdGhpcy5vcHRzLmNvbXBhbmlvbkhlYWRlcnMsXG4gICAgICBjb21wYW5pb25LZXlzUGFyYW1zOiB0aGlzLm9wdHMuY29tcGFuaW9uS2V5c1BhcmFtcyxcbiAgICAgIGNvbXBhbmlvbkNvb2tpZXNSdWxlOiB0aGlzLm9wdHMuY29tcGFuaW9uQ29va2llc1J1bGUsXG4gICAgICBwcm92aWRlcjogJ2RyaXZlJyxcbiAgICAgIHBsdWdpbklkOiB0aGlzLmlkLFxuICAgIH0pXG5cbiAgICB0aGlzLmRlZmF1bHRMb2NhbGUgPSBsb2NhbGVcblxuICAgIHRoaXMuaTE4bkluaXQoKVxuICAgIHRoaXMudGl0bGUgPSB0aGlzLmkxOG4oJ3BsdWdpbk5hbWVHb29nbGVEcml2ZScpXG5cbiAgICB0aGlzLm9uRmlyc3RSZW5kZXIgPSB0aGlzLm9uRmlyc3RSZW5kZXIuYmluZCh0aGlzKVxuICAgIHRoaXMucmVuZGVyID0gdGhpcy5yZW5kZXIuYmluZCh0aGlzKVxuICB9XG5cbiAgaW5zdGFsbCAoKSB7XG4gICAgdGhpcy52aWV3ID0gbmV3IERyaXZlUHJvdmlkZXJWaWV3cyh0aGlzLCB7XG4gICAgICBwcm92aWRlcjogdGhpcy5wcm92aWRlcixcbiAgICB9KVxuXG4gICAgY29uc3QgeyB0YXJnZXQgfSA9IHRoaXMub3B0c1xuICAgIGlmICh0YXJnZXQpIHtcbiAgICAgIHRoaXMubW91bnQodGFyZ2V0LCB0aGlzKVxuICAgIH1cbiAgfVxuXG4gIHVuaW5zdGFsbCAoKSB7XG4gICAgdGhpcy52aWV3LnRlYXJEb3duKClcbiAgICB0aGlzLnVubW91bnQoKVxuICB9XG5cbiAgb25GaXJzdFJlbmRlciAoKSB7XG4gICAgcmV0dXJuIFByb21pc2UuYWxsKFtcbiAgICAgIHRoaXMucHJvdmlkZXIuZmV0Y2hQcmVBdXRoVG9rZW4oKSxcbiAgICAgIHRoaXMudmlldy5nZXRGb2xkZXIoJ3Jvb3QnLCAnLycpLFxuICAgIF0pXG4gIH1cblxuICByZW5kZXIgKHN0YXRlKSB7XG4gICAgcmV0dXJuIHRoaXMudmlldy5yZW5kZXIoc3RhdGUpXG4gIH1cbn1cbiIsIm1vZHVsZS5leHBvcnRzID0ge1xuICBzdHJpbmdzOiB7XG4gICAgcGx1Z2luTmFtZUdvb2dsZURyaXZlOiAnR29vZ2xlIERyaXZlJyxcbiAgfSxcbn1cbiIsImNvbnN0IHsgaCwgQ29tcG9uZW50LCBjcmVhdGVSZWYgfSA9IHJlcXVpcmUoJ3ByZWFjdCcpXG5cbmNvbnN0IFRSQU5TSVRJT05fTVMgPSAzMDBcblxubW9kdWxlLmV4cG9ydHMgPSBjbGFzcyBGYWRlSW4gZXh0ZW5kcyBDb21wb25lbnQge1xuICByZWYgPSBjcmVhdGVSZWYoKVxuXG4gIGNvbXBvbmVudFdpbGxFbnRlciAoY2FsbGJhY2spIHtcbiAgICB0aGlzLnJlZi5jdXJyZW50LnN0eWxlLm9wYWNpdHkgPSAnMSdcbiAgICB0aGlzLnJlZi5jdXJyZW50LnN0eWxlLnRyYW5zZm9ybSA9ICdub25lJ1xuICAgIHNldFRpbWVvdXQoY2FsbGJhY2ssIFRSQU5TSVRJT05fTVMpXG4gIH1cblxuICBjb21wb25lbnRXaWxsTGVhdmUgKGNhbGxiYWNrKSB7XG4gICAgdGhpcy5yZWYuY3VycmVudC5zdHlsZS5vcGFjaXR5ID0gJzAnXG4gICAgdGhpcy5yZWYuY3VycmVudC5zdHlsZS50cmFuc2Zvcm0gPSAndHJhbnNsYXRlWSgzNTAlKSdcbiAgICBzZXRUaW1lb3V0KGNhbGxiYWNrLCBUUkFOU0lUSU9OX01TKVxuICB9XG5cbiAgcmVuZGVyICgpIHtcbiAgICBjb25zdCB7IGNoaWxkcmVuIH0gPSB0aGlzLnByb3BzXG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJ1cHB5LUluZm9ybWVyLWFuaW1hdGVkXCIgcmVmPXt0aGlzLnJlZn0+XG4gICAgICAgIHtjaGlsZHJlbn1cbiAgICAgIDwvZGl2PlxuICAgIClcbiAgfVxufVxuIiwiLyogZXNsaW50LWRpc2FibGUgKi9cbi8qKlxuICogQHNvdXJjZSBodHRwczovL2dpdGh1Yi5jb20vZGV2ZWxvcGl0L3ByZWFjdC10cmFuc2l0aW9uLWdyb3VwXG4gKi9cbid1c2Ugc3RyaWN0J1xuXG5jb25zdCB7IENvbXBvbmVudCwgY2xvbmVFbGVtZW50LCBoLCB0b0NoaWxkQXJyYXkgfSA9IHJlcXVpcmUoJ3ByZWFjdCcpXG5cbmZ1bmN0aW9uIGFzc2lnbiAob2JqLCBwcm9wcykge1xuICByZXR1cm4gT2JqZWN0LmFzc2lnbihvYmosIHByb3BzKVxufVxuZnVuY3Rpb24gZ2V0S2V5ICh2bm9kZSwgZmFsbGJhY2spIHtcbiAgcmV0dXJuIHZub2RlPy5rZXkgPz8gZmFsbGJhY2tcbn1cbmZ1bmN0aW9uIGxpbmtSZWYgKGNvbXBvbmVudCwgbmFtZSkge1xuICBjb25zdCBjYWNoZSA9IGNvbXBvbmVudC5fcHRnTGlua2VkUmVmcyB8fCAoY29tcG9uZW50Ll9wdGdMaW5rZWRSZWZzID0ge30pXG4gIHJldHVybiBjYWNoZVtuYW1lXSB8fCAoY2FjaGVbbmFtZV0gPSBjID0+IHtcbiAgICBjb21wb25lbnQucmVmc1tuYW1lXSA9IGNcbiAgfSlcbn1cblxuZnVuY3Rpb24gZ2V0Q2hpbGRNYXBwaW5nIChjaGlsZHJlbikge1xuICBjb25zdCBvdXQgPSB7fVxuICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGNoaWxkcmVuW2ldICE9IG51bGwpIHtcbiAgICAgIGNvbnN0IGtleSA9IGdldEtleShjaGlsZHJlbltpXSwgaS50b1N0cmluZygzNikpXG4gICAgICBvdXRba2V5XSA9IGNoaWxkcmVuW2ldXG4gICAgfVxuICB9XG4gIHJldHVybiBvdXRcbn1cblxuZnVuY3Rpb24gbWVyZ2VDaGlsZE1hcHBpbmdzIChwcmV2LCBuZXh0KSB7XG4gIHByZXYgPSBwcmV2IHx8IHt9XG4gIG5leHQgPSBuZXh0IHx8IHt9XG5cbiAgY29uc3QgZ2V0VmFsdWVGb3JLZXkgPSBrZXkgPT4gKG5leHQuaGFzT3duUHJvcGVydHkoa2V5KSA/IG5leHRba2V5XSA6IHByZXZba2V5XSlcblxuICAvLyBGb3IgZWFjaCBrZXkgb2YgYG5leHRgLCB0aGUgbGlzdCBvZiBrZXlzIHRvIGluc2VydCBiZWZvcmUgdGhhdCBrZXkgaW5cbiAgLy8gdGhlIGNvbWJpbmVkIGxpc3RcbiAgY29uc3QgbmV4dEtleXNQZW5kaW5nID0ge31cblxuICBsZXQgcGVuZGluZ0tleXMgPSBbXVxuICBmb3IgKGNvbnN0IHByZXZLZXkgaW4gcHJldikge1xuICAgIGlmIChuZXh0Lmhhc093blByb3BlcnR5KHByZXZLZXkpKSB7XG4gICAgICBpZiAocGVuZGluZ0tleXMubGVuZ3RoKSB7XG4gICAgICAgIG5leHRLZXlzUGVuZGluZ1twcmV2S2V5XSA9IHBlbmRpbmdLZXlzXG4gICAgICAgIHBlbmRpbmdLZXlzID0gW11cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGVuZGluZ0tleXMucHVzaChwcmV2S2V5KVxuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGNoaWxkTWFwcGluZyA9IHt9XG4gIGZvciAoY29uc3QgbmV4dEtleSBpbiBuZXh0KSB7XG4gICAgaWYgKG5leHRLZXlzUGVuZGluZy5oYXNPd25Qcm9wZXJ0eShuZXh0S2V5KSkge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuZXh0S2V5c1BlbmRpbmdbbmV4dEtleV0ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgcGVuZGluZ05leHRLZXkgPSBuZXh0S2V5c1BlbmRpbmdbbmV4dEtleV1baV1cbiAgICAgICAgY2hpbGRNYXBwaW5nW25leHRLZXlzUGVuZGluZ1tuZXh0S2V5XVtpXV0gPSBnZXRWYWx1ZUZvcktleShwZW5kaW5nTmV4dEtleSlcbiAgICAgIH1cbiAgICB9XG4gICAgY2hpbGRNYXBwaW5nW25leHRLZXldID0gZ2V0VmFsdWVGb3JLZXkobmV4dEtleSlcbiAgfVxuXG4gIC8vIEZpbmFsbHksIGFkZCB0aGUga2V5cyB3aGljaCBkaWRuJ3QgYXBwZWFyIGJlZm9yZSBhbnkga2V5IGluIGBuZXh0YFxuICBmb3IgKGxldCBpID0gMDsgaSA8IHBlbmRpbmdLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgY2hpbGRNYXBwaW5nW3BlbmRpbmdLZXlzW2ldXSA9IGdldFZhbHVlRm9yS2V5KHBlbmRpbmdLZXlzW2ldKVxuICB9XG5cbiAgcmV0dXJuIGNoaWxkTWFwcGluZ1xufVxuXG5jb25zdCBpZGVudGl0eSA9IGkgPT4gaVxuXG5jbGFzcyBUcmFuc2l0aW9uR3JvdXAgZXh0ZW5kcyBDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvciAocHJvcHMsIGNvbnRleHQpIHtcbiAgICBzdXBlcihwcm9wcywgY29udGV4dClcblxuICAgIHRoaXMucmVmcyA9IHt9XG5cbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgY2hpbGRyZW46IGdldENoaWxkTWFwcGluZyh0b0NoaWxkQXJyYXkodG9DaGlsZEFycmF5KHRoaXMucHJvcHMuY2hpbGRyZW4pKSB8fCBbXSksXG4gICAgfVxuXG4gICAgdGhpcy5wZXJmb3JtQXBwZWFyID0gdGhpcy5wZXJmb3JtQXBwZWFyLmJpbmQodGhpcylcbiAgICB0aGlzLnBlcmZvcm1FbnRlciA9IHRoaXMucGVyZm9ybUVudGVyLmJpbmQodGhpcylcbiAgICB0aGlzLnBlcmZvcm1MZWF2ZSA9IHRoaXMucGVyZm9ybUxlYXZlLmJpbmQodGhpcylcbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxNb3VudCAoKSB7XG4gICAgdGhpcy5jdXJyZW50bHlUcmFuc2l0aW9uaW5nS2V5cyA9IHt9XG4gICAgdGhpcy5rZXlzVG9BYm9ydExlYXZlID0gW11cbiAgICB0aGlzLmtleXNUb0VudGVyID0gW11cbiAgICB0aGlzLmtleXNUb0xlYXZlID0gW11cbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50ICgpIHtcbiAgICBjb25zdCBpbml0aWFsQ2hpbGRNYXBwaW5nID0gdGhpcy5zdGF0ZS5jaGlsZHJlblxuICAgIGZvciAoY29uc3Qga2V5IGluIGluaXRpYWxDaGlsZE1hcHBpbmcpIHtcbiAgICAgIGlmIChpbml0aWFsQ2hpbGRNYXBwaW5nW2tleV0pIHtcbiAgICAgICAgLy8gdGhpcy5wZXJmb3JtQXBwZWFyKGdldEtleShpbml0aWFsQ2hpbGRNYXBwaW5nW2tleV0sIGtleSkpO1xuICAgICAgICB0aGlzLnBlcmZvcm1BcHBlYXIoa2V5KVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgKG5leHRQcm9wcykge1xuICAgIGNvbnN0IG5leHRDaGlsZE1hcHBpbmcgPSBnZXRDaGlsZE1hcHBpbmcodG9DaGlsZEFycmF5KG5leHRQcm9wcy5jaGlsZHJlbikgfHwgW10pXG4gICAgY29uc3QgcHJldkNoaWxkTWFwcGluZyA9IHRoaXMuc3RhdGUuY2hpbGRyZW5cblxuICAgIHRoaXMuc2V0U3RhdGUocHJldlN0YXRlID0+ICh7XG4gICAgICBjaGlsZHJlbjogbWVyZ2VDaGlsZE1hcHBpbmdzKHByZXZTdGF0ZS5jaGlsZHJlbiwgbmV4dENoaWxkTWFwcGluZyksXG4gICAgfSkpXG5cbiAgICBsZXQga2V5XG5cbiAgICBmb3IgKGtleSBpbiBuZXh0Q2hpbGRNYXBwaW5nKSB7XG4gICAgICBpZiAobmV4dENoaWxkTWFwcGluZy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgIGNvbnN0IGhhc1ByZXYgPSBwcmV2Q2hpbGRNYXBwaW5nICYmIHByZXZDaGlsZE1hcHBpbmcuaGFzT3duUHJvcGVydHkoa2V5KVxuICAgICAgICAvLyBXZSBzaG91bGQgcmUtZW50ZXIgdGhlIGNvbXBvbmVudCBhbmQgYWJvcnQgaXRzIGxlYXZlIGZ1bmN0aW9uXG4gICAgICAgIGlmIChuZXh0Q2hpbGRNYXBwaW5nW2tleV0gJiYgaGFzUHJldiAmJiB0aGlzLmN1cnJlbnRseVRyYW5zaXRpb25pbmdLZXlzW2tleV0pIHtcbiAgICAgICAgICB0aGlzLmtleXNUb0VudGVyLnB1c2goa2V5KVxuICAgICAgICAgIHRoaXMua2V5c1RvQWJvcnRMZWF2ZS5wdXNoKGtleSlcbiAgICAgICAgfSBlbHNlIGlmIChuZXh0Q2hpbGRNYXBwaW5nW2tleV0gJiYgIWhhc1ByZXYgJiYgIXRoaXMuY3VycmVudGx5VHJhbnNpdGlvbmluZ0tleXNba2V5XSkge1xuICAgICAgICAgIHRoaXMua2V5c1RvRW50ZXIucHVzaChrZXkpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKGtleSBpbiBwcmV2Q2hpbGRNYXBwaW5nKSB7XG4gICAgICBpZiAocHJldkNoaWxkTWFwcGluZy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgIGNvbnN0IGhhc05leHQgPSBuZXh0Q2hpbGRNYXBwaW5nICYmIG5leHRDaGlsZE1hcHBpbmcuaGFzT3duUHJvcGVydHkoa2V5KVxuICAgICAgICBpZiAocHJldkNoaWxkTWFwcGluZ1trZXldICYmICFoYXNOZXh0ICYmICF0aGlzLmN1cnJlbnRseVRyYW5zaXRpb25pbmdLZXlzW2tleV0pIHtcbiAgICAgICAgICB0aGlzLmtleXNUb0xlYXZlLnB1c2goa2V5KVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgY29tcG9uZW50RGlkVXBkYXRlICgpIHtcbiAgICBjb25zdCB7IGtleXNUb0VudGVyIH0gPSB0aGlzXG4gICAgdGhpcy5rZXlzVG9FbnRlciA9IFtdXG4gICAga2V5c1RvRW50ZXIuZm9yRWFjaCh0aGlzLnBlcmZvcm1FbnRlcilcblxuICAgIGNvbnN0IHsga2V5c1RvTGVhdmUgfSA9IHRoaXNcbiAgICB0aGlzLmtleXNUb0xlYXZlID0gW11cbiAgICBrZXlzVG9MZWF2ZS5mb3JFYWNoKHRoaXMucGVyZm9ybUxlYXZlKVxuICB9XG5cbiAgX2ZpbmlzaEFib3J0IChrZXkpIHtcbiAgICBjb25zdCBpZHggPSB0aGlzLmtleXNUb0Fib3J0TGVhdmUuaW5kZXhPZihrZXkpXG4gICAgaWYgKGlkeCAhPT0gLTEpIHtcbiAgICAgIHRoaXMua2V5c1RvQWJvcnRMZWF2ZS5zcGxpY2UoaWR4LCAxKVxuICAgIH1cbiAgfVxuXG4gIHBlcmZvcm1BcHBlYXIgKGtleSkge1xuICAgIHRoaXMuY3VycmVudGx5VHJhbnNpdGlvbmluZ0tleXNba2V5XSA9IHRydWVcblxuICAgIGNvbnN0IGNvbXBvbmVudCA9IHRoaXMucmVmc1trZXldXG5cbiAgICBpZiAoY29tcG9uZW50LmNvbXBvbmVudFdpbGxBcHBlYXIpIHtcbiAgICAgIGNvbXBvbmVudC5jb21wb25lbnRXaWxsQXBwZWFyKHRoaXMuX2hhbmRsZURvbmVBcHBlYXJpbmcuYmluZCh0aGlzLCBrZXkpKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9oYW5kbGVEb25lQXBwZWFyaW5nKGtleSlcbiAgICB9XG4gIH1cblxuICBfaGFuZGxlRG9uZUFwcGVhcmluZyAoa2V5KSB7XG4gICAgY29uc3QgY29tcG9uZW50ID0gdGhpcy5yZWZzW2tleV1cbiAgICBpZiAoY29tcG9uZW50LmNvbXBvbmVudERpZEFwcGVhcikge1xuICAgICAgY29tcG9uZW50LmNvbXBvbmVudERpZEFwcGVhcigpXG4gICAgfVxuXG4gICAgZGVsZXRlIHRoaXMuY3VycmVudGx5VHJhbnNpdGlvbmluZ0tleXNba2V5XVxuICAgIHRoaXMuX2ZpbmlzaEFib3J0KGtleSlcblxuICAgIGNvbnN0IGN1cnJlbnRDaGlsZE1hcHBpbmcgPSBnZXRDaGlsZE1hcHBpbmcodG9DaGlsZEFycmF5KHRoaXMucHJvcHMuY2hpbGRyZW4pIHx8IFtdKVxuXG4gICAgaWYgKCFjdXJyZW50Q2hpbGRNYXBwaW5nIHx8ICFjdXJyZW50Q2hpbGRNYXBwaW5nLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgIC8vIFRoaXMgd2FzIHJlbW92ZWQgYmVmb3JlIGl0IGhhZCBmdWxseSBhcHBlYXJlZC4gUmVtb3ZlIGl0LlxuICAgICAgdGhpcy5wZXJmb3JtTGVhdmUoa2V5KVxuICAgIH1cbiAgfVxuXG4gIHBlcmZvcm1FbnRlciAoa2V5KSB7XG4gICAgdGhpcy5jdXJyZW50bHlUcmFuc2l0aW9uaW5nS2V5c1trZXldID0gdHJ1ZVxuXG4gICAgY29uc3QgY29tcG9uZW50ID0gdGhpcy5yZWZzW2tleV1cblxuICAgIGlmIChjb21wb25lbnQuY29tcG9uZW50V2lsbEVudGVyKSB7XG4gICAgICBjb21wb25lbnQuY29tcG9uZW50V2lsbEVudGVyKHRoaXMuX2hhbmRsZURvbmVFbnRlcmluZy5iaW5kKHRoaXMsIGtleSkpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2hhbmRsZURvbmVFbnRlcmluZyhrZXkpXG4gICAgfVxuICB9XG5cbiAgX2hhbmRsZURvbmVFbnRlcmluZyAoa2V5KSB7XG4gICAgY29uc3QgY29tcG9uZW50ID0gdGhpcy5yZWZzW2tleV1cbiAgICBpZiAoY29tcG9uZW50LmNvbXBvbmVudERpZEVudGVyKSB7XG4gICAgICBjb21wb25lbnQuY29tcG9uZW50RGlkRW50ZXIoKVxuICAgIH1cblxuICAgIGRlbGV0ZSB0aGlzLmN1cnJlbnRseVRyYW5zaXRpb25pbmdLZXlzW2tleV1cbiAgICB0aGlzLl9maW5pc2hBYm9ydChrZXkpXG5cbiAgICBjb25zdCBjdXJyZW50Q2hpbGRNYXBwaW5nID0gZ2V0Q2hpbGRNYXBwaW5nKHRvQ2hpbGRBcnJheSh0aGlzLnByb3BzLmNoaWxkcmVuKSB8fCBbXSlcblxuICAgIGlmICghY3VycmVudENoaWxkTWFwcGluZyB8fCAhY3VycmVudENoaWxkTWFwcGluZy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAvLyBUaGlzIHdhcyByZW1vdmVkIGJlZm9yZSBpdCBoYWQgZnVsbHkgZW50ZXJlZC4gUmVtb3ZlIGl0LlxuICAgICAgdGhpcy5wZXJmb3JtTGVhdmUoa2V5KVxuICAgIH1cbiAgfVxuXG4gIHBlcmZvcm1MZWF2ZSAoa2V5KSB7XG4gICAgLy8gSWYgd2Ugc2hvdWxkIGltbWVkaWF0ZWx5IGFib3J0IHRoaXMgbGVhdmUgZnVuY3Rpb24sXG4gICAgLy8gZG9uJ3QgcnVuIHRoZSBsZWF2ZSB0cmFuc2l0aW9uIGF0IGFsbC5cbiAgICBjb25zdCBpZHggPSB0aGlzLmtleXNUb0Fib3J0TGVhdmUuaW5kZXhPZihrZXkpXG4gICAgaWYgKGlkeCAhPT0gLTEpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHRoaXMuY3VycmVudGx5VHJhbnNpdGlvbmluZ0tleXNba2V5XSA9IHRydWVcblxuICAgIGNvbnN0IGNvbXBvbmVudCA9IHRoaXMucmVmc1trZXldXG4gICAgaWYgKGNvbXBvbmVudC5jb21wb25lbnRXaWxsTGVhdmUpIHtcbiAgICAgIGNvbXBvbmVudC5jb21wb25lbnRXaWxsTGVhdmUodGhpcy5faGFuZGxlRG9uZUxlYXZpbmcuYmluZCh0aGlzLCBrZXkpKVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBOb3RlIHRoYXQgdGhpcyBpcyBzb21ld2hhdCBkYW5nZXJvdXMgYi9jIGl0IGNhbGxzIHNldFN0YXRlKClcbiAgICAgIC8vIGFnYWluLCBlZmZlY3RpdmVseSBtdXRhdGluZyB0aGUgY29tcG9uZW50IGJlZm9yZSBhbGwgdGhlIHdvcmtcbiAgICAgIC8vIGlzIGRvbmUuXG4gICAgICB0aGlzLl9oYW5kbGVEb25lTGVhdmluZyhrZXkpXG4gICAgfVxuICB9XG5cbiAgX2hhbmRsZURvbmVMZWF2aW5nIChrZXkpIHtcbiAgICAvLyBJZiB3ZSBzaG91bGQgaW1tZWRpYXRlbHkgYWJvcnQgdGhlIGxlYXZlLFxuICAgIC8vIHRoZW4gc2tpcCB0aGlzIGFsdG9nZXRoZXJcbiAgICBjb25zdCBpZHggPSB0aGlzLmtleXNUb0Fib3J0TGVhdmUuaW5kZXhPZihrZXkpXG4gICAgaWYgKGlkeCAhPT0gLTEpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IGNvbXBvbmVudCA9IHRoaXMucmVmc1trZXldXG5cbiAgICBpZiAoY29tcG9uZW50LmNvbXBvbmVudERpZExlYXZlKSB7XG4gICAgICBjb21wb25lbnQuY29tcG9uZW50RGlkTGVhdmUoKVxuICAgIH1cblxuICAgIGRlbGV0ZSB0aGlzLmN1cnJlbnRseVRyYW5zaXRpb25pbmdLZXlzW2tleV1cblxuICAgIGNvbnN0IGN1cnJlbnRDaGlsZE1hcHBpbmcgPSBnZXRDaGlsZE1hcHBpbmcodG9DaGlsZEFycmF5KHRoaXMucHJvcHMuY2hpbGRyZW4pIHx8IFtdKVxuXG4gICAgaWYgKGN1cnJlbnRDaGlsZE1hcHBpbmcgJiYgY3VycmVudENoaWxkTWFwcGluZy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAvLyBUaGlzIGVudGVyZWQgYWdhaW4gYmVmb3JlIGl0IGZ1bGx5IGxlZnQuIEFkZCBpdCBhZ2Fpbi5cbiAgICAgIHRoaXMucGVyZm9ybUVudGVyKGtleSlcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgY2hpbGRyZW4gPSBhc3NpZ24oe30sIHRoaXMuc3RhdGUuY2hpbGRyZW4pXG4gICAgICBkZWxldGUgY2hpbGRyZW5ba2V5XVxuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGNoaWxkcmVuIH0pXG4gICAgfVxuICB9XG5cbiAgcmVuZGVyICh7IGNoaWxkRmFjdG9yeSwgdHJhbnNpdGlvbkxlYXZlLCB0cmFuc2l0aW9uTmFtZSwgdHJhbnNpdGlvbkFwcGVhciwgdHJhbnNpdGlvbkVudGVyLCB0cmFuc2l0aW9uTGVhdmVUaW1lb3V0LCB0cmFuc2l0aW9uRW50ZXJUaW1lb3V0LCB0cmFuc2l0aW9uQXBwZWFyVGltZW91dCwgY29tcG9uZW50LCAuLi5wcm9wcyB9LCB7IGNoaWxkcmVuIH0pIHtcbiAgICAvLyBUT0RPOiB3ZSBjb3VsZCBnZXQgcmlkIG9mIHRoZSBuZWVkIGZvciB0aGUgd3JhcHBlciBub2RlXG4gICAgLy8gYnkgY2xvbmluZyBhIHNpbmdsZSBjaGlsZFxuICAgIGNvbnN0IGNoaWxkcmVuVG9SZW5kZXIgPSBbXVxuICAgIGZvciAoY29uc3Qga2V5IGluIGNoaWxkcmVuKSB7XG4gICAgICBpZiAoY2hpbGRyZW4uaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICBjb25zdCBjaGlsZCA9IGNoaWxkcmVuW2tleV1cbiAgICAgICAgaWYgKGNoaWxkKSB7XG4gICAgICAgICAgY29uc3QgcmVmID0gbGlua1JlZih0aGlzLCBrZXkpLFxuICAgICAgICAgICAgZWwgPSBjbG9uZUVsZW1lbnQoY2hpbGRGYWN0b3J5KGNoaWxkKSwgeyByZWYsIGtleSB9KVxuICAgICAgICAgIGNoaWxkcmVuVG9SZW5kZXIucHVzaChlbClcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBoKGNvbXBvbmVudCwgcHJvcHMsIGNoaWxkcmVuVG9SZW5kZXIpXG4gIH1cbn1cblxuVHJhbnNpdGlvbkdyb3VwLmRlZmF1bHRQcm9wcyA9IHtcbiAgY29tcG9uZW50OiAnc3BhbicsXG4gIGNoaWxkRmFjdG9yeTogaWRlbnRpdHksXG59XG5cbm1vZHVsZS5leHBvcnRzID0gVHJhbnNpdGlvbkdyb3VwXG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBqc3gtYTExeS9uby1ub25pbnRlcmFjdGl2ZS1lbGVtZW50LWludGVyYWN0aW9ucyAgKi9cbi8qIGVzbGludC1kaXNhYmxlIGpzeC1hMTF5L2NsaWNrLWV2ZW50cy1oYXZlLWtleS1ldmVudHMgKi9cbmNvbnN0IHsgaCB9ID0gcmVxdWlyZSgncHJlYWN0JylcbmNvbnN0IHsgVUlQbHVnaW4gfSA9IHJlcXVpcmUoJ0B1cHB5L2NvcmUnKVxuY29uc3QgRmFkZUluID0gcmVxdWlyZSgnLi9GYWRlSW4nKVxuY29uc3QgVHJhbnNpdGlvbkdyb3VwID0gcmVxdWlyZSgnLi9UcmFuc2l0aW9uR3JvdXAnKVxuXG4vKipcbiAqIEluZm9ybWVyXG4gKiBTaG93cyByYWQgbWVzc2FnZSBidWJibGVzXG4gKiB1c2VkIGxpa2UgdGhpczogYHVwcHkuaW5mbygnaGVsbG8gd29ybGQnLCAnaW5mbycsIDUwMDApYFxuICogb3IgZm9yIGVycm9yczogYHVwcHkuaW5mbygnRXJyb3IgdXBsb2FkaW5nIGltZy5qcGcnLCAnZXJyb3InLCA1MDAwKWBcbiAqXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gY2xhc3MgSW5mb3JtZXIgZXh0ZW5kcyBVSVBsdWdpbiB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBnbG9iYWwtcmVxdWlyZVxuICBzdGF0aWMgVkVSU0lPTiA9IHJlcXVpcmUoJy4uL3BhY2thZ2UuanNvbicpLnZlcnNpb25cblxuICBjb25zdHJ1Y3RvciAodXBweSwgb3B0cykge1xuICAgIHN1cGVyKHVwcHksIG9wdHMpXG4gICAgdGhpcy50eXBlID0gJ3Byb2dyZXNzaW5kaWNhdG9yJ1xuICAgIHRoaXMuaWQgPSB0aGlzLm9wdHMuaWQgfHwgJ0luZm9ybWVyJ1xuICAgIHRoaXMudGl0bGUgPSAnSW5mb3JtZXInXG5cbiAgICAvLyBzZXQgZGVmYXVsdCBvcHRpb25zXG4gICAgY29uc3QgZGVmYXVsdE9wdGlvbnMgPSB7fVxuICAgIC8vIG1lcmdlIGRlZmF1bHQgb3B0aW9ucyB3aXRoIHRoZSBvbmVzIHNldCBieSB1c2VyXG4gICAgdGhpcy5vcHRzID0geyAuLi5kZWZhdWx0T3B0aW9ucywgLi4ub3B0cyB9XG4gIH1cblxuICByZW5kZXIgPSAoc3RhdGUpID0+IHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJ1cHB5IHVwcHktSW5mb3JtZXJcIj5cbiAgICAgICAgPFRyYW5zaXRpb25Hcm91cD5cbiAgICAgICAgICB7c3RhdGUuaW5mby5tYXAoKGluZm8pID0+IChcbiAgICAgICAgICAgIDxGYWRlSW4ga2V5PXtpbmZvLm1lc3NhZ2V9PlxuICAgICAgICAgICAgICA8cCByb2xlPVwiYWxlcnRcIj5cbiAgICAgICAgICAgICAgICB7aW5mby5tZXNzYWdlfVxuICAgICAgICAgICAgICAgIHsnICd9XG4gICAgICAgICAgICAgICAge2luZm8uZGV0YWlscyAmJiAoXG4gICAgICAgICAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgICAgICAgICBhcmlhLWxhYmVsPXtpbmZvLmRldGFpbHN9XG4gICAgICAgICAgICAgICAgICAgIGRhdGEtbWljcm90aXAtcG9zaXRpb249XCJ0b3AtbGVmdFwiXG4gICAgICAgICAgICAgICAgICAgIGRhdGEtbWljcm90aXAtc2l6ZT1cIm1lZGl1bVwiXG4gICAgICAgICAgICAgICAgICAgIHJvbGU9XCJ0b29sdGlwXCJcbiAgICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWFsZXJ0XG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGFsZXJ0KGAke2luZm8ubWVzc2FnZX0gXFxuXFxuICR7aW5mby5kZXRhaWxzfWApfVxuICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICA/XG4gICAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgPC9GYWRlSW4+XG4gICAgICAgICAgKSl9XG4gICAgICAgIDwvVHJhbnNpdGlvbkdyb3VwPlxuICAgICAgPC9kaXY+XG4gICAgKVxuICB9XG5cbiAgaW5zdGFsbCAoKSB7XG4gICAgY29uc3QgeyB0YXJnZXQgfSA9IHRoaXMub3B0c1xuICAgIGlmICh0YXJnZXQpIHtcbiAgICAgIHRoaXMubW91bnQodGFyZ2V0LCB0aGlzKVxuICAgIH1cbiAgfVxufVxuIiwiY29uc3QgeyBVSVBsdWdpbiB9ID0gcmVxdWlyZSgnQHVwcHkvY29yZScpXG5jb25zdCB7IFByb3ZpZGVyIH0gPSByZXF1aXJlKCdAdXBweS9jb21wYW5pb24tY2xpZW50JylcbmNvbnN0IHsgUHJvdmlkZXJWaWV3cyB9ID0gcmVxdWlyZSgnQHVwcHkvcHJvdmlkZXItdmlld3MnKVxuY29uc3QgeyBoIH0gPSByZXF1aXJlKCdwcmVhY3QnKVxuXG5jb25zdCBsb2NhbGUgPSByZXF1aXJlKCcuL2xvY2FsZS5qcycpXG5cbm1vZHVsZS5leHBvcnRzID0gY2xhc3MgSW5zdGFncmFtIGV4dGVuZHMgVUlQbHVnaW4ge1xuICBzdGF0aWMgVkVSU0lPTiA9IHJlcXVpcmUoJy4uL3BhY2thZ2UuanNvbicpLnZlcnNpb25cblxuICBjb25zdHJ1Y3RvciAodXBweSwgb3B0cykge1xuICAgIHN1cGVyKHVwcHksIG9wdHMpXG4gICAgdGhpcy5pZCA9IHRoaXMub3B0cy5pZCB8fCAnSW5zdGFncmFtJ1xuICAgIFByb3ZpZGVyLmluaXRQbHVnaW4odGhpcywgb3B0cylcbiAgICB0aGlzLmljb24gPSAoKSA9PiAoXG4gICAgICA8c3ZnIGFyaWEtaGlkZGVuPVwidHJ1ZVwiIGZvY3VzYWJsZT1cImZhbHNlXCIgd2lkdGg9XCIzMlwiIGhlaWdodD1cIjMyXCIgdmlld0JveD1cIjAgMCAzMiAzMlwiPlxuICAgICAgICA8ZyBmaWxsPVwibm9uZVwiIGZpbGxSdWxlPVwiZXZlbm9kZFwiPlxuICAgICAgICAgIDxyZWN0IGNsYXNzTmFtZT1cInVwcHktUHJvdmlkZXJJY29uQmdcIiBmaWxsPVwiI0UxMzA2Q1wiIHdpZHRoPVwiMzJcIiBoZWlnaHQ9XCIzMlwiIHJ4PVwiMTZcIiAvPlxuICAgICAgICAgIDxwYXRoIGQ9XCJNMTYgOC42MjJjMi40MDMgMCAyLjY4OC4wMDkgMy42MzcuMDUyLjg3Ny4wNCAxLjM1NC4xODcgMS42Ny4zMS4zOTIuMTQ0Ljc0NS4zNzQgMS4wMzYuNjczLjI5OS4yOS41MjkuNjQ0LjY3MyAxLjAzNS4xMjMuMzE3LjI3Ljc5NC4zMSAxLjY3MS4wNDMuOTUuMDUyIDEuMjM0LjA1MiAzLjYzN3MtLjAwOSAyLjY4OC0uMDUyIDMuNjM3Yy0uMDQuODc3LS4xODcgMS4zNTQtLjMxIDEuNjcxYTIuOTggMi45OCAwIDAgMS0xLjcwOCAxLjcwOGMtLjMxNy4xMjMtLjc5NC4yNy0xLjY3MS4zMS0uOTUuMDQzLTEuMjM0LjA1My0zLjYzNy4wNTNzLTIuNjg4LS4wMS0zLjYzNy0uMDUzYy0uODc3LS4wNC0xLjM1NC0uMTg3LTEuNjcxLS4zMWEyLjc4OCAyLjc4OCAwIDAgMS0xLjAzNS0uNjczIDIuNzg4IDIuNzg4IDAgMCAxLS42NzMtMS4wMzVjLS4xMjMtLjMxNy0uMjctLjc5NC0uMzEtMS42NzEtLjA0My0uOTQ5LS4wNTItMS4yMzQtLjA1Mi0zLjYzN3MuMDA5LTIuNjg4LjA1Mi0zLjYzN2MuMDQtLjg3Ny4xODctMS4zNTQuMzEtMS42Ny4xNDQtLjM5Mi4zNzQtLjc0NS42NzMtMS4wMzYuMjktLjI5OS42NDQtLjUyOSAxLjAzNS0uNjczLjMxNy0uMTIzLjc5NC0uMjcgMS42NzEtLjMxLjk1LS4wNDMgMS4yMzQtLjA1MiAzLjYzNy0uMDUyek0xNiA3Yy0yLjQ0NCAwLTIuNzUuMDEtMy43MS4wNTQtLjk1OS4wNDQtMS42MTMuMTk2LTIuMTg1LjQxOS0uNi4yMjUtMS4xNDUuNTgtMS41OTQgMS4wMzgtLjQ1OC40NS0uODEzLjk5My0xLjAzOSAxLjU5NC0uMjIyLjU3Mi0uMzc0IDEuMjI2LS40MTggMi4xODRDNy4wMSAxMy4yNSA3IDEzLjU1NiA3IDE2cy4wMSAyLjc1LjA1NCAzLjcxYy4wNDQuOTU5LjE5NiAxLjYxMy40MTkgMi4xODUuMjI2LjYuNTggMS4xNDUgMS4wMzggMS41OTQuNDUuNDU4Ljk5My44MTMgMS41OTQgMS4wMzguNTcyLjIyMyAxLjIyNy4zNzUgMi4xODQuNDE5Ljk2LjA0NCAxLjI2Ny4wNTQgMy43MTEuMDU0czIuNzUtLjAxIDMuNzEtLjA1NGMuOTU5LS4wNDQgMS42MTMtLjE5NiAyLjE4NS0uNDE5YTQuNjAyIDQuNjAyIDAgMCAwIDIuNjMyLTIuNjMyYy4yMjMtLjU3Mi4zNzUtMS4yMjYuNDE5LTIuMTg0LjA0NC0uOTYuMDU0LTEuMjY3LjA1NC0zLjcxMXMtLjAxLTIuNzUtLjA1NC0zLjcxYy0uMDQ0LS45NTktLjE5Ni0xLjYxMy0uNDE5LTIuMTg1QTQuNDEyIDQuNDEyIDAgMCAwIDIzLjQ5IDguNTFhNC40MTIgNC40MTIgMCAwIDAtMS41OTQtMS4wMzljLS41NzItLjIyMi0xLjIyNi0uMzc0LTIuMTg0LS40MThDMTguNzUgNy4wMSAxOC40NDQgNyAxNiA3em0wIDQuNWE0LjUgNC41IDAgMSAwIDAgOSA0LjUgNC41IDAgMCAwIDAtOXptMCA3LjQyMWEyLjkyMSAyLjkyMSAwIDEgMSAwLTUuODQyIDIuOTIxIDIuOTIxIDAgMCAxIDAgNS44NDJ6bTQuODc1LTYuNjcxYTEuMTI1IDEuMTI1IDAgMSAxIDAtMi4yNSAxLjEyNSAxLjEyNSAwIDAgMSAwIDIuMjV6XCIgZmlsbD1cIiNGRkZcIiAvPlxuICAgICAgICA8L2c+XG4gICAgICA8L3N2Zz5cbiAgICApXG5cbiAgICB0aGlzLmRlZmF1bHRMb2NhbGUgPSBsb2NhbGVcblxuICAgIHRoaXMuaTE4bkluaXQoKVxuICAgIHRoaXMudGl0bGUgPSB0aGlzLmkxOG4oJ3BsdWdpbk5hbWVJbnN0YWdyYW0nKVxuXG4gICAgdGhpcy5wcm92aWRlciA9IG5ldyBQcm92aWRlcih1cHB5LCB7XG4gICAgICBjb21wYW5pb25Vcmw6IHRoaXMub3B0cy5jb21wYW5pb25VcmwsXG4gICAgICBjb21wYW5pb25IZWFkZXJzOiB0aGlzLm9wdHMuY29tcGFuaW9uSGVhZGVycyxcbiAgICAgIGNvbXBhbmlvbktleXNQYXJhbXM6IHRoaXMub3B0cy5jb21wYW5pb25LZXlzUGFyYW1zLFxuICAgICAgY29tcGFuaW9uQ29va2llc1J1bGU6IHRoaXMub3B0cy5jb21wYW5pb25Db29raWVzUnVsZSxcbiAgICAgIHByb3ZpZGVyOiAnaW5zdGFncmFtJyxcbiAgICAgIHBsdWdpbklkOiB0aGlzLmlkLFxuICAgIH0pXG5cbiAgICB0aGlzLm9uRmlyc3RSZW5kZXIgPSB0aGlzLm9uRmlyc3RSZW5kZXIuYmluZCh0aGlzKVxuICAgIHRoaXMucmVuZGVyID0gdGhpcy5yZW5kZXIuYmluZCh0aGlzKVxuICB9XG5cbiAgaW5zdGFsbCAoKSB7XG4gICAgdGhpcy52aWV3ID0gbmV3IFByb3ZpZGVyVmlld3ModGhpcywge1xuICAgICAgcHJvdmlkZXI6IHRoaXMucHJvdmlkZXIsXG4gICAgICB2aWV3VHlwZTogJ2dyaWQnLFxuICAgICAgc2hvd1RpdGxlczogZmFsc2UsXG4gICAgICBzaG93RmlsdGVyOiBmYWxzZSxcbiAgICAgIHNob3dCcmVhZGNydW1iczogZmFsc2UsXG4gICAgfSlcblxuICAgIGNvbnN0IHsgdGFyZ2V0IH0gPSB0aGlzLm9wdHNcbiAgICBpZiAodGFyZ2V0KSB7XG4gICAgICB0aGlzLm1vdW50KHRhcmdldCwgdGhpcylcbiAgICB9XG4gIH1cblxuICB1bmluc3RhbGwgKCkge1xuICAgIHRoaXMudmlldy50ZWFyRG93bigpXG4gICAgdGhpcy51bm1vdW50KClcbiAgfVxuXG4gIG9uRmlyc3RSZW5kZXIgKCkge1xuICAgIHJldHVybiBQcm9taXNlLmFsbChbXG4gICAgICB0aGlzLnByb3ZpZGVyLmZldGNoUHJlQXV0aFRva2VuKCksXG4gICAgICB0aGlzLnZpZXcuZ2V0Rm9sZGVyKCdyZWNlbnQnKSxcbiAgICBdKVxuICB9XG5cbiAgcmVuZGVyIChzdGF0ZSkge1xuICAgIHJldHVybiB0aGlzLnZpZXcucmVuZGVyKHN0YXRlKVxuICB9XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgc3RyaW5nczoge1xuICAgIHBsdWdpbk5hbWVJbnN0YWdyYW06ICdJbnN0YWdyYW0nLFxuICB9LFxufVxuIiwiY29uc3QgeyBVSVBsdWdpbiB9ID0gcmVxdWlyZSgnQHVwcHkvY29yZScpXG5jb25zdCB7IFByb3ZpZGVyIH0gPSByZXF1aXJlKCdAdXBweS9jb21wYW5pb24tY2xpZW50JylcbmNvbnN0IHsgUHJvdmlkZXJWaWV3cyB9ID0gcmVxdWlyZSgnQHVwcHkvcHJvdmlkZXItdmlld3MnKVxuY29uc3QgeyBoIH0gPSByZXF1aXJlKCdwcmVhY3QnKVxuXG5jb25zdCBsb2NhbGUgPSByZXF1aXJlKCcuL2xvY2FsZScpXG5cbm1vZHVsZS5leHBvcnRzID0gY2xhc3MgT25lRHJpdmUgZXh0ZW5kcyBVSVBsdWdpbiB7XG4gIHN0YXRpYyBWRVJTSU9OID0gcmVxdWlyZSgnLi4vcGFja2FnZS5qc29uJykudmVyc2lvblxuXG4gIGNvbnN0cnVjdG9yICh1cHB5LCBvcHRzKSB7XG4gICAgc3VwZXIodXBweSwgb3B0cylcbiAgICB0aGlzLmlkID0gdGhpcy5vcHRzLmlkIHx8ICdPbmVEcml2ZSdcbiAgICBQcm92aWRlci5pbml0UGx1Z2luKHRoaXMsIG9wdHMpXG4gICAgdGhpcy50aXRsZSA9IHRoaXMub3B0cy50aXRsZSB8fCAnT25lRHJpdmUnXG4gICAgdGhpcy5pY29uID0gKCkgPT4gKFxuICAgICAgPHN2ZyBhcmlhLWhpZGRlbj1cInRydWVcIiBmb2N1c2FibGU9XCJmYWxzZVwiIHdpZHRoPVwiMzJcIiBoZWlnaHQ9XCIzMlwiIHZpZXdCb3g9XCIwIDAgMzIgMzJcIj5cbiAgICAgICAgPGcgZmlsbD1cIm5vbmVcIiBmaWxsUnVsZT1cImV2ZW5vZGRcIj5cbiAgICAgICAgICA8cmVjdCBjbGFzc05hbWU9XCJ1cHB5LVByb3ZpZGVySWNvbkJnXCIgd2lkdGg9XCIzMlwiIGhlaWdodD1cIjMyXCIgcng9XCIxNlwiIGZpbGw9XCIjMDI2MkMwXCIgLz5cbiAgICAgICAgICA8ZyBmaWxsPVwiI0ZGRlwiIGZpbGxSdWxlPVwibm9uemVyb1wiPlxuICAgICAgICAgICAgPHBhdGggZD1cIk0yNC4xNTcgMjJzMS40OTItLjIwNSAxLjc5LTEuNjU1YTIuNjI0IDIuNjI0IDAgMCAwIC4wMy0uODc4Yy0uMjItMS42NC0xLjk4OC0yLjAxLTEuOTg4LTIuMDFzLjMwNy0xLjc2NS0xLjMxMi0yLjY5Yy0xLjYyLS45MjUtMy4xIDAtMy4xIDBTMTguNzExIDEzIDE2LjM2NiAxM2MtMy4wMTYgMC0zLjUxOSAzLjQ0OC0zLjUxOSAzLjQ0OFMxMCAxNi42MTggMTAgMTkuMTRjMCAyLjUyMyAyLjU5NyAyLjg2IDIuNTk3IDIuODZoMTEuNTZ6XCIgLz5cbiAgICAgICAgICAgIDxwYXRoIGQ9XCJNOS40MjEgMTkuMjQ2YzAtMi4xOTcgMS42MDYtMy4xNTkgMi44NzEtMy40NzIuNDQtMS40NzcgMS42NTQtMy40MzkgNC4xMzUtMy40MzlIMTYuNDQ1YzEuNzIxIDAgMi43OS44MjMgMy4zNjggMS40NzZhMy45OSAzLjk5IDAgMCAxIDEuMTQ3LS4xNzFoLjAxbC4wMy4wMDJDMjEuMDE3IDEzLjUgMjAuNjkxIDEwIDE2Ljc1NyAxMGMtMi42OSAwLTMuNjM5IDIuMzQ1LTMuNjM5IDIuMzQ1cy0xLjk1LTEuNDgyLTMuOTU1LjU2N2MtMS4wMjggMS4wNTItLjc5IDIuNjY5LS43OSAyLjY2OVM2IDE1LjgyNCA2IDE4LjQxMkM2IDIwLjc1NyA4LjQ1MiAyMSA4LjQ1MiAyMWgxLjM3MmEzLjc3IDMuNzcgMCAwIDEtLjQwMy0xLjc1NHpcIiAvPlxuICAgICAgICAgIDwvZz5cbiAgICAgICAgPC9nPlxuICAgICAgPC9zdmc+XG4gICAgKVxuXG4gICAgdGhpcy5wcm92aWRlciA9IG5ldyBQcm92aWRlcih1cHB5LCB7XG4gICAgICBjb21wYW5pb25Vcmw6IHRoaXMub3B0cy5jb21wYW5pb25VcmwsXG4gICAgICBjb21wYW5pb25IZWFkZXJzOiB0aGlzLm9wdHMuY29tcGFuaW9uSGVhZGVycyxcbiAgICAgIGNvbXBhbmlvbkNvb2tpZXNSdWxlOiB0aGlzLm9wdHMuY29tcGFuaW9uQ29va2llc1J1bGUsXG4gICAgICBwcm92aWRlcjogJ29uZWRyaXZlJyxcbiAgICAgIHBsdWdpbklkOiB0aGlzLmlkLFxuICAgIH0pXG5cbiAgICB0aGlzLmRlZmF1bHRMb2NhbGUgPSBsb2NhbGVcblxuICAgIHRoaXMuaTE4bkluaXQoKVxuICAgIHRoaXMudGl0bGUgPSB0aGlzLmkxOG4oJ3BsdWdpbk5hbWVPbmVEcml2ZScpXG5cbiAgICB0aGlzLm9uRmlyc3RSZW5kZXIgPSB0aGlzLm9uRmlyc3RSZW5kZXIuYmluZCh0aGlzKVxuICAgIHRoaXMucmVuZGVyID0gdGhpcy5yZW5kZXIuYmluZCh0aGlzKVxuICB9XG5cbiAgaW5zdGFsbCAoKSB7XG4gICAgdGhpcy52aWV3ID0gbmV3IFByb3ZpZGVyVmlld3ModGhpcywge1xuICAgICAgcHJvdmlkZXI6IHRoaXMucHJvdmlkZXIsXG4gICAgfSlcblxuICAgIGNvbnN0IHsgdGFyZ2V0IH0gPSB0aGlzLm9wdHNcbiAgICBpZiAodGFyZ2V0KSB7XG4gICAgICB0aGlzLm1vdW50KHRhcmdldCwgdGhpcylcbiAgICB9XG4gIH1cblxuICB1bmluc3RhbGwgKCkge1xuICAgIHRoaXMudmlldy50ZWFyRG93bigpXG4gICAgdGhpcy51bm1vdW50KClcbiAgfVxuXG4gIG9uRmlyc3RSZW5kZXIgKCkge1xuICAgIHJldHVybiBQcm9taXNlLmFsbChbXG4gICAgICB0aGlzLnByb3ZpZGVyLmZldGNoUHJlQXV0aFRva2VuKCksXG4gICAgICB0aGlzLnZpZXcuZ2V0Rm9sZGVyKCksXG4gICAgXSlcbiAgfVxuXG4gIHJlbmRlciAoc3RhdGUpIHtcbiAgICByZXR1cm4gdGhpcy52aWV3LnJlbmRlcihzdGF0ZSlcbiAgfVxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSB7XG4gIHN0cmluZ3M6IHtcbiAgICBwbHVnaW5OYW1lT25lRHJpdmU6ICdPbmVEcml2ZScsXG4gIH0sXG59XG4iLCJjb25zdCB7IGgsIEZyYWdtZW50IH0gPSByZXF1aXJlKCdwcmVhY3QnKVxuXG5jb25zdCBCcmVhZGNydW1iID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHsgZ2V0Rm9sZGVyLCB0aXRsZSwgaXNMYXN0IH0gPSBwcm9wc1xuXG4gIHJldHVybiAoXG4gICAgPEZyYWdtZW50PlxuICAgICAgPGJ1dHRvblxuICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgY2xhc3NOYW1lPVwidXBweS11LXJlc2V0XCJcbiAgICAgICAgb25DbGljaz17Z2V0Rm9sZGVyfVxuICAgICAgPlxuICAgICAgICB7dGl0bGV9XG4gICAgICA8L2J1dHRvbj5cbiAgICAgIHshaXNMYXN0ID8gJyAvICcgOiAnJ31cbiAgICA8L0ZyYWdtZW50PlxuICApXG59XG5cbm1vZHVsZS5leHBvcnRzID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHsgZ2V0Rm9sZGVyLCB0aXRsZSwgYnJlYWRjcnVtYnNJY29uLCBkaXJlY3RvcmllcyB9ID0gcHJvcHNcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwidXBweS1Qcm92aWRlci1icmVhZGNydW1ic1wiPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJ1cHB5LVByb3ZpZGVyLWJyZWFkY3J1bWJzSWNvblwiPnticmVhZGNydW1ic0ljb259PC9kaXY+XG4gICAgICB7XG4gICAgICAgIGRpcmVjdG9yaWVzLm1hcCgoZGlyZWN0b3J5LCBpKSA9PiAoXG4gICAgICAgICAgPEJyZWFkY3J1bWJcbiAgICAgICAgICAgIGtleT17ZGlyZWN0b3J5LmlkfVxuICAgICAgICAgICAgZ2V0Rm9sZGVyPXsoKSA9PiBnZXRGb2xkZXIoZGlyZWN0b3J5LmlkKX1cbiAgICAgICAgICAgIHRpdGxlPXtpID09PSAwID8gdGl0bGUgOiBkaXJlY3RvcnkudGl0bGV9XG4gICAgICAgICAgICBpc0xhc3Q9e2kgKyAxID09PSBkaXJlY3Rvcmllcy5sZW5ndGh9XG4gICAgICAgICAgLz5cbiAgICAgICAgKSlcbiAgICAgIH1cbiAgICA8L2Rpdj5cbiAgKVxufVxuIiwiY29uc3QgeyBoIH0gPSByZXF1aXJlKCdwcmVhY3QnKVxuY29uc3QgY2xhc3NOYW1lcyA9IHJlcXVpcmUoJ2NsYXNzbmFtZXMnKVxuXG5jb25zdCByZW1vdGVGaWxlT2JqVG9Mb2NhbCA9IHJlcXVpcmUoJ0B1cHB5L3V0aWxzL2xpYi9yZW1vdGVGaWxlT2JqVG9Mb2NhbCcpXG5cbmNvbnN0IEZpbHRlciA9IHJlcXVpcmUoJy4vRmlsdGVyJylcbmNvbnN0IEZvb3RlckFjdGlvbnMgPSByZXF1aXJlKCcuL0Zvb3RlckFjdGlvbnMnKVxuY29uc3QgSXRlbSA9IHJlcXVpcmUoJy4vSXRlbS9pbmRleCcpXG5cbmNvbnN0IFZJUlRVQUxfU0hBUkVEX0RJUiA9ICdzaGFyZWQtd2l0aC1tZSdcblxuZnVuY3Rpb24gQnJvd3NlciAocHJvcHMpIHtcbiAgY29uc3Qge1xuICAgIGN1cnJlbnRTZWxlY3Rpb24sXG4gICAgZm9sZGVycyxcbiAgICBmaWxlcyxcbiAgICB1cHB5RmlsZXMsXG4gICAgdmlld1R5cGUsXG4gICAgaGVhZGVyQ29tcG9uZW50LFxuICAgIHNob3dCcmVhZGNydW1icyxcbiAgICBpc0NoZWNrZWQsXG4gICAgdG9nZ2xlQ2hlY2tib3gsXG4gICAgaGFuZGxlU2Nyb2xsLFxuICAgIHNob3dUaXRsZXMsXG4gICAgaTE4bixcbiAgICB2YWxpZGF0ZVJlc3RyaWN0aW9ucyxcbiAgICBzaG93RmlsdGVyLFxuICAgIGZpbHRlclF1ZXJ5LFxuICAgIGZpbHRlcklucHV0LFxuICAgIGdldE5leHRGb2xkZXIsXG4gICAgY2FuY2VsLFxuICAgIGRvbmUsXG4gICAgY29sdW1ucyxcbiAgfSA9IHByb3BzXG5cbiAgY29uc3Qgc2VsZWN0ZWQgPSBjdXJyZW50U2VsZWN0aW9uLmxlbmd0aFxuXG4gIHJldHVybiAoXG4gICAgPGRpdlxuICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWVzKFxuICAgICAgICAndXBweS1Qcm92aWRlckJyb3dzZXInLFxuICAgICAgICBgdXBweS1Qcm92aWRlckJyb3dzZXItdmlld1R5cGUtLSR7dmlld1R5cGV9YCxcbiAgICAgICl9XG4gICAgPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJ1cHB5LVByb3ZpZGVyQnJvd3Nlci1oZWFkZXJcIj5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lcyhcbiAgICAgICAgICAgICd1cHB5LVByb3ZpZGVyQnJvd3Nlci1oZWFkZXJCYXInLFxuICAgICAgICAgICAgIXNob3dCcmVhZGNydW1icyAmJiAndXBweS1Qcm92aWRlckJyb3dzZXItaGVhZGVyQmFyLS1zaW1wbGUnLFxuICAgICAgICAgICl9XG4gICAgICAgID5cbiAgICAgICAgICB7aGVhZGVyQ29tcG9uZW50fVxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuXG4gICAgICB7c2hvd0ZpbHRlciAmJiAoXG4gICAgICAgIDxGaWx0ZXJcbiAgICAgICAgICBpMThuPXtpMThufVxuICAgICAgICAgIGZpbHRlclF1ZXJ5PXtmaWx0ZXJRdWVyeX1cbiAgICAgICAgICBmaWx0ZXJJbnB1dD17ZmlsdGVySW5wdXR9XG4gICAgICAgIC8+XG4gICAgICApfVxuXG4gICAgICB7KCgpID0+IHtcbiAgICAgICAgaWYgKCFmb2xkZXJzLmxlbmd0aCAmJiAhZmlsZXMubGVuZ3RoKSB7XG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidXBweS1Qcm92aWRlci1lbXB0eVwiPlxuICAgICAgICAgICAgICB7cHJvcHMuaTE4bignbm9GaWxlc0ZvdW5kJyl9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICApXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidXBweS1Qcm92aWRlckJyb3dzZXItYm9keVwiPlxuICAgICAgICAgICAgPHVsXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cInVwcHktUHJvdmlkZXJCcm93c2VyLWxpc3RcIlxuICAgICAgICAgICAgICBvblNjcm9sbD17aGFuZGxlU2Nyb2xsfVxuICAgICAgICAgICAgICByb2xlPVwibGlzdGJveFwiXG4gICAgICAgICAgICAgIC8vIG1ha2luZyA8dWw+IG5vdCBmb2N1c2FibGUgZm9yIGZpcmVmb3hcbiAgICAgICAgICAgICAgdGFiSW5kZXg9XCItMVwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHtmb2xkZXJzLm1hcCgoZm9sZGVyKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEl0ZW0oe1xuICAgICAgICAgICAgICAgICAgY29sdW1ucyxcbiAgICAgICAgICAgICAgICAgIHNob3dUaXRsZXMsXG4gICAgICAgICAgICAgICAgICB2aWV3VHlwZSxcbiAgICAgICAgICAgICAgICAgIGkxOG4sXG4gICAgICAgICAgICAgICAgICBpZDogZm9sZGVyLmlkLFxuICAgICAgICAgICAgICAgICAgdGl0bGU6IGZvbGRlci5uYW1lLFxuICAgICAgICAgICAgICAgICAgZ2V0SXRlbUljb246ICgpID0+IGZvbGRlci5pY29uLFxuICAgICAgICAgICAgICAgICAgaXNDaGVja2VkOiBpc0NoZWNrZWQoZm9sZGVyKSxcbiAgICAgICAgICAgICAgICAgIHRvZ2dsZUNoZWNrYm94OiAoZXZlbnQpID0+IHRvZ2dsZUNoZWNrYm94KGV2ZW50LCBmb2xkZXIpLFxuICAgICAgICAgICAgICAgICAgdHlwZTogJ2ZvbGRlcicsXG4gICAgICAgICAgICAgICAgICBpc0Rpc2FibGVkOiBpc0NoZWNrZWQoZm9sZGVyKT8ubG9hZGluZyxcbiAgICAgICAgICAgICAgICAgIGlzQ2hlY2tib3hEaXNhYmxlZDogZm9sZGVyLmlkID09PSBWSVJUVUFMX1NIQVJFRF9ESVIsXG4gICAgICAgICAgICAgICAgICBoYW5kbGVGb2xkZXJDbGljazogKCkgPT4gZ2V0TmV4dEZvbGRlcihmb2xkZXIpLFxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIH0pfVxuXG4gICAgICAgICAgICAgIHtmaWxlcy5tYXAoKGZpbGUpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB2YWxpZGF0ZWQgPSB2YWxpZGF0ZVJlc3RyaWN0aW9ucyhcbiAgICAgICAgICAgICAgICAgIHJlbW90ZUZpbGVPYmpUb0xvY2FsKGZpbGUpLFxuICAgICAgICAgICAgICAgICAgWy4uLnVwcHlGaWxlcywgLi4uY3VycmVudFNlbGVjdGlvbl0sXG4gICAgICAgICAgICAgICAgKVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIEl0ZW0oe1xuICAgICAgICAgICAgICAgICAgaWQ6IGZpbGUuaWQsXG4gICAgICAgICAgICAgICAgICB0aXRsZTogZmlsZS5uYW1lLFxuICAgICAgICAgICAgICAgICAgYXV0aG9yOiBmaWxlLmF1dGhvcixcbiAgICAgICAgICAgICAgICAgIGdldEl0ZW1JY29uOiAoKSA9PiBmaWxlLmljb24sXG4gICAgICAgICAgICAgICAgICBpc0NoZWNrZWQ6IGlzQ2hlY2tlZChmaWxlKSxcbiAgICAgICAgICAgICAgICAgIHRvZ2dsZUNoZWNrYm94OiAoZXZlbnQpID0+IHRvZ2dsZUNoZWNrYm94KGV2ZW50LCBmaWxlKSxcbiAgICAgICAgICAgICAgICAgIGNvbHVtbnMsXG4gICAgICAgICAgICAgICAgICBzaG93VGl0bGVzLFxuICAgICAgICAgICAgICAgICAgdmlld1R5cGUsXG4gICAgICAgICAgICAgICAgICBpMThuLFxuICAgICAgICAgICAgICAgICAgdHlwZTogJ2ZpbGUnLFxuICAgICAgICAgICAgICAgICAgaXNEaXNhYmxlZDogIXZhbGlkYXRlZC5yZXN1bHQgJiYgIWlzQ2hlY2tlZChmaWxlKSxcbiAgICAgICAgICAgICAgICAgIHJlc3RyaWN0aW9uUmVhc29uOiB2YWxpZGF0ZWQucmVhc29uLFxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgPC91bD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKVxuICAgICAgfSkoKX1cblxuICAgICAge3NlbGVjdGVkID4gMCAmJiAoXG4gICAgICAgIDxGb290ZXJBY3Rpb25zXG4gICAgICAgICAgc2VsZWN0ZWQ9e3NlbGVjdGVkfVxuICAgICAgICAgIGRvbmU9e2RvbmV9XG4gICAgICAgICAgY2FuY2VsPXtjYW5jZWx9XG4gICAgICAgICAgaTE4bj17aTE4bn1cbiAgICAgICAgLz5cbiAgICAgICl9XG4gICAgPC9kaXY+XG4gIClcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBCcm93c2VyXG4iLCJjb25zdCB7IENvbXBvbmVudCwgdG9DaGlsZEFycmF5IH0gPSByZXF1aXJlKCdwcmVhY3QnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNsYXNzIENsb3NlV3JhcHBlciBleHRlbmRzIENvbXBvbmVudCB7XG4gIGNvbXBvbmVudFdpbGxVbm1vdW50ICgpIHtcbiAgICBjb25zdCB7IG9uVW5tb3VudCB9ID0gdGhpcy5wcm9wc1xuICAgIG9uVW5tb3VudCgpXG4gIH1cblxuICByZW5kZXIgKCkge1xuICAgIGNvbnN0IHsgY2hpbGRyZW4gfSA9IHRoaXMucHJvcHNcbiAgICByZXR1cm4gdG9DaGlsZEFycmF5KGNoaWxkcmVuKVswXVxuICB9XG59XG4iLCJjb25zdCB7IGgsIENvbXBvbmVudCB9ID0gcmVxdWlyZSgncHJlYWN0JylcblxubW9kdWxlLmV4cG9ydHMgPSBjbGFzcyBGaWx0ZXIgZXh0ZW5kcyBDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvciAocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcylcbiAgICB0aGlzLnByZXZlbnRFbnRlclByZXNzID0gdGhpcy5wcmV2ZW50RW50ZXJQcmVzcy5iaW5kKHRoaXMpXG4gIH1cblxuICBwcmV2ZW50RW50ZXJQcmVzcyAoZXYpIHtcbiAgICBpZiAoZXYua2V5Q29kZSA9PT0gMTMpIHtcbiAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpXG4gICAgICBldi5wcmV2ZW50RGVmYXVsdCgpXG4gICAgfVxuICB9XG5cbiAgcmVuZGVyICgpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJ1cHB5LVByb3ZpZGVyQnJvd3Nlci1zZWFyY2hcIj5cbiAgICAgICAgPGlucHV0XG4gICAgICAgICAgY2xhc3NOYW1lPVwidXBweS11LXJlc2V0IHVwcHktUHJvdmlkZXJCcm93c2VyLXNlYXJjaElucHV0XCJcbiAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgcGxhY2Vob2xkZXI9e3RoaXMucHJvcHMuaTE4bignZmlsdGVyJyl9XG4gICAgICAgICAgYXJpYS1sYWJlbD17dGhpcy5wcm9wcy5pMThuKCdmaWx0ZXInKX1cbiAgICAgICAgICBvbktleVVwPXt0aGlzLnByZXZlbnRFbnRlclByZXNzfVxuICAgICAgICAgIG9uS2V5RG93bj17dGhpcy5wcmV2ZW50RW50ZXJQcmVzc31cbiAgICAgICAgICBvbktleVByZXNzPXt0aGlzLnByZXZlbnRFbnRlclByZXNzfVxuICAgICAgICAgIG9uSW5wdXQ9eyhlKSA9PiB0aGlzLnByb3BzLmZpbHRlclF1ZXJ5KGUpfVxuICAgICAgICAgIHZhbHVlPXt0aGlzLnByb3BzLmZpbHRlcklucHV0fVxuICAgICAgICAvPlxuICAgICAgICA8c3ZnIGFyaWEtaGlkZGVuPVwidHJ1ZVwiIGZvY3VzYWJsZT1cImZhbHNlXCIgY2xhc3NOYW1lPVwidXBweS1jLWljb24gdXBweS1Qcm92aWRlckJyb3dzZXItc2VhcmNoSWNvblwiIHdpZHRoPVwiMTJcIiBoZWlnaHQ9XCIxMlwiIHZpZXdCb3g9XCIwIDAgMTIgMTJcIj5cbiAgICAgICAgICA8cGF0aCBkPVwiTTguNjM4IDcuOTlsMy4xNzIgMy4xNzJhLjQ5Mi40OTIgMCAxIDEtLjY5Ny42OTdMNy45MSA4LjY1NmE0Ljk3NyA0Ljk3NyAwIDAgMS0yLjk4My45ODNDMi4yMDYgOS42MzkgMCA3LjQ4MSAwIDQuODE5IDAgMi4xNTggMi4yMDYgMCA0LjkyNyAwYzIuNzIxIDAgNC45MjcgMi4xNTggNC45MjcgNC44MmE0Ljc0IDQuNzQgMCAwIDEtMS4yMTYgMy4xN3ptLTMuNzEuNjg1YzIuMTc2IDAgMy45NC0xLjcyNiAzLjk0LTMuODU2IDAtMi4xMjktMS43NjQtMy44NTUtMy45NC0zLjg1NUMyLjc1Ljk2NC45ODQgMi42OS45ODQgNC44MTljMCAyLjEzIDEuNzY1IDMuODU2IDMuOTQyIDMuODU2elwiIC8+XG4gICAgICAgIDwvc3ZnPlxuICAgICAgICB7dGhpcy5wcm9wcy5maWx0ZXJJbnB1dCAmJiAoXG4gICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgY2xhc3NOYW1lPVwidXBweS11LXJlc2V0IHVwcHktUHJvdmlkZXJCcm93c2VyLXNlYXJjaENsb3NlXCJcbiAgICAgICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgICAgICAgYXJpYS1sYWJlbD17dGhpcy5wcm9wcy5pMThuKCdyZXNldEZpbHRlcicpfVxuICAgICAgICAgICAgdGl0bGU9e3RoaXMucHJvcHMuaTE4bigncmVzZXRGaWx0ZXInKX1cbiAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMucHJvcHMuZmlsdGVyUXVlcnl9XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPHN2ZyBhcmlhLWhpZGRlbj1cInRydWVcIiBmb2N1c2FibGU9XCJmYWxzZVwiIGNsYXNzTmFtZT1cInVwcHktYy1pY29uXCIgdmlld0JveD1cIjAgMCAxOSAxOVwiPlxuICAgICAgICAgICAgICA8cGF0aCBkPVwiTTE3LjMxOCAxNy4yMzJMOS45NCA5Ljg1NCA5LjU4NiA5LjVsLS4zNTQuMzU0LTcuMzc4IDcuMzc4aC43MDdsLS42Mi0uNjJ2LjcwNkw5LjMxOCA5Ljk0bC4zNTQtLjM1NC0uMzU0LS4zNTRMMS45NCAxLjg1NHYuNzA3bC42Mi0uNjJoLS43MDZsNy4zNzggNy4zNzguMzU0LjM1NC4zNTQtLjM1NCA3LjM3OC03LjM3OGgtLjcwN2wuNjIyLjYydi0uNzA2TDkuODU0IDkuMjMybC0uMzU0LjM1NC4zNTQuMzU0IDcuMzc4IDcuMzc4LjcwOC0uNzA3LTcuMzgtNy4zNzh2LjcwOGw3LjM4LTcuMzguMzUzLS4zNTMtLjM1My0uMzUzLS42MjItLjYyMi0uMzUzLS4zNTMtLjM1NC4zNTItNy4zNzggNy4zOGguNzA4TDIuNTYgMS4yMyAyLjIwOC44OGwtLjM1My4zNTMtLjYyMi42Mi0uMzUzLjM1NS4zNTIuMzUzIDcuMzggNy4zOHYtLjcwOGwtNy4zOCA3LjM4LS4zNTMuMzUzLjM1Mi4zNTMuNjIyLjYyMi4zNTMuMzUzLjM1NC0uMzUzIDcuMzgtNy4zOGgtLjcwOGw3LjM4IDcuMzh6XCIgLz5cbiAgICAgICAgICAgIDwvc3ZnPlxuICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICApfVxuICAgICAgPC9kaXY+XG4gICAgKVxuICB9XG59XG4iLCJjb25zdCB7IGggfSA9IHJlcXVpcmUoJ3ByZWFjdCcpXG5cbm1vZHVsZS5leHBvcnRzID0gKHByb3BzKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJ1cHB5LVByb3ZpZGVyQnJvd3Nlci1mb290ZXJcIj5cbiAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwidXBweS11LXJlc2V0IHVwcHktYy1idG4gdXBweS1jLWJ0bi1wcmltYXJ5XCIgb25DbGljaz17cHJvcHMuZG9uZX0gdHlwZT1cImJ1dHRvblwiPlxuICAgICAgICB7cHJvcHMuaTE4bignc2VsZWN0WCcsIHtcbiAgICAgICAgICBzbWFydF9jb3VudDogcHJvcHMuc2VsZWN0ZWQsXG4gICAgICAgIH0pfVxuICAgICAgPC9idXR0b24+XG4gICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cInVwcHktdS1yZXNldCB1cHB5LWMtYnRuIHVwcHktYy1idG4tbGlua1wiIG9uQ2xpY2s9e3Byb3BzLmNhbmNlbH0gdHlwZT1cImJ1dHRvblwiPlxuICAgICAgICB7cHJvcHMuaTE4bignY2FuY2VsJyl9XG4gICAgICA8L2J1dHRvbj5cbiAgICA8L2Rpdj5cbiAgKVxufVxuIiwiY29uc3QgeyBoIH0gPSByZXF1aXJlKCdwcmVhY3QnKVxuXG5mdW5jdGlvbiBHcmlkTGlzdEl0ZW0gKHByb3BzKSB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc05hbWUsXG4gICAgaXNEaXNhYmxlZCxcbiAgICByZXN0cmljdGlvblJlYXNvbixcbiAgICBpc0NoZWNrZWQsXG4gICAgdGl0bGUsXG4gICAgaXRlbUljb25FbCxcbiAgICBzaG93VGl0bGVzLFxuICAgIHRvZ2dsZUNoZWNrYm94LFxuICAgIGlkLFxuICAgIGNoaWxkcmVuLFxuICB9ID0gcHJvcHNcblxuICByZXR1cm4gKFxuICAgIDxsaVxuICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWV9XG4gICAgICB0aXRsZT17aXNEaXNhYmxlZCA/IHJlc3RyaWN0aW9uUmVhc29uIDogbnVsbH1cbiAgICA+XG4gICAgICA8aW5wdXRcbiAgICAgICAgdHlwZT1cImNoZWNrYm94XCJcbiAgICAgICAgY2xhc3NOYW1lPXtgdXBweS11LXJlc2V0IHVwcHktUHJvdmlkZXJCcm93c2VySXRlbS1jaGVja2JveCAke1xuICAgICAgICAgIGlzQ2hlY2tlZCA/ICd1cHB5LVByb3ZpZGVyQnJvd3Nlckl0ZW0tY2hlY2tib3gtLWlzLWNoZWNrZWQnIDogJydcbiAgICAgICAgfSB1cHB5LVByb3ZpZGVyQnJvd3Nlckl0ZW0tY2hlY2tib3gtLWdyaWRgfVxuICAgICAgICBvbkNoYW5nZT17dG9nZ2xlQ2hlY2tib3h9XG4gICAgICAgIG5hbWU9XCJsaXN0aXRlbVwiXG4gICAgICAgIGlkPXtpZH1cbiAgICAgICAgY2hlY2tlZD17aXNDaGVja2VkfVxuICAgICAgICBkaXNhYmxlZD17aXNEaXNhYmxlZH1cbiAgICAgICAgZGF0YS11cHB5LXN1cGVyLWZvY3VzYWJsZVxuICAgICAgLz5cbiAgICAgIDxsYWJlbFxuICAgICAgICBodG1sRm9yPXtpZH1cbiAgICAgICAgYXJpYS1sYWJlbD17dGl0bGV9XG4gICAgICAgIGNsYXNzTmFtZT1cInVwcHktdS1yZXNldCB1cHB5LVByb3ZpZGVyQnJvd3Nlckl0ZW0taW5uZXJcIlxuICAgICAgPlxuICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJ1cHB5LVByb3ZpZGVyQnJvd3Nlckl0ZW0taW5uZXItcmVsYXRpdmVcIj5cbiAgICAgICAgICB7aXRlbUljb25FbH1cblxuICAgICAgICAgIHtzaG93VGl0bGVzICYmIHRpdGxlfVxuXG4gICAgICAgICAge2NoaWxkcmVufVxuICAgICAgICA8L3NwYW4+XG4gICAgICA8L2xhYmVsPlxuICAgIDwvbGk+XG4gIClcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBHcmlkTGlzdEl0ZW1cbiIsImNvbnN0IHsgaCB9ID0gcmVxdWlyZSgncHJlYWN0JylcblxuZnVuY3Rpb24gRmlsZUljb24gKCkge1xuICByZXR1cm4gKFxuICAgIDxzdmcgYXJpYS1oaWRkZW49XCJ0cnVlXCIgZm9jdXNhYmxlPVwiZmFsc2VcIiBjbGFzc05hbWU9XCJ1cHB5LWMtaWNvblwiIHdpZHRoPXsxMX0gaGVpZ2h0PXsxNC41fSB2aWV3Qm94PVwiMCAwIDQ0IDU4XCI+XG4gICAgICA8cGF0aCBkPVwiTTI3LjQzNy41MTdhMSAxIDAgMCAwLS4wOTQuMDNINC4yNUMyLjAzNy41NDguMjE3IDIuMzY4LjIxNyA0LjU4djQ4LjQwNWMwIDIuMjEyIDEuODIgNC4wMyA0LjAzIDQuMDNIMzkuMDNjMi4yMSAwIDQuMDMtMS44MTggNC4wMy00LjAzVjE1LjYxYTEgMSAwIDAgMC0uMDMtLjI4IDEgMSAwIDAgMCAwLS4wOTMgMSAxIDAgMCAwLS4wMy0uMDMyIDEgMSAwIDAgMCAwLS4wMyAxIDEgMCAwIDAtLjAzMi0uMDYzIDEgMSAwIDAgMC0uMDMtLjA2MyAxIDEgMCAwIDAtLjAzMiAwIDEgMSAwIDAgMC0uMDMtLjA2MyAxIDEgMCAwIDAtLjAzMi0uMDMgMSAxIDAgMCAwLS4wMy0uMDYzIDEgMSAwIDAgMC0uMDYzLS4wNjJsLTE0LjU5My0xNGExIDEgMCAwIDAtLjA2Mi0uMDYyQTEgMSAwIDAgMCAyOCAuNzA4YTEgMSAwIDAgMC0uMzc0LS4xNTcgMSAxIDAgMCAwLS4xNTYgMCAxIDEgMCAwIDAtLjAzLS4wM2wtLjAwMy0uMDAzek00LjI1IDIuNTQ3aDIyLjIxOHY5Ljk3YzAgMi4yMSAxLjgyIDQuMDMgNC4wMyA0LjAzaDEwLjU2NHYzNi40MzhhMi4wMiAyLjAyIDAgMCAxLTIuMDMyIDIuMDMySDQuMjVjLTEuMTMgMC0yLjAzMi0uOS0yLjAzMi0yLjAzMlY0LjU4YzAtMS4xMy45MDItMi4wMzIgMi4wMy0yLjAzMnptMjQuMjE4IDEuMzQ1bDEwLjM3NSA5LjkzNy43NS43MThIMzAuNWMtMS4xMyAwLTIuMDMyLS45LTIuMDMyLTIuMDNWMy44OXpcIiAvPlxuICAgIDwvc3ZnPlxuICApXG59XG5cbmZ1bmN0aW9uIEZvbGRlckljb24gKCkge1xuICByZXR1cm4gKFxuICAgIDxzdmcgYXJpYS1oaWRkZW49XCJ0cnVlXCIgZm9jdXNhYmxlPVwiZmFsc2VcIiBjbGFzc05hbWU9XCJ1cHB5LWMtaWNvblwiIHN0eWxlPXt7IG1pbldpZHRoOiAxNiwgbWFyZ2luUmlnaHQ6IDMgfX0gdmlld0JveD1cIjAgMCAyNzYuMTU3IDI3Ni4xNTdcIj5cbiAgICAgIDxwYXRoIGQ9XCJNMjczLjA4IDEwMS4zNzhjLTMuMy00LjY1LTguODYtNy4zMi0xNS4yNTQtNy4zMmgtMjQuMzRWNjcuNTljMC0xMC4yLTguMy0xOC41LTE4LjUtMTguNWgtODUuMzIyYy0zLjYzIDAtOS4yOTUtMi44NzUtMTEuNDM2LTUuODA1bC02LjM4Ni04LjczNWMtNC45ODItNi44MTQtMTUuMTA0LTExLjk1NC0yMy41NDYtMTEuOTU0SDU4LjczYy05LjI5MiAwLTE4LjYzOCA2LjYwOC0yMS43MzcgMTUuMzcybC0yLjAzMyA1Ljc1MmMtLjk1OCAyLjcxLTQuNzIgNS4zNy03LjU5NiA1LjM3SDE4LjVDOC4zIDQ5LjA5IDAgNTcuMzkgMCA2Ny41OXYxNjcuMDdjMCAuODg2LjE2IDEuNzMuNDQzIDIuNTIuMTUyIDMuMzA2IDEuMTggNi40MjQgMy4wNTMgOS4wNjQgMy4zIDQuNjUyIDguODYgNy4zMiAxNS4yNTUgNy4zMmgxODguNDg3YzExLjM5NSAwIDIzLjI3LTguNDI1IDI3LjAzNS0xOS4xOGw0MC42NzctMTE2LjE4OGMyLjExLTYuMDM1IDEuNDMtMTIuMTY0LTEuODctMTYuODE2ek0xOC41IDY0LjA4OGg4Ljg2NGM5LjI5NSAwIDE4LjY0LTYuNjA3IDIxLjczOC0xNS4zN2wyLjAzMi01Ljc1Yy45Ni0yLjcxMiA0LjcyMi01LjM3MyA3LjU5Ny01LjM3M2gyOS41NjVjMy42MyAwIDkuMjk1IDIuODc2IDExLjQzNyA1LjgwNmw2LjM4NiA4LjczNWM0Ljk4MiA2LjgxNSAxNS4xMDQgMTEuOTU0IDIzLjU0NiAxMS45NTRoODUuMzIyYzEuODk4IDAgMy41IDEuNjAyIDMuNSAzLjV2MjYuNDdINjkuMzRjLTExLjM5NSAwLTIzLjI3IDguNDIzLTI3LjAzNSAxOS4xNzhMMTUgMTkxLjIzVjY3LjU5YzAtMS44OTggMS42MDMtMy41IDMuNS0zLjV6bTI0Mi4yOSA0OS4xNWwtNDAuNjc2IDExNi4xODhjLTEuNjc0IDQuNzgtNy44MTIgOS4xMzUtMTIuODc3IDkuMTM1SDE4Ljc1Yy0xLjQ0NyAwLTIuNTc2LS4zNzItMy4wMi0uOTk3LS40NDItLjYyNS0uNDIyLTEuODE0LjA1Ny0zLjE4bDQwLjY3Ny0xMTYuMTljMS42NzQtNC43OCA3LjgxMi05LjEzNCAxMi44NzctOS4xMzRoMTg4LjQ4N2MxLjQ0OCAwIDIuNTc3LjM3MiAzLjAyLjk5Ny40NDMuNjI1LjQyMyAxLjgxNC0uMDU2IDMuMTh6XCIgLz5cbiAgICA8L3N2Zz5cbiAgKVxufVxuXG5mdW5jdGlvbiBWaWRlb0ljb24gKCkge1xuICByZXR1cm4gKFxuICAgIDxzdmcgYXJpYS1oaWRkZW49XCJ0cnVlXCIgZm9jdXNhYmxlPVwiZmFsc2VcIiBzdHlsZT17eyB3aWR0aDogMTYsIG1hcmdpblJpZ2h0OiA0IH19IHZpZXdCb3g9XCIwIDAgNTggNThcIj5cbiAgICAgIDxwYXRoIGQ9XCJNMzYuNTM3IDI4LjE1NmwtMTEtN2ExLjAwNSAxLjAwNSAwIDAgMC0xLjAyLS4wMzNDMjQuMiAyMS4zIDI0IDIxLjYzNSAyNCAyMnYxNGExIDEgMCAwIDAgMS41MzcuODQ0bDExLTdhMS4wMDIgMS4wMDIgMCAwIDAgMC0xLjY4OHpNMjYgMzQuMThWMjMuODJMMzQuMTM3IDI5IDI2IDM0LjE4elwiIC8+XG4gICAgICA8cGF0aCBkPVwiTTU3IDZIMWExIDEgMCAwIDAtMSAxdjQ0YTEgMSAwIDAgMCAxIDFoNTZhMSAxIDAgMCAwIDEtMVY3YTEgMSAwIDAgMC0xLTF6TTEwIDI4SDJ2LTloOHY5em0tOCAyaDh2OUgydi05em0xMCAxMFY4aDM0djQySDEyVjQwem00NC0xMmgtOHYtOWg4djl6bS04IDJoOHY5aC04di05em04LTIydjloLThWOGg4ek0yIDhoOHY5SDJWOHptMCA0MnYtOWg4djlIMnptNTQgMGgtOHYtOWg4djl6XCIgLz5cbiAgICA8L3N2Zz5cbiAgKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IChwcm9wcykgPT4ge1xuICBpZiAocHJvcHMuaXRlbUljb25TdHJpbmcgPT09IG51bGwpIHJldHVyblxuXG4gIHN3aXRjaCAocHJvcHMuaXRlbUljb25TdHJpbmcpIHtcbiAgICBjYXNlICdmaWxlJzpcbiAgICAgIHJldHVybiA8RmlsZUljb24gLz5cbiAgICBjYXNlICdmb2xkZXInOlxuICAgICAgcmV0dXJuIDxGb2xkZXJJY29uIC8+XG4gICAgY2FzZSAndmlkZW8nOlxuICAgICAgcmV0dXJuIDxWaWRlb0ljb24gLz5cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIDxpbWcgc3JjPXtwcm9wcy5pdGVtSWNvblN0cmluZ30gYWx0PXtwcm9wcy5hbHR9IC8+XG4gIH1cbn1cbiIsImNvbnN0IHsgaCB9ID0gcmVxdWlyZSgncHJlYWN0JylcblxuLy8gaWYgZm9sZGVyOlxuLy8gICArIGNoZWNrYm94IChzZWxlY3RzIGFsbCBmaWxlcyBmcm9tIGZvbGRlcilcbi8vICAgKyBmb2xkZXIgbmFtZSAob3BlbnMgZm9sZGVyKVxuLy8gaWYgZmlsZTpcbi8vICAgKyBjaGVja2JveCAoc2VsZWN0cyBmaWxlKVxuLy8gICArIGZpbGUgbmFtZSAoc2VsZWN0cyBmaWxlKVxuXG5mdW5jdGlvbiBMaXN0SXRlbSAocHJvcHMpIHtcbiAgY29uc3Qge1xuICAgIGNsYXNzTmFtZSxcbiAgICBpc0Rpc2FibGVkLFxuICAgIHJlc3RyaWN0aW9uUmVhc29uLFxuICAgIGlzQ2hlY2tib3hEaXNhYmxlZCxcbiAgICBpc0NoZWNrZWQsXG4gICAgdG9nZ2xlQ2hlY2tib3gsXG4gICAgdHlwZSxcbiAgICBpZCxcbiAgICBpdGVtSWNvbkVsLFxuICAgIHRpdGxlLFxuICAgIGhhbmRsZUZvbGRlckNsaWNrLFxuICAgIHNob3dUaXRsZXMsXG4gICAgaTE4bixcbiAgfSA9IHByb3BzXG5cbiAgcmV0dXJuIChcbiAgICA8bGlcbiAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lfVxuICAgICAgdGl0bGU9e2lzRGlzYWJsZWQgPyByZXN0cmljdGlvblJlYXNvbiA6IG51bGx9XG4gICAgPlxuICAgICAgeyFpc0NoZWNrYm94RGlzYWJsZWQgPyAoXG4gICAgICAgIDxpbnB1dFxuICAgICAgICAgIHR5cGU9XCJjaGVja2JveFwiXG4gICAgICAgICAgY2xhc3NOYW1lPXtgdXBweS11LXJlc2V0IHVwcHktUHJvdmlkZXJCcm93c2VySXRlbS1jaGVja2JveCAke2lzQ2hlY2tlZCA/ICd1cHB5LVByb3ZpZGVyQnJvd3Nlckl0ZW0tY2hlY2tib3gtLWlzLWNoZWNrZWQnIDogJyd9YH1cbiAgICAgICAgICBvbkNoYW5nZT17dG9nZ2xlQ2hlY2tib3h9XG4gICAgICAgICAgLy8gZm9yIHRoZSA8bGFiZWwvPlxuICAgICAgICAgIG5hbWU9XCJsaXN0aXRlbVwiXG4gICAgICAgICAgaWQ9e2lkfVxuICAgICAgICAgIGNoZWNrZWQ9e2lzQ2hlY2tlZH1cbiAgICAgICAgICBhcmlhLWxhYmVsPXt0eXBlID09PSAnZmlsZScgPyBudWxsIDogaTE4bignYWxsRmlsZXNGcm9tRm9sZGVyTmFtZWQnLCB7IG5hbWU6IHRpdGxlIH0pfVxuICAgICAgICAgIGRpc2FibGVkPXtpc0Rpc2FibGVkfVxuICAgICAgICAgIGRhdGEtdXBweS1zdXBlci1mb2N1c2FibGVcbiAgICAgICAgLz5cbiAgICAgICkgOiBudWxsfVxuXG4gICAgICB7dHlwZSA9PT0gJ2ZpbGUnID8gKFxuICAgICAgICAvLyBsYWJlbCBmb3IgYSBjaGVja2JveFxuICAgICAgICA8bGFiZWxcbiAgICAgICAgICBodG1sRm9yPXtpZH1cbiAgICAgICAgICBjbGFzc05hbWU9XCJ1cHB5LXUtcmVzZXQgdXBweS1Qcm92aWRlckJyb3dzZXJJdGVtLWlubmVyXCJcbiAgICAgICAgPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidXBweS1Qcm92aWRlckJyb3dzZXJJdGVtLWljb25XcmFwXCI+XG4gICAgICAgICAgICB7aXRlbUljb25FbH1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICB7c2hvd1RpdGxlcyAmJiB0aXRsZX1cbiAgICAgICAgPC9sYWJlbD5cbiAgICAgICkgOiAoXG4gICAgICAgIC8vIGJ1dHRvbiB0byBvcGVuIGEgZm9sZGVyXG4gICAgICAgIDxidXR0b25cbiAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgICBjbGFzc05hbWU9XCJ1cHB5LXUtcmVzZXQgdXBweS1Qcm92aWRlckJyb3dzZXJJdGVtLWlubmVyXCJcbiAgICAgICAgICBvbkNsaWNrPXtoYW5kbGVGb2xkZXJDbGlja31cbiAgICAgICAgICBhcmlhLWxhYmVsPXtpMThuKCdvcGVuRm9sZGVyTmFtZWQnLCB7IG5hbWU6IHRpdGxlIH0pfVxuICAgICAgICA+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ1cHB5LVByb3ZpZGVyQnJvd3Nlckl0ZW0taWNvbldyYXBcIj5cbiAgICAgICAgICAgIHtpdGVtSWNvbkVsfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIHtzaG93VGl0bGVzICYmIDxzcGFuPnt0aXRsZX08L3NwYW4+fVxuICAgICAgICA8L2J1dHRvbj5cbiAgICAgICl9XG4gICAgPC9saT5cbiAgKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IExpc3RJdGVtXG4iLCJjb25zdCB7IGggfSA9IHJlcXVpcmUoJ3ByZWFjdCcpXG5jb25zdCBjbGFzc05hbWVzID0gcmVxdWlyZSgnY2xhc3NuYW1lcycpXG5jb25zdCBJdGVtSWNvbiA9IHJlcXVpcmUoJy4vY29tcG9uZW50cy9JdGVtSWNvbicpXG5jb25zdCBHcmlkTGlzdEl0ZW0gPSByZXF1aXJlKCcuL2NvbXBvbmVudHMvR3JpZExpJylcbmNvbnN0IExpc3RJdGVtID0gcmVxdWlyZSgnLi9jb21wb25lbnRzL0xpc3RMaScpXG5cbm1vZHVsZS5leHBvcnRzID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHsgYXV0aG9yIH0gPSBwcm9wc1xuICBjb25zdCBpdGVtSWNvblN0cmluZyA9IHByb3BzLmdldEl0ZW1JY29uKClcblxuICBjb25zdCBjbGFzc05hbWUgPSBjbGFzc05hbWVzKFxuICAgICd1cHB5LVByb3ZpZGVyQnJvd3Nlckl0ZW0nLFxuICAgIHsgJ3VwcHktUHJvdmlkZXJCcm93c2VySXRlbS0tc2VsZWN0ZWQnOiBwcm9wcy5pc0NoZWNrZWQgfSxcbiAgICB7ICd1cHB5LVByb3ZpZGVyQnJvd3Nlckl0ZW0tLWRpc2FibGVkJzogcHJvcHMuaXNEaXNhYmxlZCB9LFxuICAgIHsgJ3VwcHktUHJvdmlkZXJCcm93c2VySXRlbS0tbm9QcmV2aWV3JzogaXRlbUljb25TdHJpbmcgPT09ICd2aWRlbycgfSxcbiAgKVxuXG4gIGNvbnN0IGl0ZW1JY29uRWwgPSA8SXRlbUljb24gaXRlbUljb25TdHJpbmc9e2l0ZW1JY29uU3RyaW5nfSAvPlxuXG4gIHN3aXRjaCAocHJvcHMudmlld1R5cGUpIHtcbiAgICBjYXNlICdncmlkJzpcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxHcmlkTGlzdEl0ZW1cbiAgICAgICAgICB7Li4ucHJvcHN9XG4gICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWV9XG4gICAgICAgICAgaXRlbUljb25FbD17aXRlbUljb25FbH1cbiAgICAgICAgLz5cbiAgICAgIClcbiAgICBjYXNlICdsaXN0JzpcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxMaXN0SXRlbSB7Li4ucHJvcHN9IGNsYXNzTmFtZT17Y2xhc3NOYW1lfSBpdGVtSWNvbkVsPXtpdGVtSWNvbkVsfSAvPlxuICAgICAgKVxuICAgIGNhc2UgJ3Vuc3BsYXNoJzpcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxHcmlkTGlzdEl0ZW0gey4uLnByb3BzfSBjbGFzc05hbWU9e2NsYXNzTmFtZX0gaXRlbUljb25FbD17aXRlbUljb25FbH0+XG4gICAgICAgICAgPGFcbiAgICAgICAgICAgIGhyZWY9e2Ake2F1dGhvci51cmx9P3V0bV9zb3VyY2U9Q29tcGFuaW9uJnV0bV9tZWRpdW09cmVmZXJyYWxgfVxuICAgICAgICAgICAgdGFyZ2V0PVwiX2JsYW5rXCJcbiAgICAgICAgICAgIHJlbD1cIm5vb3BlbmVyIG5vcmVmZXJyZXJcIlxuICAgICAgICAgICAgY2xhc3NOYW1lPVwidXBweS1Qcm92aWRlckJyb3dzZXJJdGVtLWF1dGhvclwiXG4gICAgICAgICAgPlxuICAgICAgICAgICAge2F1dGhvci5uYW1lfVxuICAgICAgICAgIDwvYT5cbiAgICAgICAgPC9HcmlkTGlzdEl0ZW0+XG4gICAgICApXG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVGhlcmUgaXMgbm8gc3VjaCB0eXBlICR7cHJvcHMudmlld1R5cGV9YClcbiAgfVxufVxuIiwiY29uc3QgeyBoIH0gPSByZXF1aXJlKCdwcmVhY3QnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IChwcm9wcykgPT4ge1xuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwidXBweS1Qcm92aWRlci1sb2FkaW5nXCI+XG4gICAgICA8c3Bhbj57cHJvcHMuaTE4bignbG9hZGluZycpfTwvc3Bhbj5cbiAgICA8L2Rpdj5cbiAgKVxufVxuIiwiY29uc3QgeyBoIH0gPSByZXF1aXJlKCdwcmVhY3QnKVxuXG5mdW5jdGlvbiBHb29nbGVJY29uICgpIHtcbiAgcmV0dXJuIChcbiAgICA8c3ZnXG4gICAgICB3aWR0aD1cIjI2XCJcbiAgICAgIGhlaWdodD1cIjI2XCJcbiAgICAgIHZpZXdCb3g9XCIwIDAgMjYgMjZcIlxuICAgICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gICAgPlxuICAgICAgPGcgZmlsbD1cIm5vbmVcIiBmaWxsLXJ1bGU9XCJldmVub2RkXCI+XG4gICAgICAgIDxjaXJjbGUgZmlsbD1cIiNGRkZcIiBjeD1cIjEzXCIgY3k9XCIxM1wiIHI9XCIxM1wiIC8+XG4gICAgICAgIDxwYXRoXG4gICAgICAgICAgZD1cIk0yMS42NCAxMy4yMDVjMC0uNjM5LS4wNTctMS4yNTItLjE2NC0xLjg0MUgxM3YzLjQ4MWg0Ljg0NGE0LjE0IDQuMTQgMCAwMS0xLjc5NiAyLjcxNnYyLjI1OWgyLjkwOGMxLjcwMi0xLjU2NyAyLjY4NC0zLjg3NSAyLjY4NC02LjYxNXpcIlxuICAgICAgICAgIGZpbGw9XCIjNDI4NUY0XCJcbiAgICAgICAgICBmaWxsLXJ1bGU9XCJub256ZXJvXCJcbiAgICAgICAgLz5cbiAgICAgICAgPHBhdGhcbiAgICAgICAgICBkPVwiTTEzIDIyYzIuNDMgMCA0LjQ2Ny0uODA2IDUuOTU2LTIuMThsLTIuOTA4LTIuMjU5Yy0uODA2LjU0LTEuODM3Ljg2LTMuMDQ4Ljg2LTIuMzQ0IDAtNC4zMjgtMS41ODQtNS4wMzYtMy43MTFINC45NTd2Mi4zMzJBOC45OTcgOC45OTcgMCAwMDEzIDIyelwiXG4gICAgICAgICAgZmlsbD1cIiMzNEE4NTNcIlxuICAgICAgICAgIGZpbGwtcnVsZT1cIm5vbnplcm9cIlxuICAgICAgICAvPlxuICAgICAgICA8cGF0aFxuICAgICAgICAgIGQ9XCJNNy45NjQgMTQuNzFBNS40MSA1LjQxIDAgMDE3LjY4MiAxM2MwLS41OTMuMTAyLTEuMTcuMjgyLTEuNzFWOC45NThINC45NTdBOC45OTYgOC45OTYgMCAwMDQgMTNjMCAxLjQ1Mi4zNDggMi44MjcuOTU3IDQuMDQybDMuMDA3LTIuMzMyelwiXG4gICAgICAgICAgZmlsbD1cIiNGQkJDMDVcIlxuICAgICAgICAgIGZpbGwtcnVsZT1cIm5vbnplcm9cIlxuICAgICAgICAvPlxuICAgICAgICA8cGF0aFxuICAgICAgICAgIGQ9XCJNMTMgNy41OGMxLjMyMSAwIDIuNTA4LjQ1NCAzLjQ0IDEuMzQ1bDIuNTgyLTIuNThDMTcuNDYzIDQuODkxIDE1LjQyNiA0IDEzIDRhOC45OTcgOC45OTcgMCAwMC04LjA0MyA0Ljk1OGwzLjAwNyAyLjMzMkM4LjY3MiA5LjE2MyAxMC42NTYgNy41OCAxMyA3LjU4elwiXG4gICAgICAgICAgZmlsbD1cIiNFQTQzMzVcIlxuICAgICAgICAgIGZpbGwtcnVsZT1cIm5vbnplcm9cIlxuICAgICAgICAvPlxuICAgICAgICA8cGF0aCBkPVwiTTQgNGgxOHYxOEg0elwiIC8+XG4gICAgICA8L2c+XG4gICAgPC9zdmc+XG4gIClcbn1cblxuZnVuY3Rpb24gQXV0aFZpZXcgKHByb3BzKSB7XG4gIGNvbnN0IHsgcGx1Z2luTmFtZSwgcGx1Z2luSWNvbiwgaTE4bkFycmF5LCBoYW5kbGVBdXRoIH0gPSBwcm9wc1xuICAvLyBJbiBvcmRlciB0byBjb21wbHkgd2l0aCBHb29nbGUncyBicmFuZCB3ZSBuZWVkIHRvIGNyZWF0ZSBhIGRpZmZlcmVudCBidXR0b25cbiAgLy8gZm9yIHRoZSBHb29nbGUgRHJpdmUgcGx1Z2luXG4gIGNvbnN0IGlzR29vZ2xlRHJpdmUgPSBwbHVnaW5OYW1lID09PSAnR29vZ2xlIERyaXZlJ1xuXG4gIGNvbnN0IHBsdWdpbk5hbWVDb21wb25lbnQgPSAoXG4gICAgPHNwYW4gY2xhc3NOYW1lPVwidXBweS1Qcm92aWRlci1hdXRoVGl0bGVOYW1lXCI+XG4gICAgICB7cGx1Z2luTmFtZX1cbiAgICAgIDxiciAvPlxuICAgIDwvc3Bhbj5cbiAgKVxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwidXBweS1Qcm92aWRlci1hdXRoXCI+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInVwcHktUHJvdmlkZXItYXV0aEljb25cIj57cGx1Z2luSWNvbigpfTwvZGl2PlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJ1cHB5LVByb3ZpZGVyLWF1dGhUaXRsZVwiPlxuICAgICAgICB7aTE4bkFycmF5KCdhdXRoZW50aWNhdGVXaXRoVGl0bGUnLCB7XG4gICAgICAgICAgcGx1Z2luTmFtZTogcGx1Z2luTmFtZUNvbXBvbmVudCxcbiAgICAgICAgfSl9XG4gICAgICA8L2Rpdj5cbiAgICAgIHtpc0dvb2dsZURyaXZlID8gKFxuICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICAgICAgY2xhc3NOYW1lPVwidXBweS11LXJlc2V0IHVwcHktYy1idG4gdXBweS1jLWJ0bi1wcmltYXJ5IHVwcHktUHJvdmlkZXItYXV0aEJ0biB1cHB5LVByb3ZpZGVyLWJ0bi1nb29nbGVcIlxuICAgICAgICAgIG9uQ2xpY2s9e2hhbmRsZUF1dGh9XG4gICAgICAgICAgZGF0YS11cHB5LXN1cGVyLWZvY3VzYWJsZVxuICAgICAgICA+XG4gICAgICAgICAgPEdvb2dsZUljb24gLz5cbiAgICAgICAgICB7aTE4bkFycmF5KCdzaWduSW5XaXRoR29vZ2xlJyl9XG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgKSA6IChcbiAgICAgICAgPGJ1dHRvblxuICAgICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgICAgIGNsYXNzTmFtZT1cInVwcHktdS1yZXNldCB1cHB5LWMtYnRuIHVwcHktYy1idG4tcHJpbWFyeSB1cHB5LVByb3ZpZGVyLWF1dGhCdG5cIlxuICAgICAgICAgIG9uQ2xpY2s9e2hhbmRsZUF1dGh9XG4gICAgICAgICAgZGF0YS11cHB5LXN1cGVyLWZvY3VzYWJsZVxuICAgICAgICA+XG4gICAgICAgICAge2kxOG5BcnJheSgnYXV0aGVudGljYXRlV2l0aCcsIHsgcGx1Z2luTmFtZSB9KX1cbiAgICAgICAgPC9idXR0b24+XG4gICAgICApfVxuICAgIDwvZGl2PlxuICApXG59XG5cbm1vZHVsZS5leHBvcnRzID0gQXV0aFZpZXdcbiIsImNvbnN0IFVzZXIgPSByZXF1aXJlKCcuL1VzZXInKVxuY29uc3QgQnJlYWRjcnVtYnMgPSByZXF1aXJlKCcuLi9CcmVhZGNydW1icycpXG5cbm1vZHVsZS5leHBvcnRzID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IGNvbXBvbmVudHMgPSBbXVxuICBpZiAocHJvcHMuc2hvd0JyZWFkY3J1bWJzKSB7XG4gICAgY29tcG9uZW50cy5wdXNoKEJyZWFkY3J1bWJzKHtcbiAgICAgIGdldEZvbGRlcjogcHJvcHMuZ2V0Rm9sZGVyLFxuICAgICAgZGlyZWN0b3JpZXM6IHByb3BzLmRpcmVjdG9yaWVzLFxuICAgICAgYnJlYWRjcnVtYnNJY29uOiBwcm9wcy5wbHVnaW5JY29uICYmIHByb3BzLnBsdWdpbkljb24oKSxcbiAgICAgIHRpdGxlOiBwcm9wcy50aXRsZSxcbiAgICB9KSlcbiAgfVxuXG4gIGNvbXBvbmVudHMucHVzaChVc2VyKHtcbiAgICBsb2dvdXQ6IHByb3BzLmxvZ291dCxcbiAgICB1c2VybmFtZTogcHJvcHMudXNlcm5hbWUsXG4gICAgaTE4bjogcHJvcHMuaTE4bixcbiAgfSkpXG5cbiAgcmV0dXJuIGNvbXBvbmVudHNcbn1cbiIsImNvbnN0IHsgaCB9ID0gcmVxdWlyZSgncHJlYWN0JylcbmNvbnN0IEF1dGhWaWV3ID0gcmVxdWlyZSgnLi9BdXRoVmlldycpXG5jb25zdCBIZWFkZXIgPSByZXF1aXJlKCcuL0hlYWRlcicpXG5jb25zdCBCcm93c2VyID0gcmVxdWlyZSgnLi4vQnJvd3NlcicpXG5jb25zdCBMb2FkZXJWaWV3ID0gcmVxdWlyZSgnLi4vTG9hZGVyJylcbmNvbnN0IENsb3NlV3JhcHBlciA9IHJlcXVpcmUoJy4uL0Nsb3NlV3JhcHBlcicpXG5jb25zdCBWaWV3ID0gcmVxdWlyZSgnLi4vVmlldycpXG5cbmZ1bmN0aW9uIGdldE9yaWdpbiAoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLWdsb2JhbHNcbiAgcmV0dXJuIGxvY2F0aW9uLm9yaWdpblxufVxuXG4vKipcbiAqIENsYXNzIHRvIGVhc2lseSBnZW5lcmF0ZSBnZW5lcmljIHZpZXdzIGZvciBQcm92aWRlciBwbHVnaW5zXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gY2xhc3MgUHJvdmlkZXJWaWV3IGV4dGVuZHMgVmlldyB7XG4gIHN0YXRpYyBWRVJTSU9OID0gcmVxdWlyZSgnLi4vLi4vcGFja2FnZS5qc29uJykudmVyc2lvblxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge29iamVjdH0gcGx1Z2luIGluc3RhbmNlIG9mIHRoZSBwbHVnaW5cbiAgICogQHBhcmFtIHtvYmplY3R9IG9wdHNcbiAgICovXG4gIGNvbnN0cnVjdG9yIChwbHVnaW4sIG9wdHMpIHtcbiAgICBzdXBlcihwbHVnaW4sIG9wdHMpXG4gICAgLy8gc2V0IGRlZmF1bHQgb3B0aW9uc1xuICAgIGNvbnN0IGRlZmF1bHRPcHRpb25zID0ge1xuICAgICAgdmlld1R5cGU6ICdsaXN0JyxcbiAgICAgIHNob3dUaXRsZXM6IHRydWUsXG4gICAgICBzaG93RmlsdGVyOiB0cnVlLFxuICAgICAgc2hvd0JyZWFkY3J1bWJzOiB0cnVlLFxuICAgIH1cblxuICAgIC8vIG1lcmdlIGRlZmF1bHQgb3B0aW9ucyB3aXRoIHRoZSBvbmVzIHNldCBieSB1c2VyXG4gICAgdGhpcy5vcHRzID0geyAuLi5kZWZhdWx0T3B0aW9ucywgLi4ub3B0cyB9XG5cbiAgICAvLyBMb2dpY1xuICAgIHRoaXMuZmlsdGVyUXVlcnkgPSB0aGlzLmZpbHRlclF1ZXJ5LmJpbmQodGhpcylcbiAgICB0aGlzLmdldEZvbGRlciA9IHRoaXMuZ2V0Rm9sZGVyLmJpbmQodGhpcylcbiAgICB0aGlzLmdldE5leHRGb2xkZXIgPSB0aGlzLmdldE5leHRGb2xkZXIuYmluZCh0aGlzKVxuICAgIHRoaXMubG9nb3V0ID0gdGhpcy5sb2dvdXQuYmluZCh0aGlzKVxuICAgIHRoaXMuaGFuZGxlQXV0aCA9IHRoaXMuaGFuZGxlQXV0aC5iaW5kKHRoaXMpXG4gICAgdGhpcy5oYW5kbGVTY3JvbGwgPSB0aGlzLmhhbmRsZVNjcm9sbC5iaW5kKHRoaXMpXG4gICAgdGhpcy5saXN0QWxsRmlsZXMgPSB0aGlzLmxpc3RBbGxGaWxlcy5iaW5kKHRoaXMpXG4gICAgdGhpcy5kb25lUGlja2luZyA9IHRoaXMuZG9uZVBpY2tpbmcuYmluZCh0aGlzKVxuXG4gICAgLy8gVmlzdWFsXG4gICAgdGhpcy5yZW5kZXIgPSB0aGlzLnJlbmRlci5iaW5kKHRoaXMpXG5cbiAgICAvLyBTZXQgZGVmYXVsdCBzdGF0ZSBmb3IgdGhlIHBsdWdpblxuICAgIHRoaXMucGx1Z2luLnNldFBsdWdpblN0YXRlKHtcbiAgICAgIGF1dGhlbnRpY2F0ZWQ6IGZhbHNlLFxuICAgICAgZmlsZXM6IFtdLFxuICAgICAgZm9sZGVyczogW10sXG4gICAgICBkaXJlY3RvcmllczogW10sXG4gICAgICBmaWx0ZXJJbnB1dDogJycsXG4gICAgICBpc1NlYXJjaFZpc2libGU6IGZhbHNlLFxuICAgICAgY3VycmVudFNlbGVjdGlvbjogW10sXG4gICAgfSlcbiAgfVxuXG4gIHRlYXJEb3duICgpIHtcbiAgICAvLyBOb3RoaW5nLlxuICB9XG5cbiAgI3VwZGF0ZUZpbGVzQW5kRm9sZGVycyAocmVzLCBmaWxlcywgZm9sZGVycykge1xuICAgIHRoaXMubmV4dFBhZ2VQYXRoID0gcmVzLm5leHRQYWdlUGF0aFxuICAgIHJlcy5pdGVtcy5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICBpZiAoaXRlbS5pc0ZvbGRlcikge1xuICAgICAgICBmb2xkZXJzLnB1c2goaXRlbSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZpbGVzLnB1c2goaXRlbSlcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgdGhpcy5wbHVnaW4uc2V0UGx1Z2luU3RhdGUoeyBmb2xkZXJzLCBmaWxlcyB9KVxuICB9XG5cbiAgLyoqXG4gICAqIEJhc2VkIG9uIGZvbGRlciBJRCwgZmV0Y2ggYSBuZXcgZm9sZGVyIGFuZCB1cGRhdGUgaXQgdG8gc3RhdGVcbiAgICpcbiAgICogQHBhcmFtICB7c3RyaW5nfSBpZCBGb2xkZXIgaWRcbiAgICogQHJldHVybnMge1Byb21pc2V9ICAgRm9sZGVycy9maWxlcyBpbiBmb2xkZXJcbiAgICovXG4gIGdldEZvbGRlciAoaWQsIG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5zaGFyZWRIYW5kbGVyLmxvYWRlcldyYXBwZXIoXG4gICAgICB0aGlzLnByb3ZpZGVyLmxpc3QoaWQpLFxuICAgICAgKHJlcykgPT4ge1xuICAgICAgICBjb25zdCBmb2xkZXJzID0gW11cbiAgICAgICAgY29uc3QgZmlsZXMgPSBbXVxuICAgICAgICBsZXQgdXBkYXRlZERpcmVjdG9yaWVzXG5cbiAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnBsdWdpbi5nZXRQbHVnaW5TdGF0ZSgpXG4gICAgICAgIGNvbnN0IGluZGV4ID0gc3RhdGUuZGlyZWN0b3JpZXMuZmluZEluZGV4KChkaXIpID0+IGlkID09PSBkaXIuaWQpXG5cbiAgICAgICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgICAgIHVwZGF0ZWREaXJlY3RvcmllcyA9IHN0YXRlLmRpcmVjdG9yaWVzLnNsaWNlKDAsIGluZGV4ICsgMSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB1cGRhdGVkRGlyZWN0b3JpZXMgPSBzdGF0ZS5kaXJlY3Rvcmllcy5jb25jYXQoW3sgaWQsIHRpdGxlOiBuYW1lIH1dKVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy51c2VybmFtZSA9IHJlcy51c2VybmFtZSB8fCB0aGlzLnVzZXJuYW1lXG4gICAgICAgIHRoaXMuI3VwZGF0ZUZpbGVzQW5kRm9sZGVycyhyZXMsIGZpbGVzLCBmb2xkZXJzKVxuICAgICAgICB0aGlzLnBsdWdpbi5zZXRQbHVnaW5TdGF0ZSh7IGRpcmVjdG9yaWVzOiB1cGRhdGVkRGlyZWN0b3JpZXMgfSlcbiAgICAgIH0sXG4gICAgICB0aGlzLmhhbmRsZUVycm9yLFxuICAgIClcbiAgfVxuXG4gIC8qKlxuICAgKiBGZXRjaGVzIG5ldyBmb2xkZXJcbiAgICpcbiAgICogQHBhcmFtICB7b2JqZWN0fSBmb2xkZXJcbiAgICovXG4gIGdldE5leHRGb2xkZXIgKGZvbGRlcikge1xuICAgIHRoaXMuZ2V0Rm9sZGVyKGZvbGRlci5yZXF1ZXN0UGF0aCwgZm9sZGVyLm5hbWUpXG4gICAgdGhpcy5sYXN0Q2hlY2tib3ggPSB1bmRlZmluZWRcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIHNlc3Npb24gdG9rZW4gb24gY2xpZW50IHNpZGUuXG4gICAqL1xuICBsb2dvdXQgKCkge1xuICAgIHRoaXMucHJvdmlkZXIubG9nb3V0KClcbiAgICAgIC50aGVuKChyZXMpID0+IHtcbiAgICAgICAgaWYgKHJlcy5vaykge1xuICAgICAgICAgIGlmICghcmVzLnJldm9rZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2UgPSB0aGlzLnBsdWdpbi51cHB5LmkxOG4oJ2NvbXBhbmlvblVuYXV0aG9yaXplSGludCcsIHtcbiAgICAgICAgICAgICAgcHJvdmlkZXI6IHRoaXMucGx1Z2luLnRpdGxlLFxuICAgICAgICAgICAgICB1cmw6IHJlcy5tYW51YWxfcmV2b2tlX3VybCxcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB0aGlzLnBsdWdpbi51cHB5LmluZm8obWVzc2FnZSwgJ2luZm8nLCA3MDAwKVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnN0IG5ld1N0YXRlID0ge1xuICAgICAgICAgICAgYXV0aGVudGljYXRlZDogZmFsc2UsXG4gICAgICAgICAgICBmaWxlczogW10sXG4gICAgICAgICAgICBmb2xkZXJzOiBbXSxcbiAgICAgICAgICAgIGRpcmVjdG9yaWVzOiBbXSxcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5wbHVnaW4uc2V0UGx1Z2luU3RhdGUobmV3U3RhdGUpXG4gICAgICAgIH1cbiAgICAgIH0pLmNhdGNoKHRoaXMuaGFuZGxlRXJyb3IpXG4gIH1cblxuICBmaWx0ZXJRdWVyeSAoZSkge1xuICAgIGNvbnN0IHN0YXRlID0gdGhpcy5wbHVnaW4uZ2V0UGx1Z2luU3RhdGUoKVxuICAgIHRoaXMucGx1Z2luLnNldFBsdWdpblN0YXRlKHsgLi4uc3RhdGUsIGZpbHRlcklucHV0OiBlID8gZS50YXJnZXQudmFsdWUgOiAnJyB9KVxuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgYWxsIGZpbGVzIGZvdW5kIGluc2lkZSBvZiBzcGVjaWZpZWQgZm9sZGVyLlxuICAgKlxuICAgKiBVc2VzIHNlcGFyYXRlZCBzdGF0ZSB3aGlsZSBmb2xkZXIgY29udGVudHMgYXJlIGJlaW5nIGZldGNoZWQgYW5kXG4gICAqIG1hbnRhaW5zIGxpc3Qgb2Ygc2VsZWN0ZWQgZm9sZGVycywgd2hpY2ggYXJlIHNlcGFyYXRlZCBmcm9tIGZpbGVzLlxuICAgKi9cbiAgYWRkRm9sZGVyIChmb2xkZXIpIHtcbiAgICBjb25zdCBmb2xkZXJJZCA9IHRoaXMucHJvdmlkZXJGaWxlVG9JZChmb2xkZXIpXG4gICAgY29uc3Qgc3RhdGUgPSB0aGlzLnBsdWdpbi5nZXRQbHVnaW5TdGF0ZSgpXG4gICAgY29uc3QgZm9sZGVycyA9IHsgLi4uc3RhdGUuc2VsZWN0ZWRGb2xkZXJzIH1cblxuICAgIGlmIChmb2xkZXJJZCBpbiBmb2xkZXJzICYmIGZvbGRlcnNbZm9sZGVySWRdLmxvYWRpbmcpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGZvbGRlcnNbZm9sZGVySWRdID0geyBsb2FkaW5nOiB0cnVlLCBmaWxlczogW10gfVxuXG4gICAgdGhpcy5wbHVnaW4uc2V0UGx1Z2luU3RhdGUoeyBzZWxlY3RlZEZvbGRlcnM6IHsgLi4uZm9sZGVycyB9IH0pXG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgICByZXR1cm4gdGhpcy5saXN0QWxsRmlsZXMoZm9sZGVyLnJlcXVlc3RQYXRoKS50aGVuKChmaWxlcykgPT4ge1xuICAgICAgbGV0IGNvdW50ID0gMFxuXG4gICAgICAvLyBJZiB0aGUgc2FtZSBmb2xkZXIgaXMgYWRkZWQgYWdhaW4sIHdlIGRvbid0IHdhbnQgdG8gc2VuZFxuICAgICAgLy8gWCBhbW91bnQgb2YgZHVwbGljYXRlIGZpbGUgbm90aWZpY2F0aW9ucywgd2Ugd2FudCB0byBzYXlcbiAgICAgIC8vIHRoZSBmb2xkZXIgd2FzIGFscmVhZHkgYWRkZWQuIFRoaXMgY2hlY2tzIGlmIGFsbCBmaWxlcyBhcmUgZHVwbGljYXRlLFxuICAgICAgLy8gaWYgdGhhdCdzIHRoZSBjYXNlLCB3ZSBkb24ndCBhZGQgdGhlIGZpbGVzLlxuICAgICAgZmlsZXMuZm9yRWFjaChmaWxlID0+IHtcbiAgICAgICAgY29uc3QgaWQgPSB0aGlzLnByb3ZpZGVyRmlsZVRvSWQoZmlsZSlcbiAgICAgICAgaWYgKCF0aGlzLnBsdWdpbi51cHB5LmNoZWNrSWZGaWxlQWxyZWFkeUV4aXN0cyhpZCkpIHtcbiAgICAgICAgICBjb3VudCsrXG4gICAgICAgIH1cbiAgICAgIH0pXG5cbiAgICAgIGlmIChjb3VudCA+IDApIHtcbiAgICAgICAgZmlsZXMuZm9yRWFjaCgoZmlsZSkgPT4gdGhpcy5hZGRGaWxlKGZpbGUpKVxuICAgICAgfVxuXG4gICAgICBjb25zdCBpZHMgPSBmaWxlcy5tYXAodGhpcy5wcm92aWRlckZpbGVUb0lkKVxuXG4gICAgICBmb2xkZXJzW2ZvbGRlcklkXSA9IHtcbiAgICAgICAgbG9hZGluZzogZmFsc2UsXG4gICAgICAgIGZpbGVzOiBpZHMsXG4gICAgICB9XG4gICAgICB0aGlzLnBsdWdpbi5zZXRQbHVnaW5TdGF0ZSh7IHNlbGVjdGVkRm9sZGVyczogZm9sZGVycyB9KVxuXG4gICAgICBsZXQgbWVzc2FnZVxuXG4gICAgICBpZiAoY291bnQgPT09IDApIHtcbiAgICAgICAgbWVzc2FnZSA9IHRoaXMucGx1Z2luLnVwcHkuaTE4bignZm9sZGVyQWxyZWFkeUFkZGVkJywge1xuICAgICAgICAgIGZvbGRlcjogZm9sZGVyLm5hbWUsXG4gICAgICAgIH0pXG4gICAgICB9IGVsc2UgaWYgKGZpbGVzLmxlbmd0aCkge1xuICAgICAgICBtZXNzYWdlID0gdGhpcy5wbHVnaW4udXBweS5pMThuKCdmb2xkZXJBZGRlZCcsIHtcbiAgICAgICAgICBzbWFydF9jb3VudDogY291bnQsIGZvbGRlcjogZm9sZGVyLm5hbWUsXG4gICAgICAgIH0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtZXNzYWdlID0gdGhpcy5wbHVnaW4udXBweS5pMThuKCdlbXB0eUZvbGRlckFkZGVkJylcbiAgICAgIH1cblxuICAgICAgdGhpcy5wbHVnaW4udXBweS5pbmZvKG1lc3NhZ2UpXG4gICAgfSkuY2F0Y2goKGUpID0+IHtcbiAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5wbHVnaW4uZ2V0UGx1Z2luU3RhdGUoKVxuICAgICAgY29uc3Qgc2VsZWN0ZWRGb2xkZXJzID0geyAuLi5zdGF0ZS5zZWxlY3RlZEZvbGRlcnMgfVxuICAgICAgZGVsZXRlIHNlbGVjdGVkRm9sZGVyc1tmb2xkZXJJZF1cbiAgICAgIHRoaXMucGx1Z2luLnNldFBsdWdpblN0YXRlKHsgc2VsZWN0ZWRGb2xkZXJzIH0pXG4gICAgICB0aGlzLmhhbmRsZUVycm9yKGUpXG4gICAgfSlcbiAgfVxuXG4gIGhhbmRsZUF1dGggKCkge1xuICAgIGNvbnN0IGF1dGhTdGF0ZSA9IGJ0b2EoSlNPTi5zdHJpbmdpZnkoeyBvcmlnaW46IGdldE9yaWdpbigpIH0pKVxuICAgIGNvbnN0IGNsaWVudFZlcnNpb24gPSBgQHVwcHkvcHJvdmlkZXItdmlld3M9JHtQcm92aWRlclZpZXcuVkVSU0lPTn1gXG4gICAgY29uc3QgbGluayA9IHRoaXMucHJvdmlkZXIuYXV0aFVybCh7IHN0YXRlOiBhdXRoU3RhdGUsIHVwcHlWZXJzaW9uczogY2xpZW50VmVyc2lvbiB9KVxuXG4gICAgY29uc3QgYXV0aFdpbmRvdyA9IHdpbmRvdy5vcGVuKGxpbmssICdfYmxhbmsnKVxuICAgIGNvbnN0IGhhbmRsZVRva2VuID0gKGUpID0+IHtcbiAgICAgIGlmICghdGhpcy4jaXNPcmlnaW5BbGxvd2VkKGUub3JpZ2luLCB0aGlzLnBsdWdpbi5vcHRzLmNvbXBhbmlvbkFsbG93ZWRIb3N0cykgfHwgZS5zb3VyY2UgIT09IGF1dGhXaW5kb3cpIHtcbiAgICAgICAgdGhpcy5wbHVnaW4udXBweS5sb2coYHJlamVjdGluZyBldmVudCBmcm9tICR7ZS5vcmlnaW59IHZzIGFsbG93ZWQgcGF0dGVybiAke3RoaXMucGx1Z2luLm9wdHMuY29tcGFuaW9uQWxsb3dlZEhvc3RzfWApXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICAvLyBDaGVjayBpZiBpdCdzIGEgc3RyaW5nIGJlZm9yZSBkb2luZyB0aGUgSlNPTi5wYXJzZSB0byBtYWludGFpbiBzdXBwb3J0XG4gICAgICAvLyBmb3Igb2xkZXIgQ29tcGFuaW9uIHZlcnNpb25zIHRoYXQgdXNlZCBvYmplY3QgcmVmZXJlbmNlc1xuICAgICAgY29uc3QgZGF0YSA9IHR5cGVvZiBlLmRhdGEgPT09ICdzdHJpbmcnID8gSlNPTi5wYXJzZShlLmRhdGEpIDogZS5kYXRhXG5cbiAgICAgIGlmIChkYXRhLmVycm9yKSB7XG4gICAgICAgIHRoaXMucGx1Z2luLnVwcHkubG9nKCdhdXRoIGFib3J0ZWQnKVxuICAgICAgICBjb25zdCB7IHVwcHkgfSA9IHRoaXMucGx1Z2luXG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSB1cHB5LmkxOG4oJ2F1dGhBYm9ydGVkJylcbiAgICAgICAgdXBweS5pbmZvKHsgbWVzc2FnZSB9LCAnd2FybmluZycsIDUwMDApXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICBpZiAoIWRhdGEudG9rZW4pIHtcbiAgICAgICAgdGhpcy5wbHVnaW4udXBweS5sb2coJ2RpZCBub3QgcmVjZWl2ZSB0b2tlbiBmcm9tIGF1dGggd2luZG93JylcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIGF1dGhXaW5kb3cuY2xvc2UoKVxuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBoYW5kbGVUb2tlbilcbiAgICAgIHRoaXMucHJvdmlkZXIuc2V0QXV0aFRva2VuKGRhdGEudG9rZW4pXG4gICAgICB0aGlzLnByZUZpcnN0UmVuZGVyKClcbiAgICB9XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBoYW5kbGVUb2tlbilcbiAgfVxuXG4gICNpc09yaWdpbkFsbG93ZWQgKG9yaWdpbiwgYWxsb3dlZE9yaWdpbikge1xuICAgIGNvbnN0IGdldFJlZ2V4ID0gKHZhbHVlKSA9PiB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cChgXiR7dmFsdWV9JGApXG4gICAgICB9IGlmICh2YWx1ZSBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgICAgICByZXR1cm4gdmFsdWVcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBwYXR0ZXJucyA9IEFycmF5LmlzQXJyYXkoYWxsb3dlZE9yaWdpbikgPyBhbGxvd2VkT3JpZ2luLm1hcChnZXRSZWdleCkgOiBbZ2V0UmVnZXgoYWxsb3dlZE9yaWdpbildXG4gICAgcmV0dXJuIHBhdHRlcm5zXG4gICAgICAuZmlsdGVyKChwYXR0ZXJuKSA9PiBwYXR0ZXJuICE9IG51bGwpIC8vIGxvb3NlIGNvbXBhcmlzb24gdG8gY2F0Y2ggdW5kZWZpbmVkXG4gICAgICAuc29tZSgocGF0dGVybikgPT4gcGF0dGVybi50ZXN0KG9yaWdpbikgfHwgcGF0dGVybi50ZXN0KGAke29yaWdpbn0vYCkpIC8vIGFsbG93aW5nIGZvciB0cmFpbGluZyAnLydcbiAgfVxuXG4gIGFzeW5jIGhhbmRsZVNjcm9sbCAoZXZlbnQpIHtcbiAgICBjb25zdCBwYXRoID0gdGhpcy5uZXh0UGFnZVBhdGggfHwgbnVsbFxuXG4gICAgaWYgKHRoaXMuc2hvdWxkSGFuZGxlU2Nyb2xsKGV2ZW50KSAmJiBwYXRoKSB7XG4gICAgICB0aGlzLmlzSGFuZGxpbmdTY3JvbGwgPSB0cnVlXG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wcm92aWRlci5saXN0KHBhdGgpXG4gICAgICAgIGNvbnN0IHsgZmlsZXMsIGZvbGRlcnMgfSA9IHRoaXMucGx1Z2luLmdldFBsdWdpblN0YXRlKClcblxuICAgICAgICB0aGlzLiN1cGRhdGVGaWxlc0FuZEZvbGRlcnMocmVzcG9uc2UsIGZpbGVzLCBmb2xkZXJzKVxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgdGhpcy5oYW5kbGVFcnJvcihlcnJvcilcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIHRoaXMuaXNIYW5kbGluZ1Njcm9sbCA9IGZhbHNlXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgbGlzdEFsbEZpbGVzIChwYXRoLCBmaWxlcyA9IG51bGwpIHtcbiAgICBmaWxlcyA9IGZpbGVzIHx8IFtdXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRoaXMucHJvdmlkZXIubGlzdChwYXRoKS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgcmVzLml0ZW1zLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgICAgICBpZiAoIWl0ZW0uaXNGb2xkZXIpIHtcbiAgICAgICAgICAgIGZpbGVzLnB1c2goaXRlbSlcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5hZGRGb2xkZXIoaXRlbSlcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIGNvbnN0IG1vcmVGaWxlcyA9IHJlcy5uZXh0UGFnZVBhdGggfHwgbnVsbFxuICAgICAgICBpZiAobW9yZUZpbGVzKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMubGlzdEFsbEZpbGVzKG1vcmVGaWxlcywgZmlsZXMpXG4gICAgICAgICAgICAudGhlbigoZmlsZXMpID0+IHJlc29sdmUoZmlsZXMpKVxuICAgICAgICAgICAgLmNhdGNoKGUgPT4gcmVqZWN0KGUpKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXNvbHZlKGZpbGVzKVxuICAgICAgfSkuY2F0Y2goZSA9PiByZWplY3QoZSkpXG4gICAgfSlcbiAgfVxuXG4gIGRvbmVQaWNraW5nICgpIHtcbiAgICBjb25zdCB7IGN1cnJlbnRTZWxlY3Rpb24gfSA9IHRoaXMucGx1Z2luLmdldFBsdWdpblN0YXRlKClcbiAgICBjb25zdCBwcm9taXNlcyA9IGN1cnJlbnRTZWxlY3Rpb24ubWFwKChmaWxlKSA9PiB7XG4gICAgICBpZiAoZmlsZS5pc0ZvbGRlcikge1xuICAgICAgICByZXR1cm4gdGhpcy5hZGRGb2xkZXIoZmlsZSlcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLmFkZEZpbGUoZmlsZSlcbiAgICB9KVxuXG4gICAgdGhpcy5zaGFyZWRIYW5kbGVyLmxvYWRlcldyYXBwZXIoUHJvbWlzZS5hbGwocHJvbWlzZXMpLCAoKSA9PiB7XG4gICAgICB0aGlzLmNsZWFyU2VsZWN0aW9uKClcbiAgICB9LCAoKSA9PiB7fSlcbiAgfVxuXG4gIHJlbmRlciAoc3RhdGUsIHZpZXdPcHRpb25zID0ge30pIHtcbiAgICBjb25zdCB7IGF1dGhlbnRpY2F0ZWQsIGRpZEZpcnN0UmVuZGVyIH0gPSB0aGlzLnBsdWdpbi5nZXRQbHVnaW5TdGF0ZSgpXG5cbiAgICBpZiAoIWRpZEZpcnN0UmVuZGVyKSB7XG4gICAgICB0aGlzLnByZUZpcnN0UmVuZGVyKClcbiAgICB9XG5cbiAgICBjb25zdCB0YXJnZXRWaWV3T3B0aW9ucyA9IHsgLi4udGhpcy5vcHRzLCAuLi52aWV3T3B0aW9ucyB9XG4gICAgY29uc3QgeyBmaWxlcywgZm9sZGVycywgZmlsdGVySW5wdXQsIGxvYWRpbmcsIGN1cnJlbnRTZWxlY3Rpb24gfSA9IHRoaXMucGx1Z2luLmdldFBsdWdpblN0YXRlKClcbiAgICBjb25zdCB7IGlzQ2hlY2tlZCwgdG9nZ2xlQ2hlY2tib3gsIGZpbHRlckl0ZW1zIH0gPSB0aGlzLnNoYXJlZEhhbmRsZXJcbiAgICBjb25zdCBoYXNJbnB1dCA9IGZpbHRlcklucHV0ICE9PSAnJ1xuICAgIGNvbnN0IGhlYWRlclByb3BzID0ge1xuICAgICAgc2hvd0JyZWFkY3J1bWJzOiB0YXJnZXRWaWV3T3B0aW9ucy5zaG93QnJlYWRjcnVtYnMsXG4gICAgICBnZXRGb2xkZXI6IHRoaXMuZ2V0Rm9sZGVyLFxuICAgICAgZGlyZWN0b3JpZXM6IHRoaXMucGx1Z2luLmdldFBsdWdpblN0YXRlKCkuZGlyZWN0b3JpZXMsXG4gICAgICBwbHVnaW5JY29uOiB0aGlzLnBsdWdpbi5pY29uLFxuICAgICAgdGl0bGU6IHRoaXMucGx1Z2luLnRpdGxlLFxuICAgICAgbG9nb3V0OiB0aGlzLmxvZ291dCxcbiAgICAgIHVzZXJuYW1lOiB0aGlzLnVzZXJuYW1lLFxuICAgICAgaTE4bjogdGhpcy5wbHVnaW4udXBweS5pMThuLFxuICAgIH1cblxuICAgIGNvbnN0IGJyb3dzZXJQcm9wcyA9IHtcbiAgICAgIGlzQ2hlY2tlZCxcbiAgICAgIHRvZ2dsZUNoZWNrYm94LFxuICAgICAgY3VycmVudFNlbGVjdGlvbixcbiAgICAgIGZpbGVzOiBoYXNJbnB1dCA/IGZpbHRlckl0ZW1zKGZpbGVzKSA6IGZpbGVzLFxuICAgICAgZm9sZGVyczogaGFzSW5wdXQgPyBmaWx0ZXJJdGVtcyhmb2xkZXJzKSA6IGZvbGRlcnMsXG4gICAgICB1c2VybmFtZTogdGhpcy51c2VybmFtZSxcbiAgICAgIGdldE5leHRGb2xkZXI6IHRoaXMuZ2V0TmV4dEZvbGRlcixcbiAgICAgIGdldEZvbGRlcjogdGhpcy5nZXRGb2xkZXIsXG4gICAgICBmaWx0ZXJJdGVtczogdGhpcy5zaGFyZWRIYW5kbGVyLmZpbHRlckl0ZW1zLFxuICAgICAgZmlsdGVyUXVlcnk6IHRoaXMuZmlsdGVyUXVlcnksXG4gICAgICBsb2dvdXQ6IHRoaXMubG9nb3V0LFxuICAgICAgaGFuZGxlU2Nyb2xsOiB0aGlzLmhhbmRsZVNjcm9sbCxcbiAgICAgIGxpc3RBbGxGaWxlczogdGhpcy5saXN0QWxsRmlsZXMsXG4gICAgICBkb25lOiB0aGlzLmRvbmVQaWNraW5nLFxuICAgICAgY2FuY2VsOiB0aGlzLmNhbmNlbFBpY2tpbmcsXG4gICAgICBoZWFkZXJDb21wb25lbnQ6IEhlYWRlcihoZWFkZXJQcm9wcyksXG4gICAgICB0aXRsZTogdGhpcy5wbHVnaW4udGl0bGUsXG4gICAgICB2aWV3VHlwZTogdGFyZ2V0Vmlld09wdGlvbnMudmlld1R5cGUsXG4gICAgICBzaG93VGl0bGVzOiB0YXJnZXRWaWV3T3B0aW9ucy5zaG93VGl0bGVzLFxuICAgICAgc2hvd0ZpbHRlcjogdGFyZ2V0Vmlld09wdGlvbnMuc2hvd0ZpbHRlcixcbiAgICAgIHNob3dCcmVhZGNydW1iczogdGFyZ2V0Vmlld09wdGlvbnMuc2hvd0JyZWFkY3J1bWJzLFxuICAgICAgcGx1Z2luSWNvbjogdGhpcy5wbHVnaW4uaWNvbixcbiAgICAgIGkxOG46IHRoaXMucGx1Z2luLnVwcHkuaTE4bixcbiAgICAgIHVwcHlGaWxlczogdGhpcy5wbHVnaW4udXBweS5nZXRGaWxlcygpLFxuICAgICAgdmFsaWRhdGVSZXN0cmljdGlvbnM6ICguLi5hcmdzKSA9PiB0aGlzLnBsdWdpbi51cHB5LnZhbGlkYXRlUmVzdHJpY3Rpb25zKC4uLmFyZ3MpLFxuICAgIH1cblxuICAgIGlmIChsb2FkaW5nKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8Q2xvc2VXcmFwcGVyIG9uVW5tb3VudD17dGhpcy5jbGVhclNlbGVjdGlvbn0+XG4gICAgICAgICAgPExvYWRlclZpZXcgaTE4bj17dGhpcy5wbHVnaW4udXBweS5pMThufSAvPlxuICAgICAgICA8L0Nsb3NlV3JhcHBlcj5cbiAgICAgIClcbiAgICB9XG5cbiAgICBpZiAoIWF1dGhlbnRpY2F0ZWQpIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxDbG9zZVdyYXBwZXIgb25Vbm1vdW50PXt0aGlzLmNsZWFyU2VsZWN0aW9ufT5cbiAgICAgICAgICA8QXV0aFZpZXdcbiAgICAgICAgICAgIHBsdWdpbk5hbWU9e3RoaXMucGx1Z2luLnRpdGxlfVxuICAgICAgICAgICAgcGx1Z2luSWNvbj17dGhpcy5wbHVnaW4uaWNvbn1cbiAgICAgICAgICAgIGhhbmRsZUF1dGg9e3RoaXMuaGFuZGxlQXV0aH1cbiAgICAgICAgICAgIGkxOG49e3RoaXMucGx1Z2luLnVwcHkuaTE4bn1cbiAgICAgICAgICAgIGkxOG5BcnJheT17dGhpcy5wbHVnaW4udXBweS5pMThuQXJyYXl9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9DbG9zZVdyYXBwZXI+XG4gICAgICApXG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxDbG9zZVdyYXBwZXIgb25Vbm1vdW50PXt0aGlzLmNsZWFyU2VsZWN0aW9ufT5cbiAgICAgICAgPEJyb3dzZXIgey4uLmJyb3dzZXJQcm9wc30gLz5cbiAgICAgIDwvQ2xvc2VXcmFwcGVyPlxuICAgIClcbiAgfVxufVxuIiwiY29uc3QgeyBoIH0gPSByZXF1aXJlKCdwcmVhY3QnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IChwcm9wcykgPT4ge1xuICByZXR1cm4gKFtcbiAgICA8c3BhbiBjbGFzc05hbWU9XCJ1cHB5LVByb3ZpZGVyQnJvd3Nlci11c2VyXCIga2V5PVwidXNlcm5hbWVcIj57cHJvcHMudXNlcm5hbWV9PC9zcGFuPixcbiAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBvbkNsaWNrPXtwcm9wcy5sb2dvdXR9IGNsYXNzTmFtZT1cInVwcHktdS1yZXNldCB1cHB5LVByb3ZpZGVyQnJvd3Nlci11c2VyTG9nb3V0XCIga2V5PVwibG9nb3V0XCI+XG4gICAgICB7cHJvcHMuaTE4bignbG9nT3V0Jyl9XG4gICAgPC9idXR0b24+LFxuICBdKVxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL1Byb3ZpZGVyVmlldycpXG4iLCJjb25zdCB7IGggfSA9IHJlcXVpcmUoJ3ByZWFjdCcpXG5cbm1vZHVsZS5leHBvcnRzID0gKHByb3BzKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgb25DbGljaz17cHJvcHMudHJpZ2dlclNlYXJjaElucHV0fSBjbGFzc05hbWU9XCJ1cHB5LXUtcmVzZXQgdXBweS1Qcm92aWRlckJyb3dzZXItdXNlckxvZ291dFwiPlxuICAgICAge3Byb3BzLmkxOG4oJ2JhY2tUb1NlYXJjaCcpfVxuICAgIDwvYnV0dG9uPlxuICApXG59XG4iLCJjb25zdCB7IGggfSA9IHJlcXVpcmUoJ3ByZWFjdCcpXG5cbm1vZHVsZS5leHBvcnRzID0gKHByb3BzKSA9PiB7XG4gIGxldCBpbnB1dFxuICBjb25zdCBoYW5kbGVLZXlQcmVzcyA9IChldikgPT4ge1xuICAgIGlmIChldi5rZXlDb2RlID09PSAxMykge1xuICAgICAgdmFsaWRhdGVBbmRTZWFyY2goKVxuICAgIH1cbiAgfVxuXG4gIGNvbnN0IHZhbGlkYXRlQW5kU2VhcmNoID0gKCkgPT4ge1xuICAgIGlmIChpbnB1dC52YWx1ZSkge1xuICAgICAgcHJvcHMuc2VhcmNoKGlucHV0LnZhbHVlKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJ1cHB5LVNlYXJjaFByb3ZpZGVyXCI+XG4gICAgICA8aW5wdXRcbiAgICAgICAgY2xhc3NOYW1lPVwidXBweS11LXJlc2V0IHVwcHktYy10ZXh0SW5wdXQgdXBweS1TZWFyY2hQcm92aWRlci1pbnB1dFwiXG4gICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgYXJpYS1sYWJlbD17cHJvcHMuaTE4bignZW50ZXJUZXh0VG9TZWFyY2gnKX1cbiAgICAgICAgcGxhY2Vob2xkZXI9e3Byb3BzLmkxOG4oJ2VudGVyVGV4dFRvU2VhcmNoJyl9XG4gICAgICAgIG9uS2V5VXA9e2hhbmRsZUtleVByZXNzfVxuICAgICAgICByZWY9eyhpbnB1dF8pID0+IHsgaW5wdXQgPSBpbnB1dF8gfX1cbiAgICAgICAgZGF0YS11cHB5LXN1cGVyLWZvY3VzYWJsZVxuICAgICAgLz5cbiAgICAgIDxidXR0b25cbiAgICAgICAgY2xhc3NOYW1lPVwidXBweS11LXJlc2V0IHVwcHktYy1idG4gdXBweS1jLWJ0bi1wcmltYXJ5IHVwcHktU2VhcmNoUHJvdmlkZXItc2VhcmNoQnV0dG9uXCJcbiAgICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICAgIG9uQ2xpY2s9e3ZhbGlkYXRlQW5kU2VhcmNofVxuICAgICAgPlxuICAgICAgICB7cHJvcHMuaTE4bignc2VhcmNoSW1hZ2VzJyl9XG4gICAgICA8L2J1dHRvbj5cbiAgICA8L2Rpdj5cbiAgKVxufVxuIiwiY29uc3QgeyBoIH0gPSByZXF1aXJlKCdwcmVhY3QnKVxuY29uc3QgU2VhcmNoSW5wdXQgPSByZXF1aXJlKCcuL0lucHV0VmlldycpXG5jb25zdCBCcm93c2VyID0gcmVxdWlyZSgnLi4vQnJvd3NlcicpXG5jb25zdCBMb2FkZXJWaWV3ID0gcmVxdWlyZSgnLi4vTG9hZGVyJylcbmNvbnN0IEhlYWRlciA9IHJlcXVpcmUoJy4vSGVhZGVyJylcbmNvbnN0IENsb3NlV3JhcHBlciA9IHJlcXVpcmUoJy4uL0Nsb3NlV3JhcHBlcicpXG5jb25zdCBWaWV3ID0gcmVxdWlyZSgnLi4vVmlldycpXG5cbi8qKlxuICogQ2xhc3MgdG8gZWFzaWx5IGdlbmVyYXRlIGdlbmVyaWMgdmlld3MgZm9yIFByb3ZpZGVyIHBsdWdpbnNcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBjbGFzcyBTZWFyY2hQcm92aWRlclZpZXcgZXh0ZW5kcyBWaWV3IHtcbiAgc3RhdGljIFZFUlNJT04gPSByZXF1aXJlKCcuLi8uLi9wYWNrYWdlLmpzb24nKS52ZXJzaW9uXG5cbiAgI3NlYXJjaFRlcm1cblxuICAvKipcbiAgICogQHBhcmFtIHtvYmplY3R9IHBsdWdpbiBpbnN0YW5jZSBvZiB0aGUgcGx1Z2luXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRzXG4gICAqL1xuICBjb25zdHJ1Y3RvciAocGx1Z2luLCBvcHRzKSB7XG4gICAgc3VwZXIocGx1Z2luLCBvcHRzKVxuXG4gICAgLy8gc2V0IGRlZmF1bHQgb3B0aW9uc1xuICAgIGNvbnN0IGRlZmF1bHRPcHRpb25zID0ge1xuICAgICAgdmlld1R5cGU6ICdncmlkJyxcbiAgICAgIHNob3dUaXRsZXM6IGZhbHNlLFxuICAgICAgc2hvd0ZpbHRlcjogZmFsc2UsXG4gICAgICBzaG93QnJlYWRjcnVtYnM6IGZhbHNlLFxuICAgIH1cblxuICAgIC8vIG1lcmdlIGRlZmF1bHQgb3B0aW9ucyB3aXRoIHRoZSBvbmVzIHNldCBieSB1c2VyXG4gICAgdGhpcy5vcHRzID0geyAuLi5kZWZhdWx0T3B0aW9ucywgLi4ub3B0cyB9XG5cbiAgICAvLyBMb2dpY1xuICAgIHRoaXMuc2VhcmNoID0gdGhpcy5zZWFyY2guYmluZCh0aGlzKVxuICAgIHRoaXMudHJpZ2dlclNlYXJjaElucHV0ID0gdGhpcy50cmlnZ2VyU2VhcmNoSW5wdXQuYmluZCh0aGlzKVxuICAgIHRoaXMuYWRkRmlsZSA9IHRoaXMuYWRkRmlsZS5iaW5kKHRoaXMpXG4gICAgdGhpcy5oYW5kbGVTY3JvbGwgPSB0aGlzLmhhbmRsZVNjcm9sbC5iaW5kKHRoaXMpXG4gICAgdGhpcy5kb25lUGlja2luZyA9IHRoaXMuZG9uZVBpY2tpbmcuYmluZCh0aGlzKVxuXG4gICAgLy8gVmlzdWFsXG4gICAgdGhpcy5yZW5kZXIgPSB0aGlzLnJlbmRlci5iaW5kKHRoaXMpXG5cbiAgICAvLyBTZXQgZGVmYXVsdCBzdGF0ZSBmb3IgdGhlIHBsdWdpblxuICAgIHRoaXMucGx1Z2luLnNldFBsdWdpblN0YXRlKHtcbiAgICAgIGlzSW5wdXRNb2RlOiB0cnVlLFxuICAgICAgZmlsZXM6IFtdLFxuICAgICAgZm9sZGVyczogW10sXG4gICAgICBkaXJlY3RvcmllczogW10sXG4gICAgICBmaWx0ZXJJbnB1dDogJycsXG4gICAgICBpc1NlYXJjaFZpc2libGU6IGZhbHNlLFxuICAgICAgY3VycmVudFNlbGVjdGlvbjogW10sXG4gICAgfSlcbiAgfVxuXG4gIHRlYXJEb3duICgpIHtcbiAgICAvLyBOb3RoaW5nLlxuICB9XG5cbiAgI3VwZGF0ZUZpbGVzQW5kSW5wdXRNb2RlIChyZXMsIGZpbGVzKSB7XG4gICAgdGhpcy5uZXh0UGFnZVF1ZXJ5ID0gcmVzLm5leHRQYWdlUXVlcnlcbiAgICB0aGlzLiNzZWFyY2hUZXJtID0gcmVzLnNlYXJjaGVkRm9yXG4gICAgcmVzLml0ZW1zLmZvckVhY2goKGl0ZW0pID0+IHsgZmlsZXMucHVzaChpdGVtKSB9KVxuICAgIHRoaXMucGx1Z2luLnNldFBsdWdpblN0YXRlKHsgaXNJbnB1dE1vZGU6IGZhbHNlLCBmaWxlcyB9KVxuICB9XG5cbiAgc2VhcmNoIChxdWVyeSkge1xuICAgIGlmIChxdWVyeSAmJiBxdWVyeSA9PT0gdGhpcy4jc2VhcmNoVGVybSkge1xuICAgICAgLy8gbm8gbmVlZCB0byBzZWFyY2ggYWdhaW4gYXMgdGhpcyBpcyB0aGUgc2FtZSBhcyB0aGUgcHJldmlvdXMgc2VhcmNoXG4gICAgICB0aGlzLnBsdWdpbi5zZXRQbHVnaW5TdGF0ZSh7IGlzSW5wdXRNb2RlOiBmYWxzZSB9KVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc2hhcmVkSGFuZGxlci5sb2FkZXJXcmFwcGVyKFxuICAgICAgdGhpcy5wcm92aWRlci5zZWFyY2gocXVlcnkpLFxuICAgICAgKHJlcykgPT4ge1xuICAgICAgICB0aGlzLiN1cGRhdGVGaWxlc0FuZElucHV0TW9kZShyZXMsIFtdKVxuICAgICAgfSxcbiAgICAgIHRoaXMuaGFuZGxlRXJyb3IsXG4gICAgKVxuICB9XG5cbiAgdHJpZ2dlclNlYXJjaElucHV0ICgpIHtcbiAgICB0aGlzLnBsdWdpbi5zZXRQbHVnaW5TdGF0ZSh7IGlzSW5wdXRNb2RlOiB0cnVlIH0pXG4gIH1cblxuICBhc3luYyBoYW5kbGVTY3JvbGwgKGV2ZW50KSB7XG4gICAgY29uc3QgcXVlcnkgPSB0aGlzLm5leHRQYWdlUXVlcnkgfHwgbnVsbFxuXG4gICAgaWYgKHRoaXMuc2hvdWxkSGFuZGxlU2Nyb2xsKGV2ZW50KSAmJiBxdWVyeSkge1xuICAgICAgdGhpcy5pc0hhbmRsaW5nU2Nyb2xsID0gdHJ1ZVxuXG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMucHJvdmlkZXIuc2VhcmNoKHRoaXMuI3NlYXJjaFRlcm0sIHF1ZXJ5KVxuICAgICAgICBjb25zdCB7IGZpbGVzIH0gPSB0aGlzLnBsdWdpbi5nZXRQbHVnaW5TdGF0ZSgpXG5cbiAgICAgICAgdGhpcy4jdXBkYXRlRmlsZXNBbmRJbnB1dE1vZGUocmVzcG9uc2UsIGZpbGVzKVxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgdGhpcy5oYW5kbGVFcnJvcihlcnJvcilcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIHRoaXMuaXNIYW5kbGluZ1Njcm9sbCA9IGZhbHNlXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZG9uZVBpY2tpbmcgKCkge1xuICAgIGNvbnN0IHsgY3VycmVudFNlbGVjdGlvbiB9ID0gdGhpcy5wbHVnaW4uZ2V0UGx1Z2luU3RhdGUoKVxuICAgIGNvbnN0IHByb21pc2VzID0gY3VycmVudFNlbGVjdGlvbi5tYXAoKGZpbGUpID0+IHRoaXMuYWRkRmlsZShmaWxlKSlcblxuICAgIHRoaXMuc2hhcmVkSGFuZGxlci5sb2FkZXJXcmFwcGVyKFByb21pc2UuYWxsKHByb21pc2VzKSwgKCkgPT4ge1xuICAgICAgdGhpcy5jbGVhclNlbGVjdGlvbigpXG4gICAgfSwgKCkgPT4ge30pXG4gIH1cblxuICByZW5kZXIgKHN0YXRlLCB2aWV3T3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3QgeyBkaWRGaXJzdFJlbmRlciwgaXNJbnB1dE1vZGUgfSA9IHRoaXMucGx1Z2luLmdldFBsdWdpblN0YXRlKClcblxuICAgIGlmICghZGlkRmlyc3RSZW5kZXIpIHtcbiAgICAgIHRoaXMucHJlRmlyc3RSZW5kZXIoKVxuICAgIH1cblxuICAgIGNvbnN0IHRhcmdldFZpZXdPcHRpb25zID0geyAuLi50aGlzLm9wdHMsIC4uLnZpZXdPcHRpb25zIH1cbiAgICBjb25zdCB7IGZpbGVzLCBmb2xkZXJzLCBmaWx0ZXJJbnB1dCwgbG9hZGluZywgY3VycmVudFNlbGVjdGlvbiB9ID0gdGhpcy5wbHVnaW4uZ2V0UGx1Z2luU3RhdGUoKVxuICAgIGNvbnN0IHsgaXNDaGVja2VkLCB0b2dnbGVDaGVja2JveCwgZmlsdGVySXRlbXMgfSA9IHRoaXMuc2hhcmVkSGFuZGxlclxuICAgIGNvbnN0IGhhc0lucHV0ID0gZmlsdGVySW5wdXQgIT09ICcnXG5cbiAgICBjb25zdCBicm93c2VyUHJvcHMgPSB7XG4gICAgICBpc0NoZWNrZWQsXG4gICAgICB0b2dnbGVDaGVja2JveCxcbiAgICAgIGN1cnJlbnRTZWxlY3Rpb24sXG4gICAgICBmaWxlczogaGFzSW5wdXQgPyBmaWx0ZXJJdGVtcyhmaWxlcykgOiBmaWxlcyxcbiAgICAgIGZvbGRlcnM6IGhhc0lucHV0ID8gZmlsdGVySXRlbXMoZm9sZGVycykgOiBmb2xkZXJzLFxuICAgICAgaGFuZGxlU2Nyb2xsOiB0aGlzLmhhbmRsZVNjcm9sbCxcbiAgICAgIGRvbmU6IHRoaXMuZG9uZVBpY2tpbmcsXG4gICAgICBjYW5jZWw6IHRoaXMuY2FuY2VsUGlja2luZyxcbiAgICAgIGhlYWRlckNvbXBvbmVudDogSGVhZGVyKHtcbiAgICAgICAgdHJpZ2dlclNlYXJjaElucHV0OiB0aGlzLnRyaWdnZXJTZWFyY2hJbnB1dCxcbiAgICAgICAgaTE4bjogdGhpcy5wbHVnaW4udXBweS5pMThuLFxuICAgICAgfSksXG4gICAgICB0aXRsZTogdGhpcy5wbHVnaW4udGl0bGUsXG4gICAgICB2aWV3VHlwZTogdGFyZ2V0Vmlld09wdGlvbnMudmlld1R5cGUsXG4gICAgICBzaG93VGl0bGVzOiB0YXJnZXRWaWV3T3B0aW9ucy5zaG93VGl0bGVzLFxuICAgICAgc2hvd0ZpbHRlcjogdGFyZ2V0Vmlld09wdGlvbnMuc2hvd0ZpbHRlcixcbiAgICAgIHNob3dCcmVhZGNydW1iczogdGFyZ2V0Vmlld09wdGlvbnMuc2hvd0JyZWFkY3J1bWJzLFxuICAgICAgcGx1Z2luSWNvbjogdGhpcy5wbHVnaW4uaWNvbixcbiAgICAgIGkxOG46IHRoaXMucGx1Z2luLnVwcHkuaTE4bixcbiAgICAgIHVwcHlGaWxlczogdGhpcy5wbHVnaW4udXBweS5nZXRGaWxlcygpLFxuICAgICAgdmFsaWRhdGVSZXN0cmljdGlvbnM6ICguLi5hcmdzKSA9PiB0aGlzLnBsdWdpbi51cHB5LnZhbGlkYXRlUmVzdHJpY3Rpb25zKC4uLmFyZ3MpLFxuICAgIH1cblxuICAgIGlmIChsb2FkaW5nKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8Q2xvc2VXcmFwcGVyIG9uVW5tb3VudD17dGhpcy5jbGVhclNlbGVjdGlvbn0+XG4gICAgICAgICAgPExvYWRlclZpZXcgaTE4bj17dGhpcy5wbHVnaW4udXBweS5pMThufSAvPlxuICAgICAgICA8L0Nsb3NlV3JhcHBlcj5cbiAgICAgIClcbiAgICB9XG5cbiAgICBpZiAoaXNJbnB1dE1vZGUpIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxDbG9zZVdyYXBwZXIgb25Vbm1vdW50PXt0aGlzLmNsZWFyU2VsZWN0aW9ufT5cbiAgICAgICAgICA8U2VhcmNoSW5wdXRcbiAgICAgICAgICAgIHNlYXJjaD17dGhpcy5zZWFyY2h9XG4gICAgICAgICAgICBpMThuPXt0aGlzLnBsdWdpbi51cHB5LmkxOG59XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9DbG9zZVdyYXBwZXI+XG4gICAgICApXG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxDbG9zZVdyYXBwZXIgb25Vbm1vdW50PXt0aGlzLmNsZWFyU2VsZWN0aW9ufT5cbiAgICAgICAgPEJyb3dzZXIgey4uLmJyb3dzZXJQcm9wc30gLz5cbiAgICAgIDwvQ2xvc2VXcmFwcGVyPlxuICAgIClcbiAgfVxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL1NlYXJjaFByb3ZpZGVyVmlldycpXG4iLCJjb25zdCByZW1vdGVGaWxlT2JqVG9Mb2NhbCA9IHJlcXVpcmUoJ0B1cHB5L3V0aWxzL2xpYi9yZW1vdGVGaWxlT2JqVG9Mb2NhbCcpXG5cbm1vZHVsZS5leHBvcnRzID0gY2xhc3MgU2hhcmVkSGFuZGxlciB7XG4gIGNvbnN0cnVjdG9yIChwbHVnaW4pIHtcbiAgICB0aGlzLnBsdWdpbiA9IHBsdWdpblxuICAgIHRoaXMuZmlsdGVySXRlbXMgPSB0aGlzLmZpbHRlckl0ZW1zLmJpbmQodGhpcylcbiAgICB0aGlzLnRvZ2dsZUNoZWNrYm94ID0gdGhpcy50b2dnbGVDaGVja2JveC5iaW5kKHRoaXMpXG4gICAgdGhpcy5pc0NoZWNrZWQgPSB0aGlzLmlzQ2hlY2tlZC5iaW5kKHRoaXMpXG4gICAgdGhpcy5sb2FkZXJXcmFwcGVyID0gdGhpcy5sb2FkZXJXcmFwcGVyLmJpbmQodGhpcylcbiAgfVxuXG4gIGZpbHRlckl0ZW1zIChpdGVtcykge1xuICAgIGNvbnN0IHN0YXRlID0gdGhpcy5wbHVnaW4uZ2V0UGx1Z2luU3RhdGUoKVxuICAgIGlmICghc3RhdGUuZmlsdGVySW5wdXQgfHwgc3RhdGUuZmlsdGVySW5wdXQgPT09ICcnKSB7XG4gICAgICByZXR1cm4gaXRlbXNcbiAgICB9XG4gICAgcmV0dXJuIGl0ZW1zLmZpbHRlcigoZm9sZGVyKSA9PiB7XG4gICAgICByZXR1cm4gZm9sZGVyLm5hbWUudG9Mb3dlckNhc2UoKS5pbmRleE9mKHN0YXRlLmZpbHRlcklucHV0LnRvTG93ZXJDYXNlKCkpICE9PSAtMVxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogVG9nZ2xlcyBmaWxlL2ZvbGRlciBjaGVja2JveCB0byBvbi9vZmYgc3RhdGUgd2hpbGUgdXBkYXRpbmcgZmlsZXMgbGlzdC5cbiAgICpcbiAgICogTm90ZSB0aGF0IHNvbWUgZXh0cmEgY29tcGxleGl0eSBjb21lcyBmcm9tIHN1cHBvcnRpbmcgc2hpZnQrY2xpY2sgdG9cbiAgICogdG9nZ2xlIG11bHRpcGxlIGNoZWNrYm94ZXMgYXQgb25jZSwgd2hpY2ggaXMgZG9uZSBieSBnZXR0aW5nIGFsbCBmaWxlc1xuICAgKiBpbiBiZXR3ZWVuIGxhc3QgY2hlY2tlZCBmaWxlIGFuZCBjdXJyZW50IG9uZS5cbiAgICovXG4gIHRvZ2dsZUNoZWNrYm94IChlLCBmaWxlKSB7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKVxuICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgIGUuY3VycmVudFRhcmdldC5mb2N1cygpXG4gICAgY29uc3QgeyBmb2xkZXJzLCBmaWxlcyB9ID0gdGhpcy5wbHVnaW4uZ2V0UGx1Z2luU3RhdGUoKVxuICAgIGNvbnN0IGl0ZW1zID0gdGhpcy5maWx0ZXJJdGVtcyhmb2xkZXJzLmNvbmNhdChmaWxlcykpXG5cbiAgICAvLyBTaGlmdC1jbGlja2luZyBzZWxlY3RzIGEgc2luZ2xlIGNvbnNlY3V0aXZlIGxpc3Qgb2YgaXRlbXNcbiAgICAvLyBzdGFydGluZyBhdCB0aGUgcHJldmlvdXMgY2xpY2sgYW5kIGRlc2VsZWN0cyBldmVyeXRoaW5nIGVsc2UuXG4gICAgaWYgKHRoaXMubGFzdENoZWNrYm94ICYmIGUuc2hpZnRLZXkpIHtcbiAgICAgIGNvbnN0IHByZXZJbmRleCA9IGl0ZW1zLmluZGV4T2YodGhpcy5sYXN0Q2hlY2tib3gpXG4gICAgICBjb25zdCBjdXJyZW50SW5kZXggPSBpdGVtcy5pbmRleE9mKGZpbGUpXG4gICAgICBjb25zdCBjdXJyZW50U2VsZWN0aW9uID0gKHByZXZJbmRleCA8IGN1cnJlbnRJbmRleClcbiAgICAgICAgPyBpdGVtcy5zbGljZShwcmV2SW5kZXgsIGN1cnJlbnRJbmRleCArIDEpXG4gICAgICAgIDogaXRlbXMuc2xpY2UoY3VycmVudEluZGV4LCBwcmV2SW5kZXggKyAxKVxuICAgICAgY29uc3QgcmVkdWNlZEN1cnJlbnRTZWxlY3Rpb24gPSBbXVxuXG4gICAgICAvLyBDaGVjayByZXN0cmljdGlvbnMgb24gZWFjaCBmaWxlIGluIGN1cnJlbnRTZWxlY3Rpb24sXG4gICAgICAvLyByZWR1Y2UgaXQgdG8gb25seSBjb250YWluIGZpbGVzIHRoYXQgcGFzcyByZXN0cmljdGlvbnNcbiAgICAgIGZvciAoY29uc3QgaXRlbSBvZiBjdXJyZW50U2VsZWN0aW9uKSB7XG4gICAgICAgIGNvbnN0IHsgdXBweSB9ID0gdGhpcy5wbHVnaW5cbiAgICAgICAgY29uc3QgdmFsaWRhdGVkUmVzdHJpY3Rpb25zID0gdXBweS52YWxpZGF0ZVJlc3RyaWN0aW9ucyhcbiAgICAgICAgICByZW1vdGVGaWxlT2JqVG9Mb2NhbChpdGVtKSxcbiAgICAgICAgICBbLi4udXBweS5nZXRGaWxlcygpLCAuLi5yZWR1Y2VkQ3VycmVudFNlbGVjdGlvbl0sXG4gICAgICAgIClcbiAgICAgICAgaWYgKHZhbGlkYXRlZFJlc3RyaWN0aW9ucy5yZXN1bHQpIHtcbiAgICAgICAgICByZWR1Y2VkQ3VycmVudFNlbGVjdGlvbi5wdXNoKGl0ZW0pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdXBweS5pbmZvKHsgbWVzc2FnZTogdmFsaWRhdGVkUmVzdHJpY3Rpb25zLnJlYXNvbiB9LCAnZXJyb3InLCB1cHB5Lm9wdHMuaW5mb1RpbWVvdXQpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMucGx1Z2luLnNldFBsdWdpblN0YXRlKHsgY3VycmVudFNlbGVjdGlvbjogcmVkdWNlZEN1cnJlbnRTZWxlY3Rpb24gfSlcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHRoaXMubGFzdENoZWNrYm94ID0gZmlsZVxuICAgIGNvbnN0IHsgY3VycmVudFNlbGVjdGlvbiB9ID0gdGhpcy5wbHVnaW4uZ2V0UGx1Z2luU3RhdGUoKVxuICAgIGlmICh0aGlzLmlzQ2hlY2tlZChmaWxlKSkge1xuICAgICAgdGhpcy5wbHVnaW4uc2V0UGx1Z2luU3RhdGUoe1xuICAgICAgICBjdXJyZW50U2VsZWN0aW9uOiBjdXJyZW50U2VsZWN0aW9uLmZpbHRlcigoaXRlbSkgPT4gaXRlbS5pZCAhPT0gZmlsZS5pZCksXG4gICAgICB9KVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnBsdWdpbi5zZXRQbHVnaW5TdGF0ZSh7XG4gICAgICAgIGN1cnJlbnRTZWxlY3Rpb246IGN1cnJlbnRTZWxlY3Rpb24uY29uY2F0KFtmaWxlXSksXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIGlzQ2hlY2tlZCAoZmlsZSkge1xuICAgIGNvbnN0IHsgY3VycmVudFNlbGVjdGlvbiB9ID0gdGhpcy5wbHVnaW4uZ2V0UGx1Z2luU3RhdGUoKVxuICAgIC8vIGNvbXBhcmluZyBpZCBpbnN0ZWFkIG9mIHRoZSBmaWxlIG9iamVjdCwgYmVjYXVzZSB0aGUgcmVmZXJlbmNlIHRvIHRoZSBvYmplY3RcbiAgICAvLyBjaGFuZ2VzIHdoZW4gd2Ugc3dpdGNoIGZvbGRlcnMsIGFuZCB0aGUgZmlsZSBsaXN0IGlzIHVwZGF0ZWRcbiAgICByZXR1cm4gY3VycmVudFNlbGVjdGlvbi5zb21lKChpdGVtKSA9PiBpdGVtLmlkID09PSBmaWxlLmlkKVxuICB9XG5cbiAgbG9hZGVyV3JhcHBlciAocHJvbWlzZSwgdGhlbiwgY2F0Y2hfKSB7XG4gICAgcHJvbWlzZVxuICAgICAgLnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgICAgICB0aGlzLnBsdWdpbi5zZXRQbHVnaW5TdGF0ZSh7IGxvYWRpbmc6IGZhbHNlIH0pXG4gICAgICAgIHRoZW4ocmVzdWx0KVxuICAgICAgfSkuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICB0aGlzLnBsdWdpbi5zZXRQbHVnaW5TdGF0ZSh7IGxvYWRpbmc6IGZhbHNlIH0pXG4gICAgICAgIGNhdGNoXyhlcnIpXG4gICAgICB9KVxuICAgIHRoaXMucGx1Z2luLnNldFBsdWdpblN0YXRlKHsgbG9hZGluZzogdHJ1ZSB9KVxuICB9XG59XG4iLCJjb25zdCBnZXRGaWxlVHlwZSA9IHJlcXVpcmUoJ0B1cHB5L3V0aWxzL2xpYi9nZXRGaWxlVHlwZScpXG5jb25zdCBpc1ByZXZpZXdTdXBwb3J0ZWQgPSByZXF1aXJlKCdAdXBweS91dGlscy9saWIvaXNQcmV2aWV3U3VwcG9ydGVkJylcbmNvbnN0IGdlbmVyYXRlRmlsZUlEID0gcmVxdWlyZSgnQHVwcHkvdXRpbHMvbGliL2dlbmVyYXRlRmlsZUlEJylcblxuLy8gVE9ETzogbm93IHRoYXQgd2UgaGF2ZSBhIHNoYXJlZCBgVmlld2AgY2xhc3MsXG4vLyBgU2hhcmVkSGFuZGxlcmAgY291bGQgYmUgY2xlYW5lZCB1cCBhbmQgbW92ZWQgaW50byBoZXJlXG5jb25zdCBTaGFyZWRIYW5kbGVyID0gcmVxdWlyZSgnLi9TaGFyZWRIYW5kbGVyJylcblxubW9kdWxlLmV4cG9ydHMgPSBjbGFzcyBWaWV3IHtcbiAgY29uc3RydWN0b3IgKHBsdWdpbiwgb3B0cykge1xuICAgIHRoaXMucGx1Z2luID0gcGx1Z2luXG4gICAgdGhpcy5wcm92aWRlciA9IG9wdHMucHJvdmlkZXJcbiAgICB0aGlzLnNoYXJlZEhhbmRsZXIgPSBuZXcgU2hhcmVkSGFuZGxlcihwbHVnaW4pXG5cbiAgICB0aGlzLmlzSGFuZGxpbmdTY3JvbGwgPSBmYWxzZVxuXG4gICAgdGhpcy5wcmVGaXJzdFJlbmRlciA9IHRoaXMucHJlRmlyc3RSZW5kZXIuYmluZCh0aGlzKVxuICAgIHRoaXMuaGFuZGxlRXJyb3IgPSB0aGlzLmhhbmRsZUVycm9yLmJpbmQodGhpcylcbiAgICB0aGlzLmFkZEZpbGUgPSB0aGlzLmFkZEZpbGUuYmluZCh0aGlzKVxuICAgIHRoaXMuY2xlYXJTZWxlY3Rpb24gPSB0aGlzLmNsZWFyU2VsZWN0aW9uLmJpbmQodGhpcylcbiAgICB0aGlzLmNhbmNlbFBpY2tpbmcgPSB0aGlzLmNhbmNlbFBpY2tpbmcuYmluZCh0aGlzKVxuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXNcbiAgcHJvdmlkZXJGaWxlVG9JZCAoZmlsZSkge1xuICAgIHJldHVybiBnZW5lcmF0ZUZpbGVJRCh7XG4gICAgICBkYXRhOiBmaWxlLFxuICAgICAgbmFtZTogZmlsZS5uYW1lIHx8IGZpbGUuaWQsXG4gICAgICB0eXBlOiBmaWxlLm1pbWV0eXBlLFxuICAgIH0pXG4gIH1cblxuICBwcmVGaXJzdFJlbmRlciAoKSB7XG4gICAgdGhpcy5wbHVnaW4uc2V0UGx1Z2luU3RhdGUoeyBkaWRGaXJzdFJlbmRlcjogdHJ1ZSB9KVxuICAgIHRoaXMucGx1Z2luLm9uRmlyc3RSZW5kZXIoKVxuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXNcbiAgc2hvdWxkSGFuZGxlU2Nyb2xsIChldmVudCkge1xuICAgIGNvbnN0IHsgc2Nyb2xsSGVpZ2h0LCBzY3JvbGxUb3AsIG9mZnNldEhlaWdodCB9ID0gZXZlbnQudGFyZ2V0XG4gICAgY29uc3Qgc2Nyb2xsUG9zaXRpb24gPSBzY3JvbGxIZWlnaHQgLSAoc2Nyb2xsVG9wICsgb2Zmc2V0SGVpZ2h0KVxuXG4gICAgcmV0dXJuIHNjcm9sbFBvc2l0aW9uIDwgNTAgJiYgIXRoaXMuaXNIYW5kbGluZ1Njcm9sbFxuICB9XG5cbiAgY2xlYXJTZWxlY3Rpb24gKCkge1xuICAgIHRoaXMucGx1Z2luLnNldFBsdWdpblN0YXRlKHsgY3VycmVudFNlbGVjdGlvbjogW10gfSlcbiAgfVxuXG4gIGNhbmNlbFBpY2tpbmcgKCkge1xuICAgIHRoaXMuY2xlYXJTZWxlY3Rpb24oKVxuXG4gICAgY29uc3QgZGFzaGJvYXJkID0gdGhpcy5wbHVnaW4udXBweS5nZXRQbHVnaW4oJ0Rhc2hib2FyZCcpXG5cbiAgICBpZiAoZGFzaGJvYXJkKSB7XG4gICAgICBkYXNoYm9hcmQuaGlkZUFsbFBhbmVscygpXG4gICAgfVxuICB9XG5cbiAgaGFuZGxlRXJyb3IgKGVycm9yKSB7XG4gICAgY29uc3QgeyB1cHB5IH0gPSB0aGlzLnBsdWdpblxuICAgIGNvbnN0IG1lc3NhZ2UgPSB1cHB5LmkxOG4oJ2NvbXBhbmlvbkVycm9yJylcblxuICAgIHVwcHkubG9nKGVycm9yLnRvU3RyaW5nKCkpXG5cbiAgICBpZiAoZXJyb3IuaXNBdXRoRXJyb3IpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHVwcHkuaW5mbyh7IG1lc3NhZ2UsIGRldGFpbHM6IGVycm9yLnRvU3RyaW5nKCkgfSwgJ2Vycm9yJywgNTAwMClcbiAgfVxuXG4gIGFkZEZpbGUgKGZpbGUpIHtcbiAgICBjb25zdCB0YWdGaWxlID0ge1xuICAgICAgaWQ6IHRoaXMucHJvdmlkZXJGaWxlVG9JZChmaWxlKSxcbiAgICAgIHNvdXJjZTogdGhpcy5wbHVnaW4uaWQsXG4gICAgICBkYXRhOiBmaWxlLFxuICAgICAgbmFtZTogZmlsZS5uYW1lIHx8IGZpbGUuaWQsXG4gICAgICB0eXBlOiBmaWxlLm1pbWVUeXBlLFxuICAgICAgaXNSZW1vdGU6IHRydWUsXG4gICAgICBtZXRhOiB7fSxcbiAgICAgIGJvZHk6IHtcbiAgICAgICAgZmlsZUlkOiBmaWxlLmlkLFxuICAgICAgfSxcbiAgICAgIHJlbW90ZToge1xuICAgICAgICBjb21wYW5pb25Vcmw6IHRoaXMucGx1Z2luLm9wdHMuY29tcGFuaW9uVXJsLFxuICAgICAgICB1cmw6IGAke3RoaXMucHJvdmlkZXIuZmlsZVVybChmaWxlLnJlcXVlc3RQYXRoKX1gLFxuICAgICAgICBib2R5OiB7XG4gICAgICAgICAgZmlsZUlkOiBmaWxlLmlkLFxuICAgICAgICB9LFxuICAgICAgICBwcm92aWRlck9wdGlvbnM6IHRoaXMucHJvdmlkZXIub3B0cyxcbiAgICAgICAgcHJvdmlkZXJOYW1lOiB0aGlzLnByb3ZpZGVyLm5hbWUsXG4gICAgICB9LFxuICAgIH1cblxuICAgIGNvbnN0IGZpbGVUeXBlID0gZ2V0RmlsZVR5cGUodGFnRmlsZSlcblxuICAgIC8vIFRPRE8gU2hvdWxkIHdlIGp1c3QgYWx3YXlzIHVzZSB0aGUgdGh1bWJuYWlsIFVSTCBpZiBpdCBleGlzdHM/XG4gICAgaWYgKGZpbGVUeXBlICYmIGlzUHJldmlld1N1cHBvcnRlZChmaWxlVHlwZSkpIHtcbiAgICAgIHRhZ0ZpbGUucHJldmlldyA9IGZpbGUudGh1bWJuYWlsXG4gICAgfVxuXG4gICAgaWYgKGZpbGUuYXV0aG9yKSB7XG4gICAgICB0YWdGaWxlLm1ldGEuYXV0aG9yID0gZmlsZS5hdXRob3JcbiAgICB9XG5cbiAgICB0aGlzLnBsdWdpbi51cHB5LmxvZygnQWRkaW5nIHJlbW90ZSBmaWxlJylcblxuICAgIHRyeSB7XG4gICAgICB0aGlzLnBsdWdpbi51cHB5LmFkZEZpbGUodGFnRmlsZSlcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBpZiAoIWVyci5pc1Jlc3RyaWN0aW9uKSB7XG4gICAgICAgIHRoaXMucGx1Z2luLnVwcHkubG9nKGVycilcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgfVxufVxuIiwiY29uc3QgUHJvdmlkZXJWaWV3cyA9IHJlcXVpcmUoJy4vUHJvdmlkZXJWaWV3JylcbmNvbnN0IFNlYXJjaFByb3ZpZGVyVmlld3MgPSByZXF1aXJlKCcuL1NlYXJjaFByb3ZpZGVyVmlldycpXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBQcm92aWRlclZpZXdzLFxuICBTZWFyY2hQcm92aWRlclZpZXdzLFxufVxuIiwiY29uc3QgQmFzZVBsdWdpbiA9IHJlcXVpcmUoJ0B1cHB5L2NvcmUvbGliL0Jhc2VQbHVnaW4nKVxuY29uc3QgdG9BcnJheSA9IHJlcXVpcmUoJ0B1cHB5L3V0aWxzL2xpYi90b0FycmF5JylcbmNvbnN0IGZpbmRET01FbGVtZW50ID0gcmVxdWlyZSgnQHVwcHkvdXRpbHMvbGliL2ZpbmRET01FbGVtZW50JylcblxuLyoqXG4gKiBBZGQgZmlsZXMgZnJvbSBleGlzdGluZyBmaWxlIGlucHV0cyB0byBVcHB5LlxuICovXG5jbGFzcyBBdHRhY2hGaWxlSW5wdXRzIGV4dGVuZHMgQmFzZVBsdWdpbiB7XG4gIGNvbnN0cnVjdG9yICh1cHB5LCBvcHRzKSB7XG4gICAgc3VwZXIodXBweSwgb3B0cylcblxuICAgIHRoaXMuaWQgPSB0aGlzLm9wdHMuaWQgfHwgJ0F0dGFjaEZpbGVJbnB1dHMnXG4gICAgdGhpcy50eXBlID0gJ2FjcXVpcmVyJ1xuXG4gICAgdGhpcy5oYW5kbGVDaGFuZ2UgPSB0aGlzLmhhbmRsZUNoYW5nZS5iaW5kKHRoaXMpXG4gICAgdGhpcy5pbnB1dHMgPSBudWxsXG4gIH1cblxuICBoYW5kbGVDaGFuZ2UgKGV2ZW50KSB7XG4gICAgdGhpcy5hZGRGaWxlcyhldmVudC50YXJnZXQpXG4gIH1cblxuICBhZGRGaWxlcyAoaW5wdXQpIHtcbiAgICBjb25zdCBmaWxlcyA9IHRvQXJyYXkoaW5wdXQuZmlsZXMpXG4gICAgZmlsZXMuZm9yRWFjaCgoZmlsZSkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdGhpcy51cHB5LmFkZEZpbGUoe1xuICAgICAgICAgIHNvdXJjZTogdGhpcy5pZCxcbiAgICAgICAgICBuYW1lOiBmaWxlLm5hbWUsXG4gICAgICAgICAgdHlwZTogZmlsZS50eXBlLFxuICAgICAgICAgIGRhdGE6IGZpbGUsXG4gICAgICAgIH0pXG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgaWYgKCFlcnIuaXNSZXN0cmljdGlvbikge1xuICAgICAgICAgIHRoaXMudXBweS5sb2coZXJyKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIGluc3RhbGwgKCkge1xuICAgIHRoaXMuZWwgPSBmaW5kRE9NRWxlbWVudCh0aGlzLm9wdHMudGFyZ2V0KVxuICAgIGlmICghdGhpcy5lbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdbQXR0YWNoRmlsZUlucHV0c10gVGFyZ2V0IGZvcm0gZG9lcyBub3QgZXhpc3QnKVxuICAgIH1cblxuICAgIGNvbnN0IHsgcmVzdHJpY3Rpb25zIH0gPSB0aGlzLnVwcHkub3B0c1xuXG4gICAgdGhpcy5pbnB1dHMgPSB0aGlzLmVsLnF1ZXJ5U2VsZWN0b3JBbGwoJ2lucHV0W3R5cGU9XCJmaWxlXCJdJylcbiAgICB0aGlzLmlucHV0cy5mb3JFYWNoKChpbnB1dCkgPT4ge1xuICAgICAgaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgdGhpcy5oYW5kbGVDaGFuZ2UpXG5cbiAgICAgIGlmICghaW5wdXQuaGFzQXR0cmlidXRlKCdtdWx0aXBsZScpKSB7XG4gICAgICAgIGlmIChyZXN0cmljdGlvbnMubWF4TnVtYmVyT2ZGaWxlcyAhPT0gMSkge1xuICAgICAgICAgIGlucHV0LnNldEF0dHJpYnV0ZSgnbXVsdGlwbGUnLCAnbXVsdGlwbGUnKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlucHV0LnJlbW92ZUF0dHJpYnV0ZSgnbXVsdGlwbGUnKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICghaW5wdXQuaGFzQXR0cmlidXRlKCdhY2NlcHQnKSAmJiByZXN0cmljdGlvbnMuYWxsb3dlZEZpbGVUeXBlcykge1xuICAgICAgICBpbnB1dC5zZXRBdHRyaWJ1dGUoJ2FjY2VwdCcsIHJlc3RyaWN0aW9ucy5hbGxvd2VkRmlsZVR5cGVzLmpvaW4oJywnKSlcbiAgICAgIH1cblxuICAgICAgLy8gQ2hlY2sgaWYgdGhpcyBpbnB1dCBhbHJlYWR5IGNvbnRhaW5zIGZpbGVzIChlZy4gdXNlciBzZWxlY3RlZCB0aGVtIGJlZm9yZSBVcHB5IGxvYWRlZCxcbiAgICAgIC8vIG9yIHRoZSBwYWdlIHdhcyByZWZyZXNoZWQgYW5kIHRoZSBicm93c2VyIGtlcHQgZmlsZXMgc2VsZWN0ZWQpXG4gICAgICB0aGlzLmFkZEZpbGVzKGlucHV0KVxuICAgIH0pXG4gIH1cblxuICB1bmluc3RhbGwgKCkge1xuICAgIHRoaXMuaW5wdXRzLmZvckVhY2goKGlucHV0KSA9PiB7XG4gICAgICBpbnB1dC5yZW1vdmVFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCB0aGlzLmhhbmRsZUNoYW5nZSlcbiAgICB9KVxuICAgIHRoaXMuaW5wdXRzID0gbnVsbFxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQXR0YWNoRmlsZUlucHV0c1xuIiwiY29uc3QgQmFzZVBsdWdpbiA9IHJlcXVpcmUoJ0B1cHB5L2NvcmUvbGliL0Jhc2VQbHVnaW4nKVxuY29uc3QgZmluZERPTUVsZW1lbnQgPSByZXF1aXJlKCdAdXBweS91dGlscy9saWIvZmluZERPTUVsZW1lbnQnKVxuXG4vKipcbiAqIEFmdGVyIGFuIHVwbG9hZCBjb21wbGV0ZXMsIGluamVjdCByZXN1bHQgZGF0YSBmcm9tIFRyYW5zbG9hZGl0IGluIGEgaGlkZGVuIGlucHV0LlxuICpcbiAqIE11c3QgYmUgYWRkZWQgX2FmdGVyXyB0aGUgVHJhbnNsb2FkaXQgcGx1Z2luLlxuICovXG5jbGFzcyBUcmFuc2xvYWRpdEZvcm1SZXN1bHQgZXh0ZW5kcyBCYXNlUGx1Z2luIHtcbiAgY29uc3RydWN0b3IgKHVwcHksIG9wdHMpIHtcbiAgICBzdXBlcih1cHB5LCBvcHRzKVxuXG4gICAgdGhpcy5pZCA9IHRoaXMub3B0cy5pZCB8fCAnVHJhbnNsb2FkaXRGb3JtUmVzdWx0J1xuICAgIHRoaXMudHlwZSA9ICdtb2RpZmllcidcblxuICAgIHRoaXMuaGFuZGxlVXBsb2FkID0gdGhpcy5oYW5kbGVVcGxvYWQuYmluZCh0aGlzKVxuICB9XG5cbiAgZ2V0QXNzZW1ibHlTdGF0dXNlcyAoZmlsZUlEcykge1xuICAgIGNvbnN0IGFzc2VtYmx5SWRzID0gW11cbiAgICBmaWxlSURzLmZvckVhY2goKGZpbGVJRCkgPT4ge1xuICAgICAgY29uc3QgZmlsZSA9IHRoaXMudXBweS5nZXRGaWxlKGZpbGVJRClcbiAgICAgIGNvbnN0IGFzc2VtYmx5ID0gZmlsZS50cmFuc2xvYWRpdCAmJiBmaWxlLnRyYW5zbG9hZGl0LmFzc2VtYmx5XG4gICAgICBpZiAoYXNzZW1ibHkgJiYgYXNzZW1ibHlJZHMuaW5kZXhPZihhc3NlbWJseSkgPT09IC0xKSB7XG4gICAgICAgIGFzc2VtYmx5SWRzLnB1c2goYXNzZW1ibHkpXG4gICAgICB9XG4gICAgfSlcblxuICAgIGNvbnN0IHRsID0gdGhpcy51cHB5LmdldFBsdWdpbih0aGlzLm9wdHMudHJhbnNsb2FkaXRQbHVnaW5JZCB8fCAnVHJhbnNsb2FkaXQnKVxuICAgIHJldHVybiBhc3NlbWJseUlkcy5tYXAoKGlkKSA9PiB0bC5nZXRBc3NlbWJseShpZCkpXG4gIH1cblxuICBoYW5kbGVVcGxvYWQgKGZpbGVJRHMpIHtcbiAgICBjb25zdCBhc3NlbWJsaWVzID0gdGhpcy5nZXRBc3NlbWJseVN0YXR1c2VzKGZpbGVJRHMpXG4gICAgY29uc3QgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpXG4gICAgaW5wdXQudHlwZSA9ICdoaWRkZW4nXG4gICAgaW5wdXQubmFtZSA9IHRoaXMub3B0cy5uYW1lXG4gICAgaW5wdXQudmFsdWUgPSBKU09OLnN0cmluZ2lmeShhc3NlbWJsaWVzKVxuXG4gICAgY29uc3QgdGFyZ2V0ID0gZmluZERPTUVsZW1lbnQodGhpcy5vcHRzLnRhcmdldClcbiAgICB0YXJnZXQuYXBwZW5kQ2hpbGQoaW5wdXQpXG4gIH1cblxuICBpbnN0YWxsICgpIHtcbiAgICB0aGlzLnVwcHkuYWRkUG9zdFByb2Nlc3Nvcih0aGlzLmhhbmRsZVVwbG9hZClcbiAgfVxuXG4gIHVuaW5zdGFsbCAoKSB7XG4gICAgdGhpcy51cHB5LnJlbW92ZVBvc3RQcm9jZXNzb3IodGhpcy5oYW5kbGVVcGxvYWQpXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBUcmFuc2xvYWRpdEZvcm1SZXN1bHRcbiIsImNvbnN0IEJhc2VQbHVnaW4gPSByZXF1aXJlKCdAdXBweS9jb3JlL2xpYi9CYXNlUGx1Z2luJylcblxuLyoqXG4gKiBBZGQgYSBgcmVzdWx0c2Aga2V5IHRvIHRoZSB1cGxvYWQgcmVzdWx0IGRhdGEsIGNvbnRhaW5pbmcgYWxsIFRyYW5zbG9hZGl0IEFzc2VtYmx5IHJlc3VsdHMuXG4gKi9cbmNsYXNzIFRyYW5zbG9hZGl0UmVzdWx0c1BsdWdpbiBleHRlbmRzIEJhc2VQbHVnaW4ge1xuICBjb25zdHJ1Y3RvciAodXBweSwgb3B0cykge1xuICAgIHN1cGVyKHVwcHksIG9wdHMpXG5cbiAgICB0aGlzLnR5cGUgPSAnbW9kaWZpZXInXG4gICAgdGhpcy5pZCA9IHRoaXMub3B0cy5pZCB8fCAnVHJhbnNsb2FkaXRSZXN1bHRzUGx1Z2luJ1xuICB9XG5cbiAgaW5zdGFsbCAoKSB7XG4gICAgdGhpcy51cHB5LmFkZFBvc3RQcm9jZXNzb3IodGhpcy4jYWZ0ZXJVcGxvYWQpXG4gIH1cblxuICAjYWZ0ZXJVcGxvYWQgPSAoZmlsZUlEcywgdXBsb2FkSUQpID0+IHtcbiAgICBjb25zdCB7IGN1cnJlbnRVcGxvYWRzIH0gPSB0aGlzLnVwcHkuZ2V0U3RhdGUoKVxuICAgIGNvbnN0IHsgcmVzdWx0IH0gPSBjdXJyZW50VXBsb2Fkc1t1cGxvYWRJRF1cbiAgICBjb25zdCBhc3NlbWJsaWVzID0gQXJyYXkuaXNBcnJheShyZXN1bHQ/LnRyYW5zbG9hZGl0KSA/IHJlc3VsdC50cmFuc2xvYWRpdCA6IFtdXG5cbiAgICAvLyBNZXJnZSB0aGUgYXNzZW1ibHkucmVzdWx0c1sqXSBhcnJheXMgYW5kIGFkZCBgc3RlcE5hbWVgIGFuZFxuICAgIC8vIGBhc3NlbWJseUlkYCBwcm9wZXJ0aWVzLlxuICAgIGNvbnN0IGFzc2VtYmx5UmVzdWx0cyA9IFtdXG4gICAgYXNzZW1ibGllcy5mb3JFYWNoKChhc3NlbWJseSkgPT4ge1xuICAgICAgT2JqZWN0LmtleXMoYXNzZW1ibHkucmVzdWx0cykuZm9yRWFjaCgoc3RlcE5hbWUpID0+IHtcbiAgICAgICAgY29uc3QgcmVzdWx0cyA9IGFzc2VtYmx5LnJlc3VsdHNbc3RlcE5hbWVdXG4gICAgICAgIHJlc3VsdHMuZm9yRWFjaCgocmVzdWx0KSA9PiB7XG4gICAgICAgICAgYXNzZW1ibHlSZXN1bHRzLnB1c2goe1xuICAgICAgICAgICAgLi4ucmVzdWx0LFxuICAgICAgICAgICAgYXNzZW1ibHlJZDogYXNzZW1ibHkuYXNzZW1ibHlfaWQsXG4gICAgICAgICAgICBzdGVwTmFtZSxcbiAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgICAgfSlcbiAgICB9KVxuXG4gICAgdGhpcy51cHB5LmFkZFJlc3VsdERhdGEodXBsb2FkSUQsIHtcbiAgICAgIHJlc3VsdHM6IGFzc2VtYmx5UmVzdWx0cyxcbiAgICB9KVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gVHJhbnNsb2FkaXRSZXN1bHRzUGx1Z2luXG4iLCJjb25zdCBEYXNoYm9hcmQgPSByZXF1aXJlKCdAdXBweS9kYXNoYm9hcmQnKVxuY29uc3QgaGFzID0gcmVxdWlyZSgnQHVwcHkvdXRpbHMvbGliL2hhc1Byb3BlcnR5JylcblxuY29uc3QgZGFzaGJvYXJkT3B0aW9uTmFtZXMgPSBbXG4gICdtZXRhRmllbGRzJyxcbiAgJ3dpZHRoJyxcbiAgJ2hlaWdodCcsXG4gICd0aHVtYm5haWxXaWR0aCcsXG4gICdzaG93TGlua1RvRmlsZVVwbG9hZFJlc3VsdCcsXG4gICdzaG93UHJvZ3Jlc3NEZXRhaWxzJyxcbiAgJ2hpZGVSZXRyeUJ1dHRvbicsXG4gICdoaWRlQ2FuY2VsQnV0dG9uJyxcbiAgJ2hpZGVVcGxvYWRCdXR0b24nLFxuICAnaGlkZVByb2dyZXNzQWZ0ZXJGaW5pc2gnLFxuICAnbm90ZScsXG4gICdkaXNhYmxlU3RhdHVzQmFyJyxcbiAgJ2Rpc2FibGVJbmZvcm1lcicsXG4gICdkaXNhYmxlVGh1bWJuYWlsR2VuZXJhdG9yJyxcbiAgJ3Nob3dTZWxlY3RlZEZpbGVzJyxcbiAgJ3Byb3VkbHlEaXNwbGF5UG93ZXJlZEJ5VXBweScsXG4gICd0aGVtZScsXG5dXG5cbmNvbnN0IG1vZGFsRGFzaGJvYXJkT3B0aW9uTmFtZXMgPSBbXG4gICd0cmlnZ2VyJyxcbiAgJ2Nsb3NlTW9kYWxPbkNsaWNrT3V0c2lkZScsXG4gICdjbG9zZUFmdGVyRmluaXNoJyxcbiAgJ2Rpc2FibGVQYWdlU2Nyb2xsV2hlbk1vZGFsT3BlbicsXG4gICdhbmltYXRlT3BlbkNsb3NlJyxcbiAgJ29uUmVxdWVzdENsb3NlTW9kYWwnLFxuICAnYnJvd3NlckJhY2tCdXR0b25DbG9zZScsXG5dXG5cbmZ1bmN0aW9uIGFkZERhc2hib2FyZFBsdWdpbiAodXBweSwgb3B0cywgb3ZlcnJpZGVPcHRzKSB7XG4gIGNvbnN0IGRhc2hib2FyZE9wdHMgPSB7fVxuICBkYXNoYm9hcmRPcHRpb25OYW1lcy5mb3JFYWNoKChrZXkpID0+IHtcbiAgICBpZiAoaGFzKG9wdHMsIGtleSkpIHtcbiAgICAgIGRhc2hib2FyZE9wdHNba2V5XSA9IG9wdHNba2V5XVxuICAgIH1cbiAgfSlcblxuICBjb25zdCBpbmxpbmUgPSBvdmVycmlkZU9wdHMuaW5saW5lID09IG51bGwgPyBkYXNoYm9hcmRPcHRzLmlubGluZSA6IG92ZXJyaWRlT3B0cy5pbmxpbmVcbiAgaWYgKCFpbmxpbmUpIHtcbiAgICBtb2RhbERhc2hib2FyZE9wdGlvbk5hbWVzLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgaWYgKGhhcyhvcHRzLCBrZXkpKSB7XG4gICAgICAgIGRhc2hib2FyZE9wdHNba2V5XSA9IG9wdHNba2V5XVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICB1cHB5LnVzZShEYXNoYm9hcmQsIHtcbiAgICAuLi5kYXNoYm9hcmRPcHRzLFxuICAgIC4uLm92ZXJyaWRlT3B0cyxcbiAgfSlcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhZGREYXNoYm9hcmRQbHVnaW5cbiIsImNvbnN0IFRyYW5zbG9hZGl0ID0gcmVxdWlyZSgnQHVwcHkvdHJhbnNsb2FkaXQnKVxuY29uc3QgaGFzID0gcmVxdWlyZSgnQHVwcHkvdXRpbHMvbGliL2hhc1Byb3BlcnR5JylcblxuY29uc3QgcmVtb3RlUHJvdmlkZXJzID0ge1xuICBkcm9wYm94OiByZXF1aXJlKCdAdXBweS9kcm9wYm94JyksXG4gICdnb29nbGUtZHJpdmUnOiByZXF1aXJlKCdAdXBweS9nb29nbGUtZHJpdmUnKSxcbiAgaW5zdGFncmFtOiByZXF1aXJlKCdAdXBweS9pbnN0YWdyYW0nKSxcbiAgZmFjZWJvb2s6IHJlcXVpcmUoJ0B1cHB5L2ZhY2Vib29rJyksXG4gIG9uZWRyaXZlOiByZXF1aXJlKCdAdXBweS9vbmVkcml2ZScpLFxuICB1cmw6IHJlcXVpcmUoJ0B1cHB5L3VybCcpLFxufVxuXG5jb25zdCBsb2NhbFByb3ZpZGVycyA9IHtcbiAgd2ViY2FtOiByZXF1aXJlKCdAdXBweS93ZWJjYW0nKSxcbn1cblxuY29uc3QgcmVtb3RlUHJvdmlkZXJPcHRpb25OYW1lcyA9IFtcbiAgJ2NvbXBhbmlvblVybCcsXG4gICdjb21wYW5pb25BbGxvd2VkSG9zdHMnLFxuICAnY29tcGFuaW9uSGVhZGVycycsXG4gICd0YXJnZXQnLFxuXVxuXG4vLyBObyBzaGFyZWQgb3B0aW9ucy5cbmNvbnN0IGxvY2FsUHJvdmlkZXJPcHRpb25OYW1lcyA9IFtcbiAgJ3RhcmdldCcsXG5dXG5cbmZ1bmN0aW9uIGFkZFJlbW90ZVByb3ZpZGVyICh1cHB5LCBuYW1lLCBvcHRzKSB7XG4gIGNvbnN0IFByb3ZpZGVyID0gcmVtb3RlUHJvdmlkZXJzW25hbWVdXG4gIGNvbnN0IHByb3ZpZGVyT3B0aW9ucyA9IHtcbiAgICAvLyBEZWZhdWx0IHRvIHRoZSA6dGw6IENvbXBhbmlvbiBzZXJ2ZXJzLlxuICAgIGNvbXBhbmlvblVybDogVHJhbnNsb2FkaXQuQ09NUEFOSU9OLFxuICAgIGNvbXBhbmlvbkFsbG93ZWRIb3N0czogVHJhbnNsb2FkaXQuQ09NUEFOSU9OX1BBVFRFUk4sXG4gIH1cblxuICByZW1vdGVQcm92aWRlck9wdGlvbk5hbWVzLmZvckVhY2goKG5hbWUpID0+IHtcbiAgICBpZiAoaGFzKG9wdHMsIG5hbWUpKSBwcm92aWRlck9wdGlvbnNbbmFtZV0gPSBvcHRzW25hbWVdXG4gIH0pXG4gIC8vIEFwcGx5IG92ZXJyaWRlcyBmb3IgYSBzcGVjaWZpYyBwcm92aWRlciBwbHVnaW4uXG4gIGlmICh0eXBlb2Ygb3B0c1tuYW1lXSA9PT0gJ29iamVjdCcpIHtcbiAgICBPYmplY3QuYXNzaWduKHByb3ZpZGVyT3B0aW9ucywgb3B0c1tuYW1lXSlcbiAgfVxuXG4gIHVwcHkudXNlKFByb3ZpZGVyLCBwcm92aWRlck9wdGlvbnMpXG59XG5cbmZ1bmN0aW9uIGFkZExvY2FsUHJvdmlkZXIgKHVwcHksIG5hbWUsIG9wdHMpIHtcbiAgY29uc3QgUHJvdmlkZXIgPSBsb2NhbFByb3ZpZGVyc1tuYW1lXVxuICBjb25zdCBwcm92aWRlck9wdGlvbnMgPSB7fVxuXG4gIGxvY2FsUHJvdmlkZXJPcHRpb25OYW1lcy5mb3JFYWNoKChuYW1lKSA9PiB7XG4gICAgaWYgKGhhcyhvcHRzLCBuYW1lKSkgcHJvdmlkZXJPcHRpb25zW25hbWVdID0gb3B0c1tuYW1lXVxuICB9KVxuICAvLyBBcHBseSBvdmVycmlkZXMgZm9yIGEgc3BlY2lmaWMgcHJvdmlkZXIgcGx1Z2luLlxuICBpZiAodHlwZW9mIG9wdHNbbmFtZV0gPT09ICdvYmplY3QnKSB7XG4gICAgT2JqZWN0LmFzc2lnbihwcm92aWRlck9wdGlvbnMsIG9wdHNbbmFtZV0pXG4gIH1cblxuICB1cHB5LnVzZShQcm92aWRlciwgcHJvdmlkZXJPcHRpb25zKVxufVxuXG5mdW5jdGlvbiBhZGRQcm92aWRlcnMgKHVwcHksIG5hbWVzLCBvcHRzID0ge30pIHtcbiAgbmFtZXMuZm9yRWFjaCgobmFtZSkgPT4ge1xuICAgIGlmIChoYXMocmVtb3RlUHJvdmlkZXJzLCBuYW1lKSkge1xuICAgICAgYWRkUmVtb3RlUHJvdmlkZXIodXBweSwgbmFtZSwgb3B0cylcbiAgICB9IGVsc2UgaWYgKGhhcyhsb2NhbFByb3ZpZGVycywgbmFtZSkpIHtcbiAgICAgIGFkZExvY2FsUHJvdmlkZXIodXBweSwgbmFtZSwgb3B0cylcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgdmFsaWROYW1lcyA9IFtcbiAgICAgICAgLi4uT2JqZWN0LmtleXMocmVtb3RlUHJvdmlkZXJzKSxcbiAgICAgICAgLi4uT2JqZWN0LmtleXMobG9jYWxQcm92aWRlcnMpLFxuICAgICAgXVxuICAgICAgY29uc3QgZXhwZWN0ZWROYW1lU3RyaW5nID0gdmFsaWROYW1lc1xuICAgICAgICAuc29ydCgpXG4gICAgICAgIC5tYXAoKHZhbGlkTmFtZSkgPT4gYCcke3ZhbGlkTmFtZX0nYClcbiAgICAgICAgLmpvaW4oJywgJylcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVW5leHBlY3RlZCBwcm92aWRlciAnJHtuYW1lfScsIGV4cGVjdGVkIG9uZSBvZiBbJHtleHBlY3RlZE5hbWVTdHJpbmd9XWApXG4gICAgfVxuICB9KVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFkZFByb3ZpZGVyc1xuIiwiY29uc3QgVHJhbnNsb2FkaXQgPSByZXF1aXJlKCdAdXBweS90cmFuc2xvYWRpdCcpXG5jb25zdCBoYXMgPSByZXF1aXJlKCdAdXBweS91dGlscy9saWIvaGFzUHJvcGVydHknKVxuY29uc3QgVHJhbnNsb2FkaXRSZXN1bHRzID0gcmVxdWlyZSgnLi9UcmFuc2xvYWRpdFJlc3VsdHNQbHVnaW4nKVxuXG5jb25zdCB0cmFuc2xvYWRpdE9wdGlvbk5hbWVzID0gW1xuICAnc2VydmljZScsXG4gICd3YWl0Rm9yRW5jb2RpbmcnLFxuICAnd2FpdEZvck1ldGFkYXRhJyxcbiAgJ2Fsd2F5c1J1bkFzc2VtYmx5JyxcbiAgJ2ltcG9ydEZyb21VcGxvYWRVUkxzJyxcbiAgJ3NpZ25hdHVyZScsXG4gICdwYXJhbXMnLFxuICAnZmllbGRzJyxcbiAgJ2xpbWl0JyxcbiAgJ2xvY2FsZScsXG4gICdnZXRBc3NlbWJseU9wdGlvbnMnLFxuXVxuXG5mdW5jdGlvbiBhZGRUcmFuc2xvYWRpdFBsdWdpbiAodXBweSwgb3B0cykge1xuICBjb25zdCB0cmFuc2xvYWRpdE9wdGlvbnMgPSB7fVxuICB0cmFuc2xvYWRpdE9wdGlvbk5hbWVzLmZvckVhY2goKG5hbWUpID0+IHtcbiAgICBpZiAoaGFzKG9wdHMsIG5hbWUpKSB0cmFuc2xvYWRpdE9wdGlvbnNbbmFtZV0gPSBvcHRzW25hbWVdXG4gIH0pXG4gIHVwcHkudXNlKFRyYW5zbG9hZGl0LCB0cmFuc2xvYWRpdE9wdGlvbnMpXG5cbiAgLy8gQWRkcyBhIGByZXN1bHRzYCBrZXkgdG8gdGhlIHVwbG9hZCByZXN1bHQgZGF0YSBjb250YWluaW5nIGEgZmxhdCBhcnJheSBvZiBhbGwgcmVzdWx0cyBmcm9tIGFsbCBBc3NlbWJsaWVzLlxuICBpZiAodHJhbnNsb2FkaXRPcHRpb25zLndhaXRGb3JFbmNvZGluZykge1xuICAgIHVwcHkudXNlKFRyYW5zbG9hZGl0UmVzdWx0cylcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFkZFRyYW5zbG9hZGl0UGx1Z2luXG4iLCJjb25zdCBVcHB5ID0gcmVxdWlyZSgnQHVwcHkvY29yZScpXG5jb25zdCBoYXMgPSByZXF1aXJlKCdAdXBweS91dGlscy9saWIvaGFzUHJvcGVydHknKVxuXG5jb25zdCBldmVudE5hbWVzID0ge1xuICAvLyBGaWxlIG1hbmFnZW1lbnQgZXZlbnRzXG4gIG9uRmlsZUFkZGVkOiAnZmlsZS1hZGRlZCcsXG4gIG9uRmlsZVJlbW92ZWQ6ICdmaWxlLXJlbW92ZWQnLFxuXG4gIC8vIFRyYW5zbG9hZGl0IGV2ZW50c1xuICBvbkltcG9ydEVycm9yOiAndHJhbnNsb2FkaXQ6aW1wb3J0LWVycm9yJyxcbiAgb25Bc3NlbWJseUNyZWF0ZWQ6ICd0cmFuc2xvYWRpdDphc3NlbWJseS1jcmVhdGVkJyxcbiAgb25Bc3NlbWJseUV4ZWN1dGluZzogJ3RyYW5zbG9hZGl0OmFzc2VtYmx5LWV4ZWN1dGluZycsXG4gIG9uQXNzZW1ibHlFcnJvcjogJ3RyYW5zbG9hZGl0OmFzc2VtYmx5LWVycm9yJyxcbiAgb25Bc3NlbWJseUNvbXBsZXRlOiAndHJhbnNsb2FkaXQ6Y29tcGxldGUnLFxuICBvblJlc3VsdDogJ3RyYW5zbG9hZGl0OnJlc3VsdCcsXG5cbiAgLy8gVXBsb2FkIGV2ZW50c1xuICBvblN0YXJ0OiAndXBsb2FkJyxcbiAgb25QYXVzZTogJ3BhdXNlLWFsbCcsXG4gIG9uRmlsZVBhdXNlOiAndXBsb2FkLXBhdXNlJyxcbiAgb25DYW5jZWw6ICdjYW5jZWwtYWxsJyxcbiAgb25FcnJvcjogJ2Vycm9yJywgLy8gbW9zdGx5IGFraW4gdG8gcHJvbWlzZSByZWplY3Rpb25cbiAgb25GaWxlQ2FuY2VsOiAndXBsb2FkLWNhbmNlbCcsXG4gIG9uRmlsZVByb2dyZXNzOiAndXBsb2FkLXByb2dyZXNzJyxcbiAgb25GaWxlRXJyb3I6ICd1cGxvYWQtZXJyb3InLFxuICBvblVwbG9hZGVkOiAndHJhbnNsb2FkaXQ6dXBsb2FkJyxcbiAgb25Db21wbGV0ZTogJ2NvbXBsZXRlJywgLy8gbW9zdGx5IGFraW4gdG8gcHJvbWlzZSByZXNvbHV0aW9uXG59XG5cbmNvbnN0IHVwcHlPcHRpb25OYW1lcyA9IFtcbiAgJ2F1dG9Qcm9jZWVkJyxcbiAgJ3Jlc3RyaWN0aW9ucycsXG4gICdtZXRhJyxcbiAgJ29uQmVmb3JlRmlsZUFkZGVkJyxcbiAgJ29uQmVmb3JlVXBsb2FkJyxcbiAgJ2RlYnVnJyxcbl1cbmZ1bmN0aW9uIGNyZWF0ZVVwcHkgKG9wdHMsIG92ZXJyaWRlcyA9IHt9KSB7XG4gIGNvbnN0IHVwcHlPcHRpb25zID0ge31cbiAgdXBweU9wdGlvbk5hbWVzLmZvckVhY2goKG5hbWUpID0+IHtcbiAgICBpZiAoaGFzKG9wdHMsIG5hbWUpKSB1cHB5T3B0aW9uc1tuYW1lXSA9IG9wdHNbbmFtZV1cbiAgfSlcbiAgT2JqZWN0LmFzc2lnbih1cHB5T3B0aW9ucywgb3ZlcnJpZGVzKVxuXG4gIGNvbnN0IHVwcHkgPSBuZXcgVXBweSh1cHB5T3B0aW9ucylcblxuICAvLyBCdWlsdGluIGV2ZW50IGFsaWFzZXNcbiAgT2JqZWN0LmtleXMoZXZlbnROYW1lcykuZm9yRWFjaCgob3B0aW9uTmFtZSkgPT4ge1xuICAgIGNvbnN0IGV2ZW50TmFtZSA9IGV2ZW50TmFtZXNbb3B0aW9uTmFtZV1cbiAgICBpZiAodHlwZW9mIG9wdHNbb3B0aW9uTmFtZV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHVwcHkub24oZXZlbnROYW1lLCBvcHRzW29wdGlvbk5hbWVdKVxuICAgIH1cbiAgfSlcblxuICAvLyBDdXN0b20gZXZlbnRzICh0aGVzZSBzaG91bGQgcHJvYmFibHkgYmUgYWRkZWQgdG8gY29yZSlcbiAgaWYgKHR5cGVvZiBvcHRzLm9uUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicpIHtcbiAgICB1cHB5Lm9uKCd1cGxvYWQtcHJvZ3Jlc3MnLCAoKSA9PiB7XG4gICAgICBjb25zdCB7IHRvdGFsUHJvZ3Jlc3MgfSA9IHVwcHkuZ2V0U3RhdGUoKVxuICAgICAgb3B0cy5vblByb2dyZXNzLmNhbGwodXBweSwgdG90YWxQcm9ncmVzcylcbiAgICB9KVxuICB9XG5cbiAgcmV0dXJuIHVwcHlcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVVcHB5XG4iLCJjb25zdCBjcmVhdGVVcHB5ID0gcmVxdWlyZSgnLi9jcmVhdGVVcHB5JylcbmNvbnN0IGFkZERhc2hib2FyZFBsdWdpbiA9IHJlcXVpcmUoJy4vYWRkRGFzaGJvYXJkUGx1Z2luJylcbmNvbnN0IGFkZFRyYW5zbG9hZGl0UGx1Z2luID0gcmVxdWlyZSgnLi9hZGRUcmFuc2xvYWRpdFBsdWdpbicpXG5jb25zdCBhZGRQcm92aWRlcnMgPSByZXF1aXJlKCcuL2FkZFByb3ZpZGVycycpXG5cbmZ1bmN0aW9uIGRhc2hib2FyZCAodGFyZ2V0LCBvcHRzID0ge30pIHtcbiAgY29uc3QgaW5saW5lID0gb3B0cy5pbmxpbmUgPT0gbnVsbCA/IHRydWUgOiBvcHRzLmlubGluZVxuXG4gIGNvbnN0IHBsdWdpbklkID0gJ0Rhc2hib2FyZCdcbiAgY29uc3QgdXBweSA9IGNyZWF0ZVVwcHkob3B0cylcbiAgYWRkVHJhbnNsb2FkaXRQbHVnaW4odXBweSwgb3B0cylcbiAgYWRkRGFzaGJvYXJkUGx1Z2luKHVwcHksIG9wdHMsIHtcbiAgICBpZDogcGx1Z2luSWQsXG4gICAgaW5saW5lLFxuICAgIHRhcmdldCxcbiAgICBjbG9zZUFmdGVyRmluaXNoOiBmYWxzZSxcbiAgfSlcblxuICBpZiAoQXJyYXkuaXNBcnJheShvcHRzLnByb3ZpZGVycykpIHtcbiAgICBhZGRQcm92aWRlcnModXBweSwgb3B0cy5wcm92aWRlcnMsIHtcbiAgICAgIC4uLm9wdHMsXG4gICAgICAvLyBJbnN0YWxsIHByb3ZpZGVycyBpbnRvIHRoZSBEYXNoYm9hcmQuXG4gICAgICB0YXJnZXQ6IHVwcHkuZ2V0UGx1Z2luKHBsdWdpbklkKSxcbiAgICB9KVxuICB9XG5cbiAgcmV0dXJuIHVwcHlcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBkYXNoYm9hcmRcbiIsImNvbnN0IFVwcHkgPSByZXF1aXJlKCdAdXBweS9jb3JlJylcbmNvbnN0IEZvcm0gPSByZXF1aXJlKCdAdXBweS9mb3JtJylcbmNvbnN0IFN0YXR1c0JhciA9IHJlcXVpcmUoJ0B1cHB5L3N0YXR1cy1iYXInKVxuY29uc3QgZmluZERPTUVsZW1lbnQgPSByZXF1aXJlKCdAdXBweS91dGlscy9saWIvZmluZERPTUVsZW1lbnQnKVxuY29uc3QgaGFzID0gcmVxdWlyZSgnQHVwcHkvdXRpbHMvbGliL2hhc1Byb3BlcnR5JylcbmNvbnN0IEF0dGFjaEZpbGVJbnB1dHMgPSByZXF1aXJlKCcuL0F0dGFjaEZpbGVJbnB1dHMnKVxuY29uc3QgVHJhbnNsb2FkaXRGb3JtUmVzdWx0ID0gcmVxdWlyZSgnLi9UcmFuc2xvYWRpdEZvcm1SZXN1bHQnKVxuY29uc3QgYWRkRGFzaGJvYXJkUGx1Z2luID0gcmVxdWlyZSgnLi9hZGREYXNoYm9hcmRQbHVnaW4nKVxuY29uc3QgYWRkVHJhbnNsb2FkaXRQbHVnaW4gPSByZXF1aXJlKCcuL2FkZFRyYW5zbG9hZGl0UGx1Z2luJylcbmNvbnN0IGFkZFByb3ZpZGVycyA9IHJlcXVpcmUoJy4vYWRkUHJvdmlkZXJzJylcblxuY29uc3QgZGVmYXVsdExvY2FsZVN0cmluZ3MgPSB7XG4gIGNob29zZUZpbGVzOiAnQ2hvb3NlIGZpbGVzJyxcbn1cblxuZnVuY3Rpb24gbWVyZ2VEZWZhdWx0TG9jYWxlIChkZWZhdWx0cywgdXNlclByb3ZpZGVkID0ge30pIHtcbiAgY29uc3Qgc3RyaW5ncyA9IHVzZXJQcm92aWRlZC5zdHJpbmdzIHx8IHt9XG4gIHJldHVybiB7XG4gICAgLi4udXNlclByb3ZpZGVkLFxuICAgIHN0cmluZ3M6IHsgLi4uZGVmYXVsdHMsIC4uLnN0cmluZ3MgfSxcbiAgfVxufVxuXG5mdW5jdGlvbiBmb3JtICh0YXJnZXQsIG9wdHMpIHtcbiAgaWYgKCFvcHRzKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdyb2JvZG9nLmZvcm06IG11c3QgcHJvdmlkZSBhbiBvcHRpb25zIG9iamVjdCcpXG5cbiAgb3B0cyA9IHtcbiAgICAuLi5vcHRzLFxuICAgIGxvY2FsZTogbWVyZ2VEZWZhdWx0TG9jYWxlKGRlZmF1bHRMb2NhbGVTdHJpbmdzLCBvcHRzLmxvY2FsZSksXG4gIH1cblxuICBjb25zdCB1cHB5ID0gbmV3IFVwcHkob3B0cylcbiAgYWRkVHJhbnNsb2FkaXRQbHVnaW4odXBweSwgb3B0cylcblxuICB1cHB5LnVzZShUcmFuc2xvYWRpdEZvcm1SZXN1bHQsIHtcbiAgICB0YXJnZXQsXG4gICAgdHJhbnNsb2FkaXRQbHVnaW5JZDogJ1RyYW5zbG9hZGl0JyxcbiAgICBuYW1lOiAndHJhbnNsb2FkaXQnLFxuICB9KVxuXG4gIGxldCBzdWJtaXRPblN1Y2Nlc3MgPSB0cnVlXG4gIGlmIChoYXMob3B0cywgJ3N1Ym1pdE9uU3VjY2VzcycpKSB7XG4gICAgc3VibWl0T25TdWNjZXNzID0gISFvcHRzLnN1Ym1pdE9uU3VjY2Vzc1xuICB9XG5cbiAgY29uc3QgZm9ybU9wdGlvbnMgPSB7XG4gICAgdGFyZ2V0LFxuICAgIHRyaWdnZXJVcGxvYWRPblN1Ym1pdDogdHJ1ZSxcbiAgICBzdWJtaXRPblN1Y2Nlc3MsXG4gICAgYWRkUmVzdWx0VG9Gb3JtOiBmYWxzZSwgLy8gdXNpbmcgY3VzdG9tIGltcGxlbWVudGF0aW9uIGluc3RlYWRcbiAgfVxuICBpZiAoaGFzKG9wdHMsICd0cmlnZ2VyVXBsb2FkT25TdWJtaXQnKSkge1xuICAgIGZvcm1PcHRpb25zLnRyaWdnZXJVcGxvYWRPblN1Ym1pdCA9IG9wdHMudHJpZ2dlclVwbG9hZE9uU3VibWl0XG4gIH1cblxuICB1cHB5LnVzZShGb3JtLCBmb3JtT3B0aW9ucylcblxuICBjb25zdCB1c2VEYXNoYm9hcmQgPSBvcHRzLmRhc2hib2FyZCB8fCBvcHRzLm1vZGFsXG5cbiAgaWYgKHVzZURhc2hib2FyZCkge1xuICAgIGNvbnN0IGRhc2hib2FyZFRhcmdldCA9IGZpbmRET01FbGVtZW50KG9wdHMuZGFzaGJvYXJkKSB8fCBkb2N1bWVudC5ib2R5XG4gICAgY29uc3QgZGFzaGJvYXJkSWQgPSAnZm9ybTpEYXNoYm9hcmQnXG4gICAgY29uc3QgZGFzaGJvYXJkT3B0cyA9IHtcbiAgICAgIGlkOiBkYXNoYm9hcmRJZCxcbiAgICAgIHRhcmdldDogZGFzaGJvYXJkVGFyZ2V0LFxuICAgIH1cbiAgICBpZiAob3B0cy5tb2RhbCkge1xuICAgICAgY29uc3QgdHJpZ2dlciA9ICdpbnB1dFt0eXBlPVwiZmlsZVwiXSdcbiAgICAgIGNvbnN0IGJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpXG4gICAgICBidXR0b24udGV4dENvbnRlbnQgPSB1cHB5LmkxOG4oJ2Nob29zZUZpbGVzJylcbiAgICAgIGJ1dHRvbi50eXBlID0gJ2J1dHRvbidcbiAgICAgIGNvbnN0IG9sZCA9IGZpbmRET01FbGVtZW50KHRyaWdnZXIsIGZpbmRET01FbGVtZW50KHRhcmdldCkpXG4gICAgICBvbGQucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQoYnV0dG9uLCBvbGQpXG4gICAgICBkYXNoYm9hcmRPcHRzLmlubGluZSA9IGZhbHNlXG4gICAgICBkYXNoYm9hcmRPcHRzLnRyaWdnZXIgPSBidXR0b25cbiAgICB9IGVsc2Uge1xuICAgICAgZGFzaGJvYXJkT3B0cy5pbmxpbmUgPSB0cnVlXG4gICAgICBkYXNoYm9hcmRPcHRzLmhpZGVVcGxvYWRCdXR0b24gPSB0cnVlXG4gICAgfVxuICAgIGFkZERhc2hib2FyZFBsdWdpbih1cHB5LCBvcHRzLCBkYXNoYm9hcmRPcHRzKVxuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkob3B0cy5wcm92aWRlcnMpKSB7XG4gICAgICBhZGRQcm92aWRlcnModXBweSwgb3B0cy5wcm92aWRlcnMsIHtcbiAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgdGFyZ2V0OiB1cHB5LmdldFBsdWdpbihkYXNoYm9hcmRJZCksXG4gICAgICB9KVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB1cHB5LnVzZShBdHRhY2hGaWxlSW5wdXRzLCB7IHRhcmdldCB9KVxuICB9XG5cbiAgaWYgKG9wdHMuc3RhdHVzQmFyKSB7XG4gICAgdXBweS51c2UoU3RhdHVzQmFyLCB7XG4gICAgICB0YXJnZXQ6IG9wdHMuc3RhdHVzQmFyLFxuICAgICAgLy8gaGlkZSBtb3N0IG9mIHRoZSB0aGluZ3MgdG8ga2VlcCBvdXIgYXBpIHNpbXBsZSxcbiAgICAgIC8vIHdlIGNhbiBjaGFuZ2UgdGhpcyBpbiB0aGUgZnV0dXJlIGlmIHNvbWVvbmUgbmVlZHMgaXRcbiAgICAgIGhpZGVVcGxvYWRCdXR0b246IHRydWUsXG4gICAgICBoaWRlQWZ0ZXJGaW5pc2g6IHRydWUsXG4gICAgICBoaWRlUmV0cnlCdXR0b246IHRydWUsXG4gICAgICBoaWRlUGF1c2VSZXN1bWVCdXR0b25zOiB0cnVlLFxuICAgICAgaGlkZUNhbmNlbEJ1dHRvbnM6IHRydWUsXG4gICAgfSlcbiAgfVxuXG4gIHJldHVybiB1cHB5XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZm9ybVxuIiwiY29uc3QgZm9ybSA9IHJlcXVpcmUoJy4vZm9ybScpXG5jb25zdCBkYXNoYm9hcmQgPSByZXF1aXJlKCcuL2Rhc2hib2FyZCcpXG5jb25zdCBwaWNrID0gcmVxdWlyZSgnLi9waWNrJylcbmNvbnN0IHVwbG9hZCA9IHJlcXVpcmUoJy4vdXBsb2FkJylcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGRhc2hib2FyZCxcbiAgZm9ybSxcbiAgcGljayxcbiAgdXBsb2FkLFxuICBWRVJTSU9OOiByZXF1aXJlKCcuLi9wYWNrYWdlLmpzb24nKS52ZXJzaW9uLFxufVxuIiwiY29uc3QgY3JlYXRlVXBweSA9IHJlcXVpcmUoJy4vY3JlYXRlVXBweScpXG5jb25zdCBhZGREYXNoYm9hcmRQbHVnaW4gPSByZXF1aXJlKCcuL2FkZERhc2hib2FyZFBsdWdpbicpXG5jb25zdCBhZGRUcmFuc2xvYWRpdFBsdWdpbiA9IHJlcXVpcmUoJy4vYWRkVHJhbnNsb2FkaXRQbHVnaW4nKVxuY29uc3QgYWRkUHJvdmlkZXJzID0gcmVxdWlyZSgnLi9hZGRQcm92aWRlcnMnKVxuXG5jb25zdCBDQU5DRUwgPSB7fVxuXG5mdW5jdGlvbiBwaWNrIChvcHRzID0ge30pIHtcbiAgY29uc3QgdGFyZ2V0ID0gb3B0cy50YXJnZXQgfHwgZG9jdW1lbnQuYm9keVxuXG4gIGNvbnN0IHBsdWdpbklkID0gJ3BpY2snXG4gIGNvbnN0IHVwcHkgPSBjcmVhdGVVcHB5KG9wdHMsIHtcbiAgICBhbGxvd011bHRpcGxlVXBsb2FkQmF0Y2hlczogZmFsc2UsXG4gIH0pXG4gIGFkZFRyYW5zbG9hZGl0UGx1Z2luKHVwcHksIG9wdHMpXG4gIGFkZERhc2hib2FyZFBsdWdpbih1cHB5LCBvcHRzLCB7XG4gICAgaWQ6IHBsdWdpbklkLFxuICAgIHRhcmdldCxcbiAgICBjbG9zZUFmdGVyRmluaXNoOiB0cnVlLFxuICB9KVxuXG4gIGlmIChBcnJheS5pc0FycmF5KG9wdHMucHJvdmlkZXJzKSkge1xuICAgIGFkZFByb3ZpZGVycyh1cHB5LCBvcHRzLnByb3ZpZGVycywge1xuICAgICAgLi4ub3B0cyxcbiAgICAgIC8vIEluc3RhbGwgcHJvdmlkZXJzIGludG8gdGhlIERhc2hib2FyZC5cbiAgICAgIHRhcmdldDogdXBweS5nZXRQbHVnaW4ocGx1Z2luSWQpLFxuICAgIH0pXG4gIH1cblxuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIHVwcHkub24oJ2NvbXBsZXRlJywgKHJlc3VsdCkgPT4ge1xuICAgICAgaWYgKHJlc3VsdC5mYWlsZWQubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJlc29sdmUocmVzdWx0KVxuICAgICAgfVxuICAgIH0pXG4gICAgdXBweS5vbignZXJyb3InLCByZWplY3QpXG4gICAgdXBweS5vbignY2FuY2VsLWFsbCcsICgpID0+IHJlamVjdChDQU5DRUwpKVxuICAgIHVwcHkuZ2V0UGx1Z2luKHBsdWdpbklkKVxuICAgICAgLm9wZW5Nb2RhbCgpXG4gIH0pLnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgIHJldHVybiByZXN1bHRcbiAgfSwgKGVycikgPT4ge1xuICAgIGlmIChlcnIgPT09IENBTkNFTCkge1xuICAgICAgdXBweS5nZXRQbHVnaW4ocGx1Z2luSWQpXG4gICAgICAgIC5yZXF1ZXN0Q2xvc2VNb2RhbCgpXG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cbiAgICB0aHJvdyBlcnJcbiAgfSlcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBwaWNrXG4iLCJjb25zdCB0b0FycmF5ID0gcmVxdWlyZSgnQHVwcHkvdXRpbHMvbGliL3RvQXJyYXknKVxuY29uc3QgY3JlYXRlVXBweSA9IHJlcXVpcmUoJy4vY3JlYXRlVXBweScpXG5jb25zdCBhZGRUcmFuc2xvYWRpdFBsdWdpbiA9IHJlcXVpcmUoJy4vYWRkVHJhbnNsb2FkaXRQbHVnaW4nKVxuXG5mdW5jdGlvbiB1cGxvYWQgKGZpbGVzLCBvcHRzID0ge30pIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KGZpbGVzKSAmJiB0eXBlb2YgZmlsZXMubGVuZ3RoID09PSAnbnVtYmVyJykge1xuICAgIGZpbGVzID0gdG9BcnJheShmaWxlcylcbiAgfVxuXG4gIGNvbnN0IHVwcHkgPSBjcmVhdGVVcHB5KG9wdHMsIHtcbiAgICBhbGxvd011bHRpcGxlVXBsb2FkczogZmFsc2UsXG4gIH0pXG5cbiAgYWRkVHJhbnNsb2FkaXRQbHVnaW4odXBweSwgb3B0cylcblxuICBmaWxlcy5mb3JFYWNoKChmaWxlKSA9PiB7XG4gICAgdXBweS5hZGRGaWxlKHtcbiAgICAgIGRhdGE6IGZpbGUsXG4gICAgICB0eXBlOiBmaWxlLnR5cGUsXG4gICAgICBuYW1lOiBmaWxlLm5hbWUsXG4gICAgICBtZXRhOiBmaWxlLm1ldGEgfHwge30sXG4gICAgfSlcbiAgfSlcblxuICByZXR1cm4gdXBweS51cGxvYWQoKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHVwbG9hZFxuIiwiY29uc3QgY2xhc3NOYW1lcyA9IHJlcXVpcmUoJ2NsYXNzbmFtZXMnKVxuY29uc3QgdGhyb3R0bGUgPSByZXF1aXJlKCdsb2Rhc2gudGhyb3R0bGUnKVxuY29uc3QgcHJldHRpZXJCeXRlcyA9IHJlcXVpcmUoJ0B0cmFuc2xvYWRpdC9wcmV0dGllci1ieXRlcycpXG5jb25zdCBwcmV0dHlFVEEgPSByZXF1aXJlKCdAdXBweS91dGlscy9saWIvcHJldHR5RVRBJylcbmNvbnN0IHsgaCB9ID0gcmVxdWlyZSgncHJlYWN0JylcblxuY29uc3Qgc3RhdHVzQmFyU3RhdGVzID0gcmVxdWlyZSgnLi9TdGF0dXNCYXJTdGF0ZXMnKVxuXG5jb25zdCBET1QgPSBgXFx1MDBCN2BcbmNvbnN0IHJlbmRlckRvdCA9ICgpID0+IGAgJHtET1R9IGBcblxuZnVuY3Rpb24gVXBsb2FkQnRuIChwcm9wcykge1xuICBjb25zdCB7XG4gICAgbmV3RmlsZXMsXG4gICAgaXNVcGxvYWRTdGFydGVkLFxuICAgIHJlY292ZXJlZFN0YXRlLFxuICAgIGkxOG4sXG4gICAgdXBsb2FkU3RhdGUsXG4gICAgaXNTb21lR2hvc3QsXG4gICAgc3RhcnRVcGxvYWQsXG4gIH0gPSBwcm9wc1xuXG4gIGNvbnN0IHVwbG9hZEJ0bkNsYXNzTmFtZXMgPSBjbGFzc05hbWVzKFxuICAgICd1cHB5LXUtcmVzZXQnLFxuICAgICd1cHB5LWMtYnRuJyxcbiAgICAndXBweS1TdGF0dXNCYXItYWN0aW9uQnRuJyxcbiAgICAndXBweS1TdGF0dXNCYXItYWN0aW9uQnRuLS11cGxvYWQnLFxuICAgIHtcbiAgICAgICd1cHB5LWMtYnRuLXByaW1hcnknOiB1cGxvYWRTdGF0ZSA9PT0gc3RhdHVzQmFyU3RhdGVzLlNUQVRFX1dBSVRJTkcsXG4gICAgfSxcbiAgICB7ICd1cHB5LVN0YXR1c0Jhci1hY3Rpb25CdG4tLWRpc2FibGVkJzogaXNTb21lR2hvc3QgfSxcbiAgKVxuXG4gIGNvbnN0IHVwbG9hZEJ0blRleHQgPSBuZXdGaWxlcyAmJiBpc1VwbG9hZFN0YXJ0ZWQgJiYgIXJlY292ZXJlZFN0YXRlXG4gICAgPyBpMThuKCd1cGxvYWRYTmV3RmlsZXMnLCB7IHNtYXJ0X2NvdW50OiBuZXdGaWxlcyB9KVxuICAgIDogaTE4bigndXBsb2FkWEZpbGVzJywgeyBzbWFydF9jb3VudDogbmV3RmlsZXMgfSlcblxuICByZXR1cm4gKFxuICAgIDxidXR0b25cbiAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgY2xhc3NOYW1lPXt1cGxvYWRCdG5DbGFzc05hbWVzfVxuICAgICAgYXJpYS1sYWJlbD17aTE4bigndXBsb2FkWEZpbGVzJywgeyBzbWFydF9jb3VudDogbmV3RmlsZXMgfSl9XG4gICAgICBvbkNsaWNrPXtzdGFydFVwbG9hZH1cbiAgICAgIGRpc2FibGVkPXtpc1NvbWVHaG9zdH1cbiAgICAgIGRhdGEtdXBweS1zdXBlci1mb2N1c2FibGVcbiAgICA+XG4gICAgICB7dXBsb2FkQnRuVGV4dH1cbiAgICA8L2J1dHRvbj5cbiAgKVxufVxuXG5mdW5jdGlvbiBSZXRyeUJ0biAocHJvcHMpIHtcbiAgY29uc3QgeyBpMThuLCB1cHB5IH0gPSBwcm9wc1xuXG4gIHJldHVybiAoXG4gICAgPGJ1dHRvblxuICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICBjbGFzc05hbWU9XCJ1cHB5LXUtcmVzZXQgdXBweS1jLWJ0biB1cHB5LVN0YXR1c0Jhci1hY3Rpb25CdG4gdXBweS1TdGF0dXNCYXItYWN0aW9uQnRuLS1yZXRyeVwiXG4gICAgICBhcmlhLWxhYmVsPXtpMThuKCdyZXRyeVVwbG9hZCcpfVxuICAgICAgb25DbGljaz17KCkgPT4gdXBweS5yZXRyeUFsbCgpfVxuICAgICAgZGF0YS11cHB5LXN1cGVyLWZvY3VzYWJsZVxuICAgID5cbiAgICAgIDxzdmdcbiAgICAgICAgYXJpYS1oaWRkZW49XCJ0cnVlXCJcbiAgICAgICAgZm9jdXNhYmxlPVwiZmFsc2VcIlxuICAgICAgICBjbGFzc05hbWU9XCJ1cHB5LWMtaWNvblwiXG4gICAgICAgIHdpZHRoPVwiOFwiXG4gICAgICAgIGhlaWdodD1cIjEwXCJcbiAgICAgICAgdmlld0JveD1cIjAgMCA4IDEwXCJcbiAgICAgID5cbiAgICAgICAgPHBhdGggZD1cIk00IDIuNDA4YTIuNzUgMi43NSAwIDEgMCAyLjc1IDIuNzUuNjI2LjYyNiAwIDAgMSAxLjI1LjAxOHYuMDIzYTQgNCAwIDEgMS00LTQuMDQxVi4yNWEuMjUuMjUgMCAwIDEgLjM4OS0uMjA4bDIuMjk5IDEuNTMzYS4yNS4yNSAwIDAgMSAwIC40MTZsLTIuMyAxLjUzM0EuMjUuMjUgMCAwIDEgNCAzLjMxNnYtLjkwOHpcIiAvPlxuICAgICAgPC9zdmc+XG4gICAgICB7aTE4bigncmV0cnknKX1cbiAgICA8L2J1dHRvbj5cbiAgKVxufVxuXG5mdW5jdGlvbiBDYW5jZWxCdG4gKHByb3BzKSB7XG4gIGNvbnN0IHsgaTE4biwgdXBweSB9ID0gcHJvcHNcblxuICByZXR1cm4gKFxuICAgIDxidXR0b25cbiAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgY2xhc3NOYW1lPVwidXBweS11LXJlc2V0IHVwcHktU3RhdHVzQmFyLWFjdGlvbkNpcmNsZUJ0blwiXG4gICAgICB0aXRsZT17aTE4bignY2FuY2VsJyl9XG4gICAgICBhcmlhLWxhYmVsPXtpMThuKCdjYW5jZWwnKX1cbiAgICAgIG9uQ2xpY2s9eygpID0+IHVwcHkuY2FuY2VsQWxsKCl9XG4gICAgICBkYXRhLXVwcHktc3VwZXItZm9jdXNhYmxlXG4gICAgPlxuICAgICAgPHN2Z1xuICAgICAgICBhcmlhLWhpZGRlbj1cInRydWVcIlxuICAgICAgICBmb2N1c2FibGU9XCJmYWxzZVwiXG4gICAgICAgIGNsYXNzTmFtZT1cInVwcHktYy1pY29uXCJcbiAgICAgICAgd2lkdGg9XCIxNlwiXG4gICAgICAgIGhlaWdodD1cIjE2XCJcbiAgICAgICAgdmlld0JveD1cIjAgMCAxNiAxNlwiXG4gICAgICA+XG4gICAgICAgIDxnIGZpbGw9XCJub25lXCIgZmlsbFJ1bGU9XCJldmVub2RkXCI+XG4gICAgICAgICAgPGNpcmNsZSBmaWxsPVwiIzg4OFwiIGN4PVwiOFwiIGN5PVwiOFwiIHI9XCI4XCIgLz5cbiAgICAgICAgICA8cGF0aFxuICAgICAgICAgICAgZmlsbD1cIiNGRkZcIlxuICAgICAgICAgICAgZD1cIk05LjI4MyA4bDIuNTY3IDIuNTY3LTEuMjgzIDEuMjgzTDggOS4yODMgNS40MzMgMTEuODUgNC4xNSAxMC41NjcgNi43MTcgOCA0LjE1IDUuNDMzIDUuNDMzIDQuMTUgOCA2LjcxN2wyLjU2Ny0yLjU2NyAxLjI4MyAxLjI4M3pcIlxuICAgICAgICAgIC8+XG4gICAgICAgIDwvZz5cbiAgICAgIDwvc3ZnPlxuICAgIDwvYnV0dG9uPlxuICApXG59XG5cbmZ1bmN0aW9uIFBhdXNlUmVzdW1lQnV0dG9uIChwcm9wcykge1xuICBjb25zdCB7IGlzQWxsUGF1c2VkLCBpMThuLCBpc0FsbENvbXBsZXRlLCByZXN1bWFibGVVcGxvYWRzLCB1cHB5IH0gPSBwcm9wc1xuICBjb25zdCB0aXRsZSA9IGlzQWxsUGF1c2VkID8gaTE4bigncmVzdW1lJykgOiBpMThuKCdwYXVzZScpXG5cbiAgZnVuY3Rpb24gdG9nZ2xlUGF1c2VSZXN1bWUgKCkge1xuICAgIGlmIChpc0FsbENvbXBsZXRlKSByZXR1cm4gbnVsbFxuXG4gICAgaWYgKCFyZXN1bWFibGVVcGxvYWRzKSB7XG4gICAgICByZXR1cm4gdXBweS5jYW5jZWxBbGwoKVxuICAgIH1cblxuICAgIGlmIChpc0FsbFBhdXNlZCkge1xuICAgICAgcmV0dXJuIHVwcHkucmVzdW1lQWxsKClcbiAgICB9XG5cbiAgICByZXR1cm4gdXBweS5wYXVzZUFsbCgpXG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxidXR0b25cbiAgICAgIHRpdGxlPXt0aXRsZX1cbiAgICAgIGFyaWEtbGFiZWw9e3RpdGxlfVxuICAgICAgY2xhc3NOYW1lPVwidXBweS11LXJlc2V0IHVwcHktU3RhdHVzQmFyLWFjdGlvbkNpcmNsZUJ0blwiXG4gICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgIG9uQ2xpY2s9e3RvZ2dsZVBhdXNlUmVzdW1lfVxuICAgICAgZGF0YS11cHB5LXN1cGVyLWZvY3VzYWJsZVxuICAgID5cbiAgICAgIDxzdmdcbiAgICAgICAgYXJpYS1oaWRkZW49XCJ0cnVlXCJcbiAgICAgICAgZm9jdXNhYmxlPVwiZmFsc2VcIlxuICAgICAgICBjbGFzc05hbWU9XCJ1cHB5LWMtaWNvblwiXG4gICAgICAgIHdpZHRoPVwiMTZcIlxuICAgICAgICBoZWlnaHQ9XCIxNlwiXG4gICAgICAgIHZpZXdCb3g9XCIwIDAgMTYgMTZcIlxuICAgICAgPlxuICAgICAgICA8ZyBmaWxsPVwibm9uZVwiIGZpbGxSdWxlPVwiZXZlbm9kZFwiPlxuICAgICAgICAgIDxjaXJjbGUgZmlsbD1cIiM4ODhcIiBjeD1cIjhcIiBjeT1cIjhcIiByPVwiOFwiIC8+XG4gICAgICAgICAgPHBhdGhcbiAgICAgICAgICAgIGZpbGw9XCIjRkZGXCJcbiAgICAgICAgICAgIGQ9e1xuICAgICAgICAgICAgICBpc0FsbFBhdXNlZFxuICAgICAgICAgICAgICAgID8gJ002IDQuMjVMMTEuNSA4IDYgMTEuNzV6J1xuICAgICAgICAgICAgICAgIDogJ001IDQuNWgydjdINXYtN3ptNCAwaDJ2N0g5di03eidcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAvPlxuICAgICAgICA8L2c+XG4gICAgICA8L3N2Zz5cbiAgICA8L2J1dHRvbj5cbiAgKVxufVxuXG5mdW5jdGlvbiBEb25lQnRuIChwcm9wcykge1xuICBjb25zdCB7IGkxOG4sIGRvbmVCdXR0b25IYW5kbGVyIH0gPSBwcm9wc1xuXG4gIHJldHVybiAoXG4gICAgPGJ1dHRvblxuICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICBjbGFzc05hbWU9XCJ1cHB5LXUtcmVzZXQgdXBweS1jLWJ0biB1cHB5LVN0YXR1c0Jhci1hY3Rpb25CdG4gdXBweS1TdGF0dXNCYXItYWN0aW9uQnRuLS1kb25lXCJcbiAgICAgIG9uQ2xpY2s9e2RvbmVCdXR0b25IYW5kbGVyfVxuICAgICAgZGF0YS11cHB5LXN1cGVyLWZvY3VzYWJsZVxuICAgID5cbiAgICAgIHtpMThuKCdkb25lJyl9XG4gICAgPC9idXR0b24+XG4gIClcbn1cblxuZnVuY3Rpb24gTG9hZGluZ1NwaW5uZXIgKCkge1xuICByZXR1cm4gKFxuICAgIDxzdmdcbiAgICAgIGNsYXNzTmFtZT1cInVwcHktU3RhdHVzQmFyLXNwaW5uZXJcIlxuICAgICAgYXJpYS1oaWRkZW49XCJ0cnVlXCJcbiAgICAgIGZvY3VzYWJsZT1cImZhbHNlXCJcbiAgICAgIHdpZHRoPVwiMTRcIlxuICAgICAgaGVpZ2h0PVwiMTRcIlxuICAgID5cbiAgICAgIDxwYXRoXG4gICAgICAgIGQ9XCJNMTMuOTgzIDYuNTQ3Yy0uMTItMi41MDktMS42NC00Ljg5My0zLjkzOS01LjkzNi0yLjQ4LTEuMTI3LTUuNDg4LS42NTYtNy41NTYgMS4wOTRDLjUyNCAzLjM2Ny0uMzk4IDYuMDQ4LjE2MiA4LjU2MmMuNTU2IDIuNDk1IDIuNDYgNC41MiA0Ljk0IDUuMTgzIDIuOTMyLjc4NCA1LjYxLS42MDIgNy4yNTYtMy4wMTUtMS40OTMgMS45OTMtMy43NDUgMy4zMDktNi4yOTggMi44NjgtMi41MTQtLjQzNC00LjU3OC0yLjM0OS01LjE1My00Ljg0YTYuMjI2IDYuMjI2IDAgMCAxIDIuOTgtNi43NzhDNi4zNC41ODYgOS43NCAxLjEgMTEuMzczIDMuNDkzYy40MDcuNTk2LjY5MyAxLjI4Mi44NDIgMS45ODguMTI3LjU5OC4wNzMgMS4xOTcuMTYxIDEuNzk0LjA3OC41MjUuNTQzIDEuMjU3IDEuMTUuODY0LjUyNS0uMzQxLjQ5LTEuMDUuNDU2LTEuNTkyLS4wMDctLjE1LjAyLjMgMCAwXCJcbiAgICAgICAgZmlsbFJ1bGU9XCJldmVub2RkXCJcbiAgICAgIC8+XG4gICAgPC9zdmc+XG4gIClcbn1cblxuZnVuY3Rpb24gUHJvZ3Jlc3NCYXJQcm9jZXNzaW5nIChwcm9wcykge1xuICBjb25zdCB7IHByb2dyZXNzIH0gPSBwcm9wc1xuICBjb25zdCB7IHZhbHVlLCBtb2RlLCBtZXNzYWdlIH0gPSBwcm9ncmVzc1xuICBjb25zdCByb3VuZGVkVmFsdWUgPSBNYXRoLnJvdW5kKHZhbHVlICogMTAwKVxuICBjb25zdCBkb3QgPSBgXFx1MDBCN2BcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwidXBweS1TdGF0dXNCYXItY29udGVudFwiPlxuICAgICAgPExvYWRpbmdTcGlubmVyIC8+XG4gICAgICB7bW9kZSA9PT0gJ2RldGVybWluYXRlJyA/IGAke3JvdW5kZWRWYWx1ZX0lICR7ZG90fSBgIDogJyd9XG4gICAgICB7bWVzc2FnZX1cbiAgICA8L2Rpdj5cbiAgKVxufVxuXG5mdW5jdGlvbiBQcm9ncmVzc0RldGFpbHMgKHByb3BzKSB7XG4gIGNvbnN0IHtcbiAgICBudW1VcGxvYWRzLFxuICAgIGNvbXBsZXRlLFxuICAgIHRvdGFsVXBsb2FkZWRTaXplLFxuICAgIHRvdGFsU2l6ZSxcbiAgICB0b3RhbEVUQSxcbiAgICBpMThuLFxuICB9ID0gcHJvcHNcblxuICBjb25zdCBpZlNob3dGaWxlc1VwbG9hZGVkT2ZUb3RhbCA9IG51bVVwbG9hZHMgPiAxXG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cInVwcHktU3RhdHVzQmFyLXN0YXR1c1NlY29uZGFyeVwiPlxuICAgICAge2lmU2hvd0ZpbGVzVXBsb2FkZWRPZlRvdGFsXG4gICAgICAgICYmIGkxOG4oJ2ZpbGVzVXBsb2FkZWRPZlRvdGFsJywge1xuICAgICAgICAgIGNvbXBsZXRlLFxuICAgICAgICAgIHNtYXJ0X2NvdW50OiBudW1VcGxvYWRzLFxuICAgICAgICB9KX1cbiAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInVwcHktU3RhdHVzQmFyLWFkZGl0aW9uYWxJbmZvXCI+XG4gICAgICAgIHsvKiBXaGVuIHNob3VsZCB3ZSByZW5kZXIgdGhpcyBkb3Q/XG4gICAgICAgICAgMS4gLi1hZGRpdGlvbmFsSW5mbyBpcyBzaG93biAoaGFwcGVucyBvbmx5IG9uIGRlc2t0b3BzKVxuICAgICAgICAgIDIuIEFORCAnZmlsZXNVcGxvYWRlZE9mVG90YWwnIHdhcyBzaG93blxuICAgICAgICAqL31cbiAgICAgICAge2lmU2hvd0ZpbGVzVXBsb2FkZWRPZlRvdGFsICYmIHJlbmRlckRvdCgpfVxuXG4gICAgICAgIHtpMThuKCdkYXRhVXBsb2FkZWRPZlRvdGFsJywge1xuICAgICAgICAgIGNvbXBsZXRlOiBwcmV0dGllckJ5dGVzKHRvdGFsVXBsb2FkZWRTaXplKSxcbiAgICAgICAgICB0b3RhbDogcHJldHRpZXJCeXRlcyh0b3RhbFNpemUpLFxuICAgICAgICB9KX1cblxuICAgICAgICB7cmVuZGVyRG90KCl9XG5cbiAgICAgICAge2kxOG4oJ3hUaW1lTGVmdCcsIHtcbiAgICAgICAgICB0aW1lOiBwcmV0dHlFVEEodG90YWxFVEEpLFxuICAgICAgICB9KX1cbiAgICAgIDwvc3Bhbj5cbiAgICA8L2Rpdj5cbiAgKVxufVxuXG5mdW5jdGlvbiBGaWxlVXBsb2FkQ291bnQgKHByb3BzKSB7XG4gIGNvbnN0IHsgaTE4biwgY29tcGxldGUsIG51bVVwbG9hZHMgfSA9IHByb3BzXG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cInVwcHktU3RhdHVzQmFyLXN0YXR1c1NlY29uZGFyeVwiPlxuICAgICAge2kxOG4oJ2ZpbGVzVXBsb2FkZWRPZlRvdGFsJywgeyBjb21wbGV0ZSwgc21hcnRfY291bnQ6IG51bVVwbG9hZHMgfSl9XG4gICAgPC9kaXY+XG4gIClcbn1cblxuZnVuY3Rpb24gVXBsb2FkTmV3bHlBZGRlZEZpbGVzIChwcm9wcykge1xuICBjb25zdCB7IGkxOG4sIG5ld0ZpbGVzLCBzdGFydFVwbG9hZCB9ID0gcHJvcHNcbiAgY29uc3QgdXBsb2FkQnRuQ2xhc3NOYW1lcyA9IGNsYXNzTmFtZXMoXG4gICAgJ3VwcHktdS1yZXNldCcsXG4gICAgJ3VwcHktYy1idG4nLFxuICAgICd1cHB5LVN0YXR1c0Jhci1hY3Rpb25CdG4nLFxuICAgICd1cHB5LVN0YXR1c0Jhci1hY3Rpb25CdG4tLXVwbG9hZE5ld2x5QWRkZWQnLFxuICApXG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cInVwcHktU3RhdHVzQmFyLXN0YXR1c1NlY29uZGFyeVwiPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJ1cHB5LVN0YXR1c0Jhci1zdGF0dXNTZWNvbmRhcnlIaW50XCI+XG4gICAgICAgIHtpMThuKCd4TW9yZUZpbGVzQWRkZWQnLCB7IHNtYXJ0X2NvdW50OiBuZXdGaWxlcyB9KX1cbiAgICAgIDwvZGl2PlxuICAgICAgPGJ1dHRvblxuICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgY2xhc3NOYW1lPXt1cGxvYWRCdG5DbGFzc05hbWVzfVxuICAgICAgICBhcmlhLWxhYmVsPXtpMThuKCd1cGxvYWRYRmlsZXMnLCB7IHNtYXJ0X2NvdW50OiBuZXdGaWxlcyB9KX1cbiAgICAgICAgb25DbGljaz17c3RhcnRVcGxvYWR9XG4gICAgICA+XG4gICAgICAgIHtpMThuKCd1cGxvYWQnKX1cbiAgICAgIDwvYnV0dG9uPlxuICAgIDwvZGl2PlxuICApXG59XG5cbmNvbnN0IFRocm90dGxlZFByb2dyZXNzRGV0YWlscyA9IHRocm90dGxlKFByb2dyZXNzRGV0YWlscywgNTAwLCB7XG4gIGxlYWRpbmc6IHRydWUsXG4gIHRyYWlsaW5nOiB0cnVlLFxufSlcblxuZnVuY3Rpb24gUHJvZ3Jlc3NCYXJVcGxvYWRpbmcgKHByb3BzKSB7XG4gIGNvbnN0IHtcbiAgICBpMThuLFxuICAgIHN1cHBvcnRzVXBsb2FkUHJvZ3Jlc3MsXG4gICAgdG90YWxQcm9ncmVzcyxcbiAgICBzaG93UHJvZ3Jlc3NEZXRhaWxzLFxuICAgIGlzVXBsb2FkU3RhcnRlZCxcbiAgICBpc0FsbENvbXBsZXRlLFxuICAgIGlzQWxsUGF1c2VkLFxuICAgIG5ld0ZpbGVzLFxuICAgIG51bVVwbG9hZHMsXG4gICAgY29tcGxldGUsXG4gICAgdG90YWxVcGxvYWRlZFNpemUsXG4gICAgdG90YWxTaXplLFxuICAgIHRvdGFsRVRBLFxuICAgIHN0YXJ0VXBsb2FkLFxuICB9ID0gcHJvcHNcbiAgY29uc3Qgc2hvd1VwbG9hZE5ld2x5QWRkZWRGaWxlcyA9IG5ld0ZpbGVzICYmIGlzVXBsb2FkU3RhcnRlZFxuXG4gIGlmICghaXNVcGxvYWRTdGFydGVkIHx8IGlzQWxsQ29tcGxldGUpIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgY29uc3QgdGl0bGUgPSBpc0FsbFBhdXNlZCA/IGkxOG4oJ3BhdXNlZCcpIDogaTE4bigndXBsb2FkaW5nJylcblxuICBmdW5jdGlvbiByZW5kZXJQcm9ncmVzc0RldGFpbHMgKCkge1xuICAgIGlmICghaXNBbGxQYXVzZWQgJiYgIXNob3dVcGxvYWROZXdseUFkZGVkRmlsZXMgJiYgc2hvd1Byb2dyZXNzRGV0YWlscykge1xuICAgICAgaWYgKHN1cHBvcnRzVXBsb2FkUHJvZ3Jlc3MpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICA8VGhyb3R0bGVkUHJvZ3Jlc3NEZXRhaWxzXG4gICAgICAgICAgICBudW1VcGxvYWRzPXtudW1VcGxvYWRzfVxuICAgICAgICAgICAgY29tcGxldGU9e2NvbXBsZXRlfVxuICAgICAgICAgICAgdG90YWxVcGxvYWRlZFNpemU9e3RvdGFsVXBsb2FkZWRTaXplfVxuICAgICAgICAgICAgdG90YWxTaXplPXt0b3RhbFNpemV9XG4gICAgICAgICAgICB0b3RhbEVUQT17dG90YWxFVEF9XG4gICAgICAgICAgICBpMThuPXtpMThufVxuICAgICAgICAgIC8+XG4gICAgICAgIClcbiAgICAgIH1cbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxGaWxlVXBsb2FkQ291bnRcbiAgICAgICAgICBpMThuPXtpMThufVxuICAgICAgICAgIGNvbXBsZXRlPXtjb21wbGV0ZX1cbiAgICAgICAgICBudW1VcGxvYWRzPXtudW1VcGxvYWRzfVxuICAgICAgICAvPlxuICAgICAgKVxuICAgIH1cbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cInVwcHktU3RhdHVzQmFyLWNvbnRlbnRcIiBhcmlhLWxhYmVsPXt0aXRsZX0gdGl0bGU9e3RpdGxlfT5cbiAgICAgIHshaXNBbGxQYXVzZWQgPyA8TG9hZGluZ1NwaW5uZXIgLz4gOiBudWxsfVxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJ1cHB5LVN0YXR1c0Jhci1zdGF0dXNcIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ1cHB5LVN0YXR1c0Jhci1zdGF0dXNQcmltYXJ5XCI+XG4gICAgICAgICAge3N1cHBvcnRzVXBsb2FkUHJvZ3Jlc3MgPyBgJHt0aXRsZX06ICR7dG90YWxQcm9ncmVzc30lYCA6IHRpdGxlfVxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICB7cmVuZGVyUHJvZ3Jlc3NEZXRhaWxzKCl9XG5cbiAgICAgICAge3Nob3dVcGxvYWROZXdseUFkZGVkRmlsZXMgPyAoXG4gICAgICAgICAgPFVwbG9hZE5ld2x5QWRkZWRGaWxlc1xuICAgICAgICAgICAgaTE4bj17aTE4bn1cbiAgICAgICAgICAgIG5ld0ZpbGVzPXtuZXdGaWxlc31cbiAgICAgICAgICAgIHN0YXJ0VXBsb2FkPXtzdGFydFVwbG9hZH1cbiAgICAgICAgICAvPlxuICAgICAgICApIDogbnVsbH1cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApXG59XG5cbmZ1bmN0aW9uIFByb2dyZXNzQmFyQ29tcGxldGUgKHByb3BzKSB7XG4gIGNvbnN0IHsgaTE4biB9ID0gcHJvcHNcblxuICByZXR1cm4gKFxuICAgIDxkaXZcbiAgICAgIGNsYXNzTmFtZT1cInVwcHktU3RhdHVzQmFyLWNvbnRlbnRcIlxuICAgICAgcm9sZT1cInN0YXR1c1wiXG4gICAgICB0aXRsZT17aTE4bignY29tcGxldGUnKX1cbiAgICA+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInVwcHktU3RhdHVzQmFyLXN0YXR1c1wiPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInVwcHktU3RhdHVzQmFyLXN0YXR1c1ByaW1hcnlcIj5cbiAgICAgICAgICA8c3ZnXG4gICAgICAgICAgICBhcmlhLWhpZGRlbj1cInRydWVcIlxuICAgICAgICAgICAgZm9jdXNhYmxlPVwiZmFsc2VcIlxuICAgICAgICAgICAgY2xhc3NOYW1lPVwidXBweS1TdGF0dXNCYXItc3RhdHVzSW5kaWNhdG9yIHVwcHktYy1pY29uXCJcbiAgICAgICAgICAgIHdpZHRoPVwiMTVcIlxuICAgICAgICAgICAgaGVpZ2h0PVwiMTFcIlxuICAgICAgICAgICAgdmlld0JveD1cIjAgMCAxNSAxMVwiXG4gICAgICAgICAgPlxuICAgICAgICAgICAgPHBhdGggZD1cIk0uNDE0IDUuODQzTDEuNjI3IDQuNjNsMy40NzIgMy40NzJMMTMuMjAyIDBsMS4yMTIgMS4yMTNMNS4xIDEwLjUyOHpcIiAvPlxuICAgICAgICAgIDwvc3ZnPlxuICAgICAgICAgIHtpMThuKCdjb21wbGV0ZScpfVxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApXG59XG5cbmZ1bmN0aW9uIFByb2dyZXNzQmFyRXJyb3IgKHByb3BzKSB7XG4gIGNvbnN0IHsgZXJyb3IsIGkxOG4sIGNvbXBsZXRlLCBudW1VcGxvYWRzIH0gPSBwcm9wc1xuXG4gIGZ1bmN0aW9uIGRpc3BsYXlFcnJvckFsZXJ0ICgpIHtcbiAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSBgJHtpMThuKCd1cGxvYWRGYWlsZWQnKX0gXFxuXFxuICR7ZXJyb3J9YFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1hbGVydFxuICAgIGFsZXJ0KGVycm9yTWVzc2FnZSkgLy8gVE9ETzogbW92ZSB0byBjdXN0b20gYWxlcnQgaW1wbGVtZW50YXRpb25cbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJ1cHB5LVN0YXR1c0Jhci1jb250ZW50XCIgdGl0bGU9e2kxOG4oJ3VwbG9hZEZhaWxlZCcpfT5cbiAgICAgIDxzdmdcbiAgICAgICAgYXJpYS1oaWRkZW49XCJ0cnVlXCJcbiAgICAgICAgZm9jdXNhYmxlPVwiZmFsc2VcIlxuICAgICAgICBjbGFzc05hbWU9XCJ1cHB5LVN0YXR1c0Jhci1zdGF0dXNJbmRpY2F0b3IgdXBweS1jLWljb25cIlxuICAgICAgICB3aWR0aD1cIjExXCJcbiAgICAgICAgaGVpZ2h0PVwiMTFcIlxuICAgICAgICB2aWV3Qm94PVwiMCAwIDExIDExXCJcbiAgICAgID5cbiAgICAgICAgPHBhdGggZD1cIk00LjI3OCA1LjVMMCAxLjIyMiAxLjIyMiAwIDUuNSA0LjI3OCA5Ljc3OCAwIDExIDEuMjIyIDYuNzIyIDUuNSAxMSA5Ljc3OCA5Ljc3OCAxMSA1LjUgNi43MjIgMS4yMjIgMTEgMCA5Ljc3OHpcIiAvPlxuICAgICAgPC9zdmc+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInVwcHktU3RhdHVzQmFyLXN0YXR1c1wiPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInVwcHktU3RhdHVzQmFyLXN0YXR1c1ByaW1hcnlcIj5cbiAgICAgICAgICB7aTE4bigndXBsb2FkRmFpbGVkJyl9XG5cbiAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICBjbGFzc05hbWU9XCJ1cHB5LXUtcmVzZXQgdXBweS1TdGF0dXNCYXItZGV0YWlsc1wiXG4gICAgICAgICAgICBhcmlhLWxhYmVsPXtpMThuKCdzaG93RXJyb3JEZXRhaWxzJyl9XG4gICAgICAgICAgICBkYXRhLW1pY3JvdGlwLXBvc2l0aW9uPVwidG9wLXJpZ2h0XCJcbiAgICAgICAgICAgIGRhdGEtbWljcm90aXAtc2l6ZT1cIm1lZGl1bVwiXG4gICAgICAgICAgICBvbkNsaWNrPXtkaXNwbGF5RXJyb3JBbGVydH1cbiAgICAgICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgICAgID5cbiAgICAgICAgICAgID9cbiAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPEZpbGVVcGxvYWRDb3VudCBpMThuPXtpMThufSBjb21wbGV0ZT17Y29tcGxldGV9IG51bVVwbG9hZHM9e251bVVwbG9hZHN9IC8+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgVXBsb2FkQnRuLFxuICBSZXRyeUJ0bixcbiAgQ2FuY2VsQnRuLFxuICBQYXVzZVJlc3VtZUJ1dHRvbixcbiAgRG9uZUJ0bixcbiAgTG9hZGluZ1NwaW5uZXIsXG4gIFByb2dyZXNzRGV0YWlscyxcbiAgUHJvZ3Jlc3NCYXJQcm9jZXNzaW5nLFxuICBQcm9ncmVzc0JhckVycm9yLFxuICBQcm9ncmVzc0JhclVwbG9hZGluZyxcbiAgUHJvZ3Jlc3NCYXJDb21wbGV0ZSxcbn1cbiIsImNvbnN0IHsgaCB9ID0gcmVxdWlyZSgncHJlYWN0JylcbmNvbnN0IGNsYXNzTmFtZXMgPSByZXF1aXJlKCdjbGFzc25hbWVzJylcbmNvbnN0IHN0YXR1c0JhclN0YXRlcyA9IHJlcXVpcmUoJy4vU3RhdHVzQmFyU3RhdGVzJylcbmNvbnN0IGNhbGN1bGF0ZVByb2Nlc3NpbmdQcm9ncmVzcyA9IHJlcXVpcmUoJy4vY2FsY3VsYXRlUHJvY2Vzc2luZ1Byb2dyZXNzJylcblxuY29uc3Qge1xuICBVcGxvYWRCdG4sXG4gIFJldHJ5QnRuLFxuICBDYW5jZWxCdG4sXG4gIFBhdXNlUmVzdW1lQnV0dG9uLFxuICBEb25lQnRuLFxuICBQcm9ncmVzc0JhclByb2Nlc3NpbmcsXG4gIFByb2dyZXNzQmFyRXJyb3IsXG4gIFByb2dyZXNzQmFyVXBsb2FkaW5nLFxuICBQcm9ncmVzc0JhckNvbXBsZXRlLFxufSA9IHJlcXVpcmUoJy4vQ29tcG9uZW50cycpXG5cbmNvbnN0IHtcbiAgU1RBVEVfRVJST1IsXG4gIFNUQVRFX1dBSVRJTkcsXG4gIFNUQVRFX1BSRVBST0NFU1NJTkcsXG4gIFNUQVRFX1VQTE9BRElORyxcbiAgU1RBVEVfUE9TVFBST0NFU1NJTkcsXG4gIFNUQVRFX0NPTVBMRVRFLFxufSA9IHN0YXR1c0JhclN0YXRlc1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN0YXR1c0JhclxuXG5mdW5jdGlvbiBTdGF0dXNCYXIgKHByb3BzKSB7XG4gIGNvbnN0IHtcbiAgICBuZXdGaWxlcyxcbiAgICBhbGxvd05ld1VwbG9hZCxcbiAgICBpc1VwbG9hZEluUHJvZ3Jlc3MsXG4gICAgaXNBbGxQYXVzZWQsXG4gICAgcmVzdW1hYmxlVXBsb2FkcyxcbiAgICBlcnJvcixcbiAgICBoaWRlVXBsb2FkQnV0dG9uLFxuICAgIGhpZGVQYXVzZVJlc3VtZUJ1dHRvbixcbiAgICBoaWRlQ2FuY2VsQnV0dG9uLFxuICAgIGhpZGVSZXRyeUJ1dHRvbixcbiAgICByZWNvdmVyZWRTdGF0ZSxcbiAgICB1cGxvYWRTdGF0ZSxcbiAgICB0b3RhbFByb2dyZXNzLFxuICAgIGZpbGVzLFxuICAgIHN1cHBvcnRzVXBsb2FkUHJvZ3Jlc3MsXG4gICAgaGlkZUFmdGVyRmluaXNoLFxuICAgIGlzU29tZUdob3N0LFxuICAgIGlzVGFyZ2V0RE9NRWwsXG4gICAgZG9uZUJ1dHRvbkhhbmRsZXIsXG4gICAgaXNVcGxvYWRTdGFydGVkLFxuICAgIGkxOG4sXG4gICAgc3RhcnRVcGxvYWQsXG4gICAgdXBweSxcbiAgICBpc0FsbENvbXBsZXRlLFxuICAgIHNob3dQcm9ncmVzc0RldGFpbHMsXG4gICAgbnVtVXBsb2FkcyxcbiAgICBjb21wbGV0ZSxcbiAgICB0b3RhbFNpemUsXG4gICAgdG90YWxFVEEsXG4gICAgdG90YWxVcGxvYWRlZFNpemUsXG4gIH0gPSBwcm9wc1xuXG4gIGZ1bmN0aW9uIGdldFByb2dyZXNzVmFsdWUgKCkge1xuICAgIHN3aXRjaCAodXBsb2FkU3RhdGUpIHtcbiAgICAgIGNhc2UgU1RBVEVfUE9TVFBST0NFU1NJTkc6XG4gICAgICBjYXNlIFNUQVRFX1BSRVBST0NFU1NJTkc6IHtcbiAgICAgICAgY29uc3QgcHJvZ3Jlc3MgPSBjYWxjdWxhdGVQcm9jZXNzaW5nUHJvZ3Jlc3MoZmlsZXMpXG5cbiAgICAgICAgaWYgKHByb2dyZXNzLm1vZGUgPT09ICdkZXRlcm1pbmF0ZScpIHtcbiAgICAgICAgICByZXR1cm4gcHJvZ3Jlc3MudmFsdWUgKiAxMDBcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG90YWxQcm9ncmVzc1xuICAgICAgfVxuICAgICAgY2FzZSBTVEFURV9FUlJPUjoge1xuICAgICAgICByZXR1cm4gbnVsbFxuICAgICAgfVxuICAgICAgY2FzZSBTVEFURV9VUExPQURJTkc6IHtcbiAgICAgICAgaWYgKCFzdXBwb3J0c1VwbG9hZFByb2dyZXNzKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGxcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG90YWxQcm9ncmVzc1xuICAgICAgfVxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIHRvdGFsUHJvZ3Jlc3NcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBnZXRJc0luZGV0ZXJtaW5hdGUgKCkge1xuICAgIHN3aXRjaCAodXBsb2FkU3RhdGUpIHtcbiAgICAgIGNhc2UgU1RBVEVfUE9TVFBST0NFU1NJTkc6XG4gICAgICBjYXNlIFNUQVRFX1BSRVBST0NFU1NJTkc6IHtcbiAgICAgICAgY29uc3QgeyBtb2RlIH0gPSBjYWxjdWxhdGVQcm9jZXNzaW5nUHJvZ3Jlc3MoZmlsZXMpXG4gICAgICAgIHJldHVybiBtb2RlID09PSAnaW5kZXRlcm1pbmF0ZSdcbiAgICAgIH1cbiAgICAgIGNhc2UgU1RBVEVfVVBMT0FESU5HOiB7XG4gICAgICAgIGlmICghc3VwcG9ydHNVcGxvYWRQcm9ncmVzcykge1xuICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBnZXRJc0hpZGRlbiAoKSB7XG4gICAgaWYgKHJlY292ZXJlZFN0YXRlKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHVwbG9hZFN0YXRlKSB7XG4gICAgICBjYXNlIFNUQVRFX1dBSVRJTkc6XG4gICAgICAgIHJldHVybiBoaWRlVXBsb2FkQnV0dG9uIHx8IG5ld0ZpbGVzID09PSAwXG4gICAgICBjYXNlIFNUQVRFX0NPTVBMRVRFOlxuICAgICAgICByZXR1cm4gaGlkZUFmdGVyRmluaXNoXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gIH1cblxuICBjb25zdCBwcm9ncmVzc1ZhbHVlID0gZ2V0UHJvZ3Jlc3NWYWx1ZSgpXG5cbiAgY29uc3QgaXNIaWRkZW4gPSBnZXRJc0hpZGRlbigpXG5cbiAgY29uc3Qgd2lkdGggPSBwcm9ncmVzc1ZhbHVlID8/IDEwMFxuXG4gIGNvbnN0IHNob3dVcGxvYWRCdG4gPSAhZXJyb3JcbiAgICAmJiBuZXdGaWxlc1xuICAgICYmICFpc1VwbG9hZEluUHJvZ3Jlc3NcbiAgICAmJiAhaXNBbGxQYXVzZWRcbiAgICAmJiBhbGxvd05ld1VwbG9hZFxuICAgICYmICFoaWRlVXBsb2FkQnV0dG9uXG5cbiAgY29uc3Qgc2hvd0NhbmNlbEJ0biA9ICFoaWRlQ2FuY2VsQnV0dG9uXG4gICAgJiYgdXBsb2FkU3RhdGUgIT09IFNUQVRFX1dBSVRJTkdcbiAgICAmJiB1cGxvYWRTdGF0ZSAhPT0gU1RBVEVfQ09NUExFVEVcblxuICBjb25zdCBzaG93UGF1c2VSZXN1bWVCdG4gPSByZXN1bWFibGVVcGxvYWRzXG4gICAgJiYgIWhpZGVQYXVzZVJlc3VtZUJ1dHRvblxuICAgICYmIHVwbG9hZFN0YXRlID09PSBTVEFURV9VUExPQURJTkdcblxuICBjb25zdCBzaG93UmV0cnlCdG4gPSBlcnJvciAmJiAhaXNBbGxDb21wbGV0ZSAmJiAhaGlkZVJldHJ5QnV0dG9uXG5cbiAgY29uc3Qgc2hvd0RvbmVCdG4gPSBkb25lQnV0dG9uSGFuZGxlciAmJiB1cGxvYWRTdGF0ZSA9PT0gU1RBVEVfQ09NUExFVEVcblxuICBjb25zdCBwcm9ncmVzc0NsYXNzTmFtZXMgPSBjbGFzc05hbWVzKCd1cHB5LVN0YXR1c0Jhci1wcm9ncmVzcycsIHtcbiAgICAnaXMtaW5kZXRlcm1pbmF0ZSc6IGdldElzSW5kZXRlcm1pbmF0ZSgpLFxuICB9KVxuXG4gIGNvbnN0IHN0YXR1c0JhckNsYXNzTmFtZXMgPSBjbGFzc05hbWVzKFxuICAgIHsgJ3VwcHktUm9vdCc6IGlzVGFyZ2V0RE9NRWwgfSxcbiAgICAndXBweS1TdGF0dXNCYXInLFxuICAgIGBpcy0ke3VwbG9hZFN0YXRlfWAsXG4gICAgeyAnaGFzLWdob3N0cyc6IGlzU29tZUdob3N0IH0sXG4gIClcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPXtzdGF0dXNCYXJDbGFzc05hbWVzfSBhcmlhLWhpZGRlbj17aXNIaWRkZW59PlxuICAgICAgPGRpdlxuICAgICAgICBjbGFzc05hbWU9e3Byb2dyZXNzQ2xhc3NOYW1lc31cbiAgICAgICAgc3R5bGU9e3sgd2lkdGg6IGAke3dpZHRofSVgIH19XG4gICAgICAgIHJvbGU9XCJwcm9ncmVzc2JhclwiXG4gICAgICAgIGFyaWEtbGFiZWw9e2Ake3dpZHRofSVgfVxuICAgICAgICBhcmlhLXZhbHVldGV4dD17YCR7d2lkdGh9JWB9XG4gICAgICAgIGFyaWEtdmFsdWVtaW49XCIwXCJcbiAgICAgICAgYXJpYS12YWx1ZW1heD1cIjEwMFwiXG4gICAgICAgIGFyaWEtdmFsdWVub3c9e3Byb2dyZXNzVmFsdWV9XG4gICAgICAvPlxuXG4gICAgICB7KCgpID0+IHtcbiAgICAgICAgc3dpdGNoICh1cGxvYWRTdGF0ZSkge1xuICAgICAgICAgIGNhc2UgU1RBVEVfUFJFUFJPQ0VTU0lORzpcbiAgICAgICAgICBjYXNlIFNUQVRFX1BPU1RQUk9DRVNTSU5HOlxuICAgICAgICAgICAgcmV0dXJuIDxQcm9ncmVzc0JhclByb2Nlc3NpbmcgcHJvZ3Jlc3M9e2NhbGN1bGF0ZVByb2Nlc3NpbmdQcm9ncmVzcyhmaWxlcyl9IC8+XG4gICAgICAgICAgY2FzZSBTVEFURV9DT01QTEVURTpcbiAgICAgICAgICAgIHJldHVybiA8UHJvZ3Jlc3NCYXJDb21wbGV0ZSBpMThuPXtpMThufSAvPlxuICAgICAgICAgIGNhc2UgU1RBVEVfRVJST1I6XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICA8UHJvZ3Jlc3NCYXJFcnJvclxuICAgICAgICAgICAgICAgIGVycm9yPXtlcnJvcn1cbiAgICAgICAgICAgICAgICBpMThuPXtpMThufVxuICAgICAgICAgICAgICAgIG51bVVwbG9hZHM9e251bVVwbG9hZHN9XG4gICAgICAgICAgICAgICAgY29tcGxldGU9e2NvbXBsZXRlfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgKVxuICAgICAgICAgIGNhc2UgU1RBVEVfVVBMT0FESU5HOlxuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgPFByb2dyZXNzQmFyVXBsb2FkaW5nXG4gICAgICAgICAgICAgICAgaTE4bj17aTE4bn1cbiAgICAgICAgICAgICAgICBzdXBwb3J0c1VwbG9hZFByb2dyZXNzPXtzdXBwb3J0c1VwbG9hZFByb2dyZXNzfVxuICAgICAgICAgICAgICAgIHRvdGFsUHJvZ3Jlc3M9e3RvdGFsUHJvZ3Jlc3N9XG4gICAgICAgICAgICAgICAgc2hvd1Byb2dyZXNzRGV0YWlscz17c2hvd1Byb2dyZXNzRGV0YWlsc31cbiAgICAgICAgICAgICAgICBpc1VwbG9hZFN0YXJ0ZWQ9e2lzVXBsb2FkU3RhcnRlZH1cbiAgICAgICAgICAgICAgICBpc0FsbENvbXBsZXRlPXtpc0FsbENvbXBsZXRlfVxuICAgICAgICAgICAgICAgIGlzQWxsUGF1c2VkPXtpc0FsbFBhdXNlZH1cbiAgICAgICAgICAgICAgICBuZXdGaWxlcz17bmV3RmlsZXN9XG4gICAgICAgICAgICAgICAgbnVtVXBsb2Fkcz17bnVtVXBsb2Fkc31cbiAgICAgICAgICAgICAgICBjb21wbGV0ZT17Y29tcGxldGV9XG4gICAgICAgICAgICAgICAgdG90YWxVcGxvYWRlZFNpemU9e3RvdGFsVXBsb2FkZWRTaXplfVxuICAgICAgICAgICAgICAgIHRvdGFsU2l6ZT17dG90YWxTaXplfVxuICAgICAgICAgICAgICAgIHRvdGFsRVRBPXt0b3RhbEVUQX1cbiAgICAgICAgICAgICAgICBzdGFydFVwbG9hZD17c3RhcnRVcGxvYWR9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICApXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBudWxsXG4gICAgICAgIH1cbiAgICAgIH0pKCl9XG5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwidXBweS1TdGF0dXNCYXItYWN0aW9uc1wiPlxuICAgICAgICB7cmVjb3ZlcmVkU3RhdGUgfHwgc2hvd1VwbG9hZEJ0biA/IChcbiAgICAgICAgICA8VXBsb2FkQnRuXG4gICAgICAgICAgICBuZXdGaWxlcz17bmV3RmlsZXN9XG4gICAgICAgICAgICBpc1VwbG9hZFN0YXJ0ZWQ9e2lzVXBsb2FkU3RhcnRlZH1cbiAgICAgICAgICAgIHJlY292ZXJlZFN0YXRlPXtyZWNvdmVyZWRTdGF0ZX1cbiAgICAgICAgICAgIGkxOG49e2kxOG59XG4gICAgICAgICAgICBpc1NvbWVHaG9zdD17aXNTb21lR2hvc3R9XG4gICAgICAgICAgICBzdGFydFVwbG9hZD17c3RhcnRVcGxvYWR9XG4gICAgICAgICAgICB1cGxvYWRTdGF0ZT17dXBsb2FkU3RhdGV9XG4gICAgICAgICAgLz5cbiAgICAgICAgKSA6IG51bGx9XG5cbiAgICAgICAge3Nob3dSZXRyeUJ0biA/IDxSZXRyeUJ0biBpMThuPXtpMThufSB1cHB5PXt1cHB5fSAvPiA6IG51bGx9XG5cbiAgICAgICAge3Nob3dQYXVzZVJlc3VtZUJ0biA/IChcbiAgICAgICAgICA8UGF1c2VSZXN1bWVCdXR0b25cbiAgICAgICAgICAgIGlzQWxsUGF1c2VkPXtpc0FsbFBhdXNlZH1cbiAgICAgICAgICAgIGkxOG49e2kxOG59XG4gICAgICAgICAgICBpc0FsbENvbXBsZXRlPXtpc0FsbENvbXBsZXRlfVxuICAgICAgICAgICAgcmVzdW1hYmxlVXBsb2Fkcz17cmVzdW1hYmxlVXBsb2Fkc31cbiAgICAgICAgICAgIHVwcHk9e3VwcHl9XG4gICAgICAgICAgLz5cbiAgICAgICAgKSA6IG51bGx9XG5cbiAgICAgICAge3Nob3dDYW5jZWxCdG4gPyA8Q2FuY2VsQnRuIGkxOG49e2kxOG59IHVwcHk9e3VwcHl9IC8+IDogbnVsbH1cblxuICAgICAgICB7c2hvd0RvbmVCdG4gPyAoXG4gICAgICAgICAgPERvbmVCdG4gaTE4bj17aTE4bn0gZG9uZUJ1dHRvbkhhbmRsZXI9e2RvbmVCdXR0b25IYW5kbGVyfSAvPlxuICAgICAgICApIDogbnVsbH1cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApXG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgU1RBVEVfRVJST1I6ICdlcnJvcicsXG4gIFNUQVRFX1dBSVRJTkc6ICd3YWl0aW5nJyxcbiAgU1RBVEVfUFJFUFJPQ0VTU0lORzogJ3ByZXByb2Nlc3NpbmcnLFxuICBTVEFURV9VUExPQURJTkc6ICd1cGxvYWRpbmcnLFxuICBTVEFURV9QT1NUUFJPQ0VTU0lORzogJ3Bvc3Rwcm9jZXNzaW5nJyxcbiAgU1RBVEVfQ09NUExFVEU6ICdjb21wbGV0ZScsXG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNhbGN1bGF0ZVByb2Nlc3NpbmdQcm9ncmVzcyAoZmlsZXMpIHtcbiAgY29uc3QgdmFsdWVzID0gW11cbiAgbGV0IG1vZGVcbiAgbGV0IG1lc3NhZ2VcblxuICBmb3IgKGNvbnN0IHsgcHJvZ3Jlc3MgfSBvZiBPYmplY3QudmFsdWVzKGZpbGVzKSkge1xuICAgIGNvbnN0IHsgcHJlcHJvY2VzcywgcG9zdHByb2Nlc3MgfSA9IHByb2dyZXNzXG4gICAgLy8gSW4gdGhlIGZ1dHVyZSB3ZSBzaG91bGQgcHJvYmFibHkgZG8gdGhpcyBkaWZmZXJlbnRseS4gRm9yIG5vdyB3ZSdsbCB0YWtlIHRoZVxuICAgIC8vIG1vZGUgYW5kIG1lc3NhZ2UgZnJvbSB0aGUgZmlyc3QgZmlsZeKAplxuICAgIGlmIChtZXNzYWdlID09IG51bGwgJiYgKHByZXByb2Nlc3MgfHwgcG9zdHByb2Nlc3MpKSB7XG4gICAgICAoeyBtb2RlLCBtZXNzYWdlIH0gPSBwcmVwcm9jZXNzIHx8IHBvc3Rwcm9jZXNzKVxuICAgIH1cbiAgICBpZiAocHJlcHJvY2Vzcz8ubW9kZSA9PT0gJ2RldGVybWluYXRlJykgdmFsdWVzLnB1c2gocHJlcHJvY2Vzcy52YWx1ZSlcbiAgICBpZiAocG9zdHByb2Nlc3M/Lm1vZGUgPT09ICdkZXRlcm1pbmF0ZScpIHZhbHVlcy5wdXNoKHBvc3Rwcm9jZXNzLnZhbHVlKVxuICB9XG5cbiAgY29uc3QgdmFsdWUgPSB2YWx1ZXMucmVkdWNlKCh0b3RhbCwgcHJvZ3Jlc3NWYWx1ZSkgPT4ge1xuICAgIHJldHVybiB0b3RhbCArIHByb2dyZXNzVmFsdWUgLyB2YWx1ZXMubGVuZ3RoXG4gIH0sIDApXG5cbiAgcmV0dXJuIHtcbiAgICBtb2RlLFxuICAgIG1lc3NhZ2UsXG4gICAgdmFsdWUsXG4gIH1cbn1cbiIsImNvbnN0IHsgVUlQbHVnaW4gfSA9IHJlcXVpcmUoJ0B1cHB5L2NvcmUnKVxuY29uc3QgZ2V0U3BlZWQgPSByZXF1aXJlKCdAdXBweS91dGlscy9saWIvZ2V0U3BlZWQnKVxuY29uc3QgZ2V0Qnl0ZXNSZW1haW5pbmcgPSByZXF1aXJlKCdAdXBweS91dGlscy9saWIvZ2V0Qnl0ZXNSZW1haW5pbmcnKVxuY29uc3QgZ2V0VGV4dERpcmVjdGlvbiA9IHJlcXVpcmUoJ0B1cHB5L3V0aWxzL2xpYi9nZXRUZXh0RGlyZWN0aW9uJylcbmNvbnN0IHN0YXR1c0JhclN0YXRlcyA9IHJlcXVpcmUoJy4vU3RhdHVzQmFyU3RhdGVzJylcbmNvbnN0IFN0YXR1c0JhclVJID0gcmVxdWlyZSgnLi9TdGF0dXNCYXInKVxuXG5jb25zdCBsb2NhbGUgPSByZXF1aXJlKCcuL2xvY2FsZS5qcycpXG5cbi8qKlxuICogU3RhdHVzQmFyOiByZW5kZXJzIGEgc3RhdHVzIGJhciB3aXRoIHVwbG9hZC9wYXVzZS9yZXN1bWUvY2FuY2VsL3JldHJ5IGJ1dHRvbnMsXG4gKiBwcm9ncmVzcyBwZXJjZW50YWdlIGFuZCB0aW1lIHJlbWFpbmluZy5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBjbGFzcyBTdGF0dXNCYXIgZXh0ZW5kcyBVSVBsdWdpbiB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBnbG9iYWwtcmVxdWlyZVxuICBzdGF0aWMgVkVSU0lPTiA9IHJlcXVpcmUoJy4uL3BhY2thZ2UuanNvbicpLnZlcnNpb25cblxuICBjb25zdHJ1Y3RvciAodXBweSwgb3B0cykge1xuICAgIHN1cGVyKHVwcHksIG9wdHMpXG4gICAgdGhpcy5pZCA9IHRoaXMub3B0cy5pZCB8fCAnU3RhdHVzQmFyJ1xuICAgIHRoaXMudGl0bGUgPSAnU3RhdHVzQmFyJ1xuICAgIHRoaXMudHlwZSA9ICdwcm9ncmVzc2luZGljYXRvcidcblxuICAgIHRoaXMuZGVmYXVsdExvY2FsZSA9IGxvY2FsZVxuXG4gICAgLy8gc2V0IGRlZmF1bHQgb3B0aW9uc1xuICAgIGNvbnN0IGRlZmF1bHRPcHRpb25zID0ge1xuICAgICAgdGFyZ2V0OiAnYm9keScsXG4gICAgICBoaWRlVXBsb2FkQnV0dG9uOiBmYWxzZSxcbiAgICAgIGhpZGVSZXRyeUJ1dHRvbjogZmFsc2UsXG4gICAgICBoaWRlUGF1c2VSZXN1bWVCdXR0b246IGZhbHNlLFxuICAgICAgaGlkZUNhbmNlbEJ1dHRvbjogZmFsc2UsXG4gICAgICBzaG93UHJvZ3Jlc3NEZXRhaWxzOiBmYWxzZSxcbiAgICAgIGhpZGVBZnRlckZpbmlzaDogdHJ1ZSxcbiAgICAgIGRvbmVCdXR0b25IYW5kbGVyOiBudWxsLFxuICAgIH1cblxuICAgIHRoaXMub3B0cyA9IHsgLi4uZGVmYXVsdE9wdGlvbnMsIC4uLm9wdHMgfVxuXG4gICAgdGhpcy5pMThuSW5pdCgpXG5cbiAgICB0aGlzLnJlbmRlciA9IHRoaXMucmVuZGVyLmJpbmQodGhpcylcbiAgICB0aGlzLmluc3RhbGwgPSB0aGlzLmluc3RhbGwuYmluZCh0aGlzKVxuICB9XG5cbiAgc3RhcnRVcGxvYWQgPSAoKSA9PiB7XG4gICAgY29uc3QgeyByZWNvdmVyZWRTdGF0ZSB9ID0gdGhpcy51cHB5LmdldFN0YXRlKClcblxuICAgIGlmIChyZWNvdmVyZWRTdGF0ZSkge1xuICAgICAgdGhpcy51cHB5LmVtaXQoJ3Jlc3RvcmUtY29uZmlybWVkJylcbiAgICAgIHJldHVybiB1bmRlZmluZWRcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy51cHB5LnVwbG9hZCgpLmNhdGNoKCgpID0+IHtcbiAgICAgIC8vIEVycm9yIGxvZ2dlZCBpbiBDb3JlXG4gICAgfSlcbiAgfVxuXG4gIHJlbmRlciAoc3RhdGUpIHtcbiAgICBjb25zdCB7XG4gICAgICBjYXBhYmlsaXRpZXMsXG4gICAgICBmaWxlcyxcbiAgICAgIGFsbG93TmV3VXBsb2FkLFxuICAgICAgdG90YWxQcm9ncmVzcyxcbiAgICAgIGVycm9yLFxuICAgICAgcmVjb3ZlcmVkU3RhdGUsXG4gICAgfSA9IHN0YXRlXG5cbiAgICBjb25zdCB7XG4gICAgICBuZXdGaWxlcyxcbiAgICAgIHN0YXJ0ZWRGaWxlcyxcbiAgICAgIGNvbXBsZXRlRmlsZXMsXG4gICAgICBpblByb2dyZXNzTm90UGF1c2VkRmlsZXMsXG5cbiAgICAgIGlzVXBsb2FkU3RhcnRlZCxcbiAgICAgIGlzQWxsQ29tcGxldGUsXG4gICAgICBpc0FsbEVycm9yZWQsXG4gICAgICBpc0FsbFBhdXNlZCxcbiAgICAgIGlzVXBsb2FkSW5Qcm9ncmVzcyxcbiAgICAgIGlzU29tZUdob3N0LFxuICAgIH0gPSB0aGlzLnVwcHkuZ2V0T2JqZWN0T2ZGaWxlc1BlclN0YXRlKClcblxuICAgIC8vIElmIHNvbWUgc3RhdGUgd2FzIHJlY292ZXJlZCwgd2Ugd2FudCB0byBzaG93IFVwbG9hZCBidXR0b24vY291bnRlclxuICAgIC8vIGZvciBhbGwgdGhlIGZpbGVzLCBiZWNhdXNlIGluIHRoaXMgY2FzZSBpdOKAmXMgbm90IGFuIFVwbG9hZCBidXR0b24sXG4gICAgLy8gYnV0IOKAnENvbmZpcm0gUmVzdG9yZSBCdXR0b27igJ1cbiAgICBjb25zdCBuZXdGaWxlc09yUmVjb3ZlcmVkID0gcmVjb3ZlcmVkU3RhdGVcbiAgICAgID8gT2JqZWN0LnZhbHVlcyhmaWxlcylcbiAgICAgIDogbmV3RmlsZXNcbiAgICBjb25zdCB0b3RhbEVUQSA9IGdldFRvdGFsRVRBKGluUHJvZ3Jlc3NOb3RQYXVzZWRGaWxlcylcbiAgICBjb25zdCByZXN1bWFibGVVcGxvYWRzID0gISFjYXBhYmlsaXRpZXMucmVzdW1hYmxlVXBsb2Fkc1xuICAgIGNvbnN0IHN1cHBvcnRzVXBsb2FkUHJvZ3Jlc3MgPSBjYXBhYmlsaXRpZXMudXBsb2FkUHJvZ3Jlc3MgIT09IGZhbHNlXG5cbiAgICBsZXQgdG90YWxTaXplID0gMFxuICAgIGxldCB0b3RhbFVwbG9hZGVkU2l6ZSA9IDBcblxuICAgIHN0YXJ0ZWRGaWxlcy5mb3JFYWNoKChmaWxlKSA9PiB7XG4gICAgICB0b3RhbFNpemUgKz0gZmlsZS5wcm9ncmVzcy5ieXRlc1RvdGFsIHx8IDBcbiAgICAgIHRvdGFsVXBsb2FkZWRTaXplICs9IGZpbGUucHJvZ3Jlc3MuYnl0ZXNVcGxvYWRlZCB8fCAwXG4gICAgfSlcblxuICAgIHJldHVybiBTdGF0dXNCYXJVSSh7XG4gICAgICBlcnJvcixcbiAgICAgIHVwbG9hZFN0YXRlOiBnZXRVcGxvYWRpbmdTdGF0ZShcbiAgICAgICAgZXJyb3IsXG4gICAgICAgIGlzQWxsQ29tcGxldGUsXG4gICAgICAgIHJlY292ZXJlZFN0YXRlLFxuICAgICAgICBzdGF0ZS5maWxlcyB8fCB7fSxcbiAgICAgICksXG4gICAgICBhbGxvd05ld1VwbG9hZCxcbiAgICAgIHRvdGFsUHJvZ3Jlc3MsXG4gICAgICB0b3RhbFNpemUsXG4gICAgICB0b3RhbFVwbG9hZGVkU2l6ZSxcbiAgICAgIGlzQWxsQ29tcGxldGU6IGZhbHNlLFxuICAgICAgaXNBbGxQYXVzZWQsXG4gICAgICBpc0FsbEVycm9yZWQsXG4gICAgICBpc1VwbG9hZFN0YXJ0ZWQsXG4gICAgICBpc1VwbG9hZEluUHJvZ3Jlc3MsXG4gICAgICBpc1NvbWVHaG9zdCxcbiAgICAgIHJlY292ZXJlZFN0YXRlLFxuICAgICAgY29tcGxldGU6IGNvbXBsZXRlRmlsZXMubGVuZ3RoLFxuICAgICAgbmV3RmlsZXM6IG5ld0ZpbGVzT3JSZWNvdmVyZWQubGVuZ3RoLFxuICAgICAgbnVtVXBsb2Fkczogc3RhcnRlZEZpbGVzLmxlbmd0aCxcbiAgICAgIHRvdGFsRVRBLFxuICAgICAgZmlsZXMsXG4gICAgICBpMThuOiB0aGlzLmkxOG4sXG4gICAgICB1cHB5OiB0aGlzLnVwcHksXG4gICAgICBzdGFydFVwbG9hZDogdGhpcy5zdGFydFVwbG9hZCxcbiAgICAgIGRvbmVCdXR0b25IYW5kbGVyOiB0aGlzLm9wdHMuZG9uZUJ1dHRvbkhhbmRsZXIsXG4gICAgICByZXN1bWFibGVVcGxvYWRzLFxuICAgICAgc3VwcG9ydHNVcGxvYWRQcm9ncmVzcyxcbiAgICAgIHNob3dQcm9ncmVzc0RldGFpbHM6IHRoaXMub3B0cy5zaG93UHJvZ3Jlc3NEZXRhaWxzLFxuICAgICAgaGlkZVVwbG9hZEJ1dHRvbjogdGhpcy5vcHRzLmhpZGVVcGxvYWRCdXR0b24sXG4gICAgICBoaWRlUmV0cnlCdXR0b246IHRoaXMub3B0cy5oaWRlUmV0cnlCdXR0b24sXG4gICAgICBoaWRlUGF1c2VSZXN1bWVCdXR0b246IHRoaXMub3B0cy5oaWRlUGF1c2VSZXN1bWVCdXR0b24sXG4gICAgICBoaWRlQ2FuY2VsQnV0dG9uOiB0aGlzLm9wdHMuaGlkZUNhbmNlbEJ1dHRvbixcbiAgICAgIGhpZGVBZnRlckZpbmlzaDogdGhpcy5vcHRzLmhpZGVBZnRlckZpbmlzaCxcbiAgICAgIGlzVGFyZ2V0RE9NRWw6IHRoaXMuaXNUYXJnZXRET01FbCxcbiAgICB9KVxuICB9XG5cbiAgb25Nb3VudCAoKSB7XG4gICAgLy8gU2V0IHRoZSB0ZXh0IGRpcmVjdGlvbiBpZiB0aGUgcGFnZSBoYXMgbm90IGRlZmluZWQgb25lLlxuICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLmVsXG4gICAgY29uc3QgZGlyZWN0aW9uID0gZ2V0VGV4dERpcmVjdGlvbihlbGVtZW50KVxuICAgIGlmICghZGlyZWN0aW9uKSB7XG4gICAgICBlbGVtZW50LmRpciA9ICdsdHInXG4gICAgfVxuICB9XG5cbiAgaW5zdGFsbCAoKSB7XG4gICAgY29uc3QgeyB0YXJnZXQgfSA9IHRoaXMub3B0c1xuICAgIGlmICh0YXJnZXQpIHtcbiAgICAgIHRoaXMubW91bnQodGFyZ2V0LCB0aGlzKVxuICAgIH1cbiAgfVxuXG4gIHVuaW5zdGFsbCAoKSB7XG4gICAgdGhpcy51bm1vdW50KClcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRUb3RhbFNwZWVkIChmaWxlcykge1xuICBsZXQgdG90YWxTcGVlZCA9IDBcbiAgZmlsZXMuZm9yRWFjaCgoZmlsZSkgPT4ge1xuICAgIHRvdGFsU3BlZWQgKz0gZ2V0U3BlZWQoZmlsZS5wcm9ncmVzcylcbiAgfSlcbiAgcmV0dXJuIHRvdGFsU3BlZWRcbn1cblxuZnVuY3Rpb24gZ2V0VG90YWxFVEEgKGZpbGVzKSB7XG4gIGNvbnN0IHRvdGFsU3BlZWQgPSBnZXRUb3RhbFNwZWVkKGZpbGVzKVxuICBpZiAodG90YWxTcGVlZCA9PT0gMCkge1xuICAgIHJldHVybiAwXG4gIH1cblxuICBjb25zdCB0b3RhbEJ5dGVzUmVtYWluaW5nID0gZmlsZXMucmVkdWNlKCh0b3RhbCwgZmlsZSkgPT4ge1xuICAgIHJldHVybiB0b3RhbCArIGdldEJ5dGVzUmVtYWluaW5nKGZpbGUucHJvZ3Jlc3MpXG4gIH0sIDApXG5cbiAgcmV0dXJuIE1hdGgucm91bmQoKHRvdGFsQnl0ZXNSZW1haW5pbmcgLyB0b3RhbFNwZWVkKSAqIDEwKSAvIDEwXG59XG5cbmZ1bmN0aW9uIGdldFVwbG9hZGluZ1N0YXRlIChlcnJvciwgaXNBbGxDb21wbGV0ZSwgcmVjb3ZlcmVkU3RhdGUsIGZpbGVzKSB7XG4gIGlmIChlcnJvciAmJiAhaXNBbGxDb21wbGV0ZSkge1xuICAgIHJldHVybiBzdGF0dXNCYXJTdGF0ZXMuU1RBVEVfRVJST1JcbiAgfVxuXG4gIGlmIChpc0FsbENvbXBsZXRlKSB7XG4gICAgcmV0dXJuIHN0YXR1c0JhclN0YXRlcy5TVEFURV9DT01QTEVURVxuICB9XG5cbiAgaWYgKHJlY292ZXJlZFN0YXRlKSB7XG4gICAgcmV0dXJuIHN0YXR1c0JhclN0YXRlcy5TVEFURV9XQUlUSU5HXG4gIH1cblxuICBsZXQgc3RhdGUgPSBzdGF0dXNCYXJTdGF0ZXMuU1RBVEVfV0FJVElOR1xuICBjb25zdCBmaWxlSURzID0gT2JqZWN0LmtleXMoZmlsZXMpXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZmlsZUlEcy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHsgcHJvZ3Jlc3MgfSA9IGZpbGVzW2ZpbGVJRHNbaV1dXG4gICAgLy8gSWYgQU5ZIGZpbGVzIGFyZSBiZWluZyB1cGxvYWRlZCByaWdodCBub3csIHNob3cgdGhlIHVwbG9hZGluZyBzdGF0ZS5cbiAgICBpZiAocHJvZ3Jlc3MudXBsb2FkU3RhcnRlZCAmJiAhcHJvZ3Jlc3MudXBsb2FkQ29tcGxldGUpIHtcbiAgICAgIHJldHVybiBzdGF0dXNCYXJTdGF0ZXMuU1RBVEVfVVBMT0FESU5HXG4gICAgfVxuICAgIC8vIElmIGZpbGVzIGFyZSBiZWluZyBwcmVwcm9jZXNzZWQgQU5EIHBvc3Rwcm9jZXNzZWQgYXQgdGhpcyB0aW1lLCB3ZSBzaG93IHRoZVxuICAgIC8vIHByZXByb2Nlc3Mgc3RhdGUuIElmIGFueSBmaWxlcyBhcmUgYmVpbmcgdXBsb2FkZWQgd2Ugc2hvdyB1cGxvYWRpbmcuXG4gICAgaWYgKHByb2dyZXNzLnByZXByb2Nlc3MgJiYgc3RhdGUgIT09IHN0YXR1c0JhclN0YXRlcy5TVEFURV9VUExPQURJTkcpIHtcbiAgICAgIHN0YXRlID0gc3RhdHVzQmFyU3RhdGVzLlNUQVRFX1BSRVBST0NFU1NJTkdcbiAgICB9XG4gICAgLy8gSWYgTk8gZmlsZXMgYXJlIGJlaW5nIHByZXByb2Nlc3NlZCBvciB1cGxvYWRlZCByaWdodCBub3csIGJ1dCBzb21lIGZpbGVzIGFyZVxuICAgIC8vIGJlaW5nIHBvc3Rwcm9jZXNzZWQsIHNob3cgdGhlIHBvc3Rwcm9jZXNzIHN0YXRlLlxuICAgIGlmIChcbiAgICAgIHByb2dyZXNzLnBvc3Rwcm9jZXNzXG4gICAgICAmJiBzdGF0ZSAhPT0gc3RhdHVzQmFyU3RhdGVzLlNUQVRFX1VQTE9BRElOR1xuICAgICAgJiYgc3RhdGUgIT09IHN0YXR1c0JhclN0YXRlcy5TVEFURV9QUkVQUk9DRVNTSU5HXG4gICAgKSB7XG4gICAgICBzdGF0ZSA9IHN0YXR1c0JhclN0YXRlcy5TVEFURV9QT1NUUFJPQ0VTU0lOR1xuICAgIH1cbiAgfVxuICByZXR1cm4gc3RhdGVcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0ge1xuICBzdHJpbmdzOiB7XG4gICAgLy8gU2hvd24gaW4gdGhlIHN0YXR1cyBiYXIgd2hpbGUgZmlsZXMgYXJlIGJlaW5nIHVwbG9hZGVkLlxuICAgIHVwbG9hZGluZzogJ1VwbG9hZGluZycsXG4gICAgLy8gU2hvd24gaW4gdGhlIHN0YXR1cyBiYXIgb25jZSBhbGwgZmlsZXMgaGF2ZSBiZWVuIHVwbG9hZGVkLlxuICAgIGNvbXBsZXRlOiAnQ29tcGxldGUnLFxuICAgIC8vIFNob3duIGluIHRoZSBzdGF0dXMgYmFyIGlmIGFuIHVwbG9hZCBmYWlsZWQuXG4gICAgdXBsb2FkRmFpbGVkOiAnVXBsb2FkIGZhaWxlZCcsXG4gICAgLy8gU2hvd24gaW4gdGhlIHN0YXR1cyBiYXIgd2hpbGUgdGhlIHVwbG9hZCBpcyBwYXVzZWQuXG4gICAgcGF1c2VkOiAnUGF1c2VkJyxcbiAgICAvLyBVc2VkIGFzIHRoZSBsYWJlbCBmb3IgdGhlIGJ1dHRvbiB0aGF0IHJldHJpZXMgYW4gdXBsb2FkLlxuICAgIHJldHJ5OiAnUmV0cnknLFxuICAgIC8vIFVzZWQgYXMgdGhlIGxhYmVsIGZvciB0aGUgYnV0dG9uIHRoYXQgY2FuY2VscyBhbiB1cGxvYWQuXG4gICAgY2FuY2VsOiAnQ2FuY2VsJyxcbiAgICAvLyBVc2VkIGFzIHRoZSBsYWJlbCBmb3IgdGhlIGJ1dHRvbiB0aGF0IHBhdXNlcyBhbiB1cGxvYWQuXG4gICAgcGF1c2U6ICdQYXVzZScsXG4gICAgLy8gVXNlZCBhcyB0aGUgbGFiZWwgZm9yIHRoZSBidXR0b24gdGhhdCByZXN1bWVzIGFuIHVwbG9hZC5cbiAgICByZXN1bWU6ICdSZXN1bWUnLFxuICAgIC8vIFVzZWQgYXMgdGhlIGxhYmVsIGZvciB0aGUgYnV0dG9uIHRoYXQgcmVzZXRzIHRoZSB1cGxvYWQgc3RhdGUgYWZ0ZXIgYW4gdXBsb2FkXG4gICAgZG9uZTogJ0RvbmUnLFxuICAgIC8vIFdoZW4gYHNob3dQcm9ncmVzc0RldGFpbHNgIGlzIHNldCwgc2hvd3MgdGhlIG51bWJlciBvZiBmaWxlcyB0aGF0IGhhdmUgYmVlbiBmdWxseSB1cGxvYWRlZCBzbyBmYXIuXG4gICAgZmlsZXNVcGxvYWRlZE9mVG90YWw6IHtcbiAgICAgIDA6ICcle2NvbXBsZXRlfSBvZiAle3NtYXJ0X2NvdW50fSBmaWxlIHVwbG9hZGVkJyxcbiAgICAgIDE6ICcle2NvbXBsZXRlfSBvZiAle3NtYXJ0X2NvdW50fSBmaWxlcyB1cGxvYWRlZCcsXG4gICAgfSxcbiAgICAvLyBXaGVuIGBzaG93UHJvZ3Jlc3NEZXRhaWxzYCBpcyBzZXQsIHNob3dzIHRoZSBhbW91bnQgb2YgYnl0ZXMgdGhhdCBoYXZlIGJlZW4gdXBsb2FkZWQgc28gZmFyLlxuICAgIGRhdGFVcGxvYWRlZE9mVG90YWw6ICcle2NvbXBsZXRlfSBvZiAle3RvdGFsfScsXG4gICAgLy8gV2hlbiBgc2hvd1Byb2dyZXNzRGV0YWlsc2AgaXMgc2V0LCBzaG93cyBhbiBlc3RpbWF0aW9uIG9mIGhvdyBsb25nIHRoZSB1cGxvYWQgd2lsbCB0YWtlIHRvIGNvbXBsZXRlLlxuICAgIHhUaW1lTGVmdDogJyV7dGltZX0gbGVmdCcsXG4gICAgLy8gVXNlZCBhcyB0aGUgbGFiZWwgZm9yIHRoZSBidXR0b24gdGhhdCBzdGFydHMgYW4gdXBsb2FkLlxuICAgIHVwbG9hZFhGaWxlczoge1xuICAgICAgMDogJ1VwbG9hZCAle3NtYXJ0X2NvdW50fSBmaWxlJyxcbiAgICAgIDE6ICdVcGxvYWQgJXtzbWFydF9jb3VudH0gZmlsZXMnLFxuICAgIH0sXG4gICAgLy8gVXNlZCBhcyB0aGUgbGFiZWwgZm9yIHRoZSBidXR0b24gdGhhdCBzdGFydHMgYW4gdXBsb2FkLCBpZiBhbm90aGVyIHVwbG9hZCBoYXMgYmVlbiBzdGFydGVkIGluIHRoZSBwYXN0XG4gICAgLy8gYW5kIG5ldyBmaWxlcyB3ZXJlIGFkZGVkIGxhdGVyLlxuICAgIHVwbG9hZFhOZXdGaWxlczoge1xuICAgICAgMDogJ1VwbG9hZCArJXtzbWFydF9jb3VudH0gZmlsZScsXG4gICAgICAxOiAnVXBsb2FkICsle3NtYXJ0X2NvdW50fSBmaWxlcycsXG4gICAgfSxcbiAgICB1cGxvYWQ6ICdVcGxvYWQnLFxuICAgIHJldHJ5VXBsb2FkOiAnUmV0cnkgdXBsb2FkJyxcbiAgICB4TW9yZUZpbGVzQWRkZWQ6IHtcbiAgICAgIDA6ICcle3NtYXJ0X2NvdW50fSBtb3JlIGZpbGUgYWRkZWQnLFxuICAgICAgMTogJyV7c21hcnRfY291bnR9IG1vcmUgZmlsZXMgYWRkZWQnLFxuICAgIH0sXG4gICAgc2hvd0Vycm9yRGV0YWlsczogJ1Nob3cgZXJyb3IgZGV0YWlscycsXG4gIH0sXG59XG4iLCIvKipcbiAqIERlZmF1bHQgc3RvcmUgdGhhdCBrZWVwcyBzdGF0ZSBpbiBhIHNpbXBsZSBvYmplY3QuXG4gKi9cbmNsYXNzIERlZmF1bHRTdG9yZSB7XG4gIHN0YXRpYyBWRVJTSU9OID0gcmVxdWlyZSgnLi4vcGFja2FnZS5qc29uJykudmVyc2lvblxuXG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICB0aGlzLnN0YXRlID0ge31cbiAgICB0aGlzLmNhbGxiYWNrcyA9IFtdXG4gIH1cblxuICBnZXRTdGF0ZSAoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGVcbiAgfVxuXG4gIHNldFN0YXRlIChwYXRjaCkge1xuICAgIGNvbnN0IHByZXZTdGF0ZSA9IHsgLi4udGhpcy5zdGF0ZSB9XG4gICAgY29uc3QgbmV4dFN0YXRlID0geyAuLi50aGlzLnN0YXRlLCAuLi5wYXRjaCB9XG5cbiAgICB0aGlzLnN0YXRlID0gbmV4dFN0YXRlXG4gICAgdGhpcy4jcHVibGlzaChwcmV2U3RhdGUsIG5leHRTdGF0ZSwgcGF0Y2gpXG4gIH1cblxuICBzdWJzY3JpYmUgKGxpc3RlbmVyKSB7XG4gICAgdGhpcy5jYWxsYmFja3MucHVzaChsaXN0ZW5lcilcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgLy8gUmVtb3ZlIHRoZSBsaXN0ZW5lci5cbiAgICAgIHRoaXMuY2FsbGJhY2tzLnNwbGljZShcbiAgICAgICAgdGhpcy5jYWxsYmFja3MuaW5kZXhPZihsaXN0ZW5lciksXG4gICAgICAgIDEsXG4gICAgICApXG4gICAgfVxuICB9XG5cbiAgI3B1Ymxpc2ggKC4uLmFyZ3MpIHtcbiAgICB0aGlzLmNhbGxiYWNrcy5mb3JFYWNoKChsaXN0ZW5lcikgPT4ge1xuICAgICAgbGlzdGVuZXIoLi4uYXJncylcbiAgICB9KVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGVmYXVsdFN0b3JlICgpIHtcbiAgcmV0dXJuIG5ldyBEZWZhdWx0U3RvcmUoKVxufVxuIiwiY29uc3QgeyBVSVBsdWdpbiB9ID0gcmVxdWlyZSgnQHVwcHkvY29yZScpXG5jb25zdCBkYXRhVVJJdG9CbG9iID0gcmVxdWlyZSgnQHVwcHkvdXRpbHMvbGliL2RhdGFVUkl0b0Jsb2InKVxuY29uc3QgaXNPYmplY3RVUkwgPSByZXF1aXJlKCdAdXBweS91dGlscy9saWIvaXNPYmplY3RVUkwnKVxuY29uc3QgaXNQcmV2aWV3U3VwcG9ydGVkID0gcmVxdWlyZSgnQHVwcHkvdXRpbHMvbGliL2lzUHJldmlld1N1cHBvcnRlZCcpXG5jb25zdCBleGlmciA9IHJlcXVpcmUoJ2V4aWZyL2Rpc3QvbWluaS5sZWdhY3kudW1kLmpzJylcblxuY29uc3QgbG9jYWxlID0gcmVxdWlyZSgnLi9sb2NhbGUnKVxuXG4vKipcbiAqIFRoZSBUaHVtYm5haWwgR2VuZXJhdG9yIHBsdWdpblxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gY2xhc3MgVGh1bWJuYWlsR2VuZXJhdG9yIGV4dGVuZHMgVUlQbHVnaW4ge1xuICBzdGF0aWMgVkVSU0lPTiA9IHJlcXVpcmUoJy4uL3BhY2thZ2UuanNvbicpLnZlcnNpb25cblxuICBjb25zdHJ1Y3RvciAodXBweSwgb3B0cykge1xuICAgIHN1cGVyKHVwcHksIG9wdHMpXG4gICAgdGhpcy50eXBlID0gJ21vZGlmaWVyJ1xuICAgIHRoaXMuaWQgPSB0aGlzLm9wdHMuaWQgfHwgJ1RodW1ibmFpbEdlbmVyYXRvcidcbiAgICB0aGlzLnRpdGxlID0gJ1RodW1ibmFpbCBHZW5lcmF0b3InXG4gICAgdGhpcy5xdWV1ZSA9IFtdXG4gICAgdGhpcy5xdWV1ZVByb2Nlc3NpbmcgPSBmYWxzZVxuICAgIHRoaXMuZGVmYXVsdFRodW1ibmFpbERpbWVuc2lvbiA9IDIwMFxuICAgIHRoaXMudGh1bWJuYWlsVHlwZSA9IHRoaXMub3B0cy50aHVtYm5haWxUeXBlIHx8ICdpbWFnZS9qcGVnJ1xuXG4gICAgdGhpcy5kZWZhdWx0TG9jYWxlID0gbG9jYWxlXG5cbiAgICBjb25zdCBkZWZhdWx0T3B0aW9ucyA9IHtcbiAgICAgIHRodW1ibmFpbFdpZHRoOiBudWxsLFxuICAgICAgdGh1bWJuYWlsSGVpZ2h0OiBudWxsLFxuICAgICAgd2FpdEZvclRodW1ibmFpbHNCZWZvcmVVcGxvYWQ6IGZhbHNlLFxuICAgICAgbGF6eTogZmFsc2UsXG4gICAgfVxuXG4gICAgdGhpcy5vcHRzID0geyAuLi5kZWZhdWx0T3B0aW9ucywgLi4ub3B0cyB9XG4gICAgdGhpcy5pMThuSW5pdCgpXG5cbiAgICBpZiAodGhpcy5vcHRzLmxhenkgJiYgdGhpcy5vcHRzLndhaXRGb3JUaHVtYm5haWxzQmVmb3JlVXBsb2FkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RodW1ibmFpbEdlbmVyYXRvcjogVGhlIGBsYXp5YCBhbmQgYHdhaXRGb3JUaHVtYm5haWxzQmVmb3JlVXBsb2FkYCBvcHRpb25zIGFyZSBtdXR1YWxseSBleGNsdXNpdmUuIFBsZWFzZSBlbnN1cmUgYXQgbW9zdCBvbmUgb2YgdGhlbSBpcyBzZXQgdG8gYHRydWVgLicpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIHRodW1ibmFpbCBmb3IgdGhlIGdpdmVuIFVwcHkgZmlsZSBvYmplY3QuXG4gICAqXG4gICAqIEBwYXJhbSB7e2RhdGE6IEJsb2J9fSBmaWxlXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB0YXJnZXRXaWR0aFxuICAgKiBAcGFyYW0ge251bWJlcn0gdGFyZ2V0SGVpZ2h0XG4gICAqIEByZXR1cm5zIHtQcm9taXNlfVxuICAgKi9cbiAgY3JlYXRlVGh1bWJuYWlsIChmaWxlLCB0YXJnZXRXaWR0aCwgdGFyZ2V0SGVpZ2h0KSB7XG4gICAgY29uc3Qgb3JpZ2luYWxVcmwgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGZpbGUuZGF0YSlcblxuICAgIGNvbnN0IG9ubG9hZCA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGNvbnN0IGltYWdlID0gbmV3IEltYWdlKClcbiAgICAgIGltYWdlLnNyYyA9IG9yaWdpbmFsVXJsXG4gICAgICBpbWFnZS5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgKCkgPT4ge1xuICAgICAgICBVUkwucmV2b2tlT2JqZWN0VVJMKG9yaWdpbmFsVXJsKVxuICAgICAgICByZXNvbHZlKGltYWdlKVxuICAgICAgfSlcbiAgICAgIGltYWdlLmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgKGV2ZW50KSA9PiB7XG4gICAgICAgIFVSTC5yZXZva2VPYmplY3RVUkwob3JpZ2luYWxVcmwpXG4gICAgICAgIHJlamVjdChldmVudC5lcnJvciB8fCBuZXcgRXJyb3IoJ0NvdWxkIG5vdCBjcmVhdGUgdGh1bWJuYWlsJykpXG4gICAgICB9KVxuICAgIH0pXG5cbiAgICBjb25zdCBvcmllbnRhdGlvblByb21pc2UgPSBleGlmci5yb3RhdGlvbihmaWxlLmRhdGEpLmNhdGNoKCgpID0+IDEpXG5cbiAgICByZXR1cm4gUHJvbWlzZS5hbGwoW29ubG9hZCwgb3JpZW50YXRpb25Qcm9taXNlXSlcbiAgICAgIC50aGVuKChbaW1hZ2UsIG9yaWVudGF0aW9uXSkgPT4ge1xuICAgICAgICBjb25zdCBkaW1lbnNpb25zID0gdGhpcy5nZXRQcm9wb3J0aW9uYWxEaW1lbnNpb25zKGltYWdlLCB0YXJnZXRXaWR0aCwgdGFyZ2V0SGVpZ2h0LCBvcmllbnRhdGlvbi5kZWcpXG4gICAgICAgIGNvbnN0IHJvdGF0ZWRJbWFnZSA9IHRoaXMucm90YXRlSW1hZ2UoaW1hZ2UsIG9yaWVudGF0aW9uKVxuICAgICAgICBjb25zdCByZXNpemVkSW1hZ2UgPSB0aGlzLnJlc2l6ZUltYWdlKHJvdGF0ZWRJbWFnZSwgZGltZW5zaW9ucy53aWR0aCwgZGltZW5zaW9ucy5oZWlnaHQpXG4gICAgICAgIHJldHVybiB0aGlzLmNhbnZhc1RvQmxvYihyZXNpemVkSW1hZ2UsIHRoaXMudGh1bWJuYWlsVHlwZSwgODApXG4gICAgICB9KVxuICAgICAgLnRoZW4oYmxvYiA9PiB7XG4gICAgICAgIHJldHVybiBVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpXG4gICAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgbmV3IGNhbGN1bGF0ZWQgZGltZW5zaW9ucyBmb3IgdGhlIGdpdmVuIGltYWdlIGFuZCBhIHRhcmdldCB3aWR0aFxuICAgKiBvciBoZWlnaHQuIElmIGJvdGggd2lkdGggYW5kIGhlaWdodCBhcmUgZ2l2ZW4sIG9ubHkgd2lkdGggaXMgdGFrZW4gaW50b1xuICAgKiBhY2NvdW50LiBJZiBuZWl0aGVyIHdpZHRoIG5vciBoZWlnaHQgYXJlIGdpdmVuLCB0aGUgZGVmYXVsdCBkaW1lbnNpb25cbiAgICogaXMgdXNlZC5cbiAgICovXG4gIGdldFByb3BvcnRpb25hbERpbWVuc2lvbnMgKGltZywgd2lkdGgsIGhlaWdodCwgcm90YXRpb24pIHtcbiAgICBsZXQgYXNwZWN0ID0gaW1nLndpZHRoIC8gaW1nLmhlaWdodFxuICAgIGlmIChyb3RhdGlvbiA9PT0gOTAgfHwgcm90YXRpb24gPT09IDI3MCkge1xuICAgICAgYXNwZWN0ID0gaW1nLmhlaWdodCAvIGltZy53aWR0aFxuICAgIH1cblxuICAgIGlmICh3aWR0aCAhPSBudWxsKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3aWR0aCxcbiAgICAgICAgaGVpZ2h0OiBNYXRoLnJvdW5kKHdpZHRoIC8gYXNwZWN0KSxcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaGVpZ2h0ICE9IG51bGwpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHdpZHRoOiBNYXRoLnJvdW5kKGhlaWdodCAqIGFzcGVjdCksXG4gICAgICAgIGhlaWdodCxcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgd2lkdGg6IHRoaXMuZGVmYXVsdFRodW1ibmFpbERpbWVuc2lvbixcbiAgICAgIGhlaWdodDogTWF0aC5yb3VuZCh0aGlzLmRlZmF1bHRUaHVtYm5haWxEaW1lbnNpb24gLyBhc3BlY3QpLFxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBNYWtlIHN1cmUgdGhlIGltYWdlIGRvZXNu4oCZdCBleGNlZWQgYnJvd3Nlci9kZXZpY2UgY2FudmFzIGxpbWl0cy5cbiAgICogRm9yIGlvcyB3aXRoIDI1NiBSQU0gYW5kIGllXG4gICAqL1xuICBwcm90ZWN0IChpbWFnZSkge1xuICAgIC8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzYwODE0ODMvbWF4aW11bS1zaXplLW9mLWEtY2FudmFzLWVsZW1lbnRcblxuICAgIGNvbnN0IHJhdGlvID0gaW1hZ2Uud2lkdGggLyBpbWFnZS5oZWlnaHRcblxuICAgIGNvbnN0IG1heFNxdWFyZSA9IDUwMDAwMDAgLy8gaW9zIG1heCBjYW52YXMgc3F1YXJlXG4gICAgY29uc3QgbWF4U2l6ZSA9IDQwOTYgLy8gaWUgbWF4IGNhbnZhcyBkaW1lbnNpb25zXG5cbiAgICBsZXQgbWF4VyA9IE1hdGguZmxvb3IoTWF0aC5zcXJ0KG1heFNxdWFyZSAqIHJhdGlvKSlcbiAgICBsZXQgbWF4SCA9IE1hdGguZmxvb3IobWF4U3F1YXJlIC8gTWF0aC5zcXJ0KG1heFNxdWFyZSAqIHJhdGlvKSlcbiAgICBpZiAobWF4VyA+IG1heFNpemUpIHtcbiAgICAgIG1heFcgPSBtYXhTaXplXG4gICAgICBtYXhIID0gTWF0aC5yb3VuZChtYXhXIC8gcmF0aW8pXG4gICAgfVxuICAgIGlmIChtYXhIID4gbWF4U2l6ZSkge1xuICAgICAgbWF4SCA9IG1heFNpemVcbiAgICAgIG1heFcgPSBNYXRoLnJvdW5kKHJhdGlvICogbWF4SClcbiAgICB9XG4gICAgaWYgKGltYWdlLndpZHRoID4gbWF4Vykge1xuICAgICAgY29uc3QgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJylcbiAgICAgIGNhbnZhcy53aWR0aCA9IG1heFdcbiAgICAgIGNhbnZhcy5oZWlnaHQgPSBtYXhIXG4gICAgICBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKS5kcmF3SW1hZ2UoaW1hZ2UsIDAsIDAsIG1heFcsIG1heEgpXG4gICAgICBpbWFnZSA9IGNhbnZhc1xuICAgIH1cblxuICAgIHJldHVybiBpbWFnZVxuICB9XG5cbiAgLyoqXG4gICAqIFJlc2l6ZSBhbiBpbWFnZSB0byB0aGUgdGFyZ2V0IGB3aWR0aGAgYW5kIGBoZWlnaHRgLlxuICAgKlxuICAgKiBSZXR1cm5zIGEgQ2FudmFzIHdpdGggdGhlIHJlc2l6ZWQgaW1hZ2Ugb24gaXQuXG4gICAqL1xuICByZXNpemVJbWFnZSAoaW1hZ2UsIHRhcmdldFdpZHRoLCB0YXJnZXRIZWlnaHQpIHtcbiAgICAvLyBSZXNpemluZyBpbiBzdGVwcyByZWZhY3RvcmVkIHRvIHVzZSBhIHNvbHV0aW9uIGZyb21cbiAgICAvLyBodHRwczovL2Jsb2cudXBsb2FkY2FyZS5jb20vaW1hZ2UtcmVzaXplLWluLWJyb3dzZXJzLWlzLWJyb2tlbi1lMzhlZWQwOGRmMDFcblxuICAgIGltYWdlID0gdGhpcy5wcm90ZWN0KGltYWdlKVxuXG4gICAgbGV0IHN0ZXBzID0gTWF0aC5jZWlsKE1hdGgubG9nMihpbWFnZS53aWR0aCAvIHRhcmdldFdpZHRoKSlcbiAgICBpZiAoc3RlcHMgPCAxKSB7XG4gICAgICBzdGVwcyA9IDFcbiAgICB9XG4gICAgbGV0IHNXID0gdGFyZ2V0V2lkdGggKiAyICoqIChzdGVwcyAtIDEpXG4gICAgbGV0IHNIID0gdGFyZ2V0SGVpZ2h0ICogMiAqKiAoc3RlcHMgLSAxKVxuICAgIGNvbnN0IHggPSAyXG5cbiAgICB3aGlsZSAoc3RlcHMtLSkge1xuICAgICAgY29uc3QgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJylcbiAgICAgIGNhbnZhcy53aWR0aCA9IHNXXG4gICAgICBjYW52YXMuaGVpZ2h0ID0gc0hcbiAgICAgIGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpLmRyYXdJbWFnZShpbWFnZSwgMCwgMCwgc1csIHNIKVxuICAgICAgaW1hZ2UgPSBjYW52YXNcblxuICAgICAgc1cgPSBNYXRoLnJvdW5kKHNXIC8geClcbiAgICAgIHNIID0gTWF0aC5yb3VuZChzSCAvIHgpXG4gICAgfVxuXG4gICAgcmV0dXJuIGltYWdlXG4gIH1cblxuICByb3RhdGVJbWFnZSAoaW1hZ2UsIHRyYW5zbGF0ZSkge1xuICAgIGxldCB3ID0gaW1hZ2Uud2lkdGhcbiAgICBsZXQgaCA9IGltYWdlLmhlaWdodFxuXG4gICAgaWYgKHRyYW5zbGF0ZS5kZWcgPT09IDkwIHx8IHRyYW5zbGF0ZS5kZWcgPT09IDI3MCkge1xuICAgICAgdyA9IGltYWdlLmhlaWdodFxuICAgICAgaCA9IGltYWdlLndpZHRoXG4gICAgfVxuXG4gICAgY29uc3QgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJylcbiAgICBjYW52YXMud2lkdGggPSB3XG4gICAgY2FudmFzLmhlaWdodCA9IGhcblxuICAgIGNvbnN0IGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKVxuICAgIGNvbnRleHQudHJhbnNsYXRlKHcgLyAyLCBoIC8gMilcbiAgICBpZiAodHJhbnNsYXRlLmNhbnZhcykge1xuICAgICAgY29udGV4dC5yb3RhdGUodHJhbnNsYXRlLnJhZClcbiAgICAgIGNvbnRleHQuc2NhbGUodHJhbnNsYXRlLnNjYWxlWCwgdHJhbnNsYXRlLnNjYWxlWSlcbiAgICB9XG4gICAgY29udGV4dC5kcmF3SW1hZ2UoaW1hZ2UsIC1pbWFnZS53aWR0aCAvIDIsIC1pbWFnZS5oZWlnaHQgLyAyLCBpbWFnZS53aWR0aCwgaW1hZ2UuaGVpZ2h0KVxuXG4gICAgcmV0dXJuIGNhbnZhc1xuICB9XG5cbiAgLyoqXG4gICAqIFNhdmUgYSA8Y2FudmFzPiBlbGVtZW50J3MgY29udGVudCB0byBhIEJsb2Igb2JqZWN0LlxuICAgKlxuICAgKiBAcGFyYW0ge0hUTUxDYW52YXNFbGVtZW50fSBjYW52YXNcbiAgICogQHJldHVybnMge1Byb21pc2V9XG4gICAqL1xuICBjYW52YXNUb0Jsb2IgKGNhbnZhcywgdHlwZSwgcXVhbGl0eSkge1xuICAgIHRyeSB7XG4gICAgICBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKS5nZXRJbWFnZURhdGEoMCwgMCwgMSwgMSlcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGlmIChlcnIuY29kZSA9PT0gMTgpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcignY2Fubm90IHJlYWQgaW1hZ2UsIHByb2JhYmx5IGFuIHN2ZyB3aXRoIGV4dGVybmFsIHJlc291cmNlcycpKVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjYW52YXMudG9CbG9iKSB7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgIGNhbnZhcy50b0Jsb2IocmVzb2x2ZSwgdHlwZSwgcXVhbGl0eSlcbiAgICAgIH0pLnRoZW4oKGJsb2IpID0+IHtcbiAgICAgICAgaWYgKGJsb2IgPT09IG51bGwpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2Nhbm5vdCByZWFkIGltYWdlLCBwcm9iYWJseSBhbiBzdmcgd2l0aCBleHRlcm5hbCByZXNvdXJjZXMnKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBibG9iXG4gICAgICB9KVxuICAgIH1cbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiB7XG4gICAgICByZXR1cm4gZGF0YVVSSXRvQmxvYihjYW52YXMudG9EYXRhVVJMKHR5cGUsIHF1YWxpdHkpLCB7fSlcbiAgICB9KS50aGVuKChibG9iKSA9PiB7XG4gICAgICBpZiAoYmxvYiA9PT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvdWxkIG5vdCBleHRyYWN0IGJsb2IsIHByb2JhYmx5IGFuIG9sZCBicm93c2VyJylcbiAgICAgIH1cbiAgICAgIHJldHVybiBibG9iXG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgdGhlIHByZXZpZXcgVVJMIGZvciBhIGZpbGUuXG4gICAqL1xuICBzZXRQcmV2aWV3VVJMIChmaWxlSUQsIHByZXZpZXcpIHtcbiAgICB0aGlzLnVwcHkuc2V0RmlsZVN0YXRlKGZpbGVJRCwgeyBwcmV2aWV3IH0pXG4gIH1cblxuICBhZGRUb1F1ZXVlIChpdGVtKSB7XG4gICAgdGhpcy5xdWV1ZS5wdXNoKGl0ZW0pXG4gICAgaWYgKHRoaXMucXVldWVQcm9jZXNzaW5nID09PSBmYWxzZSkge1xuICAgICAgdGhpcy5wcm9jZXNzUXVldWUoKVxuICAgIH1cbiAgfVxuXG4gIHByb2Nlc3NRdWV1ZSAoKSB7XG4gICAgdGhpcy5xdWV1ZVByb2Nlc3NpbmcgPSB0cnVlXG4gICAgaWYgKHRoaXMucXVldWUubGVuZ3RoID4gMCkge1xuICAgICAgY29uc3QgY3VycmVudCA9IHRoaXMudXBweS5nZXRGaWxlKHRoaXMucXVldWUuc2hpZnQoKSlcbiAgICAgIGlmICghY3VycmVudCkge1xuICAgICAgICB0aGlzLnVwcHkubG9nKCdbVGh1bWJuYWlsR2VuZXJhdG9yXSBmaWxlIHdhcyByZW1vdmVkIGJlZm9yZSBhIHRodW1ibmFpbCBjb3VsZCBiZSBnZW5lcmF0ZWQsIGJ1dCBub3QgcmVtb3ZlZCBmcm9tIHRoZSBxdWV1ZS4gVGhpcyBpcyBwcm9iYWJseSBhIGJ1ZycsICdlcnJvcicpXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdFRodW1ibmFpbChjdXJyZW50KVxuICAgICAgICAuY2F0Y2goKCkgPT4ge30pIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm9kZS9oYW5kbGUtY2FsbGJhY2stZXJyXG4gICAgICAgIC50aGVuKCgpID0+IHRoaXMucHJvY2Vzc1F1ZXVlKCkpXG4gICAgfVxuICAgIHRoaXMucXVldWVQcm9jZXNzaW5nID0gZmFsc2VcbiAgICB0aGlzLnVwcHkubG9nKCdbVGh1bWJuYWlsR2VuZXJhdG9yXSBFbXB0aWVkIHRodW1ibmFpbCBxdWV1ZScpXG4gICAgdGhpcy51cHB5LmVtaXQoJ3RodW1ibmFpbDphbGwtZ2VuZXJhdGVkJylcbiAgfVxuXG4gIHJlcXVlc3RUaHVtYm5haWwgKGZpbGUpIHtcbiAgICBpZiAoaXNQcmV2aWV3U3VwcG9ydGVkKGZpbGUudHlwZSkgJiYgIWZpbGUuaXNSZW1vdGUpIHtcbiAgICAgIHJldHVybiB0aGlzLmNyZWF0ZVRodW1ibmFpbChmaWxlLCB0aGlzLm9wdHMudGh1bWJuYWlsV2lkdGgsIHRoaXMub3B0cy50aHVtYm5haWxIZWlnaHQpXG4gICAgICAgIC50aGVuKHByZXZpZXcgPT4ge1xuICAgICAgICAgIHRoaXMuc2V0UHJldmlld1VSTChmaWxlLmlkLCBwcmV2aWV3KVxuICAgICAgICAgIHRoaXMudXBweS5sb2coYFtUaHVtYm5haWxHZW5lcmF0b3JdIEdlbmVyYXRlZCB0aHVtYm5haWwgZm9yICR7ZmlsZS5pZH1gKVxuICAgICAgICAgIHRoaXMudXBweS5lbWl0KCd0aHVtYm5haWw6Z2VuZXJhdGVkJywgdGhpcy51cHB5LmdldEZpbGUoZmlsZS5pZCksIHByZXZpZXcpXG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaChlcnIgPT4ge1xuICAgICAgICAgIHRoaXMudXBweS5sb2coYFtUaHVtYm5haWxHZW5lcmF0b3JdIEZhaWxlZCB0aHVtYm5haWwgZm9yICR7ZmlsZS5pZH06YCwgJ3dhcm5pbmcnKVxuICAgICAgICAgIHRoaXMudXBweS5sb2coZXJyLCAnd2FybmluZycpXG4gICAgICAgICAgdGhpcy51cHB5LmVtaXQoJ3RodW1ibmFpbDplcnJvcicsIHRoaXMudXBweS5nZXRGaWxlKGZpbGUuaWQpLCBlcnIpXG4gICAgICAgIH0pXG4gICAgfVxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKVxuICB9XG5cbiAgb25GaWxlQWRkZWQgPSAoZmlsZSkgPT4ge1xuICAgIGlmIChcbiAgICAgICFmaWxlLnByZXZpZXdcbiAgICAgICYmIGZpbGUuZGF0YVxuICAgICAgJiYgaXNQcmV2aWV3U3VwcG9ydGVkKGZpbGUudHlwZSlcbiAgICAgICYmICFmaWxlLmlzUmVtb3RlXG4gICAgKSB7XG4gICAgICB0aGlzLmFkZFRvUXVldWUoZmlsZS5pZClcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2FuY2VsIGEgbGF6eSByZXF1ZXN0IGZvciBhIHRodW1ibmFpbCBpZiB0aGUgdGh1bWJuYWlsIGhhcyBub3QgeWV0IGJlZW4gZ2VuZXJhdGVkLlxuICAgKi9cbiAgb25DYW5jZWxSZXF1ZXN0ID0gKGZpbGUpID0+IHtcbiAgICBjb25zdCBpbmRleCA9IHRoaXMucXVldWUuaW5kZXhPZihmaWxlLmlkKVxuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgIHRoaXMucXVldWUuc3BsaWNlKGluZGV4LCAxKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDbGVhbiB1cCB0aGUgdGh1bWJuYWlsIGZvciBhIGZpbGUuIENhbmNlbCBsYXp5IHJlcXVlc3RzIGFuZCBmcmVlIHRoZSB0aHVtYm5haWwgVVJMLlxuICAgKi9cbiAgb25GaWxlUmVtb3ZlZCA9IChmaWxlKSA9PiB7XG4gICAgY29uc3QgaW5kZXggPSB0aGlzLnF1ZXVlLmluZGV4T2YoZmlsZS5pZClcbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICB0aGlzLnF1ZXVlLnNwbGljZShpbmRleCwgMSlcbiAgICB9XG5cbiAgICAvLyBDbGVhbiB1cCBvYmplY3QgVVJMcy5cbiAgICBpZiAoZmlsZS5wcmV2aWV3ICYmIGlzT2JqZWN0VVJMKGZpbGUucHJldmlldykpIHtcbiAgICAgIFVSTC5yZXZva2VPYmplY3RVUkwoZmlsZS5wcmV2aWV3KVxuICAgIH1cbiAgfVxuXG4gIG9uUmVzdG9yZWQgPSAoKSA9PiB7XG4gICAgY29uc3QgcmVzdG9yZWRGaWxlcyA9IHRoaXMudXBweS5nZXRGaWxlcygpLmZpbHRlcihmaWxlID0+IGZpbGUuaXNSZXN0b3JlZClcbiAgICByZXN0b3JlZEZpbGVzLmZvckVhY2goKGZpbGUpID0+IHtcbiAgICAgIC8vIE9ubHkgYWRkIGJsb2IgVVJMczsgdGhleSBhcmUgbGlrZWx5IGludmFsaWQgYWZ0ZXIgYmVpbmcgcmVzdG9yZWQuXG4gICAgICBpZiAoIWZpbGUucHJldmlldyB8fCBpc09iamVjdFVSTChmaWxlLnByZXZpZXcpKSB7XG4gICAgICAgIHRoaXMuYWRkVG9RdWV1ZShmaWxlLmlkKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICB3YWl0VW50aWxBbGxQcm9jZXNzZWQgPSAoZmlsZUlEcykgPT4ge1xuICAgIGZpbGVJRHMuZm9yRWFjaCgoZmlsZUlEKSA9PiB7XG4gICAgICBjb25zdCBmaWxlID0gdGhpcy51cHB5LmdldEZpbGUoZmlsZUlEKVxuICAgICAgdGhpcy51cHB5LmVtaXQoJ3ByZXByb2Nlc3MtcHJvZ3Jlc3MnLCBmaWxlLCB7XG4gICAgICAgIG1vZGU6ICdpbmRldGVybWluYXRlJyxcbiAgICAgICAgbWVzc2FnZTogdGhpcy5pMThuKCdnZW5lcmF0aW5nVGh1bWJuYWlscycpLFxuICAgICAgfSlcbiAgICB9KVxuXG4gICAgY29uc3QgZW1pdFByZXByb2Nlc3NDb21wbGV0ZUZvckFsbCA9ICgpID0+IHtcbiAgICAgIGZpbGVJRHMuZm9yRWFjaCgoZmlsZUlEKSA9PiB7XG4gICAgICAgIGNvbnN0IGZpbGUgPSB0aGlzLnVwcHkuZ2V0RmlsZShmaWxlSUQpXG4gICAgICAgIHRoaXMudXBweS5lbWl0KCdwcmVwcm9jZXNzLWNvbXBsZXRlJywgZmlsZSlcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICBpZiAodGhpcy5xdWV1ZVByb2Nlc3NpbmcpIHtcbiAgICAgICAgdGhpcy51cHB5Lm9uY2UoJ3RodW1ibmFpbDphbGwtZ2VuZXJhdGVkJywgKCkgPT4ge1xuICAgICAgICAgIGVtaXRQcmVwcm9jZXNzQ29tcGxldGVGb3JBbGwoKVxuICAgICAgICAgIHJlc29sdmUoKVxuICAgICAgICB9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZW1pdFByZXByb2Nlc3NDb21wbGV0ZUZvckFsbCgpXG4gICAgICAgIHJlc29sdmUoKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBpbnN0YWxsICgpIHtcbiAgICB0aGlzLnVwcHkub24oJ2ZpbGUtcmVtb3ZlZCcsIHRoaXMub25GaWxlUmVtb3ZlZClcbiAgICBpZiAodGhpcy5vcHRzLmxhenkpIHtcbiAgICAgIHRoaXMudXBweS5vbigndGh1bWJuYWlsOnJlcXVlc3QnLCB0aGlzLm9uRmlsZUFkZGVkKVxuICAgICAgdGhpcy51cHB5Lm9uKCd0aHVtYm5haWw6Y2FuY2VsJywgdGhpcy5vbkNhbmNlbFJlcXVlc3QpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudXBweS5vbignZmlsZS1hZGRlZCcsIHRoaXMub25GaWxlQWRkZWQpXG4gICAgICB0aGlzLnVwcHkub24oJ3Jlc3RvcmVkJywgdGhpcy5vblJlc3RvcmVkKVxuICAgIH1cblxuICAgIGlmICh0aGlzLm9wdHMud2FpdEZvclRodW1ibmFpbHNCZWZvcmVVcGxvYWQpIHtcbiAgICAgIHRoaXMudXBweS5hZGRQcmVQcm9jZXNzb3IodGhpcy53YWl0VW50aWxBbGxQcm9jZXNzZWQpXG4gICAgfVxuICB9XG5cbiAgdW5pbnN0YWxsICgpIHtcbiAgICB0aGlzLnVwcHkub2ZmKCdmaWxlLXJlbW92ZWQnLCB0aGlzLm9uRmlsZVJlbW92ZWQpXG4gICAgaWYgKHRoaXMub3B0cy5sYXp5KSB7XG4gICAgICB0aGlzLnVwcHkub2ZmKCd0aHVtYm5haWw6cmVxdWVzdCcsIHRoaXMub25GaWxlQWRkZWQpXG4gICAgICB0aGlzLnVwcHkub2ZmKCd0aHVtYm5haWw6Y2FuY2VsJywgdGhpcy5vbkNhbmNlbFJlcXVlc3QpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudXBweS5vZmYoJ2ZpbGUtYWRkZWQnLCB0aGlzLm9uRmlsZUFkZGVkKVxuICAgICAgdGhpcy51cHB5Lm9mZigncmVzdG9yZWQnLCB0aGlzLm9uUmVzdG9yZWQpXG4gICAgfVxuXG4gICAgaWYgKHRoaXMub3B0cy53YWl0Rm9yVGh1bWJuYWlsc0JlZm9yZVVwbG9hZCkge1xuICAgICAgdGhpcy51cHB5LnJlbW92ZVByZVByb2Nlc3Nvcih0aGlzLndhaXRVbnRpbEFsbFByb2Nlc3NlZClcbiAgICB9XG4gIH1cbn1cbiIsIm1vZHVsZS5leHBvcnRzID0ge1xuICBzdHJpbmdzOiB7XG4gICAgZ2VuZXJhdGluZ1RodW1ibmFpbHM6ICdHZW5lcmF0aW5nIHRodW1ibmFpbHMuLi4nLFxuICB9LFxufVxuIiwiY29uc3QgRW1pdHRlciA9IHJlcXVpcmUoJ2NvbXBvbmVudC1lbWl0dGVyJylcbmNvbnN0IGhhcyA9IHJlcXVpcmUoJ0B1cHB5L3V0aWxzL2xpYi9oYXNQcm9wZXJ0eScpXG5jb25zdCBOZXR3b3JrRXJyb3IgPSByZXF1aXJlKCdAdXBweS91dGlscy9saWIvTmV0d29ya0Vycm9yJylcbmNvbnN0IGZldGNoV2l0aE5ldHdvcmtFcnJvciA9IHJlcXVpcmUoJ0B1cHB5L3V0aWxzL2xpYi9mZXRjaFdpdGhOZXR3b3JrRXJyb3InKVxuY29uc3QgcGFyc2VVcmwgPSByZXF1aXJlKCcuL3BhcnNlVXJsJylcblxuLy8gTGF6eSBsb2FkIHNvY2tldC5pbyB0byBhdm9pZCBhIGNvbnNvbGUgZXJyb3Jcbi8vIGluIElFIDEwIHdoZW4gdGhlIFRyYW5zbG9hZGl0IHBsdWdpbiBpcyBub3QgdXNlZC5cbi8vIChUaGUgY29uc29sZS5lcnJvciBjYWxsIGNvbWVzIGZyb20gYGJ1ZmZlcmAuIElcbi8vIHRoaW5rIHdlIGFjdHVhbGx5IGRvbid0IHVzZSB0aGF0IHBhcnQgb2Ygc29ja2V0LmlvXG4vLyBhdCBhbGzigKYpXG5sZXQgc29ja2V0SW9cbmZ1bmN0aW9uIHJlcXVpcmVTb2NrZXRJbyAoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBnbG9iYWwtcmVxdWlyZVxuICBzb2NrZXRJbyA/Pz0gcmVxdWlyZSgnc29ja2V0LmlvLWNsaWVudCcpXG4gIHJldHVybiBzb2NrZXRJb1xufVxuXG5jb25zdCBBU1NFTUJMWV9VUExPQURJTkcgPSAnQVNTRU1CTFlfVVBMT0FESU5HJ1xuY29uc3QgQVNTRU1CTFlfRVhFQ1VUSU5HID0gJ0FTU0VNQkxZX0VYRUNVVElORydcbmNvbnN0IEFTU0VNQkxZX0NPTVBMRVRFRCA9ICdBU1NFTUJMWV9DT01QTEVURUQnXG5cbmNvbnN0IHN0YXR1c09yZGVyID0gW1xuICBBU1NFTUJMWV9VUExPQURJTkcsXG4gIEFTU0VNQkxZX0VYRUNVVElORyxcbiAgQVNTRU1CTFlfQ09NUExFVEVELFxuXVxuXG4vKipcbiAqIENoZWNrIHRoYXQgYW4gYXNzZW1ibHkgc3RhdHVzIGlzIGVxdWFsIHRvIG9yIGxhcmdlciB0aGFuIHNvbWUgZGVzaXJlZCBzdGF0dXMuXG4gKiBJdCBjaGVja3MgZm9yIHRoaW5ncyB0aGF0IGFyZSBsYXJnZXIgc28gdGhhdCBhIGNvbXBhcmlzb24gbGlrZSB0aGlzIHdvcmtzLFxuICogd2hlbiB0aGUgb2xkIGFzc2VtYmx5IHN0YXR1cyBpcyBVUExPQURJTkcgYnV0IHRoZSBuZXcgaXMgRklOSVNIRUQ6XG4gKlxuICogIWlzU3RhdHVzKG9sZFN0YXR1cywgQVNTRU1CTFlfRVhFQ1VUSU5HKSAmJiBpc1N0YXR1cyhuZXdTdGF0ZSwgQVNTRU1CTFlfRVhFQ1VUSU5HKVxuICpcbiAqIOKApnNvIHRoYXQgd2UgY2FuIGVtaXQgdGhlICdleGVjdXRpbmcnIGV2ZW50IGV2ZW4gaWYgdGhlIGV4ZWN1dGlvbiBzdGVwIHdhcyBzb1xuICogZmFzdCB0aGF0IHdlIG1pc3NlZCBpdC5cbiAqL1xuZnVuY3Rpb24gaXNTdGF0dXMgKHN0YXR1cywgdGVzdCkge1xuICByZXR1cm4gc3RhdHVzT3JkZXIuaW5kZXhPZihzdGF0dXMpID49IHN0YXR1c09yZGVyLmluZGV4T2YodGVzdClcbn1cblxuY2xhc3MgVHJhbnNsb2FkaXRBc3NlbWJseSBleHRlbmRzIEVtaXR0ZXIge1xuICBjb25zdHJ1Y3RvciAoYXNzZW1ibHkpIHtcbiAgICBzdXBlcigpXG5cbiAgICAvLyBUaGUgY3VycmVudCBhc3NlbWJseSBzdGF0dXMuXG4gICAgdGhpcy5zdGF0dXMgPSBhc3NlbWJseVxuICAgIC8vIFRoZSBzb2NrZXQuaW8gY29ubmVjdGlvbi5cbiAgICB0aGlzLnNvY2tldCA9IG51bGxcbiAgICAvLyBUaGUgaW50ZXJ2YWwgdGltZXIgZm9yIGZ1bGwgc3RhdHVzIHVwZGF0ZXMuXG4gICAgdGhpcy5wb2xsSW50ZXJ2YWwgPSBudWxsXG4gICAgLy8gV2hldGhlciB0aGlzIGFzc2VtYmx5IGhhcyBiZWVuIGNsb3NlZCAoZmluaXNoZWQgb3IgZXJyb3JlZClcbiAgICB0aGlzLmNsb3NlZCA9IGZhbHNlXG4gIH1cblxuICBjb25uZWN0ICgpIHtcbiAgICB0aGlzLiNjb25uZWN0U29ja2V0KClcbiAgICB0aGlzLiNiZWdpblBvbGxpbmcoKVxuICB9XG5cbiAgI29uRmluaXNoZWQgKCkge1xuICAgIHRoaXMuZW1pdCgnZmluaXNoZWQnKVxuICAgIHRoaXMuY2xvc2UoKVxuICB9XG5cbiAgI2Nvbm5lY3RTb2NrZXQgKCkge1xuICAgIGNvbnN0IHBhcnNlZCA9IHBhcnNlVXJsKHRoaXMuc3RhdHVzLndlYnNvY2tldF91cmwpXG4gICAgY29uc3Qgc29ja2V0ID0gcmVxdWlyZVNvY2tldElvKCkuY29ubmVjdChwYXJzZWQub3JpZ2luLCB7XG4gICAgICB0cmFuc3BvcnRzOiBbJ3dlYnNvY2tldCddLFxuICAgICAgcGF0aDogcGFyc2VkLnBhdGhuYW1lLFxuICAgIH0pXG5cbiAgICBzb2NrZXQub24oJ2Nvbm5lY3QnLCAoKSA9PiB7XG4gICAgICBzb2NrZXQuZW1pdCgnYXNzZW1ibHlfY29ubmVjdCcsIHtcbiAgICAgICAgaWQ6IHRoaXMuc3RhdHVzLmFzc2VtYmx5X2lkLFxuICAgICAgfSlcblxuICAgICAgdGhpcy5lbWl0KCdjb25uZWN0JylcbiAgICB9KVxuXG4gICAgc29ja2V0Lm9uKCdjb25uZWN0X2ZhaWxlZCcsICgpID0+IHtcbiAgICAgIHRoaXMuI29uRXJyb3IobmV3IE5ldHdvcmtFcnJvcignVHJhbnNsb2FkaXQgU29ja2V0LmlvIGNvbm5lY3Rpb24gZXJyb3InKSlcbiAgICAgIHRoaXMuc29ja2V0ID0gbnVsbFxuICAgIH0pXG5cbiAgICBzb2NrZXQub24oJ2Nvbm5lY3RfZXJyb3InLCAoKSA9PiB7XG4gICAgICBzb2NrZXQuZGlzY29ubmVjdCgpXG4gICAgICB0aGlzLnNvY2tldCA9IG51bGxcbiAgICB9KVxuXG4gICAgc29ja2V0Lm9uKCdhc3NlbWJseV9maW5pc2hlZCcsICgpID0+IHtcbiAgICAgIHRoaXMuI29uRmluaXNoZWQoKVxuICAgIH0pXG5cbiAgICBzb2NrZXQub24oJ2Fzc2VtYmx5X3VwbG9hZF9maW5pc2hlZCcsIChmaWxlKSA9PiB7XG4gICAgICB0aGlzLmVtaXQoJ3VwbG9hZCcsIGZpbGUpXG4gICAgICB0aGlzLnN0YXR1cy51cGxvYWRzLnB1c2goZmlsZSlcbiAgICB9KVxuXG4gICAgc29ja2V0Lm9uKCdhc3NlbWJseV91cGxvYWRpbmdfZmluaXNoZWQnLCAoKSA9PiB7XG4gICAgICB0aGlzLmVtaXQoJ2V4ZWN1dGluZycpXG4gICAgfSlcblxuICAgIHNvY2tldC5vbignYXNzZW1ibHlfdXBsb2FkX21ldGFfZGF0YV9leHRyYWN0ZWQnLCAoKSA9PiB7XG4gICAgICB0aGlzLmVtaXQoJ21ldGFkYXRhJylcbiAgICAgIHRoaXMuI2ZldGNoU3RhdHVzKHsgZGlmZjogZmFsc2UgfSlcbiAgICB9KVxuXG4gICAgc29ja2V0Lm9uKCdhc3NlbWJseV9yZXN1bHRfZmluaXNoZWQnLCAoc3RlcE5hbWUsIHJlc3VsdCkgPT4ge1xuICAgICAgdGhpcy5lbWl0KCdyZXN1bHQnLCBzdGVwTmFtZSwgcmVzdWx0KVxuICAgICAgaWYgKCF0aGlzLnN0YXR1cy5yZXN1bHRzW3N0ZXBOYW1lXSkge1xuICAgICAgICB0aGlzLnN0YXR1cy5yZXN1bHRzW3N0ZXBOYW1lXSA9IFtdXG4gICAgICB9XG4gICAgICB0aGlzLnN0YXR1cy5yZXN1bHRzW3N0ZXBOYW1lXS5wdXNoKHJlc3VsdClcbiAgICB9KVxuXG4gICAgc29ja2V0Lm9uKCdhc3NlbWJseV9lcnJvcicsIChlcnIpID0+IHtcbiAgICAgIHRoaXMuI29uRXJyb3IoZXJyKVxuICAgICAgLy8gUmVmZXRjaCBmb3IgdXBkYXRlZCBzdGF0dXMgY29kZVxuICAgICAgdGhpcy4jZmV0Y2hTdGF0dXMoeyBkaWZmOiBmYWxzZSB9KVxuICAgIH0pXG5cbiAgICB0aGlzLnNvY2tldCA9IHNvY2tldFxuICB9XG5cbiAgI29uRXJyb3IgKGVycikge1xuICAgIHRoaXMuZW1pdCgnZXJyb3InLCBPYmplY3QuYXNzaWduKG5ldyBFcnJvcihlcnIubWVzc2FnZSksIGVycikpXG4gIH1cblxuICAvKipcbiAgICogQmVnaW4gcG9sbGluZyBmb3IgYXNzZW1ibHkgc3RhdHVzIGNoYW5nZXMuIFRoaXMgc2VuZHMgYSByZXF1ZXN0IHRvIHRoZVxuICAgKiBhc3NlbWJseSBzdGF0dXMgZW5kcG9pbnQgZXZlcnkgc28gb2Z0ZW4sIGlmIHRoZSBzb2NrZXQgaXMgbm90IGNvbm5lY3RlZC5cbiAgICogSWYgdGhlIHNvY2tldCBjb25uZWN0aW9uIGZhaWxzIG9yIHRha2VzIGEgbG9uZyB0aW1lLCB3ZSB3b24ndCBtaXNzIGFueVxuICAgKiBldmVudHMuXG4gICAqL1xuICAjYmVnaW5Qb2xsaW5nICgpIHtcbiAgICB0aGlzLnBvbGxJbnRlcnZhbCA9IHNldEludGVydmFsKCgpID0+IHtcbiAgICAgIGlmICghdGhpcy5zb2NrZXQgfHwgIXRoaXMuc29ja2V0LmNvbm5lY3RlZCkge1xuICAgICAgICB0aGlzLiNmZXRjaFN0YXR1cygpXG4gICAgICB9XG4gICAgfSwgMjAwMClcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWxvYWQgYXNzZW1ibHkgc3RhdHVzLiBVc2VmdWwgaWYgdGhlIHNvY2tldCBkb2Vzbid0IHdvcmsuXG4gICAqXG4gICAqIFBhc3MgYGRpZmY6IGZhbHNlYCB0byBhdm9pZCBlbWl0dGluZyBkaWZmIGV2ZW50cywgaW5zdGVhZCBvbmx5IGVtaXR0aW5nXG4gICAqICdzdGF0dXMnLlxuICAgKi9cbiAgI2ZldGNoU3RhdHVzICh7IGRpZmYgPSB0cnVlIH0gPSB7fSkge1xuICAgIHJldHVybiBmZXRjaFdpdGhOZXR3b3JrRXJyb3IodGhpcy5zdGF0dXMuYXNzZW1ibHlfc3NsX3VybClcbiAgICAgIC50aGVuKChyZXNwb25zZSkgPT4gcmVzcG9uc2UuanNvbigpKVxuICAgICAgLnRoZW4oKHN0YXR1cykgPT4ge1xuICAgICAgICAvLyBBdm9pZCB1cGRhdGluZyBpZiB3ZSBjbG9zZWQgZHVyaW5nIHRoaXMgcmVxdWVzdCdzIGxpZmV0aW1lLlxuICAgICAgICBpZiAodGhpcy5jbG9zZWQpIHJldHVyblxuICAgICAgICB0aGlzLmVtaXQoJ3N0YXR1cycsIHN0YXR1cylcblxuICAgICAgICBpZiAoZGlmZikge1xuICAgICAgICAgIHRoaXMudXBkYXRlU3RhdHVzKHN0YXR1cylcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnN0YXR1cyA9IHN0YXR1c1xuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgLmNhdGNoKChlcnIpID0+IHRoaXMuI29uRXJyb3IoZXJyKSlcbiAgfVxuXG4gIHVwZGF0ZSAoKSB7XG4gICAgcmV0dXJuIHRoaXMuI2ZldGNoU3RhdHVzKHsgZGlmZjogdHJ1ZSB9KVxuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZSB0aGlzIGFzc2VtYmx5J3Mgc3RhdHVzIHdpdGggYSBmdWxsIG5ldyBvYmplY3QuIEV2ZW50cyB3aWxsIGJlXG4gICAqIGVtaXR0ZWQgZm9yIHN0YXR1cyBjaGFuZ2VzLCBuZXcgZmlsZXMsIGFuZCBuZXcgcmVzdWx0cy5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IG5leHQgVGhlIG5ldyBhc3NlbWJseSBzdGF0dXMgb2JqZWN0LlxuICAgKi9cbiAgdXBkYXRlU3RhdHVzIChuZXh0KSB7XG4gICAgdGhpcy4jZGlmZlN0YXR1cyh0aGlzLnN0YXR1cywgbmV4dClcbiAgICB0aGlzLnN0YXR1cyA9IG5leHRcbiAgfVxuXG4gIC8qKlxuICAgKiBEaWZmIHR3byBhc3NlbWJseSBzdGF0dXNlcywgYW5kIGVtaXQgdGhlIGV2ZW50cyBuZWNlc3NhcnkgdG8gZ28gZnJvbSBgcHJldmBcbiAgICogdG8gYG5leHRgLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gcHJldiBUaGUgcHJldmlvdXMgYXNzZW1ibHkgc3RhdHVzLlxuICAgKiBAcGFyYW0ge29iamVjdH0gbmV4dCBUaGUgbmV3IGFzc2VtYmx5IHN0YXR1cy5cbiAgICovXG4gICNkaWZmU3RhdHVzIChwcmV2LCBuZXh0KSB7XG4gICAgY29uc3QgcHJldlN0YXR1cyA9IHByZXYub2tcbiAgICBjb25zdCBuZXh0U3RhdHVzID0gbmV4dC5va1xuXG4gICAgaWYgKG5leHQuZXJyb3IgJiYgIXByZXYuZXJyb3IpIHtcbiAgICAgIHJldHVybiB0aGlzLiNvbkVycm9yKG5leHQpXG4gICAgfVxuXG4gICAgLy8gRGVzaXJlZCBlbWl0IG9yZGVyOlxuICAgIC8vICAtIGV4ZWN1dGluZ1xuICAgIC8vICAtIChuIMOXIHVwbG9hZClcbiAgICAvLyAgLSBtZXRhZGF0YVxuICAgIC8vICAtIChtIMOXIHJlc3VsdClcbiAgICAvLyAgLSBmaW5pc2hlZFxuICAgIC8vIFRoZSBiZWxvdyBjaGVja3MgcnVuIGluIHRoaXMgb3JkZXIsIHRoYXQgd2F5IGV2ZW4gaWYgd2UganVtcCBmcm9tXG4gICAgLy8gVVBMT0FESU5HIHN0cmFpZ2h0IHRvIEZJTklTSEVEIGFsbCB0aGUgZXZlbnRzIGFyZSBlbWl0dGVkIGFzIGV4cGVjdGVkLlxuXG4gICAgY29uc3Qgbm93RXhlY3V0aW5nID0gaXNTdGF0dXMobmV4dFN0YXR1cywgQVNTRU1CTFlfRVhFQ1VUSU5HKVxuICAgICAgJiYgIWlzU3RhdHVzKHByZXZTdGF0dXMsIEFTU0VNQkxZX0VYRUNVVElORylcbiAgICBpZiAobm93RXhlY3V0aW5nKSB7XG4gICAgICAvLyBXaXRob3V0IFdlYlNvY2tldHMsIHRoaXMgaXMgb3VyIG9ubHkgd2F5IHRvIHRlbGwgaWYgdXBsb2FkaW5nIGZpbmlzaGVkLlxuICAgICAgLy8gSGVuY2UsIHdlIGVtaXQgdGhpcyBqdXN0IGJlZm9yZSB0aGUgJ3VwbG9hZCdzIGFuZCBiZWZvcmUgdGhlICdtZXRhZGF0YSdcbiAgICAgIC8vIGV2ZW50IGZvciB0aGUgbW9zdCBpbnR1aXRpdmUgb3JkZXJpbmcsIGNvcnJlc3BvbmRpbmcgdG8gdGhlIF91c3VhbF9cbiAgICAgIC8vIG9yZGVyaW5nIChpZiBub3QgZ3VhcmFudGVlZCkgdGhhdCB5b3UnZCBnZXQgb24gdGhlIFdlYlNvY2tldC5cbiAgICAgIHRoaXMuZW1pdCgnZXhlY3V0aW5nJylcbiAgICB9XG5cbiAgICAvLyBGaW5kIG5ldyB1cGxvYWRlZCBmaWxlcy5cbiAgICBPYmplY3Qua2V5cyhuZXh0LnVwbG9hZHMpXG4gICAgICAuZmlsdGVyKCh1cGxvYWQpID0+ICFoYXMocHJldi51cGxvYWRzLCB1cGxvYWQpKVxuICAgICAgLmZvckVhY2goKHVwbG9hZCkgPT4ge1xuICAgICAgICB0aGlzLmVtaXQoJ3VwbG9hZCcsIG5leHQudXBsb2Fkc1t1cGxvYWRdKVxuICAgICAgfSlcblxuICAgIGlmIChub3dFeGVjdXRpbmcpIHtcbiAgICAgIHRoaXMuZW1pdCgnbWV0YWRhdGEnKVxuICAgIH1cblxuICAgIC8vIEZpbmQgbmV3IHJlc3VsdHMuXG4gICAgT2JqZWN0LmtleXMobmV4dC5yZXN1bHRzKS5mb3JFYWNoKChzdGVwTmFtZSkgPT4ge1xuICAgICAgY29uc3QgbmV4dFJlc3VsdHMgPSBuZXh0LnJlc3VsdHNbc3RlcE5hbWVdXG4gICAgICBjb25zdCBwcmV2UmVzdWx0cyA9IHByZXYucmVzdWx0c1tzdGVwTmFtZV1cblxuICAgICAgbmV4dFJlc3VsdHNcbiAgICAgICAgLmZpbHRlcigobikgPT4gIXByZXZSZXN1bHRzIHx8ICFwcmV2UmVzdWx0cy5zb21lKChwKSA9PiBwLmlkID09PSBuLmlkKSlcbiAgICAgICAgLmZvckVhY2goKHJlc3VsdCkgPT4ge1xuICAgICAgICAgIHRoaXMuZW1pdCgncmVzdWx0Jywgc3RlcE5hbWUsIHJlc3VsdClcbiAgICAgICAgfSlcbiAgICB9KVxuXG4gICAgaWYgKGlzU3RhdHVzKG5leHRTdGF0dXMsIEFTU0VNQkxZX0NPTVBMRVRFRClcbiAgICAgICAgJiYgIWlzU3RhdHVzKHByZXZTdGF0dXMsIEFTU0VNQkxZX0NPTVBMRVRFRCkpIHtcbiAgICAgIHRoaXMuZW1pdCgnZmluaXNoZWQnKVxuICAgIH1cblxuICAgIHJldHVybiB1bmRlZmluZWRcbiAgfVxuXG4gIC8qKlxuICAgKiBTdG9wIHVwZGF0aW5nIHRoaXMgYXNzZW1ibHkuXG4gICAqL1xuICBjbG9zZSAoKSB7XG4gICAgdGhpcy5jbG9zZWQgPSB0cnVlXG4gICAgaWYgKHRoaXMuc29ja2V0KSB7XG4gICAgICB0aGlzLnNvY2tldC5kaXNjb25uZWN0KClcbiAgICAgIHRoaXMuc29ja2V0ID0gbnVsbFxuICAgIH1cbiAgICBjbGVhckludGVydmFsKHRoaXMucG9sbEludGVydmFsKVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gVHJhbnNsb2FkaXRBc3NlbWJseVxuIiwiLyoqXG4gKiBDaGVjayB0aGF0IEFzc2VtYmx5IHBhcmFtZXRlcnMgYXJlIHByZXNlbnQgYW5kIGluY2x1ZGUgYWxsIHJlcXVpcmVkIGZpZWxkcy5cbiAqL1xuZnVuY3Rpb24gdmFsaWRhdGVQYXJhbXMgKHBhcmFtcykge1xuICBpZiAocGFyYW1zID09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1RyYW5zbG9hZGl0OiBUaGUgYHBhcmFtc2Agb3B0aW9uIGlzIHJlcXVpcmVkLicpXG4gIH1cblxuICBpZiAodHlwZW9mIHBhcmFtcyA9PT0gJ3N0cmluZycpIHtcbiAgICB0cnkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICBwYXJhbXMgPSBKU09OLnBhcnNlKHBhcmFtcylcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIC8vIFRlbGwgdGhlIHVzZXIgdGhhdCB0aGlzIGlzIG5vdCBhbiBVcHB5IGJ1ZyFcbiAgICAgIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKCdUcmFuc2xvYWRpdDogVGhlIGBwYXJhbXNgIG9wdGlvbiBpcyBhIG1hbGZvcm1lZCBKU09OIHN0cmluZy4nKVxuICAgICAgZXJyLmNhdXNlID0gZXJyXG4gICAgICB0aHJvdyBlcnJvclxuICAgIH1cbiAgfVxuXG4gIGlmICghcGFyYW1zLmF1dGggfHwgIXBhcmFtcy5hdXRoLmtleSkge1xuICAgIHRocm93IG5ldyBFcnJvcignVHJhbnNsb2FkaXQ6IFRoZSBgcGFyYW1zLmF1dGgua2V5YCBvcHRpb24gaXMgcmVxdWlyZWQuICdcbiAgICAgICsgJ1lvdSBjYW4gZmluZCB5b3VyIFRyYW5zbG9hZGl0IEFQSSBrZXkgYXQgaHR0cHM6Ly90cmFuc2xvYWRpdC5jb20vYy90ZW1wbGF0ZS1jcmVkZW50aWFscycpXG4gIH1cbn1cblxuLyoqXG4gKiBDb21iaW5lIEFzc2VtYmxpZXMgd2l0aCB0aGUgc2FtZSBvcHRpb25zIGludG8gYSBzaW5nbGUgQXNzZW1ibHkgZm9yIGFsbCB0aGVcbiAqIHJlbGV2YW50IGZpbGVzLlxuICovXG5mdW5jdGlvbiBkZWR1cGUgKGxpc3QpIHtcbiAgY29uc3QgZGVkdXBlTWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKVxuICBmb3IgKGNvbnN0IHsgZmlsZUlEcywgb3B0aW9ucyB9IG9mIGxpc3QpIHtcbiAgICBjb25zdCBpZCA9IEpTT04uc3RyaW5naWZ5KG9wdGlvbnMpXG4gICAgaWYgKGlkIGluIGRlZHVwZU1hcCkge1xuICAgICAgZGVkdXBlTWFwW2lkXS5maWxlSURBcnJheXMucHVzaChmaWxlSURzKVxuICAgIH0gZWxzZSB7XG4gICAgICBkZWR1cGVNYXBbaWRdID0ge1xuICAgICAgICBvcHRpb25zLFxuICAgICAgICBmaWxlSURBcnJheXM6IFtmaWxlSURzXSxcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gT2JqZWN0LnZhbHVlcyhkZWR1cGVNYXApLm1hcCgoeyBvcHRpb25zLCBmaWxlSURBcnJheXMgfSkgPT4gKHtcbiAgICBvcHRpb25zLFxuICAgIGZpbGVJRHM6IGZpbGVJREFycmF5cy5mbGF0KDEpLFxuICB9KSlcbn1cblxuLyoqXG4gKiBUdXJuIFRyYW5zbG9hZGl0IHBsdWdpbiBvcHRpb25zIGFuZCBhIGxpc3Qgb2YgZmlsZXMgaW50byBhIGxpc3Qgb2YgQXNzZW1ibHlcbiAqIG9wdGlvbnMuXG4gKi9cbmNsYXNzIEFzc2VtYmx5T3B0aW9ucyB7XG4gIGNvbnN0cnVjdG9yIChmaWxlcywgb3B0cykge1xuICAgIHRoaXMuZmlsZXMgPSBmaWxlc1xuICAgIHRoaXMub3B0cyA9IG9wdHNcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgQXNzZW1ibHkgb3B0aW9ucyBmb3IgYSBmaWxlLlxuICAgKi9cbiAgYXN5bmMgI2dldEFzc2VtYmx5T3B0aW9ucyAoZmlsZSkge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdHNcblxuICAgIGNvbnN0IGFzc2VtYmx5T3B0aW9ucyA9IGF3YWl0IG9wdGlvbnMuZ2V0QXNzZW1ibHlPcHRpb25zKGZpbGUsIG9wdGlvbnMpXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYXNzZW1ibHlPcHRpb25zLmZpZWxkcykpIHtcbiAgICAgIGFzc2VtYmx5T3B0aW9ucy5maWVsZHMgPSBPYmplY3QuZnJvbUVudHJpZXMoXG4gICAgICAgIGFzc2VtYmx5T3B0aW9ucy5maWVsZHMubWFwKChmaWVsZE5hbWUpID0+IFtmaWVsZE5hbWUsIGZpbGUubWV0YVtmaWVsZE5hbWVdXSksXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChhc3NlbWJseU9wdGlvbnMuZmllbGRzID09IG51bGwpIHtcbiAgICAgIGFzc2VtYmx5T3B0aW9ucy5maWVsZHMgPSB7fVxuICAgIH1cblxuICAgIHZhbGlkYXRlUGFyYW1zKGFzc2VtYmx5T3B0aW9ucy5wYXJhbXMpXG5cbiAgICByZXR1cm4ge1xuICAgICAgZmlsZUlEczogW2ZpbGUuaWRdLFxuICAgICAgb3B0aW9uczogYXNzZW1ibHlPcHRpb25zLFxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZSBhIHNldCBvZiBBc3NlbWJsaWVzIHRoYXQgd2lsbCBoYW5kbGUgdGhlIHVwbG9hZC5cbiAgICogUmV0dXJucyBhIFByb21pc2UgZm9yIGFuIG9iamVjdCB3aXRoIGtleXM6XG4gICAqICAtIGZpbGVJRHMgLSBhbiBhcnJheSBvZiBmaWxlIElEcyB0byBhZGQgdG8gdGhpcyBBc3NlbWJseVxuICAgKiAgLSBvcHRpb25zIC0gQXNzZW1ibHkgb3B0aW9uc1xuICAgKi9cbiAgYXN5bmMgYnVpbGQgKCkge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdHNcblxuICAgIGlmICh0aGlzLmZpbGVzLmxlbmd0aCA+IDApIHtcbiAgICAgIHJldHVybiBQcm9taXNlLmFsbChcbiAgICAgICAgdGhpcy5maWxlcy5tYXAoKGZpbGUpID0+IHRoaXMuI2dldEFzc2VtYmx5T3B0aW9ucyhmaWxlKSksXG4gICAgICApLnRoZW4oZGVkdXBlKVxuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmFsd2F5c1J1bkFzc2VtYmx5KSB7XG4gICAgICAvLyBObyBmaWxlcywganVzdCBnZW5lcmF0ZSBvbmUgQXNzZW1ibHlcbiAgICAgIGNvbnN0IGFzc2VtYmx5T3B0aW9ucyA9IGF3YWl0IG9wdGlvbnMuZ2V0QXNzZW1ibHlPcHRpb25zKG51bGwsIG9wdGlvbnMpXG5cbiAgICAgIHZhbGlkYXRlUGFyYW1zKGFzc2VtYmx5T3B0aW9ucy5wYXJhbXMpXG4gICAgICByZXR1cm4gW3tcbiAgICAgICAgZmlsZUlEczogdGhpcy5maWxlcy5tYXAoKGZpbGUpID0+IGZpbGUuaWQpLFxuICAgICAgICBvcHRpb25zOiBhc3NlbWJseU9wdGlvbnMsXG4gICAgICB9XVxuICAgIH1cblxuICAgIC8vIElmIHRoZXJlIGFyZSBubyBmaWxlcyBhbmQgd2UgZG8gbm90IGBhbHdheXNSdW5Bc3NlbWJseWAsXG4gICAgLy8gZG9uJ3QgZG8gYW55dGhpbmcuXG4gICAgcmV0dXJuIFtdXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBBc3NlbWJseU9wdGlvbnNcbm1vZHVsZS5leHBvcnRzLnZhbGlkYXRlUGFyYW1zID0gdmFsaWRhdGVQYXJhbXNcbiIsImNvbnN0IEVtaXR0ZXIgPSByZXF1aXJlKCdjb21wb25lbnQtZW1pdHRlcicpXG5cbi8qKlxuICogVHJhY2sgY29tcGxldGlvbiBvZiBtdWx0aXBsZSBhc3NlbWJsaWVzLlxuICpcbiAqIEVtaXRzICdhc3NlbWJseS1jb21wbGV0ZScgd2hlbiBhbiBhc3NlbWJseSBjb21wbGV0ZXMuXG4gKiBFbWl0cyAnYXNzZW1ibHktZXJyb3InIHdoZW4gYW4gYXNzZW1ibHkgZmFpbHMuXG4gKiBFeHBvc2VzIGEgYC5wcm9taXNlYCBwcm9wZXJ0eSB0aGF0IHJlc29sdmVzIHdoZW4gYWxsIGFzc2VtYmxpZXMgaGF2ZVxuICogY29tcGxldGVkIChvciBmYWlsZWQpLlxuICovXG5jbGFzcyBUcmFuc2xvYWRpdEFzc2VtYmx5V2F0Y2hlciBleHRlbmRzIEVtaXR0ZXIge1xuICAjYXNzZW1ibHlJRHNcblxuICAjcmVqZWN0XG5cbiAgI3JlbWFpbmluZ1xuXG4gICNyZXNvbHZlXG5cbiAgI3VwcHlcblxuICBjb25zdHJ1Y3RvciAodXBweSwgYXNzZW1ibHlJRHMpIHtcbiAgICBzdXBlcigpXG5cbiAgICB0aGlzLiN1cHB5ID0gdXBweVxuICAgIHRoaXMuI2Fzc2VtYmx5SURzID0gYXNzZW1ibHlJRHNcbiAgICB0aGlzLiNyZW1haW5pbmcgPSBhc3NlbWJseUlEcy5sZW5ndGhcblxuICAgIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRoaXMuI3Jlc29sdmUgPSByZXNvbHZlXG4gICAgICB0aGlzLiNyZWplY3QgPSByZWplY3RcbiAgICB9KVxuXG4gICAgdGhpcy4jYWRkTGlzdGVuZXJzKClcbiAgfVxuXG4gIC8qKlxuICAgKiBBcmUgd2Ugd2F0Y2hpbmcgdGhpcyBhc3NlbWJseSBJRD9cbiAgICovXG4gICN3YXRjaGluZyAoaWQpIHtcbiAgICByZXR1cm4gdGhpcy4jYXNzZW1ibHlJRHMuaW5kZXhPZihpZCkgIT09IC0xXG4gIH1cblxuICAjb25Bc3NlbWJseUNvbXBsZXRlID0gKGFzc2VtYmx5KSA9PiB7XG4gICAgaWYgKCF0aGlzLiN3YXRjaGluZyhhc3NlbWJseS5hc3NlbWJseV9pZCkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHRoaXMuI3VwcHkubG9nKGBbVHJhbnNsb2FkaXRdIEFzc2VtYmx5V2F0Y2hlcjogR290IEFzc2VtYmx5IGZpbmlzaCAke2Fzc2VtYmx5LmFzc2VtYmx5X2lkfWApXG5cbiAgICB0aGlzLmVtaXQoJ2Fzc2VtYmx5LWNvbXBsZXRlJywgYXNzZW1ibHkuYXNzZW1ibHlfaWQpXG5cbiAgICB0aGlzLiNjaGVja0FsbENvbXBsZXRlKClcbiAgfVxuXG4gICNvbkFzc2VtYmx5Q2FuY2VsID0gKGFzc2VtYmx5KSA9PiB7XG4gICAgaWYgKCF0aGlzLiN3YXRjaGluZyhhc3NlbWJseS5hc3NlbWJseV9pZCkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHRoaXMuI2NoZWNrQWxsQ29tcGxldGUoKVxuICB9XG5cbiAgI29uQXNzZW1ibHlFcnJvciA9IChhc3NlbWJseSwgZXJyb3IpID0+IHtcbiAgICBpZiAoIXRoaXMuI3dhdGNoaW5nKGFzc2VtYmx5LmFzc2VtYmx5X2lkKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdGhpcy4jdXBweS5sb2coYFtUcmFuc2xvYWRpdF0gQXNzZW1ibHlXYXRjaGVyOiBHb3QgQXNzZW1ibHkgZXJyb3IgJHthc3NlbWJseS5hc3NlbWJseV9pZH1gKVxuICAgIHRoaXMuI3VwcHkubG9nKGVycm9yKVxuXG4gICAgdGhpcy5lbWl0KCdhc3NlbWJseS1lcnJvcicsIGFzc2VtYmx5LmFzc2VtYmx5X2lkLCBlcnJvcilcblxuICAgIHRoaXMuI2NoZWNrQWxsQ29tcGxldGUoKVxuICB9XG5cbiAgI29uSW1wb3J0RXJyb3IgPSAoYXNzZW1ibHksIGZpbGVJRCwgZXJyb3IpID0+IHtcbiAgICBpZiAoIXRoaXMuI3dhdGNoaW5nKGFzc2VtYmx5LmFzc2VtYmx5X2lkKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gTm90IHN1cmUgaWYgd2Ugc2hvdWxkIGJlIGRvaW5nIHNvbWV0aGluZyB3aGVuIGl0J3MganVzdCBvbmUgZmlsZSBmYWlsaW5nLlxuICAgIC8vIEFUTSwgdGhlIG9ubHkgb3B0aW9ucyBhcmUgMSkgaWdub3Jpbmcgb3IgMikgZmFpbGluZyB0aGUgZW50aXJlIHVwbG9hZC5cbiAgICAvLyBJIHRoaW5rIGZhaWxpbmcgdGhlIHVwbG9hZCBpcyBiZXR0ZXIgdGhhbiBzaWxlbnRseSBpZ25vcmluZy5cbiAgICAvLyBJbiB0aGUgZnV0dXJlIHdlIHNob3VsZCBtYXliZSBoYXZlIGEgd2F5IHRvIHJlc29sdmUgdXBsb2FkcyB3aXRoIHNvbWUgZmFpbHVyZXMsXG4gICAgLy8gbGlrZSByZXR1cm5pbmcgYW4gb2JqZWN0IHdpdGggYHsgc3VjY2Vzc2Z1bCwgZmFpbGVkIH1gIHVwbG9hZHMuXG4gICAgdGhpcy4jb25Bc3NlbWJseUVycm9yKGFzc2VtYmx5LCBlcnJvcilcbiAgfVxuXG4gICNjaGVja0FsbENvbXBsZXRlICgpIHtcbiAgICB0aGlzLiNyZW1haW5pbmcgLT0gMVxuICAgIGlmICh0aGlzLiNyZW1haW5pbmcgPT09IDApIHtcbiAgICAgIC8vIFdlJ3JlIGRvbmUsIHRoZXNlIGxpc3RlbmVycyBjYW4gYmUgcmVtb3ZlZFxuICAgICAgdGhpcy4jcmVtb3ZlTGlzdGVuZXJzKClcbiAgICAgIHRoaXMuI3Jlc29sdmUoKVxuICAgIH1cbiAgfVxuXG4gICNyZW1vdmVMaXN0ZW5lcnMgKCkge1xuICAgIHRoaXMuI3VwcHkub2ZmKCd0cmFuc2xvYWRpdDpjb21wbGV0ZScsIHRoaXMuI29uQXNzZW1ibHlDb21wbGV0ZSlcbiAgICB0aGlzLiN1cHB5Lm9mZigndHJhbnNsb2FkaXQ6YXNzZW1ibHktY2FuY2VsJywgdGhpcy4jb25Bc3NlbWJseUNhbmNlbClcbiAgICB0aGlzLiN1cHB5Lm9mZigndHJhbnNsb2FkaXQ6YXNzZW1ibHktZXJyb3InLCB0aGlzLiNvbkFzc2VtYmx5RXJyb3IpXG4gICAgdGhpcy4jdXBweS5vZmYoJ3RyYW5zbG9hZGl0OmltcG9ydC1lcnJvcicsIHRoaXMuI29uSW1wb3J0RXJyb3IpXG4gIH1cblxuICAjYWRkTGlzdGVuZXJzICgpIHtcbiAgICB0aGlzLiN1cHB5Lm9uKCd0cmFuc2xvYWRpdDpjb21wbGV0ZScsIHRoaXMuI29uQXNzZW1ibHlDb21wbGV0ZSlcbiAgICB0aGlzLiN1cHB5Lm9uKCd0cmFuc2xvYWRpdDphc3NlbWJseS1jYW5jZWwnLCB0aGlzLiNvbkFzc2VtYmx5Q2FuY2VsKVxuICAgIHRoaXMuI3VwcHkub24oJ3RyYW5zbG9hZGl0OmFzc2VtYmx5LWVycm9yJywgdGhpcy4jb25Bc3NlbWJseUVycm9yKVxuICAgIHRoaXMuI3VwcHkub24oJ3RyYW5zbG9hZGl0OmltcG9ydC1lcnJvcicsIHRoaXMuI29uSW1wb3J0RXJyb3IpXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBUcmFuc2xvYWRpdEFzc2VtYmx5V2F0Y2hlclxuIiwiY29uc3QgZmV0Y2hXaXRoTmV0d29ya0Vycm9yID0gcmVxdWlyZSgnQHVwcHkvdXRpbHMvbGliL2ZldGNoV2l0aE5ldHdvcmtFcnJvcicpXG5cbi8qKlxuICogQSBCYXJlYm9uZXMgSFRUUCBBUEkgY2xpZW50IGZvciBUcmFuc2xvYWRpdC5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBjbGFzcyBDbGllbnQge1xuICAjaGVhZGVycyA9IHt9XG5cbiAgY29uc3RydWN0b3IgKG9wdHMgPSB7fSkge1xuICAgIHRoaXMub3B0cyA9IG9wdHNcblxuICAgIGlmICh0aGlzLm9wdHMuY2xpZW50ICE9IG51bGwpIHtcbiAgICAgIHRoaXMuI2hlYWRlcnNbJ1RyYW5zbG9hZGl0LUNsaWVudCddID0gdGhpcy5vcHRzLmNsaWVudFxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgYXNzZW1ibHkuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zXG4gICAqIEBwYXJhbSB7c3RyaW5nfG9iamVjdH0gb3B0aW9ucy5wYXJhbXNcbiAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMuZmllbGRzXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLnNpZ25hdHVyZVxuICAgKiBAcGFyYW0ge251bWJlcn0gb3B0aW9ucy5leHBlY3RlZEZpbGVzXG4gICAqL1xuICBjcmVhdGVBc3NlbWJseSAoe1xuICAgIHBhcmFtcyxcbiAgICBmaWVsZHMsXG4gICAgc2lnbmF0dXJlLFxuICAgIGV4cGVjdGVkRmlsZXMsXG4gIH0pIHtcbiAgICBjb25zdCBkYXRhID0gbmV3IEZvcm1EYXRhKClcbiAgICBkYXRhLmFwcGVuZCgncGFyYW1zJywgdHlwZW9mIHBhcmFtcyA9PT0gJ3N0cmluZydcbiAgICAgID8gcGFyYW1zXG4gICAgICA6IEpTT04uc3RyaW5naWZ5KHBhcmFtcykpXG4gICAgaWYgKHNpZ25hdHVyZSkge1xuICAgICAgZGF0YS5hcHBlbmQoJ3NpZ25hdHVyZScsIHNpZ25hdHVyZSlcbiAgICB9XG5cbiAgICBPYmplY3Qua2V5cyhmaWVsZHMpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgZGF0YS5hcHBlbmQoa2V5LCBmaWVsZHNba2V5XSlcbiAgICB9KVxuICAgIGRhdGEuYXBwZW5kKCdudW1fZXhwZWN0ZWRfdXBsb2FkX2ZpbGVzJywgZXhwZWN0ZWRGaWxlcylcblxuICAgIGNvbnN0IHVybCA9IG5ldyBVUkwoJy9hc3NlbWJsaWVzJywgYCR7dGhpcy5vcHRzLnNlcnZpY2V9YCkuaHJlZlxuICAgIHJldHVybiBmZXRjaFdpdGhOZXR3b3JrRXJyb3IodXJsLCB7XG4gICAgICBtZXRob2Q6ICdwb3N0JyxcbiAgICAgIGhlYWRlcnM6IHRoaXMuI2hlYWRlcnMsXG4gICAgICBib2R5OiBkYXRhLFxuICAgIH0pXG4gICAgICAudGhlbigocmVzcG9uc2UpID0+IHJlc3BvbnNlLmpzb24oKSkudGhlbigoYXNzZW1ibHkpID0+IHtcbiAgICAgICAgaWYgKGFzc2VtYmx5LmVycm9yKSB7XG4gICAgICAgICAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoYXNzZW1ibHkuZXJyb3IpXG4gICAgICAgICAgZXJyb3IuZGV0YWlscyA9IGFzc2VtYmx5Lm1lc3NhZ2VcbiAgICAgICAgICBlcnJvci5hc3NlbWJseSA9IGFzc2VtYmx5XG4gICAgICAgICAgaWYgKGFzc2VtYmx5LmFzc2VtYmx5X2lkKSB7XG4gICAgICAgICAgICBlcnJvci5kZXRhaWxzICs9IGAgQXNzZW1ibHkgSUQ6ICR7YXNzZW1ibHkuYXNzZW1ibHlfaWR9YFxuICAgICAgICAgIH1cbiAgICAgICAgICB0aHJvdyBlcnJvclxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGFzc2VtYmx5XG4gICAgICB9KVxuICAgICAgLmNhdGNoKChlcnIpID0+IHRoaXMuI3JlcG9ydEVycm9yKGVyciwgeyB1cmwsIHR5cGU6ICdBUElfRVJST1InIH0pKVxuICB9XG5cbiAgLyoqXG4gICAqIFJlc2VydmUgcmVzb3VyY2VzIGZvciBhIGZpbGUgaW4gYW4gQXNzZW1ibHkuIFRoZW4gYWRkRmlsZSBjYW4gYmUgdXNlZCBsYXRlci5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGFzc2VtYmx5XG4gICAqIEBwYXJhbSB7VXBweUZpbGV9IGZpbGVcbiAgICovXG4gIHJlc2VydmVGaWxlIChhc3NlbWJseSwgZmlsZSkge1xuICAgIGNvbnN0IHNpemUgPSBlbmNvZGVVUklDb21wb25lbnQoZmlsZS5zaXplKVxuICAgIGNvbnN0IHVybCA9IGAke2Fzc2VtYmx5LmFzc2VtYmx5X3NzbF91cmx9L3Jlc2VydmVfZmlsZT9zaXplPSR7c2l6ZX1gXG4gICAgcmV0dXJuIGZldGNoV2l0aE5ldHdvcmtFcnJvcih1cmwsIHsgbWV0aG9kOiAncG9zdCcsIGhlYWRlcnM6IHRoaXMuI2hlYWRlcnMgfSlcbiAgICAgIC50aGVuKChyZXNwb25zZSkgPT4gcmVzcG9uc2UuanNvbigpKVxuICAgICAgLmNhdGNoKChlcnIpID0+IHRoaXMuI3JlcG9ydEVycm9yKGVyciwgeyBhc3NlbWJseSwgZmlsZSwgdXJsLCB0eXBlOiAnQVBJX0VSUk9SJyB9KSlcbiAgfVxuXG4gIC8qKlxuICAgKiBJbXBvcnQgYSByZW1vdGUgZmlsZSB0byBhbiBBc3NlbWJseS5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGFzc2VtYmx5XG4gICAqIEBwYXJhbSB7VXBweUZpbGV9IGZpbGVcbiAgICovXG4gIGFkZEZpbGUgKGFzc2VtYmx5LCBmaWxlKSB7XG4gICAgaWYgKCFmaWxlLnVwbG9hZFVSTCkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcignRmlsZSBkb2VzIG5vdCBoYXZlIGFuIGB1cGxvYWRVUkxgLicpKVxuICAgIH1cbiAgICBjb25zdCBzaXplID0gZW5jb2RlVVJJQ29tcG9uZW50KGZpbGUuc2l6ZSlcbiAgICBjb25zdCB1cGxvYWRVcmwgPSBlbmNvZGVVUklDb21wb25lbnQoZmlsZS51cGxvYWRVUkwpXG4gICAgY29uc3QgZmlsZW5hbWUgPSBlbmNvZGVVUklDb21wb25lbnQoZmlsZS5uYW1lKVxuICAgIGNvbnN0IGZpZWxkbmFtZSA9ICdmaWxlJ1xuXG4gICAgY29uc3QgcXMgPSBgc2l6ZT0ke3NpemV9JmZpbGVuYW1lPSR7ZmlsZW5hbWV9JmZpZWxkbmFtZT0ke2ZpZWxkbmFtZX0mczNVcmw9JHt1cGxvYWRVcmx9YFxuICAgIGNvbnN0IHVybCA9IGAke2Fzc2VtYmx5LmFzc2VtYmx5X3NzbF91cmx9L2FkZF9maWxlPyR7cXN9YFxuICAgIHJldHVybiBmZXRjaFdpdGhOZXR3b3JrRXJyb3IodXJsLCB7IG1ldGhvZDogJ3Bvc3QnLCBoZWFkZXJzOiB0aGlzLiNoZWFkZXJzIH0pXG4gICAgICAudGhlbigocmVzcG9uc2UpID0+IHJlc3BvbnNlLmpzb24oKSlcbiAgICAgIC5jYXRjaCgoZXJyKSA9PiB0aGlzLiNyZXBvcnRFcnJvcihlcnIsIHsgYXNzZW1ibHksIGZpbGUsIHVybCwgdHlwZTogJ0FQSV9FUlJPUicgfSkpXG4gIH1cblxuICAvKipcbiAgICogQ2FuY2VsIGEgcnVubmluZyBBc3NlbWJseS5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGFzc2VtYmx5XG4gICAqL1xuICBjYW5jZWxBc3NlbWJseSAoYXNzZW1ibHkpIHtcbiAgICBjb25zdCB1cmwgPSBhc3NlbWJseS5hc3NlbWJseV9zc2xfdXJsXG4gICAgcmV0dXJuIGZldGNoV2l0aE5ldHdvcmtFcnJvcih1cmwsIHsgbWV0aG9kOiAnZGVsZXRlJywgaGVhZGVyczogdGhpcy4jaGVhZGVycyB9KVxuICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiByZXNwb25zZS5qc29uKCkpXG4gICAgICAuY2F0Y2goKGVycikgPT4gdGhpcy4jcmVwb3J0RXJyb3IoZXJyLCB7IHVybCwgdHlwZTogJ0FQSV9FUlJPUicgfSkpXG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBjdXJyZW50IHN0YXR1cyBmb3IgYW4gYXNzZW1ibHkuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIHN0YXR1cyBlbmRwb2ludCBvZiB0aGUgYXNzZW1ibHkuXG4gICAqL1xuICBnZXRBc3NlbWJseVN0YXR1cyAodXJsKSB7XG4gICAgcmV0dXJuIGZldGNoV2l0aE5ldHdvcmtFcnJvcih1cmwsIHsgaGVhZGVyczogdGhpcy4jaGVhZGVycyB9KVxuICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiByZXNwb25zZS5qc29uKCkpXG4gICAgICAuY2F0Y2goKGVycikgPT4gdGhpcy4jcmVwb3J0RXJyb3IoZXJyLCB7IHVybCwgdHlwZTogJ1NUQVRVU19FUlJPUicgfSkpXG4gIH1cblxuICBzdWJtaXRFcnJvciAoZXJyLCB7IGVuZHBvaW50LCBpbnN0YW5jZSwgYXNzZW1ibHkgfSA9IHt9KSB7XG4gICAgY29uc3QgbWVzc2FnZSA9IGVyci5kZXRhaWxzXG4gICAgICA/IGAke2Vyci5tZXNzYWdlfSAoJHtlcnIuZGV0YWlsc30pYFxuICAgICAgOiBlcnIubWVzc2FnZVxuXG4gICAgcmV0dXJuIGZldGNoV2l0aE5ldHdvcmtFcnJvcignaHR0cHM6Ly90cmFuc2xvYWRpdHN0YXR1cy5jb20vY2xpZW50X2Vycm9yJywge1xuICAgICAgbWV0aG9kOiAncG9zdCcsXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIGVuZHBvaW50LFxuICAgICAgICBpbnN0YW5jZSxcbiAgICAgICAgYXNzZW1ibHlfaWQ6IGFzc2VtYmx5LFxuICAgICAgICBhZ2VudDogdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgPyBuYXZpZ2F0b3IudXNlckFnZW50IDogJycsXG4gICAgICAgIGNsaWVudDogdGhpcy5vcHRzLmNsaWVudCxcbiAgICAgICAgZXJyb3I6IG1lc3NhZ2UsXG4gICAgICB9KSxcbiAgICB9KVxuICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiByZXNwb25zZS5qc29uKCkpXG4gIH1cblxuICAjcmVwb3J0RXJyb3IgPSAoZXJyLCBwYXJhbXMpID0+IHtcbiAgICBpZiAodGhpcy5vcHRzLmVycm9yUmVwb3J0aW5nID09PSBmYWxzZSkge1xuICAgICAgdGhyb3cgZXJyXG4gICAgfVxuXG4gICAgY29uc3Qgb3B0cyA9IHtcbiAgICAgIHR5cGU6IHBhcmFtcy50eXBlLFxuICAgIH1cbiAgICBpZiAocGFyYW1zLmFzc2VtYmx5KSB7XG4gICAgICBvcHRzLmFzc2VtYmx5ID0gcGFyYW1zLmFzc2VtYmx5LmFzc2VtYmx5X2lkXG4gICAgICBvcHRzLmluc3RhbmNlID0gcGFyYW1zLmFzc2VtYmx5Lmluc3RhbmNlXG4gICAgfVxuICAgIGlmIChwYXJhbXMudXJsKSB7XG4gICAgICBvcHRzLmVuZHBvaW50ID0gcGFyYW1zLnVybFxuICAgIH1cblxuICAgIHRoaXMuc3VibWl0RXJyb3IoZXJyLCBvcHRzKS5jYXRjaCgoKSA9PiB7XG4gICAgICAvLyBub3QgbXVjaCB3ZSBjYW4gZG8gdGhlbiBpcyB0aGVyZVxuICAgIH0pXG5cbiAgICB0aHJvdyBlcnJcbiAgfVxufVxuIiwiY29uc3QgaGFzUHJvcGVydHkgPSByZXF1aXJlKCdAdXBweS91dGlscy9saWIvaGFzUHJvcGVydHknKVxuY29uc3QgQmFzZVBsdWdpbiA9IHJlcXVpcmUoJ0B1cHB5L2NvcmUvbGliL0Jhc2VQbHVnaW4nKVxuY29uc3QgVHVzID0gcmVxdWlyZSgnQHVwcHkvdHVzJylcbmNvbnN0IEFzc2VtYmx5ID0gcmVxdWlyZSgnLi9Bc3NlbWJseScpXG5jb25zdCBDbGllbnQgPSByZXF1aXJlKCcuL0NsaWVudCcpXG5jb25zdCBBc3NlbWJseU9wdGlvbnMgPSByZXF1aXJlKCcuL0Fzc2VtYmx5T3B0aW9ucycpXG5jb25zdCBBc3NlbWJseVdhdGNoZXIgPSByZXF1aXJlKCcuL0Fzc2VtYmx5V2F0Y2hlcicpXG5cbmNvbnN0IGxvY2FsZSA9IHJlcXVpcmUoJy4vbG9jYWxlJylcblxuZnVuY3Rpb24gZGVmYXVsdEdldEFzc2VtYmx5T3B0aW9ucyAoZmlsZSwgb3B0aW9ucykge1xuICByZXR1cm4ge1xuICAgIHBhcmFtczogb3B0aW9ucy5wYXJhbXMsXG4gICAgc2lnbmF0dXJlOiBvcHRpb25zLnNpZ25hdHVyZSxcbiAgICBmaWVsZHM6IG9wdGlvbnMuZmllbGRzLFxuICB9XG59XG5cbmNvbnN0IHNlbmRFcnJvclRvQ29uc29sZSA9IG9yaWdpbmFsRXJyID0+IGVyciA9PiB7XG4gIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKCdGYWlsZWQgdG8gc2VuZCBlcnJvciB0byB0aGUgY2xpZW50JylcbiAgZXJyb3IuY2F1c2UgPSBlcnJcbiAgY29uc29sZS5lcnJvcihlcnJvciwgb3JpZ2luYWxFcnIpXG59XG5cbmNvbnN0IENPTVBBTklPTiA9ICdodHRwczovL2FwaTIudHJhbnNsb2FkaXQuY29tL2NvbXBhbmlvbidcbi8vIFJlZ2V4IG1hdGNoaW5nIGFjY2VwdGFibGUgcG9zdE1lc3NhZ2UoKSBvcmlnaW5zIGZvciBhdXRoZW50aWNhdGlvbiBmZWVkYmFjayBmcm9tIGNvbXBhbmlvbi5cbmNvbnN0IEFMTE9XRURfQ09NUEFOSU9OX1BBVFRFUk4gPSAvXFwudHJhbnNsb2FkaXRcXC5jb20kL1xuLy8gUmVnZXggdXNlZCB0byBjaGVjayBpZiBhIENvbXBhbmlvbiBhZGRyZXNzIGlzIHJ1biBieSBUcmFuc2xvYWRpdC5cbmNvbnN0IFRMX0NPTVBBTklPTiA9IC9odHRwcz86XFwvXFwvYXBpMig/Oi1cXHcrKT9cXC50cmFuc2xvYWRpdFxcLmNvbVxcL2NvbXBhbmlvbi9cblxuLyoqXG4gKiBVcGxvYWQgZmlsZXMgdG8gVHJhbnNsb2FkaXQgdXNpbmcgVHVzLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGNsYXNzIFRyYW5zbG9hZGl0IGV4dGVuZHMgQmFzZVBsdWdpbiB7XG4gIHN0YXRpYyBWRVJTSU9OID0gcmVxdWlyZSgnLi4vcGFja2FnZS5qc29uJykudmVyc2lvbiAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGdsb2JhbC1yZXF1aXJlXG5cbiAgY29uc3RydWN0b3IgKHVwcHksIG9wdHMpIHtcbiAgICBzdXBlcih1cHB5LCBvcHRzKVxuICAgIHRoaXMudHlwZSA9ICd1cGxvYWRlcidcbiAgICB0aGlzLmlkID0gdGhpcy5vcHRzLmlkIHx8ICdUcmFuc2xvYWRpdCdcbiAgICB0aGlzLnRpdGxlID0gJ1RyYW5zbG9hZGl0J1xuXG4gICAgdGhpcy5kZWZhdWx0TG9jYWxlID0gbG9jYWxlXG5cbiAgICBjb25zdCBkZWZhdWx0T3B0aW9ucyA9IHtcbiAgICAgIHNlcnZpY2U6ICdodHRwczovL2FwaTIudHJhbnNsb2FkaXQuY29tJyxcbiAgICAgIGVycm9yUmVwb3J0aW5nOiB0cnVlLFxuICAgICAgd2FpdEZvckVuY29kaW5nOiBmYWxzZSxcbiAgICAgIHdhaXRGb3JNZXRhZGF0YTogZmFsc2UsXG4gICAgICBhbHdheXNSdW5Bc3NlbWJseTogZmFsc2UsXG4gICAgICBpbXBvcnRGcm9tVXBsb2FkVVJMczogZmFsc2UsXG4gICAgICBzaWduYXR1cmU6IG51bGwsXG4gICAgICBwYXJhbXM6IG51bGwsXG4gICAgICBmaWVsZHM6IHt9LFxuICAgICAgZ2V0QXNzZW1ibHlPcHRpb25zOiBkZWZhdWx0R2V0QXNzZW1ibHlPcHRpb25zLFxuICAgICAgbGltaXQ6IDAsXG4gICAgfVxuXG4gICAgdGhpcy5vcHRzID0geyAuLi5kZWZhdWx0T3B0aW9ucywgLi4ub3B0cyB9XG5cbiAgICB0aGlzLmkxOG5Jbml0KClcblxuICAgIGNvbnN0IGhhc0N1c3RvbUFzc2VtYmx5T3B0aW9ucyA9IHRoaXMub3B0cy5nZXRBc3NlbWJseU9wdGlvbnMgIT09IGRlZmF1bHRPcHRpb25zLmdldEFzc2VtYmx5T3B0aW9uc1xuICAgIGlmICh0aGlzLm9wdHMucGFyYW1zKSB7XG4gICAgICBBc3NlbWJseU9wdGlvbnMudmFsaWRhdGVQYXJhbXModGhpcy5vcHRzLnBhcmFtcylcbiAgICB9IGVsc2UgaWYgKCFoYXNDdXN0b21Bc3NlbWJseU9wdGlvbnMpIHtcbiAgICAgIC8vIFRocm93IHRoZSBzYW1lIGVycm9yIHRoYXQgd2UnZCB0aHJvdyBpZiB0aGUgYHBhcmFtc2AgcmV0dXJuZWQgZnJvbSBhXG4gICAgICAvLyBgZ2V0QXNzZW1ibHlPcHRpb25zKClgIGZ1bmN0aW9uIGlzIG51bGwuXG4gICAgICBBc3NlbWJseU9wdGlvbnMudmFsaWRhdGVQYXJhbXMobnVsbClcbiAgICB9XG5cbiAgICB0aGlzLmNsaWVudCA9IG5ldyBDbGllbnQoe1xuICAgICAgc2VydmljZTogdGhpcy5vcHRzLnNlcnZpY2UsXG4gICAgICBjbGllbnQ6IHRoaXMuI2dldENsaWVudFZlcnNpb24oKSxcbiAgICAgIGVycm9yUmVwb3J0aW5nOiB0aGlzLm9wdHMuZXJyb3JSZXBvcnRpbmcsXG4gICAgfSlcbiAgICAvLyBDb250YWlucyBBc3NlbWJseSBpbnN0YW5jZXMgZm9yIGluLXByb2dyZXNzIEFzc2VtYmxpZXMuXG4gICAgdGhpcy5hY3RpdmVBc3NlbWJsaWVzID0ge31cbiAgICAvLyBDb250YWlucyBhIG1hcHBpbmcgb2YgdXBsb2FkSUQgdG8gQXNzZW1ibHlXYXRjaGVyXG4gICAgdGhpcy5hc3NlbWJseVdhdGNoZXJzID0ge31cbiAgICAvLyBDb250YWlucyBhIGZpbGUgSURzIHRoYXQgaGF2ZSBjb21wbGV0ZWQgcG9zdHByb2Nlc3NpbmcgYmVmb3JlIHRoZSB1cGxvYWRcbiAgICAvLyB0aGV5IGJlbG9uZyB0byBoYXMgZW50ZXJlZCB0aGUgcG9zdHByb2Nlc3Mgc3RhZ2UuXG4gICAgdGhpcy5jb21wbGV0ZWRGaWxlcyA9IE9iamVjdC5jcmVhdGUobnVsbClcbiAgfVxuXG4gICNnZXRDbGllbnRWZXJzaW9uICgpIHtcbiAgICBjb25zdCBsaXN0ID0gW1xuICAgICAgYHVwcHktY29yZToke3RoaXMudXBweS5jb25zdHJ1Y3Rvci5WRVJTSU9OfWAsXG4gICAgICBgdXBweS10cmFuc2xvYWRpdDoke3RoaXMuY29uc3RydWN0b3IuVkVSU0lPTn1gLFxuICAgICAgYHVwcHktdHVzOiR7VHVzLlZFUlNJT059YCxcbiAgICBdXG5cbiAgICBjb25zdCBhZGRQbHVnaW5WZXJzaW9uID0gKHBsdWdpbk5hbWUsIHZlcnNpb25OYW1lKSA9PiB7XG4gICAgICBjb25zdCBwbHVnaW4gPSB0aGlzLnVwcHkuZ2V0UGx1Z2luKHBsdWdpbk5hbWUpXG4gICAgICBpZiAocGx1Z2luKSB7XG4gICAgICAgIGxpc3QucHVzaChgJHt2ZXJzaW9uTmFtZX06JHtwbHVnaW4uY29uc3RydWN0b3IuVkVSU0lPTn1gKVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLm9wdHMuaW1wb3J0RnJvbVVwbG9hZFVSTHMpIHtcbiAgICAgIGFkZFBsdWdpblZlcnNpb24oJ1hIUlVwbG9hZCcsICd1cHB5LXhoci11cGxvYWQnKVxuICAgICAgYWRkUGx1Z2luVmVyc2lvbignQXdzUzMnLCAndXBweS1hd3MtczMnKVxuICAgICAgYWRkUGx1Z2luVmVyc2lvbignQXdzUzNNdWx0aXBhcnQnLCAndXBweS1hd3MtczMtbXVsdGlwYXJ0JylcbiAgICB9XG5cbiAgICBhZGRQbHVnaW5WZXJzaW9uKCdEcm9wYm94JywgJ3VwcHktZHJvcGJveCcpXG4gICAgYWRkUGx1Z2luVmVyc2lvbignQm94JywgJ3VwcHktYm94JylcbiAgICBhZGRQbHVnaW5WZXJzaW9uKCdGYWNlYm9vaycsICd1cHB5LWZhY2Vib29rJylcbiAgICBhZGRQbHVnaW5WZXJzaW9uKCdHb29nbGVEcml2ZScsICd1cHB5LWdvb2dsZS1kcml2ZScpXG4gICAgYWRkUGx1Z2luVmVyc2lvbignSW5zdGFncmFtJywgJ3VwcHktaW5zdGFncmFtJylcbiAgICBhZGRQbHVnaW5WZXJzaW9uKCdPbmVEcml2ZScsICd1cHB5LW9uZWRyaXZlJylcbiAgICBhZGRQbHVnaW5WZXJzaW9uKCdab29tJywgJ3VwcHktem9vbScpXG4gICAgYWRkUGx1Z2luVmVyc2lvbignVXJsJywgJ3VwcHktdXJsJylcblxuICAgIHJldHVybiBsaXN0LmpvaW4oJywnKVxuICB9XG5cbiAgLyoqXG4gICAqIEF0dGFjaCBtZXRhZGF0YSB0byBmaWxlcyB0byBjb25maWd1cmUgdGhlIFR1cyBwbHVnaW4gdG8gdXBsb2FkIHRvIFRyYW5zbG9hZGl0LlxuICAgKiBBbHNvIHVzZSBUcmFuc2xvYWRpdCdzIENvbXBhbmlvblxuICAgKlxuICAgKiBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS90dXMvdHVzZC93aWtpL1VwbG9hZGluZy10by1UcmFuc2xvYWRpdC11c2luZy10dXMjdXBsb2FkaW5nLXVzaW5nLXR1c1xuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZmlsZVxuICAgKiBAcGFyYW0ge29iamVjdH0gc3RhdHVzXG4gICAqL1xuICAjYXR0YWNoQXNzZW1ibHlNZXRhZGF0YSAoZmlsZSwgc3RhdHVzKSB7XG4gICAgLy8gQWRkIHRoZSBtZXRhZGF0YSBwYXJhbWV0ZXJzIFRyYW5zbG9hZGl0IG5lZWRzLlxuICAgIGNvbnN0IG1ldGEgPSB7XG4gICAgICAuLi5maWxlLm1ldGEsXG4gICAgICBhc3NlbWJseV91cmw6IHN0YXR1cy5hc3NlbWJseV91cmwsXG4gICAgICBmaWxlbmFtZTogZmlsZS5uYW1lLFxuICAgICAgZmllbGRuYW1lOiAnZmlsZScsXG4gICAgfVxuICAgIC8vIEFkZCBBc3NlbWJseS1zcGVjaWZpYyBUdXMgZW5kcG9pbnQuXG4gICAgY29uc3QgdHVzID0ge1xuICAgICAgLi4uZmlsZS50dXMsXG4gICAgICBlbmRwb2ludDogc3RhdHVzLnR1c191cmwsXG4gICAgICAvLyBJbmNsdWRlIFgtUmVxdWVzdC1JRCBoZWFkZXJzIGZvciBiZXR0ZXIgZGVidWdnaW5nLlxuICAgICAgYWRkUmVxdWVzdElkOiB0cnVlLFxuICAgIH1cblxuICAgIC8vIFNldCBDb21wYW5pb24gbG9jYXRpb24uIFdlIG9ubHkgYWRkIHRoaXMsIGlmICdmaWxlJyBoYXMgdGhlIGF0dHJpYnV0ZVxuICAgIC8vIHJlbW90ZSwgYmVjYXVzZSB0aGlzIGlzIHRoZSBjcml0ZXJpYSB0byBpZGVudGlmeSByZW1vdGUgZmlsZXMuXG4gICAgLy8gV2Ugb25seSByZXBsYWNlIHRoZSBob3N0bmFtZSBmb3IgVHJhbnNsb2FkaXQncyBjb21wYW5pb25zLCBzbyB0aGF0XG4gICAgLy8gcGVvcGxlIGNhbiBhbHNvIHNlbGYtaG9zdCB0aGVtIHdoaWxlIHN0aWxsIHVzaW5nIFRyYW5zbG9hZGl0IGZvciBlbmNvZGluZy5cbiAgICBsZXQgeyByZW1vdGUgfSA9IGZpbGVcblxuICAgIGlmIChmaWxlLnJlbW90ZSAmJiBUTF9DT01QQU5JT04udGVzdChmaWxlLnJlbW90ZS5jb21wYW5pb25VcmwpKSB7XG4gICAgICBjb25zdCBuZXdIb3N0ID0gc3RhdHVzLmNvbXBhbmlvbl91cmxcbiAgICAgICAgLnJlcGxhY2UoL1xcLyQvLCAnJylcbiAgICAgIGNvbnN0IHBhdGggPSBmaWxlLnJlbW90ZS51cmxcbiAgICAgICAgLnJlcGxhY2UoZmlsZS5yZW1vdGUuY29tcGFuaW9uVXJsLCAnJylcbiAgICAgICAgLnJlcGxhY2UoL15cXC8vLCAnJylcblxuICAgICAgcmVtb3RlID0ge1xuICAgICAgICAuLi5maWxlLnJlbW90ZSxcbiAgICAgICAgY29tcGFuaW9uVXJsOiBuZXdIb3N0LFxuICAgICAgICB1cmw6IGAke25ld0hvc3R9LyR7cGF0aH1gLFxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFN0b3JlIHRoZSBBc3NlbWJseSBJRCB0aGlzIGZpbGUgaXMgaW4gb24gdGhlIGZpbGUgdW5kZXIgdGhlIGB0cmFuc2xvYWRpdGAga2V5LlxuICAgIGNvbnN0IG5ld0ZpbGUgPSB7XG4gICAgICAuLi5maWxlLFxuICAgICAgdHJhbnNsb2FkaXQ6IHtcbiAgICAgICAgYXNzZW1ibHk6IHN0YXR1cy5hc3NlbWJseV9pZCxcbiAgICAgIH0sXG4gICAgfVxuICAgIC8vIE9ubHkgY29uZmlndXJlIHRoZSBUdXMgcGx1Z2luIGlmIHdlIGFyZSB1cGxvYWRpbmcgc3RyYWlnaHQgdG8gVHJhbnNsb2FkaXQgKHRoZSBkZWZhdWx0KS5cbiAgICBpZiAoIXRoaXMub3B0cy5pbXBvcnRGcm9tVXBsb2FkVVJMcykge1xuICAgICAgT2JqZWN0LmFzc2lnbihuZXdGaWxlLCB7IG1ldGEsIHR1cywgcmVtb3RlIH0pXG4gICAgfVxuICAgIHJldHVybiBuZXdGaWxlXG4gIH1cblxuICAjY3JlYXRlQXNzZW1ibHkgKGZpbGVJRHMsIHVwbG9hZElELCBvcHRpb25zKSB7XG4gICAgdGhpcy51cHB5LmxvZygnW1RyYW5zbG9hZGl0XSBDcmVhdGUgQXNzZW1ibHknKVxuXG4gICAgcmV0dXJuIHRoaXMuY2xpZW50LmNyZWF0ZUFzc2VtYmx5KHtcbiAgICAgIHBhcmFtczogb3B0aW9ucy5wYXJhbXMsXG4gICAgICBmaWVsZHM6IG9wdGlvbnMuZmllbGRzLFxuICAgICAgZXhwZWN0ZWRGaWxlczogZmlsZUlEcy5sZW5ndGgsXG4gICAgICBzaWduYXR1cmU6IG9wdGlvbnMuc2lnbmF0dXJlLFxuICAgIH0pLnRoZW4oKG5ld0Fzc2VtYmx5KSA9PiB7XG4gICAgICBjb25zdCBhc3NlbWJseSA9IG5ldyBBc3NlbWJseShuZXdBc3NlbWJseSlcbiAgICAgIGNvbnN0IHsgc3RhdHVzIH0gPSBhc3NlbWJseVxuICAgICAgY29uc3QgYXNzZW1ibHlJRCA9IHN0YXR1cy5hc3NlbWJseV9pZFxuXG4gICAgICBjb25zdCB7IGFzc2VtYmxpZXMsIHVwbG9hZHNBc3NlbWJsaWVzIH0gPSB0aGlzLmdldFBsdWdpblN0YXRlKClcbiAgICAgIHRoaXMuc2V0UGx1Z2luU3RhdGUoe1xuICAgICAgICAvLyBTdG9yZSB0aGUgQXNzZW1ibHkgc3RhdHVzLlxuICAgICAgICBhc3NlbWJsaWVzOiB7XG4gICAgICAgICAgLi4uYXNzZW1ibGllcyxcbiAgICAgICAgICBbYXNzZW1ibHlJRF06IHN0YXR1cyxcbiAgICAgICAgfSxcbiAgICAgICAgLy8gU3RvcmUgdGhlIGxpc3Qgb2YgQXNzZW1ibGllcyByZWxhdGVkIHRvIHRoaXMgdXBsb2FkLlxuICAgICAgICB1cGxvYWRzQXNzZW1ibGllczoge1xuICAgICAgICAgIC4uLnVwbG9hZHNBc3NlbWJsaWVzLFxuICAgICAgICAgIFt1cGxvYWRJRF06IFtcbiAgICAgICAgICAgIC4uLnVwbG9hZHNBc3NlbWJsaWVzW3VwbG9hZElEXSxcbiAgICAgICAgICAgIGFzc2VtYmx5SUQsXG4gICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgIH0pXG5cbiAgICAgIGNvbnN0IHsgZmlsZXMgfSA9IHRoaXMudXBweS5nZXRTdGF0ZSgpXG4gICAgICBjb25zdCB1cGRhdGVkRmlsZXMgPSB7fVxuICAgICAgZmlsZUlEcy5mb3JFYWNoKChpZCkgPT4ge1xuICAgICAgICB1cGRhdGVkRmlsZXNbaWRdID0gdGhpcy4jYXR0YWNoQXNzZW1ibHlNZXRhZGF0YSh0aGlzLnVwcHkuZ2V0RmlsZShpZCksIHN0YXR1cylcbiAgICAgIH0pXG4gICAgICB0aGlzLnVwcHkuc2V0U3RhdGUoe1xuICAgICAgICBmaWxlczoge1xuICAgICAgICAgIC4uLmZpbGVzLFxuICAgICAgICAgIC4uLnVwZGF0ZWRGaWxlcyxcbiAgICAgICAgfSxcbiAgICAgIH0pXG5cbiAgICAgIHRoaXMudXBweS5lbWl0KCd0cmFuc2xvYWRpdDphc3NlbWJseS1jcmVhdGVkJywgc3RhdHVzLCBmaWxlSURzKVxuXG4gICAgICB0aGlzLnVwcHkubG9nKGBbVHJhbnNsb2FkaXRdIENyZWF0ZWQgQXNzZW1ibHkgJHthc3NlbWJseUlEfWApXG4gICAgICByZXR1cm4gYXNzZW1ibHlcbiAgICB9KS5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICBjb25zdCBlcnJvciA9IG5ldyBFcnJvcihgJHt0aGlzLmkxOG4oJ2NyZWF0aW5nQXNzZW1ibHlGYWlsZWQnKX06ICR7ZXJyLm1lc3NhZ2V9YClcbiAgICAgIGVycm9yLmNhdXNlID0gZXJyXG4gICAgICAvLyBSZWplY3QgdGhlIHByb21pc2UuXG4gICAgICB0aHJvdyBlcnJvclxuICAgIH0pXG4gIH1cblxuICAjY3JlYXRlQXNzZW1ibHlXYXRjaGVyIChhc3NlbWJseUlELCBmaWxlSURzLCB1cGxvYWRJRCkge1xuICAvLyBBc3NlbWJseVdhdGNoZXIgdHJhY2tzIGNvbXBsZXRpb24gc3RhdGVzIG9mIGFsbCBBc3NlbWJsaWVzIGluIHRoaXMgdXBsb2FkLlxuICAgIGNvbnN0IHdhdGNoZXIgPSBuZXcgQXNzZW1ibHlXYXRjaGVyKHRoaXMudXBweSwgYXNzZW1ibHlJRClcblxuICAgIHdhdGNoZXIub24oJ2Fzc2VtYmx5LWNvbXBsZXRlJywgKGlkKSA9PiB7XG4gICAgICBjb25zdCBmaWxlcyA9IHRoaXMuZ2V0QXNzZW1ibHlGaWxlcyhpZClcbiAgICAgIGZpbGVzLmZvckVhY2goKGZpbGUpID0+IHtcbiAgICAgICAgdGhpcy5jb21wbGV0ZWRGaWxlc1tmaWxlLmlkXSA9IHRydWVcbiAgICAgICAgdGhpcy51cHB5LmVtaXQoJ3Bvc3Rwcm9jZXNzLWNvbXBsZXRlJywgZmlsZSlcbiAgICAgIH0pXG4gICAgfSlcblxuICAgIHdhdGNoZXIub24oJ2Fzc2VtYmx5LWVycm9yJywgKGlkLCBlcnJvcikgPT4ge1xuICAgIC8vIENsZWFyIHBvc3Rwcm9jZXNzaW5nIHN0YXRlIGZvciBhbGwgb3VyIGZpbGVzLlxuICAgICAgY29uc3QgZmlsZXMgPSB0aGlzLmdldEFzc2VtYmx5RmlsZXMoaWQpXG4gICAgICBmaWxlcy5mb3JFYWNoKChmaWxlKSA9PiB7XG4gICAgICAvLyBUT0RPIE1heWJlIG1ha2UgYSBwb3N0cHJvY2Vzcy1lcnJvciBldmVudCBoZXJlP1xuICAgICAgICB0aGlzLnVwcHkuZW1pdCgndXBsb2FkLWVycm9yJywgZmlsZSwgZXJyb3IpXG5cbiAgICAgICAgdGhpcy51cHB5LmVtaXQoJ3Bvc3Rwcm9jZXNzLWNvbXBsZXRlJywgZmlsZSlcbiAgICAgIH0pXG4gICAgfSlcblxuICAgIHRoaXMuYXNzZW1ibHlXYXRjaGVyc1t1cGxvYWRJRF0gPSB3YXRjaGVyXG4gIH1cblxuICAjc2hvdWxkV2FpdEFmdGVyVXBsb2FkICgpIHtcbiAgICByZXR1cm4gdGhpcy5vcHRzLndhaXRGb3JFbmNvZGluZyB8fCB0aGlzLm9wdHMud2FpdEZvck1ldGFkYXRhXG4gIH1cblxuICAvKipcbiAgICogVXNlZCB3aGVuIGBpbXBvcnRGcm9tVXBsb2FkVVJMc2AgaXMgZW5hYmxlZDogcmVzZXJ2ZXMgYWxsIGZpbGVzIGluXG4gICAqIHRoZSBBc3NlbWJseS5cbiAgICovXG4gICNyZXNlcnZlRmlsZXMgKGFzc2VtYmx5LCBmaWxlSURzKSB7XG4gICAgcmV0dXJuIFByb21pc2UuYWxsKGZpbGVJRHMubWFwKChmaWxlSUQpID0+IHtcbiAgICAgIGNvbnN0IGZpbGUgPSB0aGlzLnVwcHkuZ2V0RmlsZShmaWxlSUQpXG4gICAgICByZXR1cm4gdGhpcy5jbGllbnQucmVzZXJ2ZUZpbGUoYXNzZW1ibHkuc3RhdHVzLCBmaWxlKVxuICAgIH0pKVxuICB9XG5cbiAgLyoqXG4gICAqIFVzZWQgd2hlbiBgaW1wb3J0RnJvbVVwbG9hZFVSTHNgIGlzIGVuYWJsZWQ6IGFkZHMgZmlsZXMgdG8gdGhlIEFzc2VtYmx5XG4gICAqIG9uY2UgdGhleSBoYXZlIGJlZW4gZnVsbHkgdXBsb2FkZWQuXG4gICAqL1xuICAjb25GaWxlVXBsb2FkVVJMQXZhaWxhYmxlID0gKHJhd0ZpbGUpID0+IHtcbiAgICBjb25zdCBmaWxlID0gdGhpcy51cHB5LmdldEZpbGUocmF3RmlsZS5pZClcbiAgICBpZiAoIWZpbGUgfHwgIWZpbGUudHJhbnNsb2FkaXQgfHwgIWZpbGUudHJhbnNsb2FkaXQuYXNzZW1ibHkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IHsgYXNzZW1ibGllcyB9ID0gdGhpcy5nZXRQbHVnaW5TdGF0ZSgpXG4gICAgY29uc3QgYXNzZW1ibHkgPSBhc3NlbWJsaWVzW2ZpbGUudHJhbnNsb2FkaXQuYXNzZW1ibHldXG5cbiAgICB0aGlzLmNsaWVudC5hZGRGaWxlKGFzc2VtYmx5LCBmaWxlKS5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICB0aGlzLnVwcHkubG9nKGVycilcbiAgICAgIHRoaXMudXBweS5lbWl0KCd0cmFuc2xvYWRpdDppbXBvcnQtZXJyb3InLCBhc3NlbWJseSwgZmlsZS5pZCwgZXJyKVxuICAgIH0pXG4gIH1cblxuICAjZmluZEZpbGUgKHVwbG9hZGVkRmlsZSkge1xuICAgIGNvbnN0IGZpbGVzID0gdGhpcy51cHB5LmdldEZpbGVzKClcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZpbGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBmaWxlID0gZmlsZXNbaV1cbiAgICAgIC8vIENvbXBsZXRlZCBmaWxlIHVwbG9hZC5cbiAgICAgIGlmIChmaWxlLnVwbG9hZFVSTCA9PT0gdXBsb2FkZWRGaWxlLnR1c191cGxvYWRfdXJsKSB7XG4gICAgICAgIHJldHVybiBmaWxlXG4gICAgICB9XG4gICAgICAvLyBJbi1wcm9ncmVzcyBmaWxlIHVwbG9hZC5cbiAgICAgIGlmIChmaWxlLnR1cyAmJiBmaWxlLnR1cy51cGxvYWRVcmwgPT09IHVwbG9hZGVkRmlsZS50dXNfdXBsb2FkX3VybCkge1xuICAgICAgICByZXR1cm4gZmlsZVxuICAgICAgfVxuICAgICAgaWYgKCF1cGxvYWRlZEZpbGUuaXNfdHVzX2ZpbGUpIHtcbiAgICAgICAgLy8gRmluZ2Vycy1jcm9zc2VkIGNoZWNrIGZvciBub24tdHVzIHVwbG9hZHMsIGVnIGltcG9ydGVkIGZyb20gUzMuXG4gICAgICAgIGlmIChmaWxlLm5hbWUgPT09IHVwbG9hZGVkRmlsZS5uYW1lICYmIGZpbGUuc2l6ZSA9PT0gdXBsb2FkZWRGaWxlLnNpemUpIHtcbiAgICAgICAgICByZXR1cm4gZmlsZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWRcbiAgfVxuXG4gICNvbkZpbGVVcGxvYWRDb21wbGV0ZSAoYXNzZW1ibHlJZCwgdXBsb2FkZWRGaWxlKSB7XG4gICAgY29uc3Qgc3RhdGUgPSB0aGlzLmdldFBsdWdpblN0YXRlKClcbiAgICBjb25zdCBmaWxlID0gdGhpcy4jZmluZEZpbGUodXBsb2FkZWRGaWxlKVxuICAgIGlmICghZmlsZSkge1xuICAgICAgdGhpcy51cHB5LmxvZygnW1RyYW5zbG9hZGl0XSBDb3VsZG7igJl0IGZpbGUgdGhlIGZpbGUsIGl0IHdhcyBsaWtlbHkgcmVtb3ZlZCBpbiB0aGUgcHJvY2VzcycpXG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgdGhpcy5zZXRQbHVnaW5TdGF0ZSh7XG4gICAgICBmaWxlczoge1xuICAgICAgICAuLi5zdGF0ZS5maWxlcyxcbiAgICAgICAgW3VwbG9hZGVkRmlsZS5pZF06IHtcbiAgICAgICAgICBhc3NlbWJseTogYXNzZW1ibHlJZCxcbiAgICAgICAgICBpZDogZmlsZS5pZCxcbiAgICAgICAgICB1cGxvYWRlZEZpbGUsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0pXG4gICAgdGhpcy51cHB5LmVtaXQoJ3RyYW5zbG9hZGl0OnVwbG9hZCcsIHVwbG9hZGVkRmlsZSwgdGhpcy5nZXRBc3NlbWJseShhc3NlbWJseUlkKSlcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayB3aGVuIGEgbmV3IEFzc2VtYmx5IHJlc3VsdCBjb21lcyBpbi5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGFzc2VtYmx5SWRcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0ZXBOYW1lXG4gICAqIEBwYXJhbSB7b2JqZWN0fSByZXN1bHRcbiAgICovXG4gICNvblJlc3VsdCAoYXNzZW1ibHlJZCwgc3RlcE5hbWUsIHJlc3VsdCkge1xuICAgIGNvbnN0IHN0YXRlID0gdGhpcy5nZXRQbHVnaW5TdGF0ZSgpXG4gICAgY29uc3QgZmlsZSA9IHN0YXRlLmZpbGVzW3Jlc3VsdC5vcmlnaW5hbF9pZF1cbiAgICAvLyBUaGUgYGZpbGVgIG1heSBub3QgZXhpc3QgaWYgYW4gaW1wb3J0IHJvYm90IHdhcyB1c2VkIGluc3RlYWQgb2YgYSBmaWxlIHVwbG9hZC5cbiAgICByZXN1bHQubG9jYWxJZCA9IGZpbGUgPyBmaWxlLmlkIDogbnVsbCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG5cbiAgICBjb25zdCBlbnRyeSA9IHtcbiAgICAgIHJlc3VsdCxcbiAgICAgIHN0ZXBOYW1lLFxuICAgICAgaWQ6IHJlc3VsdC5pZCxcbiAgICAgIGFzc2VtYmx5OiBhc3NlbWJseUlkLFxuICAgIH1cblxuICAgIHRoaXMuc2V0UGx1Z2luU3RhdGUoe1xuICAgICAgcmVzdWx0czogWy4uLnN0YXRlLnJlc3VsdHMsIGVudHJ5XSxcbiAgICB9KVxuICAgIHRoaXMudXBweS5lbWl0KCd0cmFuc2xvYWRpdDpyZXN1bHQnLCBzdGVwTmFtZSwgcmVzdWx0LCB0aGlzLmdldEFzc2VtYmx5KGFzc2VtYmx5SWQpKVxuICB9XG5cbiAgLyoqXG4gICAqIFdoZW4gYW4gQXNzZW1ibHkgaGFzIGZpbmlzaGVkIHByb2Nlc3NpbmcsIGdldCB0aGUgZmluYWwgc3RhdGVcbiAgICogYW5kIGVtaXQgaXQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBzdGF0dXNcbiAgICovXG4gICNvbkFzc2VtYmx5RmluaXNoZWQgKHN0YXR1cykge1xuICAgIGNvbnN0IHVybCA9IHN0YXR1cy5hc3NlbWJseV9zc2xfdXJsXG4gICAgdGhpcy5jbGllbnQuZ2V0QXNzZW1ibHlTdGF0dXModXJsKS50aGVuKChmaW5hbFN0YXR1cykgPT4ge1xuICAgICAgY29uc3QgYXNzZW1ibHlJZCA9IGZpbmFsU3RhdHVzLmFzc2VtYmx5X2lkXG4gICAgICBjb25zdCBzdGF0ZSA9IHRoaXMuZ2V0UGx1Z2luU3RhdGUoKVxuICAgICAgdGhpcy5zZXRQbHVnaW5TdGF0ZSh7XG4gICAgICAgIGFzc2VtYmxpZXM6IHtcbiAgICAgICAgICAuLi5zdGF0ZS5hc3NlbWJsaWVzLFxuICAgICAgICAgIFthc3NlbWJseUlkXTogZmluYWxTdGF0dXMsXG4gICAgICAgIH0sXG4gICAgICB9KVxuICAgICAgdGhpcy51cHB5LmVtaXQoJ3RyYW5zbG9hZGl0OmNvbXBsZXRlJywgZmluYWxTdGF0dXMpXG4gICAgfSlcbiAgfVxuXG4gIGFzeW5jICNjYW5jZWxBc3NlbWJseSAoYXNzZW1ibHkpIHtcbiAgICBhd2FpdCB0aGlzLmNsaWVudC5jYW5jZWxBc3NlbWJseShhc3NlbWJseSlcbiAgICAvLyBUT0RPIGJ1YmJsZSB0aGlzIHRocm91Z2ggQXNzZW1ibHlXYXRjaGVyIHNvIGl0cyBldmVudCBoYW5kbGVycyBjYW4gY2xlYW4gdXAgY29ycmVjdGx5XG4gICAgdGhpcy51cHB5LmVtaXQoJ3RyYW5zbG9hZGl0OmFzc2VtYmx5LWNhbmNlbGxlZCcsIGFzc2VtYmx5KVxuICB9XG5cbiAgLyoqXG4gICAqIFdoZW4gYWxsIGZpbGVzIGFyZSByZW1vdmVkLCBjYW5jZWwgaW4tcHJvZ3Jlc3MgQXNzZW1ibGllcy5cbiAgICovXG4gICNvbkNhbmNlbEFsbCA9ICgpID0+IHtcbiAgICBjb25zdCB7IHVwbG9hZHNBc3NlbWJsaWVzIH0gPSB0aGlzLmdldFBsdWdpblN0YXRlKClcblxuICAgIGNvbnN0IGFzc2VtYmx5SURzID0gT2JqZWN0LnZhbHVlcyh1cGxvYWRzQXNzZW1ibGllcykuZmxhdCgxKVxuXG4gICAgY29uc3QgY2FuY2VsUHJvbWlzZXMgPSBhc3NlbWJseUlEcy5tYXAoKGFzc2VtYmx5SUQpID0+IHtcbiAgICAgIGNvbnN0IGFzc2VtYmx5ID0gdGhpcy5nZXRBc3NlbWJseShhc3NlbWJseUlEKVxuICAgICAgcmV0dXJuIHRoaXMuI2NhbmNlbEFzc2VtYmx5KGFzc2VtYmx5KVxuICAgIH0pXG5cbiAgICBQcm9taXNlLmFsbChjYW5jZWxQcm9taXNlcykuY2F0Y2goKGVycikgPT4ge1xuICAgICAgdGhpcy51cHB5LmxvZyhlcnIpXG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBDdXN0b20gc3RhdGUgc2VyaWFsaXphdGlvbiBmb3IgdGhlIEdvbGRlbiBSZXRyaWV2ZXIgcGx1Z2luLlxuICAgKiBJdCB3aWxsIHBhc3MgdGhpcyBiYWNrIHRvIHRoZSBgX29uUmVzdG9yZWRgIGZ1bmN0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZXREYXRhXG4gICAqL1xuICAjZ2V0UGVyc2lzdGVudERhdGEgPSAoc2V0RGF0YSkgPT4ge1xuICAgIGNvbnN0IHsgYXNzZW1ibGllcywgdXBsb2Fkc0Fzc2VtYmxpZXMgfSA9IHRoaXMuZ2V0UGx1Z2luU3RhdGUoKVxuXG4gICAgc2V0RGF0YSh7XG4gICAgICBbdGhpcy5pZF06IHtcbiAgICAgICAgYXNzZW1ibGllcyxcbiAgICAgICAgdXBsb2Fkc0Fzc2VtYmxpZXMsXG4gICAgICB9LFxuICAgIH0pXG4gIH1cblxuICAjb25SZXN0b3JlZCA9IChwbHVnaW5EYXRhKSA9PiB7XG4gICAgY29uc3Qgc2F2ZWRTdGF0ZSA9IHBsdWdpbkRhdGEgJiYgcGx1Z2luRGF0YVt0aGlzLmlkXSA/IHBsdWdpbkRhdGFbdGhpcy5pZF0gOiB7fVxuICAgIGNvbnN0IHByZXZpb3VzQXNzZW1ibGllcyA9IHNhdmVkU3RhdGUuYXNzZW1ibGllcyB8fCB7fVxuICAgIGNvbnN0IHVwbG9hZHNBc3NlbWJsaWVzID0gc2F2ZWRTdGF0ZS51cGxvYWRzQXNzZW1ibGllcyB8fCB7fVxuXG4gICAgaWYgKE9iamVjdC5rZXlzKHVwbG9hZHNBc3NlbWJsaWVzKS5sZW5ndGggPT09IDApIHtcbiAgICAgIC8vIE5vdGhpbmcgdG8gcmVzdG9yZS5cbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIENvbnZlcnQgbG9hZGVkIEFzc2VtYmx5IHN0YXR1c2VzIHRvIGEgVHJhbnNsb2FkaXQgcGx1Z2luIHN0YXRlIG9iamVjdC5cbiAgICBjb25zdCByZXN0b3JlU3RhdGUgPSAoYXNzZW1ibGllcykgPT4ge1xuICAgICAgY29uc3QgZmlsZXMgPSB7fVxuICAgICAgY29uc3QgcmVzdWx0cyA9IFtdXG4gICAgICBmb3IgKGNvbnN0IFtpZCwgc3RhdHVzXSBvZiBPYmplY3QuZW50cmllcyhhc3NlbWJsaWVzKSkgIHtcbiAgICAgICAgc3RhdHVzLnVwbG9hZHMuZm9yRWFjaCgodXBsb2FkZWRGaWxlKSA9PiB7XG4gICAgICAgICAgY29uc3QgZmlsZSA9IHRoaXMuI2ZpbmRGaWxlKHVwbG9hZGVkRmlsZSlcbiAgICAgICAgICBmaWxlc1t1cGxvYWRlZEZpbGUuaWRdID0ge1xuICAgICAgICAgICAgaWQ6IGZpbGUuaWQsXG4gICAgICAgICAgICBhc3NlbWJseTogaWQsXG4gICAgICAgICAgICB1cGxvYWRlZEZpbGUsXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuXG4gICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5nZXRQbHVnaW5TdGF0ZSgpXG4gICAgICAgIE9iamVjdC5rZXlzKHN0YXR1cy5yZXN1bHRzKS5mb3JFYWNoKChzdGVwTmFtZSkgPT4ge1xuICAgICAgICAgIGZvciAoY29uc3QgcmVzdWx0IG9mIHN0YXR1cy5yZXN1bHRzW3N0ZXBOYW1lXSkge1xuICAgICAgICAgICAgY29uc3QgZmlsZSA9IHN0YXRlLmZpbGVzW3Jlc3VsdC5vcmlnaW5hbF9pZF1cbiAgICAgICAgICAgIHJlc3VsdC5sb2NhbElkID0gZmlsZSA/IGZpbGUuaWQgOiBudWxsXG4gICAgICAgICAgICByZXN1bHRzLnB1c2goe1xuICAgICAgICAgICAgICBpZDogcmVzdWx0LmlkLFxuICAgICAgICAgICAgICByZXN1bHQsXG4gICAgICAgICAgICAgIHN0ZXBOYW1lLFxuICAgICAgICAgICAgICBhc3NlbWJseTogaWQsXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIH1cblxuICAgICAgdGhpcy5zZXRQbHVnaW5TdGF0ZSh7XG4gICAgICAgIGFzc2VtYmxpZXMsXG4gICAgICAgIGZpbGVzLFxuICAgICAgICByZXN1bHRzLFxuICAgICAgICB1cGxvYWRzQXNzZW1ibGllcyxcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgLy8gU2V0IHVwIHRoZSBBc3NlbWJseSBpbnN0YW5jZXMgYW5kIEFzc2VtYmx5V2F0Y2hlcnMgZm9yIGV4aXN0aW5nIEFzc2VtYmxpZXMuXG4gICAgY29uc3QgcmVzdG9yZUFzc2VtYmxpZXMgPSAoKSA9PiB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2hhZG93XG4gICAgICBjb25zdCB7IGFzc2VtYmxpZXMsIHVwbG9hZHNBc3NlbWJsaWVzIH0gPSB0aGlzLmdldFBsdWdpblN0YXRlKClcblxuICAgICAgLy8gU2V0IHVwIHRoZSBhc3NlbWJseSB3YXRjaGVycyBhZ2FpbiBmb3IgYWxsIHRoZSBvbmdvaW5nIHVwbG9hZHMuXG4gICAgICBPYmplY3Qua2V5cyh1cGxvYWRzQXNzZW1ibGllcykuZm9yRWFjaCgodXBsb2FkSUQpID0+IHtcbiAgICAgICAgY29uc3QgYXNzZW1ibHlJRHMgPSB1cGxvYWRzQXNzZW1ibGllc1t1cGxvYWRJRF1cbiAgICAgICAgY29uc3QgZmlsZUlEc0luVXBsb2FkID0gYXNzZW1ibHlJRHMuZmxhdE1hcCgoYXNzZW1ibHlJRCkgPT4ge1xuICAgICAgICAgIHJldHVybiB0aGlzLmdldEFzc2VtYmx5RmlsZXMoYXNzZW1ibHlJRCkubWFwKChmaWxlKSA9PiBmaWxlLmlkKVxuICAgICAgICB9KVxuICAgICAgICB0aGlzLiNjcmVhdGVBc3NlbWJseVdhdGNoZXIoYXNzZW1ibHlJRHMsIGZpbGVJRHNJblVwbG9hZCwgdXBsb2FkSUQpXG4gICAgICB9KVxuXG4gICAgICBjb25zdCBhbGxBc3NlbWJseUlEcyA9IE9iamVjdC5rZXlzKGFzc2VtYmxpZXMpXG4gICAgICBhbGxBc3NlbWJseUlEcy5mb3JFYWNoKChpZCkgPT4ge1xuICAgICAgICBjb25zdCBhc3NlbWJseSA9IG5ldyBBc3NlbWJseShhc3NlbWJsaWVzW2lkXSlcbiAgICAgICAgdGhpcy4jY29ubmVjdEFzc2VtYmx5KGFzc2VtYmx5KVxuICAgICAgfSlcbiAgICB9XG5cbiAgICAvLyBGb3JjZS11cGRhdGUgYWxsIEFzc2VtYmxpZXMgdG8gY2hlY2sgZm9yIG1pc3NlZCBldmVudHMuXG4gICAgY29uc3QgdXBkYXRlQXNzZW1ibGllcyA9ICgpID0+IHtcbiAgICAgIGNvbnN0IHsgYXNzZW1ibGllcyB9ID0gdGhpcy5nZXRQbHVnaW5TdGF0ZSgpXG4gICAgICByZXR1cm4gUHJvbWlzZS5hbGwoXG4gICAgICAgIE9iamVjdC5rZXlzKGFzc2VtYmxpZXMpLm1hcCgoaWQpID0+IHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5hY3RpdmVBc3NlbWJsaWVzW2lkXS51cGRhdGUoKVxuICAgICAgICB9KSxcbiAgICAgIClcbiAgICB9XG5cbiAgICAvLyBSZXN0b3JlIGFsbCBBc3NlbWJseSBzdGF0ZS5cbiAgICB0aGlzLnJlc3RvcmVkID0gUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiB7XG4gICAgICByZXN0b3JlU3RhdGUocHJldmlvdXNBc3NlbWJsaWVzKVxuICAgICAgcmVzdG9yZUFzc2VtYmxpZXMoKVxuICAgICAgcmV0dXJuIHVwZGF0ZUFzc2VtYmxpZXMoKVxuICAgIH0pXG5cbiAgICB0aGlzLnJlc3RvcmVkLnRoZW4oKCkgPT4ge1xuICAgICAgdGhpcy5yZXN0b3JlZCA9IG51bGxcbiAgICB9KVxuICB9XG5cbiAgI2Nvbm5lY3RBc3NlbWJseSAoYXNzZW1ibHkpIHtcbiAgICBjb25zdCB7IHN0YXR1cyB9ID0gYXNzZW1ibHlcbiAgICBjb25zdCBpZCA9IHN0YXR1cy5hc3NlbWJseV9pZFxuICAgIHRoaXMuYWN0aXZlQXNzZW1ibGllc1tpZF0gPSBhc3NlbWJseVxuXG4gICAgLy8gU3luYyBsb2NhbCBgYXNzZW1ibGllc2Agc3RhdGVcbiAgICBhc3NlbWJseS5vbignc3RhdHVzJywgKG5ld1N0YXR1cykgPT4ge1xuICAgICAgY29uc3QgeyBhc3NlbWJsaWVzIH0gPSB0aGlzLmdldFBsdWdpblN0YXRlKClcbiAgICAgIHRoaXMuc2V0UGx1Z2luU3RhdGUoe1xuICAgICAgICBhc3NlbWJsaWVzOiB7XG4gICAgICAgICAgLi4uYXNzZW1ibGllcyxcbiAgICAgICAgICBbaWRdOiBuZXdTdGF0dXMsXG4gICAgICAgIH0sXG4gICAgICB9KVxuICAgIH0pXG5cbiAgICBhc3NlbWJseS5vbigndXBsb2FkJywgKGZpbGUpID0+IHtcbiAgICAgIHRoaXMuI29uRmlsZVVwbG9hZENvbXBsZXRlKGlkLCBmaWxlKVxuICAgIH0pXG4gICAgYXNzZW1ibHkub24oJ2Vycm9yJywgKGVycm9yKSA9PiB7XG4gICAgICBlcnJvci5hc3NlbWJseSA9IGFzc2VtYmx5LnN0YXR1cyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICB0aGlzLnVwcHkuZW1pdCgndHJhbnNsb2FkaXQ6YXNzZW1ibHktZXJyb3InLCBhc3NlbWJseS5zdGF0dXMsIGVycm9yKVxuICAgIH0pXG5cbiAgICBhc3NlbWJseS5vbignZXhlY3V0aW5nJywgKCkgPT4ge1xuICAgICAgdGhpcy51cHB5LmVtaXQoJ3RyYW5zbG9hZGl0OmFzc2VtYmx5LWV4ZWN1dGluZycsIGFzc2VtYmx5LnN0YXR1cylcbiAgICB9KVxuXG4gICAgaWYgKHRoaXMub3B0cy53YWl0Rm9yRW5jb2RpbmcpIHtcbiAgICAgIGFzc2VtYmx5Lm9uKCdyZXN1bHQnLCAoc3RlcE5hbWUsIHJlc3VsdCkgPT4ge1xuICAgICAgICB0aGlzLiNvblJlc3VsdChpZCwgc3RlcE5hbWUsIHJlc3VsdClcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgaWYgKHRoaXMub3B0cy53YWl0Rm9yRW5jb2RpbmcpIHtcbiAgICAgIGFzc2VtYmx5Lm9uKCdmaW5pc2hlZCcsICgpID0+IHtcbiAgICAgICAgdGhpcy4jb25Bc3NlbWJseUZpbmlzaGVkKGFzc2VtYmx5LnN0YXR1cylcbiAgICAgIH0pXG4gICAgfSBlbHNlIGlmICh0aGlzLm9wdHMud2FpdEZvck1ldGFkYXRhKSB7XG4gICAgICBhc3NlbWJseS5vbignbWV0YWRhdGEnLCAoKSA9PiB7XG4gICAgICAgIHRoaXMuI29uQXNzZW1ibHlGaW5pc2hlZChhc3NlbWJseS5zdGF0dXMpXG4gICAgICB9KVxuICAgIH1cblxuICAgIC8vIE5vIG5lZWQgdG8gY29ubmVjdCB0byB0aGUgc29ja2V0IGlmIHRoZSBBc3NlbWJseSBoYXMgY29tcGxldGVkIGJ5IG5vdy5cbiAgICBpZiAoYXNzZW1ibHkub2sgPT09ICdBU1NFTUJMWV9DT01QTEVURScpIHtcbiAgICAgIHJldHVybiBhc3NlbWJseVxuICAgIH1cblxuICAgIGFzc2VtYmx5LmNvbm5lY3QoKVxuICAgIHJldHVybiBhc3NlbWJseVxuICB9XG5cbiAgI3ByZXBhcmVVcGxvYWQgPSAoZmlsZUlEcywgdXBsb2FkSUQpID0+IHtcbiAgICAvLyBPbmx5IHVzZSBmaWxlcyB3aXRob3V0IGVycm9yc1xuICAgIGNvbnN0IGZpbHRlcmVkRmlsZUlEcyA9IGZpbGVJRHMuZmlsdGVyKChmaWxlKSA9PiAhZmlsZS5lcnJvcilcblxuICAgIGNvbnN0IGZpbGVzID0gZmlsdGVyZWRGaWxlSURzLm1hcChmaWxlSUQgPT4ge1xuICAgICAgY29uc3QgZmlsZSA9IHRoaXMudXBweS5nZXRGaWxlKGZpbGVJRClcbiAgICAgIHRoaXMudXBweS5lbWl0KCdwcmVwcm9jZXNzLXByb2dyZXNzJywgZmlsZSwge1xuICAgICAgICBtb2RlOiAnaW5kZXRlcm1pbmF0ZScsXG4gICAgICAgIG1lc3NhZ2U6IHRoaXMuaTE4bignY3JlYXRpbmdBc3NlbWJseScpLFxuICAgICAgfSlcbiAgICAgIHJldHVybiBmaWxlXG4gICAgfSlcblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zaGFkb3dcbiAgICBjb25zdCBjcmVhdGVBc3NlbWJseSA9IGFzeW5jICh7IGZpbGVJRHMsIG9wdGlvbnMgfSkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgYXNzZW1ibHkgPSBhd2FpdCB0aGlzLiNjcmVhdGVBc3NlbWJseShmaWxlSURzLCB1cGxvYWRJRCwgb3B0aW9ucylcbiAgICAgICAgaWYgKHRoaXMub3B0cy5pbXBvcnRGcm9tVXBsb2FkVVJMcykge1xuICAgICAgICAgIGF3YWl0IHRoaXMuI3Jlc2VydmVGaWxlcyhhc3NlbWJseSwgZmlsZUlEcylcbiAgICAgICAgfVxuICAgICAgICBmaWxlSURzLmZvckVhY2goKGZpbGVJRCkgPT4ge1xuICAgICAgICAgIGNvbnN0IGZpbGUgPSB0aGlzLnVwcHkuZ2V0RmlsZShmaWxlSUQpXG4gICAgICAgICAgdGhpcy51cHB5LmVtaXQoJ3ByZXByb2Nlc3MtY29tcGxldGUnLCBmaWxlKVxuICAgICAgICB9KVxuICAgICAgICByZXR1cm4gYXNzZW1ibHlcbiAgICAgIH0gY2F0Y2ggKGVycikgIHtcbiAgICAgICAgZmlsZUlEcy5mb3JFYWNoKChmaWxlSUQpID0+IHtcbiAgICAgICAgICBjb25zdCBmaWxlID0gdGhpcy51cHB5LmdldEZpbGUoZmlsZUlEKVxuICAgICAgICAgIC8vIENsZWFyIHByZXByb2Nlc3Npbmcgc3RhdGUgd2hlbiB0aGUgQXNzZW1ibHkgY291bGQgbm90IGJlIGNyZWF0ZWQsXG4gICAgICAgICAgLy8gb3RoZXJ3aXNlIHRoZSBVSSBnZXRzIGNvbmZ1c2VkIGFib3V0IHRoZSBsaW5nZXJpbmcgcHJvZ3Jlc3Mga2V5c1xuICAgICAgICAgIHRoaXMudXBweS5lbWl0KCdwcmVwcm9jZXNzLWNvbXBsZXRlJywgZmlsZSlcbiAgICAgICAgICB0aGlzLnVwcHkuZW1pdCgndXBsb2FkLWVycm9yJywgZmlsZSwgZXJyKVxuICAgICAgICB9KVxuICAgICAgICB0aHJvdyBlcnJcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCB7IHVwbG9hZHNBc3NlbWJsaWVzIH0gPSB0aGlzLmdldFBsdWdpblN0YXRlKClcbiAgICB0aGlzLnNldFBsdWdpblN0YXRlKHtcbiAgICAgIHVwbG9hZHNBc3NlbWJsaWVzOiB7XG4gICAgICAgIC4uLnVwbG9hZHNBc3NlbWJsaWVzLFxuICAgICAgICBbdXBsb2FkSURdOiBbXSxcbiAgICAgIH0sXG4gICAgfSlcblxuICAgIGNvbnN0IGFzc2VtYmx5T3B0aW9ucyA9IG5ldyBBc3NlbWJseU9wdGlvbnMoZmlsZXMsIHRoaXMub3B0cylcblxuICAgIHJldHVybiBhc3NlbWJseU9wdGlvbnMuYnVpbGQoKVxuICAgICAgLnRoZW4oKGFzc2VtYmxpZXMpID0+IFByb21pc2UuYWxsKGFzc2VtYmxpZXMubWFwKGNyZWF0ZUFzc2VtYmx5KSkpXG4gICAgICAudGhlbigoY3JlYXRlZEFzc2VtYmxpZXMpID0+IHtcbiAgICAgICAgY29uc3QgYXNzZW1ibHlJRHMgPSBjcmVhdGVkQXNzZW1ibGllcy5tYXAoYXNzZW1ibHkgPT4gYXNzZW1ibHkuc3RhdHVzLmFzc2VtYmx5X2lkKVxuICAgICAgICB0aGlzLiNjcmVhdGVBc3NlbWJseVdhdGNoZXIoYXNzZW1ibHlJRHMsIGZpbHRlcmVkRmlsZUlEcywgdXBsb2FkSUQpXG4gICAgICAgIHJldHVybiBQcm9taXNlLmFsbChjcmVhdGVkQXNzZW1ibGllcy5tYXAoYXNzZW1ibHkgPT4gdGhpcy4jY29ubmVjdEFzc2VtYmx5KGFzc2VtYmx5KSkpXG4gICAgICB9KVxuICAgICAgLy8gSWYgc29tZXRoaW5nIHdlbnQgd3JvbmcgYmVmb3JlIGFueSBBc3NlbWJsaWVzIGNvdWxkIGJlIGNyZWF0ZWQsXG4gICAgICAvLyBjbGVhciBhbGwgcHJvY2Vzc2luZyBzdGF0ZS5cbiAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgIGZpbGVzLmZvckVhY2goKGZpbGUpID0+IHtcbiAgICAgICAgICB0aGlzLnVwcHkuZW1pdCgncHJlcHJvY2Vzcy1jb21wbGV0ZScsIGZpbGUpXG4gICAgICAgICAgdGhpcy51cHB5LmVtaXQoJ3VwbG9hZC1lcnJvcicsIGZpbGUsIGVycilcbiAgICAgICAgfSlcbiAgICAgICAgdGhyb3cgZXJyXG4gICAgICB9KVxuICB9XG5cbiAgI2FmdGVyVXBsb2FkID0gKGZpbGVJRHMsIHVwbG9hZElEKSA9PiB7XG4gICAgY29uc3QgZmlsZXMgPSBmaWxlSURzLm1hcChmaWxlSUQgPT4gdGhpcy51cHB5LmdldEZpbGUoZmlsZUlEKSlcbiAgICAvLyBPbmx5IHVzZSBmaWxlcyB3aXRob3V0IGVycm9yc1xuICAgIGNvbnN0IGZpbHRlcmVkRmlsZUlEcyA9IGZpbGVzLmZpbHRlcigoZmlsZSkgPT4gIWZpbGUuZXJyb3IpLm1hcChmaWxlID0+IGZpbGUuaWQpXG5cbiAgICBjb25zdCBzdGF0ZSA9IHRoaXMuZ2V0UGx1Z2luU3RhdGUoKVxuXG4gICAgLy8gSWYgd2UncmUgc3RpbGwgcmVzdG9yaW5nIHN0YXRlLCB3YWl0IGZvciB0aGF0IHRvIGJlIGRvbmUuXG4gICAgaWYgKHRoaXMucmVzdG9yZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlc3RvcmVkLnRoZW4oKCkgPT4ge1xuICAgICAgICByZXR1cm4gdGhpcy4jYWZ0ZXJVcGxvYWQoZmlsdGVyZWRGaWxlSURzLCB1cGxvYWRJRClcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgY29uc3QgYXNzZW1ibHlJRHMgPSBzdGF0ZS51cGxvYWRzQXNzZW1ibGllc1t1cGxvYWRJRF1cblxuICAgIGNvbnN0IGNsb3NlU29ja2V0Q29ubmVjdGlvbnMgPSAoKSA9PiB7XG4gICAgICBhc3NlbWJseUlEcy5mb3JFYWNoKChhc3NlbWJseUlEKSA9PiB7XG4gICAgICAgIGNvbnN0IGFzc2VtYmx5ID0gdGhpcy5hY3RpdmVBc3NlbWJsaWVzW2Fzc2VtYmx5SURdXG4gICAgICAgIGFzc2VtYmx5LmNsb3NlKClcbiAgICAgICAgZGVsZXRlIHRoaXMuYWN0aXZlQXNzZW1ibGllc1thc3NlbWJseUlEXVxuICAgICAgfSlcbiAgICB9XG5cbiAgICAvLyBJZiB3ZSBkb24ndCBoYXZlIHRvIHdhaXQgZm9yIGVuY29kaW5nIG1ldGFkYXRhIG9yIHJlc3VsdHMsIHdlIGNhbiBjbG9zZVxuICAgIC8vIHRoZSBzb2NrZXQgaW1tZWRpYXRlbHkgYW5kIGZpbmlzaCB0aGUgdXBsb2FkLlxuICAgIGlmICghdGhpcy4jc2hvdWxkV2FpdEFmdGVyVXBsb2FkKCkpIHtcbiAgICAgIGNsb3NlU29ja2V0Q29ubmVjdGlvbnMoKVxuICAgICAgY29uc3QgYXNzZW1ibGllcyA9IGFzc2VtYmx5SURzLm1hcCgoaWQpID0+IHRoaXMuZ2V0QXNzZW1ibHkoaWQpKVxuICAgICAgdGhpcy51cHB5LmFkZFJlc3VsdERhdGEodXBsb2FkSUQsIHsgdHJhbnNsb2FkaXQ6IGFzc2VtYmxpZXMgfSlcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKVxuICAgIH1cblxuICAgIC8vIElmIG5vIEFzc2VtYmxpZXMgd2VyZSBjcmVhdGVkIGZvciB0aGlzIHVwbG9hZCwgd2UgYWxzbyBkbyBub3QgaGF2ZSB0byB3YWl0LlxuICAgIC8vIFRoZXJlJ3MgYWxzbyBubyBzb2NrZXRzIG9yIGFueXRoaW5nIHRvIGNsb3NlLCBzbyBqdXN0IHJldHVybiBpbW1lZGlhdGVseS5cbiAgICBpZiAoYXNzZW1ibHlJRHMubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aGlzLnVwcHkuYWRkUmVzdWx0RGF0YSh1cGxvYWRJRCwgeyB0cmFuc2xvYWRpdDogW10gfSlcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKVxuICAgIH1cblxuICAgIGNvbnN0IGluY29tcGxldGVGaWxlcyA9IGZpbGVzLmZpbHRlcihmaWxlID0+ICFoYXNQcm9wZXJ0eSh0aGlzLmNvbXBsZXRlZEZpbGVzLCBmaWxlLmlkKSlcbiAgICBpbmNvbXBsZXRlRmlsZXMuZm9yRWFjaCgoZmlsZSkgPT4ge1xuICAgICAgdGhpcy51cHB5LmVtaXQoJ3Bvc3Rwcm9jZXNzLXByb2dyZXNzJywgZmlsZSwge1xuICAgICAgICBtb2RlOiAnaW5kZXRlcm1pbmF0ZScsXG4gICAgICAgIG1lc3NhZ2U6IHRoaXMuaTE4bignZW5jb2RpbmcnKSxcbiAgICAgIH0pXG4gICAgfSlcblxuICAgIGNvbnN0IHdhdGNoZXIgPSB0aGlzLmFzc2VtYmx5V2F0Y2hlcnNbdXBsb2FkSURdXG4gICAgcmV0dXJuIHdhdGNoZXIucHJvbWlzZS50aGVuKCgpID0+IHtcbiAgICAgIGNsb3NlU29ja2V0Q29ubmVjdGlvbnMoKVxuXG4gICAgICBjb25zdCBhc3NlbWJsaWVzID0gYXNzZW1ibHlJRHMubWFwKChpZCkgPT4gdGhpcy5nZXRBc3NlbWJseShpZCkpXG5cbiAgICAgIC8vIFJlbW92ZSB0aGUgQXNzZW1ibHkgSUQgbGlzdCBmb3IgdGhpcyB1cGxvYWQsXG4gICAgICAvLyBpdCdzIG5vIGxvbmdlciBnb2luZyB0byBiZSB1c2VkIGFueXdoZXJlLlxuICAgICAgY29uc3QgdXBsb2Fkc0Fzc2VtYmxpZXMgPSB7IC4uLnRoaXMuZ2V0UGx1Z2luU3RhdGUoKS51cGxvYWRzQXNzZW1ibGllcyB9XG4gICAgICBkZWxldGUgdXBsb2Fkc0Fzc2VtYmxpZXNbdXBsb2FkSURdXG4gICAgICB0aGlzLnNldFBsdWdpblN0YXRlKHsgdXBsb2Fkc0Fzc2VtYmxpZXMgfSlcblxuICAgICAgdGhpcy51cHB5LmFkZFJlc3VsdERhdGEodXBsb2FkSUQsIHtcbiAgICAgICAgdHJhbnNsb2FkaXQ6IGFzc2VtYmxpZXMsXG4gICAgICB9KVxuICAgIH0pXG4gIH1cblxuICAjb25FcnJvciA9IChlcnIgPSBudWxsLCB1cGxvYWRJRCkgPT4ge1xuICAgIGNvbnN0IHN0YXRlID0gdGhpcy5nZXRQbHVnaW5TdGF0ZSgpXG4gICAgY29uc3QgYXNzZW1ibHlJRHMgPSBzdGF0ZS51cGxvYWRzQXNzZW1ibGllc1t1cGxvYWRJRF1cblxuICAgIGFzc2VtYmx5SURzPy5mb3JFYWNoKChhc3NlbWJseUlEKSA9PiB7XG4gICAgICBpZiAodGhpcy5hY3RpdmVBc3NlbWJsaWVzW2Fzc2VtYmx5SURdKSB7XG4gICAgICAgIHRoaXMuYWN0aXZlQXNzZW1ibGllc1thc3NlbWJseUlEXS5jbG9zZSgpXG4gICAgICB9XG4gICAgfSlcbiAgICB0aGlzLmNsaWVudC5zdWJtaXRFcnJvcihlcnIpXG4gICAgICAvLyBpZiB3ZSBjYW4ndCByZXBvcnQgdGhlIGVycm9yIHRoYXQgc3Vja3NcbiAgICAgIC5jYXRjaChzZW5kRXJyb3JUb0NvbnNvbGUoZXJyKSlcbiAgfVxuXG4gICNvblR1c0Vycm9yID0gKGVycikgPT4ge1xuICAgIGlmIChlcnIgJiYgL150dXM6IC8udGVzdChlcnIubWVzc2FnZSkpIHtcbiAgICAgIGNvbnN0IHhociA9IGVyci5vcmlnaW5hbFJlcXVlc3QgPyBlcnIub3JpZ2luYWxSZXF1ZXN0LmdldFVuZGVybHlpbmdPYmplY3QoKSA6IG51bGxcbiAgICAgIGNvbnN0IHVybCA9IHhociAmJiB4aHIucmVzcG9uc2VVUkwgPyB4aHIucmVzcG9uc2VVUkwgOiBudWxsXG4gICAgICB0aGlzLmNsaWVudC5zdWJtaXRFcnJvcihlcnIsIHsgdXJsLCB0eXBlOiAnVFVTX0VSUk9SJyB9KVxuICAgICAgICAvLyBpZiB3ZSBjYW4ndCByZXBvcnQgdGhlIGVycm9yIHRoYXQgc3Vja3NcbiAgICAgICAgLmNhdGNoKHNlbmRFcnJvclRvQ29uc29sZShlcnIpKVxuICAgIH1cbiAgfVxuXG4gIGluc3RhbGwgKCkge1xuICAgIHRoaXMudXBweS5hZGRQcmVQcm9jZXNzb3IodGhpcy4jcHJlcGFyZVVwbG9hZClcbiAgICB0aGlzLnVwcHkuYWRkUG9zdFByb2Nlc3Nvcih0aGlzLiNhZnRlclVwbG9hZClcblxuICAgIC8vIFdlIG1heSBuZWVkIHRvIGNsb3NlIHNvY2tldC5pbyBjb25uZWN0aW9ucyBvbiBlcnJvci5cbiAgICB0aGlzLnVwcHkub24oJ2Vycm9yJywgdGhpcy4jb25FcnJvcilcblxuICAgIC8vIEhhbmRsZSBjYW5jZWxsYXRpb24uXG4gICAgdGhpcy51cHB5Lm9uKCdjYW5jZWwtYWxsJywgdGhpcy4jb25DYW5jZWxBbGwpXG5cbiAgICAvLyBGb3IgZXJyb3IgcmVwb3J0aW5nLlxuICAgIHRoaXMudXBweS5vbigndXBsb2FkLWVycm9yJywgdGhpcy4jb25UdXNFcnJvcilcblxuICAgIGlmICh0aGlzLm9wdHMuaW1wb3J0RnJvbVVwbG9hZFVSTHMpIHtcbiAgICAgIC8vIE5vIHVwbG9hZGVyIG5lZWRlZCB3aGVuIGltcG9ydGluZzsgaW5zdGVhZCB3ZSB0YWtlIHRoZSB1cGxvYWQgVVJMIGZyb20gYW4gZXhpc3RpbmcgdXBsb2FkZXIuXG4gICAgICB0aGlzLnVwcHkub24oJ3VwbG9hZC1zdWNjZXNzJywgdGhpcy4jb25GaWxlVXBsb2FkVVJMQXZhaWxhYmxlKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnVwcHkudXNlKFR1cywge1xuICAgICAgICAvLyBEaXNhYmxlIHR1cy1qcy1jbGllbnQgZmluZ2VycHJpbnRpbmcsIG90aGVyd2lzZSB1cGxvYWRpbmcgdGhlIHNhbWUgZmlsZSBhdCBkaWZmZXJlbnQgdGltZXNcbiAgICAgICAgLy8gd2lsbCB1cGxvYWQgdG8gYW4gb3V0ZGF0ZWQgQXNzZW1ibHksIGFuZCB3ZSB3b24ndCBnZXQgc29ja2V0IGV2ZW50cyBmb3IgaXQuXG4gICAgICAgIC8vXG4gICAgICAgIC8vIFRvIHJlc3VtZSBhIFRyYW5zbG9hZGl0IHVwbG9hZCwgd2UgbmVlZCB0byByZWNvbm5lY3QgdG8gdGhlIHdlYnNvY2tldCwgYW5kIHRoZSBzdGF0ZSB0aGF0J3NcbiAgICAgICAgLy8gcmVxdWlyZWQgdG8gZG8gdGhhdCBpcyBub3Qgc2F2ZWQgYnkgdHVzLWpzLWNsaWVudCdzIGZpbmdlcnByaW50aW5nLiBXZSBuZWVkIHRoZSB0dXMgVVJMLFxuICAgICAgICAvLyB0aGUgQXNzZW1ibHkgVVJMLCBhbmQgdGhlIFdlYlNvY2tldCBVUkwsIGF0IGxlYXN0LiBXZSBhbHNvIG5lZWQgdG8ga25vdyBfYWxsXyB0aGUgZmlsZXMgdGhhdFxuICAgICAgICAvLyB3ZXJlIGFkZGVkIHRvIHRoZSBBc3NlbWJseSwgc28gd2UgY2FuIHByb3Blcmx5IGNvbXBsZXRlIGl0LiBBbGwgdGhhdCBzdGF0ZSBpcyBoYW5kbGVkIGJ5XG4gICAgICAgIC8vIEdvbGRlbiBSZXRyaWV2ZXIuIFNvLCBHb2xkZW4gUmV0cmlldmVyIGlzIHJlcXVpcmVkIHRvIGRvIHJlc3VtYWJpbGl0eSB3aXRoIHRoZSBUcmFuc2xvYWRpdCBwbHVnaW4sXG4gICAgICAgIC8vIGFuZCB3ZSBkaXNhYmxlIFR1cydzIGRlZmF1bHQgcmVzdW1lIGltcGxlbWVudGF0aW9uIHRvIHByZXZlbnQgYmFkIGJlaGF2aW91cnMuXG4gICAgICAgIHN0b3JlRmluZ2VycHJpbnRGb3JSZXN1bWluZzogZmFsc2UsXG4gICAgICAgIC8vIERpc2FibGUgQ29tcGFuaW9uJ3MgcmV0cnkgb3B0aW1pc2F0aW9uOyB3ZSBuZWVkIHRvIGNoYW5nZSB0aGUgZW5kcG9pbnQgb24gcmV0cnlcbiAgICAgICAgLy8gc28gaXQgY2FuJ3QganVzdCByZXVzZSB0aGUgc2FtZSB0dXMuVXBsb2FkIGluc3RhbmNlIHNlcnZlci1zaWRlLlxuICAgICAgICB1c2VGYXN0UmVtb3RlUmV0cnk6IGZhbHNlLFxuICAgICAgICAvLyBPbmx5IHNlbmQgQXNzZW1ibHkgbWV0YWRhdGEgdG8gdGhlIHR1cyBlbmRwb2ludC5cbiAgICAgICAgbWV0YUZpZWxkczogWydhc3NlbWJseV91cmwnLCAnZmlsZW5hbWUnLCAnZmllbGRuYW1lJ10sXG4gICAgICAgIC8vIFBhc3MgdGhlIGxpbWl0IG9wdGlvbiB0byBAdXBweS90dXNcbiAgICAgICAgbGltaXQ6IHRoaXMub3B0cy5saW1pdCxcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgdGhpcy51cHB5Lm9uKCdyZXN0b3JlOmdldC1kYXRhJywgdGhpcy4jZ2V0UGVyc2lzdGVudERhdGEpXG4gICAgdGhpcy51cHB5Lm9uKCdyZXN0b3JlZCcsIHRoaXMuI29uUmVzdG9yZWQpXG5cbiAgICB0aGlzLnNldFBsdWdpblN0YXRlKHtcbiAgICAgIC8vIENvbnRhaW5zIEFzc2VtYmx5IHN0YXR1cyBvYmplY3RzLCBpbmRleGVkIGJ5IHRoZWlyIElELlxuICAgICAgYXNzZW1ibGllczoge30sXG4gICAgICAvLyBDb250YWlucyBhcnJheXMgb2YgQXNzZW1ibHkgSURzLCBpbmRleGVkIGJ5IHRoZSB1cGxvYWQgSUQgdGhhdCB0aGV5IGJlbG9uZyB0by5cbiAgICAgIHVwbG9hZHNBc3NlbWJsaWVzOiB7fSxcbiAgICAgIC8vIENvbnRhaW5zIGZpbGUgZGF0YSBmcm9tIFRyYW5zbG9hZGl0LCBpbmRleGVkIGJ5IHRoZWlyIFRyYW5zbG9hZGl0LWFzc2lnbmVkIElELlxuICAgICAgZmlsZXM6IHt9LFxuICAgICAgLy8gQ29udGFpbnMgcmVzdWx0IGRhdGEgZnJvbSBUcmFuc2xvYWRpdC5cbiAgICAgIHJlc3VsdHM6IFtdLFxuICAgIH0pXG5cbiAgICAvLyBXZSBjYW5ub3QgY2FuY2VsIGluZGl2aWR1YWwgZmlsZXMgYmVjYXVzZSBBc3NlbWJsaWVzIHRlbmQgdG8gY29udGFpbiBtYW55IGZpbGVzLlxuICAgIGNvbnN0IHsgY2FwYWJpbGl0aWVzIH0gPSB0aGlzLnVwcHkuZ2V0U3RhdGUoKVxuICAgIHRoaXMudXBweS5zZXRTdGF0ZSh7XG4gICAgICBjYXBhYmlsaXRpZXM6IHtcbiAgICAgICAgLi4uY2FwYWJpbGl0aWVzLFxuICAgICAgICBpbmRpdmlkdWFsQ2FuY2VsbGF0aW9uOiBmYWxzZSxcbiAgICAgIH0sXG4gICAgfSlcbiAgfVxuXG4gIHVuaW5zdGFsbCAoKSB7XG4gICAgdGhpcy51cHB5LnJlbW92ZVByZVByb2Nlc3Nvcih0aGlzLiNwcmVwYXJlVXBsb2FkKVxuICAgIHRoaXMudXBweS5yZW1vdmVQb3N0UHJvY2Vzc29yKHRoaXMuI2FmdGVyVXBsb2FkKVxuICAgIHRoaXMudXBweS5vZmYoJ2Vycm9yJywgdGhpcy4jb25FcnJvcilcblxuICAgIGlmICh0aGlzLm9wdHMuaW1wb3J0RnJvbVVwbG9hZFVSTHMpIHtcbiAgICAgIHRoaXMudXBweS5vZmYoJ3VwbG9hZC1zdWNjZXNzJywgdGhpcy4jb25GaWxlVXBsb2FkVVJMQXZhaWxhYmxlKVxuICAgIH1cblxuICAgIGNvbnN0IHsgY2FwYWJpbGl0aWVzIH0gPSB0aGlzLnVwcHkuZ2V0U3RhdGUoKVxuICAgIHRoaXMudXBweS5zZXRTdGF0ZSh7XG4gICAgICBjYXBhYmlsaXRpZXM6IHtcbiAgICAgICAgLi4uY2FwYWJpbGl0aWVzLFxuICAgICAgICBpbmRpdmlkdWFsQ2FuY2VsbGF0aW9uOiB0cnVlLFxuICAgICAgfSxcbiAgICB9KVxuICB9XG5cbiAgZ2V0QXNzZW1ibHkgKGlkKSB7XG4gICAgY29uc3QgeyBhc3NlbWJsaWVzIH0gPSB0aGlzLmdldFBsdWdpblN0YXRlKClcbiAgICByZXR1cm4gYXNzZW1ibGllc1tpZF1cbiAgfVxuXG4gIGdldEFzc2VtYmx5RmlsZXMgKGFzc2VtYmx5SUQpIHtcbiAgICByZXR1cm4gdGhpcy51cHB5LmdldEZpbGVzKCkuZmlsdGVyKChmaWxlKSA9PiB7XG4gICAgICByZXR1cm4gZmlsZSAmJiBmaWxlLnRyYW5zbG9hZGl0ICYmIGZpbGUudHJhbnNsb2FkaXQuYXNzZW1ibHkgPT09IGFzc2VtYmx5SURcbiAgICB9KVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzLkNPTVBBTklPTiA9IENPTVBBTklPTlxubW9kdWxlLmV4cG9ydHMuQ09NUEFOSU9OX1BBVFRFUk4gPSBBTExPV0VEX0NPTVBBTklPTl9QQVRURVJOXG4iLCJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgc3RyaW5nczoge1xuICAgIC8vIFNob3duIHdoaWxlIEFzc2VtYmxpZXMgYXJlIGJlaW5nIGNyZWF0ZWQgZm9yIGFuIHVwbG9hZC5cbiAgICBjcmVhdGluZ0Fzc2VtYmx5OiAnUHJlcGFyaW5nIHVwbG9hZC4uLicsXG4gICAgLy8gU2hvd24gaWYgYW4gQXNzZW1ibHkgY291bGQgbm90IGJlIGNyZWF0ZWQuXG4gICAgY3JlYXRpbmdBc3NlbWJseUZhaWxlZDogJ1RyYW5zbG9hZGl0OiBDb3VsZCBub3QgY3JlYXRlIEFzc2VtYmx5JyxcbiAgICAvLyBTaG93biBhZnRlciB1cGxvYWRzIGhhdmUgc3VjY2VlZGVkLCBidXQgd2hlbiB0aGUgQXNzZW1ibHkgaXMgc3RpbGwgZXhlY3V0aW5nLlxuICAgIC8vIFRoaXMgb25seSBzaG93cyBpZiBgd2FpdEZvck1ldGFkYXRhYCBvciBgd2FpdEZvckVuY29kaW5nYCB3YXMgZW5hYmxlZC5cbiAgICBlbmNvZGluZzogJ0VuY29kaW5nLi4uJyxcbiAgfSxcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcGFyc2VVcmwgKHVybCkge1xuICBjb25zdCBzY2hlbWUgPSAvXlxcdys6XFwvXFwvLy5leGVjKHVybClcbiAgbGV0IGkgPSAwXG4gIGlmIChzY2hlbWUpIHtcbiAgICBpID0gc2NoZW1lWzBdLmxlbmd0aCArIDFcbiAgfVxuICBjb25zdCBzbGFzaEluZGV4ID0gdXJsLmluZGV4T2YoJy8nLCBpKVxuICBpZiAoc2xhc2hJbmRleCA9PT0gLTEpIHtcbiAgICByZXR1cm4ge1xuICAgICAgb3JpZ2luOiB1cmwsXG4gICAgICBwYXRobmFtZTogJy8nLFxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgb3JpZ2luOiB1cmwuc2xpY2UoMCwgc2xhc2hJbmRleCksXG4gICAgcGF0aG5hbWU6IHVybC5zbGljZShzbGFzaEluZGV4KSxcbiAgfVxufVxuIiwiY29uc3QgdHVzID0gcmVxdWlyZSgndHVzLWpzLWNsaWVudCcpXG5cbmZ1bmN0aW9uIGlzQ29yZG92YSAoKSB7XG4gIHJldHVybiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiAoXG4gICAgdHlwZW9mIHdpbmRvdy5QaG9uZUdhcCAhPT0gJ3VuZGVmaW5lZCdcbiAgICB8fCB0eXBlb2Ygd2luZG93LkNvcmRvdmEgIT09ICd1bmRlZmluZWQnXG4gICAgfHwgdHlwZW9mIHdpbmRvdy5jb3Jkb3ZhICE9PSAndW5kZWZpbmVkJ1xuICApXG59XG5cbmZ1bmN0aW9uIGlzUmVhY3ROYXRpdmUgKCkge1xuICByZXR1cm4gdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCdcbiAgICAmJiB0eXBlb2YgbmF2aWdhdG9yLnByb2R1Y3QgPT09ICdzdHJpbmcnXG4gICAgJiYgbmF2aWdhdG9yLnByb2R1Y3QudG9Mb3dlckNhc2UoKSA9PT0gJ3JlYWN0bmF0aXZlJ1xufVxuXG4vLyBXZSBvdmVycmlkZSB0dXMgZmluZ2VycHJpbnQgdG8gdXBweeKAmXMgYGZpbGUuaWRgLCBzaW5jZSB0aGUgYGZpbGUuaWRgXG4vLyBub3cgYWxzbyBpbmNsdWRlcyBgcmVsYXRpdmVQYXRoYCBmb3IgZmlsZXMgYWRkZWQgZnJvbSBmb2xkZXJzLlxuLy8gVGhpcyBtZWFucyB5b3UgY2FuIGFkZCAyIGlkZW50aWNhbCBmaWxlcywgaWYgb25lIGlzIGluIGZvbGRlciBhLFxuLy8gdGhlIG90aGVyIGluIGZvbGRlciBiIOKAlCBgYS9maWxlLmpwZ2AgYW5kIGBiL2ZpbGUuanBnYCwgd2hlbiBhZGRlZFxuLy8gdG9nZXRoZXIgd2l0aCBhIGZvbGRlciwgd2lsbCBiZSB0cmVhdGVkIGFzIDIgc2VwYXJhdGUgZmlsZXMuXG4vL1xuLy8gRm9yIFJlYWN0IE5hdGl2ZSBhbmQgQ29yZG92YSwgd2UgbGV0IHR1cy1qcy1jbGllbnTigJlzIGRlZmF1bHRcbi8vIGZpbmdlcnByaW50IGhhbmRsaW5nIHRha2UgY2hhcmdlLlxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXRGaW5nZXJwcmludCAodXBweUZpbGVPYmopIHtcbiAgcmV0dXJuIChmaWxlLCBvcHRpb25zKSA9PiB7XG4gICAgaWYgKGlzQ29yZG92YSgpIHx8IGlzUmVhY3ROYXRpdmUoKSkge1xuICAgICAgcmV0dXJuIHR1cy5kZWZhdWx0T3B0aW9ucy5maW5nZXJwcmludChmaWxlLCBvcHRpb25zKVxuICAgIH1cblxuICAgIGNvbnN0IHVwcHlGaW5nZXJwcmludCA9IFtcbiAgICAgICd0dXMnLFxuICAgICAgdXBweUZpbGVPYmouaWQsXG4gICAgICBvcHRpb25zLmVuZHBvaW50LFxuICAgIF0uam9pbignLScpXG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHVwcHlGaW5nZXJwcmludClcbiAgfVxufVxuIiwiY29uc3QgQmFzZVBsdWdpbiA9IHJlcXVpcmUoJ0B1cHB5L2NvcmUvbGliL0Jhc2VQbHVnaW4nKVxuY29uc3QgdHVzID0gcmVxdWlyZSgndHVzLWpzLWNsaWVudCcpXG5jb25zdCB7IFByb3ZpZGVyLCBSZXF1ZXN0Q2xpZW50LCBTb2NrZXQgfSA9IHJlcXVpcmUoJ0B1cHB5L2NvbXBhbmlvbi1jbGllbnQnKVxuY29uc3QgZW1pdFNvY2tldFByb2dyZXNzID0gcmVxdWlyZSgnQHVwcHkvdXRpbHMvbGliL2VtaXRTb2NrZXRQcm9ncmVzcycpXG5jb25zdCBnZXRTb2NrZXRIb3N0ID0gcmVxdWlyZSgnQHVwcHkvdXRpbHMvbGliL2dldFNvY2tldEhvc3QnKVxuY29uc3Qgc2V0dGxlID0gcmVxdWlyZSgnQHVwcHkvdXRpbHMvbGliL3NldHRsZScpXG5jb25zdCBFdmVudFRyYWNrZXIgPSByZXF1aXJlKCdAdXBweS91dGlscy9saWIvRXZlbnRUcmFja2VyJylcbmNvbnN0IE5ldHdvcmtFcnJvciA9IHJlcXVpcmUoJ0B1cHB5L3V0aWxzL2xpYi9OZXR3b3JrRXJyb3InKVxuY29uc3QgaXNOZXR3b3JrRXJyb3IgPSByZXF1aXJlKCdAdXBweS91dGlscy9saWIvaXNOZXR3b3JrRXJyb3InKVxuY29uc3QgeyBSYXRlTGltaXRlZFF1ZXVlIH0gPSByZXF1aXJlKCdAdXBweS91dGlscy9saWIvUmF0ZUxpbWl0ZWRRdWV1ZScpXG5jb25zdCBoYXNQcm9wZXJ0eSA9IHJlcXVpcmUoJ0B1cHB5L3V0aWxzL2xpYi9oYXNQcm9wZXJ0eScpXG5jb25zdCBnZXRGaW5nZXJwcmludCA9IHJlcXVpcmUoJy4vZ2V0RmluZ2VycHJpbnQnKVxuXG4vKiogQHR5cGVkZWYge2ltcG9ydCgnLi4nKS5UdXNPcHRpb25zfSBUdXNPcHRpb25zICovXG4vKiogQHR5cGVkZWYge2ltcG9ydCgndHVzLWpzLWNsaWVudCcpLlVwbG9hZE9wdGlvbnN9IFJhd1R1c09wdGlvbnMgKi9cbi8qKiBAdHlwZWRlZiB7aW1wb3J0KCdAdXBweS9jb3JlJykuVXBweX0gVXBweSAqL1xuLyoqIEB0eXBlZGVmIHtpbXBvcnQoJ0B1cHB5L2NvcmUnKS5VcHB5RmlsZX0gVXBweUZpbGUgKi9cbi8qKiBAdHlwZWRlZiB7aW1wb3J0KCdAdXBweS9jb3JlJykuRmFpbGVkVXBweUZpbGU8e30+fSBGYWlsZWRVcHB5RmlsZSAqL1xuXG4vKipcbiAqIEV4dHJhY3RlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS90dXMvdHVzLWpzLWNsaWVudC9ibG9iL21hc3Rlci9saWIvdXBsb2FkLmpzI0wxM1xuICogZXhjZXB0ZWQgd2UgcmVtb3ZlZCAnZmluZ2VycHJpbnQnIGtleSB0byBhdm9pZCBhZGRpbmcgbW9yZSBkZXBlbmRlbmNpZXNcbiAqXG4gKiBAdHlwZSB7UmF3VHVzT3B0aW9uc31cbiAqL1xuY29uc3QgdHVzRGVmYXVsdE9wdGlvbnMgPSB7XG4gIGVuZHBvaW50OiAnJyxcblxuICB1cGxvYWRVcmw6IG51bGwsXG4gIG1ldGFkYXRhOiB7fSxcbiAgdXBsb2FkU2l6ZTogbnVsbCxcblxuICBvblByb2dyZXNzOiBudWxsLFxuICBvbkNodW5rQ29tcGxldGU6IG51bGwsXG4gIG9uU3VjY2VzczogbnVsbCxcbiAgb25FcnJvcjogbnVsbCxcblxuICBvdmVycmlkZVBhdGNoTWV0aG9kOiBmYWxzZSxcbiAgaGVhZGVyczoge30sXG4gIGFkZFJlcXVlc3RJZDogZmFsc2UsXG5cbiAgY2h1bmtTaXplOiBJbmZpbml0eSxcbiAgcmV0cnlEZWxheXM6IFswLCAxMDAwLCAzMDAwLCA1MDAwXSxcbiAgcGFyYWxsZWxVcGxvYWRzOiAxLFxuICByZW1vdmVGaW5nZXJwcmludE9uU3VjY2VzczogZmFsc2UsXG4gIHVwbG9hZExlbmd0aERlZmVycmVkOiBmYWxzZSxcbiAgdXBsb2FkRGF0YUR1cmluZ0NyZWF0aW9uOiBmYWxzZSxcbn1cblxuLyoqXG4gKiBUdXMgcmVzdW1hYmxlIGZpbGUgdXBsb2FkZXJcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBjbGFzcyBUdXMgZXh0ZW5kcyBCYXNlUGx1Z2luIHtcbiAgc3RhdGljIFZFUlNJT04gPSByZXF1aXJlKCcuLi9wYWNrYWdlLmpzb24nKS52ZXJzaW9uXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7VXBweX0gdXBweVxuICAgKiBAcGFyYW0ge1R1c09wdGlvbnN9IG9wdHNcbiAgICovXG4gIGNvbnN0cnVjdG9yICh1cHB5LCBvcHRzKSB7XG4gICAgc3VwZXIodXBweSwgb3B0cylcbiAgICB0aGlzLnR5cGUgPSAndXBsb2FkZXInXG4gICAgdGhpcy5pZCA9IHRoaXMub3B0cy5pZCB8fCAnVHVzJ1xuICAgIHRoaXMudGl0bGUgPSAnVHVzJ1xuXG4gICAgLy8gc2V0IGRlZmF1bHQgb3B0aW9uc1xuICAgIGNvbnN0IGRlZmF1bHRPcHRpb25zID0ge1xuICAgICAgdXNlRmFzdFJlbW90ZVJldHJ5OiB0cnVlLFxuICAgICAgbGltaXQ6IDUsXG4gICAgICByZXRyeURlbGF5czogWzAsIDEwMDAsIDMwMDAsIDUwMDBdLFxuICAgICAgd2l0aENyZWRlbnRpYWxzOiBmYWxzZSxcbiAgICB9XG5cbiAgICAvLyBtZXJnZSBkZWZhdWx0IG9wdGlvbnMgd2l0aCB0aGUgb25lcyBzZXQgYnkgdXNlclxuICAgIC8qKiBAdHlwZSB7aW1wb3J0KFwiLi5cIikuVHVzT3B0aW9uc30gKi9cbiAgICB0aGlzLm9wdHMgPSB7IC4uLmRlZmF1bHRPcHRpb25zLCAuLi5vcHRzIH1cblxuICAgIGlmICgnYXV0b1JldHJ5JyBpbiBvcHRzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBgYXV0b1JldHJ5YCBvcHRpb24gd2FzIGRlcHJlY2F0ZWQgYW5kIGhhcyBiZWVuIHJlbW92ZWQuJylcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTaW11bHRhbmVvdXMgdXBsb2FkIGxpbWl0aW5nIGlzIHNoYXJlZCBhY3Jvc3MgYWxsIHVwbG9hZHMgd2l0aCB0aGlzIHBsdWdpbi5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtSYXRlTGltaXRlZFF1ZXVlfVxuICAgICAqL1xuICAgIHRoaXMucmVxdWVzdHMgPSBuZXcgUmF0ZUxpbWl0ZWRRdWV1ZSh0aGlzLm9wdHMubGltaXQpXG5cbiAgICB0aGlzLnVwbG9hZGVycyA9IE9iamVjdC5jcmVhdGUobnVsbClcbiAgICB0aGlzLnVwbG9hZGVyRXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKVxuICAgIHRoaXMudXBsb2FkZXJTb2NrZXRzID0gT2JqZWN0LmNyZWF0ZShudWxsKVxuXG4gICAgdGhpcy5oYW5kbGVSZXNldFByb2dyZXNzID0gdGhpcy5oYW5kbGVSZXNldFByb2dyZXNzLmJpbmQodGhpcylcbiAgICB0aGlzLmhhbmRsZVVwbG9hZCA9IHRoaXMuaGFuZGxlVXBsb2FkLmJpbmQodGhpcylcbiAgfVxuXG4gIGhhbmRsZVJlc2V0UHJvZ3Jlc3MgKCkge1xuICAgIGNvbnN0IGZpbGVzID0geyAuLi50aGlzLnVwcHkuZ2V0U3RhdGUoKS5maWxlcyB9XG4gICAgT2JqZWN0LmtleXMoZmlsZXMpLmZvckVhY2goKGZpbGVJRCkgPT4ge1xuICAgICAgLy8gT25seSBjbG9uZSB0aGUgZmlsZSBvYmplY3QgaWYgaXQgaGFzIGEgVHVzIGB1cGxvYWRVcmxgIGF0dGFjaGVkLlxuICAgICAgaWYgKGZpbGVzW2ZpbGVJRF0udHVzICYmIGZpbGVzW2ZpbGVJRF0udHVzLnVwbG9hZFVybCkge1xuICAgICAgICBjb25zdCB0dXNTdGF0ZSA9IHsgLi4uZmlsZXNbZmlsZUlEXS50dXMgfVxuICAgICAgICBkZWxldGUgdHVzU3RhdGUudXBsb2FkVXJsXG4gICAgICAgIGZpbGVzW2ZpbGVJRF0gPSB7IC4uLmZpbGVzW2ZpbGVJRF0sIHR1czogdHVzU3RhdGUgfVxuICAgICAgfVxuICAgIH0pXG5cbiAgICB0aGlzLnVwcHkuc2V0U3RhdGUoeyBmaWxlcyB9KVxuICB9XG5cbiAgLyoqXG4gICAqIENsZWFuIHVwIGFsbCByZWZlcmVuY2VzIGZvciBhIGZpbGUncyB1cGxvYWQ6IHRoZSB0dXMuVXBsb2FkIGluc3RhbmNlLFxuICAgKiBhbnkgZXZlbnRzIHJlbGF0ZWQgdG8gdGhlIGZpbGUsIGFuZCB0aGUgQ29tcGFuaW9uIFdlYlNvY2tldCBjb25uZWN0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZmlsZUlEXG4gICAqL1xuICByZXNldFVwbG9hZGVyUmVmZXJlbmNlcyAoZmlsZUlELCBvcHRzID0ge30pIHtcbiAgICBpZiAodGhpcy51cGxvYWRlcnNbZmlsZUlEXSkge1xuICAgICAgY29uc3QgdXBsb2FkZXIgPSB0aGlzLnVwbG9hZGVyc1tmaWxlSURdXG5cbiAgICAgIHVwbG9hZGVyLmFib3J0KClcblxuICAgICAgaWYgKG9wdHMuYWJvcnQpIHtcbiAgICAgICAgdXBsb2FkZXIuYWJvcnQodHJ1ZSlcbiAgICAgIH1cblxuICAgICAgdGhpcy51cGxvYWRlcnNbZmlsZUlEXSA9IG51bGxcbiAgICB9XG4gICAgaWYgKHRoaXMudXBsb2FkZXJFdmVudHNbZmlsZUlEXSkge1xuICAgICAgdGhpcy51cGxvYWRlckV2ZW50c1tmaWxlSURdLnJlbW92ZSgpXG4gICAgICB0aGlzLnVwbG9hZGVyRXZlbnRzW2ZpbGVJRF0gPSBudWxsXG4gICAgfVxuICAgIGlmICh0aGlzLnVwbG9hZGVyU29ja2V0c1tmaWxlSURdKSB7XG4gICAgICB0aGlzLnVwbG9hZGVyU29ja2V0c1tmaWxlSURdLmNsb3NlKClcbiAgICAgIHRoaXMudXBsb2FkZXJTb2NrZXRzW2ZpbGVJRF0gPSBudWxsXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBUdXMgdXBsb2FkLlxuICAgKlxuICAgKiBBIGxvdCBjYW4gaGFwcGVuIGR1cmluZyBhbiB1cGxvYWQsIHNvIHRoaXMgaXMgcXVpdGUgaGFyZCB0byBmb2xsb3chXG4gICAqIC0gRmlyc3QsIHRoZSB1cGxvYWQgaXMgc3RhcnRlZC4gSWYgdGhlIGZpbGUgd2FzIGFscmVhZHkgcGF1c2VkIGJ5IHRoZSB0aW1lIHRoZSB1cGxvYWQgc3RhcnRzLCBub3RoaW5nIHNob3VsZCBoYXBwZW4uXG4gICAqICAgSWYgdGhlIGBsaW1pdGAgb3B0aW9uIGlzIHVzZWQsIHRoZSB1cGxvYWQgbXVzdCBiZSBxdWV1ZWQgb250byB0aGUgYHRoaXMucmVxdWVzdHNgIHF1ZXVlLlxuICAgKiAgIFdoZW4gYW4gdXBsb2FkIHN0YXJ0cywgd2Ugc3RvcmUgdGhlIHR1cy5VcGxvYWQgaW5zdGFuY2UsIGFuZCBhbiBFdmVudFRyYWNrZXIgaW5zdGFuY2UgdGhhdCBtYW5hZ2VzIHRoZSBldmVudCBsaXN0ZW5lcnNcbiAgICogICBmb3IgcGF1c2luZywgY2FuY2VsbGF0aW9uLCByZW1vdmFsLCBldGMuXG4gICAqIC0gV2hpbGUgdGhlIHVwbG9hZCBpcyBpbiBwcm9ncmVzcywgaXQgbWF5IGJlIHBhdXNlZCBvciBjYW5jZWxsZWQuXG4gICAqICAgUGF1c2luZyBhYm9ydHMgdGhlIHVuZGVybHlpbmcgdHVzLlVwbG9hZCwgYW5kIHJlbW92ZXMgdGhlIHVwbG9hZCBmcm9tIHRoZSBgdGhpcy5yZXF1ZXN0c2AgcXVldWUuIEFsbCBvdGhlciBzdGF0ZSBpc1xuICAgKiAgIG1haW50YWluZWQuXG4gICAqICAgQ2FuY2VsbGluZyByZW1vdmVzIHRoZSB1cGxvYWQgZnJvbSB0aGUgYHRoaXMucmVxdWVzdHNgIHF1ZXVlLCBhbmQgY29tcGxldGVseSBhYm9ydHMgdGhlIHVwbG9hZC0tIHRoZSBgdHVzLlVwbG9hZGBcbiAgICogICBpbnN0YW5jZSBpcyBhYm9ydGVkIGFuZCBkaXNjYXJkZWQsIHRoZSBFdmVudFRyYWNrZXIgaW5zdGFuY2UgaXMgZGVzdHJveWVkIChyZW1vdmluZyBhbGwgbGlzdGVuZXJzKS5cbiAgICogICBSZXN1bWluZyB0aGUgdXBsb2FkIHVzZXMgdGhlIGB0aGlzLnJlcXVlc3RzYCBxdWV1ZSBhcyB3ZWxsLCB0byBwcmV2ZW50IHNlbGVjdGl2ZWx5IHBhdXNpbmcgYW5kIHJlc3VtaW5nIHVwbG9hZHMgZnJvbVxuICAgKiAgIGJ5cGFzc2luZyB0aGUgbGltaXQuXG4gICAqIC0gQWZ0ZXIgY29tcGxldGluZyBhbiB1cGxvYWQsIHRoZSB0dXMuVXBsb2FkIGFuZCBFdmVudFRyYWNrZXIgaW5zdGFuY2VzIGFyZSBjbGVhbmVkIHVwLCBhbmQgdGhlIHVwbG9hZCBpcyBtYXJrZWQgYXMgZG9uZVxuICAgKiAgIGluIHRoZSBgdGhpcy5yZXF1ZXN0c2AgcXVldWUuXG4gICAqIC0gV2hlbiBhbiB1cGxvYWQgY29tcGxldGVkIHdpdGggYW4gZXJyb3IsIHRoZSBzYW1lIGhhcHBlbnMgYXMgb24gc3VjY2Vzc2Z1bCBjb21wbGV0aW9uLCBidXQgdGhlIGB1cGxvYWQoKWAgcHJvbWlzZSBpc1xuICAgKiAgIHJlamVjdGVkLlxuICAgKlxuICAgKiBXaGVuIHdvcmtpbmcgb24gdGhpcyBmdW5jdGlvbiwga2VlcCBpbiBtaW5kOlxuICAgKiAgLSBXaGVuIGFuIHVwbG9hZCBpcyBjb21wbGV0ZWQgb3IgY2FuY2VsbGVkIGZvciBhbnkgcmVhc29uLCB0aGUgdHVzLlVwbG9hZCBhbmQgRXZlbnRUcmFja2VyIGluc3RhbmNlcyBuZWVkIHRvIGJlIGNsZWFuZWRcbiAgICogICAgdXAgdXNpbmcgdGhpcy5yZXNldFVwbG9hZGVyUmVmZXJlbmNlcygpLlxuICAgKiAgLSBXaGVuIGFuIHVwbG9hZCBpcyBjYW5jZWxsZWQgb3IgcGF1c2VkLCBmb3IgYW55IHJlYXNvbiwgaXQgbmVlZHMgdG8gYmUgcmVtb3ZlZCBmcm9tIHRoZSBgdGhpcy5yZXF1ZXN0c2AgcXVldWUgdXNpbmdcbiAgICogICAgYHF1ZXVlZFJlcXVlc3QuYWJvcnQoKWAuXG4gICAqICAtIFdoZW4gYW4gdXBsb2FkIGlzIGNvbXBsZXRlZCBmb3IgYW55IHJlYXNvbiwgaW5jbHVkaW5nIGVycm9ycywgaXQgbmVlZHMgdG8gYmUgbWFya2VkIGFzIHN1Y2ggdXNpbmdcbiAgICogICAgYHF1ZXVlZFJlcXVlc3QuZG9uZSgpYC5cbiAgICogIC0gV2hlbiBhbiB1cGxvYWQgaXMgc3RhcnRlZCBvciByZXN1bWVkLCBpdCBuZWVkcyB0byBnbyB0aHJvdWdoIHRoZSBgdGhpcy5yZXF1ZXN0c2AgcXVldWUuIFRoZSBgcXVldWVkUmVxdWVzdGAgdmFyaWFibGVcbiAgICogICAgbXVzdCBiZSB1cGRhdGVkIHNvIHRoZSBvdGhlciB1c2VzIG9mIGl0IGFyZSB2YWxpZC5cbiAgICogIC0gQmVmb3JlIHJlcGxhY2luZyB0aGUgYHF1ZXVlZFJlcXVlc3RgIHZhcmlhYmxlLCB0aGUgcHJldmlvdXMgYHF1ZXVlZFJlcXVlc3RgIG11c3QgYmUgYWJvcnRlZCwgZWxzZSBpdCB3aWxsIGtlZXAgdGFraW5nXG4gICAqICAgIHVwIGEgc3BvdCBpbiB0aGUgcXVldWUuXG4gICAqXG4gICAqIEBwYXJhbSB7VXBweUZpbGV9IGZpbGUgZm9yIHVzZSB3aXRoIHVwbG9hZFxuICAgKiBAcGFyYW0ge251bWJlcn0gY3VycmVudCBmaWxlIGluIGEgcXVldWVcbiAgICogQHBhcmFtIHtudW1iZXJ9IHRvdGFsIG51bWJlciBvZiBmaWxlcyBpbiBhIHF1ZXVlXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fVxuICAgKi9cbiAgdXBsb2FkIChmaWxlKSB7XG4gICAgdGhpcy5yZXNldFVwbG9hZGVyUmVmZXJlbmNlcyhmaWxlLmlkKVxuXG4gICAgLy8gQ3JlYXRlIGEgbmV3IHR1cyB1cGxvYWRcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdGhpcy51cHB5LmVtaXQoJ3VwbG9hZC1zdGFydGVkJywgZmlsZSlcblxuICAgICAgY29uc3Qgb3B0cyA9IHtcbiAgICAgICAgLi4udGhpcy5vcHRzLFxuICAgICAgICAuLi4oZmlsZS50dXMgfHwge30pLFxuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIG9wdHMuaGVhZGVycyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBvcHRzLmhlYWRlcnMgPSBvcHRzLmhlYWRlcnMoZmlsZSlcbiAgICAgIH1cblxuICAgICAgLyoqIEB0eXBlIHtSYXdUdXNPcHRpb25zfSAqL1xuICAgICAgY29uc3QgdXBsb2FkT3B0aW9ucyA9IHtcbiAgICAgICAgLi4udHVzRGVmYXVsdE9wdGlvbnMsXG4gICAgICAgIC4uLm9wdHMsXG4gICAgICB9XG5cbiAgICAgIC8vIFdlIG92ZXJyaWRlIHR1cyBmaW5nZXJwcmludCB0byB1cHB54oCZcyBgZmlsZS5pZGAsIHNpbmNlIHRoZSBgZmlsZS5pZGBcbiAgICAgIC8vIG5vdyBhbHNvIGluY2x1ZGVzIGByZWxhdGl2ZVBhdGhgIGZvciBmaWxlcyBhZGRlZCBmcm9tIGZvbGRlcnMuXG4gICAgICAvLyBUaGlzIG1lYW5zIHlvdSBjYW4gYWRkIDIgaWRlbnRpY2FsIGZpbGVzLCBpZiBvbmUgaXMgaW4gZm9sZGVyIGEsXG4gICAgICAvLyB0aGUgb3RoZXIgaW4gZm9sZGVyIGIuXG4gICAgICB1cGxvYWRPcHRpb25zLmZpbmdlcnByaW50ID0gZ2V0RmluZ2VycHJpbnQoZmlsZSlcblxuICAgICAgdXBsb2FkT3B0aW9ucy5vbkJlZm9yZVJlcXVlc3QgPSAocmVxKSA9PiB7XG4gICAgICAgIGNvbnN0IHhociA9IHJlcS5nZXRVbmRlcmx5aW5nT2JqZWN0KClcbiAgICAgICAgeGhyLndpdGhDcmVkZW50aWFscyA9ICEhb3B0cy53aXRoQ3JlZGVudGlhbHNcblxuICAgICAgICBpZiAodHlwZW9mIG9wdHMub25CZWZvcmVSZXF1ZXN0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgb3B0cy5vbkJlZm9yZVJlcXVlc3QocmVxKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHVwbG9hZE9wdGlvbnMub25FcnJvciA9IChlcnIpID0+IHtcbiAgICAgICAgdGhpcy51cHB5LmxvZyhlcnIpXG5cbiAgICAgICAgY29uc3QgeGhyID0gZXJyLm9yaWdpbmFsUmVxdWVzdCA/IGVyci5vcmlnaW5hbFJlcXVlc3QuZ2V0VW5kZXJseWluZ09iamVjdCgpIDogbnVsbFxuICAgICAgICBpZiAoaXNOZXR3b3JrRXJyb3IoeGhyKSkge1xuICAgICAgICAgIGVyciA9IG5ldyBOZXR3b3JrRXJyb3IoZXJyLCB4aHIpXG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnJlc2V0VXBsb2FkZXJSZWZlcmVuY2VzKGZpbGUuaWQpXG4gICAgICAgIHF1ZXVlZFJlcXVlc3QuZG9uZSgpXG5cbiAgICAgICAgdGhpcy51cHB5LmVtaXQoJ3VwbG9hZC1lcnJvcicsIGZpbGUsIGVycilcblxuICAgICAgICByZWplY3QoZXJyKVxuICAgICAgfVxuXG4gICAgICB1cGxvYWRPcHRpb25zLm9uUHJvZ3Jlc3MgPSAoYnl0ZXNVcGxvYWRlZCwgYnl0ZXNUb3RhbCkgPT4ge1xuICAgICAgICB0aGlzLm9uUmVjZWl2ZVVwbG9hZFVybChmaWxlLCB1cGxvYWQudXJsKVxuICAgICAgICB0aGlzLnVwcHkuZW1pdCgndXBsb2FkLXByb2dyZXNzJywgZmlsZSwge1xuICAgICAgICAgIHVwbG9hZGVyOiB0aGlzLFxuICAgICAgICAgIGJ5dGVzVXBsb2FkZWQsXG4gICAgICAgICAgYnl0ZXNUb3RhbCxcbiAgICAgICAgfSlcbiAgICAgIH1cblxuICAgICAgdXBsb2FkT3B0aW9ucy5vblN1Y2Nlc3MgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHVwbG9hZFJlc3AgPSB7XG4gICAgICAgICAgdXBsb2FkVVJMOiB1cGxvYWQudXJsLFxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5yZXNldFVwbG9hZGVyUmVmZXJlbmNlcyhmaWxlLmlkKVxuICAgICAgICBxdWV1ZWRSZXF1ZXN0LmRvbmUoKVxuXG4gICAgICAgIHRoaXMudXBweS5lbWl0KCd1cGxvYWQtc3VjY2VzcycsIGZpbGUsIHVwbG9hZFJlc3ApXG5cbiAgICAgICAgaWYgKHVwbG9hZC51cmwpIHtcbiAgICAgICAgICB0aGlzLnVwcHkubG9nKGBEb3dubG9hZCAke3VwbG9hZC5maWxlLm5hbWV9IGZyb20gJHt1cGxvYWQudXJsfWApXG4gICAgICAgIH1cblxuICAgICAgICByZXNvbHZlKHVwbG9hZClcbiAgICAgIH1cblxuICAgICAgY29uc3QgY29weVByb3AgPSAob2JqLCBzcmNQcm9wLCBkZXN0UHJvcCkgPT4ge1xuICAgICAgICBpZiAoaGFzUHJvcGVydHkob2JqLCBzcmNQcm9wKSAmJiAhaGFzUHJvcGVydHkob2JqLCBkZXN0UHJvcCkpIHtcbiAgICAgICAgICBvYmpbZGVzdFByb3BdID0gb2JqW3NyY1Byb3BdXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLyoqIEB0eXBlIHtSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+fSAqL1xuICAgICAgY29uc3QgbWV0YSA9IHt9XG4gICAgICBjb25zdCBtZXRhRmllbGRzID0gQXJyYXkuaXNBcnJheShvcHRzLm1ldGFGaWVsZHMpXG4gICAgICAgID8gb3B0cy5tZXRhRmllbGRzXG4gICAgICAgIC8vIFNlbmQgYWxvbmcgYWxsIGZpZWxkcyBieSBkZWZhdWx0LlxuICAgICAgICA6IE9iamVjdC5rZXlzKGZpbGUubWV0YSlcbiAgICAgIG1ldGFGaWVsZHMuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICBtZXRhW2l0ZW1dID0gZmlsZS5tZXRhW2l0ZW1dXG4gICAgICB9KVxuXG4gICAgICAvLyB0dXNkIHVzZXMgbWV0YWRhdGEgZmllbGRzICdmaWxldHlwZScgYW5kICdmaWxlbmFtZSdcbiAgICAgIGNvcHlQcm9wKG1ldGEsICd0eXBlJywgJ2ZpbGV0eXBlJylcbiAgICAgIGNvcHlQcm9wKG1ldGEsICduYW1lJywgJ2ZpbGVuYW1lJylcblxuICAgICAgdXBsb2FkT3B0aW9ucy5tZXRhZGF0YSA9IG1ldGFcblxuICAgICAgY29uc3QgdXBsb2FkID0gbmV3IHR1cy5VcGxvYWQoZmlsZS5kYXRhLCB1cGxvYWRPcHRpb25zKVxuICAgICAgdGhpcy51cGxvYWRlcnNbZmlsZS5pZF0gPSB1cGxvYWRcbiAgICAgIHRoaXMudXBsb2FkZXJFdmVudHNbZmlsZS5pZF0gPSBuZXcgRXZlbnRUcmFja2VyKHRoaXMudXBweSlcblxuICAgICAgdXBsb2FkLmZpbmRQcmV2aW91c1VwbG9hZHMoKS50aGVuKChwcmV2aW91c1VwbG9hZHMpID0+IHtcbiAgICAgICAgY29uc3QgcHJldmlvdXNVcGxvYWQgPSBwcmV2aW91c1VwbG9hZHNbMF1cbiAgICAgICAgaWYgKHByZXZpb3VzVXBsb2FkKSB7XG4gICAgICAgICAgdGhpcy51cHB5LmxvZyhgW1R1c10gUmVzdW1pbmcgdXBsb2FkIG9mICR7ZmlsZS5pZH0gc3RhcnRlZCBhdCAke3ByZXZpb3VzVXBsb2FkLmNyZWF0aW9uVGltZX1gKVxuICAgICAgICAgIHVwbG9hZC5yZXN1bWVGcm9tUHJldmlvdXNVcGxvYWQocHJldmlvdXNVcGxvYWQpXG4gICAgICAgIH1cbiAgICAgIH0pXG5cbiAgICAgIGxldCBxdWV1ZWRSZXF1ZXN0ID0gdGhpcy5yZXF1ZXN0cy5ydW4oKCkgPT4ge1xuICAgICAgICBpZiAoIWZpbGUuaXNQYXVzZWQpIHtcbiAgICAgICAgICB1cGxvYWQuc3RhcnQoKVxuICAgICAgICB9XG4gICAgICAgIC8vIERvbid0IGRvIGFueXRoaW5nIGhlcmUsIHRoZSBjYWxsZXIgd2lsbCB0YWtlIGNhcmUgb2YgY2FuY2VsbGluZyB0aGUgdXBsb2FkIGl0c2VsZlxuICAgICAgICAvLyB1c2luZyByZXNldFVwbG9hZGVyUmVmZXJlbmNlcygpLiBUaGlzIGlzIGJlY2F1c2UgcmVzZXRVcGxvYWRlclJlZmVyZW5jZXMoKSBoYXMgdG8gYmVcbiAgICAgICAgLy8gY2FsbGVkIHdoZW4gdGhpcyByZXF1ZXN0IGlzIHN0aWxsIGluIHRoZSBxdWV1ZSwgYW5kIGhhcyBub3QgYmVlbiBzdGFydGVkIHlldCwgdG9vLiBBdFxuICAgICAgICAvLyB0aGF0IHBvaW50IHRoaXMgY2FuY2VsbGF0aW9uIGZ1bmN0aW9uIGlzIG5vdCBnb2luZyB0byBiZSBjYWxsZWQuXG4gICAgICAgIC8vIEFsc28sIHdlIG5lZWQgdG8gcmVtb3ZlIHRoZSByZXF1ZXN0IGZyb20gdGhlIHF1ZXVlIF93aXRob3V0XyBkZXN0cm95aW5nIGV2ZXJ5dGhpbmdcbiAgICAgICAgLy8gcmVsYXRlZCB0byB0aGlzIHVwbG9hZCB0byBoYW5kbGUgcGF1c2VzLlxuICAgICAgICByZXR1cm4gKCkgPT4ge31cbiAgICAgIH0pXG5cbiAgICAgIHRoaXMub25GaWxlUmVtb3ZlKGZpbGUuaWQsICh0YXJnZXRGaWxlSUQpID0+IHtcbiAgICAgICAgcXVldWVkUmVxdWVzdC5hYm9ydCgpXG4gICAgICAgIHRoaXMucmVzZXRVcGxvYWRlclJlZmVyZW5jZXMoZmlsZS5pZCwgeyBhYm9ydDogISF1cGxvYWQudXJsIH0pXG4gICAgICAgIHJlc29sdmUoYHVwbG9hZCAke3RhcmdldEZpbGVJRH0gd2FzIHJlbW92ZWRgKVxuICAgICAgfSlcblxuICAgICAgdGhpcy5vblBhdXNlKGZpbGUuaWQsIChpc1BhdXNlZCkgPT4ge1xuICAgICAgICBpZiAoaXNQYXVzZWQpIHtcbiAgICAgICAgICAvLyBSZW1vdmUgdGhpcyBmaWxlIGZyb20gdGhlIHF1ZXVlIHNvIGFub3RoZXIgZmlsZSBjYW4gc3RhcnQgaW4gaXRzIHBsYWNlLlxuICAgICAgICAgIHF1ZXVlZFJlcXVlc3QuYWJvcnQoKVxuICAgICAgICAgIHVwbG9hZC5hYm9ydCgpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gUmVzdW1pbmcgYW4gdXBsb2FkIHNob3VsZCBiZSBxdWV1ZWQsIGVsc2UgeW91IGNvdWxkIHBhdXNlIGFuZCB0aGVuXG4gICAgICAgICAgLy8gcmVzdW1lIGEgcXVldWVkIHVwbG9hZCB0byBtYWtlIGl0IHNraXAgdGhlIHF1ZXVlLlxuICAgICAgICAgIHF1ZXVlZFJlcXVlc3QuYWJvcnQoKVxuICAgICAgICAgIHF1ZXVlZFJlcXVlc3QgPSB0aGlzLnJlcXVlc3RzLnJ1bigoKSA9PiB7XG4gICAgICAgICAgICB1cGxvYWQuc3RhcnQoKVxuICAgICAgICAgICAgcmV0dXJuICgpID0+IHt9XG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfSlcblxuICAgICAgdGhpcy5vblBhdXNlQWxsKGZpbGUuaWQsICgpID0+IHtcbiAgICAgICAgcXVldWVkUmVxdWVzdC5hYm9ydCgpXG4gICAgICAgIHVwbG9hZC5hYm9ydCgpXG4gICAgICB9KVxuXG4gICAgICB0aGlzLm9uQ2FuY2VsQWxsKGZpbGUuaWQsICgpID0+IHtcbiAgICAgICAgcXVldWVkUmVxdWVzdC5hYm9ydCgpXG4gICAgICAgIHRoaXMucmVzZXRVcGxvYWRlclJlZmVyZW5jZXMoZmlsZS5pZCwgeyBhYm9ydDogISF1cGxvYWQudXJsIH0pXG4gICAgICAgIHJlc29sdmUoYHVwbG9hZCAke2ZpbGUuaWR9IHdhcyBjYW5jZWxlZGApXG4gICAgICB9KVxuXG4gICAgICB0aGlzLm9uUmVzdW1lQWxsKGZpbGUuaWQsICgpID0+IHtcbiAgICAgICAgcXVldWVkUmVxdWVzdC5hYm9ydCgpXG4gICAgICAgIGlmIChmaWxlLmVycm9yKSB7XG4gICAgICAgICAgdXBsb2FkLmFib3J0KClcbiAgICAgICAgfVxuICAgICAgICBxdWV1ZWRSZXF1ZXN0ID0gdGhpcy5yZXF1ZXN0cy5ydW4oKCkgPT4ge1xuICAgICAgICAgIHVwbG9hZC5zdGFydCgpXG4gICAgICAgICAgcmV0dXJuICgpID0+IHt9XG4gICAgICAgIH0pXG4gICAgICB9KVxuICAgIH0pLmNhdGNoKChlcnIpID0+IHtcbiAgICAgIHRoaXMudXBweS5lbWl0KCd1cGxvYWQtZXJyb3InLCBmaWxlLCBlcnIpXG4gICAgICB0aHJvdyBlcnJcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7VXBweUZpbGV9IGZpbGUgZm9yIHVzZSB3aXRoIHVwbG9hZFxuICAgKiBAcGFyYW0ge251bWJlcn0gY3VycmVudCBmaWxlIGluIGEgcXVldWVcbiAgICogQHBhcmFtIHtudW1iZXJ9IHRvdGFsIG51bWJlciBvZiBmaWxlcyBpbiBhIHF1ZXVlXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fVxuICAgKi9cbiAgdXBsb2FkUmVtb3RlIChmaWxlKSB7XG4gICAgdGhpcy5yZXNldFVwbG9hZGVyUmVmZXJlbmNlcyhmaWxlLmlkKVxuXG4gICAgY29uc3Qgb3B0cyA9IHsgLi4udGhpcy5vcHRzIH1cbiAgICBpZiAoZmlsZS50dXMpIHtcbiAgICAgIC8vIEluc3RhbGwgZmlsZS1zcGVjaWZpYyB1cGxvYWQgb3ZlcnJpZGVzLlxuICAgICAgT2JqZWN0LmFzc2lnbihvcHRzLCBmaWxlLnR1cylcbiAgICB9XG5cbiAgICB0aGlzLnVwcHkuZW1pdCgndXBsb2FkLXN0YXJ0ZWQnLCBmaWxlKVxuICAgIHRoaXMudXBweS5sb2coZmlsZS5yZW1vdGUudXJsKVxuXG4gICAgaWYgKGZpbGUuc2VydmVyVG9rZW4pIHtcbiAgICAgIHJldHVybiB0aGlzLmNvbm5lY3RUb1NlcnZlclNvY2tldChmaWxlKVxuICAgIH1cblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25zdCBDbGllbnQgPSBmaWxlLnJlbW90ZS5wcm92aWRlck9wdGlvbnMucHJvdmlkZXIgPyBQcm92aWRlciA6IFJlcXVlc3RDbGllbnRcbiAgICAgIGNvbnN0IGNsaWVudCA9IG5ldyBDbGllbnQodGhpcy51cHB5LCBmaWxlLnJlbW90ZS5wcm92aWRlck9wdGlvbnMpXG5cbiAgICAgIC8vICEhIGNhbmNlbGxhdGlvbiBpcyBOT1Qgc3VwcG9ydGVkIGF0IHRoaXMgc3RhZ2UgeWV0XG4gICAgICBjbGllbnQucG9zdChmaWxlLnJlbW90ZS51cmwsIHtcbiAgICAgICAgLi4uZmlsZS5yZW1vdGUuYm9keSxcbiAgICAgICAgZW5kcG9pbnQ6IG9wdHMuZW5kcG9pbnQsXG4gICAgICAgIHVwbG9hZFVybDogb3B0cy51cGxvYWRVcmwsXG4gICAgICAgIHByb3RvY29sOiAndHVzJyxcbiAgICAgICAgc2l6ZTogZmlsZS5kYXRhLnNpemUsXG4gICAgICAgIGhlYWRlcnM6IG9wdHMuaGVhZGVycyxcbiAgICAgICAgbWV0YWRhdGE6IGZpbGUubWV0YSxcbiAgICAgIH0pLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICB0aGlzLnVwcHkuc2V0RmlsZVN0YXRlKGZpbGUuaWQsIHsgc2VydmVyVG9rZW46IHJlcy50b2tlbiB9KVxuICAgICAgICBmaWxlID0gdGhpcy51cHB5LmdldEZpbGUoZmlsZS5pZClcbiAgICAgICAgcmV0dXJuIHRoaXMuY29ubmVjdFRvU2VydmVyU29ja2V0KGZpbGUpXG4gICAgICB9KS50aGVuKCgpID0+IHtcbiAgICAgICAgcmVzb2x2ZSgpXG4gICAgICB9KS5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgIHRoaXMudXBweS5lbWl0KCd1cGxvYWQtZXJyb3InLCBmaWxlLCBlcnIpXG4gICAgICAgIHJlamVjdChlcnIpXG4gICAgICB9KVxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogU2VlIHRoZSBjb21tZW50IG9uIHRoZSB1cGxvYWQoKSBtZXRob2QuXG4gICAqXG4gICAqIEFkZGl0aW9uYWxseSwgd2hlbiBhbiB1cGxvYWQgaXMgcmVtb3ZlZCwgY29tcGxldGVkLCBvciBjYW5jZWxsZWQsIHdlIG5lZWQgdG8gY2xvc2UgdGhlIFdlYlNvY2tldCBjb25uZWN0aW9uLiBUaGlzIGlzXG4gICAqIGhhbmRsZWQgYnkgdGhlIHJlc2V0VXBsb2FkZXJSZWZlcmVuY2VzKCkgZnVuY3Rpb24sIHNvIHRoZSBzYW1lIGd1aWRlbGluZXMgYXBwbHkgYXMgaW4gdXBsb2FkKCkuXG4gICAqXG4gICAqIEBwYXJhbSB7VXBweUZpbGV9IGZpbGVcbiAgICovXG4gIGNvbm5lY3RUb1NlcnZlclNvY2tldCAoZmlsZSkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25zdCB0b2tlbiA9IGZpbGUuc2VydmVyVG9rZW5cbiAgICAgIGNvbnN0IGhvc3QgPSBnZXRTb2NrZXRIb3N0KGZpbGUucmVtb3RlLmNvbXBhbmlvblVybClcbiAgICAgIGNvbnN0IHNvY2tldCA9IG5ldyBTb2NrZXQoeyB0YXJnZXQ6IGAke2hvc3R9L2FwaS8ke3Rva2VufWAsIGF1dG9PcGVuOiBmYWxzZSB9KVxuICAgICAgdGhpcy51cGxvYWRlclNvY2tldHNbZmlsZS5pZF0gPSBzb2NrZXRcbiAgICAgIHRoaXMudXBsb2FkZXJFdmVudHNbZmlsZS5pZF0gPSBuZXcgRXZlbnRUcmFja2VyKHRoaXMudXBweSlcblxuICAgICAgdGhpcy5vbkZpbGVSZW1vdmUoZmlsZS5pZCwgKCkgPT4ge1xuICAgICAgICBxdWV1ZWRSZXF1ZXN0LmFib3J0KClcbiAgICAgICAgc29ja2V0LnNlbmQoJ2NhbmNlbCcsIHt9KVxuICAgICAgICB0aGlzLnJlc2V0VXBsb2FkZXJSZWZlcmVuY2VzKGZpbGUuaWQpXG4gICAgICAgIHJlc29sdmUoYHVwbG9hZCAke2ZpbGUuaWR9IHdhcyByZW1vdmVkYClcbiAgICAgIH0pXG5cbiAgICAgIHRoaXMub25QYXVzZShmaWxlLmlkLCAoaXNQYXVzZWQpID0+IHtcbiAgICAgICAgaWYgKGlzUGF1c2VkKSB7XG4gICAgICAgICAgLy8gUmVtb3ZlIHRoaXMgZmlsZSBmcm9tIHRoZSBxdWV1ZSBzbyBhbm90aGVyIGZpbGUgY2FuIHN0YXJ0IGluIGl0cyBwbGFjZS5cbiAgICAgICAgICBxdWV1ZWRSZXF1ZXN0LmFib3J0KClcbiAgICAgICAgICBzb2NrZXQuc2VuZCgncGF1c2UnLCB7fSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBSZXN1bWluZyBhbiB1cGxvYWQgc2hvdWxkIGJlIHF1ZXVlZCwgZWxzZSB5b3UgY291bGQgcGF1c2UgYW5kIHRoZW5cbiAgICAgICAgICAvLyByZXN1bWUgYSBxdWV1ZWQgdXBsb2FkIHRvIG1ha2UgaXQgc2tpcCB0aGUgcXVldWUuXG4gICAgICAgICAgcXVldWVkUmVxdWVzdC5hYm9ydCgpXG4gICAgICAgICAgcXVldWVkUmVxdWVzdCA9IHRoaXMucmVxdWVzdHMucnVuKCgpID0+IHtcbiAgICAgICAgICAgIHNvY2tldC5zZW5kKCdyZXN1bWUnLCB7fSlcbiAgICAgICAgICAgIHJldHVybiAoKSA9PiB7fVxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgIH0pXG5cbiAgICAgIHRoaXMub25QYXVzZUFsbChmaWxlLmlkLCAoKSA9PiB7XG4gICAgICAgIHF1ZXVlZFJlcXVlc3QuYWJvcnQoKVxuICAgICAgICBzb2NrZXQuc2VuZCgncGF1c2UnLCB7fSlcbiAgICAgIH0pXG5cbiAgICAgIHRoaXMub25DYW5jZWxBbGwoZmlsZS5pZCwgKCkgPT4ge1xuICAgICAgICBxdWV1ZWRSZXF1ZXN0LmFib3J0KClcbiAgICAgICAgc29ja2V0LnNlbmQoJ2NhbmNlbCcsIHt9KVxuICAgICAgICB0aGlzLnJlc2V0VXBsb2FkZXJSZWZlcmVuY2VzKGZpbGUuaWQpXG4gICAgICAgIHJlc29sdmUoYHVwbG9hZCAke2ZpbGUuaWR9IHdhcyBjYW5jZWxlZGApXG4gICAgICB9KVxuXG4gICAgICB0aGlzLm9uUmVzdW1lQWxsKGZpbGUuaWQsICgpID0+IHtcbiAgICAgICAgcXVldWVkUmVxdWVzdC5hYm9ydCgpXG4gICAgICAgIGlmIChmaWxlLmVycm9yKSB7XG4gICAgICAgICAgc29ja2V0LnNlbmQoJ3BhdXNlJywge30pXG4gICAgICAgIH1cbiAgICAgICAgcXVldWVkUmVxdWVzdCA9IHRoaXMucmVxdWVzdHMucnVuKCgpID0+IHtcbiAgICAgICAgICBzb2NrZXQuc2VuZCgncmVzdW1lJywge30pXG4gICAgICAgICAgcmV0dXJuICgpID0+IHt9XG4gICAgICAgIH0pXG4gICAgICB9KVxuXG4gICAgICB0aGlzLm9uUmV0cnkoZmlsZS5pZCwgKCkgPT4ge1xuICAgICAgICAvLyBPbmx5IGRvIHRoZSByZXRyeSBpZiB0aGUgdXBsb2FkIGlzIGFjdHVhbGx5IGluIHByb2dyZXNzO1xuICAgICAgICAvLyBlbHNlIHdlIGNvdWxkIHRyeSB0byBzZW5kIHRoZXNlIG1lc3NhZ2VzIHdoZW4gdGhlIHVwbG9hZCBpcyBzdGlsbCBxdWV1ZWQuXG4gICAgICAgIC8vIFdlIG1heSBuZWVkIGEgYmV0dGVyIGNoZWNrIGZvciB0aGlzIHNpbmNlIHRoZSBzb2NrZXQgbWF5IGFsc28gYmUgY2xvc2VkXG4gICAgICAgIC8vIGZvciBvdGhlciByZWFzb25zLCBsaWtlIG5ldHdvcmsgZmFpbHVyZXMuXG4gICAgICAgIGlmIChzb2NrZXQuaXNPcGVuKSB7XG4gICAgICAgICAgc29ja2V0LnNlbmQoJ3BhdXNlJywge30pXG4gICAgICAgICAgc29ja2V0LnNlbmQoJ3Jlc3VtZScsIHt9KVxuICAgICAgICB9XG4gICAgICB9KVxuXG4gICAgICB0aGlzLm9uUmV0cnlBbGwoZmlsZS5pZCwgKCkgPT4ge1xuICAgICAgICAvLyBTZWUgdGhlIGNvbW1lbnQgaW4gdGhlIG9uUmV0cnkoKSBjYWxsXG4gICAgICAgIGlmIChzb2NrZXQuaXNPcGVuKSB7XG4gICAgICAgICAgc29ja2V0LnNlbmQoJ3BhdXNlJywge30pXG4gICAgICAgICAgc29ja2V0LnNlbmQoJ3Jlc3VtZScsIHt9KVxuICAgICAgICB9XG4gICAgICB9KVxuXG4gICAgICBzb2NrZXQub24oJ3Byb2dyZXNzJywgKHByb2dyZXNzRGF0YSkgPT4gZW1pdFNvY2tldFByb2dyZXNzKHRoaXMsIHByb2dyZXNzRGF0YSwgZmlsZSkpXG5cbiAgICAgIHNvY2tldC5vbignZXJyb3InLCAoZXJyRGF0YSkgPT4ge1xuICAgICAgICBjb25zdCB7IG1lc3NhZ2UgfSA9IGVyckRhdGEuZXJyb3JcbiAgICAgICAgY29uc3QgZXJyb3IgPSBPYmplY3QuYXNzaWduKG5ldyBFcnJvcihtZXNzYWdlKSwgeyBjYXVzZTogZXJyRGF0YS5lcnJvciB9KVxuXG4gICAgICAgIC8vIElmIHRoZSByZW1vdGUgcmV0cnkgb3B0aW1pc2F0aW9uIHNob3VsZCBub3QgYmUgdXNlZCxcbiAgICAgICAgLy8gY2xvc2UgdGhlIHNvY2tldOKAlHRoaXMgd2lsbCB0ZWxsIGNvbXBhbmlvbiB0byBjbGVhciBzdGF0ZSBhbmQgZGVsZXRlIHRoZSBmaWxlLlxuICAgICAgICBpZiAoIXRoaXMub3B0cy51c2VGYXN0UmVtb3RlUmV0cnkpIHtcbiAgICAgICAgICB0aGlzLnJlc2V0VXBsb2FkZXJSZWZlcmVuY2VzKGZpbGUuaWQpXG4gICAgICAgICAgLy8gUmVtb3ZlIHRoZSBzZXJ2ZXJUb2tlbiBzbyB0aGF0IGEgbmV3IG9uZSB3aWxsIGJlIGNyZWF0ZWQgZm9yIHRoZSByZXRyeS5cbiAgICAgICAgICB0aGlzLnVwcHkuc2V0RmlsZVN0YXRlKGZpbGUuaWQsIHtcbiAgICAgICAgICAgIHNlcnZlclRva2VuOiBudWxsLFxuICAgICAgICAgIH0pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc29ja2V0LmNsb3NlKClcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudXBweS5lbWl0KCd1cGxvYWQtZXJyb3InLCBmaWxlLCBlcnJvcilcbiAgICAgICAgcXVldWVkUmVxdWVzdC5kb25lKClcbiAgICAgICAgcmVqZWN0KGVycm9yKVxuICAgICAgfSlcblxuICAgICAgc29ja2V0Lm9uKCdzdWNjZXNzJywgKGRhdGEpID0+IHtcbiAgICAgICAgY29uc3QgdXBsb2FkUmVzcCA9IHtcbiAgICAgICAgICB1cGxvYWRVUkw6IGRhdGEudXJsLFxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy51cHB5LmVtaXQoJ3VwbG9hZC1zdWNjZXNzJywgZmlsZSwgdXBsb2FkUmVzcClcbiAgICAgICAgdGhpcy5yZXNldFVwbG9hZGVyUmVmZXJlbmNlcyhmaWxlLmlkKVxuICAgICAgICBxdWV1ZWRSZXF1ZXN0LmRvbmUoKVxuXG4gICAgICAgIHJlc29sdmUoKVxuICAgICAgfSlcblxuICAgICAgbGV0IHF1ZXVlZFJlcXVlc3QgPSB0aGlzLnJlcXVlc3RzLnJ1bigoKSA9PiB7XG4gICAgICAgIHNvY2tldC5vcGVuKClcbiAgICAgICAgaWYgKGZpbGUuaXNQYXVzZWQpIHtcbiAgICAgICAgICBzb2NrZXQuc2VuZCgncGF1c2UnLCB7fSlcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIERvbid0IGRvIGFueXRoaW5nIGhlcmUsIHRoZSBjYWxsZXIgd2lsbCB0YWtlIGNhcmUgb2YgY2FuY2VsbGluZyB0aGUgdXBsb2FkIGl0c2VsZlxuICAgICAgICAvLyB1c2luZyByZXNldFVwbG9hZGVyUmVmZXJlbmNlcygpLiBUaGlzIGlzIGJlY2F1c2UgcmVzZXRVcGxvYWRlclJlZmVyZW5jZXMoKSBoYXMgdG8gYmVcbiAgICAgICAgLy8gY2FsbGVkIHdoZW4gdGhpcyByZXF1ZXN0IGlzIHN0aWxsIGluIHRoZSBxdWV1ZSwgYW5kIGhhcyBub3QgYmVlbiBzdGFydGVkIHlldCwgdG9vLiBBdFxuICAgICAgICAvLyB0aGF0IHBvaW50IHRoaXMgY2FuY2VsbGF0aW9uIGZ1bmN0aW9uIGlzIG5vdCBnb2luZyB0byBiZSBjYWxsZWQuXG4gICAgICAgIC8vIEFsc28sIHdlIG5lZWQgdG8gcmVtb3ZlIHRoZSByZXF1ZXN0IGZyb20gdGhlIHF1ZXVlIF93aXRob3V0XyBkZXN0cm95aW5nIGV2ZXJ5dGhpbmdcbiAgICAgICAgLy8gcmVsYXRlZCB0byB0aGlzIHVwbG9hZCB0byBoYW5kbGUgcGF1c2VzLlxuICAgICAgICByZXR1cm4gKCkgPT4ge31cbiAgICAgIH0pXG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBTdG9yZSB0aGUgdXBsb2FkVXJsIG9uIHRoZSBmaWxlIG9wdGlvbnMsIHNvIHRoYXQgd2hlbiBHb2xkZW4gUmV0cmlldmVyXG4gICAqIHJlc3RvcmVzIHN0YXRlLCB3ZSB3aWxsIGNvbnRpbnVlIHVwbG9hZGluZyB0byB0aGUgY29ycmVjdCBVUkwuXG4gICAqXG4gICAqIEBwYXJhbSB7VXBweUZpbGV9IGZpbGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHVwbG9hZFVSTFxuICAgKi9cbiAgb25SZWNlaXZlVXBsb2FkVXJsIChmaWxlLCB1cGxvYWRVUkwpIHtcbiAgICBjb25zdCBjdXJyZW50RmlsZSA9IHRoaXMudXBweS5nZXRGaWxlKGZpbGUuaWQpXG4gICAgaWYgKCFjdXJyZW50RmlsZSkgcmV0dXJuXG4gICAgLy8gT25seSBkbyB0aGUgdXBkYXRlIGlmIHdlIGRpZG4ndCBoYXZlIGFuIHVwbG9hZCBVUkwgeWV0LlxuICAgIGlmICghY3VycmVudEZpbGUudHVzIHx8IGN1cnJlbnRGaWxlLnR1cy51cGxvYWRVcmwgIT09IHVwbG9hZFVSTCkge1xuICAgICAgdGhpcy51cHB5LmxvZygnW1R1c10gU3RvcmluZyB1cGxvYWQgdXJsJylcbiAgICAgIHRoaXMudXBweS5zZXRGaWxlU3RhdGUoY3VycmVudEZpbGUuaWQsIHtcbiAgICAgICAgdHVzOiB7IC4uLmN1cnJlbnRGaWxlLnR1cywgdXBsb2FkVXJsOiB1cGxvYWRVUkwgfSxcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmaWxlSURcbiAgICogQHBhcmFtIHtmdW5jdGlvbihzdHJpbmcpOiB2b2lkfSBjYlxuICAgKi9cbiAgb25GaWxlUmVtb3ZlIChmaWxlSUQsIGNiKSB7XG4gICAgdGhpcy51cGxvYWRlckV2ZW50c1tmaWxlSURdLm9uKCdmaWxlLXJlbW92ZWQnLCAoZmlsZSkgPT4ge1xuICAgICAgaWYgKGZpbGVJRCA9PT0gZmlsZS5pZCkgY2IoZmlsZS5pZClcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmaWxlSURcbiAgICogQHBhcmFtIHtmdW5jdGlvbihib29sZWFuKTogdm9pZH0gY2JcbiAgICovXG4gIG9uUGF1c2UgKGZpbGVJRCwgY2IpIHtcbiAgICB0aGlzLnVwbG9hZGVyRXZlbnRzW2ZpbGVJRF0ub24oJ3VwbG9hZC1wYXVzZScsICh0YXJnZXRGaWxlSUQsIGlzUGF1c2VkKSA9PiB7XG4gICAgICBpZiAoZmlsZUlEID09PSB0YXJnZXRGaWxlSUQpIHtcbiAgICAgICAgLy8gY29uc3QgaXNQYXVzZWQgPSB0aGlzLnVwcHkucGF1c2VSZXN1bWUoZmlsZUlEKVxuICAgICAgICBjYihpc1BhdXNlZClcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmaWxlSURcbiAgICogQHBhcmFtIHtmdW5jdGlvbigpOiB2b2lkfSBjYlxuICAgKi9cbiAgb25SZXRyeSAoZmlsZUlELCBjYikge1xuICAgIHRoaXMudXBsb2FkZXJFdmVudHNbZmlsZUlEXS5vbigndXBsb2FkLXJldHJ5JywgKHRhcmdldEZpbGVJRCkgPT4ge1xuICAgICAgaWYgKGZpbGVJRCA9PT0gdGFyZ2V0RmlsZUlEKSB7XG4gICAgICAgIGNiKClcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmaWxlSURcbiAgICogQHBhcmFtIHtmdW5jdGlvbigpOiB2b2lkfSBjYlxuICAgKi9cbiAgb25SZXRyeUFsbCAoZmlsZUlELCBjYikge1xuICAgIHRoaXMudXBsb2FkZXJFdmVudHNbZmlsZUlEXS5vbigncmV0cnktYWxsJywgKCkgPT4ge1xuICAgICAgaWYgKCF0aGlzLnVwcHkuZ2V0RmlsZShmaWxlSUQpKSByZXR1cm5cbiAgICAgIGNiKClcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmaWxlSURcbiAgICogQHBhcmFtIHtmdW5jdGlvbigpOiB2b2lkfSBjYlxuICAgKi9cbiAgb25QYXVzZUFsbCAoZmlsZUlELCBjYikge1xuICAgIHRoaXMudXBsb2FkZXJFdmVudHNbZmlsZUlEXS5vbigncGF1c2UtYWxsJywgKCkgPT4ge1xuICAgICAgaWYgKCF0aGlzLnVwcHkuZ2V0RmlsZShmaWxlSUQpKSByZXR1cm5cbiAgICAgIGNiKClcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmaWxlSURcbiAgICogQHBhcmFtIHtmdW5jdGlvbigpOiB2b2lkfSBjYlxuICAgKi9cbiAgb25DYW5jZWxBbGwgKGZpbGVJRCwgY2IpIHtcbiAgICB0aGlzLnVwbG9hZGVyRXZlbnRzW2ZpbGVJRF0ub24oJ2NhbmNlbC1hbGwnLCAoKSA9PiB7XG4gICAgICBpZiAoIXRoaXMudXBweS5nZXRGaWxlKGZpbGVJRCkpIHJldHVyblxuICAgICAgY2IoKVxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IGZpbGVJRFxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCk6IHZvaWR9IGNiXG4gICAqL1xuICBvblJlc3VtZUFsbCAoZmlsZUlELCBjYikge1xuICAgIHRoaXMudXBsb2FkZXJFdmVudHNbZmlsZUlEXS5vbigncmVzdW1lLWFsbCcsICgpID0+IHtcbiAgICAgIGlmICghdGhpcy51cHB5LmdldEZpbGUoZmlsZUlEKSkgcmV0dXJuXG4gICAgICBjYigpXG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0geyhVcHB5RmlsZSB8IEZhaWxlZFVwcHlGaWxlKVtdfSBmaWxlc1xuICAgKi9cbiAgdXBsb2FkRmlsZXMgKGZpbGVzKSB7XG4gICAgY29uc3QgcHJvbWlzZXMgPSBmaWxlcy5tYXAoKGZpbGUsIGkpID0+IHtcbiAgICAgIGNvbnN0IGN1cnJlbnQgPSBpICsgMVxuICAgICAgY29uc3QgdG90YWwgPSBmaWxlcy5sZW5ndGhcblxuICAgICAgaWYgKCdlcnJvcicgaW4gZmlsZSAmJiBmaWxlLmVycm9yKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoZmlsZS5lcnJvcikpXG4gICAgICB9IGlmIChmaWxlLmlzUmVtb3RlKSB7XG4gICAgICAgIC8vIFdlIGVtaXQgdXBsb2FkLXN0YXJ0ZWQgaGVyZSwgc28gdGhhdCBpdCdzIGFsc28gZW1pdHRlZCBmb3IgZmlsZXNcbiAgICAgICAgLy8gdGhhdCBoYXZlIHRvIHdhaXQgZHVlIHRvIHRoZSBgbGltaXRgIG9wdGlvbi5cbiAgICAgICAgLy8gRG9uJ3QgZG91YmxlLWVtaXQgdXBsb2FkLXN0YXJ0ZWQgZm9yIEdvbGRlbiBSZXRyaWV2ZXItcmVzdG9yZWQgZmlsZXMgdGhhdCB3ZXJlIGFscmVhZHkgc3RhcnRlZFxuICAgICAgICBpZiAoIWZpbGUucHJvZ3Jlc3MudXBsb2FkU3RhcnRlZCB8fCAhZmlsZS5pc1Jlc3RvcmVkKSB7XG4gICAgICAgICAgdGhpcy51cHB5LmVtaXQoJ3VwbG9hZC1zdGFydGVkJywgZmlsZSlcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy51cGxvYWRSZW1vdGUoZmlsZSwgY3VycmVudCwgdG90YWwpXG4gICAgICB9XG4gICAgICAvLyBEb24ndCBkb3VibGUtZW1pdCB1cGxvYWQtc3RhcnRlZCBmb3IgR29sZGVuIFJldHJpZXZlci1yZXN0b3JlZCBmaWxlcyB0aGF0IHdlcmUgYWxyZWFkeSBzdGFydGVkXG4gICAgICBpZiAoIWZpbGUucHJvZ3Jlc3MudXBsb2FkU3RhcnRlZCB8fCAhZmlsZS5pc1Jlc3RvcmVkKSB7XG4gICAgICAgIHRoaXMudXBweS5lbWl0KCd1cGxvYWQtc3RhcnRlZCcsIGZpbGUpXG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy51cGxvYWQoZmlsZSwgY3VycmVudCwgdG90YWwpXG4gICAgfSlcblxuICAgIHJldHVybiBzZXR0bGUocHJvbWlzZXMpXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmdbXX0gZmlsZUlEc1xuICAgKi9cbiAgaGFuZGxlVXBsb2FkIChmaWxlSURzKSB7XG4gICAgaWYgKGZpbGVJRHMubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aGlzLnVwcHkubG9nKCdbVHVzXSBObyBmaWxlcyB0byB1cGxvYWQnKVxuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpXG4gICAgfVxuXG4gICAgaWYgKHRoaXMub3B0cy5saW1pdCA9PT0gMCkge1xuICAgICAgdGhpcy51cHB5LmxvZyhcbiAgICAgICAgJ1tUdXNdIFdoZW4gdXBsb2FkaW5nIG11bHRpcGxlIGZpbGVzIGF0IG9uY2UsIGNvbnNpZGVyIHNldHRpbmcgdGhlIGBsaW1pdGAgb3B0aW9uICh0byBgMTBgIGZvciBleGFtcGxlKSwgdG8gbGltaXQgdGhlIG51bWJlciBvZiBjb25jdXJyZW50IHVwbG9hZHMsIHdoaWNoIGhlbHBzIHByZXZlbnQgbWVtb3J5IGFuZCBuZXR3b3JrIGlzc3VlczogaHR0cHM6Ly91cHB5LmlvL2RvY3MvdHVzLyNsaW1pdC0wJyxcbiAgICAgICAgJ3dhcm5pbmcnLFxuICAgICAgKVxuICAgIH1cblxuICAgIHRoaXMudXBweS5sb2coJ1tUdXNdIFVwbG9hZGluZy4uLicpXG4gICAgY29uc3QgZmlsZXNUb1VwbG9hZCA9IGZpbGVJRHMubWFwKChmaWxlSUQpID0+IHRoaXMudXBweS5nZXRGaWxlKGZpbGVJRCkpXG5cbiAgICByZXR1cm4gdGhpcy51cGxvYWRGaWxlcyhmaWxlc1RvVXBsb2FkKVxuICAgICAgLnRoZW4oKCkgPT4gbnVsbClcbiAgfVxuXG4gIGluc3RhbGwgKCkge1xuICAgIHRoaXMudXBweS5zZXRTdGF0ZSh7XG4gICAgICBjYXBhYmlsaXRpZXM6IHsgLi4udGhpcy51cHB5LmdldFN0YXRlKCkuY2FwYWJpbGl0aWVzLCByZXN1bWFibGVVcGxvYWRzOiB0cnVlIH0sXG4gICAgfSlcbiAgICB0aGlzLnVwcHkuYWRkVXBsb2FkZXIodGhpcy5oYW5kbGVVcGxvYWQpXG5cbiAgICB0aGlzLnVwcHkub24oJ3Jlc2V0LXByb2dyZXNzJywgdGhpcy5oYW5kbGVSZXNldFByb2dyZXNzKVxuICB9XG5cbiAgdW5pbnN0YWxsICgpIHtcbiAgICB0aGlzLnVwcHkuc2V0U3RhdGUoe1xuICAgICAgY2FwYWJpbGl0aWVzOiB7IC4uLnRoaXMudXBweS5nZXRTdGF0ZSgpLmNhcGFiaWxpdGllcywgcmVzdW1hYmxlVXBsb2FkczogZmFsc2UgfSxcbiAgICB9KVxuICAgIHRoaXMudXBweS5yZW1vdmVVcGxvYWRlcih0aGlzLmhhbmRsZVVwbG9hZClcbiAgfVxufVxuIiwiY29uc3QgeyBoLCBDb21wb25lbnQgfSA9IHJlcXVpcmUoJ3ByZWFjdCcpXG5cbmNsYXNzIFVybFVJIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IgKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpXG4gICAgdGhpcy5oYW5kbGVLZXlQcmVzcyA9IHRoaXMuaGFuZGxlS2V5UHJlc3MuYmluZCh0aGlzKVxuICAgIHRoaXMuaGFuZGxlQ2xpY2sgPSB0aGlzLmhhbmRsZUNsaWNrLmJpbmQodGhpcylcbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50ICgpIHtcbiAgICB0aGlzLmlucHV0LnZhbHVlID0gJydcbiAgfVxuXG4gIGhhbmRsZUtleVByZXNzIChldikge1xuICAgIGlmIChldi5rZXlDb2RlID09PSAxMykge1xuICAgICAgdGhpcy5wcm9wcy5hZGRGaWxlKHRoaXMuaW5wdXQudmFsdWUpXG4gICAgfVxuICB9XG5cbiAgaGFuZGxlQ2xpY2sgKCkge1xuICAgIHRoaXMucHJvcHMuYWRkRmlsZSh0aGlzLmlucHV0LnZhbHVlKVxuICB9XG5cbiAgcmVuZGVyICgpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJ1cHB5LVVybFwiPlxuICAgICAgICA8aW5wdXRcbiAgICAgICAgICBjbGFzc05hbWU9XCJ1cHB5LXUtcmVzZXQgdXBweS1jLXRleHRJbnB1dCB1cHB5LVVybC1pbnB1dFwiXG4gICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgIGFyaWEtbGFiZWw9e3RoaXMucHJvcHMuaTE4bignZW50ZXJVcmxUb0ltcG9ydCcpfVxuICAgICAgICAgIHBsYWNlaG9sZGVyPXt0aGlzLnByb3BzLmkxOG4oJ2VudGVyVXJsVG9JbXBvcnQnKX1cbiAgICAgICAgICBvbktleVVwPXt0aGlzLmhhbmRsZUtleVByZXNzfVxuICAgICAgICAgIHJlZj17KGlucHV0KSA9PiB7IHRoaXMuaW5wdXQgPSBpbnB1dCB9fVxuICAgICAgICAgIGRhdGEtdXBweS1zdXBlci1mb2N1c2FibGVcbiAgICAgICAgLz5cbiAgICAgICAgPGJ1dHRvblxuICAgICAgICAgIGNsYXNzTmFtZT1cInVwcHktdS1yZXNldCB1cHB5LWMtYnRuIHVwcHktYy1idG4tcHJpbWFyeSB1cHB5LVVybC1pbXBvcnRCdXR0b25cIlxuICAgICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgICAgIG9uQ2xpY2s9e3RoaXMuaGFuZGxlQ2xpY2t9XG4gICAgICAgID5cbiAgICAgICAgICB7dGhpcy5wcm9wcy5pMThuKCdpbXBvcnQnKX1cbiAgICAgICAgPC9idXR0b24+XG4gICAgICA8L2Rpdj5cbiAgICApXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBVcmxVSVxuIiwiY29uc3QgeyBVSVBsdWdpbiB9ID0gcmVxdWlyZSgnQHVwcHkvY29yZScpXG5jb25zdCB7IGggfSA9IHJlcXVpcmUoJ3ByZWFjdCcpXG5jb25zdCB7IFJlcXVlc3RDbGllbnQgfSA9IHJlcXVpcmUoJ0B1cHB5L2NvbXBhbmlvbi1jbGllbnQnKVxuY29uc3QgdG9BcnJheSA9IHJlcXVpcmUoJ0B1cHB5L3V0aWxzL2xpYi90b0FycmF5JylcbmNvbnN0IFVybFVJID0gcmVxdWlyZSgnLi9VcmxVSS5qcycpXG5jb25zdCBmb3JFYWNoRHJvcHBlZE9yUGFzdGVkVXJsID0gcmVxdWlyZSgnLi91dGlscy9mb3JFYWNoRHJvcHBlZE9yUGFzdGVkVXJsJylcblxuY29uc3QgbG9jYWxlID0gcmVxdWlyZSgnLi9sb2NhbGUnKVxuXG5mdW5jdGlvbiBVcmxJY29uICgpIHtcbiAgcmV0dXJuIChcbiAgICA8c3ZnIGFyaWEtaGlkZGVuPVwidHJ1ZVwiIGZvY3VzYWJsZT1cImZhbHNlXCIgd2lkdGg9XCIzMlwiIGhlaWdodD1cIjMyXCIgdmlld0JveD1cIjAgMCAzMiAzMlwiPlxuICAgICAgPGcgZmlsbD1cIm5vbmVcIiBmaWxsUnVsZT1cImV2ZW5vZGRcIj5cbiAgICAgICAgPHJlY3QgY2xhc3NOYW1lPVwidXBweS1Qcm92aWRlckljb25CZ1wiIGZpbGw9XCIjRkY3NTNFXCIgd2lkdGg9XCIzMlwiIGhlaWdodD1cIjMyXCIgcng9XCIxNlwiIC8+XG4gICAgICAgIDxwYXRoIGQ9XCJNMjIuNzg4IDE1LjM4OWwtMi4xOTkgMi4xOWEzLjE4NCAzLjE4NCAwIDAgMS0uNTEzLjQzN2MtLjgwNi41ODQtMS42ODYuODc2LTIuNjM4Ljg3NmE0LjM3OCA0LjM3OCAwIDAgMS0zLjUxOS0xLjc1MmMtLjIyLS4yOTItLjE0Ni0uODAyLjE0Ny0xLjAyMS4yOTMtLjIyLjgwNi0uMTQ2IDEuMDI2LjE0Ni45NTMgMS4zMTMgMi43ODUgMS41MzIgNC4xMDUuNTgzYS41NzEuNTcxIDAgMCAwIC4yOTMtLjI5MmwyLjE5OS0yLjE4OWMxLjEtMS4xNjcgMS4xLTIuOTkyLS4wNzMtNC4wODZhMi45NzYgMi45NzYgMCAwIDAtNC4xMDUgMGwtMS4yNDYgMS4yNGEuNzEuNzEgMCAwIDEtMS4wMjYgMCAuNzAzLjcwMyAwIDAgMSAwLTEuMDIybDEuMjQ2LTEuMjRhNC4zMDUgNC4zMDUgMCAwIDEgNi4wODMgMGMxLjgzMyAxLjYwNSAxLjkwNiA0LjQ1MS4yMiA2LjEzem0tNy4xODMgNS4wMzVsLTEuMjQ2IDEuMjRhMi45NzYgMi45NzYgMCAwIDEtNC4xMDUgMGMtMS4xNzItMS4wOTQtMS4xNzItMi45OTEtLjA3My00LjA4NmwyLjItMi4xOS4yOTItLjI5MWMuNjYtLjQzOCAxLjM5My0uNjU3IDIuMi0uNTg0LjgwNS4xNDYgMS40NjUuNTEgMS45MDUgMS4xNjguMjIuMjkyLjczMy4zNjUgMS4wMjYuMTQ2LjI5My0uMjIuMzY3LS43My4xNDctMS4wMjItLjczMy0uOTQ5LTEuNzYtMS41MzItMi44NTktMS42NzgtMS4xLS4yMi0yLjI3Mi4wNzMtMy4yMjUuODAybC0uNDQuNDM4LTIuMTk5IDIuMTljLTEuNjg2IDEuNzUtMS42MTIgNC41MjQuMDc0IDYuMjAyLjg4LjgwMyAxLjk3OSAxLjI0MSAzLjA3OCAxLjI0MSAxLjEgMCAyLjE5OS0uNDM4IDMuMDc5LTEuMjRsMS4yNDYtMS4yNDFhLjcwMy43MDMgMCAwIDAgMC0xLjAyMmMtLjI5NC0uMjkyLS44MDctLjM2NS0xLjEtLjA3M3pcIiBmaWxsPVwiI0ZGRlwiIGZpbGxSdWxlPVwibm9uemVyb1wiIC8+XG4gICAgICA8L2c+XG4gICAgPC9zdmc+XG4gIClcbn1cblxuLyoqXG4gKiBVcmxcbiAqXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gY2xhc3MgVXJsIGV4dGVuZHMgVUlQbHVnaW4ge1xuICBzdGF0aWMgVkVSU0lPTiA9IHJlcXVpcmUoJy4uL3BhY2thZ2UuanNvbicpLnZlcnNpb25cblxuICBjb25zdHJ1Y3RvciAodXBweSwgb3B0cykge1xuICAgIHN1cGVyKHVwcHksIG9wdHMpXG4gICAgdGhpcy5pZCA9IHRoaXMub3B0cy5pZCB8fCAnVXJsJ1xuICAgIHRoaXMudGl0bGUgPSB0aGlzLm9wdHMudGl0bGUgfHwgJ0xpbmsnXG4gICAgdGhpcy50eXBlID0gJ2FjcXVpcmVyJ1xuICAgIHRoaXMuaWNvbiA9ICgpID0+IDxVcmxJY29uIC8+XG5cbiAgICAvLyBTZXQgZGVmYXVsdCBvcHRpb25zIGFuZCBsb2NhbGVcbiAgICB0aGlzLmRlZmF1bHRMb2NhbGUgPSBsb2NhbGVcblxuICAgIGNvbnN0IGRlZmF1bHRPcHRpb25zID0ge31cblxuICAgIHRoaXMub3B0cyA9IHsgLi4uZGVmYXVsdE9wdGlvbnMsIC4uLm9wdHMgfVxuXG4gICAgdGhpcy5pMThuSW5pdCgpXG5cbiAgICB0aGlzLmhvc3RuYW1lID0gdGhpcy5vcHRzLmNvbXBhbmlvblVybFxuXG4gICAgaWYgKCF0aGlzLmhvc3RuYW1lKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvbXBhbmlvbiBob3N0bmFtZSBpcyByZXF1aXJlZCwgcGxlYXNlIGNvbnN1bHQgaHR0cHM6Ly91cHB5LmlvL2RvY3MvY29tcGFuaW9uJylcbiAgICB9XG5cbiAgICAvLyBCaW5kIGFsbCBldmVudCBoYW5kbGVycyBmb3IgcmVmZXJlbmNhYmlsaXR5XG4gICAgdGhpcy5nZXRNZXRhID0gdGhpcy5nZXRNZXRhLmJpbmQodGhpcylcbiAgICB0aGlzLmFkZEZpbGUgPSB0aGlzLmFkZEZpbGUuYmluZCh0aGlzKVxuICAgIHRoaXMuaGFuZGxlUm9vdERyb3AgPSB0aGlzLmhhbmRsZVJvb3REcm9wLmJpbmQodGhpcylcbiAgICB0aGlzLmhhbmRsZVJvb3RQYXN0ZSA9IHRoaXMuaGFuZGxlUm9vdFBhc3RlLmJpbmQodGhpcylcblxuICAgIHRoaXMuY2xpZW50ID0gbmV3IFJlcXVlc3RDbGllbnQodXBweSwge1xuICAgICAgY29tcGFuaW9uVXJsOiB0aGlzLm9wdHMuY29tcGFuaW9uVXJsLFxuICAgICAgY29tcGFuaW9uSGVhZGVyczogdGhpcy5vcHRzLmNvbXBhbmlvbkhlYWRlcnMsXG4gICAgICBjb21wYW5pb25Db29raWVzUnVsZTogdGhpcy5vcHRzLmNvbXBhbmlvbkNvb2tpZXNSdWxlLFxuICAgIH0pXG4gIH1cblxuICBnZXRGaWxlTmFtZUZyb21VcmwgKHVybCkge1xuICAgIHJldHVybiB1cmwuc3Vic3RyaW5nKHVybC5sYXN0SW5kZXhPZignLycpICsgMSlcbiAgfVxuXG4gIGNoZWNrSWZDb3JyZWN0VVJMICh1cmwpIHtcbiAgICBpZiAoIXVybCkgcmV0dXJuIGZhbHNlXG5cbiAgICBjb25zdCBwcm90b2NvbCA9IHVybC5tYXRjaCgvXihbYS16MC05XSspOlxcL1xcLy8pWzFdXG4gICAgaWYgKHByb3RvY29sICE9PSAnaHR0cCcgJiYgcHJvdG9jb2wgIT09ICdodHRwcycpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cblxuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICBhZGRQcm90b2NvbFRvVVJMICh1cmwpIHtcbiAgICBjb25zdCBwcm90b2NvbFJlZ2V4ID0gL15bYS16MC05XSs6XFwvXFwvL1xuICAgIGNvbnN0IGRlZmF1bHRQcm90b2NvbCA9ICdodHRwOi8vJ1xuICAgIGlmIChwcm90b2NvbFJlZ2V4LnRlc3QodXJsKSkge1xuICAgICAgcmV0dXJuIHVybFxuICAgIH1cblxuICAgIHJldHVybiBkZWZhdWx0UHJvdG9jb2wgKyB1cmxcbiAgfVxuXG4gIGdldE1ldGEgKHVybCkge1xuICAgIHJldHVybiB0aGlzLmNsaWVudC5wb3N0KCd1cmwvbWV0YScsIHsgdXJsIH0pXG4gICAgICAudGhlbigocmVzKSA9PiB7XG4gICAgICAgIGlmIChyZXMuZXJyb3IpIHtcbiAgICAgICAgICB0aGlzLnVwcHkubG9nKCdbVVJMXSBFcnJvcjonKVxuICAgICAgICAgIHRoaXMudXBweS5sb2cocmVzLmVycm9yKVxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRmFpbGVkIHRvIGZldGNoIHRoZSBmaWxlJylcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzXG4gICAgICB9KVxuICB9XG5cbiAgYWRkRmlsZSAodXJsKSB7XG4gICAgdXJsID0gdGhpcy5hZGRQcm90b2NvbFRvVVJMKHVybClcbiAgICBpZiAoIXRoaXMuY2hlY2tJZkNvcnJlY3RVUkwodXJsKSkge1xuICAgICAgdGhpcy51cHB5LmxvZyhgW1VSTF0gSW5jb3JyZWN0IFVSTCBlbnRlcmVkOiAke3VybH1gKVxuICAgICAgdGhpcy51cHB5LmluZm8odGhpcy5pMThuKCdlbnRlckNvcnJlY3RVcmwnKSwgJ2Vycm9yJywgNDAwMClcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmdldE1ldGEodXJsKVxuICAgICAgLnRoZW4oKG1ldGEpID0+IHtcbiAgICAgICAgY29uc3QgdGFnRmlsZSA9IHtcbiAgICAgICAgICBzb3VyY2U6IHRoaXMuaWQsXG4gICAgICAgICAgbmFtZTogdGhpcy5nZXRGaWxlTmFtZUZyb21VcmwodXJsKSxcbiAgICAgICAgICB0eXBlOiBtZXRhLnR5cGUsXG4gICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgc2l6ZTogbWV0YS5zaXplLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgaXNSZW1vdGU6IHRydWUsXG4gICAgICAgICAgYm9keToge1xuICAgICAgICAgICAgdXJsLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgcmVtb3RlOiB7XG4gICAgICAgICAgICBjb21wYW5pb25Vcmw6IHRoaXMub3B0cy5jb21wYW5pb25VcmwsXG4gICAgICAgICAgICB1cmw6IGAke3RoaXMuaG9zdG5hbWV9L3VybC9nZXRgLFxuICAgICAgICAgICAgYm9keToge1xuICAgICAgICAgICAgICBmaWxlSWQ6IHVybCxcbiAgICAgICAgICAgICAgdXJsLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHByb3ZpZGVyT3B0aW9uczogdGhpcy5jbGllbnQub3B0cyxcbiAgICAgICAgICB9LFxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0YWdGaWxlXG4gICAgICB9KVxuICAgICAgLnRoZW4oKHRhZ0ZpbGUpID0+IHtcbiAgICAgICAgdGhpcy51cHB5LmxvZygnW1VybF0gQWRkaW5nIHJlbW90ZSBmaWxlJylcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gdGhpcy51cHB5LmFkZEZpbGUodGFnRmlsZSlcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgaWYgKCFlcnIuaXNSZXN0cmljdGlvbikge1xuICAgICAgICAgICAgdGhpcy51cHB5LmxvZyhlcnIpXG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBlcnJcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgIHRoaXMudXBweS5sb2coZXJyKVxuICAgICAgICB0aGlzLnVwcHkuaW5mbyh7XG4gICAgICAgICAgbWVzc2FnZTogdGhpcy5pMThuKCdmYWlsZWRUb0ZldGNoJyksXG4gICAgICAgICAgZGV0YWlsczogZXJyLFxuICAgICAgICB9LCAnZXJyb3InLCA0MDAwKVxuICAgICAgICByZXR1cm4gZXJyXG4gICAgICB9KVxuICB9XG5cbiAgY2FuSGFuZGxlUm9vdERyb3AgKGUpIHtcbiAgICBjb25zdCBpdGVtcyA9IHRvQXJyYXkoZS5kYXRhVHJhbnNmZXIuaXRlbXMpXG4gICAgY29uc3QgdXJscyA9IGl0ZW1zLmZpbHRlcigoaXRlbSkgPT4gaXRlbS5raW5kID09PSAnc3RyaW5nJ1xuICAgICAgJiYgaXRlbS50eXBlID09PSAndGV4dC91cmktbGlzdCcpXG4gICAgcmV0dXJuIHVybHMubGVuZ3RoID4gMFxuICB9XG5cbiAgaGFuZGxlUm9vdERyb3AgKGUpIHtcbiAgICBmb3JFYWNoRHJvcHBlZE9yUGFzdGVkVXJsKGUuZGF0YVRyYW5zZmVyLCAnZHJvcCcsICh1cmwpID0+IHtcbiAgICAgIHRoaXMudXBweS5sb2coYFtVUkxdIEFkZGluZyBmaWxlIGZyb20gZHJvcHBlZCB1cmw6ICR7dXJsfWApXG4gICAgICB0aGlzLmFkZEZpbGUodXJsKVxuICAgIH0pXG4gIH1cblxuICBoYW5kbGVSb290UGFzdGUgKGUpIHtcbiAgICBmb3JFYWNoRHJvcHBlZE9yUGFzdGVkVXJsKGUuY2xpcGJvYXJkRGF0YSwgJ3Bhc3RlJywgKHVybCkgPT4ge1xuICAgICAgdGhpcy51cHB5LmxvZyhgW1VSTF0gQWRkaW5nIGZpbGUgZnJvbSBwYXN0ZWQgdXJsOiAke3VybH1gKVxuICAgICAgdGhpcy5hZGRGaWxlKHVybClcbiAgICB9KVxuICB9XG5cbiAgcmVuZGVyICgpIHtcbiAgICByZXR1cm4gPFVybFVJIGkxOG49e3RoaXMuaTE4bn0gYWRkRmlsZT17dGhpcy5hZGRGaWxlfSAvPlxuICB9XG5cbiAgaW5zdGFsbCAoKSB7XG4gICAgY29uc3QgeyB0YXJnZXQgfSA9IHRoaXMub3B0c1xuICAgIGlmICh0YXJnZXQpIHtcbiAgICAgIHRoaXMubW91bnQodGFyZ2V0LCB0aGlzKVxuICAgIH1cbiAgfVxuXG4gIHVuaW5zdGFsbCAoKSB7XG4gICAgdGhpcy51bm1vdW50KClcbiAgfVxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSB7XG4gIHN0cmluZ3M6IHtcbiAgICAvLyBMYWJlbCBmb3IgdGhlIFwiSW1wb3J0XCIgYnV0dG9uLlxuICAgIGltcG9ydDogJ0ltcG9ydCcsXG4gICAgLy8gUGxhY2Vob2xkZXIgdGV4dCBmb3IgdGhlIFVSTCBpbnB1dC5cbiAgICBlbnRlclVybFRvSW1wb3J0OiAnRW50ZXIgVVJMIHRvIGltcG9ydCBhIGZpbGUnLFxuICAgIC8vIEVycm9yIG1lc3NhZ2Ugc2hvd24gaWYgQ29tcGFuaW9uIGNvdWxkIG5vdCBsb2FkIGEgVVJMLlxuICAgIGZhaWxlZFRvRmV0Y2g6ICdDb21wYW5pb24gZmFpbGVkIHRvIGZldGNoIHRoaXMgVVJMLCBwbGVhc2UgbWFrZSBzdXJlIGl04oCZcyBjb3JyZWN0JyxcbiAgICAvLyBFcnJvciBtZXNzYWdlIHNob3duIGlmIHRoZSBpbnB1dCBkb2VzIG5vdCBsb29rIGxpa2UgYSBVUkwuXG4gICAgZW50ZXJDb3JyZWN0VXJsOiAnSW5jb3JyZWN0IFVSTDogUGxlYXNlIG1ha2Ugc3VyZSB5b3UgYXJlIGVudGVyaW5nIGEgZGlyZWN0IGxpbmsgdG8gYSBmaWxlJyxcbiAgfSxcbn1cbiIsImNvbnN0IHRvQXJyYXkgPSByZXF1aXJlKCdAdXBweS91dGlscy9saWIvdG9BcnJheScpXG5cbi8qXG4gIFNJVFVBVElPTlxuXG4gICAgMS4gQ3Jvc3MtYnJvd3NlciBkYXRhVHJhbnNmZXIuaXRlbXNcblxuICAgICAgcGFzdGUgaW4gY2hyb21lIFtDb3B5IEltYWdlXTpcbiAgICAgIDA6IHtraW5kOiBcImZpbGVcIiwgdHlwZTogXCJpbWFnZS9wbmdcIn1cbiAgICAgIDE6IHtraW5kOiBcInN0cmluZ1wiLCB0eXBlOiBcInRleHQvaHRtbFwifVxuICAgICAgcGFzdGUgaW4gc2FmYXJpIFtDb3B5IEltYWdlXTpcbiAgICAgIDA6IHtraW5kOiBcImZpbGVcIiwgdHlwZTogXCJpbWFnZS9wbmdcIn1cbiAgICAgIDE6IHtraW5kOiBcInN0cmluZ1wiLCB0eXBlOiBcInRleHQvaHRtbFwifVxuICAgICAgMjoge2tpbmQ6IFwic3RyaW5nXCIsIHR5cGU6IFwidGV4dC9wbGFpblwifVxuICAgICAgMzoge2tpbmQ6IFwic3RyaW5nXCIsIHR5cGU6IFwidGV4dC91cmktbGlzdFwifVxuICAgICAgcGFzdGUgaW4gZmlyZWZveCBbQ29weSBJbWFnZV06XG4gICAgICAwOiB7a2luZDogXCJmaWxlXCIsIHR5cGU6IFwiaW1hZ2UvcG5nXCJ9XG4gICAgICAxOiB7a2luZDogXCJzdHJpbmdcIiwgdHlwZTogXCJ0ZXh0L2h0bWxcIn1cblxuICAgICAgcGFzdGUgaW4gY2hyb21lIFtDb3B5IEltYWdlIEFkZHJlc3NdOlxuICAgICAgMDoge2tpbmQ6IFwic3RyaW5nXCIsIHR5cGU6IFwidGV4dC9wbGFpblwifVxuICAgICAgcGFzdGUgaW4gc2FmYXJpIFtDb3B5IEltYWdlIEFkZHJlc3NdOlxuICAgICAgMDoge2tpbmQ6IFwic3RyaW5nXCIsIHR5cGU6IFwidGV4dC9wbGFpblwifVxuICAgICAgMToge2tpbmQ6IFwic3RyaW5nXCIsIHR5cGU6IFwidGV4dC91cmktbGlzdFwifVxuICAgICAgcGFzdGUgaW4gZmlyZWZveCBbQ29weSBJbWFnZSBBZGRyZXNzXTpcbiAgICAgIDA6IHtraW5kOiBcInN0cmluZ1wiLCB0eXBlOiBcInRleHQvcGxhaW5cIn1cblxuICAgICAgZHJvcCBpbiBjaHJvbWUgW2Zyb20gYnJvd3Nlcl06XG4gICAgICAwOiB7a2luZDogXCJzdHJpbmdcIiwgdHlwZTogXCJ0ZXh0L3VyaS1saXN0XCJ9XG4gICAgICAxOiB7a2luZDogXCJzdHJpbmdcIiwgdHlwZTogXCJ0ZXh0L2h0bWxcIn1cbiAgICAgIGRyb3AgaW4gc2FmYXJpIFtmcm9tIGJyb3dzZXJdOlxuICAgICAgMDoge2tpbmQ6IFwic3RyaW5nXCIsIHR5cGU6IFwidGV4dC91cmktbGlzdFwifVxuICAgICAgMToge2tpbmQ6IFwic3RyaW5nXCIsIHR5cGU6IFwidGV4dC9odG1sXCJ9XG4gICAgICAyOiB7a2luZDogXCJmaWxlXCIsIHR5cGU6IFwiaW1hZ2UvcG5nXCJ9XG4gICAgICBkcm9wIGluIGZpcmVmb3ggW2Zyb20gYnJvd3Nlcl06XG4gICAgICAwOiB7a2luZDogXCJzdHJpbmdcIiwgdHlwZTogXCJ0ZXh0L3VyaS1saXN0XCJ9XG4gICAgICAxOiB7a2luZDogXCJzdHJpbmdcIiwgdHlwZTogXCJ0ZXh0L3gtbW96LXVybFwifVxuICAgICAgMjoge2tpbmQ6IFwic3RyaW5nXCIsIHR5cGU6IFwidGV4dC9wbGFpblwifVxuXG4gICAgMi4gV2UgY2FuIGRldGVybWluZSBpZiBpdCdzIGEgJ2NvcHlwYXN0ZScgb3IgYSAnZHJvcCcsIGJ1dCB3ZSBjYW4ndCBkaXNjZXJuIGJldHdlZW4gW0NvcHkgSW1hZ2VdIGFuZCBbQ29weSBJbWFnZSBBZGRyZXNzXVxuXG4gIENPTkNMVVNJT05cblxuICAgIDEuICdwYXN0ZScgKFtDb3B5IEltYWdlXSBvciBbQ29weSBJbWFnZSBBZGRyZXNzXSwgd2UgY2FuJ3QgZGlzY2VybiBiZXR3ZWVuIHRoZXNlIHR3bylcbiAgICAgIERvbid0IGRvIGFueXRoaW5nIGlmIHRoZXJlIGlzICdmaWxlJyBpdGVtLiAuaGFuZGxlUGFzdGUgaW4gdGhlIERhc2hib2FyZFBsdWdpbiB3aWxsIGRlYWwgd2l0aCBhbGwgJ2ZpbGUnIGl0ZW1zLlxuICAgICAgSWYgdGhlcmUgYXJlIG5vICdmaWxlJyBpdGVtcyAtIGhhbmRsZSAndGV4dC9wbGFpbicgaXRlbXMuXG5cbiAgICAyLiAnZHJvcCdcbiAgICAgIFRha2UgJ3RleHQvdXJpLWxpc3QnIGl0ZW1zLiBTYWZhcmkgaGFzIGFuIGFkZGl0aW9uYWwgaXRlbSBvZiAua2luZCA9PT0gJ2ZpbGUnLCBhbmQgeW91IG1heSB3b3JyeSBhYm91dCB0aGUgaXRlbSBiZWluZ1xuICAgICAgZHVwbGljYXRlZCAoZmlyc3QgYnkgRGFzaGJvYXJkUGx1Z2luLCBhbmQgdGhlbiBieSBVcmxQbHVnaW4sIG5vdyksIGJ1dCBkb24ndC4gRGlyZWN0b3J5IGhhbmRsaW5nIGNvZGUgd29uJ3QgcGF5XG4gICAgICBhdHRlbnRpb24gdG8gdGhpcyBwYXJ0aWN1bGFyIGl0ZW0gb2Yga2luZCAnZmlsZScuXG4qL1xuXG4vKipcbiAqIEZpbmRzIGFsbCBsaW5rcyBkcm9wcGVkL3Bhc3RlZCBmcm9tIG9uZSBicm93c2VyIHdpbmRvdyB0byBhbm90aGVyLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhVHJhbnNmZXIgLSBEYXRhVHJhbnNmZXIgaW5zdGFuY2UsIGUuZy4gZS5jbGlwYm9hcmREYXRhLCBvciBlLmRhdGFUcmFuc2ZlclxuICogQHBhcmFtIHtzdHJpbmd9IGlzRHJvcE9yUGFzdGUgLSBlaXRoZXIgJ2Ryb3AnIG9yICdwYXN0ZSdcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIC0gKHVybFN0cmluZykgPT4ge31cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBmb3JFYWNoRHJvcHBlZE9yUGFzdGVkVXJsIChkYXRhVHJhbnNmZXIsIGlzRHJvcE9yUGFzdGUsIGNhbGxiYWNrKSB7XG4gIGNvbnN0IGl0ZW1zID0gdG9BcnJheShkYXRhVHJhbnNmZXIuaXRlbXMpXG5cbiAgbGV0IHVybEl0ZW1zXG5cbiAgc3dpdGNoIChpc0Ryb3BPclBhc3RlKSB7XG4gICAgY2FzZSAncGFzdGUnOiB7XG4gICAgICBjb25zdCBhdExlYXN0T25lRmlsZUlzRHJhZ2dlZCA9IGl0ZW1zLnNvbWUoKGl0ZW0pID0+IGl0ZW0ua2luZCA9PT0gJ2ZpbGUnKVxuICAgICAgaWYgKGF0TGVhc3RPbmVGaWxlSXNEcmFnZ2VkKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgdXJsSXRlbXMgPSBpdGVtcy5maWx0ZXIoKGl0ZW0pID0+IGl0ZW0ua2luZCA9PT0gJ3N0cmluZydcbiAgICAgICAgICAmJiBpdGVtLnR5cGUgPT09ICd0ZXh0L3BsYWluJylcblxuICAgICAgYnJlYWtcbiAgICB9XG4gICAgY2FzZSAnZHJvcCc6IHtcbiAgICAgIHVybEl0ZW1zID0gaXRlbXMuZmlsdGVyKChpdGVtKSA9PiBpdGVtLmtpbmQgPT09ICdzdHJpbmcnXG4gICAgICAgICYmIGl0ZW0udHlwZSA9PT0gJ3RleHQvdXJpLWxpc3QnKVxuICAgICAgYnJlYWtcbiAgICB9XG4gICAgZGVmYXVsdDoge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBpc0Ryb3BPclBhc3RlIG11c3QgYmUgZWl0aGVyICdkcm9wJyBvciAncGFzdGUnLCBidXQgaXQncyAke2lzRHJvcE9yUGFzdGV9YClcbiAgICB9XG4gIH1cblxuICB1cmxJdGVtcy5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgaXRlbS5nZXRBc1N0cmluZygodXJsU3RyaW5nKSA9PiBjYWxsYmFjayh1cmxTdHJpbmcpKVxuICB9KVxufVxuIiwiLyoqXG4gKiBDcmVhdGUgYSB3cmFwcGVyIGFyb3VuZCBhbiBldmVudCBlbWl0dGVyIHdpdGggYSBgcmVtb3ZlYCBtZXRob2QgdG8gcmVtb3ZlXG4gKiBhbGwgZXZlbnRzIHRoYXQgd2VyZSBhZGRlZCB1c2luZyB0aGUgd3JhcHBlZCBlbWl0dGVyLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGNsYXNzIEV2ZW50VHJhY2tlciB7XG4gICNlbWl0dGVyXG5cbiAgI2V2ZW50cyA9IFtdXG5cbiAgY29uc3RydWN0b3IgKGVtaXR0ZXIpIHtcbiAgICB0aGlzLiNlbWl0dGVyID0gZW1pdHRlclxuICB9XG5cbiAgb24gKGV2ZW50LCBmbikge1xuICAgIHRoaXMuI2V2ZW50cy5wdXNoKFtldmVudCwgZm5dKVxuICAgIHJldHVybiB0aGlzLiNlbWl0dGVyLm9uKGV2ZW50LCBmbilcbiAgfVxuXG4gIHJlbW92ZSAoKSB7XG4gICAgZm9yIChjb25zdCBbZXZlbnQsIGZuXSBvZiB0aGlzLiNldmVudHMuc3BsaWNlKDApKSB7XG4gICAgICB0aGlzLiNlbWl0dGVyLm9mZihldmVudCwgZm4pXG4gICAgfVxuICB9XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IFtcbiAgJ2FbaHJlZl06bm90KFt0YWJpbmRleF49XCItXCJdKTpub3QoW2luZXJ0XSk6bm90KFthcmlhLWhpZGRlbl0pJyxcbiAgJ2FyZWFbaHJlZl06bm90KFt0YWJpbmRleF49XCItXCJdKTpub3QoW2luZXJ0XSk6bm90KFthcmlhLWhpZGRlbl0pJyxcbiAgJ2lucHV0Om5vdChbZGlzYWJsZWRdKTpub3QoW2luZXJ0XSk6bm90KFthcmlhLWhpZGRlbl0pJyxcbiAgJ3NlbGVjdDpub3QoW2Rpc2FibGVkXSk6bm90KFtpbmVydF0pOm5vdChbYXJpYS1oaWRkZW5dKScsXG4gICd0ZXh0YXJlYTpub3QoW2Rpc2FibGVkXSk6bm90KFtpbmVydF0pOm5vdChbYXJpYS1oaWRkZW5dKScsXG4gICdidXR0b246bm90KFtkaXNhYmxlZF0pOm5vdChbaW5lcnRdKTpub3QoW2FyaWEtaGlkZGVuXSknLFxuICAnaWZyYW1lOm5vdChbdGFiaW5kZXhePVwiLVwiXSk6bm90KFtpbmVydF0pOm5vdChbYXJpYS1oaWRkZW5dKScsXG4gICdvYmplY3Q6bm90KFt0YWJpbmRleF49XCItXCJdKTpub3QoW2luZXJ0XSk6bm90KFthcmlhLWhpZGRlbl0pJyxcbiAgJ2VtYmVkOm5vdChbdGFiaW5kZXhePVwiLVwiXSk6bm90KFtpbmVydF0pOm5vdChbYXJpYS1oaWRkZW5dKScsXG4gICdbY29udGVudGVkaXRhYmxlXTpub3QoW3RhYmluZGV4Xj1cIi1cIl0pOm5vdChbaW5lcnRdKTpub3QoW2FyaWEtaGlkZGVuXSknLFxuICAnW3RhYmluZGV4XTpub3QoW3RhYmluZGV4Xj1cIi1cIl0pOm5vdChbaW5lcnRdKTpub3QoW2FyaWEtaGlkZGVuXSknLFxuXVxuIiwiY2xhc3MgTmV0d29ya0Vycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3RvciAoZXJyb3IsIHhociA9IG51bGwpIHtcbiAgICBzdXBlcihgVGhpcyBsb29rcyBsaWtlIGEgbmV0d29yayBlcnJvciwgdGhlIGVuZHBvaW50IG1pZ2h0IGJlIGJsb2NrZWQgYnkgYW4gaW50ZXJuZXQgcHJvdmlkZXIgb3IgYSBmaXJld2FsbC5gKVxuXG4gICAgdGhpcy5jYXVzZSA9IGVycm9yXG4gICAgdGhpcy5pc05ldHdvcmtFcnJvciA9IHRydWVcbiAgICB0aGlzLnJlcXVlc3QgPSB4aHJcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IE5ldHdvcmtFcnJvclxuIiwiZnVuY3Rpb24gY3JlYXRlQ2FuY2VsRXJyb3IgKCkge1xuICByZXR1cm4gbmV3IEVycm9yKCdDYW5jZWxsZWQnKVxufVxuXG5jbGFzcyBSYXRlTGltaXRlZFF1ZXVlIHtcbiAgI2FjdGl2ZVJlcXVlc3RzID0gMFxuXG4gICNxdWV1ZWRIYW5kbGVycyA9IFtdXG5cbiAgY29uc3RydWN0b3IgKGxpbWl0KSB7XG4gICAgaWYgKHR5cGVvZiBsaW1pdCAhPT0gJ251bWJlcicgfHwgbGltaXQgPT09IDApIHtcbiAgICAgIHRoaXMubGltaXQgPSBJbmZpbml0eVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmxpbWl0ID0gbGltaXRcbiAgICB9XG4gIH1cblxuICAjY2FsbCAoZm4pIHtcbiAgICB0aGlzLiNhY3RpdmVSZXF1ZXN0cyArPSAxXG5cbiAgICBsZXQgZG9uZSA9IGZhbHNlXG5cbiAgICBsZXQgY2FuY2VsQWN0aXZlXG4gICAgdHJ5IHtcbiAgICAgIGNhbmNlbEFjdGl2ZSA9IGZuKClcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHRoaXMuI2FjdGl2ZVJlcXVlc3RzIC09IDFcbiAgICAgIHRocm93IGVyclxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBhYm9ydDogKCkgPT4ge1xuICAgICAgICBpZiAoZG9uZSkgcmV0dXJuXG4gICAgICAgIGRvbmUgPSB0cnVlXG4gICAgICAgIHRoaXMuI2FjdGl2ZVJlcXVlc3RzIC09IDFcbiAgICAgICAgY2FuY2VsQWN0aXZlKClcbiAgICAgICAgdGhpcy4jcXVldWVOZXh0KClcbiAgICAgIH0sXG5cbiAgICAgIGRvbmU6ICgpID0+IHtcbiAgICAgICAgaWYgKGRvbmUpIHJldHVyblxuICAgICAgICBkb25lID0gdHJ1ZVxuICAgICAgICB0aGlzLiNhY3RpdmVSZXF1ZXN0cyAtPSAxXG4gICAgICAgIHRoaXMuI3F1ZXVlTmV4dCgpXG4gICAgICB9LFxuICAgIH1cbiAgfVxuXG4gICNxdWV1ZU5leHQgKCkge1xuICAgIC8vIERvIGl0IHNvb24gYnV0IG5vdCBpbW1lZGlhdGVseSwgdGhpcyBhbGxvd3MgY2xlYXJpbmcgb3V0IHRoZSBlbnRpcmUgcXVldWUgc3luY2hyb25vdXNseVxuICAgIC8vIG9uZSBieSBvbmUgd2l0aG91dCBjb250aW51b3VzbHkgX2FkdmFuY2luZ18gaXQgKGFuZCBzdGFydGluZyBuZXcgdGFza3MgYmVmb3JlIGltbWVkaWF0ZWx5XG4gICAgLy8gYWJvcnRpbmcgdGhlbSlcbiAgICBxdWV1ZU1pY3JvdGFzaygoKSA9PiB0aGlzLiNuZXh0KCkpXG4gIH1cblxuICAjbmV4dCAoKSB7XG4gICAgaWYgKHRoaXMuI2FjdGl2ZVJlcXVlc3RzID49IHRoaXMubGltaXQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBpZiAodGhpcy4jcXVldWVkSGFuZGxlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyBEaXNwYXRjaCB0aGUgbmV4dCByZXF1ZXN0LCBhbmQgdXBkYXRlIHRoZSBhYm9ydC9kb25lIGhhbmRsZXJzXG4gICAgLy8gc28gdGhhdCBjYW5jZWxsaW5nIGl0IGRvZXMgdGhlIFJpZ2h0IFRoaW5nIChhbmQgZG9lc24ndCBqdXN0IHRyeVxuICAgIC8vIHRvIGRlcXVldWUgYW4gYWxyZWFkeS1ydW5uaW5nIHJlcXVlc3QpLlxuICAgIGNvbnN0IG5leHQgPSB0aGlzLiNxdWV1ZWRIYW5kbGVycy5zaGlmdCgpXG4gICAgY29uc3QgaGFuZGxlciA9IHRoaXMuI2NhbGwobmV4dC5mbilcbiAgICBuZXh0LmFib3J0ID0gaGFuZGxlci5hYm9ydFxuICAgIG5leHQuZG9uZSA9IGhhbmRsZXIuZG9uZVxuICB9XG5cbiAgI3F1ZXVlIChmbiwgb3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3QgaGFuZGxlciA9IHtcbiAgICAgIGZuLFxuICAgICAgcHJpb3JpdHk6IG9wdGlvbnMucHJpb3JpdHkgfHwgMCxcbiAgICAgIGFib3J0OiAoKSA9PiB7XG4gICAgICAgIHRoaXMuI2RlcXVldWUoaGFuZGxlcilcbiAgICAgIH0sXG4gICAgICBkb25lOiAoKSA9PiB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IG1hcmsgYSBxdWV1ZWQgcmVxdWVzdCBhcyBkb25lOiB0aGlzIGluZGljYXRlcyBhIGJ1ZycpXG4gICAgICB9LFxuICAgIH1cblxuICAgIGNvbnN0IGluZGV4ID0gdGhpcy4jcXVldWVkSGFuZGxlcnMuZmluZEluZGV4KChvdGhlcikgPT4ge1xuICAgICAgcmV0dXJuIGhhbmRsZXIucHJpb3JpdHkgPiBvdGhlci5wcmlvcml0eVxuICAgIH0pXG4gICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgdGhpcy4jcXVldWVkSGFuZGxlcnMucHVzaChoYW5kbGVyKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLiNxdWV1ZWRIYW5kbGVycy5zcGxpY2UoaW5kZXgsIDAsIGhhbmRsZXIpXG4gICAgfVxuICAgIHJldHVybiBoYW5kbGVyXG4gIH1cblxuICAjZGVxdWV1ZSAoaGFuZGxlcikge1xuICAgIGNvbnN0IGluZGV4ID0gdGhpcy4jcXVldWVkSGFuZGxlcnMuaW5kZXhPZihoYW5kbGVyKVxuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgIHRoaXMuI3F1ZXVlZEhhbmRsZXJzLnNwbGljZShpbmRleCwgMSlcbiAgICB9XG4gIH1cblxuICBydW4gKGZuLCBxdWV1ZU9wdGlvbnMpIHtcbiAgICBpZiAodGhpcy4jYWN0aXZlUmVxdWVzdHMgPCB0aGlzLmxpbWl0KSB7XG4gICAgICByZXR1cm4gdGhpcy4jY2FsbChmbilcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuI3F1ZXVlKGZuLCBxdWV1ZU9wdGlvbnMpXG4gIH1cblxuICB3cmFwUHJvbWlzZUZ1bmN0aW9uIChmbiwgcXVldWVPcHRpb25zKSB7XG4gICAgcmV0dXJuICguLi5hcmdzKSA9PiB7XG4gICAgICBsZXQgcXVldWVkUmVxdWVzdFxuICAgICAgY29uc3Qgb3V0ZXJQcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBxdWV1ZWRSZXF1ZXN0ID0gdGhpcy5ydW4oKCkgPT4ge1xuICAgICAgICAgIGxldCBjYW5jZWxFcnJvclxuICAgICAgICAgIGxldCBpbm5lclByb21pc2VcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgaW5uZXJQcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKGZuKC4uLmFyZ3MpKVxuICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgaW5uZXJQcm9taXNlID0gUHJvbWlzZS5yZWplY3QoZXJyKVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlubmVyUHJvbWlzZS50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgICAgICAgIGlmIChjYW5jZWxFcnJvcikge1xuICAgICAgICAgICAgICByZWplY3QoY2FuY2VsRXJyb3IpXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBxdWV1ZWRSZXF1ZXN0LmRvbmUoKVxuICAgICAgICAgICAgICByZXNvbHZlKHJlc3VsdClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCAoZXJyKSA9PiB7XG4gICAgICAgICAgICBpZiAoY2FuY2VsRXJyb3IpIHtcbiAgICAgICAgICAgICAgcmVqZWN0KGNhbmNlbEVycm9yKVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcXVldWVkUmVxdWVzdC5kb25lKClcbiAgICAgICAgICAgICAgcmVqZWN0KGVycilcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuXG4gICAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIGNhbmNlbEVycm9yID0gY3JlYXRlQ2FuY2VsRXJyb3IoKVxuICAgICAgICAgIH1cbiAgICAgICAgfSwgcXVldWVPcHRpb25zKVxuICAgICAgfSlcblxuICAgICAgb3V0ZXJQcm9taXNlLmFib3J0ID0gKCkgPT4ge1xuICAgICAgICBxdWV1ZWRSZXF1ZXN0LmFib3J0KClcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG91dGVyUHJvbWlzZVxuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgUmF0ZUxpbWl0ZWRRdWV1ZSxcbiAgaW50ZXJuYWxSYXRlTGltaXRlZFF1ZXVlOiBTeW1ib2woJ19fcXVldWUnKSxcbn1cbiIsImNvbnN0IGhhcyA9IHJlcXVpcmUoJy4vaGFzUHJvcGVydHknKVxuXG5mdW5jdGlvbiBpbnNlcnRSZXBsYWNlbWVudCAoc291cmNlLCByeCwgcmVwbGFjZW1lbnQpIHtcbiAgY29uc3QgbmV3UGFydHMgPSBbXVxuICBzb3VyY2UuZm9yRWFjaCgoY2h1bmspID0+IHtcbiAgICAvLyBXaGVuIHRoZSBzb3VyY2UgY29udGFpbnMgbXVsdGlwbGUgcGxhY2Vob2xkZXJzIGZvciBpbnRlcnBvbGF0aW9uLFxuICAgIC8vIHdlIHNob3VsZCBpZ25vcmUgY2h1bmtzIHRoYXQgYXJlIG5vdCBzdHJpbmdzLCBiZWNhdXNlIHRob3NlXG4gICAgLy8gY2FuIGJlIEpTWCBvYmplY3RzIGFuZCB3aWxsIGJlIG90aGVyd2lzZSBpbmNvcnJlY3RseSB0dXJuZWQgaW50byBzdHJpbmdzLlxuICAgIC8vIFdpdGhvdXQgdGhpcyBjb25kaXRpb24gd2XigJlkIGdldCB0aGlzOiBbb2JqZWN0IE9iamVjdF0gaGVsbG8gW29iamVjdCBPYmplY3RdIG15IDxidXR0b24+XG4gICAgaWYgKHR5cGVvZiBjaHVuayAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiBuZXdQYXJ0cy5wdXNoKGNodW5rKVxuICAgIH1cblxuICAgIHJldHVybiByeFtTeW1ib2wuc3BsaXRdKGNodW5rKS5mb3JFYWNoKChyYXcsIGksIGxpc3QpID0+IHtcbiAgICAgIGlmIChyYXcgIT09ICcnKSB7XG4gICAgICAgIG5ld1BhcnRzLnB1c2gocmF3KVxuICAgICAgfVxuXG4gICAgICAvLyBJbnRlcmxhY2Ugd2l0aCB0aGUgYHJlcGxhY2VtZW50YCB2YWx1ZVxuICAgICAgaWYgKGkgPCBsaXN0Lmxlbmd0aCAtIDEpIHtcbiAgICAgICAgbmV3UGFydHMucHVzaChyZXBsYWNlbWVudClcbiAgICAgIH1cbiAgICB9KVxuICB9KVxuICByZXR1cm4gbmV3UGFydHNcbn1cblxuLyoqXG4gKiBUYWtlcyBhIHN0cmluZyB3aXRoIHBsYWNlaG9sZGVyIHZhcmlhYmxlcyBsaWtlIGAle3NtYXJ0X2NvdW50fSBmaWxlIHNlbGVjdGVkYFxuICogYW5kIHJlcGxhY2VzIGl0IHdpdGggdmFsdWVzIGZyb20gb3B0aW9ucyBge3NtYXJ0X2NvdW50OiA1fWBcbiAqXG4gKiBAbGljZW5zZSBodHRwczovL2dpdGh1Yi5jb20vYWlyYm5iL3BvbHlnbG90LmpzL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqIHRha2VuIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2FpcmJuYi9wb2x5Z2xvdC5qcy9ibG9iL21hc3Rlci9saWIvcG9seWdsb3QuanMjTDI5OVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBwaHJhc2UgdGhhdCBuZWVkcyBpbnRlcnBvbGF0aW9uLCB3aXRoIHBsYWNlaG9sZGVyc1xuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgd2l0aCB2YWx1ZXMgdGhhdCB3aWxsIGJlIHVzZWQgdG8gcmVwbGFjZSBwbGFjZWhvbGRlcnNcbiAqIEByZXR1cm5zIHthbnlbXX0gaW50ZXJwb2xhdGVkXG4gKi9cbmZ1bmN0aW9uIGludGVycG9sYXRlIChwaHJhc2UsIG9wdGlvbnMpIHtcbiAgY29uc3QgZG9sbGFyUmVnZXggPSAvXFwkL2dcbiAgY29uc3QgZG9sbGFyQmlsbHNZYWxsID0gJyQkJCQnXG4gIGxldCBpbnRlcnBvbGF0ZWQgPSBbcGhyYXNlXVxuXG4gIGlmIChvcHRpb25zID09IG51bGwpIHJldHVybiBpbnRlcnBvbGF0ZWRcblxuICBmb3IgKGNvbnN0IGFyZyBvZiBPYmplY3Qua2V5cyhvcHRpb25zKSkge1xuICAgIGlmIChhcmcgIT09ICdfJykge1xuICAgICAgLy8gRW5zdXJlIHJlcGxhY2VtZW50IHZhbHVlIGlzIGVzY2FwZWQgdG8gcHJldmVudCBzcGVjaWFsICQtcHJlZml4ZWRcbiAgICAgIC8vIHJlZ2V4IHJlcGxhY2UgdG9rZW5zLiB0aGUgXCIkJCQkXCIgaXMgbmVlZGVkIGJlY2F1c2UgZWFjaCBcIiRcIiBuZWVkcyB0b1xuICAgICAgLy8gYmUgZXNjYXBlZCB3aXRoIFwiJFwiIGl0c2VsZiwgYW5kIHdlIG5lZWQgdHdvIGluIHRoZSByZXN1bHRpbmcgb3V0cHV0LlxuICAgICAgbGV0IHJlcGxhY2VtZW50ID0gb3B0aW9uc1thcmddXG4gICAgICBpZiAodHlwZW9mIHJlcGxhY2VtZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXBsYWNlbWVudCA9IGRvbGxhclJlZ2V4W1N5bWJvbC5yZXBsYWNlXShyZXBsYWNlbWVudCwgZG9sbGFyQmlsbHNZYWxsKVxuICAgICAgfVxuICAgICAgLy8gV2UgY3JlYXRlIGEgbmV3IGBSZWdFeHBgIGVhY2ggdGltZSBpbnN0ZWFkIG9mIHVzaW5nIGEgbW9yZS1lZmZpY2llbnRcbiAgICAgIC8vIHN0cmluZyByZXBsYWNlIHNvIHRoYXQgdGhlIHNhbWUgYXJndW1lbnQgY2FuIGJlIHJlcGxhY2VkIG11bHRpcGxlIHRpbWVzXG4gICAgICAvLyBpbiB0aGUgc2FtZSBwaHJhc2UuXG4gICAgICBpbnRlcnBvbGF0ZWQgPSBpbnNlcnRSZXBsYWNlbWVudChpbnRlcnBvbGF0ZWQsIG5ldyBSZWdFeHAoYCVcXFxceyR7YXJnfVxcXFx9YCwgJ2cnKSwgcmVwbGFjZW1lbnQpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGludGVycG9sYXRlZFxufVxuXG4vKipcbiAqIFRyYW5zbGF0ZXMgc3RyaW5ncyB3aXRoIGludGVycG9sYXRpb24gJiBwbHVyYWxpemF0aW9uIHN1cHBvcnQuXG4gKiBFeHRlbnNpYmxlIHdpdGggY3VzdG9tIGRpY3Rpb25hcmllcyBhbmQgcGx1cmFsaXphdGlvbiBmdW5jdGlvbnMuXG4gKlxuICogQm9ycm93cyBoZWF2aWx5IGZyb20gYW5kIGluc3BpcmVkIGJ5IFBvbHlnbG90IGh0dHBzOi8vZ2l0aHViLmNvbS9haXJibmIvcG9seWdsb3QuanMsXG4gKiBiYXNpY2FsbHkgYSBzdHJpcHBlZC1kb3duIHZlcnNpb24gb2YgaXQuIERpZmZlcmVuY2VzOiBwbHVyYWxpemF0aW9uIGZ1bmN0aW9ucyBhcmUgbm90IGhhcmRjb2RlZFxuICogYW5kIGNhbiBiZSBlYXNpbHkgYWRkZWQgYW1vbmcgd2l0aCBkaWN0aW9uYXJpZXMsIG5lc3RlZCBvYmplY3RzIGFyZSB1c2VkIGZvciBwbHVyYWxpemF0aW9uXG4gKiBhcyBvcHBvc2VkIHRvIGB8fHx8YCBkZWxpbWV0ZXJcbiAqXG4gKiBVc2FnZSBleGFtcGxlOiBgdHJhbnNsYXRvci50cmFuc2xhdGUoJ2ZpbGVzX2Nob3NlbicsIHtzbWFydF9jb3VudDogM30pYFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGNsYXNzIFRyYW5zbGF0b3Ige1xuICAvKipcbiAgICogQHBhcmFtIHtvYmplY3R8QXJyYXk8b2JqZWN0Pn0gbG9jYWxlcyAtIGxvY2FsZSBvciBsaXN0IG9mIGxvY2FsZXMuXG4gICAqL1xuICBjb25zdHJ1Y3RvciAobG9jYWxlcykge1xuICAgIHRoaXMubG9jYWxlID0ge1xuICAgICAgc3RyaW5nczoge30sXG4gICAgICBwbHVyYWxpemUgKG4pIHtcbiAgICAgICAgaWYgKG4gPT09IDEpIHtcbiAgICAgICAgICByZXR1cm4gMFxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAxXG4gICAgICB9LFxuICAgIH1cblxuICAgIGlmIChBcnJheS5pc0FycmF5KGxvY2FsZXMpKSB7XG4gICAgICBsb2NhbGVzLmZvckVhY2godGhpcy4jYXBwbHksIHRoaXMpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuI2FwcGx5KGxvY2FsZXMpXG4gICAgfVxuICB9XG5cbiAgI2FwcGx5IChsb2NhbGUpIHtcbiAgICBpZiAoIWxvY2FsZT8uc3RyaW5ncykge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3QgcHJldkxvY2FsZSA9IHRoaXMubG9jYWxlXG4gICAgdGhpcy5sb2NhbGUgPSB7IC4uLnByZXZMb2NhbGUsIHN0cmluZ3M6IHsgLi4ucHJldkxvY2FsZS5zdHJpbmdzLCAuLi5sb2NhbGUuc3RyaW5ncyB9IH1cbiAgICB0aGlzLmxvY2FsZS5wbHVyYWxpemUgPSBsb2NhbGUucGx1cmFsaXplIHx8IHByZXZMb2NhbGUucGx1cmFsaXplXG4gIH1cblxuICAvKipcbiAgICogUHVibGljIHRyYW5zbGF0ZSBtZXRob2RcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleVxuICAgKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyB3aXRoIHZhbHVlcyB0aGF0IHdpbGwgYmUgdXNlZCBsYXRlciB0byByZXBsYWNlIHBsYWNlaG9sZGVycyBpbiBzdHJpbmdcbiAgICogQHJldHVybnMge3N0cmluZ30gdHJhbnNsYXRlZCAoYW5kIGludGVycG9sYXRlZClcbiAgICovXG4gIHRyYW5zbGF0ZSAoa2V5LCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIHRoaXMudHJhbnNsYXRlQXJyYXkoa2V5LCBvcHRpb25zKS5qb2luKCcnKVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCBhIHRyYW5zbGF0aW9uIGFuZCByZXR1cm4gdGhlIHRyYW5zbGF0ZWQgYW5kIGludGVycG9sYXRlZCBwYXJ0cyBhcyBhbiBhcnJheS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleVxuICAgKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyB3aXRoIHZhbHVlcyB0aGF0IHdpbGwgYmUgdXNlZCB0byByZXBsYWNlIHBsYWNlaG9sZGVyc1xuICAgKiBAcmV0dXJucyB7QXJyYXl9IFRoZSB0cmFuc2xhdGVkIGFuZCBpbnRlcnBvbGF0ZWQgcGFydHMsIGluIG9yZGVyLlxuICAgKi9cbiAgdHJhbnNsYXRlQXJyYXkgKGtleSwgb3B0aW9ucykge1xuICAgIGlmICghaGFzKHRoaXMubG9jYWxlLnN0cmluZ3MsIGtleSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgbWlzc2luZyBzdHJpbmc6ICR7a2V5fWApXG4gICAgfVxuXG4gICAgY29uc3Qgc3RyaW5nID0gdGhpcy5sb2NhbGUuc3RyaW5nc1trZXldXG4gICAgY29uc3QgaGFzUGx1cmFsRm9ybXMgPSB0eXBlb2Ygc3RyaW5nID09PSAnb2JqZWN0J1xuXG4gICAgaWYgKGhhc1BsdXJhbEZvcm1zKSB7XG4gICAgICBpZiAob3B0aW9ucyAmJiB0eXBlb2Ygb3B0aW9ucy5zbWFydF9jb3VudCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgY29uc3QgcGx1cmFsID0gdGhpcy5sb2NhbGUucGx1cmFsaXplKG9wdGlvbnMuc21hcnRfY291bnQpXG4gICAgICAgIHJldHVybiBpbnRlcnBvbGF0ZShzdHJpbmdbcGx1cmFsXSwgb3B0aW9ucylcbiAgICAgIH1cbiAgICAgIHRocm93IG5ldyBFcnJvcignQXR0ZW1wdGVkIHRvIHVzZSBhIHN0cmluZyB3aXRoIHBsdXJhbCBmb3JtcywgYnV0IG5vIHZhbHVlIHdhcyBnaXZlbiBmb3IgJXtzbWFydF9jb3VudH0nKVxuICAgIH1cblxuICAgIHJldHVybiBpbnRlcnBvbGF0ZShzdHJpbmcsIG9wdGlvbnMpXG4gIH1cbn1cbiIsIi8qKlxuICogU2F2ZSBhIDxjYW52YXM+IGVsZW1lbnQncyBjb250ZW50IHRvIGEgQmxvYiBvYmplY3QuXG4gKlxuICogQHBhcmFtIHtIVE1MQ2FudmFzRWxlbWVudH0gY2FudmFzXG4gKiBAcmV0dXJucyB7UHJvbWlzZX1cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjYW52YXNUb0Jsb2IgKGNhbnZhcywgdHlwZSwgcXVhbGl0eSkge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICBjYW52YXMudG9CbG9iKHJlc29sdmUsIHR5cGUsIHF1YWxpdHkpXG4gIH0pXG59XG4iLCJjb25zdCBEQVRBX1VSTF9QQVRURVJOID0gL15kYXRhOihbXi9dK1xcL1teLDtdKyg/OlteLF0qPykpKDtiYXNlNjQpPywoW1xcc1xcU10qKSQvXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGF0YVVSSXRvQmxvYiAoZGF0YVVSSSwgb3B0cywgdG9GaWxlKSB7XG4gIC8vIGdldCB0aGUgYmFzZTY0IGRhdGFcbiAgY29uc3QgZGF0YVVSSURhdGEgPSBEQVRBX1VSTF9QQVRURVJOLmV4ZWMoZGF0YVVSSSlcblxuICAvLyB1c2VyIG1heSBwcm92aWRlIG1pbWUgdHlwZSwgaWYgbm90IGdldCBpdCBmcm9tIGRhdGEgVVJJXG4gIGNvbnN0IG1pbWVUeXBlID0gb3B0cy5taW1lVHlwZSA/PyBkYXRhVVJJRGF0YT8uWzFdID8/ICdwbGFpbi90ZXh0J1xuXG4gIGxldCBkYXRhXG4gIGlmIChkYXRhVVJJRGF0YVsyXSAhPSBudWxsKSB7XG4gICAgY29uc3QgYmluYXJ5ID0gYXRvYihkZWNvZGVVUklDb21wb25lbnQoZGF0YVVSSURhdGFbM10pKVxuICAgIGNvbnN0IGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoYmluYXJ5Lmxlbmd0aClcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJpbmFyeS5sZW5ndGg7IGkrKykge1xuICAgICAgYnl0ZXNbaV0gPSBiaW5hcnkuY2hhckNvZGVBdChpKVxuICAgIH1cbiAgICBkYXRhID0gW2J5dGVzXVxuICB9IGVsc2Uge1xuICAgIGRhdGEgPSBbZGVjb2RlVVJJQ29tcG9uZW50KGRhdGFVUklEYXRhWzNdKV1cbiAgfVxuXG4gIC8vIENvbnZlcnQgdG8gYSBGaWxlP1xuICBpZiAodG9GaWxlKSB7XG4gICAgcmV0dXJuIG5ldyBGaWxlKGRhdGEsIG9wdHMubmFtZSB8fCAnJywgeyB0eXBlOiBtaW1lVHlwZSB9KVxuICB9XG5cbiAgcmV0dXJuIG5ldyBCbG9iKGRhdGEsIHsgdHlwZTogbWltZVR5cGUgfSlcbn1cbiIsImNvbnN0IHRocm90dGxlID0gcmVxdWlyZSgnbG9kYXNoLnRocm90dGxlJylcblxuZnVuY3Rpb24gZW1pdFNvY2tldFByb2dyZXNzICh1cGxvYWRlciwgcHJvZ3Jlc3NEYXRhLCBmaWxlKSB7XG4gIGNvbnN0IHsgcHJvZ3Jlc3MsIGJ5dGVzVXBsb2FkZWQsIGJ5dGVzVG90YWwgfSA9IHByb2dyZXNzRGF0YVxuICBpZiAocHJvZ3Jlc3MpIHtcbiAgICB1cGxvYWRlci51cHB5LmxvZyhgVXBsb2FkIHByb2dyZXNzOiAke3Byb2dyZXNzfWApXG4gICAgdXBsb2FkZXIudXBweS5lbWl0KCd1cGxvYWQtcHJvZ3Jlc3MnLCBmaWxlLCB7XG4gICAgICB1cGxvYWRlcixcbiAgICAgIGJ5dGVzVXBsb2FkZWQsXG4gICAgICBieXRlc1RvdGFsLFxuICAgIH0pXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0aHJvdHRsZShlbWl0U29ja2V0UHJvZ3Jlc3MsIDMwMCwge1xuICBsZWFkaW5nOiB0cnVlLFxuICB0cmFpbGluZzogdHJ1ZSxcbn0pXG4iLCJjb25zdCBOZXR3b3JrRXJyb3IgPSByZXF1aXJlKCcuL05ldHdvcmtFcnJvcicpXG5cbi8qKlxuICogV3JhcHBlciBhcm91bmQgd2luZG93LmZldGNoIHRoYXQgdGhyb3dzIGEgTmV0d29ya0Vycm9yIHdoZW4gYXBwcm9wcmlhdGVcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBmZXRjaFdpdGhOZXR3b3JrRXJyb3IgKC4uLm9wdGlvbnMpIHtcbiAgcmV0dXJuIGZldGNoKC4uLm9wdGlvbnMpXG4gICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICAgIGlmIChlcnIubmFtZSA9PT0gJ0Fib3J0RXJyb3InKSB7XG4gICAgICAgIHRocm93IGVyclxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IE5ldHdvcmtFcnJvcihlcnIpXG4gICAgICB9XG4gICAgfSlcbn1cbiIsImNvbnN0IGlzRE9NRWxlbWVudCA9IHJlcXVpcmUoJy4vaXNET01FbGVtZW50JylcblxuLyoqXG4gKiBGaW5kIG9uZSBvciBtb3JlIERPTSBlbGVtZW50cy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ3xOb2RlfSBlbGVtZW50XG4gKiBAcmV0dXJucyB7Tm9kZVtdfG51bGx9XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZmluZEFsbERPTUVsZW1lbnRzIChlbGVtZW50KSB7XG4gIGlmICh0eXBlb2YgZWxlbWVudCA9PT0gJ3N0cmluZycpIHtcbiAgICBjb25zdCBlbGVtZW50cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoZWxlbWVudClcbiAgICByZXR1cm4gZWxlbWVudHMubGVuZ3RoID09PSAwID8gbnVsbCA6IEFycmF5LmZyb20oZWxlbWVudHMpXG4gIH1cblxuICBpZiAodHlwZW9mIGVsZW1lbnQgPT09ICdvYmplY3QnICYmIGlzRE9NRWxlbWVudChlbGVtZW50KSkge1xuICAgIHJldHVybiBbZWxlbWVudF1cbiAgfVxuXG4gIHJldHVybiBudWxsXG59XG4iLCJjb25zdCBpc0RPTUVsZW1lbnQgPSByZXF1aXJlKCcuL2lzRE9NRWxlbWVudCcpXG5cbi8qKlxuICogRmluZCBhIERPTSBlbGVtZW50LlxuICpcbiAqIEBwYXJhbSB7Tm9kZXxzdHJpbmd9IGVsZW1lbnRcbiAqIEByZXR1cm5zIHtOb2RlfG51bGx9XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZmluZERPTUVsZW1lbnQgKGVsZW1lbnQsIGNvbnRleHQgPSBkb2N1bWVudCkge1xuICBpZiAodHlwZW9mIGVsZW1lbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGNvbnRleHQucXVlcnlTZWxlY3RvcihlbGVtZW50KVxuICB9XG5cbiAgaWYgKGlzRE9NRWxlbWVudChlbGVtZW50KSkge1xuICAgIHJldHVybiBlbGVtZW50XG4gIH1cblxuICByZXR1cm4gbnVsbFxufVxuIiwiZnVuY3Rpb24gZW5jb2RlQ2hhcmFjdGVyIChjaGFyYWN0ZXIpIHtcbiAgcmV0dXJuIGNoYXJhY3Rlci5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDMyKVxufVxuXG5mdW5jdGlvbiBlbmNvZGVGaWxlbmFtZSAobmFtZSkge1xuICBsZXQgc3VmZml4ID0gJydcbiAgcmV0dXJuIG5hbWUucmVwbGFjZSgvW15BLVowLTldL2lnLCAoY2hhcmFjdGVyKSA9PiB7XG4gICAgc3VmZml4ICs9IGAtJHtlbmNvZGVDaGFyYWN0ZXIoY2hhcmFjdGVyKX1gXG4gICAgcmV0dXJuICcvJ1xuICB9KSArIHN1ZmZpeFxufVxuXG4vKipcbiAqIFRha2VzIGEgZmlsZSBvYmplY3QgYW5kIHR1cm5zIGl0IGludG8gZmlsZUlELCBieSBjb252ZXJ0aW5nIGZpbGUubmFtZSB0byBsb3dlcmNhc2UsXG4gKiByZW1vdmluZyBleHRyYSBjaGFyYWN0ZXJzIGFuZCBhZGRpbmcgdHlwZSwgc2l6ZSBhbmQgbGFzdE1vZGlmaWVkXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGZpbGVcbiAqIEByZXR1cm5zIHtzdHJpbmd9IHRoZSBmaWxlSURcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZW5lcmF0ZUZpbGVJRCAoZmlsZSkge1xuICAvLyBJdCdzIHRlbXB0aW5nIHRvIGRvIGBbaXRlbXNdLmZpbHRlcihCb29sZWFuKS5qb2luKCctJylgIGhlcmUsIGJ1dCB0aGF0XG4gIC8vIGlzIHNsb3dlciEgc2ltcGxlIHN0cmluZyBjb25jYXRlbmF0aW9uIGlzIGZhc3RcblxuICBsZXQgaWQgPSAndXBweSdcbiAgaWYgKHR5cGVvZiBmaWxlLm5hbWUgPT09ICdzdHJpbmcnKSB7XG4gICAgaWQgKz0gYC0ke2VuY29kZUZpbGVuYW1lKGZpbGUubmFtZS50b0xvd2VyQ2FzZSgpKX1gXG4gIH1cblxuICBpZiAoZmlsZS50eXBlICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZCArPSBgLSR7ZmlsZS50eXBlfWBcbiAgfVxuXG4gIGlmIChmaWxlLm1ldGEgJiYgdHlwZW9mIGZpbGUubWV0YS5yZWxhdGl2ZVBhdGggPT09ICdzdHJpbmcnKSB7XG4gICAgaWQgKz0gYC0ke2VuY29kZUZpbGVuYW1lKGZpbGUubWV0YS5yZWxhdGl2ZVBhdGgudG9Mb3dlckNhc2UoKSl9YFxuICB9XG5cbiAgaWYgKGZpbGUuZGF0YS5zaXplICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZCArPSBgLSR7ZmlsZS5kYXRhLnNpemV9YFxuICB9XG4gIGlmIChmaWxlLmRhdGEubGFzdE1vZGlmaWVkICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZCArPSBgLSR7ZmlsZS5kYXRhLmxhc3RNb2RpZmllZH1gXG4gIH1cblxuICByZXR1cm4gaWRcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2V0Qnl0ZXNSZW1haW5pbmcgKGZpbGVQcm9ncmVzcykge1xuICByZXR1cm4gZmlsZVByb2dyZXNzLmJ5dGVzVG90YWwgLSBmaWxlUHJvZ3Jlc3MuYnl0ZXNVcGxvYWRlZFxufVxuIiwiY29uc3Qgd2Via2l0R2V0QXNFbnRyeUFwaSA9IHJlcXVpcmUoJy4vdXRpbHMvd2Via2l0R2V0QXNFbnRyeUFwaS9pbmRleCcpXG5jb25zdCBmYWxsYmFja0FwaSA9IHJlcXVpcmUoJy4vdXRpbHMvZmFsbGJhY2tBcGknKVxuXG4vKipcbiAqIFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gdGhlIGFycmF5IG9mIGRyb3BwZWQgZmlsZXMgKGlmIGEgZm9sZGVyIGlzXG4gKiBkcm9wcGVkLCBhbmQgYnJvd3NlciBzdXBwb3J0cyBmb2xkZXIgcGFyc2luZyAtIHByb21pc2UgcmVzb2x2ZXMgdG8gdGhlIGZsYXRcbiAqIGFycmF5IG9mIGFsbCBmaWxlcyBpbiBhbGwgZGlyZWN0b3JpZXMpLlxuICogRWFjaCBmaWxlIGhhcyAucmVsYXRpdmVQYXRoIHByb3AgYXBwZW5kZWQgdG8gaXQgKGUuZy4gXCIvZG9jcy9QcmFndWUvdGlja2V0X2Zyb21fcHJhZ3VlX3RvX3VmYS5wZGZcIilcbiAqIGlmIGJyb3dzZXIgc3VwcG9ydHMgaXQuIE90aGVyd2lzZSBpdCdzIHVuZGVmaW5lZC5cbiAqXG4gKiBAcGFyYW0ge0RhdGFUcmFuc2Zlcn0gZGF0YVRyYW5zZmVyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBsb2dEcm9wRXJyb3IgLSBhIGZ1bmN0aW9uIHRoYXQncyBjYWxsZWQgZXZlcnkgdGltZSBzb21lXG4gKiBmb2xkZXIgb3Igc29tZSBmaWxlIGVycm9yIG91dCAoZS5nLiBiZWNhdXNlIG9mIHRoZSBmb2xkZXIgbmFtZSBiZWluZyB0b28gbG9uZ1xuICogb24gV2luZG93cykuIE5vdGljZSB0aGF0IHJlc3VsdGluZyBwcm9taXNlIHdpbGwgYWx3YXlzIGJlIHJlc29sdmVkIGFueXdheS5cbiAqXG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gLSBBcnJheTxGaWxlPlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldERyb3BwZWRGaWxlcyAoZGF0YVRyYW5zZmVyLCB7IGxvZ0Ryb3BFcnJvciA9ICgpID0+IHt9IH0gPSB7fSkge1xuICAvLyBHZXQgYWxsIGZpbGVzIGZyb20gYWxsIHN1YmRpcnMuIFdvcmtzIChhdCBsZWFzdCkgaW4gQ2hyb21lLCBNb3ppbGxhLCBhbmQgU2FmYXJpXG4gIGlmIChkYXRhVHJhbnNmZXIuaXRlbXM/LlswXSAmJiAnd2Via2l0R2V0QXNFbnRyeScgaW4gZGF0YVRyYW5zZmVyLml0ZW1zWzBdKSB7XG4gICAgcmV0dXJuIHdlYmtpdEdldEFzRW50cnlBcGkoZGF0YVRyYW5zZmVyLCBsb2dEcm9wRXJyb3IpXG4gIC8vIE90aGVyd2lzZSBqdXN0IHJldHVybiBhbGwgZmlyc3Qtb3JkZXIgZmlsZXNcbiAgfVxuICByZXR1cm4gZmFsbGJhY2tBcGkoZGF0YVRyYW5zZmVyKVxufVxuIiwiY29uc3QgdG9BcnJheSA9IHJlcXVpcmUoJy4uLy4uL3RvQXJyYXknKVxuXG4vLyAuZmlsZXMgZmFsbGJhY2ssIHNob3VsZCBiZSBpbXBsZW1lbnRlZCBpbiBhbnkgYnJvd3NlclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBmYWxsYmFja0FwaSAoZGF0YVRyYW5zZmVyKSB7XG4gIGNvbnN0IGZpbGVzID0gdG9BcnJheShkYXRhVHJhbnNmZXIuZmlsZXMpXG4gIHJldHVybiBQcm9taXNlLnJlc29sdmUoZmlsZXMpXG59XG4iLCIvKipcbiAqIFJlY3Vyc2l2ZSBmdW5jdGlvbiwgY2FsbHMgdGhlIG9yaWdpbmFsIGNhbGxiYWNrKCkgd2hlbiB0aGUgZGlyZWN0b3J5IGlzIGVudGlyZWx5IHBhcnNlZC5cbiAqXG4gKiBAcGFyYW0ge0ZpbGVTeXN0ZW1EaXJlY3RvcnlSZWFkZXJ9IGRpcmVjdG9yeVJlYWRlclxuICogQHBhcmFtIHtBcnJheX0gb2xkRW50cmllc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gbG9nRHJvcEVycm9yXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayAtIGNhbGxlZCB3aXRoIChbIGFsbCBmaWxlcyBhbmQgZGlyZWN0b3JpZXMgaW4gdGhhdCBkaXJlY3RvcnlSZWFkZXIgXSlcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXRGaWxlc0FuZERpcmVjdG9yaWVzRnJvbURpcmVjdG9yeSAoZGlyZWN0b3J5UmVhZGVyLCBvbGRFbnRyaWVzLCBsb2dEcm9wRXJyb3IsIHsgb25TdWNjZXNzIH0pIHtcbiAgZGlyZWN0b3J5UmVhZGVyLnJlYWRFbnRyaWVzKFxuICAgIChlbnRyaWVzKSA9PiB7XG4gICAgICBjb25zdCBuZXdFbnRyaWVzID0gWy4uLm9sZEVudHJpZXMsIC4uLmVudHJpZXNdXG4gICAgICAvLyBBY2NvcmRpbmcgdG8gdGhlIEZpbGVTeXN0ZW0gQVBJIHNwZWMsIGdldEZpbGVzQW5kRGlyZWN0b3JpZXNGcm9tRGlyZWN0b3J5KClcbiAgICAgIC8vIG11c3QgYmUgY2FsbGVkIHVudGlsIGl0IGNhbGxzIHRoZSBvblN1Y2Nlc3Mgd2l0aCBhbiBlbXB0eSBhcnJheS5cbiAgICAgIGlmIChlbnRyaWVzLmxlbmd0aCkge1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICBnZXRGaWxlc0FuZERpcmVjdG9yaWVzRnJvbURpcmVjdG9yeShkaXJlY3RvcnlSZWFkZXIsIG5ld0VudHJpZXMsIGxvZ0Ryb3BFcnJvciwgeyBvblN1Y2Nlc3MgfSlcbiAgICAgICAgfSwgMClcbiAgICAgIC8vIERvbmUgaXRlcmF0aW5nIHRoaXMgcGFydGljdWxhciBkaXJlY3RvcnlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9uU3VjY2VzcyhuZXdFbnRyaWVzKVxuICAgICAgfVxuICAgIH0sXG4gICAgLy8gTWFrZSBzdXJlIHdlIHJlc29sdmUgb24gZXJyb3IgYW55d2F5LCBpdCdzIGZpbmUgaWYgb25seSBvbmUgZGlyZWN0b3J5IGNvdWxkbid0IGJlIHBhcnNlZCFcbiAgICAoZXJyb3IpID0+IHtcbiAgICAgIGxvZ0Ryb3BFcnJvcihlcnJvcilcbiAgICAgIG9uU3VjY2VzcyhvbGRFbnRyaWVzKVxuICAgIH0sXG4gIClcbn1cbiIsIi8qKlxuICogR2V0IHRoZSByZWxhdGl2ZSBwYXRoIGZyb20gdGhlIEZpbGVFbnRyeSNmdWxsUGF0aCwgYmVjYXVzZSBGaWxlI3dlYmtpdFJlbGF0aXZlUGF0aCBpcyBhbHdheXMgJycsIGF0IGxlYXN0IG9uRHJvcC5cbiAqXG4gKiBAcGFyYW0ge0ZpbGVFbnRyeX0gZmlsZUVudHJ5XG4gKlxuICogQHJldHVybnMge3N0cmluZ3xudWxsfSAtIGlmIGZpbGUgaXMgbm90IGluIGEgZm9sZGVyIC0gcmV0dXJuIG51bGwgKHRoaXMgaXMgdG9cbiAqIGJlIGNvbnNpc3RlbnQgd2l0aCAucmVsYXRpdmVQYXRoLXMgb2YgZmlsZXMgc2VsZWN0ZWQgZnJvbSBNeSBEZXZpY2UpLiBJZiBmaWxlXG4gKiBpcyBpbiBhIGZvbGRlciAtIHJldHVybiBpdHMgZnVsbFBhdGgsIGUuZy4gJy9zaW1wc29ucy9oaS5qcGVnJy5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXRSZWxhdGl2ZVBhdGggKGZpbGVFbnRyeSkge1xuICAvLyBmaWxlRW50cnkuZnVsbFBhdGggLSBcIi9zaW1wc29ucy9oaS5qcGVnXCIgb3IgdW5kZWZpbmVkIChmb3IgYnJvd3NlcnMgdGhhdCBkb24ndCBzdXBwb3J0IGl0KVxuICAvLyBmaWxlRW50cnkubmFtZSAtIFwiaGkuanBlZ1wiXG4gIGlmICghZmlsZUVudHJ5LmZ1bGxQYXRoIHx8IGZpbGVFbnRyeS5mdWxsUGF0aCA9PT0gYC8ke2ZpbGVFbnRyeS5uYW1lfWApIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG4gIHJldHVybiBmaWxlRW50cnkuZnVsbFBhdGhcbn1cbiIsImNvbnN0IHRvQXJyYXkgPSByZXF1aXJlKCcuLi8uLi8uLi90b0FycmF5JylcbmNvbnN0IGdldFJlbGF0aXZlUGF0aCA9IHJlcXVpcmUoJy4vZ2V0UmVsYXRpdmVQYXRoJylcbmNvbnN0IGdldEZpbGVzQW5kRGlyZWN0b3JpZXNGcm9tRGlyZWN0b3J5ID0gcmVxdWlyZSgnLi9nZXRGaWxlc0FuZERpcmVjdG9yaWVzRnJvbURpcmVjdG9yeScpXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gd2Via2l0R2V0QXNFbnRyeUFwaSAoZGF0YVRyYW5zZmVyLCBsb2dEcm9wRXJyb3IpIHtcbiAgY29uc3QgZmlsZXMgPSBbXVxuXG4gIGNvbnN0IHJvb3RQcm9taXNlcyA9IFtdXG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSByZXNvbHZlZCBwcm9taXNlLCB3aGVuIDpmaWxlcyBhcnJheSBpcyBlbmhhbmNlZFxuICAgKlxuICAgKiBAcGFyYW0geyhGaWxlU3lzdGVtRmlsZUVudHJ5fEZpbGVTeXN0ZW1EaXJlY3RvcnlFbnRyeSl9IGVudHJ5XG4gICAqIEByZXR1cm5zIHtQcm9taXNlfSAtIGVtcHR5IHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIDpmaWxlcyBpcyBlbmhhbmNlZCB3aXRoIGEgZmlsZVxuICAgKi9cbiAgY29uc3QgY3JlYXRlUHJvbWlzZVRvQWRkRmlsZU9yUGFyc2VEaXJlY3RvcnkgPSAoZW50cnkpID0+IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgLy8gVGhpcyBpcyBhIGJhc2UgY2FsbFxuICAgIGlmIChlbnRyeS5pc0ZpbGUpIHtcbiAgICAgIC8vIENyZWF0ZXMgYSBuZXcgRmlsZSBvYmplY3Qgd2hpY2ggY2FuIGJlIHVzZWQgdG8gcmVhZCB0aGUgZmlsZS5cbiAgICAgIGVudHJ5LmZpbGUoXG4gICAgICAgIChmaWxlKSA9PiB7XG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICAgICAgZmlsZS5yZWxhdGl2ZVBhdGggPSBnZXRSZWxhdGl2ZVBhdGgoZW50cnkpXG4gICAgICAgICAgZmlsZXMucHVzaChmaWxlKVxuICAgICAgICAgIHJlc29sdmUoKVxuICAgICAgICB9LFxuICAgICAgICAvLyBNYWtlIHN1cmUgd2UgcmVzb2x2ZSBvbiBlcnJvciBhbnl3YXksIGl0J3MgZmluZSBpZiBvbmx5IG9uZSBmaWxlIGNvdWxkbid0IGJlIHJlYWQhXG4gICAgICAgIChlcnJvcikgPT4ge1xuICAgICAgICAgIGxvZ0Ryb3BFcnJvcihlcnJvcilcbiAgICAgICAgICByZXNvbHZlKClcbiAgICAgICAgfSxcbiAgICAgIClcbiAgICAgIC8vIFRoaXMgaXMgYSByZWN1cnNpdmUgY2FsbFxuICAgIH0gZWxzZSBpZiAoZW50cnkuaXNEaXJlY3RvcnkpIHtcbiAgICAgIGNvbnN0IGRpcmVjdG9yeVJlYWRlciA9IGVudHJ5LmNyZWF0ZVJlYWRlcigpXG4gICAgICBnZXRGaWxlc0FuZERpcmVjdG9yaWVzRnJvbURpcmVjdG9yeShkaXJlY3RvcnlSZWFkZXIsIFtdLCBsb2dEcm9wRXJyb3IsIHtcbiAgICAgICAgb25TdWNjZXNzOiAoZW50cmllcykgPT4gcmVzb2x2ZShQcm9taXNlLmFsbChcbiAgICAgICAgICBlbnRyaWVzLm1hcChjcmVhdGVQcm9taXNlVG9BZGRGaWxlT3JQYXJzZURpcmVjdG9yeSksXG4gICAgICAgICkpLFxuICAgICAgfSlcbiAgICB9XG4gIH0pXG5cbiAgLy8gRm9yIGVhY2ggZHJvcHBlZCBpdGVtLCAtIG1ha2Ugc3VyZSBpdCdzIGEgZmlsZS9kaXJlY3RvcnksIGFuZCBzdGFydCBkZWVwZW5pbmcgaW4hXG4gIHRvQXJyYXkoZGF0YVRyYW5zZmVyLml0ZW1zKVxuICAgIC5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICBjb25zdCBlbnRyeSA9IGl0ZW0ud2Via2l0R2V0QXNFbnRyeSgpXG4gICAgICAvLyA6ZW50cnkgY2FuIGJlIG51bGwgd2hlbiB3ZSBkcm9wIHRoZSB1cmwgZS5nLlxuICAgICAgaWYgKGVudHJ5KSB7XG4gICAgICAgIHJvb3RQcm9taXNlcy5wdXNoKGNyZWF0ZVByb21pc2VUb0FkZEZpbGVPclBhcnNlRGlyZWN0b3J5KGVudHJ5KSlcbiAgICAgIH1cbiAgICB9KVxuXG4gIHJldHVybiBQcm9taXNlLmFsbChyb290UHJvbWlzZXMpXG4gICAgLnRoZW4oKCkgPT4gZmlsZXMpXG59XG4iLCIvKipcbiAqIFRha2VzIGEgZnVsbCBmaWxlbmFtZSBzdHJpbmcgYW5kIHJldHVybnMgYW4gb2JqZWN0IHtuYW1lLCBleHRlbnNpb259XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGZ1bGxGaWxlTmFtZVxuICogQHJldHVybnMge29iamVjdH0ge25hbWUsIGV4dGVuc2lvbn1cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXRGaWxlTmFtZUFuZEV4dGVuc2lvbiAoZnVsbEZpbGVOYW1lKSB7XG4gIGNvbnN0IGxhc3REb3QgPSBmdWxsRmlsZU5hbWUubGFzdEluZGV4T2YoJy4nKVxuICAvLyB0aGVzZSBjb3VudCBhcyBubyBleHRlbnNpb246IFwibm8tZG90XCIsIFwidHJhaWxpbmctZG90LlwiXG4gIGlmIChsYXN0RG90ID09PSAtMSB8fCBsYXN0RG90ID09PSBmdWxsRmlsZU5hbWUubGVuZ3RoIC0gMSkge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiBmdWxsRmlsZU5hbWUsXG4gICAgICBleHRlbnNpb246IHVuZGVmaW5lZCxcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBmdWxsRmlsZU5hbWUuc2xpY2UoMCwgbGFzdERvdCksXG4gICAgZXh0ZW5zaW9uOiBmdWxsRmlsZU5hbWUuc2xpY2UobGFzdERvdCArIDEpLFxuICB9XG59XG4iLCJjb25zdCBnZXRGaWxlTmFtZUFuZEV4dGVuc2lvbiA9IHJlcXVpcmUoJy4vZ2V0RmlsZU5hbWVBbmRFeHRlbnNpb24nKVxuY29uc3QgbWltZVR5cGVzID0gcmVxdWlyZSgnLi9taW1lVHlwZXMnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldEZpbGVUeXBlIChmaWxlKSB7XG4gIGlmIChmaWxlLnR5cGUpIHJldHVybiBmaWxlLnR5cGVcblxuICBjb25zdCBmaWxlRXh0ZW5zaW9uID0gZmlsZS5uYW1lID8gZ2V0RmlsZU5hbWVBbmRFeHRlbnNpb24oZmlsZS5uYW1lKS5leHRlbnNpb24/LnRvTG93ZXJDYXNlKCkgOiBudWxsXG4gIGlmIChmaWxlRXh0ZW5zaW9uICYmIGZpbGVFeHRlbnNpb24gaW4gbWltZVR5cGVzKSB7XG4gICAgLy8gZWxzZSwgc2VlIGlmIHdlIGNhbiBtYXAgZXh0ZW5zaW9uIHRvIGEgbWltZSB0eXBlXG4gICAgcmV0dXJuIG1pbWVUeXBlc1tmaWxlRXh0ZW5zaW9uXVxuICB9XG4gIC8vIGlmIGFsbCBmYWlscywgZmFsbCBiYWNrIHRvIGEgZ2VuZXJpYyBieXRlIHN0cmVhbSB0eXBlXG4gIHJldHVybiAnYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtJ1xufVxuIiwiY29uc3QgbWltZVRvRXh0ZW5zaW9ucyA9IHtcbiAgJ2F1ZGlvL21wMyc6ICdtcDMnLFxuICAnYXVkaW8vbXA0JzogJ21wNCcsXG4gICdhdWRpby9vZ2cnOiAnb2dnJyxcbiAgJ2F1ZGlvL3dlYm0nOiAnd2VibScsXG4gICdpbWFnZS9naWYnOiAnZ2lmJyxcbiAgJ2ltYWdlL2hlaWMnOiAnaGVpYycsXG4gICdpbWFnZS9oZWlmJzogJ2hlaWYnLFxuICAnaW1hZ2UvanBlZyc6ICdqcGcnLFxuICAnaW1hZ2UvcG5nJzogJ3BuZycsXG4gICdpbWFnZS9zdmcreG1sJzogJ3N2ZycsXG4gICd2aWRlby9tcDQnOiAnbXA0JyxcbiAgJ3ZpZGVvL29nZyc6ICdvZ3YnLFxuICAndmlkZW8vcXVpY2t0aW1lJzogJ21vdicsXG4gICd2aWRlby93ZWJtJzogJ3dlYm0nLFxuICAndmlkZW8veC1tYXRyb3NrYSc6ICdta3YnLFxuICAndmlkZW8veC1tc3ZpZGVvJzogJ2F2aScsXG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2V0RmlsZVR5cGVFeHRlbnNpb24gKG1pbWVUeXBlKSB7XG4gIC8vIFJlbW92ZSB0aGUgOyBiaXQgaW4gJ3ZpZGVvL3gtbWF0cm9za2E7Y29kZWNzPWF2YzEnXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICBbbWltZVR5cGVdID0gbWltZVR5cGUuc3BsaXQoJzsnLCAxKVxuICByZXR1cm4gbWltZVRvRXh0ZW5zaW9uc1ttaW1lVHlwZV0gfHwgbnVsbFxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXRTb2NrZXRIb3N0ICh1cmwpIHtcbiAgLy8gZ2V0IHRoZSBob3N0IGRvbWFpblxuICBjb25zdCByZWdleCA9IC9eKD86aHR0cHM/OlxcL1xcL3xcXC9cXC8pPyg/OlteQFxcbl0rQCk/KD86d3d3XFwuKT8oW15cXG5dKykvaVxuICBjb25zdCBob3N0ID0gcmVnZXguZXhlYyh1cmwpWzFdXG4gIGNvbnN0IHNvY2tldFByb3RvY29sID0gL15odHRwOlxcL1xcLy9pLnRlc3QodXJsKSA/ICd3cycgOiAnd3NzJ1xuXG4gIHJldHVybiBgJHtzb2NrZXRQcm90b2NvbH06Ly8ke2hvc3R9YFxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXRTcGVlZCAoZmlsZVByb2dyZXNzKSB7XG4gIGlmICghZmlsZVByb2dyZXNzLmJ5dGVzVXBsb2FkZWQpIHJldHVybiAwXG5cbiAgY29uc3QgdGltZUVsYXBzZWQgPSBEYXRlLm5vdygpIC0gZmlsZVByb2dyZXNzLnVwbG9hZFN0YXJ0ZWRcbiAgY29uc3QgdXBsb2FkU3BlZWQgPSBmaWxlUHJvZ3Jlc3MuYnl0ZXNVcGxvYWRlZCAvICh0aW1lRWxhcHNlZCAvIDEwMDApXG4gIHJldHVybiB1cGxvYWRTcGVlZFxufVxuIiwiLyoqXG4gKiBHZXQgdGhlIGRlY2xhcmVkIHRleHQgZGlyZWN0aW9uIGZvciBhbiBlbGVtZW50LlxuICpcbiAqIEBwYXJhbSB7Tm9kZX0gZWxlbWVudFxuICogQHJldHVybnMge3N0cmluZ3x1bmRlZmluZWR9XG4gKi9cblxuZnVuY3Rpb24gZ2V0VGV4dERpcmVjdGlvbiAoZWxlbWVudCkge1xuICAvLyBUaGVyZSBpcyBhbm90aGVyIHdheSB0byBkZXRlcm1pbmUgdGV4dCBkaXJlY3Rpb24gdXNpbmcgZ2V0Q29tcHV0ZWRTdHlsZSgpLCBhcyBkb25lIGhlcmU6XG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9wZW5jaWwtanMvdGV4dC1kaXJlY3Rpb24vYmxvYi8yYTIzNWNlOTUwODliMzE4NWFjZWMzYjUxMzEzY2JiYTkyMWIzODExL3RleHQtZGlyZWN0aW9uLmpzXG4gIC8vXG4gIC8vIFdlIGRvIG5vdCB1c2UgdGhhdCBhcHByb2FjaCBiZWNhdXNlIHdlIGFyZSBpbnRlcmVzdGVkIHNwZWNpZmljYWxseSBpbiB0aGUgX2RlY2xhcmVkXyB0ZXh0IGRpcmVjdGlvbi5cbiAgLy8gSWYgbm8gdGV4dCBkaXJlY3Rpb24gaXMgZGVjbGFyZWQsIHdlIGhhdmUgdG8gcHJvdmlkZSBvdXIgb3duIGV4cGxpY2l0IHRleHQgZGlyZWN0aW9uIHNvIG91clxuICAvLyBiaWRpcmVjdGlvbmFsIENTUyBzdHlsZSBzaGVldHMgd29yay5cbiAgd2hpbGUgKGVsZW1lbnQgJiYgIWVsZW1lbnQuZGlyKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgZWxlbWVudCA9IGVsZW1lbnQucGFyZW50Tm9kZVxuICB9XG4gIHJldHVybiBlbGVtZW50Py5kaXJcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRUZXh0RGlyZWN0aW9uXG4iLCIvKipcbiAqIEFkZHMgemVybyB0byBzdHJpbmdzIHNob3J0ZXIgdGhhbiB0d28gY2hhcmFjdGVycy5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBwYWQgKG51bWJlcikge1xuICByZXR1cm4gbnVtYmVyIDwgMTAgPyBgMCR7bnVtYmVyfWAgOiBudW1iZXIudG9TdHJpbmcoKVxufVxuXG4vKipcbiAqIFJldHVybnMgYSB0aW1lc3RhbXAgaW4gdGhlIGZvcm1hdCBvZiBgaG91cnM6bWludXRlczpzZWNvbmRzYFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldFRpbWVTdGFtcCAoKSB7XG4gIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZSgpXG4gIGNvbnN0IGhvdXJzID0gcGFkKGRhdGUuZ2V0SG91cnMoKSlcbiAgY29uc3QgbWludXRlcyA9IHBhZChkYXRlLmdldE1pbnV0ZXMoKSlcbiAgY29uc3Qgc2Vjb25kcyA9IHBhZChkYXRlLmdldFNlY29uZHMoKSlcbiAgcmV0dXJuIGAke2hvdXJzfToke21pbnV0ZXN9OiR7c2Vjb25kc31gXG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGhhcyAob2JqZWN0LCBrZXkpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSlcbn1cbiIsIi8qKlxuICogQ2hlY2sgaWYgYW4gb2JqZWN0IGlzIGEgRE9NIGVsZW1lbnQuIER1Y2stdHlwaW5nIGJhc2VkIG9uIGBub2RlVHlwZWAuXG4gKlxuICogQHBhcmFtIHsqfSBvYmpcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0RPTUVsZW1lbnQgKG9iaikge1xuICByZXR1cm4gb2JqPy5ub2RlVHlwZSA9PT0gTm9kZS5FTEVNRU5UX05PREVcbn1cbiIsIi8qKlxuICogQ2hlY2tzIGlmIHRoZSBicm93c2VyIHN1cHBvcnRzIERyYWcgJiBEcm9wIChub3Qgc3VwcG9ydGVkIG9uIG1vYmlsZSBkZXZpY2VzLCBmb3IgZXhhbXBsZSkuXG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNEcmFnRHJvcFN1cHBvcnRlZCAoKSB7XG4gIGNvbnN0IGRpdiA9IGRvY3VtZW50LmJvZHlcblxuICBpZiAoISgnZHJhZ2dhYmxlJyBpbiBkaXYpIHx8ICEoJ29uZHJhZ3N0YXJ0JyBpbiBkaXYgJiYgJ29uZHJvcCcgaW4gZGl2KSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgaWYgKCEoJ0Zvcm1EYXRhJyBpbiB3aW5kb3cpKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICBpZiAoISgnRmlsZVJlYWRlcicgaW4gd2luZG93KSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgcmV0dXJuIHRydWVcbn1cbiIsImZ1bmN0aW9uIGlzTmV0d29ya0Vycm9yICh4aHIpIHtcbiAgaWYgKCF4aHIpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuICByZXR1cm4gKHhoci5yZWFkeVN0YXRlICE9PSAwICYmIHhoci5yZWFkeVN0YXRlICE9PSA0KSB8fCB4aHIuc3RhdHVzID09PSAwXG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNOZXR3b3JrRXJyb3JcbiIsIi8qKlxuICogQ2hlY2sgaWYgYSBVUkwgc3RyaW5nIGlzIGFuIG9iamVjdCBVUkwgZnJvbSBgVVJMLmNyZWF0ZU9iamVjdFVSTGAuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybFxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNPYmplY3RVUkwgKHVybCkge1xuICByZXR1cm4gdXJsLnN0YXJ0c1dpdGgoJ2Jsb2I6Jylcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNQcmV2aWV3U3VwcG9ydGVkIChmaWxlVHlwZSkge1xuICBpZiAoIWZpbGVUeXBlKSByZXR1cm4gZmFsc2VcbiAgLy8gbGlzdCBvZiBpbWFnZXMgdGhhdCBicm93c2VycyBjYW4gcHJldmlld1xuICByZXR1cm4gL15bXi9dK1xcLyhqcGU/Z3xnaWZ8cG5nfHN2Z3xzdmdcXCt4bWx8Ym1wfHdlYnB8YXZpZikkLy50ZXN0KGZpbGVUeXBlKVxufVxuIiwiLy8gX19fV2h5IG5vdCBhZGQgdGhlIG1pbWUtdHlwZXMgcGFja2FnZT9cbi8vICAgIEl0J3MgMTkuN2tCIGd6aXBwZWQsIGFuZCB3ZSBvbmx5IG5lZWQgbWltZSB0eXBlcyBmb3Igd2VsbC1rbm93biBleHRlbnNpb25zIChmb3IgZmlsZSBwcmV2aWV3cykuXG4vLyBfX19XaGVyZSB0byB0YWtlIG5ldyBleHRlbnNpb25zIGZyb20/XG4vLyAgICBodHRwczovL2dpdGh1Yi5jb20vanNodHRwL21pbWUtZGIvYmxvYi9tYXN0ZXIvZGIuanNvblxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgbWQ6ICd0ZXh0L21hcmtkb3duJyxcbiAgbWFya2Rvd246ICd0ZXh0L21hcmtkb3duJyxcbiAgbXA0OiAndmlkZW8vbXA0JyxcbiAgbXAzOiAnYXVkaW8vbXAzJyxcbiAgc3ZnOiAnaW1hZ2Uvc3ZnK3htbCcsXG4gIGpwZzogJ2ltYWdlL2pwZWcnLFxuICBwbmc6ICdpbWFnZS9wbmcnLFxuICBnaWY6ICdpbWFnZS9naWYnLFxuICBoZWljOiAnaW1hZ2UvaGVpYycsXG4gIGhlaWY6ICdpbWFnZS9oZWlmJyxcbiAgeWFtbDogJ3RleHQveWFtbCcsXG4gIHltbDogJ3RleHQveWFtbCcsXG4gIGNzdjogJ3RleHQvY3N2JyxcbiAgdHN2OiAndGV4dC90YWItc2VwYXJhdGVkLXZhbHVlcycsXG4gIHRhYjogJ3RleHQvdGFiLXNlcGFyYXRlZC12YWx1ZXMnLFxuICBhdmk6ICd2aWRlby94LW1zdmlkZW8nLFxuICBta3M6ICd2aWRlby94LW1hdHJvc2thJyxcbiAgbWt2OiAndmlkZW8veC1tYXRyb3NrYScsXG4gIG1vdjogJ3ZpZGVvL3F1aWNrdGltZScsXG4gIGRvYzogJ2FwcGxpY2F0aW9uL21zd29yZCcsXG4gIGRvY206ICdhcHBsaWNhdGlvbi92bmQubXMtd29yZC5kb2N1bWVudC5tYWNyb2VuYWJsZWQuMTInLFxuICBkb2N4OiAnYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LndvcmRwcm9jZXNzaW5nbWwuZG9jdW1lbnQnLFxuICBkb3Q6ICdhcHBsaWNhdGlvbi9tc3dvcmQnLFxuICBkb3RtOiAnYXBwbGljYXRpb24vdm5kLm1zLXdvcmQudGVtcGxhdGUubWFjcm9lbmFibGVkLjEyJyxcbiAgZG90eDogJ2FwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC53b3JkcHJvY2Vzc2luZ21sLnRlbXBsYXRlJyxcbiAgeGxhOiAnYXBwbGljYXRpb24vdm5kLm1zLWV4Y2VsJyxcbiAgeGxhbTogJ2FwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbC5hZGRpbi5tYWNyb2VuYWJsZWQuMTInLFxuICB4bGM6ICdhcHBsaWNhdGlvbi92bmQubXMtZXhjZWwnLFxuICB4bGY6ICdhcHBsaWNhdGlvbi94LXhsaWZmK3htbCcsXG4gIHhsbTogJ2FwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbCcsXG4gIHhsczogJ2FwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbCcsXG4gIHhsc2I6ICdhcHBsaWNhdGlvbi92bmQubXMtZXhjZWwuc2hlZXQuYmluYXJ5Lm1hY3JvZW5hYmxlZC4xMicsXG4gIHhsc206ICdhcHBsaWNhdGlvbi92bmQubXMtZXhjZWwuc2hlZXQubWFjcm9lbmFibGVkLjEyJyxcbiAgeGxzeDogJ2FwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLnNoZWV0JyxcbiAgeGx0OiAnYXBwbGljYXRpb24vdm5kLm1zLWV4Y2VsJyxcbiAgeGx0bTogJ2FwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbC50ZW1wbGF0ZS5tYWNyb2VuYWJsZWQuMTInLFxuICB4bHR4OiAnYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnNwcmVhZHNoZWV0bWwudGVtcGxhdGUnLFxuICB4bHc6ICdhcHBsaWNhdGlvbi92bmQubXMtZXhjZWwnLFxuICB0eHQ6ICd0ZXh0L3BsYWluJyxcbiAgdGV4dDogJ3RleHQvcGxhaW4nLFxuICBjb25mOiAndGV4dC9wbGFpbicsXG4gIGxvZzogJ3RleHQvcGxhaW4nLFxuICBwZGY6ICdhcHBsaWNhdGlvbi9wZGYnLFxuICB6aXA6ICdhcHBsaWNhdGlvbi96aXAnLFxuICAnN3onOiAnYXBwbGljYXRpb24veC03ei1jb21wcmVzc2VkJyxcbiAgcmFyOiAnYXBwbGljYXRpb24veC1yYXItY29tcHJlc3NlZCcsXG4gIHRhcjogJ2FwcGxpY2F0aW9uL3gtdGFyJyxcbiAgZ3o6ICdhcHBsaWNhdGlvbi9nemlwJyxcbiAgZG1nOiAnYXBwbGljYXRpb24veC1hcHBsZS1kaXNraW1hZ2UnLFxufVxuIiwiY29uc3Qgc2Vjb25kc1RvVGltZSA9IHJlcXVpcmUoJy4vc2Vjb25kc1RvVGltZScpXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcHJldHR5RVRBIChzZWNvbmRzKSB7XG4gIGNvbnN0IHRpbWUgPSBzZWNvbmRzVG9UaW1lKHNlY29uZHMpXG5cbiAgLy8gT25seSBkaXNwbGF5IGhvdXJzIGFuZCBtaW51dGVzIGlmIHRoZXkgYXJlIGdyZWF0ZXIgdGhhbiAwIGJ1dCBhbHdheXNcbiAgLy8gZGlzcGxheSBtaW51dGVzIGlmIGhvdXJzIGlzIGJlaW5nIGRpc3BsYXllZFxuICAvLyBEaXNwbGF5IGEgbGVhZGluZyB6ZXJvIGlmIHRoZSB0aGVyZSBpcyBhIHByZWNlZGluZyB1bml0OiAxbSAwNXMsIGJ1dCA1c1xuICBjb25zdCBob3Vyc1N0ciA9IHRpbWUuaG91cnMgPT09IDAgPyAnJyA6IGAke3RpbWUuaG91cnN9aGBcbiAgY29uc3QgbWludXRlc1N0ciA9IHRpbWUubWludXRlcyA9PT0gMCA/ICcnIDogYCR7dGltZS5ob3VycyA9PT0gMCA/IHRpbWUubWludXRlcyA6IGAgJHt0aW1lLm1pbnV0ZXMudG9TdHJpbmcoMTApLnBhZFN0YXJ0KDIsICcwJyl9YH1tYFxuICBjb25zdCBzZWNvbmRzU3RyID0gdGltZS5ob3VycyAhPT0gMCA/ICcnIDogYCR7dGltZS5taW51dGVzID09PSAwID8gdGltZS5zZWNvbmRzIDogYCAke3RpbWUuc2Vjb25kcy50b1N0cmluZygxMCkucGFkU3RhcnQoMiwgJzAnKX1gfXNgXG5cbiAgcmV0dXJuIGAke2hvdXJzU3RyfSR7bWludXRlc1N0cn0ke3NlY29uZHNTdHJ9YFxufVxuIiwiY29uc3QgZ2V0RmlsZU5hbWVBbmRFeHRlbnNpb24gPSByZXF1aXJlKCcuL2dldEZpbGVOYW1lQW5kRXh0ZW5zaW9uJylcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiByZW1vdGVGaWxlT2JqVG9Mb2NhbCAoZmlsZSkge1xuICByZXR1cm4ge1xuICAgIC4uLmZpbGUsXG4gICAgdHlwZTogZmlsZS5taW1lVHlwZSxcbiAgICBleHRlbnNpb246IGZpbGUubmFtZSA/IGdldEZpbGVOYW1lQW5kRXh0ZW5zaW9uKGZpbGUubmFtZSkuZXh0ZW5zaW9uIDogbnVsbCxcbiAgfVxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzZWNvbmRzVG9UaW1lIChyYXdTZWNvbmRzKSB7XG4gIGNvbnN0IGhvdXJzID0gTWF0aC5mbG9vcihyYXdTZWNvbmRzIC8gMzYwMCkgJSAyNFxuICBjb25zdCBtaW51dGVzID0gTWF0aC5mbG9vcihyYXdTZWNvbmRzIC8gNjApICUgNjBcbiAgY29uc3Qgc2Vjb25kcyA9IE1hdGguZmxvb3IocmF3U2Vjb25kcyAlIDYwKVxuXG4gIHJldHVybiB7IGhvdXJzLCBtaW51dGVzLCBzZWNvbmRzIH1cbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2V0dGxlIChwcm9taXNlcykge1xuICBjb25zdCByZXNvbHV0aW9ucyA9IFtdXG4gIGNvbnN0IHJlamVjdGlvbnMgPSBbXVxuICBmdW5jdGlvbiByZXNvbHZlZCAodmFsdWUpIHtcbiAgICByZXNvbHV0aW9ucy5wdXNoKHZhbHVlKVxuICB9XG4gIGZ1bmN0aW9uIHJlamVjdGVkIChlcnJvcikge1xuICAgIHJlamVjdGlvbnMucHVzaChlcnJvcilcbiAgfVxuXG4gIGNvbnN0IHdhaXQgPSBQcm9taXNlLmFsbChcbiAgICBwcm9taXNlcy5tYXAoKHByb21pc2UpID0+IHByb21pc2UudGhlbihyZXNvbHZlZCwgcmVqZWN0ZWQpKSxcbiAgKVxuXG4gIHJldHVybiB3YWl0LnRoZW4oKCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICBzdWNjZXNzZnVsOiByZXNvbHV0aW9ucyxcbiAgICAgIGZhaWxlZDogcmVqZWN0aW9ucyxcbiAgICB9XG4gIH0pXG59XG4iLCIvKipcbiAqIENvbnZlcnRzIGxpc3QgaW50byBhcnJheVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmZyb21cbiIsIi8qKlxuICogVHJ1bmNhdGVzIGEgc3RyaW5nIHRvIHRoZSBnaXZlbiBudW1iZXIgb2YgY2hhcnMgKG1heExlbmd0aCkgYnkgaW5zZXJ0aW5nICcuLi4nIGluIHRoZSBtaWRkbGUgb2YgdGhhdCBzdHJpbmcuXG4gKiBQYXJ0aWFsbHkgdGFrZW4gZnJvbSBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNTcyMzI3NC8zMTkyNDcwLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgLSBzdHJpbmcgdG8gYmUgdHJ1bmNhdGVkXG4gKiBAcGFyYW0ge251bWJlcn0gbWF4TGVuZ3RoIC0gbWF4aW11bSBzaXplIG9mIHRoZSByZXN1bHRpbmcgc3RyaW5nXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5jb25zdCBzZXBhcmF0b3IgPSAnLi4uJ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB0cnVuY2F0ZVN0cmluZyAoc3RyaW5nLCBtYXhMZW5ndGgpIHtcbiAgLy8gUmV0dXJuIHRoZSBlbXB0eSBzdHJpbmcgaWYgbWF4TGVuZ3RoIGlzIHplcm9cbiAgaWYgKG1heExlbmd0aCA9PT0gMCkgcmV0dXJuICcnXG4gIC8vIFJldHVybiBvcmlnaW5hbCBzdHJpbmcgaWYgaXQncyBhbHJlYWR5IHNob3J0ZXIgdGhhbiBtYXhMZW5ndGhcbiAgaWYgKHN0cmluZy5sZW5ndGggPD0gbWF4TGVuZ3RoKSByZXR1cm4gc3RyaW5nXG4gIC8vIFJldHVybiB0cnVuY2F0ZWQgc3Vic3RyaW5nIGFwcGVuZGVkIG9mIHRoZSBlbGxpcHNpcyBjaGFyIGlmIHN0cmluZyBjYW4ndCBiZSBtZWFuaW5nZnVsbHkgdHJ1bmNhdGVkXG4gIGlmIChtYXhMZW5ndGggPD0gc2VwYXJhdG9yLmxlbmd0aCArIDEpIHJldHVybiBgJHtzdHJpbmcuc2xpY2UoMCwgbWF4TGVuZ3RoIC0gMSl94oCmYFxuXG4gIGNvbnN0IGNoYXJzVG9TaG93ID0gbWF4TGVuZ3RoIC0gc2VwYXJhdG9yLmxlbmd0aFxuICBjb25zdCBmcm9udENoYXJzID0gTWF0aC5jZWlsKGNoYXJzVG9TaG93IC8gMilcbiAgY29uc3QgYmFja0NoYXJzID0gTWF0aC5mbG9vcihjaGFyc1RvU2hvdyAvIDIpXG5cbiAgcmV0dXJuIHN0cmluZy5zbGljZSgwLCBmcm9udENoYXJzKSArIHNlcGFyYXRvciArIHN0cmluZy5zbGljZSgtYmFja0NoYXJzKVxufVxuIiwiY29uc3QgeyBoIH0gPSByZXF1aXJlKCdwcmVhY3QnKVxuXG5tb2R1bGUuZXhwb3J0cyA9ICgpID0+IHtcbiAgcmV0dXJuIChcbiAgICA8c3ZnIGFyaWEtaGlkZGVuPVwidHJ1ZVwiIGZvY3VzYWJsZT1cImZhbHNlXCIgZmlsbD1cIiMwMDk3RENcIiB3aWR0aD1cIjY2XCIgaGVpZ2h0PVwiNTVcIiB2aWV3Qm94PVwiMCAwIDY2IDU1XCI+XG4gICAgICA8cGF0aCBkPVwiTTU3LjMgOC40MzNjNC41OSAwIDguMSAzLjUxIDguMSA4LjF2MjkuN2MwIDQuNTktMy41MSA4LjEtOC4xIDguMUg4LjdjLTQuNTkgMC04LjEtMy41MS04LjEtOC4xdi0yOS43YzAtNC41OSAzLjUxLTguMSA4LjEtOC4xaDkuNDVsNC41OS03LjAyYy41NC0uNTQgMS4zNS0xLjA4IDIuMTYtMS4wOGgxNi4yYy44MSAwIDEuNjIuNTQgMi4xNiAxLjA4bDQuNTkgNy4wMmg5LjQ1ek0zMyAxNC42NGMtOC42MiAwLTE1LjM5MyA2Ljc3My0xNS4zOTMgMTUuMzkzIDAgOC42MiA2Ljc3MyAxNS4zOTMgMTUuMzkzIDE1LjM5MyA4LjYyIDAgMTUuMzkzLTYuNzczIDE1LjM5My0xNS4zOTMgMC04LjYyLTYuNzczLTE1LjM5My0xNS4zOTMtMTUuMzkzek0zMyA0MGMtNS42NDggMC05Ljk2Ni00LjMxOS05Ljk2Ni05Ljk2NyAwLTUuNjQ3IDQuMzE4LTkuOTY2IDkuOTY2LTkuOTY2czkuOTY2IDQuMzE5IDkuOTY2IDkuOTY2QzQyLjk2NiAzNS42ODEgMzguNjQ4IDQwIDMzIDQwelwiIGZpbGxSdWxlPVwiZXZlbm9kZFwiIC8+XG4gICAgPC9zdmc+XG4gIClcbn1cbiIsIi8qIGVzbGludC1kaXNhYmxlIGpzeC1hMTF5L21lZGlhLWhhcy1jYXB0aW9uICovXG5jb25zdCB7IGgsIENvbXBvbmVudCB9ID0gcmVxdWlyZSgncHJlYWN0JylcbmNvbnN0IFNuYXBzaG90QnV0dG9uID0gcmVxdWlyZSgnLi9TbmFwc2hvdEJ1dHRvbicpXG5jb25zdCBSZWNvcmRCdXR0b24gPSByZXF1aXJlKCcuL1JlY29yZEJ1dHRvbicpXG5jb25zdCBSZWNvcmRpbmdMZW5ndGggPSByZXF1aXJlKCcuL1JlY29yZGluZ0xlbmd0aCcpXG5jb25zdCBWaWRlb1NvdXJjZVNlbGVjdCA9IHJlcXVpcmUoJy4vVmlkZW9Tb3VyY2VTZWxlY3QnKVxuY29uc3QgU3VibWl0QnV0dG9uID0gcmVxdWlyZSgnLi9TdWJtaXRCdXR0b24nKVxuY29uc3QgRGlzY2FyZEJ1dHRvbiA9IHJlcXVpcmUoJy4vRGlzY2FyZEJ1dHRvbicpXG5cbmZ1bmN0aW9uIGlzTW9kZUF2YWlsYWJsZSAobW9kZXMsIG1vZGUpIHtcbiAgcmV0dXJuIG1vZGVzLmluZGV4T2YobW9kZSkgIT09IC0xXG59XG5cbmNsYXNzIENhbWVyYVNjcmVlbiBleHRlbmRzIENvbXBvbmVudCB7XG4gIGNvbXBvbmVudERpZE1vdW50ICgpIHtcbiAgICBjb25zdCB7IG9uRm9jdXMgfSA9IHRoaXMucHJvcHNcbiAgICBvbkZvY3VzKClcbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50ICgpIHtcbiAgICBjb25zdCB7IG9uU3RvcCB9ID0gdGhpcy5wcm9wc1xuICAgIG9uU3RvcCgpXG4gIH1cblxuICByZW5kZXIgKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIHNyYyxcbiAgICAgIHJlY29yZGVkVmlkZW8sXG4gICAgICByZWNvcmRpbmcsXG4gICAgICBtb2RlcyxcbiAgICAgIHN1cHBvcnRzUmVjb3JkaW5nLFxuICAgICAgdmlkZW9Tb3VyY2VzLFxuICAgICAgc2hvd1ZpZGVvU291cmNlRHJvcGRvd24sXG4gICAgICBzaG93UmVjb3JkaW5nTGVuZ3RoLFxuICAgICAgb25TdWJtaXQsXG4gICAgICBpMThuLFxuICAgICAgbWlycm9yLFxuICAgICAgb25TbmFwc2hvdCxcbiAgICAgIG9uU3RhcnRSZWNvcmRpbmcsXG4gICAgICBvblN0b3BSZWNvcmRpbmcsXG4gICAgICBvbkRpc2NhcmRSZWNvcmRlZFZpZGVvLFxuICAgICAgcmVjb3JkaW5nTGVuZ3RoU2Vjb25kcyxcbiAgICB9ID0gdGhpcy5wcm9wc1xuXG4gICAgY29uc3QgaGFzUmVjb3JkZWRWaWRlbyA9ICEhcmVjb3JkZWRWaWRlb1xuICAgIGNvbnN0IHNob3VsZFNob3dSZWNvcmRCdXR0b24gPSAhaGFzUmVjb3JkZWRWaWRlbyAmJiBzdXBwb3J0c1JlY29yZGluZyAmJiAoXG4gICAgICBpc01vZGVBdmFpbGFibGUobW9kZXMsICd2aWRlby1vbmx5JylcbiAgICAgIHx8IGlzTW9kZUF2YWlsYWJsZShtb2RlcywgJ2F1ZGlvLW9ubHknKVxuICAgICAgfHwgaXNNb2RlQXZhaWxhYmxlKG1vZGVzLCAndmlkZW8tYXVkaW8nKVxuICAgIClcbiAgICBjb25zdCBzaG91bGRTaG93U25hcHNob3RCdXR0b24gPSAhaGFzUmVjb3JkZWRWaWRlbyAmJiBpc01vZGVBdmFpbGFibGUobW9kZXMsICdwaWN0dXJlJylcbiAgICBjb25zdCBzaG91bGRTaG93UmVjb3JkaW5nTGVuZ3RoID0gc3VwcG9ydHNSZWNvcmRpbmcgJiYgc2hvd1JlY29yZGluZ0xlbmd0aCAmJiAhaGFzUmVjb3JkZWRWaWRlb1xuICAgIGNvbnN0IHNob3VsZFNob3dWaWRlb1NvdXJjZURyb3Bkb3duID0gc2hvd1ZpZGVvU291cmNlRHJvcGRvd24gJiYgdmlkZW9Tb3VyY2VzICYmIHZpZGVvU291cmNlcy5sZW5ndGggPiAxXG5cbiAgICBjb25zdCB2aWRlb1Byb3BzID0ge1xuICAgICAgcGxheXNpbmxpbmU6IHRydWUsXG4gICAgfVxuXG4gICAgaWYgKHJlY29yZGVkVmlkZW8pIHtcbiAgICAgIHZpZGVvUHJvcHMubXV0ZWQgPSBmYWxzZVxuICAgICAgdmlkZW9Qcm9wcy5jb250cm9scyA9IHRydWVcbiAgICAgIHZpZGVvUHJvcHMuc3JjID0gcmVjb3JkZWRWaWRlb1xuXG4gICAgICAvLyByZXNldCBzcmNPYmplY3QgaW4gZG9tLiBJZiBub3QgcmVzZXR0ZWQsIHN0cmVhbSBzdGlja3MgaW4gZWxlbWVudFxuICAgICAgaWYgKHRoaXMudmlkZW9FbGVtZW50KSB7XG4gICAgICAgIHRoaXMudmlkZW9FbGVtZW50LnNyY09iamVjdCA9IHVuZGVmaW5lZFxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2aWRlb1Byb3BzLm11dGVkID0gdHJ1ZVxuICAgICAgdmlkZW9Qcm9wcy5hdXRvcGxheSA9IHRydWVcbiAgICAgIHZpZGVvUHJvcHMuc3JjT2JqZWN0ID0gc3JjXG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwidXBweSB1cHB5LVdlYmNhbS1jb250YWluZXJcIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ1cHB5LVdlYmNhbS12aWRlb0NvbnRhaW5lclwiPlxuICAgICAgICAgIDx2aWRlb1xuICAgICAgICAgICAgLyogZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJldHVybi1hc3NpZ24gKi9cbiAgICAgICAgICAgIHJlZj17KHZpZGVvRWxlbWVudCkgPT4gKHRoaXMudmlkZW9FbGVtZW50ID0gdmlkZW9FbGVtZW50KX1cbiAgICAgICAgICAgIGNsYXNzTmFtZT17YHVwcHktV2ViY2FtLXZpZGVvICAke21pcnJvciA/ICd1cHB5LVdlYmNhbS12aWRlby0tbWlycm9yZWQnIDogJyd9YH1cbiAgICAgICAgICAgIC8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9qc3gtcHJvcHMtbm8tc3ByZWFkaW5nICovXG4gICAgICAgICAgICB7Li4udmlkZW9Qcm9wc31cbiAgICAgICAgICAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ1cHB5LVdlYmNhbS1mb290ZXJcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInVwcHktV2ViY2FtLXZpZGVvU291cmNlQ29udGFpbmVyXCI+XG4gICAgICAgICAgICB7c2hvdWxkU2hvd1ZpZGVvU291cmNlRHJvcGRvd25cbiAgICAgICAgICAgICAgPyBWaWRlb1NvdXJjZVNlbGVjdCh0aGlzLnByb3BzKVxuICAgICAgICAgICAgICA6IG51bGx9XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ1cHB5LVdlYmNhbS1idXR0b25Db250YWluZXJcIj5cbiAgICAgICAgICAgIHtzaG91bGRTaG93U25hcHNob3RCdXR0b24gJiYgPFNuYXBzaG90QnV0dG9uIG9uU25hcHNob3Q9e29uU25hcHNob3R9IGkxOG49e2kxOG59IC8+fVxuXG4gICAgICAgICAgICB7c2hvdWxkU2hvd1JlY29yZEJ1dHRvbiAmJiAoXG4gICAgICAgICAgICAgIDxSZWNvcmRCdXR0b25cbiAgICAgICAgICAgICAgICByZWNvcmRpbmc9e3JlY29yZGluZ31cbiAgICAgICAgICAgICAgICBvblN0YXJ0UmVjb3JkaW5nPXtvblN0YXJ0UmVjb3JkaW5nfVxuICAgICAgICAgICAgICAgIG9uU3RvcFJlY29yZGluZz17b25TdG9wUmVjb3JkaW5nfVxuICAgICAgICAgICAgICAgIGkxOG49e2kxOG59XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICApfVxuXG4gICAgICAgICAgICB7aGFzUmVjb3JkZWRWaWRlbyAmJiA8U3VibWl0QnV0dG9uIG9uU3VibWl0PXtvblN1Ym1pdH0gaTE4bj17aTE4bn0gLz59XG5cbiAgICAgICAgICAgIHtoYXNSZWNvcmRlZFZpZGVvICYmIDxEaXNjYXJkQnV0dG9uIG9uRGlzY2FyZD17b25EaXNjYXJkUmVjb3JkZWRWaWRlb30gaTE4bj17aTE4bn0gLz59XG4gICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInVwcHktV2ViY2FtLXJlY29yZGluZ0xlbmd0aFwiPlxuICAgICAgICAgICAge3Nob3VsZFNob3dSZWNvcmRpbmdMZW5ndGggJiYgKFxuICAgICAgICAgICAgICA8UmVjb3JkaW5nTGVuZ3RoIHJlY29yZGluZ0xlbmd0aFNlY29uZHM9e3JlY29yZGluZ0xlbmd0aFNlY29uZHN9IGkxOG49e2kxOG59IC8+XG4gICAgICAgICAgICApfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIClcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IENhbWVyYVNjcmVlblxuIiwiY29uc3QgeyBoIH0gPSByZXF1aXJlKCdwcmVhY3QnKVxuXG5mdW5jdGlvbiBEaXNjYXJkQnV0dG9uICh7IG9uRGlzY2FyZCwgaTE4biB9KSB7XG4gIHJldHVybiAoXG4gICAgPGJ1dHRvblxuICAgICAgY2xhc3NOYW1lPVwidXBweS11LXJlc2V0IHVwcHktYy1idG4gdXBweS1XZWJjYW0tYnV0dG9uIHVwcHktV2ViY2FtLWJ1dHRvbi0tZGlzY2FyZFwiXG4gICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgIHRpdGxlPXtpMThuKCdkaXNjYXJkUmVjb3JkZWRGaWxlJyl9XG4gICAgICBhcmlhLWxhYmVsPXtpMThuKCdkaXNjYXJkUmVjb3JkZWRGaWxlJyl9XG4gICAgICBvbkNsaWNrPXtvbkRpc2NhcmR9XG4gICAgICBkYXRhLXVwcHktc3VwZXItZm9jdXNhYmxlXG4gICAgPlxuICAgICAgPHN2Z1xuICAgICAgICB3aWR0aD1cIjEzXCJcbiAgICAgICAgaGVpZ2h0PVwiMTNcIlxuICAgICAgICB2aWV3Qm94PVwiMCAwIDEzIDEzXCJcbiAgICAgICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gICAgICAgIGFyaWEtaGlkZGVuPVwidHJ1ZVwiXG4gICAgICAgIGZvY3VzYWJsZT1cImZhbHNlXCJcbiAgICAgICAgY2xhc3NOYW1lPVwidXBweS1jLWljb25cIlxuICAgICAgPlxuICAgICAgICA8ZyBmaWxsPVwiI0ZGRlwiIGZpbGxSdWxlPVwiZXZlbm9kZFwiPlxuICAgICAgICAgIDxwYXRoIGQ9XCJNLjQ5NiAxMS4zNjdMMTEuMTAzLjc2bDEuNDE0IDEuNDE0TDEuOTExIDEyLjc4MXpcIiAvPlxuICAgICAgICAgIDxwYXRoIGQ9XCJNMTEuMTA0IDEyLjc4MkwuNDk3IDIuMTc1IDEuOTExLjc2bDEwLjYwNyAxMC42MDZ6XCIgLz5cbiAgICAgICAgPC9nPlxuICAgICAgPC9zdmc+XG4gICAgPC9idXR0b24+XG4gIClcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBEaXNjYXJkQnV0dG9uXG4iLCJjb25zdCB7IGggfSA9IHJlcXVpcmUoJ3ByZWFjdCcpXG5cbm1vZHVsZS5leHBvcnRzID0gKHByb3BzKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJ1cHB5LVdlYmNhbS1wZXJtaXNzb25zXCI+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInVwcHktV2ViY2FtLXBlcm1pc3NvbnNJY29uXCI+e3Byb3BzLmljb24oKX08L2Rpdj5cbiAgICAgIDxoMSBjbGFzc05hbWU9XCJ1cHB5LVdlYmNhbS10aXRsZVwiPntwcm9wcy5oYXNDYW1lcmEgPyBwcm9wcy5pMThuKCdhbGxvd0FjY2Vzc1RpdGxlJykgOiBwcm9wcy5pMThuKCdub0NhbWVyYVRpdGxlJyl9PC9oMT5cbiAgICAgIDxwPntwcm9wcy5oYXNDYW1lcmEgPyBwcm9wcy5pMThuKCdhbGxvd0FjY2Vzc0Rlc2NyaXB0aW9uJykgOiBwcm9wcy5pMThuKCdub0NhbWVyYURlc2NyaXB0aW9uJyl9PC9wPlxuICAgIDwvZGl2PlxuICApXG59XG4iLCJjb25zdCB7IGggfSA9IHJlcXVpcmUoJ3ByZWFjdCcpXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gUmVjb3JkQnV0dG9uICh7IHJlY29yZGluZywgb25TdGFydFJlY29yZGluZywgb25TdG9wUmVjb3JkaW5nLCBpMThuIH0pIHtcbiAgaWYgKHJlY29yZGluZykge1xuICAgIHJldHVybiAoXG4gICAgICA8YnV0dG9uXG4gICAgICAgIGNsYXNzTmFtZT1cInVwcHktdS1yZXNldCB1cHB5LWMtYnRuIHVwcHktV2ViY2FtLWJ1dHRvblwiXG4gICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgICB0aXRsZT17aTE4bignc3RvcFJlY29yZGluZycpfVxuICAgICAgICBhcmlhLWxhYmVsPXtpMThuKCdzdG9wUmVjb3JkaW5nJyl9XG4gICAgICAgIG9uQ2xpY2s9e29uU3RvcFJlY29yZGluZ31cbiAgICAgICAgZGF0YS11cHB5LXN1cGVyLWZvY3VzYWJsZVxuICAgICAgPlxuICAgICAgICA8c3ZnIGFyaWEtaGlkZGVuPVwidHJ1ZVwiIGZvY3VzYWJsZT1cImZhbHNlXCIgY2xhc3NOYW1lPVwidXBweS1jLWljb25cIiB3aWR0aD1cIjEwMFwiIGhlaWdodD1cIjEwMFwiIHZpZXdCb3g9XCIwIDAgMTAwIDEwMFwiPlxuICAgICAgICAgIDxyZWN0IHg9XCIxNVwiIHk9XCIxNVwiIHdpZHRoPVwiNzBcIiBoZWlnaHQ9XCI3MFwiIC8+XG4gICAgICAgIDwvc3ZnPlxuICAgICAgPC9idXR0b24+XG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8YnV0dG9uXG4gICAgICBjbGFzc05hbWU9XCJ1cHB5LXUtcmVzZXQgdXBweS1jLWJ0biB1cHB5LVdlYmNhbS1idXR0b25cIlxuICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICB0aXRsZT17aTE4bignc3RhcnRSZWNvcmRpbmcnKX1cbiAgICAgIGFyaWEtbGFiZWw9e2kxOG4oJ3N0YXJ0UmVjb3JkaW5nJyl9XG4gICAgICBvbkNsaWNrPXtvblN0YXJ0UmVjb3JkaW5nfVxuICAgICAgZGF0YS11cHB5LXN1cGVyLWZvY3VzYWJsZVxuICAgID5cbiAgICAgIDxzdmcgYXJpYS1oaWRkZW49XCJ0cnVlXCIgZm9jdXNhYmxlPVwiZmFsc2VcIiBjbGFzc05hbWU9XCJ1cHB5LWMtaWNvblwiIHdpZHRoPVwiMTAwXCIgaGVpZ2h0PVwiMTAwXCIgdmlld0JveD1cIjAgMCAxMDAgMTAwXCI+XG4gICAgICAgIDxjaXJjbGUgY3g9XCI1MFwiIGN5PVwiNTBcIiByPVwiNDBcIiAvPlxuICAgICAgPC9zdmc+XG4gICAgPC9idXR0b24+XG4gIClcbn1cbiIsImNvbnN0IHsgaCB9ID0gcmVxdWlyZSgncHJlYWN0JylcbmNvbnN0IGZvcm1hdFNlY29uZHMgPSByZXF1aXJlKCcuL2Zvcm1hdFNlY29uZHMnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIFJlY29yZGluZ0xlbmd0aCAoeyByZWNvcmRpbmdMZW5ndGhTZWNvbmRzLCBpMThuIH0pIHtcbiAgY29uc3QgZm9ybWF0dGVkUmVjb3JkaW5nTGVuZ3RoU2Vjb25kcyA9IGZvcm1hdFNlY29uZHMocmVjb3JkaW5nTGVuZ3RoU2Vjb25kcylcblxuICByZXR1cm4gKFxuICAgIDxzcGFuIGFyaWEtbGFiZWw9e2kxOG4oJ3JlY29yZGluZ0xlbmd0aCcsIHsgcmVjb3JkaW5nX2xlbmd0aDogZm9ybWF0dGVkUmVjb3JkaW5nTGVuZ3RoU2Vjb25kcyB9KX0+XG4gICAgICB7Zm9ybWF0dGVkUmVjb3JkaW5nTGVuZ3RoU2Vjb25kc31cbiAgICA8L3NwYW4+XG4gIClcbn1cbiIsImNvbnN0IHsgaCB9ID0gcmVxdWlyZSgncHJlYWN0JylcbmNvbnN0IENhbWVyYUljb24gPSByZXF1aXJlKCcuL0NhbWVyYUljb24nKVxuXG5tb2R1bGUuZXhwb3J0cyA9ICh7IG9uU25hcHNob3QsIGkxOG4gfSkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxidXR0b25cbiAgICAgIGNsYXNzTmFtZT1cInVwcHktdS1yZXNldCB1cHB5LWMtYnRuIHVwcHktV2ViY2FtLWJ1dHRvbiB1cHB5LVdlYmNhbS1idXR0b24tLXBpY3R1cmVcIlxuICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICB0aXRsZT17aTE4bigndGFrZVBpY3R1cmUnKX1cbiAgICAgIGFyaWEtbGFiZWw9e2kxOG4oJ3Rha2VQaWN0dXJlJyl9XG4gICAgICBvbkNsaWNrPXtvblNuYXBzaG90fVxuICAgICAgZGF0YS11cHB5LXN1cGVyLWZvY3VzYWJsZVxuICAgID5cbiAgICAgIHtDYW1lcmFJY29uKCl9XG4gICAgPC9idXR0b24+XG4gIClcbn1cbiIsImNvbnN0IHsgaCB9ID0gcmVxdWlyZSgncHJlYWN0JylcblxuZnVuY3Rpb24gU3VibWl0QnV0dG9uICh7IG9uU3VibWl0LCBpMThuIH0pIHtcbiAgcmV0dXJuIChcbiAgICA8YnV0dG9uXG4gICAgICBjbGFzc05hbWU9XCJ1cHB5LXUtcmVzZXQgdXBweS1jLWJ0biB1cHB5LVdlYmNhbS1idXR0b24gdXBweS1XZWJjYW0tYnV0dG9uLS1zdWJtaXRcIlxuICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICB0aXRsZT17aTE4bignc3VibWl0UmVjb3JkZWRGaWxlJyl9XG4gICAgICBhcmlhLWxhYmVsPXtpMThuKCdzdWJtaXRSZWNvcmRlZEZpbGUnKX1cbiAgICAgIG9uQ2xpY2s9e29uU3VibWl0fVxuICAgICAgZGF0YS11cHB5LXN1cGVyLWZvY3VzYWJsZVxuICAgID5cbiAgICAgIDxzdmdcbiAgICAgICAgd2lkdGg9XCIxMlwiXG4gICAgICAgIGhlaWdodD1cIjlcIlxuICAgICAgICB2aWV3Qm94PVwiMCAwIDEyIDlcIlxuICAgICAgICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgICAgICAgYXJpYS1oaWRkZW49XCJ0cnVlXCJcbiAgICAgICAgZm9jdXNhYmxlPVwiZmFsc2VcIlxuICAgICAgICBjbGFzc05hbWU9XCJ1cHB5LWMtaWNvblwiXG4gICAgICA+XG4gICAgICAgIDxwYXRoIGZpbGw9XCIjZmZmXCIgZmlsbFJ1bGU9XCJub256ZXJvXCIgZD1cIk0xMC42NiAwTDEyIDEuMzEgNC4xMzYgOSAwIDQuOTU2bDEuMzQtMS4zMUw0LjEzNiA2LjM4elwiIC8+XG4gICAgICA8L3N2Zz5cbiAgICA8L2J1dHRvbj5cbiAgKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFN1Ym1pdEJ1dHRvblxuIiwiY29uc3QgeyBoIH0gPSByZXF1aXJlKCdwcmVhY3QnKVxuXG5tb2R1bGUuZXhwb3J0cyA9ICh7IGN1cnJlbnREZXZpY2VJZCwgdmlkZW9Tb3VyY2VzLCBvbkNoYW5nZVZpZGVvU291cmNlIH0pID0+IHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cInVwcHktV2ViY2FtLXZpZGVvU291cmNlXCI+XG4gICAgICA8c2VsZWN0XG4gICAgICAgIGNsYXNzTmFtZT1cInVwcHktdS1yZXNldCB1cHB5LVdlYmNhbS12aWRlb1NvdXJjZS1zZWxlY3RcIlxuICAgICAgICBvbkNoYW5nZT17KGV2ZW50KSA9PiB7IG9uQ2hhbmdlVmlkZW9Tb3VyY2UoZXZlbnQudGFyZ2V0LnZhbHVlKSB9fVxuICAgICAgPlxuICAgICAgICB7dmlkZW9Tb3VyY2VzLm1hcCgodmlkZW9Tb3VyY2UpID0+IChcbiAgICAgICAgICA8b3B0aW9uXG4gICAgICAgICAgICBrZXk9e3ZpZGVvU291cmNlLmRldmljZUlkfVxuICAgICAgICAgICAgdmFsdWU9e3ZpZGVvU291cmNlLmRldmljZUlkfVxuICAgICAgICAgICAgc2VsZWN0ZWQ9e3ZpZGVvU291cmNlLmRldmljZUlkID09PSBjdXJyZW50RGV2aWNlSWR9XG4gICAgICAgICAgPlxuICAgICAgICAgICAge3ZpZGVvU291cmNlLmxhYmVsfVxuICAgICAgICAgIDwvb3B0aW9uPlxuICAgICAgICApKX1cbiAgICAgIDwvc2VsZWN0PlxuICAgIDwvZGl2PlxuICApXG59XG4iLCIvKipcbiAqIFRha2VzIGFuIEludGVnZXIgdmFsdWUgb2Ygc2Vjb25kcyAoZS5nLiA4MykgYW5kIGNvbnZlcnRzIGl0IGludG8gYSBodW1hbi1yZWFkYWJsZSBmb3JtYXR0ZWQgc3RyaW5nIChlLmcuICcxOjIzJykuXG4gKlxuICogQHBhcmFtIHtJbnRlZ2VyfSBzZWNvbmRzXG4gKiBAcmV0dXJucyB7c3RyaW5nfSB0aGUgZm9ybWF0dGVkIHNlY29uZHMgKGUuZy4gJzE6MjMnIGZvciAxIG1pbnV0ZSBhbmQgMjMgc2Vjb25kcylcbiAqXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZm9ybWF0U2Vjb25kcyAoc2Vjb25kcykge1xuICByZXR1cm4gYCR7TWF0aC5mbG9vcihcbiAgICBzZWNvbmRzIC8gNjAsXG4gICl9OiR7U3RyaW5nKHNlY29uZHMgJSA2MCkucGFkU3RhcnQoMiwgMCl9YFxufVxuIiwiY29uc3QgeyBoIH0gPSByZXF1aXJlKCdwcmVhY3QnKVxuY29uc3QgeyBVSVBsdWdpbiB9ID0gcmVxdWlyZSgnQHVwcHkvY29yZScpXG5jb25zdCBnZXRGaWxlVHlwZUV4dGVuc2lvbiA9IHJlcXVpcmUoJ0B1cHB5L3V0aWxzL2xpYi9nZXRGaWxlVHlwZUV4dGVuc2lvbicpXG5jb25zdCBtaW1lVHlwZXMgPSByZXF1aXJlKCdAdXBweS91dGlscy9saWIvbWltZVR5cGVzJylcbmNvbnN0IGNhbnZhc1RvQmxvYiA9IHJlcXVpcmUoJ0B1cHB5L3V0aWxzL2xpYi9jYW52YXNUb0Jsb2InKVxuY29uc3Qgc3VwcG9ydHNNZWRpYVJlY29yZGVyID0gcmVxdWlyZSgnLi9zdXBwb3J0c01lZGlhUmVjb3JkZXInKVxuY29uc3QgQ2FtZXJhSWNvbiA9IHJlcXVpcmUoJy4vQ2FtZXJhSWNvbicpXG5jb25zdCBDYW1lcmFTY3JlZW4gPSByZXF1aXJlKCcuL0NhbWVyYVNjcmVlbicpXG5jb25zdCBQZXJtaXNzaW9uc1NjcmVlbiA9IHJlcXVpcmUoJy4vUGVybWlzc2lvbnNTY3JlZW4nKVxuXG5jb25zdCBsb2NhbGUgPSByZXF1aXJlKCcuL2xvY2FsZS5qcycpXG4vKipcbiAqIE5vcm1hbGl6ZSBhIE1JTUUgdHlwZSBvciBmaWxlIGV4dGVuc2lvbiBpbnRvIGEgTUlNRSB0eXBlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBmaWxlVHlwZSAtIE1JTUUgdHlwZSBvciBhIGZpbGUgZXh0ZW5zaW9uIHByZWZpeGVkIHdpdGggYC5gLlxuICogQHJldHVybnMge3N0cmluZ3x1bmRlZmluZWR9IFRoZSBNSU1FIHR5cGUgb3IgYHVuZGVmaW5lZGAgaWYgdGhlIGZpbGVUeXBlIGlzIGFuIGV4dGVuc2lvbiBhbmQgaXMgbm90IGtub3duLlxuICovXG5mdW5jdGlvbiB0b01pbWVUeXBlIChmaWxlVHlwZSkge1xuICBpZiAoZmlsZVR5cGVbMF0gPT09ICcuJykge1xuICAgIHJldHVybiBtaW1lVHlwZXNbZmlsZVR5cGUuc2xpY2UoMSldXG4gIH1cbiAgcmV0dXJuIGZpbGVUeXBlXG59XG5cbi8qKlxuICogSXMgdGhpcyBNSU1FIHR5cGUgYSB2aWRlbz9cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWltZVR5cGUgLSBNSU1FIHR5cGUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNWaWRlb01pbWVUeXBlIChtaW1lVHlwZSkge1xuICByZXR1cm4gL152aWRlb1xcL1teKl0rJC8udGVzdChtaW1lVHlwZSlcbn1cblxuLyoqXG4gKiBJcyB0aGlzIE1JTUUgdHlwZSBhbiBpbWFnZT9cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWltZVR5cGUgLSBNSU1FIHR5cGUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNJbWFnZU1pbWVUeXBlIChtaW1lVHlwZSkge1xuICByZXR1cm4gL15pbWFnZVxcL1teKl0rJC8udGVzdChtaW1lVHlwZSlcbn1cblxuZnVuY3Rpb24gZ2V0TWVkaWFEZXZpY2VzICgpIHtcbiAgLy8gYnVnIGluIHRoZSBjb21wYXRpYmlsaXR5IGRhdGFcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbXBhdC9jb21wYXRcbiAgcmV0dXJuIG5hdmlnYXRvci5tZWRpYURldmljZXNcbn1cbi8qKlxuICogV2ViY2FtXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gY2xhc3MgV2ViY2FtIGV4dGVuZHMgVUlQbHVnaW4ge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZ2xvYmFsLXJlcXVpcmVcbiAgc3RhdGljIFZFUlNJT04gPSByZXF1aXJlKCcuLi9wYWNrYWdlLmpzb24nKS52ZXJzaW9uXG5cbiAgLy8gZW5hYmxlTWlycm9yIGlzIHVzZWQgdG8gdG9nZ2xlIG1pcnJvcmluZywgZm9yIGluc3RhbmNlIHdoZW4gZGlzY2FyZGluZyB0aGUgdmlkZW8sXG4gIC8vIHdoaWxlIGBvcHRzLm1pcnJvcmAgaXMgdXNlZCB0byByZW1lbWJlciB0aGUgaW5pdGlhbCB1c2VyIHNldHRpbmdcbiAgI2VuYWJsZU1pcnJvclxuXG4gIGNvbnN0cnVjdG9yICh1cHB5LCBvcHRzKSB7XG4gICAgc3VwZXIodXBweSwgb3B0cylcbiAgICB0aGlzLm1lZGlhRGV2aWNlcyA9IGdldE1lZGlhRGV2aWNlcygpXG4gICAgdGhpcy5zdXBwb3J0c1VzZXJNZWRpYSA9ICEhdGhpcy5tZWRpYURldmljZXNcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1nbG9iYWxzXG4gICAgdGhpcy5wcm90b2NvbCA9IGxvY2F0aW9uLnByb3RvY29sLm1hdGNoKC9odHRwcy9pKSA/ICdodHRwcycgOiAnaHR0cCdcbiAgICB0aGlzLmlkID0gdGhpcy5vcHRzLmlkIHx8ICdXZWJjYW0nXG4gICAgdGhpcy50eXBlID0gJ2FjcXVpcmVyJ1xuICAgIHRoaXMuY2FwdHVyZWRNZWRpYUZpbGUgPSBudWxsXG4gICAgdGhpcy5pY29uID0gKCkgPT4gKFxuICAgICAgPHN2ZyBhcmlhLWhpZGRlbj1cInRydWVcIiBmb2N1c2FibGU9XCJmYWxzZVwiIHdpZHRoPVwiMzJcIiBoZWlnaHQ9XCIzMlwiIHZpZXdCb3g9XCIwIDAgMzIgMzJcIj5cbiAgICAgICAgPGcgZmlsbD1cIm5vbmVcIiBmaWxsUnVsZT1cImV2ZW5vZGRcIj5cbiAgICAgICAgICA8cmVjdCBjbGFzc05hbWU9XCJ1cHB5LVByb3ZpZGVySWNvbkJnXCIgZmlsbD1cIiMwM0JGRUZcIiB3aWR0aD1cIjMyXCIgaGVpZ2h0PVwiMzJcIiByeD1cIjE2XCIgLz5cbiAgICAgICAgICA8cGF0aCBkPVwiTTIyIDExYzEuMTMzIDAgMiAuODY3IDIgMnY3LjMzM2MwIDEuMTM0LS44NjcgMi0yIDJIMTBjLTEuMTMzIDAtMi0uODY2LTItMlYxM2MwLTEuMTMzLjg2Ny0yIDItMmgyLjMzM2wxLjEzNC0xLjczM0MxMy42IDkuMTMzIDEzLjggOSAxNCA5aDRjLjIgMCAuNC4xMzMuNTMzLjI2N0wxOS42NjcgMTFIMjJ6bS02IDEuNTMzYTMuNzY0IDMuNzY0IDAgMCAwLTMuOCAzLjhjMCAyLjEyOSAxLjY3MiAzLjgwMSAzLjggMy44MDFzMy44LTEuNjcyIDMuOC0zLjhjMC0yLjEzLTEuNjcyLTMuODAxLTMuOC0zLjgwMXptMCA2LjI2MWMtMS4zOTUgMC0yLjQ2LTEuMDY2LTIuNDYtMi40NiAwLTEuMzk1IDEuMDY1LTIuNDYxIDIuNDYtMi40NjFzMi40NiAxLjA2NiAyLjQ2IDIuNDZjMCAxLjM5NS0xLjA2NSAyLjQ2MS0yLjQ2IDIuNDYxelwiIGZpbGw9XCIjRkZGXCIgZmlsbFJ1bGU9XCJub256ZXJvXCIgLz5cbiAgICAgICAgPC9nPlxuICAgICAgPC9zdmc+XG4gICAgKVxuXG4gICAgdGhpcy5kZWZhdWx0TG9jYWxlID0gbG9jYWxlXG5cbiAgICAvLyBzZXQgZGVmYXVsdCBvcHRpb25zXG4gICAgY29uc3QgZGVmYXVsdE9wdGlvbnMgPSB7XG4gICAgICBvbkJlZm9yZVNuYXBzaG90OiAoKSA9PiBQcm9taXNlLnJlc29sdmUoKSxcbiAgICAgIGNvdW50ZG93bjogZmFsc2UsXG4gICAgICBtb2RlczogW1xuICAgICAgICAndmlkZW8tYXVkaW8nLFxuICAgICAgICAndmlkZW8tb25seScsXG4gICAgICAgICdhdWRpby1vbmx5JyxcbiAgICAgICAgJ3BpY3R1cmUnLFxuICAgICAgXSxcbiAgICAgIG1pcnJvcjogdHJ1ZSxcbiAgICAgIHNob3dWaWRlb1NvdXJjZURyb3Bkb3duOiBmYWxzZSxcbiAgICAgIGZhY2luZ01vZGU6ICd1c2VyJyxcbiAgICAgIHByZWZlcnJlZEltYWdlTWltZVR5cGU6IG51bGwsXG4gICAgICBwcmVmZXJyZWRWaWRlb01pbWVUeXBlOiBudWxsLFxuICAgICAgc2hvd1JlY29yZGluZ0xlbmd0aDogZmFsc2UsXG4gICAgfVxuXG4gICAgdGhpcy5vcHRzID0geyAuLi5kZWZhdWx0T3B0aW9ucywgLi4ub3B0cyB9XG4gICAgdGhpcy5pMThuSW5pdCgpXG4gICAgdGhpcy50aXRsZSA9IHRoaXMuaTE4bigncGx1Z2luTmFtZUNhbWVyYScpXG5cbiAgICB0aGlzLiNlbmFibGVNaXJyb3IgPSB0aGlzLm9wdHMubWlycm9yXG5cbiAgICB0aGlzLmluc3RhbGwgPSB0aGlzLmluc3RhbGwuYmluZCh0aGlzKVxuICAgIHRoaXMuc2V0UGx1Z2luU3RhdGUgPSB0aGlzLnNldFBsdWdpblN0YXRlLmJpbmQodGhpcylcbiAgICB0aGlzLnJlbmRlciA9IHRoaXMucmVuZGVyLmJpbmQodGhpcylcblxuICAgIC8vIENhbWVyYSBjb250cm9sc1xuICAgIHRoaXMuc3RhcnQgPSB0aGlzLnN0YXJ0LmJpbmQodGhpcylcbiAgICB0aGlzLnN0b3AgPSB0aGlzLnN0b3AuYmluZCh0aGlzKVxuICAgIHRoaXMudGFrZVNuYXBzaG90ID0gdGhpcy50YWtlU25hcHNob3QuYmluZCh0aGlzKVxuICAgIHRoaXMuc3RhcnRSZWNvcmRpbmcgPSB0aGlzLnN0YXJ0UmVjb3JkaW5nLmJpbmQodGhpcylcbiAgICB0aGlzLnN0b3BSZWNvcmRpbmcgPSB0aGlzLnN0b3BSZWNvcmRpbmcuYmluZCh0aGlzKVxuICAgIHRoaXMuZGlzY2FyZFJlY29yZGVkVmlkZW8gPSB0aGlzLmRpc2NhcmRSZWNvcmRlZFZpZGVvLmJpbmQodGhpcylcbiAgICB0aGlzLnN1Ym1pdCA9IHRoaXMuc3VibWl0LmJpbmQodGhpcylcbiAgICB0aGlzLm9uZVR3b1RocmVlU21pbGUgPSB0aGlzLm9uZVR3b1RocmVlU21pbGUuYmluZCh0aGlzKVxuICAgIHRoaXMuZm9jdXMgPSB0aGlzLmZvY3VzLmJpbmQodGhpcylcbiAgICB0aGlzLmNoYW5nZVZpZGVvU291cmNlID0gdGhpcy5jaGFuZ2VWaWRlb1NvdXJjZS5iaW5kKHRoaXMpXG5cbiAgICB0aGlzLndlYmNhbUFjdGl2ZSA9IGZhbHNlXG5cbiAgICBpZiAodGhpcy5vcHRzLmNvdW50ZG93bikge1xuICAgICAgdGhpcy5vcHRzLm9uQmVmb3JlU25hcHNob3QgPSB0aGlzLm9uZVR3b1RocmVlU21pbGVcbiAgICB9XG5cbiAgICB0aGlzLnNldFBsdWdpblN0YXRlKHtcbiAgICAgIGhhc0NhbWVyYTogZmFsc2UsXG4gICAgICBjYW1lcmFSZWFkeTogZmFsc2UsXG4gICAgICBjYW1lcmFFcnJvcjogbnVsbCxcbiAgICAgIHJlY29yZGluZ0xlbmd0aFNlY29uZHM6IDAsXG4gICAgICB2aWRlb1NvdXJjZXM6IFtdLFxuICAgICAgY3VycmVudERldmljZUlkOiBudWxsLFxuICAgIH0pXG4gIH1cblxuICBzZXRPcHRpb25zIChuZXdPcHRzKSB7XG4gICAgc3VwZXIuc2V0T3B0aW9ucyh7XG4gICAgICAuLi5uZXdPcHRzLFxuICAgICAgdmlkZW9Db25zdHJhaW50czoge1xuICAgICAgICAvLyBNYXkgYmUgdW5kZWZpbmVkIGJ1dCAuLi4gaGFuZGxlcyB0aGF0XG4gICAgICAgIC4uLnRoaXMub3B0cy52aWRlb0NvbnN0cmFpbnRzLFxuICAgICAgICAuLi5uZXdPcHRzPy52aWRlb0NvbnN0cmFpbnRzLFxuICAgICAgfSxcbiAgICB9KVxuICB9XG5cbiAgaGFzQ2FtZXJhQ2hlY2sgKCkge1xuICAgIGlmICghdGhpcy5tZWRpYURldmljZXMpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoZmFsc2UpXG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMubWVkaWFEZXZpY2VzLmVudW1lcmF0ZURldmljZXMoKS50aGVuKGRldmljZXMgPT4ge1xuICAgICAgcmV0dXJuIGRldmljZXMuc29tZShkZXZpY2UgPT4gZGV2aWNlLmtpbmQgPT09ICd2aWRlb2lucHV0JylcbiAgICB9KVxuICB9XG5cbiAgaXNBdWRpb09ubHkgKCkge1xuICAgIHJldHVybiB0aGlzLm9wdHMubW9kZXMubGVuZ3RoID09PSAxICYmIHRoaXMub3B0cy5tb2Rlc1swXSA9PT0gJ2F1ZGlvLW9ubHknXG4gIH1cblxuICBnZXRDb25zdHJhaW50cyAoZGV2aWNlSWQgPSBudWxsKSB7XG4gICAgY29uc3QgYWNjZXB0c0F1ZGlvID0gdGhpcy5vcHRzLm1vZGVzLmluZGV4T2YoJ3ZpZGVvLWF1ZGlvJykgIT09IC0xXG4gICAgICB8fCB0aGlzLm9wdHMubW9kZXMuaW5kZXhPZignYXVkaW8tb25seScpICE9PSAtMVxuICAgIGNvbnN0IGFjY2VwdHNWaWRlbyA9ICF0aGlzLmlzQXVkaW9Pbmx5KClcbiAgICAgICAgJiYgKHRoaXMub3B0cy5tb2Rlcy5pbmRleE9mKCd2aWRlby1hdWRpbycpICE9PSAtMVxuICAgICAgICAgIHx8IHRoaXMub3B0cy5tb2Rlcy5pbmRleE9mKCd2aWRlby1vbmx5JykgIT09IC0xXG4gICAgICAgICAgfHwgdGhpcy5vcHRzLm1vZGVzLmluZGV4T2YoJ3BpY3R1cmUnKSAhPT0gLTEpXG5cbiAgICBjb25zdCB2aWRlb0NvbnN0cmFpbnRzID0ge1xuICAgICAgLi4uKHRoaXMub3B0cy52aWRlb0NvbnN0cmFpbnRzIHx8IHsgZmFjaW5nTW9kZTogdGhpcy5vcHRzLmZhY2luZ01vZGUgfSksXG4gICAgICAvLyBmYWNpbmdNb2RlIHRha2VzIHByZWNlZGVuY2Ugb3ZlciBkZXZpY2VJZCwgYW5kIG5vdCBuZWVkZWRcbiAgICAgIC8vIHdoZW4gc3BlY2lmaWMgZGV2aWNlIGlzIHNlbGVjdGVkXG4gICAgICAuLi4oZGV2aWNlSWQgPyB7IGRldmljZUlkLCBmYWNpbmdNb2RlOiBudWxsIH0gOiB7fSksXG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGF1ZGlvOiBhY2NlcHRzQXVkaW8sXG4gICAgICB2aWRlbzogYWNjZXB0c1ZpZGVvID8gdmlkZW9Db25zdHJhaW50cyA6IGZhbHNlLFxuICAgIH1cbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICBzdGFydCAob3B0aW9ucyA9IG51bGwpIHtcbiAgICBpZiAoIXRoaXMuc3VwcG9ydHNVc2VyTWVkaWEpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoJ1dlYmNhbSBhY2Nlc3Mgbm90IHN1cHBvcnRlZCcpKVxuICAgIH1cblxuICAgIHRoaXMud2ViY2FtQWN0aXZlID0gdHJ1ZVxuXG4gICAgaWYgKHRoaXMub3B0cy5taXJyb3IpIHtcbiAgICAgIHRoaXMuI2VuYWJsZU1pcnJvciA9IHRydWVcbiAgICB9XG5cbiAgICBjb25zdCBjb25zdHJhaW50cyA9IHRoaXMuZ2V0Q29uc3RyYWludHMob3B0aW9ucyAmJiBvcHRpb25zLmRldmljZUlkID8gb3B0aW9ucy5kZXZpY2VJZCA6IG51bGwpXG5cbiAgICB0aGlzLmhhc0NhbWVyYUNoZWNrKCkudGhlbihoYXNDYW1lcmEgPT4ge1xuICAgICAgdGhpcy5zZXRQbHVnaW5TdGF0ZSh7XG4gICAgICAgIGhhc0NhbWVyYSxcbiAgICAgIH0pXG5cbiAgICAgIC8vIGFzayB1c2VyIGZvciBhY2Nlc3MgdG8gdGhlaXIgY2FtZXJhXG4gICAgICByZXR1cm4gdGhpcy5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhKGNvbnN0cmFpbnRzKVxuICAgICAgICAudGhlbigoc3RyZWFtKSA9PiB7XG4gICAgICAgICAgdGhpcy5zdHJlYW0gPSBzdHJlYW1cblxuICAgICAgICAgIGxldCBjdXJyZW50RGV2aWNlSWQgPSBudWxsXG4gICAgICAgICAgY29uc3QgdHJhY2tzID0gdGhpcy5pc0F1ZGlvT25seSgpID8gc3RyZWFtLmdldEF1ZGlvVHJhY2tzKCkgOiBzdHJlYW0uZ2V0VmlkZW9UcmFja3MoKVxuXG4gICAgICAgICAgaWYgKCFvcHRpb25zIHx8ICFvcHRpb25zLmRldmljZUlkKSB7XG4gICAgICAgICAgICBjdXJyZW50RGV2aWNlSWQgPSB0cmFja3NbMF0uZ2V0U2V0dGluZ3MoKS5kZXZpY2VJZFxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0cmFja3MuZm9yRWFjaCgodHJhY2spID0+IHtcbiAgICAgICAgICAgICAgaWYgKHRyYWNrLmdldFNldHRpbmdzKCkuZGV2aWNlSWQgPT09IG9wdGlvbnMuZGV2aWNlSWQpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50RGV2aWNlSWQgPSB0cmFjay5nZXRTZXR0aW5ncygpLmRldmljZUlkXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gVXBkYXRlIHRoZSBzb3VyY2VzIG5vdywgc28gd2UgY2FuIGFjY2VzcyB0aGUgbmFtZXMuXG4gICAgICAgICAgdGhpcy51cGRhdGVWaWRlb1NvdXJjZXMoKVxuXG4gICAgICAgICAgdGhpcy5zZXRQbHVnaW5TdGF0ZSh7XG4gICAgICAgICAgICBjdXJyZW50RGV2aWNlSWQsXG4gICAgICAgICAgICBjYW1lcmFSZWFkeTogdHJ1ZSxcbiAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICAgIHRoaXMuc2V0UGx1Z2luU3RhdGUoe1xuICAgICAgICAgICAgY2FtZXJhUmVhZHk6IGZhbHNlLFxuICAgICAgICAgICAgY2FtZXJhRXJyb3I6IGVycixcbiAgICAgICAgICB9KVxuICAgICAgICAgIHRoaXMudXBweS5pbmZvKGVyci5tZXNzYWdlLCAnZXJyb3InKVxuICAgICAgICB9KVxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMge29iamVjdH1cbiAgICovXG4gIGdldE1lZGlhUmVjb3JkZXJPcHRpb25zICgpIHtcbiAgICBjb25zdCBvcHRpb25zID0ge31cblxuICAgIC8vIFRyeSB0byB1c2UgdGhlIGBvcHRzLnByZWZlcnJlZFZpZGVvTWltZVR5cGVgIG9yIG9uZSBvZiB0aGUgYGFsbG93ZWRGaWxlVHlwZXNgIGZvciB0aGUgcmVjb3JkaW5nLlxuICAgIC8vIElmIHRoZSBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCBpdCwgd2UnbGwgZmFsbCBiYWNrIHRvIHRoZSBicm93c2VyIGRlZmF1bHQgaW5zdGVhZC5cbiAgICAvLyBTYWZhcmkgZG9lc24ndCBoYXZlIHRoZSBgaXNUeXBlU3VwcG9ydGVkYCBBUEkuXG4gICAgaWYgKE1lZGlhUmVjb3JkZXIuaXNUeXBlU3VwcG9ydGVkKSB7XG4gICAgICBjb25zdCB7IHJlc3RyaWN0aW9ucyB9ID0gdGhpcy51cHB5Lm9wdHNcbiAgICAgIGxldCBwcmVmZXJyZWRWaWRlb01pbWVUeXBlcyA9IFtdXG4gICAgICBpZiAodGhpcy5vcHRzLnByZWZlcnJlZFZpZGVvTWltZVR5cGUpIHtcbiAgICAgICAgcHJlZmVycmVkVmlkZW9NaW1lVHlwZXMgPSBbdGhpcy5vcHRzLnByZWZlcnJlZFZpZGVvTWltZVR5cGVdXG4gICAgICB9IGVsc2UgaWYgKHJlc3RyaWN0aW9ucy5hbGxvd2VkRmlsZVR5cGVzKSB7XG4gICAgICAgIHByZWZlcnJlZFZpZGVvTWltZVR5cGVzID0gcmVzdHJpY3Rpb25zLmFsbG93ZWRGaWxlVHlwZXMubWFwKHRvTWltZVR5cGUpLmZpbHRlcihpc1ZpZGVvTWltZVR5cGUpXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGZpbHRlclN1cHBvcnRlZFR5cGVzID0gKGNhbmRpZGF0ZVR5cGUpID0+IE1lZGlhUmVjb3JkZXIuaXNUeXBlU3VwcG9ydGVkKGNhbmRpZGF0ZVR5cGUpXG4gICAgICAgICYmIGdldEZpbGVUeXBlRXh0ZW5zaW9uKGNhbmRpZGF0ZVR5cGUpXG4gICAgICBjb25zdCBhY2NlcHRhYmxlTWltZVR5cGVzID0gcHJlZmVycmVkVmlkZW9NaW1lVHlwZXMuZmlsdGVyKGZpbHRlclN1cHBvcnRlZFR5cGVzKVxuXG4gICAgICBpZiAoYWNjZXB0YWJsZU1pbWVUeXBlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZ1xuICAgICAgICBvcHRpb25zLm1pbWVUeXBlID0gYWNjZXB0YWJsZU1pbWVUeXBlc1swXVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBvcHRpb25zXG4gIH1cblxuICBzdGFydFJlY29yZGluZyAoKSB7XG4gICAgLy8gb25seSB1c2VkIGlmIHN1cHBvcnRzTWVkaWFSZWNvcmRlcigpIHJldHVybmVkIHRydWVcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29tcGF0L2NvbXBhdFxuICAgIHRoaXMucmVjb3JkZXIgPSBuZXcgTWVkaWFSZWNvcmRlcih0aGlzLnN0cmVhbSwgdGhpcy5nZXRNZWRpYVJlY29yZGVyT3B0aW9ucygpKVxuICAgIHRoaXMucmVjb3JkaW5nQ2h1bmtzID0gW11cbiAgICBsZXQgc3RvcHBpbmdCZWNhdXNlT2ZNYXhTaXplID0gZmFsc2VcbiAgICB0aGlzLnJlY29yZGVyLmFkZEV2ZW50TGlzdGVuZXIoJ2RhdGFhdmFpbGFibGUnLCAoZXZlbnQpID0+IHtcbiAgICAgIHRoaXMucmVjb3JkaW5nQ2h1bmtzLnB1c2goZXZlbnQuZGF0YSlcblxuICAgICAgY29uc3QgeyByZXN0cmljdGlvbnMgfSA9IHRoaXMudXBweS5vcHRzXG4gICAgICBpZiAodGhpcy5yZWNvcmRpbmdDaHVua3MubGVuZ3RoID4gMVxuICAgICAgICAgICYmIHJlc3RyaWN0aW9ucy5tYXhGaWxlU2l6ZSAhPSBudWxsXG4gICAgICAgICAgJiYgIXN0b3BwaW5nQmVjYXVzZU9mTWF4U2l6ZSkge1xuICAgICAgICBjb25zdCB0b3RhbFNpemUgPSB0aGlzLnJlY29yZGluZ0NodW5rcy5yZWR1Y2UoKGFjYywgY2h1bmspID0+IGFjYyArIGNodW5rLnNpemUsIDApXG4gICAgICAgIC8vIEV4Y2x1ZGUgdGhlIGluaXRpYWwgY2h1bmsgZnJvbSB0aGUgYXZlcmFnZSBzaXplIGNhbGN1bGF0aW9uIGJlY2F1c2UgaXQgaXMgbGlrZWx5IHRvIGJlIGEgdmVyeSBzbWFsbCBvdXRsaWVyXG4gICAgICAgIGNvbnN0IGF2ZXJhZ2VDaHVua1NpemUgPSAodG90YWxTaXplIC0gdGhpcy5yZWNvcmRpbmdDaHVua3NbMF0uc2l6ZSkgLyAodGhpcy5yZWNvcmRpbmdDaHVua3MubGVuZ3RoIC0gMSlcbiAgICAgICAgY29uc3QgZXhwZWN0ZWRFbmRDaHVua1NpemUgPSBhdmVyYWdlQ2h1bmtTaXplICogM1xuICAgICAgICBjb25zdCBtYXhTaXplID0gTWF0aC5tYXgoMCwgcmVzdHJpY3Rpb25zLm1heEZpbGVTaXplIC0gZXhwZWN0ZWRFbmRDaHVua1NpemUpXG5cbiAgICAgICAgaWYgKHRvdGFsU2l6ZSA+IG1heFNpemUpIHtcbiAgICAgICAgICBzdG9wcGluZ0JlY2F1c2VPZk1heFNpemUgPSB0cnVlXG4gICAgICAgICAgdGhpcy51cHB5LmluZm8odGhpcy5pMThuKCdyZWNvcmRpbmdTdG9wcGVkTWF4U2l6ZScpLCAnd2FybmluZycsIDQwMDApXG4gICAgICAgICAgdGhpcy5zdG9wUmVjb3JkaW5nKClcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXG5cbiAgICAvLyB1c2UgYSBcInRpbWUgc2xpY2VcIiBvZiA1MDBtczogb25kYXRhYXZhaWxhYmxlIHdpbGwgYmUgY2FsbGVkIGVhY2ggNTAwbXNcbiAgICAvLyBzbWFsbGVyIHRpbWUgc2xpY2VzIG1lYW4gd2UgY2FuIG1vcmUgYWNjdXJhdGVseSBjaGVjayB0aGUgbWF4IGZpbGUgc2l6ZSByZXN0cmljdGlvblxuICAgIHRoaXMucmVjb3JkZXIuc3RhcnQoNTAwKVxuXG4gICAgaWYgKHRoaXMub3B0cy5zaG93UmVjb3JkaW5nTGVuZ3RoKSB7XG4gICAgICAvLyBTdGFydCB0aGUgcmVjb3JkaW5nTGVuZ3RoVGltZXIgaWYgd2UgYXJlIHNob3dpbmcgdGhlIHJlY29yZGluZyBsZW5ndGguXG4gICAgICB0aGlzLnJlY29yZGluZ0xlbmd0aFRpbWVyID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICBjb25zdCBjdXJyZW50UmVjb3JkaW5nTGVuZ3RoID0gdGhpcy5nZXRQbHVnaW5TdGF0ZSgpLnJlY29yZGluZ0xlbmd0aFNlY29uZHNcbiAgICAgICAgdGhpcy5zZXRQbHVnaW5TdGF0ZSh7IHJlY29yZGluZ0xlbmd0aFNlY29uZHM6IGN1cnJlbnRSZWNvcmRpbmdMZW5ndGggKyAxIH0pXG4gICAgICB9LCAxMDAwKVxuICAgIH1cblxuICAgIHRoaXMuc2V0UGx1Z2luU3RhdGUoe1xuICAgICAgaXNSZWNvcmRpbmc6IHRydWUsXG4gICAgfSlcbiAgfVxuXG4gIHN0b3BSZWNvcmRpbmcgKCkge1xuICAgIGNvbnN0IHN0b3BwZWQgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgdGhpcy5yZWNvcmRlci5hZGRFdmVudExpc3RlbmVyKCdzdG9wJywgKCkgPT4ge1xuICAgICAgICByZXNvbHZlKClcbiAgICAgIH0pXG4gICAgICB0aGlzLnJlY29yZGVyLnN0b3AoKVxuXG4gICAgICBpZiAodGhpcy5vcHRzLnNob3dSZWNvcmRpbmdMZW5ndGgpIHtcbiAgICAgICAgLy8gU3RvcCB0aGUgcmVjb3JkaW5nTGVuZ3RoVGltZXIgaWYgd2UgYXJlIHNob3dpbmcgdGhlIHJlY29yZGluZyBsZW5ndGguXG4gICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5yZWNvcmRpbmdMZW5ndGhUaW1lcilcbiAgICAgICAgdGhpcy5zZXRQbHVnaW5TdGF0ZSh7IHJlY29yZGluZ0xlbmd0aFNlY29uZHM6IDAgfSlcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgcmV0dXJuIHN0b3BwZWQudGhlbigoKSA9PiB7XG4gICAgICB0aGlzLnNldFBsdWdpblN0YXRlKHtcbiAgICAgICAgaXNSZWNvcmRpbmc6IGZhbHNlLFxuICAgICAgfSlcbiAgICAgIHJldHVybiB0aGlzLmdldFZpZGVvKClcbiAgICB9KS50aGVuKChmaWxlKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICB0aGlzLmNhcHR1cmVkTWVkaWFGaWxlID0gZmlsZVxuICAgICAgICAvLyBjcmVhdGUgb2JqZWN0IHVybCBmb3IgY2FwdHVyZSByZXN1bHQgcHJldmlld1xuICAgICAgICB0aGlzLnNldFBsdWdpblN0YXRlKHtcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29tcGF0L2NvbXBhdFxuICAgICAgICAgIHJlY29yZGVkVmlkZW86IFVSTC5jcmVhdGVPYmplY3RVUkwoZmlsZS5kYXRhKSxcbiAgICAgICAgfSlcbiAgICAgICAgdGhpcy4jZW5hYmxlTWlycm9yID0gZmFsc2VcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAvLyBMb2dnaW5nIHRoZSBlcnJvciwgZXhlcHQgcmVzdHJpY3Rpb25zLCB3aGljaCBpcyBoYW5kbGVkIGluIENvcmVcbiAgICAgICAgaWYgKCFlcnIuaXNSZXN0cmljdGlvbikge1xuICAgICAgICAgIHRoaXMudXBweS5sb2coZXJyKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSkudGhlbigoKSA9PiB7XG4gICAgICB0aGlzLnJlY29yZGluZ0NodW5rcyA9IG51bGxcbiAgICAgIHRoaXMucmVjb3JkZXIgPSBudWxsXG4gICAgfSwgKGVycm9yKSA9PiB7XG4gICAgICB0aGlzLnJlY29yZGluZ0NodW5rcyA9IG51bGxcbiAgICAgIHRoaXMucmVjb3JkZXIgPSBudWxsXG4gICAgICB0aHJvdyBlcnJvclxuICAgIH0pXG4gIH1cblxuICBkaXNjYXJkUmVjb3JkZWRWaWRlbyAoKSB7XG4gICAgdGhpcy5zZXRQbHVnaW5TdGF0ZSh7IHJlY29yZGVkVmlkZW86IG51bGwgfSlcblxuICAgIGlmICh0aGlzLm9wdHMubWlycm9yKSB7XG4gICAgICB0aGlzLiNlbmFibGVNaXJyb3IgPSB0cnVlXG4gICAgfVxuXG4gICAgdGhpcy5jYXB0dXJlZE1lZGlhRmlsZSA9IG51bGxcbiAgfVxuXG4gIHN1Ym1pdCAoKSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICh0aGlzLmNhcHR1cmVkTWVkaWFGaWxlKSB7XG4gICAgICAgIHRoaXMudXBweS5hZGRGaWxlKHRoaXMuY2FwdHVyZWRNZWRpYUZpbGUpXG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAvLyBMb2dnaW5nIHRoZSBlcnJvciwgZXhlcHQgcmVzdHJpY3Rpb25zLCB3aGljaCBpcyBoYW5kbGVkIGluIENvcmVcbiAgICAgIGlmICghZXJyLmlzUmVzdHJpY3Rpb24pIHtcbiAgICAgICAgdGhpcy51cHB5LmxvZyhlcnIsICdlcnJvcicpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgc3RvcCAoKSB7XG4gICAgaWYgKHRoaXMuc3RyZWFtKSB7XG4gICAgICBjb25zdCBhdWRpb1RyYWNrcyA9IHRoaXMuc3RyZWFtLmdldEF1ZGlvVHJhY2tzKClcbiAgICAgIGNvbnN0IHZpZGVvVHJhY2tzID0gdGhpcy5zdHJlYW0uZ2V0VmlkZW9UcmFja3MoKVxuXG4gICAgICBhdWRpb1RyYWNrcy5jb25jYXQodmlkZW9UcmFja3MpLmZvckVhY2goKHRyYWNrKSA9PiB0cmFjay5zdG9wKCkpXG4gICAgfVxuXG4gICAgaWYgKHRoaXMucmVjb3JkZXIpIHtcbiAgICAgIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgIHRoaXMucmVjb3JkZXIuYWRkRXZlbnRMaXN0ZW5lcignc3RvcCcsIHJlc29sdmUsIHsgb25jZTogdHJ1ZSB9KVxuICAgICAgICB0aGlzLnJlY29yZGVyLnN0b3AoKVxuXG4gICAgICAgIGlmICh0aGlzLm9wdHMuc2hvd1JlY29yZGluZ0xlbmd0aCkge1xuICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5yZWNvcmRpbmdMZW5ndGhUaW1lcilcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG5cbiAgICB0aGlzLnJlY29yZGluZ0NodW5rcyA9IG51bGxcbiAgICB0aGlzLnJlY29yZGVyID0gbnVsbFxuICAgIHRoaXMud2ViY2FtQWN0aXZlID0gZmFsc2VcbiAgICB0aGlzLnN0cmVhbSA9IG51bGxcblxuICAgIHRoaXMuc2V0UGx1Z2luU3RhdGUoe1xuICAgICAgcmVjb3JkZWRWaWRlbzogbnVsbCxcbiAgICAgIGlzUmVjb3JkaW5nOiBmYWxzZSxcbiAgICAgIHJlY29yZGluZ0xlbmd0aFNlY29uZHM6IDAsXG4gICAgfSlcbiAgfVxuXG4gIGdldFZpZGVvRWxlbWVudCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuZWwucXVlcnlTZWxlY3RvcignLnVwcHktV2ViY2FtLXZpZGVvJylcbiAgfVxuXG4gIG9uZVR3b1RocmVlU21pbGUgKCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBsZXQgY291bnQgPSB0aGlzLm9wdHMuY291bnRkb3duXG5cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICAgICAgY29uc3QgY291bnREb3duID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICBpZiAoIXRoaXMud2ViY2FtQWN0aXZlKSB7XG4gICAgICAgICAgY2xlYXJJbnRlcnZhbChjb3VudERvd24pXG4gICAgICAgICAgdGhpcy5jYXB0dXJlSW5Qcm9ncmVzcyA9IGZhbHNlXG4gICAgICAgICAgcmV0dXJuIHJlamVjdChuZXcgRXJyb3IoJ1dlYmNhbSBpcyBub3QgYWN0aXZlJykpXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY291bnQgPiAwKSB7XG4gICAgICAgICAgdGhpcy51cHB5LmluZm8oYCR7Y291bnR9Li4uYCwgJ3dhcm5pbmcnLCA4MDApXG4gICAgICAgICAgY291bnQtLVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNsZWFySW50ZXJ2YWwoY291bnREb3duKVxuICAgICAgICAgIHRoaXMudXBweS5pbmZvKHRoaXMuaTE4bignc21pbGUnKSwgJ3N1Y2Nlc3MnLCAxNTAwKVxuICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gcmVzb2x2ZSgpLCAxNTAwKVxuICAgICAgICB9XG4gICAgICB9LCAxMDAwKVxuICAgIH0pXG4gIH1cblxuICB0YWtlU25hcHNob3QgKCkge1xuICAgIGlmICh0aGlzLmNhcHR1cmVJblByb2dyZXNzKSByZXR1cm5cblxuICAgIHRoaXMuY2FwdHVyZUluUHJvZ3Jlc3MgPSB0cnVlXG5cbiAgICB0aGlzLm9wdHMub25CZWZvcmVTbmFwc2hvdCgpLmNhdGNoKChlcnIpID0+IHtcbiAgICAgIGNvbnN0IG1lc3NhZ2UgPSB0eXBlb2YgZXJyID09PSAnb2JqZWN0JyA/IGVyci5tZXNzYWdlIDogZXJyXG4gICAgICB0aGlzLnVwcHkuaW5mbyhtZXNzYWdlLCAnZXJyb3InLCA1MDAwKVxuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihgb25CZWZvcmVTbmFwc2hvdDogJHttZXNzYWdlfWApKVxuICAgIH0pLnRoZW4oKCkgPT4ge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0SW1hZ2UoKVxuICAgIH0pLnRoZW4oKHRhZ0ZpbGUpID0+IHtcbiAgICAgIHRoaXMuY2FwdHVyZUluUHJvZ3Jlc3MgPSBmYWxzZVxuICAgICAgdHJ5IHtcbiAgICAgICAgdGhpcy51cHB5LmFkZEZpbGUodGFnRmlsZSlcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAvLyBMb2dnaW5nIHRoZSBlcnJvciwgZXhjZXB0IHJlc3RyaWN0aW9ucywgd2hpY2ggaXMgaGFuZGxlZCBpbiBDb3JlXG4gICAgICAgIGlmICghZXJyLmlzUmVzdHJpY3Rpb24pIHtcbiAgICAgICAgICB0aGlzLnVwcHkubG9nKGVycilcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIChlcnJvcikgPT4ge1xuICAgICAgdGhpcy5jYXB0dXJlSW5Qcm9ncmVzcyA9IGZhbHNlXG4gICAgICB0aHJvdyBlcnJvclxuICAgIH0pXG4gIH1cblxuICBnZXRJbWFnZSAoKSB7XG4gICAgY29uc3QgdmlkZW8gPSB0aGlzLmdldFZpZGVvRWxlbWVudCgpXG4gICAgaWYgKCF2aWRlbykge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcignTm8gdmlkZW8gZWxlbWVudCBmb3VuZCwgbGlrZWx5IGR1ZSB0byB0aGUgV2ViY2FtIHRhYiBiZWluZyBjbG9zZWQuJykpXG4gICAgfVxuXG4gICAgY29uc3Qgd2lkdGggPSB2aWRlby52aWRlb1dpZHRoXG4gICAgY29uc3QgaGVpZ2h0ID0gdmlkZW8udmlkZW9IZWlnaHRcblxuICAgIGNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpXG4gICAgY2FudmFzLndpZHRoID0gd2lkdGhcbiAgICBjYW52YXMuaGVpZ2h0ID0gaGVpZ2h0XG4gICAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJylcbiAgICBjdHguZHJhd0ltYWdlKHZpZGVvLCAwLCAwKVxuXG4gICAgY29uc3QgeyByZXN0cmljdGlvbnMgfSA9IHRoaXMudXBweS5vcHRzXG4gICAgbGV0IHByZWZlcnJlZEltYWdlTWltZVR5cGVzID0gW11cbiAgICBpZiAodGhpcy5vcHRzLnByZWZlcnJlZEltYWdlTWltZVR5cGUpIHtcbiAgICAgIHByZWZlcnJlZEltYWdlTWltZVR5cGVzID0gW3RoaXMub3B0cy5wcmVmZXJyZWRJbWFnZU1pbWVUeXBlXVxuICAgIH0gZWxzZSBpZiAocmVzdHJpY3Rpb25zLmFsbG93ZWRGaWxlVHlwZXMpIHtcbiAgICAgIHByZWZlcnJlZEltYWdlTWltZVR5cGVzID0gcmVzdHJpY3Rpb25zLmFsbG93ZWRGaWxlVHlwZXMubWFwKHRvTWltZVR5cGUpLmZpbHRlcihpc0ltYWdlTWltZVR5cGUpXG4gICAgfVxuXG4gICAgY29uc3QgbWltZVR5cGUgPSBwcmVmZXJyZWRJbWFnZU1pbWVUeXBlc1swXSB8fCAnaW1hZ2UvanBlZydcbiAgICBjb25zdCBleHQgPSBnZXRGaWxlVHlwZUV4dGVuc2lvbihtaW1lVHlwZSkgfHwgJ2pwZydcbiAgICBjb25zdCBuYW1lID0gYGNhbS0ke0RhdGUubm93KCl9LiR7ZXh0fWBcblxuICAgIHJldHVybiBjYW52YXNUb0Jsb2IoY2FudmFzLCBtaW1lVHlwZSkudGhlbigoYmxvYikgPT4ge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc291cmNlOiB0aGlzLmlkLFxuICAgICAgICBuYW1lLFxuICAgICAgICBkYXRhOiBuZXcgQmxvYihbYmxvYl0sIHsgdHlwZTogbWltZVR5cGUgfSksXG4gICAgICAgIHR5cGU6IG1pbWVUeXBlLFxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBnZXRWaWRlbyAoKSB7XG4gICAgLy8gU29tZXRpbWVzIGluIGlPUyBTYWZhcmksIEJsb2JzIChlc3BlY2lhbGx5IHRoZSBmaXJzdCBCbG9iIGluIHRoZSByZWNvcmRpbmdDaHVua3MgQXJyYXkpXG4gICAgLy8gaGF2ZSBlbXB0eSAndHlwZScgYXR0cmlidXRlcyAoZS5nLiAnJykgc28gd2UgbmVlZCB0byBmaW5kIGEgQmxvYiB0aGF0IGhhcyBhIGRlZmluZWQgJ3R5cGUnXG4gICAgLy8gYXR0cmlidXRlIGluIG9yZGVyIHRvIGRldGVybWluZSB0aGUgY29ycmVjdCBNSU1FIHR5cGUuXG4gICAgY29uc3QgbWltZVR5cGUgPSB0aGlzLnJlY29yZGluZ0NodW5rcy5maW5kKGJsb2IgPT4gYmxvYi50eXBlPy5sZW5ndGggPiAwKS50eXBlXG5cbiAgICBjb25zdCBmaWxlRXh0ZW5zaW9uID0gZ2V0RmlsZVR5cGVFeHRlbnNpb24obWltZVR5cGUpXG5cbiAgICBpZiAoIWZpbGVFeHRlbnNpb24pIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoYENvdWxkIG5vdCByZXRyaWV2ZSByZWNvcmRpbmc6IFVuc3VwcG9ydGVkIG1lZGlhIHR5cGUgXCIke21pbWVUeXBlfVwiYCkpXG4gICAgfVxuXG4gICAgY29uc3QgbmFtZSA9IGB3ZWJjYW0tJHtEYXRlLm5vdygpfS4ke2ZpbGVFeHRlbnNpb259YFxuICAgIGNvbnN0IGJsb2IgPSBuZXcgQmxvYih0aGlzLnJlY29yZGluZ0NodW5rcywgeyB0eXBlOiBtaW1lVHlwZSB9KVxuICAgIGNvbnN0IGZpbGUgPSB7XG4gICAgICBzb3VyY2U6IHRoaXMuaWQsXG4gICAgICBuYW1lLFxuICAgICAgZGF0YTogbmV3IEJsb2IoW2Jsb2JdLCB7IHR5cGU6IG1pbWVUeXBlIH0pLFxuICAgICAgdHlwZTogbWltZVR5cGUsXG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShmaWxlKVxuICB9XG5cbiAgZm9jdXMgKCkge1xuICAgIGlmICghdGhpcy5vcHRzLmNvdW50ZG93bikgcmV0dXJuXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aGlzLnVwcHkuaW5mbyh0aGlzLmkxOG4oJ3NtaWxlJyksICdzdWNjZXNzJywgMTUwMClcbiAgICB9LCAxMDAwKVxuICB9XG5cbiAgY2hhbmdlVmlkZW9Tb3VyY2UgKGRldmljZUlkKSB7XG4gICAgdGhpcy5zdG9wKClcbiAgICB0aGlzLnN0YXJ0KHsgZGV2aWNlSWQgfSlcbiAgfVxuXG4gIHVwZGF0ZVZpZGVvU291cmNlcyAoKSB7XG4gICAgdGhpcy5tZWRpYURldmljZXMuZW51bWVyYXRlRGV2aWNlcygpLnRoZW4oZGV2aWNlcyA9PiB7XG4gICAgICB0aGlzLnNldFBsdWdpblN0YXRlKHtcbiAgICAgICAgdmlkZW9Tb3VyY2VzOiBkZXZpY2VzLmZpbHRlcigoZGV2aWNlKSA9PiBkZXZpY2Uua2luZCA9PT0gJ3ZpZGVvaW5wdXQnKSxcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxuXG4gIHJlbmRlciAoKSB7XG4gICAgaWYgKCF0aGlzLndlYmNhbUFjdGl2ZSkge1xuICAgICAgdGhpcy5zdGFydCgpXG4gICAgfVxuXG4gICAgY29uc3Qgd2ViY2FtU3RhdGUgPSB0aGlzLmdldFBsdWdpblN0YXRlKClcblxuICAgIGlmICghd2ViY2FtU3RhdGUuY2FtZXJhUmVhZHkgfHwgIXdlYmNhbVN0YXRlLmhhc0NhbWVyYSkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPFBlcm1pc3Npb25zU2NyZWVuXG4gICAgICAgICAgaWNvbj17Q2FtZXJhSWNvbn1cbiAgICAgICAgICBpMThuPXt0aGlzLmkxOG59XG4gICAgICAgICAgaGFzQ2FtZXJhPXt3ZWJjYW1TdGF0ZS5oYXNDYW1lcmF9XG4gICAgICAgIC8+XG4gICAgICApXG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxDYW1lcmFTY3JlZW5cbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L2pzeC1wcm9wcy1uby1zcHJlYWRpbmdcbiAgICAgICAgey4uLndlYmNhbVN0YXRlfVxuICAgICAgICBvbkNoYW5nZVZpZGVvU291cmNlPXt0aGlzLmNoYW5nZVZpZGVvU291cmNlfVxuICAgICAgICBvblNuYXBzaG90PXt0aGlzLnRha2VTbmFwc2hvdH1cbiAgICAgICAgb25TdGFydFJlY29yZGluZz17dGhpcy5zdGFydFJlY29yZGluZ31cbiAgICAgICAgb25TdG9wUmVjb3JkaW5nPXt0aGlzLnN0b3BSZWNvcmRpbmd9XG4gICAgICAgIG9uRGlzY2FyZFJlY29yZGVkVmlkZW89e3RoaXMuZGlzY2FyZFJlY29yZGVkVmlkZW99XG4gICAgICAgIG9uU3VibWl0PXt0aGlzLnN1Ym1pdH1cbiAgICAgICAgb25Gb2N1cz17dGhpcy5mb2N1c31cbiAgICAgICAgb25TdG9wPXt0aGlzLnN0b3B9XG4gICAgICAgIGkxOG49e3RoaXMuaTE4bn1cbiAgICAgICAgbW9kZXM9e3RoaXMub3B0cy5tb2Rlc31cbiAgICAgICAgc2hvd1JlY29yZGluZ0xlbmd0aD17dGhpcy5vcHRzLnNob3dSZWNvcmRpbmdMZW5ndGh9XG4gICAgICAgIHNob3dWaWRlb1NvdXJjZURyb3Bkb3duPXt0aGlzLm9wdHMuc2hvd1ZpZGVvU291cmNlRHJvcGRvd259XG4gICAgICAgIHN1cHBvcnRzUmVjb3JkaW5nPXtzdXBwb3J0c01lZGlhUmVjb3JkZXIoKX1cbiAgICAgICAgcmVjb3JkaW5nPXt3ZWJjYW1TdGF0ZS5pc1JlY29yZGluZ31cbiAgICAgICAgbWlycm9yPXt0aGlzLiNlbmFibGVNaXJyb3J9XG4gICAgICAgIHNyYz17dGhpcy5zdHJlYW19XG4gICAgICAvPlxuICAgIClcbiAgfVxuXG4gIGluc3RhbGwgKCkge1xuICAgIHRoaXMuc2V0UGx1Z2luU3RhdGUoe1xuICAgICAgY2FtZXJhUmVhZHk6IGZhbHNlLFxuICAgICAgcmVjb3JkaW5nTGVuZ3RoU2Vjb25kczogMCxcbiAgICB9KVxuXG4gICAgY29uc3QgeyB0YXJnZXQgfSA9IHRoaXMub3B0c1xuICAgIGlmICh0YXJnZXQpIHtcbiAgICAgIHRoaXMubW91bnQodGFyZ2V0LCB0aGlzKVxuICAgIH1cblxuICAgIGlmICh0aGlzLm1lZGlhRGV2aWNlcykge1xuICAgICAgdGhpcy51cGRhdGVWaWRlb1NvdXJjZXMoKVxuXG4gICAgICB0aGlzLm1lZGlhRGV2aWNlcy5vbmRldmljZWNoYW5nZSA9ICgpID0+IHtcbiAgICAgICAgdGhpcy51cGRhdGVWaWRlb1NvdXJjZXMoKVxuXG4gICAgICAgIGlmICh0aGlzLnN0cmVhbSkge1xuICAgICAgICAgIGxldCByZXN0YXJ0U3RyZWFtID0gdHJ1ZVxuXG4gICAgICAgICAgY29uc3QgeyB2aWRlb1NvdXJjZXMsIGN1cnJlbnREZXZpY2VJZCB9ID0gdGhpcy5nZXRQbHVnaW5TdGF0ZSgpXG5cbiAgICAgICAgICB2aWRlb1NvdXJjZXMuZm9yRWFjaCgodmlkZW9Tb3VyY2UpID0+IHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50RGV2aWNlSWQgPT09IHZpZGVvU291cmNlLmRldmljZUlkKSB7XG4gICAgICAgICAgICAgIHJlc3RhcnRTdHJlYW0gPSBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG5cbiAgICAgICAgICBpZiAocmVzdGFydFN0cmVhbSkge1xuICAgICAgICAgICAgdGhpcy5zdG9wKClcbiAgICAgICAgICAgIHRoaXMuc3RhcnQoKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHVuaW5zdGFsbCAoKSB7XG4gICAgdGhpcy5zdG9wKClcbiAgICB0aGlzLnVubW91bnQoKVxuICB9XG5cbiAgb25Vbm1vdW50ICgpIHtcbiAgICB0aGlzLnN0b3AoKVxuICB9XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgc3RyaW5nczoge1xuICAgIHBsdWdpbk5hbWVDYW1lcmE6ICdDYW1lcmEnLFxuICAgIG5vQ2FtZXJhVGl0bGU6ICdDYW1lcmEgTm90IEF2YWlsYWJsZScsXG4gICAgbm9DYW1lcmFEZXNjcmlwdGlvbjogJ0luIG9yZGVyIHRvIHRha2UgcGljdHVyZXMgb3IgcmVjb3JkIHZpZGVvLCBwbGVhc2UgY29ubmVjdCBhIGNhbWVyYSBkZXZpY2UnLFxuICAgIHJlY29yZGluZ1N0b3BwZWRNYXhTaXplOiAnUmVjb3JkaW5nIHN0b3BwZWQgYmVjYXVzZSB0aGUgZmlsZSBzaXplIGlzIGFib3V0IHRvIGV4Y2VlZCB0aGUgbGltaXQnLFxuICAgIHN1Ym1pdFJlY29yZGVkRmlsZTogJ1N1Ym1pdCByZWNvcmRlZCBmaWxlJyxcbiAgICBkaXNjYXJkUmVjb3JkZWRGaWxlOiAnRGlzY2FyZCByZWNvcmRlZCBmaWxlJyxcbiAgICAvLyBTaG93biBiZWZvcmUgYSBwaWN0dXJlIGlzIHRha2VuIHdoZW4gdGhlIGBjb3VudGRvd25gIG9wdGlvbiBpcyBzZXQuXG4gICAgc21pbGU6ICdTbWlsZSEnLFxuICAgIC8vIFVzZWQgYXMgdGhlIGxhYmVsIGZvciB0aGUgYnV0dG9uIHRoYXQgdGFrZXMgYSBwaWN0dXJlLlxuICAgIC8vIFRoaXMgaXMgbm90IHZpc2libHkgcmVuZGVyZWQgYnV0IGlzIHBpY2tlZCB1cCBieSBzY3JlZW4gcmVhZGVycy5cbiAgICB0YWtlUGljdHVyZTogJ1Rha2UgYSBwaWN0dXJlJyxcbiAgICAvLyBVc2VkIGFzIHRoZSBsYWJlbCBmb3IgdGhlIGJ1dHRvbiB0aGF0IHN0YXJ0cyBhIHZpZGVvIHJlY29yZGluZy5cbiAgICAvLyBUaGlzIGlzIG5vdCB2aXNpYmx5IHJlbmRlcmVkIGJ1dCBpcyBwaWNrZWQgdXAgYnkgc2NyZWVuIHJlYWRlcnMuXG4gICAgc3RhcnRSZWNvcmRpbmc6ICdCZWdpbiB2aWRlbyByZWNvcmRpbmcnLFxuICAgIC8vIFVzZWQgYXMgdGhlIGxhYmVsIGZvciB0aGUgYnV0dG9uIHRoYXQgc3RvcHMgYSB2aWRlbyByZWNvcmRpbmcuXG4gICAgLy8gVGhpcyBpcyBub3QgdmlzaWJseSByZW5kZXJlZCBidXQgaXMgcGlja2VkIHVwIGJ5IHNjcmVlbiByZWFkZXJzLlxuICAgIHN0b3BSZWNvcmRpbmc6ICdTdG9wIHZpZGVvIHJlY29yZGluZycsXG4gICAgLy8gVXNlZCBhcyB0aGUgbGFiZWwgZm9yIHRoZSByZWNvcmRpbmcgbGVuZ3RoIGNvdW50ZXIuIFNlZSB0aGUgc2hvd1JlY29yZGluZ0xlbmd0aCBvcHRpb24uXG4gICAgLy8gVGhpcyBpcyBub3QgdmlzaWJseSByZW5kZXJlZCBidXQgaXMgcGlja2VkIHVwIGJ5IHNjcmVlbiByZWFkZXJzLlxuICAgIHJlY29yZGluZ0xlbmd0aDogJ1JlY29yZGluZyBsZW5ndGggJXtyZWNvcmRpbmdfbGVuZ3RofScsXG4gICAgLy8gVGl0bGUgb24gdGhlIOKAnGFsbG93IGFjY2Vzc+KAnSBzY3JlZW5cbiAgICBhbGxvd0FjY2Vzc1RpdGxlOiAnUGxlYXNlIGFsbG93IGFjY2VzcyB0byB5b3VyIGNhbWVyYScsXG4gICAgLy8gRGVzY3JpcHRpb24gb24gdGhlIOKAnGFsbG93IGFjY2Vzc+KAnSBzY3JlZW5cbiAgICBhbGxvd0FjY2Vzc0Rlc2NyaXB0aW9uOiAnSW4gb3JkZXIgdG8gdGFrZSBwaWN0dXJlcyBvciByZWNvcmQgdmlkZW8gd2l0aCB5b3VyIGNhbWVyYSwgcGxlYXNlIGFsbG93IGNhbWVyYSBhY2Nlc3MgZm9yIHRoaXMgc2l0ZS4nLFxuICB9LFxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzdXBwb3J0c01lZGlhUmVjb3JkZXIgKCkge1xuICAvKiBlc2xpbnQtZGlzYWJsZSBjb21wYXQvY29tcGF0ICovXG4gIHJldHVybiB0eXBlb2YgTWVkaWFSZWNvcmRlciA9PT0gJ2Z1bmN0aW9uJyAmJiAhIU1lZGlhUmVjb3JkZXIucHJvdG90eXBlXG4gICAgJiYgdHlwZW9mIE1lZGlhUmVjb3JkZXIucHJvdG90eXBlLnN0YXJ0ID09PSAnZnVuY3Rpb24nXG4gIC8qIGVzbGludC1lbmFibGUgY29tcGF0L2NvbXBhdCAqL1xufVxuIiwiLyogZXNsaW50LWVudiBicm93c2VyICovXG5jb25zdCBtYXJrZWQgPSByZXF1aXJlKCdtYXJrZWQnKVxuY29uc3QgZHJhZ2Ryb3AgPSByZXF1aXJlKCdkcmFnLWRyb3AnKVxuLy8gQWRkIFJvYm9kb2cgSlMuIEl0IGlzIGFkdmlzYWJsZSB0byBpbnN0YWxsIFJvYm9kb2cgZnJvbSBucG0veWFybi5cbi8vIEJ1dCBmb3IgZXhwZXJpbWVudGluZywgeW91IGNhbiB1c2UgYWxzbyBUcmFuc2xvYWRpdOKAmXMgQ0ROLCBFZGdseTpcbi8vIDxzY3JpcHQgc3JjPVwiaHR0cHM6Ly9yZWxlYXNlcy50cmFuc2xvYWRpdC5jb20vdXBweS9yb2JvZG9nL3YyLjEuMy9yb2JvZG9nLm1pbi5qc1wiPjwvc2NyaXB0PlxuY29uc3Qgcm9ib2RvZyA9IHJlcXVpcmUoJ0B1cHB5L3JvYm9kb2cnKVxuXG5jb25zdCBUUkFOU0xPQURJVF9FWEFNUExFX0tFWSA9ICczNWMxYWVkMDNmNTAxMWU5ODJiNmFmZTgyNTk5YjZhMCdcbmNvbnN0IFRSQU5TTE9BRElUX0VYQU1QTEVfVEVNUExBVEUgPSAnMGIyZWUyYmMyNWRjNDM2MTk3MDBjMmNlMGE3NTE2NGEnXG5cbi8qKlxuICogQSB0ZXh0YXJlYSBmb3IgbWFya2Rvd24gdGV4dCwgd2l0aCBzdXBwb3J0IGZvciBmaWxlIGF0dGFjaG1lbnRzLlxuICpcbiAqICMjIFVzYWdlXG4gKlxuICogYGBganNcbiAqIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCd0ZXh0YXJlYScpXG4gKiBjb25zdCBtZHR4dCA9IG5ldyBNYXJrZG93blRleHRhcmVhKGVsZW1lbnQpXG4gKiBtZHR4dC5pbnN0YWxsKClcbiAqIGBgYFxuICovXG5jbGFzcyBNYXJrZG93blRleHRhcmVhIHtcbiAgY29uc3RydWN0b3IgKGVsZW1lbnQpIHtcbiAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50XG4gICAgdGhpcy5jb250cm9scyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gICAgdGhpcy5jb250cm9scy5jbGFzc0xpc3QuYWRkKCdtZHR4dC1jb250cm9scycpXG4gICAgdGhpcy51cGxvYWRMaW5lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJylcbiAgICB0aGlzLnVwbG9hZExpbmUuc2V0QXR0cmlidXRlKCd0eXBlJywgJ2J1dHRvbicpXG4gICAgdGhpcy51cGxvYWRMaW5lLmNsYXNzTGlzdC5hZGQoJ2Zvcm0tdXBsb2FkJylcblxuICAgIHRoaXMudXBsb2FkTGluZS5hcHBlbmRDaGlsZChcbiAgICAgIGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCdUYXAgaGVyZSB0byB1cGxvYWQgYW4gYXR0YWNobWVudCcpKVxuICB9XG5cbiAgaW5zdGFsbCAoKSB7XG4gICAgY29uc3QgeyBlbGVtZW50IH0gPSB0aGlzXG4gICAgY29uc3Qgd3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gICAgd3JhcHBlci5jbGFzc0xpc3QuYWRkKCdtZHR4dCcpXG4gICAgZWxlbWVudC5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZCh3cmFwcGVyLCBlbGVtZW50KVxuICAgIHdyYXBwZXIuYXBwZW5kQ2hpbGQodGhpcy5jb250cm9scylcbiAgICB3cmFwcGVyLmFwcGVuZENoaWxkKGVsZW1lbnQpXG4gICAgd3JhcHBlci5hcHBlbmRDaGlsZCh0aGlzLnVwbG9hZExpbmUpXG5cbiAgICB0aGlzLnNldHVwVXBsb2FkTGluZSgpXG4gICAgdGhpcy5zZXR1cFRleHRhcmVhRHJvcCgpXG4gIH1cblxuICBzZXR1cFRleHRhcmVhRHJvcCAoKSB7XG4gICAgZHJhZ2Ryb3AodGhpcy5lbGVtZW50LCAoZmlsZXMpID0+IHtcbiAgICAgIHRoaXMudXBsb2FkRmlsZXMoZmlsZXMpXG4gICAgfSlcbiAgfVxuXG4gIHNldHVwVXBsb2FkTGluZSAoKSB7XG4gICAgdGhpcy51cGxvYWRMaW5lLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgdGhpcy5waWNrRmlsZXMoKVxuICAgIH0pXG4gIH1cblxuICByZXBvcnRVcGxvYWRFcnJvciAoZXJyKSB7XG4gICAgdGhpcy51cGxvYWRMaW5lLmNsYXNzTGlzdC5hZGQoJ2Vycm9yJylcbiAgICBjb25zdCBtZXNzYWdlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpXG4gICAgbWVzc2FnZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShlcnIubWVzc2FnZSkpXG4gICAgdGhpcy51cGxvYWRMaW5lLmluc2VydENoaWxkKG1lc3NhZ2UsIHRoaXMudXBsb2FkTGluZS5maXJzdENoaWxkKVxuICB9XG5cbiAgdW5yZXBvcnRVcGxvYWRFcnJvciAoKSB7XG4gICAgdGhpcy51cGxvYWRMaW5lLmNsYXNzTGlzdC5yZW1vdmUoJ2Vycm9yJylcbiAgICBjb25zdCBtZXNzYWdlID0gdGhpcy51cGxvYWRMaW5lLnF1ZXJ5U2VsZWN0b3IoJ21lc3NhZ2UnKVxuICAgIGlmIChtZXNzYWdlKSB7XG4gICAgICB0aGlzLnVwbG9hZExpbmUucmVtb3ZlQ2hpbGQobWVzc2FnZSlcbiAgICB9XG4gIH1cblxuICBpbnNlcnRBdHRhY2htZW50cyAoYXR0YWNobWVudHMpIHtcbiAgICBhdHRhY2htZW50cy5mb3JFYWNoKChhdHRhY2htZW50KSA9PiB7XG4gICAgICBjb25zdCB7IGZpbGUsIHRodW1iIH0gPSBhdHRhY2htZW50XG4gICAgICBjb25zdCBsaW5rID0gYFxcbltMQUJFTF0oJHtmaWxlLnNzbF91cmx9KVxcbmBcbiAgICAgIGNvbnN0IGxhYmVsVGV4dCA9IGBWaWV3IEZpbGUgJHtmaWxlLmJhc2VuYW1lfWBcbiAgICAgIGlmICh0aHVtYikge1xuICAgICAgICB0aGlzLmVsZW1lbnQudmFsdWUgKz0gbGluay5yZXBsYWNlKCdMQUJFTCcsIGAhWyR7bGFiZWxUZXh0fV0oJHt0aHVtYi5zc2xfdXJsfSlgKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5lbGVtZW50LnZhbHVlICs9IGxpbmsucmVwbGFjZSgnTEFCRUwnLCBsYWJlbFRleHQpXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIG1hdGNoRmlsZXNBbmRUaHVtYnMgKHJlc3VsdHMpIHtcbiAgICBjb25zdCBmaWxlc0J5SWQgPSB7fVxuICAgIGNvbnN0IHRodW1ic0J5SWQgPSB7fVxuXG4gICAgcmVzdWx0cy5mb3JFYWNoKChyZXN1bHQpID0+IHtcbiAgICAgIGlmIChyZXN1bHQuc3RlcE5hbWUgPT09ICd0aHVtYm5haWxzJykge1xuICAgICAgICB0aHVtYnNCeUlkW3Jlc3VsdC5vcmlnaW5hbF9pZF0gPSByZXN1bHRcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZpbGVzQnlJZFtyZXN1bHQub3JpZ2luYWxfaWRdID0gcmVzdWx0XG4gICAgICB9XG4gICAgfSlcblxuICAgIHJldHVybiBPYmplY3Qua2V5cyhmaWxlc0J5SWQpLm1hcCgoa2V5KSA9PiAoe1xuICAgICAgZmlsZSA6IGZpbGVzQnlJZFtrZXldLFxuICAgICAgdGh1bWIgOiB0aHVtYnNCeUlkW2tleV0sXG4gICAgfSkpXG4gIH1cblxuICB1cGxvYWRGaWxlcyAoZmlsZXMpIHtcbiAgICByb2JvZG9nLnVwbG9hZChmaWxlcywge1xuICAgICAgd2FpdEZvckVuY29kaW5nOiB0cnVlLFxuICAgICAgcGFyYW1zOiB7XG4gICAgICAgIGF1dGg6IHsga2V5OiBUUkFOU0xPQURJVF9FWEFNUExFX0tFWSB9LFxuICAgICAgICB0ZW1wbGF0ZV9pZDogVFJBTlNMT0FESVRfRVhBTVBMRV9URU1QTEFURSxcbiAgICAgIH0sXG4gICAgfSkudGhlbigocmVzdWx0KSA9PiB7XG4gICAgICBpZiAocmVzdWx0ID09PSBudWxsKSByZXR1cm5cbiAgICAgIHRoaXMuaW5zZXJ0QXR0YWNobWVudHMoXG4gICAgICAgIHRoaXMubWF0Y2hGaWxlc0FuZFRodW1icyhyZXN1bHQucmVzdWx0cylcbiAgICAgIClcbiAgICB9KS5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICBjb25zb2xlLmVycm9yKGVycilcbiAgICAgIHRoaXMucmVwb3J0VXBsb2FkRXJyb3IoZXJyKVxuICAgIH0pXG4gIH1cblxuICBwaWNrRmlsZXMgKCkge1xuICAgIHJvYm9kb2cucGljayh7XG4gICAgICB3YWl0Rm9yRW5jb2Rpbmc6IHRydWUsXG4gICAgICBwYXJhbXM6IHtcbiAgICAgICAgYXV0aDogeyBrZXk6IFRSQU5TTE9BRElUX0VYQU1QTEVfS0VZIH0sXG4gICAgICAgIHRlbXBsYXRlX2lkOiBUUkFOU0xPQURJVF9FWEFNUExFX1RFTVBMQVRFLFxuICAgICAgfSxcbiAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICAnd2ViY2FtJyxcbiAgICAgICAgJ3VybCcsXG4gICAgICAgICdpbnN0YWdyYW0nLFxuICAgICAgICAnZ29vZ2xlLWRyaXZlJyxcbiAgICAgICAgJ2Ryb3Bib3gnLFxuICAgICAgXSxcbiAgICB9KS50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgIGlmIChyZXN1bHQgPT09IG51bGwpIHJldHVyblxuICAgICAgdGhpcy5pbnNlcnRBdHRhY2htZW50cyhcbiAgICAgICAgdGhpcy5tYXRjaEZpbGVzQW5kVGh1bWJzKHJlc3VsdC5yZXN1bHRzKVxuICAgICAgKVxuICAgIH0pLmNhdGNoKChlcnIpID0+IHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKVxuICAgICAgdGhpcy5yZXBvcnRVcGxvYWRFcnJvcihlcnIpXG4gICAgfSlcbiAgfVxufVxuXG5jb25zdCB0ZXh0YXJlYSA9IG5ldyBNYXJrZG93blRleHRhcmVhKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNuZXcgdGV4dGFyZWEnKSlcbnRleHRhcmVhLmluc3RhbGwoKVxuXG5mdW5jdGlvbiByZW5kZXJTbmlwcGV0ICh0aXRsZSwgdGV4dCkge1xuICBjb25zdCB0ZW1wbGF0ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNzbmlwcGV0JylcbiAgY29uc3QgbmV3U25pcHBldCA9IGRvY3VtZW50LmltcG9ydE5vZGUodGVtcGxhdGUuY29udGVudCwgdHJ1ZSlcbiAgY29uc3QgdGl0bGVFbCA9IG5ld1NuaXBwZXQucXVlcnlTZWxlY3RvcignLnNuaXBwZXQtdGl0bGUnKVxuICBjb25zdCBjb250ZW50RWwgPSBuZXdTbmlwcGV0LnF1ZXJ5U2VsZWN0b3IoJy5zbmlwcGV0LWNvbnRlbnQnKVxuXG4gIHRpdGxlRWwuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodGl0bGUpKVxuICBjb250ZW50RWwuaW5uZXJIVE1MID0gbWFya2VkKHRleHQpXG5cbiAgY29uc3QgbGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNzbmlwcGV0cycpXG4gIGxpc3QuaW5zZXJ0QmVmb3JlKG5ld1NuaXBwZXQsIGxpc3QuZmlyc3RDaGlsZClcbn1cblxuZnVuY3Rpb24gc2F2ZVNuaXBwZXQgKHRpdGxlLCB0ZXh0KSB7XG4gIGNvbnN0IGlkID0gcGFyc2VJbnQobG9jYWxTdG9yYWdlLm51bVNuaXBwZXRzIHx8IDAsIDEwKVxuICBsb2NhbFN0b3JhZ2VbYHNuaXBwZXRfJHtpZH1gXSA9IEpTT04uc3RyaW5naWZ5KHsgdGl0bGUsIHRleHQgfSlcbiAgbG9jYWxTdG9yYWdlLm51bVNuaXBwZXRzID0gaWQgKyAxXG59XG5cbmZ1bmN0aW9uIGxvYWRTbmlwcGV0cyAoKSB7XG4gIGZvciAobGV0IGlkID0gMDsgbG9jYWxTdG9yYWdlW2BzbmlwcGV0XyR7aWR9YF0gIT0gbnVsbDsgaWQgKz0gMSkge1xuICAgIGNvbnN0IHsgdGl0bGUsIHRleHQgfSA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlW2BzbmlwcGV0XyR7aWR9YF0pXG4gICAgcmVuZGVyU25pcHBldCh0aXRsZSwgdGV4dClcbiAgfVxufVxuXG5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbmV3JykuYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgKGV2ZW50KSA9PiB7XG4gIGV2ZW50LnByZXZlbnREZWZhdWx0KClcblxuICBjb25zdCB0aXRsZSA9IGV2ZW50LnRhcmdldC5xdWVyeVNlbGVjdG9yKCdpbnB1dFtuYW1lPVwidGl0bGVcIl0nKS52YWx1ZSB8fFxuICAgICdVbm5hbWVkIFNuaXBwZXQnXG4gIGNvbnN0IHRleHQgPSB0ZXh0YXJlYS5lbGVtZW50LnZhbHVlXG5cbiAgc2F2ZVNuaXBwZXQodGl0bGUsIHRleHQpXG4gIHJlbmRlclNuaXBwZXQodGl0bGUsIHRleHQpXG5cbiAgZXZlbnQudGFyZ2V0LnF1ZXJ5U2VsZWN0b3IoJ2lucHV0JykudmFsdWUgPSAnJ1xuICBldmVudC50YXJnZXQucXVlcnlTZWxlY3RvcigndGV4dGFyZWEnKS52YWx1ZSA9ICcnXG59KVxuXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsICgpID0+IHtcbiAgbG9hZFNuaXBwZXRzKClcbn0pXG4iXX0=
